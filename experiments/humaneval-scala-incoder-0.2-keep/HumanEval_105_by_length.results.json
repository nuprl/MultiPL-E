{
  "language": "scala",
  "name": "HumanEval_105_by_length",
  "results": [
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val len = arr.length\n        val ones = arr.filter(_ <= 9).sortBy(_ - 1).reverse\n        val tens = arr.filter(_ <= 99).sortBy(_ - 10).reverse\n        val hundreds = arr.filter(_ <= 999).sortBy(_ - 100).reverse\n        val thousands = arr.filter(_ <= 9999).sortBy(_ - 1000).reverse\n        val tenThousands = arr.filter(_ <= 999999).sortBy(_ - 10000).reverse\n        val oneThousands = arr.filter(_ <= 9999999).sortBy(_ - 100000).reverse\n        val oneHundreds = arr.filter(_ <= 999999999).sortBy(_ - 1000000).reverse\n        val oneThousandThousands = arr.filter(_ <= 99999999999).sortBy(_ - 10000000).reverse\n        val oneHundredThousands = arr.filter(_ <= 999999999999).sortBy(_ - 10000000)\n        val oneHundredThousandThousands = arr.filter(_ <= 999999999999999).sortBy(_ - 100000000)\n        val oneHundredThousandThousands = arr.filter(_ <= 9999999999999999).sortBy(_ - 1000000000)\n        val oneHundredThousandThousands = arr.filter(_ <= 9999999999999999999).sortBy(_ - 1000000000)\n        val oneHundredThousandThousands = arr.filter(_ <= 99999999999999999999).sortBy(_ - 1000000000)\n        val oneHundredThousandThousands = arr.filter(_ <= 99999999999999999999999).sortBy(_ - 1000000000)\n        val oneHundredThousandThousands = arr.filter(_ <= 999999999999999999999999).sortBy(_ - 1000000000)\n        val oneHundredThousandThousands = arr.filter(_ <= 999999999999999999999999999).sortBy(_ - 1000000000)\n        val oneHundredThousandThousands = arr.filter(_ <= 9999999999999999999999999999).sortBy(_ - 1000000000)\n        val oneHundredThousandThousands = arr.filter(_ <= 9999999999999999999999999999999).sortBy(_ - 1000000000)\n        val oneHundredThousandThousands = arr.filter(_ <= 99999999999999999999999999999999).sortBy(_ - \n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmphl51916t.scala:40:102 --------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m99999999999999999999999999999999\u001b[0m).sortBy(_ - \n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmphl51916t.scala:32:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m9999999999999999\u001b[0m).sortBy(_ - \u001b[31m1000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneHundredThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneHundredThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmphl51916t.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m9999999999999999999\u001b[0m).sortBy(_ - \u001b[31m1000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneHundredThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneHundredThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmphl51916t.scala:34:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m99999999999999999999\u001b[0m).sortBy(_ - \u001b[31m1000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^",
      "stdout": "",
      "timestamp": 1659804004
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val one = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val two = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val three = List(\"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\")\n        val four = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val five = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val six = List(\"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\")\n        val seven = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val eight = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val nine = List(\"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\")\n        val ten = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val eleven = List(\"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\")\n        val twelve = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val thirteen = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val fourteen = List(\"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\")\n        val fifteen = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpfvynr4oj.scala:35:58 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfifteen\u001b[0m = List(\u001b[31m\"One\"\u001b[0m, \u001b[31m\"Two\"\u001b[0m, \u001b[31m\"Three\"\u001b[0m, \u001b[31m\"Four\"\u001b[0m, \"Five\n\u001b[31m\u001b[31m   |\u001b[0m                                                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 unclosed string literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmpfvynr4oj.scala:37:34 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 end of statement expected but '=' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfvynr4oj.scala:36:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfvynr4oj.scala:37:4 -------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    Not found: Fivedef\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "stdout": "",
      "timestamp": 1659804003
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val result = new mutable.ListBuffer[String]()\n        val len = arr.length\n        val ones = arr.filter(_ <= 9).sorted\n        val tens = arr.filter(_ <= 99).sorted\n        val hundreds = arr.filter(_ <= 999).sorted\n        val thousands = arr.filter(_ <= 9999).sorted\n        val tenThousands = arr.filter(_ <= 999999).sorted\n        val oneThousands = arr.filter(_ <= 9999999).sorted\n        val tenThousandThousands = arr.filter(_ <= 999999999).sorted\n        val oneThousandThousands = arr.filter(_ <= 99999999999).sorted\n        val tenThousandThousandThousands = arr.filter(_ <= 999999999).sorted\n        val oneThousandThousandThousands = arr.filter(_ <= 99999999999).sorted\n        val tenThousandThousandThousandThousands = arr.filter(_ <= 999999999).sorted\n        val oneThousandThousandThousandThousands = arr.filter(_ <= 99999999999).sorted\n        val tenThousandThousandThousandThousandThousands = arr.filter(_ <= 999999999).sorted\n        val oneThousandThousandThousandThousandThousands = arr.filter(_ <= 99999999999).sorted\n        val tenThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 999999999).sorted\n        val oneThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 99999999999).sorted\n        val tenThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 999999999).sorted\n        val oneThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 99999999999).sorted\n        val tenThousandThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 999999999).sorted\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 99999999999).sorted\n        val tenThousandThousandTh\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp6gt0mzcg.scala:44:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6gt0mzcg.scala:21:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.ListBuffer[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmp6gt0mzcg.scala:30:51 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m99999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                   number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp6gt0mzcg.scala:32:59 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m99999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                           ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp6gt0mzcg.scala:34:67 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m99999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                                   ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp6gt0mzcg.scala:36:75 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m99999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                 ",
      "stdout": "",
      "timestamp": 1659804006
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1 && x <= 9).toList\n        val tens = arr.filter(x => x >= 10 && x <= 99).toList\n        val hundreds = arr.filter(x => x >= 100 && x <= 999).toList\n        val thousands = arr.filter(x => x >= 1000 && x <= 9999).toList\n        val tenThousands = arr.filter(x => x >= 10000 && x <= 99999).toList\n        val oneThousands = arr.filter(x => x >= 100000 && x <= 999999).toList\n        val tenThousandThousands = arr.filter(x => x >= 1000000 && x <= 999999999).toList\n        val oneThousandThousands = arr.filter(x => x >= 10000000 && x <= 99999999999).toList\n        val tenThousandThousandThousands = arr.filter(x => x >= 1000000000 && x <= 999999999999).toList\n        val oneThousandThousandThousands = arr.filter(x => x >= 1000000000 && x <= 9999999999999).toList\n        val tenThousandThousandThousandThousands = arr.filter(x => x >= 100000000000 && x <= 9999999999999).toList\n        val oneThousandThousandThousandThousands = arr.filter(x => x >= 100000000000 && x <= 99999999999999).toList\n        val tenThousandThousandThousandThousands = arr.filter(x => x >= 1000000000000 && x <= 99999999999999).toList\n        val oneThousandThousandThousandThousands = arr.filter(x => x >= 1000000000000 && x <= 9999999999999).toList\n        val tenThousandThousandThousandThousands = arr.filter(x => x >= 100000000000000 && x <= 9999999999999).toList\n        val oneThousandThousandThousandThousands = arr.filter(x => x >= 100000000000000 && x <= 99999999999999).toList\n        val tenThousandThousandThousandThousands = arr.filter(x => x >= 10000000000000000 && x <= 9999999999999).toList\n        val oneThousandThousandThousandThousands = arr.filter(x => x >= 10000000000000000 && x <= 99999999999999).toList\n        val tenThousandThousandThousandThousands = arr.filter(x => x >= 100000000000000000 && x <= 9999999999999).toList\n        val oneThousandThousandThousandThousands = arr.filter(x => x >= 100000000000000000 && x <= 9999999999999).to\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpqm3lvrmo.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtenThousandThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000\u001b[0m && x <= \u001b[31m99999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mtenThousandThousandThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35mtenThousandThousandThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpqm3lvrmo.scala:34:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000\u001b[0m && x <= \u001b[31m9999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpqm3lvrmo.scala:35:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtenThousandThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000000\u001b[0m && x <= \u001b[31m9999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mtenThousandThousandThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35mtenThousandThousandThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpqm3lvrmo.scala",
      "stdout": "",
      "timestamp": 1659804006
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x <= 9 && x >= 1)\n        val tens = arr.filter(x => x <= 99 && x >= 10)\n        val hundreds = arr.filter(x => x <= 999 && x >= 100)\n        val thousands = arr.filter(x => x <= 9999 && x >= 1000)\n        val tenThousands = arr.filter(x => x <= 999999 && x >= 10000)\n        val oneThousands = arr.filter(x => x <= 9999999 && x >= 100000)\n        val oneHundreds = arr.filter(x => x <= 999999999 && x >= 1000000)\n        val oneThousandThousands = arr.filter(x => x <= 99999999999 && x >= 10000000)\n        val oneHundredThousands = arr.filter(x => x <= 999999999999 && x >= 100000000)\n        val oneThousandThousandThousands = arr.filter(x => x <= 999999999999999 && x >= 1000000000)\n        val oneHundredThousandThousands = arr.filter(x => x <= 999999999999999 && x >= 10000000000)\n        val oneThousandThousandThousandThousands = arr.filter(x => x <= 9999999999999999999 && x >= 100000000000)\n        val oneHundredThousandThousandThousands = arr.filter(x => x <= 999999999999999999 && x >= 1000000000000)\n        val oneThousandThousandThousandThousands = arr.filter(x => x <= 99999999999999999999999 && x >= 10000000000000)\n        val oneHundredThousandThousandThousandThousands = arr.filter(x => x <= 999999999999999999999 && x >= 100000000000000) \n        val oneThousandThousandThousandThousandThousands = arr.filter(x => x <= 99999999999999999999999 && x >= 1000000000000000)\n        val oneHundredThousandThousandThousandThousands = arr.filter(x => x <= 999999999999999999999999 && x >= 10000000000000000)\n        val oneThousandThousandThousandThousandThousands = arr.filter(x => x <= 999999999999999999999999999 && x >= 100000000000000000)\n        val oneHundredThousandThousandThousandThousandThousands = arr.filter(x => x <= 999999999999999999999999999 && x >= 1000000000000000000)\n        val oneThousand\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp3yg7nb0n.scala:41:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp3yg7nb0n.scala:34:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x <= \u001b[31m99999999999999999999999\u001b[0m && x >= \u001b[31m10000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp3yg7nb0n.scala:37:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x <= \u001b[31m999999999999999999999999\u001b[0m && x >= \u001b[31m10000000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneHundredThousandThousandThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneHundredThousandThousandThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp3yg7nb0n.scala:38:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x <= \u001b[31m999999999999999999999999999\u001b[0m && x >= \u001b[31m100000000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousa",
      "stdout": "",
      "timestamp": 1659804006
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 10).map(x => s\"One\")\n        val twos = arr.filter(x => x < 20).map(x => s\"Two\")\n        val threes = arr.filter(x => x < 30).map(x => s\"Three\")\n        val fours = arr.filter(x => x < 40).map(x => s\"Four\")\n        val fives = arr.filter(x => x < 50).map(x => s\"Five\")\n        val sixes = arr.filter(x => x < 60).map(x => s\"Six\")\n        val sevens = arr.filter(x => x < 70).map(x => s\"Seven\")\n        val eights = arr.filter(x => x < 80).map(x => s\"Eight\")\n        val nines = arr.filter(x => x < 90).map(x => s\"Nine\")\n        val result = ones + twos + threes + fours + fives + sixes + sevens + eights + nines\n        val reversed = result.reverse\n        reversed.map(x => x.toString).filter(x => x != \"\")\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmps1mtoh5s.scala:30:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = ones + twos + threes + fours + fives + sixes + sevens + eights + nines\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n1 error found\n",
      "stdout": "",
      "timestamp": 1659804007
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val m = arr.length\n        val n = arr.map(_.toString).map(_.length).max\n        val result = new Array[String](m)\n        var i = 0\n        while (i < m) {\n            val j = i + 1\n            val k = j + 1\n            val l = k + 1\n            val m = l + 1\n            val n = m + 1\n            val o = n + 1\n            val p = o + 1\n            val q = p + 1\n            val r = q + 1\n            val s = r + 1\n            val t = s + 1\n            val u = t + 1\n            val v = u + 1\n            val w = v + 1\n            val x = w + 1\n            val y = x + 1\n            val z = y + 1\n            val a = z + 1\n            val b = a + 1\n            val c = b + 1\n            val d = c + 1\n            val e = d + 1\n            val f = e + 1\n            val g = f + 1\n            val h = g + 1\n            val i = h + 1\n            val j = i + 1\n            val k = j + 1\n            val l = k + 1\n            val m = l + 1\n            val n = m + 1\n            val o = n + 1\n            val p = o + 1\n            val q = p + 1\n            val r = q + 1\n            val s = r + 1\n            val t = s + 1\n            val u = t + 1\n            val v = u + 1\n            val w = v + 1\n            val x = w + 1\n            val y = x + 1\n            val z = y + 1\n            val a = z + 1\n            val b = a + 1\n            val c = b + 1\n            val d = c + 1\n            val e = d + 1\n            val f = e + 1\n            val g = f + 1\n            val h = g + 1\n            val i = h + 1\n            val j = i + 1\n            val k = j + 1\n            val l = k + 1\n            val m = l + 1\n            val n = m + 1\n            val o = n + 1\n            val p = o + 1\n            val q = p + 1\n            val r = q + 1\n            val s = r + 1\n            val t = s + 1\n            val u = t + 1\n            val v = u + 1\n            val w = v + 1\n            val x = w + 1\n            val y = x + 1\n            val z = y + 1\n            val a = z + 1\n            val b = a + 1\n            val c = b + 1\n            val d = c + 1\n            val e = d + 1\n            val f = e + 1\n            val g = f + 1\n            val h = g + 1\n            val i = h + 1\n            val j = i + 1\n            val k = j + 1\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpq8aeq87o.scala:116:0 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m116 |\u001b[0m\n\u001b[31m\u001b[31m    |\u001b[0m^\u001b[0m\n\u001b[31m    |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpq8aeq87o.scala:52:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mj\u001b[0m = i + \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mj is already defined as \u001b[33mvalue\u001b[0m \u001b[35mj\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpq8aeq87o.scala:53:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m53 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mk\u001b[0m = j + \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mk is already defined as \u001b[33mvalue\u001b[0m \u001b[35mk\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpq8aeq87o.scala:54:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m54 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36ml\u001b[0m = k + \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0ml is already defined as \u001b[33mvalue\u001b[0m \u001b[35ml\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpq8aeq87o.scala:55:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m55 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mm\u001b[0m = l + \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mm is already defined as \u001b[33mvalue\u001b[0m \u001b[35mm\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpq8aeq87o.scala:56:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m56 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mn\u001b[0m = m + \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mn is already defined as \u001b[33mvalue\u001b[0m \u001b[35mn\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b",
      "stdout": "",
      "timestamp": 1659804006
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 10)\n        val tens = arr.filter(x => x >= 10 && x < 100)\n        val hundreds = arr.filter(x => x >= 100 && x < 1000)\n        val thousands = arr.filter(x => x >= 1000)\n        val reversed = arr.reverse\n        val onesReversed = reverse(ones)\n        val tensReversed = reverse(tens)\n        val hundredsReversed = reverse(hundreds)\n        val thousandsReversed = reverse(thousands)\n        val onesReversedString = onesReversed.mkString(\"\")\n        val tensReversedString = tensReversed.mkString(\"\")\n        val hundredsReversedString = hundredsReversed.mkString(\"\")\n        val thousandsReversedString = thousandsReversed.mkString(\"\")\n        val onesReversedStringList = onesReversedString.split(\",\")\n        val tensReversedStringList = tensReversedString.split(\",\")\n        val hundredsReversedStringList = hundredsReversedString.split(\",\")\n        val thousandsReversedStringList = thousandsReversedString.split(\",\")\n        val onesReversedStringListLength = onesReversedStringList.length\n        val tensReversedStringListLength = tensReversedStringList.length\n        val hundredsReversedStringListLength =hundredsReversedStringList.length\n        val thousandsReversedStringListLength = thousandsReversedStringList.length\n        val onesReversedStringListLength = onesReversedStringListLength / 2\n        val tensReversedStringListLength = tensReversedStringListLength / 2\n        val hundredsReversedStringListLength =hundredsReversedStringListLength / 2\n        val thousandsReversedStringListLength = thousandsReversedStringListLength / 2\n        val onesReversedStringListLength = onesReversedStringListLength * 2\n        val tensReversedStringListLength = tensReversedStringListLength * 2\n        val hundredsReversedStringListLength =hundredsReversedStringListLength * 2\n        val thousandsReversedStringListLength = thousandsReversedStringListLength * 2\n        val onesReversedStringListLength = onesReversedStringListLength * 3\n        val tensReversedStringListLength = tensReversedStringListLength * 3\n        val hundredsReversed\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpidcwmr6l.scala:53:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m53 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpidcwmr6l.scala:42:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesReversedStringListLength\u001b[0m = onesReversedStringListLength / \u001b[31m2\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0monesReversedStringListLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35monesReversedStringListLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpidcwmr6l.scala:43:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtensReversedStringListLength\u001b[0m = tensReversedStringListLength / \u001b[31m2\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mtensReversedStringListLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mtensReversedStringListLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpidcwmr6l.scala:44:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhundredsReversedStringListLength\u001b[0m =hundredsReversedStringListLength / \u001b[31m2\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mhundredsReversedStringListLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mhundredsReversedStringListLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpidcwmr6l.scala:45:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mthousandsReversedStringListLength\u001b[0m = thousandsReve",
      "stdout": "",
      "timestamp": 1659804005
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1 && x <= 9).toList\n        val tens = arr.filter(x => x >= 10 && x <= 99).toList\n        val hundreds = arr.filter(x => x >= 100 && x <= 999).toList\n        val thousands = arr.filter(x => x >= 1000 && x <= 9999).toList\n        val tenThousands = arr.filter(x => x >= 10000 && x <= 99999).toList\n        val oneThousands = arr.filter(x => x >= 100000 && x <= 999999).toList\n        val tenThousandsOnes = arr.filter(x => x >= 1000000 && x <= 999999999).toList\n        val oneThousandsOnes = arr.filter(x => x >= 10000000 && x <= 99999999999).toList\n        val tenThousandsOnesOnes = arr.filter(x => x >= 1000000000 && x <= 999999999999).toList\n        val oneThousandsOnesOnes = arr.filter(x => x >= 1000000000 && x <= 999999999).toList\n        val tenThousandsOnesOnesOnes = arr.filter(x => x >= 1000000000 && x <= 99999999999).toList\n        val oneThousandsOnesOnesOnes = arr.filter(x => x >= 1000000000 && x <= 999999999).toList\n        val tenThousandsOnesOnesOnesOnes = arr.filter(x => x >= 1000000000 && x <= 99999999999).toList\n        val oneThousandsOnesOnesOnesOnesOnes = arr.filter(x => x >= 1000000000 && x <= 999999999).toList\n        val tenThousandsOnesOnesOnesOnesOnesOnes = arr.filter(x => x >= 1000000000 && x <= 99999999999).toList\n        val oneThousandsOnesOnesOnesOnesOnesOnesOnes = arr.filter(x => x >= 1000000000 && x <= 999999999).toList\n        val tenThousandsOnesOnesOnesOnesOnesOnesOnesOnes = arr.filter(x => x >= 1000000000 && x <= 99999999999).toList\n        val oneThousandsOnesOnesOnesOnesOnesOnesOnesOnesOnes = arr.filter(x => x >= 1000000000 && x <= 999999999).toList\n        val tenThousandsOnesOnesOnesOnesOnesOnesOnesOnesOnesOnes = arr.filter(x => x >= 1000000000 && x <= 99999999999).toList\n        val oneThousandsOne\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpyttnvf95.scala:41:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpyttnvf95.scala:28:69 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandsOnes\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000\u001b[0m && x <= \u001b[31m99999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                     ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpyttnvf95.scala:29:75 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtenThousandsOnesOnes\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x <= \u001b[31m999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                           ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpyttnvf95.scala:31:79 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtenThousandsOnesOnesOnes\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x <= \u001b[31m99999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                               ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpyttnvf95.scala:33:83 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtenThousandsOnesOnesOnesOnes\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x <= \u001b[31m99999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                   ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpyttnvf95.scala:35:91 ------",
      "stdout": "",
      "timestamp": 1659804006
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val result = new mutable.ListBuffer[String]()\n        val ones = arr.filter(x => x <= 9 && x >= 1).sort\n        val tens = arr.filter(x => x <= 99 && x >= 10).sort\n        val hundreds = arr.filter(x => x <= 999 && x >= 100).sort\n        val thousands = arr.filter(x => x <= 9999 && x >= 1000).sort\n        val tenThousands = arr.filter(x => x <= 999999 && x >= 100000).sort\n        val oneThousands = arr.filter(x => x <= 9999999 && x >= 1000000).sort\n        val oneHundreds = arr.filter(x => x <= 999999999 && x >= 10000000).sort\n        val oneThousandThousands = arr.filter(x => x <= 99999999999 && x >= 100000000).sort\n        val oneHundredThousands = arr.filter(x => x <= 999999999999 && x >= 1000000000).sort\n        val oneHundredThousandThousands = arr.filter(x => x <= 999999999999999 && x >= 10000000000).sort\n        val oneHundredThousandThousandThousands = arr.filter(x => x <= 9999999999999999999 && x >= 100000000000).sort\n        val oneHundredThousandThousandThousandThousands = arr.filter(x => x <= 99999999999999999999999 && x >= 1000000000000).sort\n        val oneHundredThousandThousandThousandThousandThousands = arr.filter(x => x <= 999999999999999999999999999 && x >= 10000000000000).sort\n        val oneHundredThousandThousandThousandThousandThousandThousands = arr.filter(x => x <= 999999999999999999999999999 && x >= 100000000000000).sort\n        val oneHundredThousandThousandThousandThousandThousandThousands = arr.filter(x => x <= 9999999999999999999999999999999 && x >= 1000000000000000).sort\n        val oneHundredThousandThousandThousandThousandThousandThousandThousands = arr.filter(x => x <= 99999999999999999999999999999999999 && x >= 10000000000000000).sort\n        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousands = arr.filter(x => x <= 99999999999999999999\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp9k7zdnoy.scala:39:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp9k7zdnoy.scala:36:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousandThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x <= \u001b[31m9999999999999999999999999999999\u001b[0m && x >= \u001b[31m1000000000000000\u001b[0m).sort\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneHundredThousandThousandThousandThousandThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneHundredThousandThousandThousandThousandThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9k7zdnoy.scala:21:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.ListBuffer[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9k7zdnoy.scala:22:53 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mones\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x <= \u001b[31m9\u001b[0m && x >= \u001b[31m1\u001b[0m).sort\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sort is not a member of List[Long] - did you mean List[Long].sortBy?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9k7zdnoy.scala:23:55 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtens\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x <= \u001b[31m99\u001b[0m && x >= \u001b[31m10\u001b[0m).sort\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^^^^^^^^^^^^^^^^^",
      "stdout": "",
      "timestamp": 1659804008
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(_ <= 9).sorted\n        val tens = arr.filter(_ <= 99).sorted\n        val hundreds = arr.filter(_ <= 999).sorted\n        val thousands = arr.filter(_ <= 9999).sorted\n        val tenThousands = arr.filter(_ <= 999999).sorted\n        val oneThousands = arr.filter(_ <= 9999999).sorted\n        val oneHundreds = arr.filter(_ <= 999999999).sorted\n        val oneThousandThousands = arr.filter(_ <= 99999999999).sorted\n        val oneHundredThousands = arr.filter(_ <= 999999999999).sorted\n        val oneHundredThousandThousands = arr.filter(_ <= 999999999999999).sorted\n        val oneHundredThousandThousandThousands = arr.filter(_ <= 999999999999999999).sorted\n        val oneHundredThousandThousandThousandThousands = arr.filter(_ <= 999999999999999999999).sorted\n        val oneHundredThousandThousandThousandThousandThousands = arr.filter(_ <= 99999999999999999999989).sorted\n        val oneHundredThousandThousandThousandThousandThousands = arr.filter(_ <= 9999999999999999999998989).sorted\n        val oneHundredThousandThousandThousandThousandThousands = arr.filter(_ <= 999999999999999999999898989).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 99999999999999999999989898989).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 9999999999999999999998989898989).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 99999999999999999999989898989898989).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 999999999999999999999898989898989898989).sorted\n        val oneHundredThousandThousand\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpo15v_h_9.scala:41:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpo15v_h_9.scala:34:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousandThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m9999999999999999999998989\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneHundredThousandThousandThousandThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneHundredThousandThousandThousandThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpo15v_h_9.scala:35:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousandThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m999999999999999999999898989\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneHundredThousandThousandThousandThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneHundredThousandThousandThousandThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpo15v_h_9.scala:37:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousandThousandThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m9999999999999999999998989898989\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneHundredThousandThousandThousandThousandThousandThousands is already ",
      "stdout": "",
      "timestamp": 1659804007
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x <= 9 && x >= 1).sortBy(x => x).reverse\n        val tens = arr.filter(x => x <= 99 && x >= 10).sortBy(x => x).reverse\n        val hundreds = arr.filter(x => x <= 999 && x >= 100).sortBy(x => x).reverse\n        val thousands = arr.filter(x => x <= 9999 && x >= 1000).sortBy(x => x).reverse\n        val tenThousands = arr.filter(x => x <= 999999 && x >= 10000).sortBy(x => x).reverse\n        val oneThousands = arr.filter(x => x <= 9999999 && x >= 100000).sortBy(x => x).reverse\n        val oneHundreds = arr.filter(x => x <= 999999999 && x >= 1000000).sortBy(x => x).reverse\n        val oneThousandThousands = arr.filter(x => x <= 99999999999 && x >= 10000000).sortBy(x => x).reverse\n        val oneHundredThousands = arr.filter(x => x <= 999999999 && x >= 100000000).sortBy(x => x).reverse\n        val oneHundredThousandThousands = arr.filter(x => x <= 99999999999 && x >= 1000000000).sortBy(x => x).reverse\n        val oneHundredThousandThousandThousands = arr.filter(x => x <= 99999999999 && x >= 10000000000).sortBy(x => x).reverse\n        val oneHundredThousandThousandThousandThousands = arr.filter(x => x <= 99999999999 && x >= 100000000000).sortBy(x => x).reverse\n        val oneHundredThousandThousandThousandThousandThousands = arr.filter(x => x <= 99999999999 && x >= 1000000000000).sortBy(x => x).reverse\n        val oneHundredThousandThousandThousandThousandThousandThousands = arr.filter(x => x <= 99999999999 && x >= 10000000000000).sortBy(x => x).reverse\n        val oneHundredThousandThousandThousandThousandThousandThousandThousands = arr.filter(x => x <= 99999999999 && x >= 100000000000000).sortBy(x => x).reverse\n        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousands = arr.filter(x => x <= 99999999999 && x >= 1000000000000000).sortBy(x \n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpdpjclsda.scala:37:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpdpjclsda.scala:28:56 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x <= \u001b[31m99999999999\u001b[0m && x >= \u001b[31m10000000\u001b[0m).sortBy(\u001b[36mx\u001b[0m => x).reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpdpjclsda.scala:30:63 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x <= \u001b[31m99999999999\u001b[0m && x >= \u001b[31m1000000000\u001b[0m).sortBy(\u001b[36mx\u001b[0m => x).reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpdpjclsda.scala:31:71 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x <= \u001b[31m99999999999\u001b[0m && x >= \u001b[31m10000000000\u001b[0m).sortBy(\u001b[36mx\u001b[0m => x).reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                                                       ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpdpjclsda.scala:31:91 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x <= \u001b[31m99999999999\u001b[0m && x >= \u001b[31m10000000000\u001b[0m).sortBy(\u001b[36mx\u001b[0m => x).reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                           ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        ",
      "stdout": "",
      "timestamp": 1659804006
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1 && x <= 9).toList\n        val tens = arr.filter(x => x >= 10 && x <= 99).toList\n        val hundreds = arr.filter(x => x >= 100 && x <= 999).toList\n        val thousands = arr.filter(x => x >= 1000 && x <= 9999).toList\n        val tenThousands = arr.filter(x => x >= 10000 && x <= 99999).toList\n        val oneThousands = arr.filter(x => x >= 100000 && x <= 999999).toList\n        val oneHundreds = arr.filter(x => x >= 1000000 && x <= 999999999).toList\n        val oneThousandHundreds = arr.filter(x => x >= 1000000000 && x <= 99999999999).toList\n        val oneThousandThousands = arr.filter(x => x >= 10000000000 && x <= 9999999998).toList\n        val oneHundredThousands = arr.filter(x => x >= 100000000000 && x <= 999999999998).toList\n        val oneHundredThousandHundreds = arr.filter(x => x >= 1000000000000 && x <= 9999999999987).toList\n        val oneHundredThousandThousands = arr.filter(x => x >= 10000000000000 && x <= 99999999999876).toList\n        val oneHundredThousandThousandHundreds = arr.filter(x => x >= 100000000000000 && x <= 9999999999987654).toList\n        val oneHundredThousandThousandThousands = arr.filter(x => x >= 1000000000000000 && x <= 99999999999876543).toList\n        val oneHundredThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000000 && x <= 999999999998765432).toList\n        val oneHundredThousandThousandThousandThousands = arr.filter(x => x >= 100000000000000000 && x <= 9999999999987654321).toList\n        val oneHundredThousandThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000000000 && x <= 999999999998765432109).toList\n        val oneHundredThousandThousandThousandThousandThousands = arr.filter(x => x >= 10000000000000000000 && x <= 99999999999876543210987).toList\n        val oneHundredThousandThousandThousandThousandThous\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpzzb4ir8h.scala:40:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpzzb4ir8h.scala:28:74 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x <= \u001b[31m99999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpzzb4ir8h.scala:29:56 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000\u001b[0m && x <= \u001b[31m9999999998\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpzzb4ir8h.scala:29:76 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000\u001b[0m && x <= \u001b[31m9999999998\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                            ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpzzb4ir8h.scala:30:55 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000\u001b[0m && x <= \u001b[31m999999999998\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                       number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpzzb4ir8h.scala:30:76 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |",
      "stdout": "",
      "timestamp": 1659804004
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x % 10 == 1).map(x => s\"One\")\n        val twos = arr.filter(x => x % 10 == 2).map(x => s\"Two\")\n        val threes = arr.filter(x => x % 10 == 3).map(x => s\"Three\")\n        val fours = arr.filter(x => x % 10 == 4).map(x => s\"Four\")\n        val fives = arr.filter(x => x % 10 == 5).map(x => s\"Five\")\n        val sixes = arr.filter(x => x % 10 == 6).map(x => s\"Six\")\n        val sevens = arr.filter(x => x % 10 == 7).map(x => s\"Seven\")\n        val eights = arr.filter(x => x % 10 == 8).map(x => s\"Eight\")\n        val nines = arr.filter(x => x % 10 == 9).map(x => s\"Nine\")\n        val result = ones + twos + threes + fours + fives + sixes + sevens + eights + nines\n        val reversed = result.reverse\n        reversed.map(x => x.toString.replaceAll(\"\\\\D\", \"\"))\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp5n6ml2nh.scala:30:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = ones + twos + threes + fours + fives + sixes + sevens + eights + nines\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n1 error found\n",
      "stdout": "",
      "timestamp": 1659804007
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val result = new mutable.ListBuffer[String]()\n        val one = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val ten = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val hundred = List(\"Hundred\", \"Thousand\", \"Million\", \"Billion\", \"Trillion\", \"Quadrillion\", \"Quintillion\", \"Sextillion\", \"Septillion\", \"Octillion\", \"Nonillion\")\n        val thousand = List(\"Thousand\", \"Million\", \"Billion\", \"Trillion\", \"Quadrillion\", \"Quintillion\", \"Sextillion\", \"Septillion\", \"Octillion\", \"Nonillion\")\n        val million = List(\"Million\", \"Billion\", \"Trillion\", \"Quadrillion\", \"Quintillion\", \"Sextillion\", \"Septillion\", \"Octillion\", \"Nonillion\")\n        val billion = List(\"Billion\", \"Trillion\", \"Quadrillion\", \"Quintillion\", \"Sextillion\", \"Septillion\", \"Octillion\", \"Nonillion\")\n        val trillion = List(\"Trillion\", \"Quadrillion\", \"Quintillion\", \"Sextillion\", \"Septillion\", \"Octillion\", \"Nonillion\")\n        val quadrillion = List(\"Quadrillion\", \"Quintillion\", \"Sextillion\", \"Septillion\", \"Octillion\", \"Nonillion\")\n        val quintillion = List(\"Quintillion\", \"Sextillion\", \"Septillion\", \"Octillion\", \"Nonillion\")\n        val sextillion = List(\"Sextillion\", \"Septillion\", \"Octillion\", \"Nonillion\")\n        val septillion = List(\"Septillion\", \"Octillion\", \"Nonillion\")\n        val octillion = List(\"Octillion\", \"Nonillion\")\n        val nonillion = List(\"Nonillion\")\n        val million = List(\"Million\", \"Billion\", \"Trillion\", \"Quadrillion\", \"Qu\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpa8zckjzf.scala:35:76 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmillion\u001b[0m = List(\u001b[31m\"Million\"\u001b[0m, \u001b[31m\"Billion\"\u001b[0m, \u001b[31m\"Trillion\"\u001b[0m, \u001b[31m\"Quadrillion\"\u001b[0m, \"Qu\n\u001b[31m\u001b[31m   |\u001b[0m                                                                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 unclosed string literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmpa8zckjzf.scala:37:34 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 end of statement expected but '=' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpa8zckjzf.scala:21:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.ListBuffer[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpa8zckjzf.scala:36:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpa8zckjzf.scala:37:4 -------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    Not found: Qudef\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "stdout": "",
      "timestamp": 1659804005
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val result = new mutable.ListBuffer[String]()\n        val ones = arr.filter(_ <= 9).sorted\n        val tens = arr.filter(_ <= 99).sorted\n        val hundreds = arr.filter(_ <= 999).sorted\n        val thousands = arr.filter(_ <= 9999).sorted\n        val tenThousands = arr.filter(_ <= 999999).sorted\n        val oneThousands = arr.filter(_ <= 9999999).sorted\n        val tenThousandThousands = arr.filter(_ <= 999999999).sorted\n        val oneThousandThousands = arr.filter(_ <= 99999999999).sorted\n        val tenThousandThousandThousands = arr.filter(_ <= 999999999).sorted\n        val oneThousandThousandThousands = arr.filter(_ <= 99999999999).sorted\n        val tenThousandThousandThousandThousands = arr.filter(_ <= 999999999).sorted\n        val oneThousandThousandThousandThousands = arr.filter(_ <= 99999999999).sorted\n        val tenThousandThousandThousandThousandThousands = arr.filter(_ <= 999999999).sorted\n        val oneThousandThousandThousandThousandThousands = arr.filter(_ <= 99999999999).sorted\n        val tenThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 999999999).sorted\n        val oneThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 99999999999).sorted\n        val tenThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 999999999).sorted\n        val oneThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 99999999999).sorted\n        val tenThousandThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 999999999).sorted\n        val oneThousandThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 99999999999).sorted\n        val tenThousandThousandThousandThousandThousandTh\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp59hr4h6b.scala:43:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp59hr4h6b.scala:21:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.ListBuffer[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmp59hr4h6b.scala:29:51 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m99999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                   number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp59hr4h6b.scala:31:59 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m99999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                           ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp59hr4h6b.scala:33:67 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m99999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                                   ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp59hr4h6b.scala:35:75 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m99999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                 ",
      "stdout": "",
      "timestamp": 1659804006
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1 && x <= 9).toList\n        val tens = arr.filter(x => x >= 10 && x <= 99).toList\n        val hundreds = arr.filter(x => x >= 100 && x <= 999).toList\n        val thousands = arr.filter(x => x >= 1000 && x <= 9999).toList\n        val tenThousands = arr.filter(x => x >= 10000 && x <= 99999).toList\n        val oneThousands = arr.filter(x => x >= 100000 && x <= 999999).toList\n        val oneHundreds = arr.filter(x => x >= 1000000 && x <= 999999999).toList\n        val oneThousandHundreds = arr.filter(x => x >= 1000000000 && x <= 99999999999).toList\n        val oneThousandThousandHundreds = arr.filter(x => x >= 100000000000 && x <= 999999999999).toList\n        val oneThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000 && x <= 999999999999999).toList\n        val oneThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000 && x <= 9999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000000 && x <= 99999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000000001 && x <= 999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000000002 && x <= 999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000000003 && x <= 999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000000004 && x <= 999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousand\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp3zx9zvt1.scala:38:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp3zx9zvt1.scala:35:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000000003\u001b[0m && x <= \u001b[31m999999999999999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousandThousandThousandThousandHundreds is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousandThousandThousandThousandHundreds\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- Error: /tmp/tmp3zx9zvt1.scala:28:74 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x <= \u001b[31m99999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp3zx9zvt1.scala:29:63 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000\u001b[0m && x <= \u001b[31m999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp3zx9zvt1.scala:29:84 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mon",
      "stdout": "",
      "timestamp": 1659804007
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1 && x <= 9).toList\n        val tens = arr.filter(x => x >= 10 && x <= 99).toList\n        val hundreds = arr.filter(x => x >= 100 && x <= 999).toList\n        val thousands = arr.filter(x => x >= 1000 && x <= 9999).toList\n        val tenThousands = arr.filter(x => x >= 10000 && x <= 99999).toList\n        val oneThousands = arr.filter(x => x >= 100000 && x <= 999999).toList\n        val oneHundreds = arr.filter(x => x >= 1000000 && x <= 999999999).toList\n        val oneThousandThousands = arr.filter(x => x >= 10000000 && x <= 99999999999).toList\n        val oneThousandHundreds = arr.filter(x => x >= 1000000000 && x <= 999999999).toList\n        val oneHundredThousands = arr.filter(x => x >= 100000000 && x <= 999999999).toList\n        val oneHundredThousandThousands = arr.filter(x => x >= 1000000000 && x <= 99999999999).toList\n        val oneHundredThousandHundreds = arr.filter(x => x >= 10000000000 && x <= 999999999).toList\n        val oneHundredThousandThousandHundreds = arr.filter(x => x >= 100000000000 && x <= 99999999999).toList\n        val oneHundredThousandHundredThousands = arr.filter(x => x >= 1000000000000 && x <= 999999999).toList\n        val oneHundredThousandHundredThousandHundreds = arr.filter(x => x >= 10000000000000 && x <= 99999999999).toList\n        val oneHundredThousandHundredThousandHundredThousands = arr.filter(x => x >= 100000000000000 && x <= 999999999).toList\n        val oneHundredThousandHundredThousandHundredThousandHundreds = arr.filter(x => x >= 1000000000000000 && x <= 99999999999).toList\n        val oneHundredThousandHundredThousandHundredThousandHundredThousands = arr.filter(x => x >= 10000000000000000 && x <= 999999999).toList\n        val oneHundredThousandHundredThousandHundredThousandHundredThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 99999999\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp95xmd27c.scala:40:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmp95xmd27c.scala:28:73 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000\u001b[0m && x <= \u001b[31m99999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp95xmd27c.scala:31:82 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x <= \u001b[31m99999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                  ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp95xmd27c.scala:32:62 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000\u001b[0m && x <= \u001b[31m999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp95xmd27c.scala:33:70 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000\u001b[0m && x <= \u001b[31m99999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp95xmd27c.scala:33:91 ------",
      "stdout": "",
      "timestamp": 1659804006
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1 && x <= 9).toList\n        val tens = arr.filter(x => x >= 10 && x <= 99).toList\n        val hundreds = arr.filter(x => x >= 100 && x <= 999).toList\n        val thousands = arr.filter(x => x >= 1000 && x <= 9999).toList\n        val tenThousands = arr.filter(x => x >= 10000 && x <= 99999).toList\n        val oneThousands = arr.filter(x => x >= 100000 && x <= 999999).toList\n        val tenThousandThousands = arr.filter(x => x >= 1000000 && x <= 9999999).toList\n        val oneThousandThousands = arr.filter(x => x >= 10000000 && x <= 99999999).toList\n        val tenThousandThousandThousands = arr.filter(x => x >= 100000000 && x <= 999999999).toList\n        val oneThousandThousandThousands = arr.filter(x => x >= 1000000000 && x <= 99999999999).toList\n        val tenThousandThousandThousandThousands = arr.filter(x => x >= 10000000000 && x <= 9999999998).toList\n        val oneThousandThousandThousandThousands = arr.filter(x => x >= 100000000000 && x <= 999999999998).toList\n        val tenThousandThousandThousandThousands = arr.filter(x => x >= 1000000000000 && x <= 9999999999987).toList\n        val oneThousandThousandThousandThousands = arr.filter(x => x >= 10000000000000 && x <= 9999999999987).toList\n        val tenThousandThousandThousandThousands = arr.filter(x => x >= 100000000000000 && x <= 99999999999876).toList\n        val oneThousandThousandThousandThousands = arr.filter(x => x >= 1000000000000000 && x <= 99999999999876).toList\n        val tenThousandThousandThousandThousands = arr.filter(x => x >= 10000000000000000 && x <= 9999999999987654).toList\n        val oneThousandThousandThousandThousands = arr.filter(x => x >= 100000000000000000 && x <= 9999999999987654).toList\n        val tenThousandThousandThousandThousands = arr.filter(x => x >= 100000000000000000 && x <= 99999999999876543).toList\n        val oneThousandTh\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpxneiq401.scala:41:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpxneiq401.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtenThousandThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000\u001b[0m && x <= \u001b[31m9999999999987\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mtenThousandThousandThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35mtenThousandThousandThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpxneiq401.scala:34:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000000\u001b[0m && x <= \u001b[31m9999999999987\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpxneiq401.scala:35:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtenThousandThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000000\u001b[0m && x <= \u001b[31m99999999999876\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mtenThousandThousandThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35mtenThousandThousandTho",
      "stdout": "",
      "timestamp": 1659804006
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(_ <= 9).sorted\n        val tens = arr.filter(_ <= 99).sorted\n        val hundreds = arr.filter(_ <= 999).sorted\n        val thousands = arr.filter(_ <= 9999).sorted\n        val tenThousands = arr.filter(_ <= 999999).sorted\n        val oneHundreds = arr.filter(_ <= 9999999).sorted\n        val oneThousands = arr.filter(_ <= 999999999).sorted\n        val oneThousandHundreds = arr.filter(_ <= 99999999999).sorted\n        val oneThousandThousands = arr.filter(_ <= 999999999999).sorted\n        val oneThousandThousandHundreds = arr.filter(_ <= 999999999999999).sorted\n        val oneThousandThousandThousands = arr.filter(_ <= 9999999999999999).sorted\n        val oneThousandThousandThousandHundreds = arr.filter(_ <= 9999999999999999999).sorted\n        val oneThousandThousandThousandThousands = arr.filter(_ <= 99999999999999999999).sorted\n        val oneThousandThousandThousandThousandHundreds = arr.filter(_ <= 99999999999999999999999).sorted\n        val oneThousandThousandThousandThousandThousands = arr.filter(_ <= 999999999999999999999999).sorted\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 999999999999999999999999999).sorted\n        val oneThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 9999999999999999999999999999).sorted\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 9999999999999999999999999999999).sorted\n        val oneThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 99999999999999999999999999999999).sorted\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 99999999999999999999999999999999999).sorted\n        val oneThousandThousandThous\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmps5ljgfnv.scala:42:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmps5ljgfnv.scala:28:50 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m99999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmps5ljgfnv.scala:29:51 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m999999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                   number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmps5ljgfnv.scala:30:58 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m999999999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                          ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmps5ljgfnv.scala:31:59 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m9999999999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmps5ljgfnv.scala:32:66 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m9999999999999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                             ",
      "stdout": "",
      "timestamp": 1659804006
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(_ <= 9).sorted\n        val tens = arr.filter(_ <= 99).sorted\n        val hundreds = arr.filter(_ <= 999).sorted\n        val thousands = arr.filter(_ <= 9999).sorted\n        val tenThousands = arr.filter(_ <= 999999).sorted\n        val oneThousands = arr.filter(_ <= 9999999).sorted\n        val oneHundreds = arr.filter(_ <= 999999999).sorted\n        val oneThousandThousands = arr.filter(_ <= 99999999999).sorted\n        val oneHundredThousands = arr.filter(_ <= 999999999999).sorted\n        val oneHundredThousandThousands = arr.filter(_ <= 999999999999999).sorted\n        val oneHundredThousandThousandThousands = arr.filter(_ <= 9999999999999999999).sorted\n        val oneHundredThousandThousandThousandThousands = arr.filter(_ <= 99999999999999999999999).sorted\n        val oneHundredThousandThousandThousandThousandThousands = arr.filter(_ <= 999999999999999999999999999).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 9999999999999999999999999999999).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 99999999999999999999999999999999999).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 999999999999999999999999999999999999999).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 9999999999999999999999999999999999999999999).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 99999999999999999999999999999999999999999999999).sorted\n        val oneHundredThousandThousandThousand\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpb50_iw6u.scala:40:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpb50_iw6u.scala:28:51 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m99999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                   number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpb50_iw6u.scala:29:50 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousands\u001b[0m = arr.filter(_ <= \u001b[31m999999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpb50_iw6u.scala:30:58 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m999999999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                          ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpb50_iw6u.scala:31:66 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m9999999999999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                                  ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpb50_iw6u.scala:32:74 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m99999999999999999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m             ",
      "stdout": "",
      "timestamp": 1659804006
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1 && x <= 9).toList\n        val tens = arr.filter(x => x >= 10 && x <= 99).toList\n        val hundreds = arr.filter(x => x >= 100 && x <= 999).toList\n        val thousands = arr.filter(x => x >= 1000 && x <= 9999).toList\n        val tenThousands = arr.filter(x => x >= 10000 && x <= 99999).toList\n        val oneThousands = arr.filter(x => x >= 100000 && x <= 999999).toList\n        val oneHundreds = arr.filter(x => x >= 1000000 && x <= 999999999).toList\n        val oneThousandHundreds = arr.filter(x => x >= 1000000000 && x <= 99999999999).toList\n        val oneThousandThousandHundreds = arr.filter(x => x >= 100000000000 && x <= 999999999999).toList\n        val oneThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000 && x <= 999999999999999).toList\n        val oneThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000 && x <= 9999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000000 && x <= 99999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 9999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 99999999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThous\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjy1bxbxh.scala:38:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpjy1bxbxh.scala:28:74 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x <= \u001b[31m99999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpjy1bxbxh.scala:29:63 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000\u001b[0m && x <= \u001b[31m999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpjy1bxbxh.scala:29:84 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000\u001b[0m && x <= \u001b[31m999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                    ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpjy1bxbxh.scala:30:71 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000\u001b[0m && x <= \u001b[31m999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                       ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpjy1b",
      "stdout": "",
      "timestamp": 1659804006
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1 && x <= 9).toList\n        val tens = arr.filter(x => x >= 10 && x <= 99).toList\n        val hundreds = arr.filter(x => x >= 100 && x <= 999).toList\n        val thousands = arr.filter(x => x >= 1000 && x <= 9999).toList\n        val tenThousands = arr.filter(x => x >= 10000 && x <= 99999).toList\n        val oneThousands = arr.filter(x => x >= 100000 && x <= 999999).toList\n        val oneHundreds = arr.filter(x => x >= 1000000 && x <= 9999999).toList\n        val oneThousandHundreds = arr.filter(x => x >= 10000000 && x <= 99999999).toList\n        val oneThousandThousandHundreds = arr.filter(x => x >= 100000000 && x <= 999999999).toList\n        val oneHundredThousandThousandHundreds = arr.filter(x => x >= 1000000000 && x <= 99999999999).toList\n        val oneHundredThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000 && x <= 999999999999).toList\n        val oneHundredThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000 && x <= 999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000 && x <= 9999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000 && x <= 9999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000 && x <= 99999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000000 && x <= 99999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000000\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpeghfukts.scala:38:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpeghfukts.scala:30:89 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x <= \u001b[31m99999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpeghfukts.scala:31:78 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000\u001b[0m && x <= \u001b[31m999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                              ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpeghfukts.scala:31:98 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000\u001b[0m && x <= \u001b[31m999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpeghfukts.scala:32:86 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000\u001b[0m && x <= \u001b[31m999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                      ^^^^^^^^^^^^\u001b[0m\n\u001b[31",
      "stdout": "",
      "timestamp": 1659804006
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(_ <= 9).sorted\n        val tens = arr.filter(_ <= 99).sorted\n        val hundreds = arr.filter(_ <= 999).sorted\n        val thousands = arr.filter(_ <= 9999).sorted\n        val tenThousands = arr.filter(_ <= 999999).sorted\n        val oneHundreds = arr.filter(_ <= 9999999).sorted\n        val oneThousands = arr.filter(_ <= 999999999).sorted\n        val oneThousandHundreds = arr.filter(_ <= 99999999999).sorted\n        val oneThousandThousands = arr.filter(_ <= 9999999999).sorted\n        val oneThousandThousandHundreds = arr.filter(_ <= 999999999999).sorted\n        val oneThousandThousandThousands = arr.filter(_ <= 999999999999999).sorted\n        val oneThousandThousandThousandHundreds = arr.filter(_ <= 999999999999999999).sorted\n        val oneThousandThousandThousandThousands = arr.filter(_ <= 999999999999999999999).sorted\n        val oneThousandThousandThousandThousandHundreds = arr.filter(_ <= 9999999999999999999998).sorted\n        val oneThousandThousandThousandThousandThousands = arr.filter(_ <= 99999999999999999999987).sorted\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 999999999999999999999876).sorted\n        val oneThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 9999999999999999999998765).sorted\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 99999999999999999999987654).sorted\n        val oneThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 999999999999999999999876543).sorted\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 9999999999999999999998765432).sorted\n        val oneThousandThousandThousandThousandThousandThousandThousandThousand\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp3z95g0bt.scala:42:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmp3z95g0bt.scala:28:50 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m99999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp3z95g0bt.scala:29:51 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m9999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                   number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp3z95g0bt.scala:30:58 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m999999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp3z95g0bt.scala:31:59 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m999999999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                           ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp3z95g0bt.scala:32:66 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m999999999999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                          ",
      "stdout": "",
      "timestamp": 1659804015
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 10)\n        val tens = arr.filter(x => x >= 10 && x < 100)\n        val hundreds = arr.filter(x => x >= 100 && x < 1000)\n        val thousands = arr.filter(x => x >= 1000 && x < 10000)\n        val tenThousands = arr.filter(x => x >= 10000 && x < 100000)\n        val oneThousands = arr.filter(x => x >= 100000 && x < 1000000)\n        val oneHundreds = arr.filter(x => x >= 1000000 && x < 10000000)\n        val oneThousandHundreds = arr.filter(x => x >= 10000000 && x < 100000000)\n        val oneThousandThousands = arr.filter(x => x >= 100000000 && x < 1000000000)\n        val oneHundredThousands = arr.filter(x => x >= 1000000000 && x < 10000000000)\n        val oneHundredThousandHundreds = arr.filter(x => x >= 10000000000 && x < 100000000000)\n        val oneThousandThousandHundreds = arr.filter(x => x >= 100000000000 && x < 1000000000000)\n        val oneHundredThousandThousands = arr.filter(x => x >= 1000000000000 && x < 10000000000000)\n        val oneHundredThousandThousandHundreds = arr.filter(x => x >= 10000000000000 && x < 100000000000000)\n        val oneThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000 && x < 1000000000000000)\n        val oneHundredThousandThousandThousands = arr.filter(x => x >= 1000000000000000 && x < 10000000000000000)\n        val oneHundredThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000000 && x < 100000000000000000)\n        val oneThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x < 1000000000000000000)\n        val oneHundredThousandThousandThousandThousands = arr.filter(x => x >= 1000000000000000000 && x < 10000000000000000000)\n        val oneHundredThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000000000 && x < 100000000000000000000)\n        val oneThousandThousandThousandThousandThousandHundreds = arr.\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpli884f1w.scala:42:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpli884f1w.scala:30:73 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x < \u001b[31m10000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpli884f1w.scala:31:62 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000\u001b[0m && x < \u001b[31m100000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpli884f1w.scala:31:81 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000\u001b[0m && x < \u001b[31m100000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                 ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpli884f1w.scala:32:63 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000\u001b[0m && x < \u001b[31m1000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpli884f1w.scala:32:83 -----------------------------------",
      "stdout": "",
      "timestamp": 1659804017
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val nums = arr.toList\n        val len = nums.map(_.toString.length).max\n        val maxLen = len.toString.length\n        val maxLen = len.toString.length\n        val maxLen = len.toString.length\n        val maxLen = len.toString.length\n        val maxLen = len.toString.length\n        val maxLen = len.toString.length\n        val maxLen = len.toString.length\n        val maxLen = len.toString.length\n        val maxLen = len.toString.length\n        val maxLen = len.toString.length\n        val maxLen = len.toString.length\n        val maxLen = len.toString.length\n        val maxLen = len.toString.length\n        val maxLen = len.toString.length\n        val maxLen = len.toString.length\n        val maxLen = len.toString.length\n        val maxLen = len.toString.length\n        val maxLen = len.toString.length\n        val maxLen = len.toString.length\n        val maxLen = len.toString.length\n        val maxLen = len.toString.length\n        val maxLen = len.toString.length\n        val maxLen = len.toString.length\n        val maxLen = len.toString.length\n        val maxLen = len.toString.length\n        val maxLen = len.toString.length\n        val maxLen = len.toString.length\n        val maxLen = len.toString.length\n        val maxLen = len.toString.length\n        val maxLen = len.toString.length\n        val maxLen = len.toString.length\n        val maxLen = len.toString.length\n        val maxLen = len.toString.length\n        val maxLen = len.toString.length\n        val maxLen = len.toString.length\n        val maxLen = len.toString.length\n        val maxLen = len.toString.length\n        val maxLen = len.toString.length\n        val maxLen = len.toString.length\n        val maxLen = len.toString.length\n        val maxLen = len.toString.length\n        val maxLen = len.toString.length\n        val maxLen = len.toString.length\n        val maxLen = len.toString.length\n        val maxLen = len.toString.length\n        val maxLen = len.toString.length\n        val maxLen = len.toString.length\n        val maxLen = len.toString.length\n        val maxLen = len.toString.length\n        \n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp2n8zlb87.scala:24:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxLen\u001b[0m = len.toString.length\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxLen is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxLen\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp2n8zlb87.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxLen\u001b[0m = len.toString.length\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxLen is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxLen\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp2n8zlb87.scala:26:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxLen\u001b[0m = len.toString.length\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxLen is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxLen\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp2n8zlb87.scala:27:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxLen\u001b[0m = len.toString.length\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxLen is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxLen\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp2n8zlb87.scala:28:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxLen\u001b[0m = len.toString.length\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxLen is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxLen\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that over",
      "stdout": "",
      "timestamp": 1659804017
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x <= 9).sorted\n        val tens = arr.filter(x => x > 9).sorted\n        val tensReversed = tens.reverse\n        val onesReversed = ones.reverse\n        val onesReversedString = onesReversed.map(x => onesReversedStringMap.get(x))\n        val tensReversedString = tensReversed.map(x => tensReversedStringMap.get(x))\n        val result = onesReversedString.toList ++ tensReversedString.toList\n        result.map(x => resultStringMap.get(x))\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpz_wxwv9f.scala:25:55 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesReversedString\u001b[0m = onesReversed.map(\u001b[36mx\u001b[0m => onesReversedStringMap.get(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                        Not found: onesReversedStringMap\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpz_wxwv9f.scala:26:55 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtensReversedString\u001b[0m = tensReversed.map(\u001b[36mx\u001b[0m => tensReversedStringMap.get(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                        Not found: tensReversedStringMap\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpz_wxwv9f.scala:28:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        result.map(\u001b[36mx\u001b[0m => resultStringMap.get(x))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: resultStringMap\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659804015
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val result = new mutable.ListBuffer[String]()\n        val one = mutable.List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val ten = mutable.List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val hundred = mutable.List(\"Hundred\")\n        val thousand = mutable.List(\"Thousand\")\n        val hundredAndThousand = mutable.List(\"Hundred and Thousand\")\n        val hundredAndThousandAndOne = mutable.List(\"Hundred and Thousand and One\")\n        val hundredAndThousandAndOneAndTen = mutable.List(\"Hundred and Thousand and One and Ten\")\n        val hundredAndThousandAndOneAndTenAndOne = mutable.List(\"Hundred and Thousand and One and Ten and One\")\n        val hundredAndThousandAndOneAndTenAndOneAndOne = mutable.List(\"Hundred and Thousand and One and Ten and One and One\")\n        val hundredAndThousandAndOneAndTenAndOneAndOneAndOne = mutable.List(\"Hundred and Thousand and One and Ten and One and One and One\")\n        val hundredAndThousandAndOneAndTenAndOneAndOneAndOneAndOne = mutable.List(\"Hundred and Thousand and One and Ten and One and One and One and One\")\n        val hundredAndThousandAndOneAndTenAndOneAndOneAndOneAndOneAndOne = mutable.List(\"Hundred and Thousand and One and Ten and One and One and One and One and One\")\n        val hundredAndThousandAndOneAndTenAndOneAndOneAndOneAndOneAndOneAndOne = mutable.List(\"Hundred and Thousand and One and Ten and One and One and One and One and One\")\n        val hundredAndThousandAndOneAndTenAndOneAndOneAndOneAndOneAndOneAndOne = mutable.List(\"Hundred and Thousand and One and Ten and One and One and One and One and One and \n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpqzqlc71q.scala:35:94 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhundredAndThousandAndOneAndTenAndOneAndOneAndOneAndOneAndOneAndOne\u001b[0m = mutable.List(\"Hundred and Thousand and One and Ten and One and One and One and One and One and \n\u001b[31m\u001b[31m   |\u001b[0m                                                                                              ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 unclosed string literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmpqzqlc71q.scala:37:34 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 end of statement expected but '=' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqzqlc71q.scala:21:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.ListBuffer[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqzqlc71q.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mone\u001b[0m = mutable.List(\u001b[31m\"One\"\u001b[0m, \u001b[31m\"Two\"\u001b[0m, \u001b[31m\"Three\"\u001b[0m, \u001b[31m\"Four\"\u001b[0m, \u001b[31m\"Five\"\u001b[0m, \u001b[31m\"Six\"\u001b[0m, \u001b[31m\"Seven\"\u001b[0m, \u001b[31m\"Eight\"\u001b[0m, \u001b[31m\"Nine\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqzqlc71q.scala:23:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mten\u001b[0m = mutable.List(\u001b[31m\"Ten\"\u001b[0m, \u001b[31m\"Eleven\"\u001b[0m, \u001b[31m\"Twelve\"\u001b[0m, \u001b[31m\"Thirteen\"\u001b[0m, \u001b[31m\"Fourteen\"\u001b[0m, \u001b[31m\"Fifteen\"\u001b[0m, \u001b[31m\"Sixteen\"\u001b[0m,",
      "stdout": "",
      "timestamp": 1659804017
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val one = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val two = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val three = List(\"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\")\n        val four = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val five = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val six = List(\"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\")\n        val seven = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val eight = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val nine = List(\"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\")\n        val ten = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val eleven = List(\"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\")\n        val twelve = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val thirteen = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val fourteen = List(\"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\")\n        val fifteen = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpfvynr4oj.scala:35:58 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfifteen\u001b[0m = List(\u001b[31m\"One\"\u001b[0m, \u001b[31m\"Two\"\u001b[0m, \u001b[31m\"Three\"\u001b[0m, \u001b[31m\"Four\"\u001b[0m, \"Five\n\u001b[31m\u001b[31m   |\u001b[0m                                                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 unclosed string literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmpfvynr4oj.scala:37:34 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 end of statement expected but '=' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfvynr4oj.scala:36:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfvynr4oj.scala:37:4 -------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    Not found: Fivedef\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "stdout": "",
      "timestamp": 1659804003
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x % 10 == 1)\n        val tens = arr.filter(x => x % 10 == 0)\n        val reversed = tens.reverse\n        val onesAndTens = ones + tens\n        val onesAndTensReversed = onesAndTens.reverse\n        val onesAndTensReversedWithOnes = onesAndTensReversed.map(x => if (x == 1) \"One\" else x.toString)\n        val onesAndTensReversedWithOnesAndTens = onesAndTensReversedWithOnes + onesAndTens\n        val onesAndTensReversedWithOnesAndTensReversed = onesAndTensReversedWithOnesAndTens.reverse\n        val onesAndTensReversedWithOnesAndTensReversedWithOnes = onesAndTensReversedWithOnesAndTensReversed.map(x => if (x == 1) \"One\" else x.toString)\n        val onesAndTensReversedWithOnesAndTensReversedWithOnesAndTens = onesAndTensReversedWithOnesAndTensReversedWithOnes + onesAndTensReversedWithOnesAndTens\n        val onesAndTensReversedWithOnesAndTensReversedWithOnesAndTensReversed = onesAndTensReversedWithOnesAndTensReversedWithOnesAndTens.reverse\n        val onesAndTensReversedWithOnesAndTensReversedWithOnesAndTensReversedWithOnes = onesAndTensReversedWithOnesAndTensReversedWithOnesAndTensReversedWithOnes + onesAndTensReversedWithOnesAndTensReversedWithOnesAndTens\n        val onesAndTensReversedWithOnesAndTensReversedWithOnesAndTensReversedWithOnesAndTens = onesAndTensReversedWithOnesAndTensReversedWithOnesAndTensReversedWithOnes + onesAndTensReversedWithOnesAndTensReversedWithOnesAndTensReversedWithOnes\n        val onesAndTensReversedWithOnesAndTensReversedWithOnesAndTensReversedWithOnesAndTensReversed = onesAndTensReversedWithOnesAndTensReversedWithOnesAndTensReversedWithOnesAndTensReversed + onesAndTensReversedWithOnesAndTensReversedWithOnesAndTensReversedWithOnesAndTens\n        val onesAndTensReverse\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpg30zc6s4.scala:36:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpg30zc6s4.scala:24:31 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesAndTens\u001b[0m = ones + tens\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpg30zc6s4.scala:32:88 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesAndTensReversedWithOnesAndTensReversedWithOnesAndTensReversedWithOnes\u001b[0m = onesAndTensReversedWithOnesAndTensReversedWithOnesAndTensReversedWithOnes + onesAndTensReversedWithOnesAndTensReversedWithOnesAndTens\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^\u001b[0m\n\u001b[31m   |\u001b[0mRecursive \u001b[33mvalue\u001b[0m \u001b[35monesAndTensReversedWithOnesAndTensReversedWithOnesAndTensReversedWithOnes\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpg30zc6s4.scala:34:103 --------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesAndTensReversedWithOnesAndTensReversedWithOnesAndTensReversedWithOnesAndTensReversed\u001b[0m = onesAndTensReversedWithOnesAndTensReversedWithOnesAndTensReversedWithOnesAndTensReversed + onesAndTensReversedWithOnesAndTensReversedWithOnesAndTensReversedWithOnesAndTens\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                    ",
      "stdout": "",
      "timestamp": 1659804019
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(_ <= 9).sorted\n        val tens = arr.filter(_ <= 99).sorted\n        val hundreds = arr.filter(_ <= 999).sorted\n        val thousands = arr.filter(_ <= 9999).sorted\n        val tenThousands = arr.filter(_ <= 999999).sorted\n        val oneThousands = arr.filter(_ <= 9999999).sorted\n        val oneHundreds = arr.filter(_ <= 999999999).sorted\n        val oneThousandHundreds = arr.filter(_ <= 99999999999).sorted\n        val oneThousandThousandHundreds = arr.filter(_ <= 999999999).sorted\n        val oneHundredThousandHundredThousandHundreds = arr.filter(_ <= 99999999999).sorted\n        val oneHundredThousandThousandHundredThousandHundred = arr.filter(_ <= 99999999999).sorted\n        val oneHundredThousandThousandHundredThousandHundredThousand = arr.filter(_ <= 99999999999).sorted\n        val oneHundredThousandThousandHundredThousandHundredThousandThousand = arr.filter(_ <= 99999999999).sorted\n        val oneHundredThousandThousandHundredThousandHundredThousandThousandThousand = arr.filter(_ <= 99999999999).sorted\n        val oneHundredThousandThousandHundredThousandHundredThousandThousandThousandThousand = arr.filter(_ <= 99999999999).sorted\n        val oneHundredThousandThousandHundredThousandHundredThousandThousandThousandThousandThousand = arr.filter(_ <= 99999999999).sorted\n        val oneHundredThousandThousandHundredThousandHundredThousandThousandThousandThousandThousandThousand = arr.filter(_ <= 99999999999).sorted\n        val oneHundredThousandThousandHundredThousandHundredThousandThousandThousandThousandThousandThousandThousand = arr.filter(_ <= 99999999999).sorted\n        val oneH\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmplq7q8sum.scala:40:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmplq7q8sum.scala:28:50 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m99999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmplq7q8sum.scala:30:72 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandHundredThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m99999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmplq7q8sum.scala:31:79 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandHundredThousandHundred\u001b[0m = arr.filter(_ <= \u001b[31m99999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                                               ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmplq7q8sum.scala:32:87 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandHundredThousandHundredThousand\u001b[0m = arr.filter(_ <= \u001b[31m99999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                       ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmplq7q8sum.scala:33:95 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandHundred",
      "stdout": "",
      "timestamp": 1659804018
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x % 10 == 1)\n        val tens = arr.filter(x => x % 10 == 0)\n        val tensReversed = tens.reverse\n        val onesReversed = ones.reverse\n        val onesReversedString = onesReversed.map(x => onesReversedStringMap.get(x))\n        val tensReversedString = tensReversed.map(x => tensReversedStringMap.get(x))\n        val result = onesReversedString.toList ++ tensReversedString.toList\n        result.map(x => reversedStringMap.get(x))\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmparfgm5xe.scala:25:55 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesReversedString\u001b[0m = onesReversed.map(\u001b[36mx\u001b[0m => onesReversedStringMap.get(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                        Not found: onesReversedStringMap\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmparfgm5xe.scala:26:55 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtensReversedString\u001b[0m = tensReversed.map(\u001b[36mx\u001b[0m => tensReversedStringMap.get(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                        Not found: tensReversedStringMap\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmparfgm5xe.scala:28:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        result.map(\u001b[36mx\u001b[0m => reversedStringMap.get(x))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: reversedStringMap\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659804014
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val nums = arr.toSet\n        val len = nums.size\n        val ones = nums.filter(x => x < 10)\n        val tens = nums.filter(x => x >= 10 && x < 100)\n        val hundreds = nums.filter(x => x >= 100)\n        val tensSet = tens.toSet\n        val hundredsSet = hundreds.toSet\n        val onesSet = ones.toSet\n        val tensSetSize = tensSet.size\n        val hundredsSetSize = hundredsSet.size\n        val onesSetSize = onesSet.size\n        val onesSetSize = onesSet.size\n        val onesSetSize = onesSet.size\n        val onesSetSize = onesSet.size\n        val onesSetSize = onesSet.size\n        val onesSetSize = onesSet.size\n        val onesSetSize = onesSet.size\n        val onesSetSize = onesSet.size\n        val onesSetSize = onesSet.size\n        val onesSetSize = onesSet.size\n        val onesSetSize = onesSet.size\n        val onesSetSize = onesSet.size\n        val onesSetSize = onesSet.size\n        val onesSetSize = onesSet.size\n        val onesSetSize = onesSet.size\n        val onesSetSize = onesSet.size\n        val onesSetSize = onesSet.size\n        val onesSetSize = onesSet.size\n        val onesSetSize = onesSet.size\n        val onesSetSize = onesSet.size\n        val onesSetSize = onesSet.size\n        val onesSetSize = onesSet.size\n        val onesSetSize = onesSet.size\n        val onesSetSize = onesSet.size\n        val onesSetSize = onesSet.size\n        val onesSetSize = onesSet.size\n        val onesSetSize = onesSet.size\n        val onesSetSize = onesSet.size\n        val onesSetSize = onesSet.size\n        val onesSetSize = onesSet.size\n        val onesSetSize = onesSet.size\n        val onesSetSize = onesSet.size\n        val onesSetSize = onesSet.size\n        val onesSetSize = onesSet.size\n        val onesSetSize = onesSet.size\n        val onesSetSize = onesSet.size\n        val ones\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp4zs4r1lf.scala:68:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp4zs4r1lf.scala:32:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesSetSize\u001b[0m = onesSet.size\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0monesSetSize is already defined as \u001b[33mvalue\u001b[0m \u001b[35monesSetSize\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp4zs4r1lf.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesSetSize\u001b[0m = onesSet.size\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0monesSetSize is already defined as \u001b[33mvalue\u001b[0m \u001b[35monesSetSize\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp4zs4r1lf.scala:34:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesSetSize\u001b[0m = onesSet.size\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0monesSetSize is already defined as \u001b[33mvalue\u001b[0m \u001b[35monesSetSize\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp4zs4r1lf.scala:35:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesSetSize\u001b[0m = onesSet.size\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0monesSetSize is already defined as \u001b[33mvalue\u001b[0m \u001b[35monesSetSize\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp4zs4r1lf.scala:36:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m        \u001b[33mval\u001b[0m ",
      "stdout": "",
      "timestamp": 1659804018
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 10)\n        val tens = arr.filter(x => x >= 10 && x < 100)\n        val hundreds = arr.filter(x => x >= 100 && x < 1000)\n        val thousands = arr.filter(x => x >= 1000)\n        val onesAndTens = ones + tens\n        val onesAndHundreds = ones + hundreds\n        val onesAndThousands = ones + thousands\n        val onesAndOnes = ones + ones\n        val onesAndOnesAndOnes = onesAndOnes + onesAndOnes\n        val onesAndOnesAndOnesAndOnes = onesAndOnes + onesAndOnes + onesAndOnes\n        val onesAndOnesAndOnesAndOnesAndOnes = onesAndOnes + onesAndOnes + onesAndOnes + onesAndOnes\n        val onesAndOnesAndOnesAndOnesAndOnesAndOnes = onesAndOnes + onesAndOnes + onesAndOnes + onesAndOnes + onesAndOnes + onesAndOnes\n        val onesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnes = onesAndOnes + onesAndOnes + onesAndOnes + onesAndOnes + onesAndOnes + onesAndOnes + onesAndOnes + onesAndOnes\n        val onesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnes = onesAndOnes + onesAndOnes + onesAndOnes + onesAndOnes + onesAndOnes + onesAndOnes + onesAndOnes + onesAndOnes + onesAndOnes + onesAndOnes + onesAndOnes\n        val onesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnes = onesAndOnes + onesAndOnes + onesAndOnes + onesAndOnes + onesAndOnes + onesAndOnes + onesAndOnes + onesAndOnes + onesAndOnes + onesAndOnes + onesAndOnes + onesAndOnes + onesAndOnes\n        val onesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnes = onesAndOnes + onesAndOnes + onesAndOnes + onesAndOnes + onesAndOnes + onesAndOnes + onesAndOnes + onesAndOnes + onesAndOnes + onesAndOnes + onesAndOnes + onesAndOnes + onesAndOnes + onesAndOnes + onesAndOnes + onesAndOnes\n        val onesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnes = onesAndOnes + onesAnd\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp17by5cdk.scala:25:31 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesAndTens\u001b[0m = ones + tens\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp17by5cdk.scala:26:35 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesAndHundreds\u001b[0m = ones + hundreds\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp17by5cdk.scala:27:36 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesAndThousands\u001b[0m = ones + thousands\n\u001b[31m\u001b[31m   |\u001b[0m                               ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp17by5cdk.scala:28:31 -----",
      "stdout": "",
      "timestamp": 1659804021
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val nums = arr.toList\n        val len = nums.map(_.toString.length).max\n        val maxLen = len.toString.length\n        val maxLen = maxLen - 2\n        val numsLen = nums.map(_.toString.length).max\n        val numsLen = numsLen - 2\n        val numsLen = numsLen - 2\n        val numsLen = numsLen - 2\n        val numsLen = numsLen - 2\n        val numsLen = numsLen - 2\n        val numsLen = numsLen - 2\n        val numsLen = numsLen - 2\n        val numsLen = numsLen - 2\n        val numsLen = numsLen - 2\n        val numsLen = numsLen - 2\n        val numsLen = numsLen - 2\n        val numsLen = numsLen - 2\n        val numsLen = numsLen - 2\n        val numsLen = numsLen - 2\n        val numsLen = numsLen - 2\n        val numsLen = numsLen - 2\n        val numsLen = numsLen - 2\n        val numsLen = numsLen - 2\n        val numsLen = numsLen - 2\n        val numsLen = numsLen - 2\n        val numsLen = numsLen - 2\n        val numsLen = numsLen - 2\n        val numsLen = numsLen - 2\n        val numsLen = numsLen - 2\n        val numsLen = numsLen - 2\n        val numsLen = numsLen - 2\n        val numsLen = numsLen - 2\n        val numsLen = numsLen - 2\n        val numsLen = numsLen - 2\n        val numsLen = numsLen - 2\n        val numsLen = numsLen - 2\n        val numsLen = numsLen - 2\n        val numsLen = numsLen - 2\n        val numsLen = numsLen - 2\n        val numsLen = numsLen - 2\n        val numsLen = numsLen - 2\n        val numsLen = numsLen - 2\n        val numsLen = numsLen - 2\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpd94znqox.scala:24:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxLen\u001b[0m = maxLen - \u001b[31m2\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxLen is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxLen\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpd94znqox.scala:26:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnumsLen\u001b[0m = numsLen - \u001b[31m2\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mnumsLen is already defined as \u001b[33mvalue\u001b[0m \u001b[35mnumsLen\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpd94znqox.scala:27:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnumsLen\u001b[0m = numsLen - \u001b[31m2\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mnumsLen is already defined as \u001b[33mvalue\u001b[0m \u001b[35mnumsLen\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpd94znqox.scala:28:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnumsLen\u001b[0m = numsLen - \u001b[31m2\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mnumsLen is already defined as \u001b[33mvalue\u001b[0m \u001b[35mnumsLen\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpd94znqox.scala:29:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnumsLen\u001b[0m = numsLen - \u001b[31m2\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mnumsLen is already defined as \u001b[33mvalue\u001b[0m \u001b[35mnumsLen\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must a",
      "stdout": "",
      "timestamp": 1659804019
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(_ <= 9).sorted\n        val tens = arr.filter(_ <= 99).sorted\n        val hundreds = arr.filter(_ <= 999).sorted\n        val thousands = arr.filter(_ <= 9999).sorted\n        val tenThousands = arr.filter(_ <= 999999).sorted\n        val oneHundreds = arr.filter(_ <= 9999999).sorted\n        val oneThousands = arr.filter(_ <= 999999999).sorted\n        val oneThousandThousands = arr.filter(_ <= 99999999999).sorted\n        val oneHundredThousands = arr.filter(_ <= 999999999).sorted\n        val oneHundredThousandThousands = arr.filter(_ <= 99999999999).sorted\n        val oneHundredThousandThousandThousands = arr.filter(_ <= 999999999999999).sorted\n        val oneHundredThousandThousandThousandThousands = arr.filter(_ <= 9999999999999999999).sorted\n        val oneHundredThousandThousandThousandThousandThousands = arr.filter(_ <= 99999999999999999999999).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 999999999999999999999999999).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 9999999999999999999999999999999).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 99999999999999999999999999999999999).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 9999999999999999999999999999999999999999999).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 999999999999999999999999999999999999999999999999999).sorted\n        val oneHundredThousandThousandThousandThousandThousandTh\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpakrvbo_e.scala:40:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpakrvbo_e.scala:28:51 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m99999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                   number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpakrvbo_e.scala:30:58 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m99999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                          ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpakrvbo_e.scala:31:66 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m999999999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                                  ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpakrvbo_e.scala:32:74 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m9999999999999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpakrvbo_e.scala:33:82 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousandThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m9999999",
      "stdout": "",
      "timestamp": 1659804019
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(_ <= 9).sorted\n        val tens = arr.filter(_ <= 99).sorted\n        val hundreds = arr.filter(_ <= 999).sorted\n        val thousands = arr.filter(_ <= 9999).sorted\n        val tenThousands = arr.filter(_ <= 999999).sorted\n        val oneHundreds = arr.filter(_ <= 9999999).sorted\n        val oneThousands = arr.filter(_ <= 999999999).sorted\n        val oneThousandThousands = arr.filter(_ <= 99999999999).sorted\n        val oneHundredThousands = arr.filter(_ <= 999999999).sorted\n        val oneThousandThousandThousands = arr.filter(_ <= 99999999999).sorted\n        val oneHundredThousandThousands = arr.filter(_ <= 99999999999).sorted\n        val oneHundredThousandThousandThousands = arr.filter(_ <= 99999999999).sorted\n        val oneHundredThousandThousandThousands = arr.filter(_ <= 99999999999).sorted\n        val oneHundredThousandThousandThousandThousands = arr.filter(_ <= 99999999999).sorted\n        val oneHundredThousandThousandThousandThousandThousands = arr.filter(_ <= 99999999999).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 99999999999).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 99999999999).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 99999999999).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 99999999999).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 99999999999).sorted\n        val oneHundredThousandThousand\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpet0o9x64.scala:42:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpet0o9x64.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m99999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneHundredThousandThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneHundredThousandThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- Error: /tmp/tmpet0o9x64.scala:28:51 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m99999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                   number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpet0o9x64.scala:30:59 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m99999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                           ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpet0o9x64.scala:31:58 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m99999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                          ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpet0o9x64.scala:32:66 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m32 ",
      "stdout": "",
      "timestamp": 1659804020
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 10)\n        val tens = arr.filter(x => x >= 10 && x < 100)\n        val hundreds = arr.filter(x => x >= 100 && x < 1000)\n        val thousands = arr.filter(x => x >= 1000)\n        val onesAndTens = ones.zip(tens)\n        val onesAndHundreds = ones.zip(hundreds)\n        val onesAndThousands = ones.zip(thousands)\n        val onesAndOnesAndTens = ones.zip(onesAndTens)\n        val onesAndOnesAndHundreds = ones.zip(onesAndHundreds)\n        val onesAndOnesAndThousands = ones.zip(onesAndThousands)\n        val onesAndOnesAndOnesAndTens = ones.zip(onesAndOnesAndTens)\n        val onesAndOnesAndOnesAndHundreds = ones.zip(onesAndOnesAndHundreds)\n        val onesAndOnesAndOnesAndThousands = ones.zip(onesAndOnesAndThousands)\n        val onesAndOnesAndOnesAndOnesAndTens = ones.zip(onesAndOnesAndOnesAndTens)\n        val onesAndOnesAndOnesAndOnesAndHundreds = ones.zip(onesAndOnesAndOnesAndHundreds)\n        val onesAndOnesAndOnesAndOnesAndThousands = ones.zip(onesAndOnesAndOnesAndThousands)\n        val onesAndOnesAndOnesAndOnesAndOnesAndTens = ones.zip(onesAndOnesAndOnesAndOnesAndTens)\n        val onesAndOnesAndOnesAndOnesAndOnesAndHundreds = ones.zip(onesAndOnesAndOnesAndOnesAndHundreds)\n        val onesAndOnesAndOnesAndOnesAndOnesAndThousands = ones.zip(onesAndOnesAndOnesAndOnesAndThousands)\n        val onesAndOnesAndOnesAndOnesAndOnesAndOnesAndTens = ones.zip(onesAndOnesAndOnesAndOnesAndOnesAndTens)\n        val onesAndOnesAndOnesAndOnesAndOnesAndOnesAndHundreds = ones.zip(onesAndOnesAndOnesAndOnesAndOnesAndHundreds)\n        val onesAndOnesAndOnesAndOnesAndOnesAndOnesAndThousands = ones.zip(onesAndOnesAndOnesAndOnesAndOnesAndThousands)\n        val onesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndTens = ones.zip(onesAndOnesAndOnesAndOnesAndOnesAndOnesAndTens)\n        \n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprv3d2zxl.scala:45:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659804019
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 10)\n        val tens = arr.filter(x => x >= 10 && x < 100)\n        val hundreds = arr.filter(x => x >= 100 && x < 1000)\n        val thousands = arr.filter(x => x >= 1000 && x < 10000)\n        val tenThousands = arr.filter(x => x >= 10000 && x < 100000)\n        val oneThousands = arr.filter(x => x >= 100000 && x < 1000000)\n        val oneHundreds = arr.filter(x => x >= 1000000 && x < 10000000)\n        val oneThousandHundreds = arr.filter(x => x >= 10000000 && x < 100000000)\n        val oneThousandThousands = arr.filter(x => x >= 100000000 && x < 1000000000)\n        val oneHundredThousands = arr.filter(x => x >= 1000000000 && x < 10000000000)\n        val oneHundredThousandHundreds = arr.filter(x => x >= 10000000000 && x < 100000000000)\n        val oneHundredThousandThousands = arr.filter(x => x >= 100000000000 && x < 1000000000000)\n        val oneHundredThousandThousandHundreds = arr.filter(x => x >= 1000000000000 && x < 10000000000000)\n        val oneHundredThousandThousandThousands = arr.filter(x => x >= 10000000000000 && x < 100000000000000)\n        val oneHundredThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000 && x < 1000000000000000)\n        val oneHundredThousandThousandThousandThousands = arr.filter(x => x >= 1000000000000000 && x < 10000000000000000)\n        val oneHundredThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000000 && x < 100000000000000000)\n        val oneHundredThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x < 1000000000000000000)\n        val oneHundredThousandThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000000000 && x < 10000000000000000000)\n        val oneHundredThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000000000 && x < 100000000000000000000)\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmp0j_ma8ux.scala:41:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m        \u001b[33mval\u001b[0m \n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp0j_ma8ux.scala:38:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000000000\u001b[0m && x < \u001b[31m1000000000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneHundredThousandThousandThousandThousandHundreds is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneHundredThousandThousandThousandThousandHundreds\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp0j_ma8ux.scala:39:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000000000\u001b[0m && x < \u001b[31m10000000000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneHundredThousandThousandThousandThousandHundreds is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneHundredThousandThousandThousandThousandHundreds\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- Error: /tmp/tmp0j_ma8ux.scala:30:73 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x < \u001b[31m10000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                     ",
      "stdout": "",
      "timestamp": 1659804020
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val list = arr.toList\n        val sorted = list.sortWith(_ < _)\n        val reversed = sorted.reverse\n        val result = reversed.map(i => if (i < 10) \"One\" else if (i < 20) \"Two\" else if (i < 30) \"Three\" else if (i < 40) \"Four\" else if (i < 50) \"Five\" else if (i < 60) \"Six\" else if (i < 70) \"Seven\" else \"Eight\" ).reverse\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpwdxe5s5s.scala:28)\n\tat Problem.main(tmpwdxe5s5s.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659804021
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 10)\n        val tens = arr.filter(x => x >= 10 && x < 100)\n        val hundreds = arr.filter(x => x >= 100 && x < 1000)\n        val thousands = arr.filter(x => x >= 1000)\n        val reversed = ones + tens + hundreds + thousands.reverse\n        val result = reversed.map(x => x.toString).map(x => x.replaceAll(\"\\\\D\", \"\"))\n        if (result.isEmpty) result else result\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf2w56h6y.scala:25:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mreversed\u001b[0m = ones + tens + hundreds + thousands.reverse\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n1 error found\n",
      "stdout": "",
      "timestamp": 1659804019
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val result = new mutable.ListBuffer[String]()\n        val ones = arr.filter(x => x < 10)\n        val tens = arr.filter(x => x >= 10 && x < 100)\n        val hundreds = arr.filter(x => x >= 100)\n        val thousands = arr.filter(x => x >= 1000)\n        val tenThousands = arr.filter(x => x >= 10000)\n        val hundredThousands = arr.filter(x => x >= 100000)\n        val thousandThousands = arr.filter(x => x >= 1000000)\n        val oneThousands = arr.filter(x => x >= 10000000)\n        val tenThousandThousands = arr.filter(x => x >= 100000000)\n        val hundredThousandThousands = arr.filter(x => x >= 1000000000)\n        val thousandThousandThousands = arr.filter(x => x >= 10000000000)\n        val oneThousandThousands = arr.filter(x => x >= 100000000000)\n        val tenThousandThousandThousands = arr.filter(x => x >= 1000000000000)\n        val hundredThousandThousandThousands = arr.filter(x => x >= 1000000000000)\n        val thousandThousandThousandThousands = arr.filter(x => x >= 10000000000000)\n        val oneThousandThousandThousands = arr.filter(x => x >= 10000000000000)\n        val tenThousandThousandThousandThousands = arr.filter(x => x >= 100000000000000)\n        val hundredThousandThousandThousandThousands = arr.filter(x => x >= 100000000000000)\n        val thousandThousandThousandThousandThousands = arr.filter(x => x >= 1000000000000000)\n        val oneThousandThousandThousandThousands = arr.filter(x => x >= 1000000000000000)\n        val tenThousandThousandThousandThousandThousands = arr.filter(x => x >= 10000000000000000)\n        val hundredThousandThousandThousandThousandThousands = arr.filter(x => x >= 10000000000000000)\n        val thousandThousandThousandThousandThousandThousands = arr.filter(x => x >= 100000000000000000)\n        val oneThousandThousandThousandThousandThousandThousands = arr.filter(x \n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmprckdkm7c.scala:46:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprckdkm7c.scala:21:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.ListBuffer[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmprckdkm7c.scala:32:61 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mthousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                             ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmprckdkm7c.scala:33:56 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmprckdkm7c.scala:34:64 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtenThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmprckdkm7c.scala:35:68 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhundredThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000\u001b[0m)\n\u001b[31m\u001b[31m   ",
      "stdout": "",
      "timestamp": 1659804019
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 10)\n        val tens = arr.filter(x => x >= 10 && x < 100)\n        val hundreds = arr.filter(x => x >= 100 && x < 1000)\n        val thousands = arr.filter(x => x >= 1000)\n        val onesAndTens = ones + tens\n        val onesAndHundreds = ones + hundreds\n        val onesAndThousands = ones + thousands\n        val onesAndOnesAndTens = ones + onesAndTens\n        val onesAndOnesAndHundreds = ones + onesAndHundreds\n        val onesAndOnesAndThousands = ones + onesAndThousands\n        val onesAndOnesAndOnesAndTens = ones + onesAndOnesAndTens\n        val onesAndOnesAndOnesAndHundreds = ones + onesAndOnesAndHundreds\n        val onesAndOnesAndOnesAndThousands = ones + onesAndOnesAndThousands\n        val onesAndOnesAndOnesAndOnesAndTens = ones + onesAndOnesAndOnesAndTens\n        val onesAndOnesAndOnesAndOnesAndHundreds = ones + onesAndOnesAndOnesAndHundreds\n        val onesAndOnesAndOnesAndOnesAndThousands = ones + onesAndOnesAndOnesAndThousands\n        val onesAndOnesAndOnesAndOnesAndOnesAndTens = ones + onesAndOnesAndOnesAndOnesAndTens\n        val onesAndOnesAndOnesAndOnesAndOnesAndHundreds = ones + onesAndOnesAndOnesAndOnesAndHundreds\n        val onesAndOnesAndOnesAndOnesAndOnesAndThousands = ones + onesAndOnesAndOnesAndOnesAndThousands\n        val onesAndOnesAndOnesAndOnesAndOnesAndOnesAndTens = ones + onesAndOnesAndOnesAndOnesAndOnesAndTens\n        val onesAndOnesAndOnesAndOnesAndOnesAndOnesAndHundreds = ones + onesAndOnesAndOnesAndOnesAndOnesAndHundreds\n        val onesAndOnesAndOnesAndOnesAndOnesAndOnesAndThousands = ones + onesAndOnesAndOnesAndOnesAndOnesAndThousands\n        val onesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndTens = ones + onesAndOnesAndOnesAndOnesAndOnesAndOnesAndTens\n        \n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpoanh6f_f.scala:25:31 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesAndTens\u001b[0m = ones + tens\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpoanh6f_f.scala:26:35 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesAndHundreds\u001b[0m = ones + hundreds\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpoanh6f_f.scala:27:36 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesAndThousands\u001b[0m = ones + thousands\n\u001b[31m\u001b[31m   |\u001b[0m                               ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpoanh6f_f.scala:28:38 -----",
      "stdout": "",
      "timestamp": 1659804025
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 10)\n        val tens = arr.filter(x => x >= 10 && x < 100)\n        val hundreds = arr.filter(x => x >= 100 && x < 1000)\n        val thousands = arr.filter(x => x >= 1000)\n        val reversed = ones + tens + hundreds + thousands.reverse\n        val names = \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\n        reversed.map(x => names.find(_ == x).map(_ => x).getOrElse(\"?\"))\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpljjjp2u2.scala:26:25 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnames\u001b[0m = \u001b[31m\"One\"\u001b[0m, \u001b[31m\"Two\"\u001b[0m, \u001b[31m\"Three\"\u001b[0m, \u001b[31m\"Four\"\u001b[0m, \u001b[31m\"Five\"\u001b[0m, \u001b[31m\"Six\"\u001b[0m, \u001b[31m\"Seven\"\u001b[0m, \u001b[31m\"Eight\"\u001b[0m, \u001b[31m\"Nine\"\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         end of statement expected but ',' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpljjjp2u2.scala:25:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mreversed\u001b[0m = ones + tens + hundreds + thousands.reverse\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804021
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 10)\n        val tens = arr.filter(x => x >= 10 && x < 100)\n        val hundreds = arr.filter(x => x >= 100 && x < 1000)\n        val thousands = arr.filter(x => x >= 1000 && x < 10000)\n        val tenThousands = arr.filter(x => x >= 10000 && x < 100000)\n        val oneThousands = arr.filter(x => x >= 100000 && x < 1000000)\n        val oneMillions = arr.filter(x => x >= 1000000 && x < 10000000)\n        val oneBillions = arr.filter(x => x >= 10000000 && x < 100000000)\n        val oneTrillions = arr.filter(x => x >= 100000000 && x < 1000000000)\n        val oneQuadrillions = arr.filter(x => x >= 1000000000 && x < 10000000000)\n        val oneQuintillions = arr.filter(x => x >= 10000000000 && x < 100000000000)\n        val oneBillion = arr.filter(x => x >= 100000000000 && x < 1000000000000)\n        val oneTrillion = arr.filter(x => x >= 1000000000000 && x < 10000000000000)\n        val oneQuadrillion = arr.filter(x => x >= 10000000000000 && x < 100000000000000) \n        val oneQuintillion = arr.filter(x => x >= 100000000000000 && x < 1000000000000000)\n        val oneBillion = arr.filter(x => x >= 1000000000000000 && x < 10000000000000000)\n        val oneTrillion = arr.filter(x => x >= 10000000000000000 && x < 100000000000000000)\n        val oneQuadrillion = arr.filter(x => x >= 100000000000000000 && x < 1000000000000000000)\n        val oneQuintillion = arr.filter(x => x >= 1000000000000000000 && x < 10000000000000000000)\n        val oneBillion = arr.filter(x => x >= 10000000000000000000 && x < 1000000000000000000)\n        val oneTrillion = arr.filter(x => x >= 1000000000000000000 && x < 10000000000000000000)\n        val oneQuadrillion = arr.filter(x => x >= 10000000000000000000 && x < 100000000000000000000)\n        val oneQuintillion = arr.filter(x => x >= 100000000000000000000 && x < 1000000000000000000000)\n        val oneBillion = arr.filter(x => x >= 1000000000000000000000 && x < 10000000000000000000000)\n        val oneTrillion = arr.filter(x => x >= 10000000000000000000000 && x < 100000000000000000000000)\n        val oneQuadrillion = arr.filter(x => x >= 100000000000000000000000 && x < 1000000000000000000000000)\n        val oneQu\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpqeih7ueo.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpqeih7ueo.scala:36:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneBillion\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000000\u001b[0m && x < \u001b[31m10000000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneBillion is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneBillion\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpqeih7ueo.scala:37:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneTrillion\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000000000\u001b[0m && x < \u001b[31m100000000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneTrillion is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneTrillion\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpqeih7ueo.scala:38:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneQuadrillion\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000000000\u001b[0m && x < \u001b[31m1000000000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneQuadrillion is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneQuadrillion\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpqeih7ueo.scala:39:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneQuintillion\u001b[0m ",
      "stdout": "",
      "timestamp": 1659804019
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val result = new mutable.ListBuffer[String]()\n        val ones = arr.filter(x => x >= 1 && x <= 9).toList\n        val tens = arr.filter(x => x >= 10 && x <= 99).toList\n        val hundreds = arr.filter(x => x >= 100 && x <= 999).toList\n        val thousands = arr.filter(x => x >= 1000 && x <= 9999).toList\n        val tenThousands = arr.filter(x => x >= 10000 && x <= 99999).toList\n        val hundredThousands = arr.filter(x => x >= 100000 && x <= 999999).toList\n        val thousandThousands = arr.filter(x => x >= 1000000 && x <= 9999999).toList\n        val oneThousands = arr.filter(x => x >= 10000000 && x <= 99999999).toList\n        val tenThousandThousands = arr.filter(x => x >= 100000000 && x <= 999999999).toList\n        val hundredThousandThousands = arr.filter(x => x >= 1000000000 && x <= 99999999999).toList\n        val thousandThousandThousands = arr.filter(x => x >= 10000000000 && x <= 9999999999).toList\n        val oneThousandThousands = arr.filter(x => x >= 100000000000 && x <= 9999999999).toList\n        val tenThousandThousandThousands = arr.filter(x => x >= 1000000000000 && x <= 9999999999999).toList\n        val hundredThousandThousandThousands = arr.filter(x => x >= 10000000000000 && x <= 9999999999999).toList\n        val thousandThousandThousandThousands = arr.filter(x => x >= 100000000000000 && x <= 9999999999999).toList\n        val oneThousandThousandThousands = arr.filter(x => x >= 1000000000000000 && x <= 9999999999999).toList\n        val tenThousandThousandThousandThousands = arr.filter(x => x >= 10000000000000000 && x <= 9999999999999999).toList\n        val hundredThousandThousandThousandThousands = arr.filter(x => x >= 100000000000000000 && x <= 9999999999999999).toList\n        val thousandThousandThousandThousandThousands = arr.filter(x => x >= 100000000000000000 && x <= 9999999999999999).toList\n        val oneThousandThousandThousandThousands = arr.filter(x => x >= 100000000000000000 && x <= 9999999999999999).toList\n        val tenThousandThousandThousand\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjhi4qxtv.scala:43:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjhi4qxtv.scala:21:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.ListBuffer[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpjhi4qxtv.scala:31:79 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhundredThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x <= \u001b[31m99999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                               ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpjhi4qxtv.scala:32:61 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mthousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000\u001b[0m && x <= \u001b[31m9999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                             ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpjhi4qxtv.scala:32:81 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mthousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000\u001b[0m && x <= \u001b[31m9999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                 ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpjhi4qxtv.scala:33:56 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m3",
      "stdout": "",
      "timestamp": 1659804019
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val nums = arr.toList\n        val numsSorted = nums.sortWith(_.compareTo(_) < 0)\n        val numsReversed = numsSorted.reverse\n        val numsReversedDigits = numsReversed.map(_.toString).map(_.toInt)\n        val numsReversedDigitsMap = numsReversedDigits.groupBy(_ % 10).mapValues(_.map(_._1))\n        val numsReversedDigitsMapSorted = numsReversedDigitsMap.sortBy(_._1).mapValues(_.map(_._2))\n        val numsReversedDigitsMapSortedReversed = numsReversedDigitsMapSorted.mapValues(_.map(_.reverse))\n        val numsReversedDigitsMapSortedReversedDigits = numsReversedDigitsMapSortedReversed.mapValues(_.map(_._2))\n        val numsReversedDigitsMapSortedReversedDigitsMap = numsReversedDigitsMapSortedReversedDigits.groupBy(_ % 10).mapValues(_.map(_._1))\n        val numsReversedDigitsMapSortedReversedDigitsMapSorted = numsReversedDigitsMapSortedReversedDigitsMap.sortBy(_._1).mapValues(_.map(_._2))\n        val numsReversedDigitsMapSortedReversedDigitsMapSortedReversed = numsReversedDigitsMapSortedReversedDigitsMapSorted.mapValues(_.map(_.reverse))\n        val numsReversedDigitsMapSortedReversedDigitsMapSortedReversedDigits = numsReversedDigitsMapSortedReversedDigitsMapSortedReversed.mapValues(_.map(_._2))\n        val numsReversedDigitsMapSortedReversedDigitsMapSortedReversedDigitsMap = numsReversedDigitsMapSortedReversedDigitsMapSortedReversedDigits.groupBy(_ % 10).mapValues(_.map(_._1))\n        val numsReversedDigitsMapSortedReversedDigitsMapSortedReversedDigitsMapSorted = numsReversedDigitsMapSortedReversedDigitsMapSortedReversedDigitsMapSorted.sortBy(_._1).mapValues(_.map(_._2))\n        val numsReversedDigitsMapSortedReversedDigitsMapSortedReversedDigitsMapSortedReversed = numsReversedDigitsMapSortedReversedDigitsMapSortedReversedDigitsMapSorted.mapValues(_.map(_.reverse))\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp5j0an6r5.scala:25:89 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnumsReversedDigitsMap\u001b[0m = numsReversedDigits.groupBy(_ % \u001b[31m10\u001b[0m).mapValues(_.map(_._1))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                       ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                         value _1 is not a member of Int\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp5j0an6r5.scala:26:64 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnumsReversedDigitsMapSorted\u001b[0m = numsReversedDigitsMap.sortBy(_._1).mapValues(_.map(_._2))\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue sortBy is not a member of scala.collection.MapView[Int, List[Nothing]]\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp5j0an6r5.scala:34:88 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnumsReversedDigitsMapSortedReversedDigitsMapSortedReversedDigitsMapSorted\u001b[0m = numsReversedDigitsMapSortedReversedDigitsMapSortedReversedDigitsMapSorted.sortBy(_._1).mapValues(_.map(_._2))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^\u001b[0m\n\u001b[31m   |\u001b[0mRecursive \u001b[33mvalue\u001b[0m \u001b[35mnumsReversedDigitsMapSortedReversedDigitsMapSortedReversedDigitsMapSorted\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5j0an6r5.scala:36:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "stdout": "",
      "timestamp": 1659804023
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x % 10 == 1)\n        val tens = arr.filter(x => x % 10 == 0)\n        val tensReversed = tens.reverse\n        val onesReversed = ones.reverse\n        val onesReversedString = onesReversed.map(x => onesReversedStringMap.get(x))\n        val tensReversedString = tensReversed.map(x => tensReversedStringMap.get(x))\n        val result = onesReversedString.toList ++ tensReversedString.toList\n        val resultString = result.map(x => resultStringMap.get(x))\n        return resultString\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4gdkgnxz.scala:25:55 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesReversedString\u001b[0m = onesReversed.map(\u001b[36mx\u001b[0m => onesReversedStringMap.get(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                        Not found: onesReversedStringMap\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4gdkgnxz.scala:26:55 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtensReversedString\u001b[0m = tensReversed.map(\u001b[36mx\u001b[0m => tensReversedStringMap.get(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                        Not found: tensReversedStringMap\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4gdkgnxz.scala:28:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresultString\u001b[0m = result.map(\u001b[36mx\u001b[0m => resultStringMap.get(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: resultStringMap\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659804024
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 10)\n        val tens = arr.filter(x => x >= 10 && x < 100)\n        val hundreds = arr.filter(x => x >= 100 && x < 1000)\n        val thousands = arr.filter(x => x >= 1000)\n        val onesAndTens = ones + tens\n        val onesAndHundreds = ones + hundreds\n        val onesAndThousands = ones + thousands\n        val onesAndOnesAndTens = ones + onesAndTens\n        val onesAndOnesAndHundreds = ones + onesAndHundreds\n        val onesAndOnesAndThousands = ones + onesAndThousands\n        val onesAndOnesAndOnesAndTens = ones + onesAndOnesAndTens\n        val onesAndOnesAndOnesAndHundreds = ones + onesAndOnesAndHundreds\n        val onesAndOnesAndOnesAndThousands = ones + onesAndOnesAndThousands\n        val onesAndOnesAndOnesAndOnesAndTens = ones + onesAndOnesAndOnesAndTens\n        val onesAndOnesAndOnesAndOnesAndHundreds = ones + onesAndOnesAndOnesAndHundreds\n        val onesAndOnesAndOnesAndOnesAndThousands = ones + onesAndOnesAndOnesAndThousands\n        val onesAndOnesAndOnesAndOnesAndOnesAndTens = ones + onesAndOnesAndOnesAndOnesAndTens\n        val onesAndOnesAndOnesAndOnesAndOnesAndHundreds = ones + onesAndOnesAndOnesAndOnesAndHundreds\n        val onesAndOnesAndOnesAndOnesAndOnesAndThousands = ones + onesAndOnesAndOnesAndOnesAndThousands\n        val onesAndOnesAndOnesAndOnesAndOnesAndOnesAndTens = ones + onesAndOnesAndOnesAndOnesAndOnesAndTens\n        val onesAndOnesAndOnesAndOnesAndOnesAndOnesAndHundreds = ones + onesAndOnesAndOnesAndOnesAndOnesAndHundreds\n        val onesAndOnesAndOnesAndOnesAndOnesAndOnesAndThousands = ones + onesAndOnesAndOnesAndOnesAndOnesAndThousands\n        val onesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndTens = ones + onesAndOnesAndOnesAndOnesAndOnesAndOnesAndTens\n        \n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpoanh6f_f.scala:25:31 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesAndTens\u001b[0m = ones + tens\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpoanh6f_f.scala:26:35 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesAndHundreds\u001b[0m = ones + hundreds\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpoanh6f_f.scala:27:36 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesAndThousands\u001b[0m = ones + thousands\n\u001b[31m\u001b[31m   |\u001b[0m                               ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpoanh6f_f.scala:28:38 -----",
      "stdout": "",
      "timestamp": 1659804025
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(_ <= 9).sorted\n        val tens = arr.filter(_ <= 99).sorted\n        val hundreds = arr.filter(_ <= 999).sorted\n        val thousands = arr.filter(_ <= 9999).sorted\n        val tenThousands = arr.filter(_ <= 999999).sorted\n        val oneThousands = arr.filter(_ <= 9999999).sorted\n        val oneHundreds = arr.filter(_ <= 999999999).sorted\n        val oneThousandHundreds = arr.filter(_ <= 99999999999).sorted\n        val oneThousandThousands = arr.filter(_ <= 999999999999).sorted\n        val oneHundredThousands = arr.filter(_ <= 999999999999999).sorted\n        val oneHundredThousandHundreds = arr.filter(_ <= 999999999999999999).sorted\n        val oneHundredThousandThousands = arr.filter(_ <= 999999999999999999999).sorted\n        val oneHundredThousandThousandHundreds = arr.filter(_ <= 999999999999999999999999).sorted\n        val oneHundredThousandThousandThousands = arr.filter(_ <= 999999999999999999999999).sorted\n        val oneHundredThousandThousandThousandHundreds = arr.filter(_ <= 999999999999999999999999).sorted\n        val oneHundredThousandThousandThousandThousands = arr.filter(_ <= 999999999999999999999999).sorted\n        val oneHundredThousandThousandThousandThousandHundreds = arr.filter(_ <= 999999999999999999999999).sorted\n        val oneHundredThousandThousandThousandThousandThousands = arr.filter(_ <= 999999999999999999999999).sorted\n        val oneHundredThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 999999999999999999999999).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 999999999999999999999999).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 999999999999999999999999).sorted\n        val oneHundredTh\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmph5hryxwk.scala:43:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmph5hryxwk.scala:28:50 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m99999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmph5hryxwk.scala:29:51 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m999999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                   number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmph5hryxwk.scala:30:50 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousands\u001b[0m = arr.filter(_ <= \u001b[31m999999999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmph5hryxwk.scala:31:57 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m999999999999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                         ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmph5hryxwk.scala:32:58 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m999999999999999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                          ^^^^^^^^^^^^^^^",
      "stdout": "",
      "timestamp": 1659804029
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 10)\n        val tens = arr.filter(x => x >= 10 && x < 100)\n        val hundreds = arr.filter(x => x >= 100)\n        val reversed = ones + tens + hundreds.reverse\n        val result = reversed.map(x => if(x == 1) \"One\" else if(x == 2) \"Two\" else if(x == 3) \"Three\" else if(x == 4) \"Four\" else if(x == 5) \"Five\" else if(x == 6) \"Six\" else if(x == 7) \"Seven\" else if(x == 8) \"Eight\" else if(x == 9) \"Nine\" else x)\n        return result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpot5f3m_w.scala:24:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mreversed\u001b[0m = ones + tens + hundreds.reverse\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n1 error found\n",
      "stdout": "",
      "timestamp": 1659804029
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1 && x <= 9).toList\n        val tens = arr.filter(x => x >= 10 && x <= 99).toList\n        val hundreds = arr.filter(x => x >= 100 && x <= 999).toList\n        val thousands = arr.filter(x => x >= 1000 && x <= 9999).toList\n        val tenThousands = arr.filter(x => x >= 10000 && x <= 99999).toList\n        val oneThousands = arr.filter(x => x >= 100000 && x <= 999999).toList\n        val oneHundreds = arr.filter(x => x >= 1000000 && x <= 9999999).toList\n        val oneThousandHundreds = arr.filter(x => x >= 10000000 && x <= 99999999).toList\n        val oneThousandThousands = arr.filter(x => x >= 100000000 && x <= 999999999).toList\n        val oneThousandThousandHundreds = arr.filter(x => x >= 1000000000 && x <= 99999999999).toList\n        val oneThousandThousandThousands = arr.filter(x => x >= 10000000000 && x <= 9999999999999).toList\n        val oneThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000 && x <= 9999999999999).toList\n        val oneThousandThousandThousandThousands = arr.filter(x => x >= 1000000000000 && x <= 9999999999999).toList\n        val oneThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000 && x <= 9999999999999).toList\n        val oneThousandThousandThousandThousandThousands = arr.filter(x => x >= 100000000000000 && x <= 9999999999999).toList\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000000 && x <= 9999999999999).toList\n        val oneThousandThousandThousandThousandThousands = arr.filter(x => x >= 10000000000000000 && x <= 9999999999999).toList\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 9999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousands = arr.filter(x => x >= 1000000000000000001 && x <= 9999999999999).toList\n        val oneThousandThousandThousand\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp2gebly32.scala:41:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp2gebly32.scala:37:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000000000\u001b[0m && x <= \u001b[31m9999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp2gebly32.scala:38:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000000000\u001b[0m && x <= \u001b[31m9999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousandThousandHundreds is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousandThousandHundreds\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- Error: /tmp/tmp2gebly32.scala:30:82 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x <= \u001b[31m99999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                  ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   ",
      "stdout": "",
      "timestamp": 1659804031
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 10)\n        val tens = arr.filter(x => x >= 10 && x < 100)\n        val hundreds = arr.filter(x => x >= 100 && x < 1000)\n        val thousands = arr.filter(x => x >= 1000 && x < 10000)\n        val tenThousands = arr.filter(x => x >= 10000 && x < 100000)\n        val oneThousands = arr.filter(x => x >= 100000 && x < 1000000)\n        val oneHundreds = arr.filter(x => x >= 1000000 && x < 10000000)\n        val oneThousandThousands = arr.filter(x => x >= 10000000 && x < 100000000)\n        val oneHundredThousands = arr.filter(x => x >= 100000000 && x < 1000000000)\n        val oneThousandThousandThousands = arr.filter(x => x >= 1000000000 && x < 10000000000)\n        val oneHundredThousandThousands = arr.filter(x => x >= 10000000000 && x < 100000000000)\n        val oneThousandThousandThousandThousands = arr.filter(x => x >= 100000000000 && x < 1000000000000)\n        val oneHundredThousandThousandThousands = arr.filter(x => x >= 1000000000000 && x < 10000000000000)\n        val oneThousandThousandThousandThousandThousands = arr.filter(x => x >= 10000000000000 && x < 100000000000000)\n        val oneHundredThousandThousandThousandThousands = arr.filter(x => x >= 100000000000000 && x < 1000000000000000)\n        val oneThousandThousandThousandThousandThousandThousands = arr.filter(x => x >= 1000000000000000 && x < 10000000000000000)\n        val oneHundredThousandThousandThousandThousandThousands = arr.filter(x => x >= 10000000000000000 && x < 100000000000000000)\n        val oneThousandThousandThousandThousandThousandThousands = arr.filter(x => x >= 100000000000000000 && x < 1000000000000000000)\n        val oneHundredThousandThousandThousandThousandThousands = arr.filter(x => x >= 1000000000000000000 && x < 10000000000000000000)\n        val oneThousandThousandThousandThousandThousandThousandThousands = arr.filter(x => x >= \n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpal_duxz7.scala:40:95 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \n\u001b[31m\u001b[31m   |\u001b[0m                                                                                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpal_duxz7.scala:38:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000000000\u001b[0m && x < \u001b[31m1000000000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousandThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousandThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpal_duxz7.scala:39:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000000000\u001b[0m && x < \u001b[31m10000000000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneHundredThousandThousandThousandThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneHundredThousandThousandThousandThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- Error: /tmp/tmpal_duxz7.scala:30:",
      "stdout": "",
      "timestamp": 1659804030
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x <= 9).map(x => s\"One\")\n        val twos = arr.filter(x => x <= 99).map(x => s\"Two\")\n        val threes = arr.filter(x => x <= 999).map(x => s\"Three\")\n        val fours = arr.filter(x => x <= 9999).map(x => s\"Four\")\n        val fives = arr.filter(x => x <= 99999).map(x => s\"Five\")\n        val sixes = arr.filter(x => x <= 999999).map(x => s\"Six\")\n        val sevens = arr.filter(x => x <= 9999999).map(x => s\"Seven\")\n        val eights = arr.filter(x => x <= 999999999).map(x => s\"Eight\")\n        val nines = arr.filter(x => x <= 99999999999).map(x => s\"Nine\")\n        ones + twos + threes + fours + fives + sixes + sevens + eights + nines\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpn1nron_h.scala:29:41 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnines\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x <= \u001b[31m99999999999\u001b[0m).map(\u001b[36mx\u001b[0m => \u001b[31ms\"Nine\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                         number too large\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpn1nron_h.scala:30:13 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        ones + twos + threes + fours + fives + sixes + sevens + eights + nines\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804030
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 10)\n        val tens = arr.filter(x => x >= 10 && x < 100)\n        val hundreds = arr.filter(x => x >= 100 && x < 1000)\n        val thousands = arr.filter(x => x >= 1000 && x < 10000)\n        val tenThousands = arr.filter(x => x >= 10000 && x < 100000)\n        val hundredThousands = arr.filter(x => x >= 100000 && x < 1000000)\n        val oneThousands = arr.filter(x => x >= 1000000 && x < 10000000)\n        val tenThousandThousands = arr.filter(x => x >= 10000000 && x < 100000000)\n        val hundredThousandThousands = arr.filter(x => x >= 100000000 && x < 1000000000)\n        val oneThousandThousands = arr.filter(x => x >= 1000000000 && x < 10000000000)\n        val tenThousandThousandThousands = arr.filter(x => x >= 10000000000 && x < 100000000000)\n        val hundredThousandThousandThousands = arr.filter(x => x >= 100000000000 && x < 1000000000000)\n        val oneThousandThousandThousands = arr.filter(x => x >= 1000000000000 && x < 10000000000000)\n        val tenThousandThousandThousandThousands = arr.filter(x => x >= 10000000000000 && x < 100000000000000)\n        val hundredThousandThousandThousandThousands = arr.filter(x => x >= 100000000000000 && x < 1000000000000000)\n        val oneThousandThousandThousandThousands = arr.filter(x => x >= 1000000000000000 && x < 10000000000000000)\n        val tenThousandThousandThousandThousandThousands = arr.filter(x => x >= 10000000000000000 && x < 100000000000000000)\n        val hundredThousandThousandThousandThousandThousands = arr.filter(x => x >= 100000000000000000 && x < 1000000000000000000)\n        val oneThousandThousandThousandThousandThousandThousands = arr.filter(x => x >= 1000000000000000000 && x < 10000000000000000000)\n        val tenThousandThousandThousandThousandThousandThousands = arr.filter(x => x >= 10000000000000000000 && x < 100000000000000000000)\n        val hundredThousandThousandThousandThous\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpcrh2mi7w.scala:42:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpcrh2mi7w.scala:30:74 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x < \u001b[31m10000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpcrh2mi7w.scala:31:64 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtenThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000\u001b[0m && x < \u001b[31m100000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpcrh2mi7w.scala:31:83 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtenThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000\u001b[0m && x < \u001b[31m100000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                   ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpcrh2mi7w.scala:32:68 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhundredThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000\u001b[0m && x < \u001b[31m1000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                    ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpcrh2mi7w.scala:32:88 -------------------------",
      "stdout": "",
      "timestamp": 1659804031
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(_ <= 9).sorted\n        val tens = arr.filter(_ <= 99).sorted\n        val hundreds = arr.filter(_ <= 999).sorted\n        val thousands = arr.filter(_ <= 9999).sorted\n        val tenThousands = arr.filter(_ <= 999999).sorted\n        val oneThousands = arr.filter(_ <= 9999999).sorted\n        val oneHundreds = arr.filter(_ <= 999999999).sorted\n        val oneThousandHundreds = arr.filter(_ <= 99999999999).sorted\n        val oneThousandThousandHundreds = arr.filter(_ <= 999999999).sorted\n        val oneHundredThousandThousandHundreds = arr.filter(_ <= 99999999999).sorted\n        val oneHundredThousandThousandHundredThousandHundreds = arr.filter(_ <= 99999999999).sorted\n        val oneHundredThousandThousandHundredThousandHundredThousandHundreds = arr.filter(_ <= 99999999999).sorted\n        val oneHundredThousandThousandHundredThousandHundredThousandHundredThousandHundreds = arr.filter(_ <= 99999999999).sorted\n        val oneHundredThousandThousandHundredThousandHundredThousandHundredThousandHundredThousandHundreds = arr.filter(_ <= 99999999999).sorted\n        val oneHundredThousandThousandHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundreds = arr.filter(_ <= 99999999999).sorted\n        val oneHundredThousandThousandHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundreds = arr.filter(_ <= 99999999999).sorted\n        val oneHundredThousandThousandHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundreds = arr.filter(_ <= 99999999999\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpmfphtayv.scala:38:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpmfphtayv.scala:28:50 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m99999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpmfphtayv.scala:30:65 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m99999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                                 ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpmfphtayv.scala:31:80 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandHundredThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m99999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpmfphtayv.scala:32:95 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandHundredThousandHundredThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m99999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                               ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpmfphtayv.scala:33:110 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandHun",
      "stdout": "",
      "timestamp": 1659804032
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 10)\n        val tens = arr.filter(x => x >= 10 && x < 100)\n        val hundreds = arr.filter(x => x >= 100 && x < 1000)\n        val thousands = arr.filter(x => x >= 1000)\n        val tenThousands = arr.filter(x => x >= 10000 && x < 100000)\n        val oneThousands = arr.filter(x => x >= 1000000 && x < 10000000)\n        val tenMillions = arr.filter(x => x >= 10000000 && x < 100000000)\n        val oneMillions = arr.filter(x => x >= 100000000 && x < 1000000000)\n        val tenBillions = arr.filter(x => x >= 1000000000 && x < 10000000000)\n        val oneBillions = arr.filter(x => x >= 10000000000 && x < 100000000000)\n        val tenTrillions = arr.filter(x => x >= 100000000000 && x < 1000000000000)\n        val oneTrillions = arr.filter(x => x >= 1000000000000 && x < 10000000000000)\n        val tenQuadrillions = arr.filter(x => x >= 10000000000000 && x < 100000000000000)\n        val oneQuadrillions = arr.filter(x => x >= 100000000000000 && x < 1000000000000000)\n        val tenQuintillions = arr.filter(x => x >= 1000000000000000 && x < 10000000000000000)\n        val oneQuintillions = arr.filter(x => x >= 10000000000000000 && x < 100000000000000000)\n        val tenSextillions = arr.filter(x => x >= 100000000000000000 && x < 1000000000000000000)\n        val oneSextillions = arr.filter(x => x >= 1000000000000000000 && x < 10000000000000000000)\n        val tenSeptillions = arr.filter(x => x >= 10000000000000000000 && x < 100000000000000000000)\n        val oneSeptillions = arr.filter(x => x >= 100000000000000000000 && x < 1000000000000000000000)\n        val tenOctillions = arr.filter(x => x >= 1000000000000000000000 && x < 10000000000000000000000)\n        val oneOctillions = arr.filter(x => x >= 10000000000000000000000 && x < 100000000000000000000000)\n        val tenNonillions = arr.filter(x => x >= 100000000000000000000000 && x < 1000000000000000000000000)\n        val oneNonillions = arr.filter(x => x >= 1000000000000000000000000 && x < 10000000000000000000000000)\n        val tenDecillions = arr.filter(x => x >= 10000000000000000000000000 && x < 100\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpk2snr988.scala:46:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpk2snr988.scala:29:65 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtenBillions\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x < \u001b[31m10000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                 ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpk2snr988.scala:30:47 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneBillions\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000\u001b[0m && x < \u001b[31m100000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                               number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpk2snr988.scala:30:66 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneBillions\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000\u001b[0m && x < \u001b[31m100000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpk2snr988.scala:31:48 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtenTrillions\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000\u001b[0m && x < \u001b[31m1000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpk2snr988.scala:31:68 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtenTrillions\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000\u001b[0m && x < \u001b",
      "stdout": "",
      "timestamp": 1659804030
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(_ <= 9).sorted\n        val tens = arr.filter(_ <= 99).sorted\n        val hundreds = arr.filter(_ <= 999).sorted\n        val thousands = arr.filter(_ <= 9999).sorted\n        val tenThousands = arr.filter(_ <= 999999).sorted\n        val oneThousands = arr.filter(_ <= 9999999).sorted\n        val oneHundreds = arr.filter(_ <= 999999999).sorted\n        val oneThousandThousands = arr.filter(_ <= 99999999999).sorted\n        val oneHundredThousands = arr.filter(_ <= 999999999999).sorted\n        val oneHundredThousandThousands = arr.filter(_ <= 999999999999999).sorted\n        val oneHundredThousandThousandThousands = arr.filter(_ <= 999999999999999999).sorted\n        val oneHundredThousandThousandThousandThousands = arr.filter(_ <= 999999999999999999999).sorted\n        val oneHundredThousandThousandThousandThousandThousands = arr.filter(_ <= 99999999999999999999988).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 9999999999999999999998877).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 999999999999999999999887766).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 9999999999999999999998877665544).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 99999999999999999999988776655443321).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 99999999999999999999988776655443321666).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousandThousand\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpzxrv98lb.scala:40:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpzxrv98lb.scala:28:51 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m99999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                   number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpzxrv98lb.scala:29:50 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousands\u001b[0m = arr.filter(_ <= \u001b[31m999999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpzxrv98lb.scala:30:58 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m999999999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                          ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpzxrv98lb.scala:31:66 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m999999999999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                                  ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpzxrv98lb.scala:32:74 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m999999999999999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                 ",
      "stdout": "",
      "timestamp": 1659804032
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(_ <= 9).sortBy(_ - 1).reverse\n        val tens = arr.filter(_ <= 99).sortBy(_ - 10).reverse\n        val hundreds = arr.filter(_ <= 999).sortBy(_ - 100).reverse\n        val thousands = arr.filter(_ <= 9999).sortBy(_ - 1000).reverse\n        val tenThousands = arr.filter(_ <= 999999).sortBy(_ - 10000).reverse\n        val oneThousands = arr.filter(_ <= 9999999).sortBy(_ - 100000).reverse\n        val oneHundreds = arr.filter(_ <= 999999999).sortBy(_ - 1000000).reverse\n        val oneThousandThousands = arr.filter(_ <= 99999999999).sortBy(_ - 10000000).reverse\n        val oneHundredThousands = arr.filter(_ <= 999999999999).sortBy(_ - 10000000).reverse\n        val oneHundredThousandThousands = arr.filter(_ <= 999999999999999).sortBy(_ - 100000000).reverse\n        val oneHundredThousandThousands = arr.filter(_ <= 9999999999999999).sortBy(_ - 1000000000).reverse\n        val oneHundredThousandThousands = arr.filter(_ <= 9999999999999999999).sortBy(_ - 10000000000).reverse\n        val oneHundredThousandThousands = arr.filter(_ <= 99999999999999999999).sortBy(_ - 100000000000).reverse\n        val oneHundredThousandThousands = arr.filter(_ <= 99999999999999999999999).sortBy(_ - 1000000000000).reverse\n        val oneHundredThousandThousands = arr.filter(_ <= 999999999999999999999999).sortBy(_ - 10000000000000).reverse\n        val oneHundredThousandThousands = arr.filter(_ <= 999999999999999999999999999).sortBy(_ - 100000000000000).reverse\n        val oneHundredThousandThousands = arr.filter(_ <= 9999999999999999999999999999).sortBy(_ - 1000000000000000).reverse\n        val oneHundredThousandThousands = arr.filter(_ <= 9999999999999999999999999999999).sortBy(_ - 10000000000000000).reverse\n        val oneHundredThousandThousands = arr.filter(_ <= 9999999999999999\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpvwljaakg.scala:40:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpvwljaakg.scala:31:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m9999999999999999\u001b[0m).sortBy(_ - \u001b[31m1000000000\u001b[0m).reverse\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneHundredThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneHundredThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpvwljaakg.scala:32:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m9999999999999999999\u001b[0m).sortBy(_ - \u001b[31m10000000000\u001b[0m).reverse\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneHundredThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneHundredThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpvwljaakg.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m99999999999999999999\u001b[0m).sortBy(_ - \u001b[31m100000000000\u001b[0m).reverse\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneHundredThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneHundredThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of topleve",
      "stdout": "",
      "timestamp": 1659804032
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val result = new mutable.ListBuffer[String]()\n        val ones = arr.filter(_ <= 9).sorted\n        val tens = arr.filter(_ <= 99).sorted\n        val hundreds = arr.filter(_ <= 999).sorted\n        val thousands = arr.filter(_ <= 9999).sorted\n        val tenThousands = arr.filter(_ <= 999999).sorted\n        val oneThousands = arr.filter(_ <= 9999999).sorted\n        val oneHundreds = arr.filter(_ <= 999999999).sorted\n        val oneThousandThousands = arr.filter(_ <= 99999999999).sorted\n        val oneHundredThousands = arr.filter(_ <= 999999999999).sorted\n        val oneHundredThousandThousands = arr.filter(_ <= 999999999999999).sorted\n        val oneHundredThousandThousandThousands = arr.filter(_ <= 999999999999999999).sorted\n        val oneHundredThousandThousandThousandThousands = arr.filter(_ <= 999999999999999999999).sorted\n        val oneHundredThousandThousandThousandThousandThousands = arr.filter(_ <= 99999999999999999999988).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 9999999999999999999998877).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 999999999999999999999887766).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 9999999999999999999998877665544).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 99999999999999999999988776655443321).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 999999999999999999999887766554433216).sorted\n        val oneHundredThousandThousandThousand\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp46c_k5_u.scala:41:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp46c_k5_u.scala:21:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.ListBuffer[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmp46c_k5_u.scala:29:51 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m99999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                   number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp46c_k5_u.scala:30:50 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousands\u001b[0m = arr.filter(_ <= \u001b[31m999999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp46c_k5_u.scala:31:58 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m999999999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                          ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp46c_k5_u.scala:32:66 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m999999999999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ",
      "stdout": "",
      "timestamp": 1659804031
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 10)\n        val tens = arr.filter(x => x >= 10 && x < 100)\n        val hundreds = arr.filter(x => x >= 100 && x < 1000)\n        val thousands = arr.filter(x => x >= 1000)\n        val hundredsAndThousands = arr.filter(x => x >= 1000 && x < 10000)\n        val tensAndHundreds = arr.filter(x => x >= 10000 && x < 100000)\n        val onesAndTens = arr.filter(x => x >= 100000 && x < 1000000)\n        val onesAndHundreds = arr.filter(x => x >= 1000000 && x < 10000000)\n        val onesAndThousands = arr.filter(x => x >= 10000000 && x < 100000000)\n        val onesAndHundredsAndThousands = arr.filter(x => x >= 100000000 && x < 1000000000)\n        val onesAndHundredsAndThousandsAndTens = arr.filter(x => x >= 1000000000 && x < 10000000000)\n        val onesAndHundredsAndThousandsAndHundreds = arr.filter(x => x >= 10000000000 && x < 100000000000)\n        val onesAndHundredsAndThousandsAndHundredsAndTens = arr.filter(x => x >= 100000000000 && x < 1000000000000)\n        val onesAndHundredsAndThousandsAndHundredsAndHundreds = arr.filter(x => x >= 1000000000000 && x < 10000000000000)\n        val onesAndHundredsAndThousandsAndHundredsAndHundredsAndTens = arr.filter(x => x >= 10000000000000 && x < 100000000000000)\n        val onesAndHundredsAndThousandsAndHundredsAndHundredsAndHundreds = arr.filter(x => x >= 100000000000000 && x < 1000000000000000)\n        val onesAndHundredsAndThousandsAndHundredsAndHundredsAndHundredsAndTens = arr.filter(x => x >= 1000000000000000 && x < 10000000000000000)\n        val onesAndHundredsAndThousandsAndHundredsAndHundredsAndHundredsAndHundreds = arr.filter(x => x >= 10000000000000000 && x < 100000000000000000)\n        val onesAndHundredsAndThousandsAndHundredsAndHundredsAndHundredsAndHundredsAndTens = arr.filter(x => x >= 100000000000000000 && x < 1000000000000000000)\n        val onesAndHundredsAndThousandsAndHund\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpvv_7tiez.scala:41:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpvv_7tiez.scala:31:88 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesAndHundredsAndThousandsAndTens\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x < \u001b[31m10000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpvv_7tiez.scala:32:74 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesAndHundredsAndThousandsAndHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000\u001b[0m && x < \u001b[31m100000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpvv_7tiez.scala:32:93 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesAndHundredsAndThousandsAndHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000\u001b[0m && x < \u001b[31m100000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                             ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpvv_7tiez.scala:33:81 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesAndHundredsAndThousandsAndHundredsAndTens\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000\u001b[0m && x < \u001b[31m1000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                 ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     ",
      "stdout": "",
      "timestamp": 1659804031
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val sortedArr = arr.sortWith(_ < _)\n        val reverseArr = sortedArr.reverse\n        val result = reverseArr.map(x => if (x < 10) \"One\" else if (x < 100) \"Two\" else if (x < 1000) \"Three\" else \"Four\" else if (x < 10000) \"Five\" else \"Six\" else if (x < 100000) \"Seven\" else \"Eight\" else \"Nine\")\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp2d5ilyw0.scala:23:122 --------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = reverseArr.map(\u001b[36mx\u001b[0m => \u001b[33mif\u001b[0m (x < \u001b[31m10\u001b[0m) \u001b[31m\"One\"\u001b[0m \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (x < \u001b[31m100\u001b[0m) \u001b[31m\"Two\"\u001b[0m \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (x < \u001b[31m1000\u001b[0m) \u001b[31m\"Three\"\u001b[0m \u001b[33melse\u001b[0m \u001b[31m\"Four\"\u001b[0m \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (x < \u001b[31m10000\u001b[0m) \u001b[31m\"Five\"\u001b[0m \u001b[33melse\u001b[0m \u001b[31m\"Six\"\u001b[0m \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (x < \u001b[31m100000\u001b[0m) \u001b[31m\"Seven\"\u001b[0m \u001b[33melse\u001b[0m \u001b[31m\"Eight\"\u001b[0m \u001b[33melse\u001b[0m \u001b[31m\"Nine\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                          ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          ')' expected, but 'else' found\n1 error found\n",
      "stdout": "",
      "timestamp": 1659804028
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x % 10 == 1)\n        val tens = arr.filter(x => x % 10 == 0)\n        val tensReversed = tens.reverse\n        val onesReversed = ones.reverse\n        val onesReversedWithTens = onesReversed.zip(tensReversed)\n        val onesReversedWithTensReversed = onesReversedWithTens.reverse\n        val onesReversedWithTensReversedWithOnes = onesReversedWithTensReversed.zip(onesReversed)\n        val onesReversedWithTensReversedWithOnesReversed = onesReversedWithTensReversedWithOnes.reverse\n        val onesReversedWithTensReversedWithOnesReversedWithTens = onesReversedWithTensReversedWithOnesReversed.zip(tens)\n        val onesReversedWithTensReversedWithOnesReversedWithTensReversed = onesReversedWithTensReversedWithOnesReversedWithTens.reverse\n        val onesReversedWithTensReversedWithOnesReversedWithTensReversedWithOnes = onesReversedWithTensReversedWithOnesReversedWithTensReversed.zip(ones)\n        val onesReversedWithTensReversedWithOnesReversedWithTensReversedWithOnesReversed = onesReversedWithTensReversedWithOnesReversedWithTensReversedWithOnes.reverse\n        val onesReversedWithTensReversedWithOnesReversedWithTensReversedWithOnesReversedWithTens = onesReversedWithTensReversedWithOnesReversedWithTensReversedWithOnesReversed.zip(tensReversed)\n        val onesReversedWithTensReversedWithOnesReversedWithTensReversedWithOnesReversedWithTensReversed = onesReversedWithTensReversedWithOnesReversedWithTensReversedWithOnesReversedWithTensReversed.reverse\n        val onesReversedWithTensReversedWithOnesReversedWithTensReversedWithOnesReversedWithTensReversedWithOnes = onesReversedWithTensReversedWithOnesReversedWithTensReversedWithOnesReversedWithTensReversed.zip(ones)\n        val onesReverse\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpp1x4y6_x.scala:37:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpp1x4y6_x.scala:34:107 --------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesReversedWithTensReversedWithOnesReversedWithTensReversedWithOnesReversedWithTensReversed\u001b[0m = onesReversedWithTensReversedWithOnesReversedWithTensReversedWithOnesReversedWithTensReversed.reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                           ^\u001b[0m\n\u001b[31m   |\u001b[0mRecursive \u001b[33mvalue\u001b[0m \u001b[35m\n\u001b[31m   |\u001b[0m  onesReversedWithTensReversedWithOnesReversedWithTensReversedWithOnesReversedWithTensReversed\n\u001b[31m   |\u001b[0m\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp1x4y6_x.scala:37:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659804032
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val nums = arr.toList\n        val numsSorted = nums.sortWith((x, y) => x < y)\n        val numsReversed = numsSorted.reverse\n        val numsReversedString = numsReversed.map(x => numsReversedStringMap.get(x))\n        numsReversedString.toList\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8zwcit9n.scala:24:55 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnumsReversedString\u001b[0m = numsReversed.map(\u001b[36mx\u001b[0m => numsReversedStringMap.get(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                        Not found: numsReversedStringMap\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659804027
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x <= 9 && x >= 1)\n        val tens = arr.filter(x => x <= 99 && x >= 10)\n        val hundreds = arr.filter(x => x <= 999 && x >= 100)\n        val thousands = arr.filter(x => x <= 9999 && x >= 1000)\n        val tenThousands = arr.filter(x => x <= 999999 && x >= 10000)\n        val oneThousands = arr.filter(x => x <= 9999999 && x >= 100000)\n        val tenThousandThousands = arr.filter(x => x <= 999999999 && x >= 1000000)\n        val oneThousandThousands = arr.filter(x => x <= 99999999999 && x >= 10000000)\n        val oneThousandThousandThousands = arr.filter(x => x <= 999999999999999 && x >= 100000000)\n        val oneThousandThousandThousandThousands = arr.filter(x => x <= 9999999999999999999 && x >= 1000000000)\n        val oneThousandThousandThousandThousandThousands = arr.filter(x => x <= 99999999999999999999999 && x >= 10000000000)\n        val oneThousandThousandThousandThousandThousandThousands = arr.filter(x => x <= 999999999999999999999999999 && x >= 100000000000)\n        val oneThousandThousandThousandThousandThousandThousandThousands = arr.filter(x => x <= 9999999999999999999999999999999 && x >= 1000000000000)\n        val oneThousandThousandThousandThousandThousandThousandThousandThousands = arr.filter(x => x <= 99999999999999999999999999999999999 && x >= 10000000000000)\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousands = arr.filter(x => x <= 999999999999999999999999999999999999999 && x >= 100000000000000)\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandThousands = arr.filter(x => x <= 9999999999999999999999999999999999999999999 && x >= 1000000000000000)\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandTh\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpe28rlbhu.scala:38:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpe28rlbhu.scala:28:56 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x <= \u001b[31m99999999999\u001b[0m && x >= \u001b[31m10000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpe28rlbhu.scala:29:64 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x <= \u001b[31m999999999999999\u001b[0m && x >= \u001b[31m100000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpe28rlbhu.scala:30:72 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x <= \u001b[31m9999999999999999999\u001b[0m && x >= \u001b[31m1000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                        ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpe28rlbhu.scala:31:80 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x <= \u001b[31m99999999999999999999999\u001b[0m && x >= \u001b[31m10000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpe28",
      "stdout": "",
      "timestamp": 1659804032
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 10)\n        val tens = arr.filter(x => x >= 10 && x < 100)\n        val hundreds = arr.filter(x => x >= 100 && x < 1000)\n        val thousands = arr.filter(x => x >= 1000)\n        val tenThousands = arr.filter(x => x >= 10000)\n        val oneThousands = arr.filter(x => x >= 100000)\n        val tenThousandsOnes = arr.filter(x => x >= 1000000)\n        val oneThousandsOnes = arr.filter(x => x >= 10000000)\n        val tenThousandsOnesOnes = arr.filter(x => x >= 100000000)\n        val oneThousandsOnesOnes = arr.filter(x => x >= 1000000000)\n        val tenThousandsOnesOnesOnes = arr.filter(x => x >= 10000000000)\n        val oneThousandsOnesOnesOnesOnes = arr.filter(x => x >= 100000000000)\n        val tenThousandsOnesOnesOnesOnesOnes = arr.filter(x => x >= 1000000000000)\n        val oneThousandsOnesOnesOnesOnesOnesOnes = arr.filter(x => x >= 1000000000000)\n        val tenThousandsOnesOnesOnesOnesOnesOnesOnes = arr.filter(x => x >= 10000000000000)\n        val oneThousandsOnesOnesOnesOnesOnesOnesOnesOnes = arr.filter(x => x >= 10000000000000)\n        val tenThousandsOnesOnesOnesOnesOnesOnesOnesOnesOnesOnes = arr.filter(x => x >= 100000000000000)\n        val oneThousandsOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOnes = arr.filter(x => x >= 100000000000000)\n        val tenThousandsOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOnes = arr.filter(x => x >= 1000000000000000)\n        val oneThousandsOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOnes = arr.filter(x => x >= 1000000000000000)\n        val tenThousandsOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOne\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpcmknx6fi.scala:42:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpcmknx6fi.scala:31:60 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtenThousandsOnesOnesOnes\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpcmknx6fi.scala:32:64 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandsOnesOnesOnesOnes\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpcmknx6fi.scala:33:68 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtenThousandsOnesOnesOnesOnesOnes\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                    ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpcmknx6fi.scala:34:72 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandsOnesOnesOnesOnesOnesOnes\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpcmknx6fi.scala:35:76 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtenThousandsOnesOnesOnesOnesOnesOnesOnes\u001b[0m = arr.filter",
      "stdout": "",
      "timestamp": 1659804032
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val sortedArr = arr.sortBy(_.toInt)\n        val reverseArr = sortedArr.reverse\n        val result = reverseArr.map(i => if (i < 10) \"One\" else if (i < 20) \"Two\" else if (i < 30) \"Three\" else if (i < 40) \"Four\" else if (i < 50) \"Five\" else if (i < 60) \"Six\" else if (i < 70) \"Seven\" else \"Eight\" ).reverse\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp2mevhpq_.scala:27)\n\tat Problem.main(tmp2mevhpq_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659804035
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(_ < 10)\n        val tens = arr.filter(_ >= 10 && _ < 100)\n        val hundreds = arr.filter(_ >= 100)\n        val tensReversed = tens.reverse\n        val hundredsReversed = hundreds.reverse\n        val onesReversed = ones.reverse\n        val result = onesReversed.zip(tensReversed, hundredsReversed).map {\n            case (one, ten, hundred) =>\n                val oneName = if (one == 1) \"One\" else \"Two\"\n                val tenName = if (ten == 1) \"Ten\" else \"Twenty\"\n                val hundredName = if (hundred == 1) \"Hundred\" else \"Thousand\"\n                oneName + tenName + hundredName\n        }\n        if (result.isEmpty) result\n        else result.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E086] Syntax Error: /tmp/tmp4xofy0p6.scala:22:30 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtens\u001b[0m = arr.filter(_ >= \u001b[31m10\u001b[0m && _ < \u001b[31m100\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              Wrong number of parameters, expected: 1\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4xofy0p6.scala:27:38 --------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = onesReversed.zip(tensReversed, hundredsReversed).map {\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (List[Long], List[Long])\n\u001b[31m   |\u001b[0m                                      Required: IterableOnce[Any]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804032
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1 && x <= 9).toList\n        val tens = arr.filter(x => x >= 10 && x <= 99).toList\n        val hundreds = arr.filter(x => x >= 100 && x <= 999).toList\n        val thousands = arr.filter(x => x >= 1000 && x <= 9999).toList\n        val tenThousands = arr.filter(x => x >= 10000 && x <= 99999).toList\n        val oneThousands = arr.filter(x => x >= 100000 && x <= 999999).toList\n        val tenThousandThousands = arr.filter(x => x >= 1000000 && x <= 9999999).toList\n        val oneThousandThousands = arr.filter(x => x >= 10000000 && x <= 99999999).toList\n        val tenThousandThousandThousands = arr.filter(x => x >= 100000000 && x <= 999999999).toList\n        val oneThousandThousandThousands = arr.filter(x => x >= 1000000000 && x <= 99999999999).toList\n        val tenThousandThousandThousandThousands = arr.filter(x => x >= 10000000000 && x <= 9999999999999).toList\n        val oneThousandThousandThousandThousands = arr.filter(x => x >= 100000000000 && x <= 9999999999999).toList\n        val tenThousandThousandThousandThousandThousands = arr.filter(x => x >= 1000000000000 && x <= 9999999999999).toList\n        val oneThousandThousandThousandThousandThousands = arr.filter(x => x >= 10000000000000 && x <= 9999999999999).toList\n        val tenThousandThousandThousandThousandThousandThousands = arr.filter(x => x >= 100000000000000 && x <= 9999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousands = arr.filter(x => x >= 1000000000000000 && x <= 9999999999999).toList\n        val tenThousandThousandThousandThousandThousandThousandThousands = arr.filter(x => x >= 10000000000000000 && x <= 9999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousands = arr.filter(x => x >= 100000000000000000 && x <= 9999999999999).toList\n        val tenThousandThousandThousandThousandThousandThousandThousandTh\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpg8a_vty5.scala:40:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpg8a_vty5.scala:30:83 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x <= \u001b[31m99999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                   ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpg8a_vty5.scala:31:72 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtenThousandThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000\u001b[0m && x <= \u001b[31m9999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpg8a_vty5.scala:31:92 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtenThousandThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000\u001b[0m && x <= \u001b[31m9999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                            ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpg8a_vty5.scala:32:72 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000\u001b[0m && x <= \u001b[31m9999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                      ",
      "stdout": "",
      "timestamp": 1659804033
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 10)\n        val tens = arr.filter(x => x >= 10 && x < 100)\n        val hundreds = arr.filter(x => x >= 100 && x < 1000)\n        val thousands = arr.filter(x => x >= 1000 && x < 10000)\n        val tenThousands = arr.filter(x => x >= 10000 && x < 100000)\n        val oneThousands = arr.filter(x => x >= 100000 && x < 1000000)\n        val oneHundreds = arr.filter(x => x >= 1000000 && x < 10000000)\n        val oneThousandHundreds = arr.filter(x => x >= 10000000 && x < 100000000)\n        val oneThousandThousands = arr.filter(x => x >= 100000000 && x < 1000000000)\n        val oneHundredThousands = arr.filter(x => x >= 1000000000 && x < 10000000000)\n        val oneHundredThousandHundreds = arr.filter(x => x >= 10000000000 && x < 100000000000)\n        val oneHundredThousandThousands = arr.filter(x => x >= 100000000000 && x < 1000000000000)\n        val oneHundredThousandThousandHundreds = arr.filter(x => x >= 1000000000000 && x < 10000000000000)\n        val oneHundredThousandThousandThousands = arr.filter(x => x >= 10000000000000 && x < 100000000000000)\n        val oneHundredThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000 && x < 1000000000000000)\n        val oneHundredThousandThousandThousandThousands = arr.filter(x => x >= 1000000000000000 && x < 10000000000000000)\n        val oneHundredThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000000 && x < 100000000000000000)\n        val oneHundredThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x < 1000000000000000000)\n        val oneHundredThousandThousandThousandThousandThousands = arr.filter(x => x >= 1000000000000000000 && x < 10000000000000000000)\n        val oneHundredThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000000000 && x < 100000000000000000000)\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpzmt6ihxw.scala:41:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m        \u001b[33mval\u001b[0m \n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpzmt6ihxw.scala:38:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000000000\u001b[0m && x < \u001b[31m1000000000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneHundredThousandThousandThousandThousandHundreds is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneHundredThousandThousandThousandThousandHundreds\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- Error: /tmp/tmpzmt6ihxw.scala:30:73 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x < \u001b[31m10000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpzmt6ihxw.scala:31:62 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000\u001b[0m && x < \u001b[31m100000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpzmt6ihxw.scala:31:81 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousand",
      "stdout": "",
      "timestamp": 1659804036
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val result = arr.sortWith(_.compareTo(_) < 0)\n        val reversed = result.reverse\n        val ones = reversed.takeWhile(_ < 10)\n        val tens = reversed.dropWhile(_ < 10).takeWhile(_ < 10)\n        val tensReversed = tens.reverse\n        val tensReversedString = tensReversed.mkString(\",\")\n        val onesReversedString = ones.mkString(\",\")\n        val onesReversedStringWithTens = onesReversedString + \",\" + tensReversedString\n        val onesReversedStringWithTensReversed = onesReversedStringWithTens.reverse\n        val onesReversedStringWithTensReversedString = onesReversedStringWithTensReversed.mkString(\",\")\n        val onesReversedStringWithTensReversedStringWithOnes = onesReversedStringWithTensReversedStringWithOnes.reverse\n        val onesReversedStringWithTensReversedStringWithOnesReversed = onesReversedStringWithTensReversedStringWithOnesReversed.mkString(\",\")\n        val onesReversedStringWithTensReversedStringWithOnesReversedReversed = onesReversedStringWithTensReversedStringWithOnesReversedReversed.reverse\n        val onesReversedStringWithTensReversedStringWithOnesReversedReversedReversed = onesReversedStringWithTensReversedStringWithOnesReversedReversedReversed.mkString(\",\")\n        val onesReversedStringWithTensReversedStringWithOnesReversedReversedReversedReversed = onesReversedStringWithTensReversedStringWithOnesReversedReversedReversedReversed.reverse\n        val onesReversedStringWithTensReversedStringWithOnesReversedReversedReversedReversedReversed = onesReversedStringWithTensReversedStringWithOnesReversedReversedReversedReversedReversed.mkString(\",\")\n        val onesReversedStringWithTensReversedStringWithOnesReversedReversedReversedReversedReversedReversed = onesReversedStringWithTensReversedStringWithOnesReversedReversedReversedReversedReversedReversed.reverse\n        val onesReversedStringWithTensReversedStringWithOnesReversedReversedReversedReversedReversedReversed = onesReverse\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp42osusqg.scala:38:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesReversedStringWithTensReversedStringWithOnesReversedReversedReversedReversedReversedReversed\u001b[0m = onesReverse\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0monesReversedStringWithTensReversedStringWithOnesReversedReversedReversedReversedReversedReversed is already defined as \u001b[33mvalue\u001b[0m \u001b[35m\n\u001b[31m   |\u001b[0m  onesReversedStringWithTensReversedStringWithOnesReversedReversedReversedReversedReversedReversed\n\u001b[31m   |\u001b[0m\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp42osusqg.scala:31:63 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesReversedStringWithTensReversedStringWithOnes\u001b[0m = onesReversedStringWithTensReversedStringWithOnes.reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^\u001b[0m\n\u001b[31m   |\u001b[0mRecursive \u001b[33mvalue\u001b[0m \u001b[35monesReversedStringWithTensReversedStringWithOnes\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp42osusqg.scala:32:71 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesReversedStringWithTensReversedStringWithOnesReversed\u001b[0m = onesReversedStringWithTensReversedStringWithOnesReversed.mkString(\u001b[31m\",\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                       ^\u001b[0m\n\u001b[31m   |\u001b[0mRecursive \u001b[33mvalue\u001b[0m \u001b[35monesReversedStringWithTensReversedStringWithOnesReversed\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp42osusqg.scala:33:79 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36m",
      "stdout": "",
      "timestamp": 1659804036
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val result = new mutable.ListBuffer[String]()\n        val ones = arr.filter(x => x >= 1 && x <= 9).toList\n        val tens = arr.filter(x => x >= 10 && x <= 99).toList\n        val hundreds = arr.filter(x => x >= 100 && x <= 999).toList\n        val thousands = arr.filter(x => x >= 1000 && x <= 9999).toList\n        val tenThousands = arr.filter(x => x >= 10000 && x <= 99999).toList\n        val hundredThousands = arr.filter(x => x >= 100000 && x <= 999999).toList\n        val thousandThousands = arr.filter(x => x >= 1000000 && x <= 9999999).toList\n        val oneThousands = arr.filter(x => x >= 10000000 && x <= 999999999).toList\n        val tenThousandThousands = arr.filter(x => x >= 100000000 && x <= 99999999999).toList\n        val hundredThousandThousands = arr.filter(x => x >= 1000000000 && x <= 9999999999999).toList\n        val thousandThousandThousands = arr.filter(x => x >= 10000000000 && x <= 999999999999999).toList\n        val oneThousandThousands = arr.filter(x => x >= 100000000000 && x <= 9999999999999).toList\n        val tenThousandThousandThousands = arr.filter(x => x >= 1000000000000 && x <= 9999999999999).toList\n        val hundredThousandThousandThousands = arr.filter(x => x >= 10000000000000 && x <= 9999999999999).toList\n        val thousandThousandThousandThousands = arr.filter(x => x >= 100000000000000 && x <= 9999999999999).toList\n        val oneThousandThousandThousands = arr.filter(x => x >= 1000000000000000 && x <= 9999999999999).toList\n        val tenThousandThousandThousandThousands = arr.filter(x => x >= 10000000000000000 && x <= 9999999999999).toList\n        val hundredThousandThousandThousandThousands = arr.filter(x => x >= 100000000000000000 && x <= 9999999999999).toList\n        val thousandThousandThousandThousandThousands = arr.filter(x => x >= 100000000000000000 && x <= 9999999999999).toList\n        val oneThousandThousandThousandThousands = arr.filter(x => x >= 100000000000000000 && x <= 9999999999999).toList\n        val tenThousandThousandThousand\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpw5bhraze.scala:43:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpw5bhraze.scala:21:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.ListBuffer[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpw5bhraze.scala:30:74 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtenThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000\u001b[0m && x <= \u001b[31m99999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpw5bhraze.scala:31:79 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhundredThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x <= \u001b[31m9999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                               ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpw5bhraze.scala:32:61 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mthousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000\u001b[0m && x <= \u001b[31m999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                             ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpw5bhraze.scala:32:81 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |",
      "stdout": "",
      "timestamp": 1659804039
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 10)\n        val tens = arr.filter(x => x >= 10 && x < 100)\n        val hundreds = arr.filter(x => x >= 100 && x < 1000)\n        val thousands = arr.filter(x => x >= 1000)\n        val tenThousands = arr.filter(x => x >= 10000)\n        val oneThousands = arr.filter(x => x >= 1000000)\n        val oneHundreds = arr.filter(x => x >= 10000000)\n        val oneThousandThousands = arr.filter(x => x >= 100000000)\n        val oneThousandThousandThousands = arr.filter(x => x >= 1000000000)\n        val oneHundredThousands = arr.filter(x => x >= 1000000000)\n        val oneHundredThousandThousands = arr.filter(x => x >= 10000000000)\n        val oneHundredThousandThousandThousands = arr.filter(x => x >= 100000000000)\n        val oneHundredThousandThousandThousandThousands = arr.filter(x => x >= 1000000000000)\n        val oneHundredThousandThousandThousandThousandThousands = arr.filter(x => x >= 10000000000000)\n        val oneHundredThousandThousandThousandThousandThousandThousands = arr.filter(x => x >= 100000000000000)\n        val oneHundredThousandThousandThousandThousandThousandThousandThousands = arr.filter(x => x >= 1000000000000000)\n        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousands = arr.filter(x => x >= 10000000000000000)\n        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousands = arr.filter(x => x >= 100000000000000000)\n        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousandThousands = arr.filter(x => x >= 100000000000000000)\n        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousandThousandThousands = arr.filter(x => x >= 100000000000000000)\n        val one\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpo21381eo.scala:42:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpo21381eo.scala:38:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousandThousandThousandThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneHundredThousandThousandThousandThousandThousandThousandThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35m\n\u001b[31m   |\u001b[0m  oneHundredThousandThousandThousandThousandThousandThousandThousandThousands\n\u001b[31m   |\u001b[0m\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- Error: /tmp/tmpo21381eo.scala:31:63 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpo21381eo.scala:32:71 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                       ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpo21381eo.scala:33:79 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000",
      "stdout": "",
      "timestamp": 1659804039
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val sortedArr = arr.sortWith(_ < _)\n        val reverseArr = sortedArr.reverse\n        val strArr = reverseArr.map(x => if (x < 10) \"One\" else if (x < 100) \"Two\" else if (x < 1000) \"Three\" else \"Four\")\n        strArr\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp8a7yeawi.scala:27)\n\tat Problem.main(tmp8a7yeawi.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659804042
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 10)\n        val tens = arr.filter(x => x >= 10 && x < 100)\n        val hundreds = arr.filter(x => x >= 100 && x < 1000)\n        val thousands = arr.filter(x => x >= 1000)\n        val hundredsReversed = hundreds.reverse\n        val thousandsReversed = thousands.reverse\n        val tensReversed = tens.reverse\n        val onesReversed = ones.reverse\n        val result = onesReversed.zip(tensReversed).zip(hundredsReversed).zip(thousandsReversed)\n        .map { case (one, ten, hundred, thousand) => \"One\" #:: ten #:: hundred #:: thousand }\n        val result2 = onesReversed.zip(tensReversed).zip(hundredsReversed).zip(thousandsReversed)\n        .map { case (one, ten, hundred, thousand) => \"Two\" #:: ten #:: hundred #:: thousand }\n        val result3 = onesReversed.zip(tensReversed).zip(hundredsReversed).zip(thousandsReversed)\n        .map { case (one, ten, hundred, thousand) => \"Three\" #:: ten #:: hundred #:: thousand }\n        val result4 = onesReversed.zip(tensReversed).zip(hundredsReversed).zip(thousandsReversed)\n        .map { case (one, ten, hundred, thousand) => \"Four\" #:: ten #:: hundred #:: thousand }\n        val result5 = onesReversed.zip(tensReversed).zip(hundredsReversed).zip(thousandsReversed)\n        .map { case (one, ten, hundred, thousand) => \"Five\" #:: ten #:: hundred #:: thousand }\n        val result6 = onesReversed.zip(tensReversed).zip(hundredsReversed).zip(thousandsReversed)\n        .map { case (one, ten, hundred, thousand) => \"Six\" #:: ten #:: hundred #:: thousand }\n        val result7 = onesReversed.zip(tensReversed).zip(hundredsReversed).zip(thousandsReversed)\n        .map { case (one, ten, hundred, thousand) => \"Seven\" #:: ten #:: hundred #:: thousand }\n        val result8 = onesReversed.zip(\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmphrt65y72.scala:43:39 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult8\u001b[0m = onesReversed.zip(\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmphrt65y72.scala:30:79 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        .map { \u001b[33mcase\u001b[0m (one, ten, hundred, thousand) => \u001b[31m\"One\"\u001b[0m #:: ten #:: hundred #:: thousand }\n\u001b[31m\u001b[31m   |\u001b[0m                                                                               ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                        value #:: is not a member of Any\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmphrt65y72.scala:32:79 ------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        .map { \u001b[33mcase\u001b[0m (one, ten, hundred, thousand) => \u001b[31m\"Two\"\u001b[0m #:: ten #:: hundred #:: thousand }\n\u001b[31m\u001b[31m   |\u001b[0m                                                                               ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                        value #:: is not a member of Any\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmphrt65y72.scala:34:81 ------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        .map { \u001b[33mcase\u001b[0m (one, ten, hundred, thousand) => \u001b[31m\"Three\"\u001b[0m #:: ten #:: hundred #:: thousand }\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                 ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                        value #:: is not a member of Any\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmphrt65y72.scala:36:80 ------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m        .map { \u001b[33mcase\u001b[0m (one, ten, hundred, thousand) => \u001b[31m\"Four\"\u001b[0m #:: ten #:: hundred #:: thousand }\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m   ",
      "stdout": "",
      "timestamp": 1659804045
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1 && x <= 9).toList\n        val tens = arr.filter(x => x >= 10 && x <= 99).toList\n        val hundreds = arr.filter(x => x >= 100 && x <= 999).toList\n        val thousands = arr.filter(x => x >= 1000 && x <= 9999).toList\n        val tenThousands = arr.filter(x => x >= 10000 && x <= 99999).toList\n        val hundredThousands = arr.filter(x => x >= 100000 && x <= 999999).toList\n        val thousandThousands = arr.filter(x => x >= 1000000 && x <= 9999999).toList\n        val oneThousands = arr.filter(x => x >= 10000000 && x <= 999999999).toList\n        val oneHundreds = arr.filter(x => x >= 100000000 && x <= 999999999).toList\n        val oneThousandThousands = arr.filter(x => x >= 1000000000 && x <= 99999999999).toList\n        val oneHundredThousands = arr.filter(x => x >= 10000000000 && x <= 99999999999).toList\n        val oneThousandHundreds = arr.filter(x => x >= 100000000000 && x <= 999999999999).toList\n        val oneHundredThousandThousands = arr.filter(x => x >= 1000000000000 && x <= 999999999999999).toList\n        val oneHundredThousandHundreds = arr.filter(x => x >= 10000000000000 && x <= 9999999999999999).toList\n        val oneThousandHundredThousands = arr.filter(x => x >= 100000000000000 && x <= 9999999999999999999).toList\n        val oneHundredThousandHundredThousands = arr.filter(x => x >= 1000000000000000 && x <= 99999999999999999999).toList\n        val oneThousandHundredThousandHundreds = arr.filter(x => x >= 10000000000000000 && x <= 99999999999999999999999).toList\n        val oneHundredThousandHundredThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 999999999999999999999999).toList\n        val oneThousandHundredThousandHundredThousandHundreds = arr.filter(x => x >= 1000000000000000000 && x <= 999999999999999999999999999).toList\n        val oneHundredThousandHundredThousandHundredThousandHundreds = arr.filter(x => x >= \n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp6pfb7v3i.scala:40:91 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandHundredThousandHundredThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \n\u001b[31m\u001b[31m   |\u001b[0m                                                                                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmp6pfb7v3i.scala:30:75 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x <= \u001b[31m99999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                           ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp6pfb7v3i.scala:31:55 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000\u001b[0m && x <= \u001b[31m99999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                       number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp6pfb7v3i.scala:31:75 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000\u001b[0m && x <= \u001b[31m99999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                           ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp6pfb7v3i.scala:32:55 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31",
      "stdout": "",
      "timestamp": 1659804043
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(_ <= 9).sorted\n        val tens = arr.filter(_ <= 99).sorted\n        val hundreds = arr.filter(_ <= 999).sorted\n        val thousands = arr.filter(_ <= 9999).sorted\n        val tenThousands = arr.filter(_ <= 999999).sorted\n        val oneThousands = arr.filter(_ <= 9999999).sorted\n        val oneHundreds = arr.filter(_ <= 999999999).sorted\n        val oneThousandThousands = arr.filter(_ <= 99999999999).sorted\n        val oneHundredThousands = arr.filter(_ <= 999999999999).sorted\n        val oneHundredThousandThousands = arr.filter(_ <= 999999999999999).sorted\n        val oneHundredThousandThousandThousands = arr.filter(_ <= 999999999999999999).sorted\n        val oneHundredThousandThousandThousandThousands = arr.filter(_ <= 999999999999999999999).sorted\n        val oneHundredThousandThousandThousandThousandThousands = arr.filter(_ <= 99999999999999999999989).sorted\n        val oneHundredThousandThousandThousandThousandThousands = arr.filter(_ <= 9999999999999999999998989).sorted\n        val oneHundredThousandThousandThousandThousandThousands = arr.filter(_ <= 999999999999999999999898989).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 99999999999999999999989898989).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 9999999999999999999998989898989).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 99999999999999999999989898989898989).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 999999999999999999999898989898989898989).sorted\n        val oneHundredThousandThousand\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpo15v_h_9.scala:41:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpo15v_h_9.scala:34:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousandThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m9999999999999999999998989\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneHundredThousandThousandThousandThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneHundredThousandThousandThousandThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpo15v_h_9.scala:35:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousandThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m999999999999999999999898989\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneHundredThousandThousandThousandThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneHundredThousandThousandThousandThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpo15v_h_9.scala:37:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousandThousandThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m9999999999999999999998989898989\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneHundredThousandThousandThousandThousandThousandThousands is already ",
      "stdout": "",
      "timestamp": 1659804007
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val one = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val two = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val three = List(\"Twenty\", \"Thirty\", \"Fourty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\")\n        val four = List(\"Fifty\", \"Fourty\", \"Fifty\", \"Fourty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\")\n        val five = List(\"Fifty\", \"Fourty\", \"Fifty\", \"Fourty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\")\n        val six = List(\"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\", \"Ninety\", \"Ninety\", \"Ninety\", \"Ninety\")\n        val seven = List(\"Seventy\", \"Eighty\", \"Ninety\", \"Ninety\", \"Ninety\", \"Ninety\", \"Ninety\", \"Ninety\")\n        val eight = List(\"Eighty\", \"Ninety\", \"Ninety\", \"Ninety\", \"Ninety\", \"Ninety\", \"Ninety\", \"Ninety\")\n        val nine = List(\"Ninety\", \"Ninety\", \"Ninety\", \"Ninety\", \"Ninety\", \"Ninety\", \"Ninety\", \"Ninety\")\n        val ten = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val eleven = List(\"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val twelve = List(\"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val thirteen = List(\"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val fourteen = List(\"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eigh\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpshbfbdhn.scala:34:75 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfourteen\u001b[0m = List(\u001b[31m\"Fourteen\"\u001b[0m, \u001b[31m\"Fifteen\"\u001b[0m, \u001b[31m\"Sixteen\"\u001b[0m, \u001b[31m\"Seventeen\"\u001b[0m, \"Eigh\n\u001b[31m\u001b[31m   |\u001b[0m                                                                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 unclosed string literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmpshbfbdhn.scala:36:34 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 end of statement expected but '=' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpshbfbdhn.scala:35:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpshbfbdhn.scala:36:4 -------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    Not found: Eighdef\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "stdout": "",
      "timestamp": 1659804042
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val one = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val two = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val three = List(\"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\")\n        val four = List(\"TwentyOne\", \"ThirtyOne\", \"FortyOne\", \"FiftyOne\", \"SixtyOne\", \"SeventyOne\", \"EightyOne\", \"NinetyOne\")\n        val five = List(\"TwentyTwo\", \"ThirtyTwo\", \"FortyTwo\", \"FiftyTwo\", \"SixtyTwo\", \"SeventyTwo\", \"EightyTwo\", \"NinetyTwo\")\n        val six = List(\"TwentyThree\", \"ThirtyThree\", \"FortyThree\", \"FiftyThree\", \"SixtyThree\", \"SeventyThree\", \"EightyThree\", \"NinetyThree\")\n        val seven = List(\"TwentyFour\", \"ThirtyFour\", \"FortyFour\", \"FiftyFour\", \"SixtyFour\", \"SeventyFour\", \"EightyFour\", \"NinetyFour\")\n        val eight = List(\"TwentyFive\", \"ThirtyFive\", \"FortyFive\", \"FiftyFive\", \"SixtyFive\", \"SeventyFive\", \"EightyFive\", \"NinetyFive\")\n        val nine = List(\"TwentySix\", \"ThirtySix\", \"FortySix\", \"FiftySix\", \"SixtySix\", \"SeventySix\", \"EightySix\", \"NinetySix\")\n        val ten = List(\"TwentySeven\", \"ThirtySeven\", \"FortySeven\", \"FiftySeven\", \"SixtySeven\", \"SeventySeven\", \"EightySeven\", \"NinetySeven\")\n        val eleven = List(\"TwentyEight\", \"ThirtyEight\", \"FortyEight\", \"FiftyEight\", \"SixtyEight\", \"SeventyEight\", \"EightyEight\", \"NinetyEight\")\n        val twelve = List(\"TwentyNine\", \"ThirtyNine\", \"For\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp_ggq_okv.scala:32:54 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtwelve\u001b[0m = List(\u001b[31m\"TwentyNine\"\u001b[0m, \u001b[31m\"ThirtyNine\"\u001b[0m, \"For\n\u001b[31m\u001b[31m   |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 unclosed string literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmp_ggq_okv.scala:34:34 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 end of statement expected but '=' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_ggq_okv.scala:33:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_ggq_okv.scala:34:4 -------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    Not found: Fordef\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "stdout": "",
      "timestamp": 1659804041
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x % 10 == 1)\n        val tens = arr.filter(x => x % 10 == 0)\n        val reversed = ones + tens.reverse\n        val result = reversed.map(x => byDigit(x))\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbhpsto90.scala:23:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mreversed\u001b[0m = ones + tens.reverse\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n1 error found\n",
      "stdout": "",
      "timestamp": 1659804044
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(_ <= 9).sorted\n        val tens = arr.filter(_ <= 99).sorted\n        val hundreds = arr.filter(_ <= 999).sorted\n        val thousands = arr.filter(_ <= 9999).sorted\n        val tenThousands = arr.filter(_ <= 999999).sorted\n        val oneThousands = arr.filter(_ <= 9999999).sorted\n        val oneHundreds = arr.filter(_ <= 999999999).sorted\n        val oneThousandThousands = arr.filter(_ <= 99999999999).sorted\n        val oneHundredThousands = arr.filter(_ <= 999999999999).sorted\n        val oneHundredThousandThousands = arr.filter(_ <= 999999999999999).sorted\n        val oneHundredThousandThousandThousands = arr.filter(_ <= 999999999999999999).sorted\n        val oneHundredThousandThousandThousandThousands = arr.filter(_ <= 999999999999999999999).sorted\n        val oneHundredThousandThousandThousandThousandThousands = arr.filter(_ <= 999999999999999999999999).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 999999999999999999999999999).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 999999999999999999999999999999).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 999999999999999999999999999999).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 999999999999999999999999999999999).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 999999999999999999999999999999999).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousandThousandThous\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpgkipz9kg.scala:40:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpgkipz9kg.scala:28:51 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m99999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                   number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpgkipz9kg.scala:29:50 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousands\u001b[0m = arr.filter(_ <= \u001b[31m999999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpgkipz9kg.scala:30:58 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m999999999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                          ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpgkipz9kg.scala:31:66 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m999999999999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                                  ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpgkipz9kg.scala:32:74 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m999999999999999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                 ",
      "stdout": "",
      "timestamp": 1659804044
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(_ <= 9).sorted\n        val tens = arr.filter(_ <= 99).sorted\n        val hundreds = arr.filter(_ <= 999).sorted\n        val thousands = arr.filter(_ <= 9999).sorted\n        val tenThousands = arr.filter(_ <= 999999).sorted\n        val oneThousands = arr.filter(_ <= 9999999).sorted\n        val oneHundreds = arr.filter(_ <= 999999999).sorted\n        val oneThousandHundreds = arr.filter(_ <= 99999999999).sorted\n        val oneThousandThousandHundreds = arr.filter(_ <= 999999999999999).sorted\n        val oneHundredThousandThousandHundreds = arr.filter(_ <= 9999999999999999999).sorted\n        val oneThousandThousandThousandHundredThousandHundreds = arr.filter(_ <= 99999999999999999999999).sorted\n        val oneHundredThousandThousandThousandHundredThousandHundreds = arr.filter(_ <= 999999999999999999999999999).sorted\n        val oneThousandThousandThousandThousandHundredThousandHundredThousandHundreds = arr.filter(_ <= 9999999999999999999999999999999).sorted\n        val oneHundredThousandThousandThousandHundredThousandHundredThousandHundredThousandHundreds = arr.filter(_ <= 999999999999999999999999999999999999999).sorted\n        val oneThousandThousandThousandThousandHundredThousandHundredThousandHundredThousandHundredThousandHundreds = arr.filter(_ <= 99999999999999999999999999999999999999999999999).sorted\n        val oneHundredThousandThousandThousandHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundreds = arr.filter(_ <= 9999999999999999999999999999999999999999999999999999999).sorted\n        val oneThousandThousandThousandThousandHundredThousandHundredThousandHundredThousandHundredTh\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpdenbfmhc.scala:38:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpdenbfmhc.scala:28:50 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m99999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpdenbfmhc.scala:29:58 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m999999999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                          ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpdenbfmhc.scala:30:65 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m9999999999999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                                 ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpdenbfmhc.scala:31:81 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandHundredThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m99999999999999999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                 ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpdenbfmhc.scala:32:88 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousandHundredThousandHund",
      "stdout": "",
      "timestamp": 1659804045
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val result = new mutable.ListBuffer[String]()\n        val one = mutable.List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val ten = mutable.List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val twenty = mutable.List(\"Twenty\", \"Twentyone\", \"Twentytwo\", \"Twentythree\", \"Twentyfour\", \"Twentyfive\", \"Twentysix\", \"Twentyseven\", \"Twentyeight\", \"Twentynine\")\n        val hundred = mutable.List(\"Hundred\", \"Hundredone\", \"Hundredtwo\", \"Hundredthree\", \"Hundredfour\", \"Hundredfive\", \"Hundredsix\", \"Hundredseven\", \"Hundredeight\", \"Hundrednine\")\n        val thousand = mutable.List(\"Thousand\", \"Thousandone\", \"Thousandtwo\", \"Thousandthree\", \"Thousandfour\", \"Thousandfive\", \"Thousandsix\", \"Thousandseven\", \"Thousandeight\", \"Thousandnine\")\n        val million = mutable.List(\"Million\", \"Millionone\", \"Milliontwo\", \"Millionthree\", \"Millionfour\", \"Millionfive\", \"Millionsix\", \"Millionseven\", \"Millioneight\", \"Millionnine\")\n        val billion = mutable.List(\"Billion\", \"Billionone\", \"Billiontwo\", \"Billionthree\", \"Billionfour\", \"Billionfive\", \"Billionsix\", \"Billionseven\", \"Billioneight\", \"Billionnine\")\n        val trillion = mutable.List(\"Trillion\", \"Trillionone\", \"Trilliontwo\", \"Trillionthree\", \"Trillionfour\", \"Trillionfive\", \"Trillionsix\", \"Trillionseven\", \"Trillioneight\", \"Trillionnine\")\n        val quadrillion = mutable.List(\"Quadrillion\", \"Quadrillionone\", \"Quadrilliontwo\", \"Quadrillionthree\", \"Quadrillionfour\", \"Quadrillionfive\", \"Quadrillionsix\", \"Quadrillionseven\", \"Quadrillioneight\", \"Quad\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp9mgxfr38.scala:30:206 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mquadrillion\u001b[0m = mutable.List(\u001b[31m\"Quadrillion\"\u001b[0m, \u001b[31m\"Quadrillionone\"\u001b[0m, \u001b[31m\"Quadrilliontwo\"\u001b[0m, \u001b[31m\"Quadrillionthree\"\u001b[0m, \u001b[31m\"Quadrillionfour\"\u001b[0m, \u001b[31m\"Quadrillionfive\"\u001b[0m, \u001b[31m\"Quadrillionsix\"\u001b[0m, \u001b[31m\"Quadrillionseven\"\u001b[0m, \u001b[31m\"Quadrillioneight\"\u001b[0m, \"Quad\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                              ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 unclosed string literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmp9mgxfr38.scala:32:34 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 end of statement expected but '=' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9mgxfr38.scala:21:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.ListBuffer[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9mgxfr38.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mone\u001b[0m = mutable.List(\u001b[31m\"One\"\u001b[0m, \u001b[31m\"Two\"\u001b[0m, \u001b[31m\"Three\"\u001b[0m, \u001b[31m\"Four\"\u001b[0m, \u001b[31m\"Five\"\u001b[0m, \u001b[31m\"Six\"\u001b[0m, \u001b[31m\"Seven\"\u001b[0m, \u001b[31m\"Eight\"\u001b[0m, \u001b[31m\"Nine\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9mgxfr38.scala:23:18 --",
      "stdout": "",
      "timestamp": 1659804042
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 10)\n        val tens = arr.filter(x => x >= 10 && x < 100)\n        val hundreds = arr.filter(x => x >= 100 && x < 1000)\n        val thousands = arr.filter(x => x >= 1000)\n        val onesAndTens = ones + tens\n        val onesAndHundreds = ones + hundreds\n        val onesAndThousands = ones + thousands\n        val onesAndOnes = ones + ones\n        val onesAndOnesAndTens = onesAndOnes + tens\n        val onesAndOnesAndHundreds = onesAndOnes + hundreds\n        val onesAndOnesAndThousands = onesAndOnes + thousands\n        val onesAndOnesAndOnes = onesAndOnes + ones\n        val onesAndOnesAndOnesAndTens = onesAndOnesAndTens + tens\n        val onesAndOnesAndOnesAndHundreds = onesAndOnesAndOnes + hundreds\n        val onesAndOnesAndOnesAndThousands = onesAndOnesAndOnes + thousands\n        val onesAndOnesAndOnesAndOnes = onesAndOnesAndOnes + ones\n        val onesAndOnesAndOnesAndOnesAndTens = onesAndOnesAndOnesAndTens + tens\n        val onesAndOnesAndOnesAndOnesAndHundreds = onesAndOnesAndOnesAndOnes + hundreds\n        val onesAndOnesAndOnesAndOnesAndThousands = onesAndOnesAndOnesAndOnes + thousands\n        val onesAndOnesAndOnesAndOnesAndOnes = onesAndOnesAndOnesAndOnes + ones\n        val onesAndOnesAndOnesAndOnesAndTens = onesAndOnesAndOnesAndTens + tens\n        val onesAndOnesAndOnesAndOnesAndHundreds = onesAndOnesAndOnesAndOnes + hundreds\n        val onesAndOnesAndOnesAndOnesAndThousands = onesAndOnesAndOnesAndOnes + thousands\n        val onesAndOnesAndOnesAndOnesAndOnes = onesAndOnesAndOnesAndOnes + ones\n        val onesAndOnesAndOnesAndOnesAndOnesAndTens = onesAndOnesAndOnesAndOnesAndTens + tens\n        val onesAndOnesAndOnesAndOnesAndHundreds = onesAndOnesAndOnesAndOnesAndHundreds + hundreds\n        val onesAndOnesAndOnesAndOne\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpbs3ehos4.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpbs3ehos4.scala:41:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesAndOnesAndOnesAndOnesAndTens\u001b[0m = onesAndOnesAndOnesAndTens + tens\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0monesAndOnesAndOnesAndOnesAndTens is already defined as \u001b[33mvalue\u001b[0m \u001b[35monesAndOnesAndOnesAndOnesAndTens\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpbs3ehos4.scala:42:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesAndOnesAndOnesAndOnesAndHundreds\u001b[0m = onesAndOnesAndOnesAndOnes + hundreds\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0monesAndOnesAndOnesAndOnesAndHundreds is already defined as \u001b[33mvalue\u001b[0m \u001b[35monesAndOnesAndOnesAndOnesAndHundreds\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpbs3ehos4.scala:43:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesAndOnesAndOnesAndOnesAndThousands\u001b[0m = onesAndOnesAndOnesAndOnes + thousands\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0monesAndOnesAndOnesAndOnesAndThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35monesAndOnesAndOnesAndOnesAndThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpbs3ehos4.scala:44:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36m",
      "stdout": "",
      "timestamp": 1659804046
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 10).map(x => s\"One\")\n        val twos = arr.filter(x => x < 20).map(x => s\"Two\")\n        val threes = arr.filter(x => x < 30).map(x => s\"Three\")\n        val fours = arr.filter(x => x < 40).map(x => s\"Four\")\n        val fives = arr.filter(x => x < 50).map(x => s\"Five\")\n        val sixes = arr.filter(x => x < 60).map(x => s\"Six\")\n        val sevens = arr.filter(x => x < 70).map(x => s\"Seven\")\n        val eights = arr.filter(x => x < 80).map(x => s\"Eight\")\n        val nines = arr.filter(x => x < 90).map(x => s\"Nine\")\n        ones + twos + threes + fours + fives + sixes + sevens + eights + nines\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpc_1bc1mi.scala:30:13 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        ones + twos + threes + fours + fives + sixes + sevens + eights + nines\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n1 error found\n",
      "stdout": "",
      "timestamp": 1659804045
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(_ <= 9).sorted\n        val tens = arr.filter(_ <= 99).sorted\n        val hundreds = arr.filter(_ <= 999).sorted\n        val thousands = arr.filter(_ <= 9999).sorted\n        val tenThousands = arr.filter(_ <= 999999).sorted\n        val oneThousands = arr.filter(_ <= 9999999).sorted\n        val oneHundreds = arr.filter(_ <= 999999999).sorted\n        val oneThousandThousands = arr.filter(_ <= 99999999999).sorted\n        val oneHundredThousands = arr.filter(_ <= 999999999999).sorted\n        val oneHundredThousandThousands = arr.filter(_ <= 999999999999999).sorted\n        val oneHundredThousandThousandThousands = arr.filter(_ <= 9999999999999999999).sorted\n        val oneHundredThousandThousandThousandThousands = arr.filter(_ <= 99999999999999999999999).sorted\n        val oneHundredThousandThousandThousandThousandThousands = arr.filter(_ <= 999999999999999999999999999).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 9999999999999999999999999999999).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 99999999999999999999999999999999999).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 999999999999999999999999999999999999999).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 9999999999999999999999999999999999999999999).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 99999999999999999999999999999999999999999999999).sorted\n        val oneHundredThousandThousandThousand\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpb50_iw6u.scala:40:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpb50_iw6u.scala:28:51 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m99999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                   number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpb50_iw6u.scala:29:50 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousands\u001b[0m = arr.filter(_ <= \u001b[31m999999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpb50_iw6u.scala:30:58 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m999999999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                          ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpb50_iw6u.scala:31:66 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m9999999999999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                                  ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpb50_iw6u.scala:32:74 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m99999999999999999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m             ",
      "stdout": "",
      "timestamp": 1659804006
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 10).map(x => s\"One\")\n        val tens = arr.filter(x => x < 100).map(x => s\"Ten\")\n        val hundreds = arr.filter(x => x < 1000).map(x => s\"Hundred\")\n        val thousands = arr.filter(x => x < 10000).map(x => s\"Thousand\")\n        val millions = arr.filter(x => x < 100000).map(x => s\"Million\")\n        val billions = arr.filter(x => x < 1000000).map(x => s\"Billion\")\n        val trillions = arr.filter(x => x < 10000000).map(x => s\"Trillion\")\n        val quadrillions = arr.filter(x => x < 100000000).map(x => s\"Quadrillion\")\n        val quintillions = arr.filter(x => x < 1000000000).map(x => s\"Quintillion\")\n        val sextillions = arr.filter(x => x < 10000000000).map(x => s\"Sextillion\")\n        val septillions = arr.filter(x => x < 100000000000).map(x => s\"Septillion\")\n        val octillions = arr.filter(x => x < 1000000000000).map(x => s\"Octillion\")\n        val nonillions = arr.filter(x => x < 10000000000000).map(x => s\"Nonillion\")\n        val decillions = arr.filter(x => x < 100000000000000).map(x => s\"Decillion\")\n        val undecillions = arr.filter(x => x < 1000000000000000).map(x => s\"Undecillion\")\n        val duodecillions = arr.filter(x => x < 10000000000000000).map(x => s\"Duodecillion\")\n        val tredecillions = arr.filter(x => x < 100000000000000000).map(x => s\"Tredecillion\")\n        val quattuordecillions = arr.filter(x => x < 1000000000000000000).map(x => s\"Quattuordecillion\")\n        val sexdecillions = arr.filter(x => x < 10000000000000000000).map(x => s\"Sexdecillion\")\n        val septendecillions = arr.filter(x => x < 100000000000000000000).map(x => s\"Septendecillion\")\n        val octodecillions = arr.filter(x => x < 1000000000000000000000).map(x => s\"Octodecillion\")\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpi5a849r9.scala:30:46 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msextillions\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x < \u001b[31m10000000000\u001b[0m).map(\u001b[36mx\u001b[0m => \u001b[31ms\"Sextillion\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                              ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpi5a849r9.scala:31:46 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mseptillions\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x < \u001b[31m100000000000\u001b[0m).map(\u001b[36mx\u001b[0m => \u001b[31ms\"Septillion\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                              ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpi5a849r9.scala:32:45 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moctillions\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x < \u001b[31m1000000000000\u001b[0m).map(\u001b[36mx\u001b[0m => \u001b[31ms\"Octillion\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpi5a849r9.scala:33:45 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnonillions\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x < \u001b[31m10000000000000\u001b[0m).map(\u001b[36mx\u001b[0m => \u001b[31ms\"Nonillion\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpi5a849r9.scala:34:45 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mdecillions\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x < \u001b[31m100000000000000\u001b[0m).map(\u001b[36mx\u001b[0m => \u001b[31ms\"Decillion\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             number too large\n\u001b[31m\u001b[31m-- Er",
      "stdout": "",
      "timestamp": 1659804044
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(_ <= 9).sorted\n        val tens = arr.filter(_ <= 99).sorted\n        val hundreds = arr.filter(_ <= 999).sorted\n        val thousands = arr.filter(_ <= 9999).sorted\n        val tenThousands = arr.filter(_ <= 999999).sorted\n        val oneThousands = arr.filter(_ <= 9999999).sorted\n        val oneHundreds = arr.filter(_ <= 999999999).sorted\n        val oneThousandThousands = arr.filter(_ <= 99999999999).sorted\n        val oneHundredThousands = arr.filter(_ <= 999999999999).sorted\n        val oneHundredThousandThousands = arr.filter(_ <= 999999999999999).sorted\n        val oneHundredThousandThousandThousands = arr.filter(_ <= 999999999999999999).sorted\n        val oneHundredThousandThousandThousandThousands = arr.filter(_ <= 999999999999999999999).sorted\n        val oneHundredThousandThousandThousandThousandThousands = arr.filter(_ <= 9999999999999999999998).sorted\n        val oneHundredThousandThousandThousandThousandThousands = arr.filter(_ <= 99999999999999999999987).sorted\n        val oneHundredThousandThousandThousandThousandThousands = arr.filter(_ <= 999999999999999999999876).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 9999999999999999999998765).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 99999999999999999999987654).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 999999999999999999999876543).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 9999999999999999999998765432).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 9999\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpmod_415q.scala:41:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpmod_415q.scala:34:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousandThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m99999999999999999999987\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneHundredThousandThousandThousandThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneHundredThousandThousandThousandThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpmod_415q.scala:35:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousandThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m999999999999999999999876\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneHundredThousandThousandThousandThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneHundredThousandThousandThousandThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpmod_415q.scala:37:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousandThousandThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m99999999999999999999987654\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneHundredThousandThousandThousandThousandThousandThousands is already defined as \u001b[33mvalu",
      "stdout": "",
      "timestamp": 1659804045
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(_ <= 9).sorted\n        val tens = arr.filter(_ <= 99).sorted\n        val hundreds = arr.filter(_ <= 999).sorted\n        val thousands = arr.filter(_ <= 9999).sorted\n        val tenThousands = arr.filter(_ <= 999999).sorted\n        val oneThousands = arr.filter(_ <= 9999999).sorted\n        val oneHundreds = arr.filter(_ <= 999999999).sorted\n        val oneThousandThousands = arr.filter(_ <= 99999999999).sorted\n        val oneHundredThousands = arr.filter(_ <= 999999999999).sorted\n        val oneHundredThousandThousands = arr.filter(_ <= 999999999999999).sorted\n        val oneHundredThousandThousandThousands = arr.filter(_ <= 999999999999999999).sorted\n        val oneHundredThousandThousandThousandThousands = arr.filter(_ <= 999999999999999999999).sorted\n        val oneHundredThousandThousandThousandThousandThousands = arr.filter(_ <= 9999999999999999999998).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 99999999999999999999987).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 999999999999999999999876).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 9999999999999999999998765).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 99999999999999999999987654).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 999999999999999999999876543).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 9999999999999999999998765432).sorted\n        val oneHundredThousandThousandThousand\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp0f4t7f25.scala:41:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp0f4t7f25.scala:35:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousandThousandThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m999999999999999999999876\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneHundredThousandThousandThousandThousandThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneHundredThousandThousandThousandThousandThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp0f4t7f25.scala:37:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousandThousandThousandThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m99999999999999999999987654\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneHundredThousandThousandThousandThousandThousandThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneHundredThousandThousandThousandThousandThousandThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp0f4t7f25.scala:39:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousandThousandThousandThousandThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m9999999999999999999998765432\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^",
      "stdout": "",
      "timestamp": 1659804042
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val result = new mutable.ListBuffer[String]()\n        val ones = arr.filter(x => x >= 1 && x <= 9).toList\n        val tens = arr.filter(x => x >= 10 && x <= 99).toList\n        val hundreds = arr.filter(x => x >= 100 && x <= 999).toList\n        val thousands = arr.filter(x => x >= 1000 && x <= 9999).toList\n        val tenThousands = arr.filter(x => x >= 10000 && x <= 99999).toList\n        val hundredThousands = arr.filter(x => x >= 100000 && x <= 999999).toList\n        val thousandThousands = arr.filter(x => x >= 1000000 && x <= 9999999).toList\n        val oneThousand = arr.filter(x => x >= 100000 && x <= 999999999).toList\n        val oneHundred = arr.filter(x => x >= 10000000 && x <= 99999999999).toList\n        val oneThousandHundred = arr.filter(x => x >= 1000000000 && x <= 999999999).toList\n        val oneThousandThousand = arr.filter(x => x >= 1000000000 && x <= 99999999999).toList\n        val oneHundredThousand = arr.filter(x => x >= 10000000000 && x <= 99999999999).toList\n        val oneThousandHundredThousand = arr.filter(x => x >= 10000000000 && x <= 99999999999).toList\n        val oneHundredThousandThousand = arr.filter(x => x >= 10000000000 && x <= 99999999999).toList\n        val oneHundredThousandHundred = arr.filter(x => x >= 10000000000 && x <= 99999999999).toList\n        val oneHundredThousandThousandHundred = arr.filter(x => x >= 10000000000 && x <= 99999999999).toList\n        val oneHundredThousandHundredThousand = arr.filter(x => x >= 10000000000 && x <= 99999999999).toList\n        val oneHundredThousandThousandHundredThousand = arr.filter(x => x >= 10000000000 && x <= 99999999999).toList\n        val oneHundredThousandHundredThousandThousand = arr.filter(x => x >= 10000000000 && x <= 99999999999).toList\n        val oneHundredThousandThousandHundredThousandThousand = arr.filter(x => x >= 10000000000 && x <= 99999999999).toList\n        val oneHundredTh\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpl01v8pjt.scala:43:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpl01v8pjt.scala:21:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.ListBuffer[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpl01v8pjt.scala:30:63 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundred\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000\u001b[0m && x <= \u001b[31m99999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpl01v8pjt.scala:32:74 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousand\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x <= \u001b[31m99999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpl01v8pjt.scala:33:54 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousand\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000\u001b[0m && x <= \u001b[31m99999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                      ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                      number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpl01v8pjt.scala:33:74 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousand\u001b[0m = a",
      "stdout": "",
      "timestamp": 1659804045
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 10)\n        val tens = arr.filter(x => x >= 10 && x < 100)\n        val hundreds = arr.filter(x => x >= 100 && x < 1000)\n        val thousands = arr.filter(x => x >= 1000)\n        val tenThousands = arr.filter(x => x >= 10000)\n        val oneThousands = arr.filter(x => x >= 100000)\n        val tenThousandsOnes = arr.filter(x => x >= 1000000)\n        val oneThousandsOnes = arr.filter(x => x >= 10000000)\n        val tenThousandsOnesOnes = arr.filter(x => x >= 100000000)\n        val oneThousandsOnesOnes = arr.filter(x => x >= 1000000000)\n        val tenThousandsOnesOnesOnes = arr.filter(x => x >= 10000000000)\n        val oneThousandsOnesOnesOnesOnes = arr.filter(x => x >= 100000000000)\n        val tenThousandsOnesOnesOnesOnesOnes = arr.filter(x => x >= 1000000000000)\n        val oneThousandsOnesOnesOnesOnesOnesOnes = arr.filter(x => x >= 1000000000000)\n        val tenThousandsOnesOnesOnesOnesOnesOnesOnes = arr.filter(x => x >= 1000000000000)\n        val oneThousandsOnesOnesOnesOnesOnesOnesOnesOnes = arr.filter(x => x >= 1000000000000)\n        val tenThousandsOnesOnesOnesOnesOnesOnesOnesOnesOnesOnes = arr.filter(x => x >= 1000000000000)\n        val oneThousandsOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOnes = arr.filter(x => x >= 1000000000000)\n        val tenThousandsOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOnes = arr.filter(x => x >= 1000000000000)\n        val oneThousandsOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOnes = arr.filter(x => x >= 1000000000000)\n        val tenThousandsOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOnesOne\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjyxmxsvw.scala:42:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpjyxmxsvw.scala:31:60 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtenThousandsOnesOnesOnes\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpjyxmxsvw.scala:32:64 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandsOnesOnesOnesOnes\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpjyxmxsvw.scala:33:68 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtenThousandsOnesOnesOnesOnesOnes\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                    ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpjyxmxsvw.scala:34:72 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandsOnesOnesOnesOnesOnesOnes\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpjyxmxsvw.scala:35:76 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtenThousandsOnesOnesOnesOnesOnesOnesOnes\u001b[0m = arr.filter",
      "stdout": "",
      "timestamp": 1659804044
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 10).map(x => s\"One\")\n        val tens = arr.filter(x => x >= 10 && x < 100).map(x => s\"Ten\")\n        val hundreds = arr.filter(x => x >= 100 && x < 1000).map(x => s\"Hundred\")\n        val thousands = arr.filter(x => x >= 1000 && x < 10000).map(x => s\"Thousand\")\n        val millions = arr.filter(x => x >= 10000 && x < 100000).map(x => s\"Million\")\n        val billions = arr.filter(x => x >= 100000 && x < 1000000).map(x => s\"Billion\")\n        val trillions = arr.filter(x => x >= 1000000 && x < 10000000).map(x => s\"Trillion\")\n        val quadrillions = arr.filter(x => x >= 10000000 && x < 100000000).map(x => s\"Quadrillion\")\n        val quintillions = arr.filter(x => x >= 100000000 && x < 1000000000).map(x => s\"Quintillion\")\n        val sextillions = arr.filter(x => x >= 1000000000 && x < 10000000000).map(x => s\"Sextillion\")\n        val septillions = arr.filter(x => x >= 10000000000 && x < 100000000000).map(x => s\"Septillion\")\n        val octillions = arr.filter(x => x >= 100000000000 && x < 1000000000000).map(x => s\"Octillion\")\n        val nonillions = arr.filter(x => x >= 1000000000000 && x < 10000000000000).map(x => s\"Nonillion\")\n        val decillions = arr.filter(x => x >= 10000000000000 && x < 100000000000000).map(x => s\"Decillion\")\n        val undecillions = arr.filter(x => x >= 100000000000000 && x < 1000000000000000).map(x => s\"Undecillion\")\n        val duodecillions = arr.filter(x => x >= 1000000000000000 && x < 10000000000000000).map(x => s\"Duodecillion\")\n        val tredecillions = arr.filter(x => x >= 10000000000000000 && x < 100000000000000000).map(x => s\"Tredecillion\")\n        val quattuordecillions = arr.filter(x => x >= 100000000000000000 && x < 1000000000000000000).map(x => s\"Quattuordecillion\")\n        val quindecillions = arr.filter(x => x >= \n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpdh3od681.scala:39:49 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mquindecillions\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpdh3od681.scala:30:65 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msextillions\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x < \u001b[31m10000000000\u001b[0m).map(\u001b[36mx\u001b[0m => \u001b[31ms\"Sextillion\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                 ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpdh3od681.scala:31:47 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mseptillions\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000\u001b[0m && x < \u001b[31m100000000000\u001b[0m).map(\u001b[36mx\u001b[0m => \u001b[31ms\"Septillion\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                               number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpdh3od681.scala:31:66 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mseptillions\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000\u001b[0m && x < \u001b[31m100000000000\u001b[0m).map(\u001b[36mx\u001b[0m => \u001b[31ms\"Septillion\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpdh3od681.scala:32:46 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moctillions\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000\u001b[0m && x < \u001b[31m1000000000000\u001b[0m)",
      "stdout": "",
      "timestamp": 1659804046
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(_ <= 9).sortBy(_ - 1).reverse\n        val tens = arr.filter(_ <= 99).sortBy(_ - 10).reverse\n        val hundreds = arr.filter(_ <= 999).sortBy(_ - 100).reverse\n        val thousands = arr.filter(_ <= 9999).sortBy(_ - 1000).reverse\n        val tenThousands = arr.filter(_ <= 999999).sortBy(_ - 10000).reverse\n        val oneThousands = arr.filter(_ <= 9999999).sortBy(_ - 100000).reverse\n        val oneHundreds = arr.filter(_ <= 999999999).sortBy(_ - 1000000).reverse\n        val oneThousandThousands = arr.filter(_ <= 99999999999).sortBy(_ - 10000000).reverse\n        val oneHundredThousands = arr.filter(_ <= 999999999999).sortBy(_ - 10000000).reverse\n        val oneHundredThousandThousands = arr.filter(_ <= 999999999999999).sortBy(_ - 100000000).reverse\n        val oneHundredThousandThousands = arr.filter(_ <= 9999999999999999).sortBy(_ - 1000000000).reverse\n        val oneHundredThousandThousands = arr.filter(_ <= 9999999999999999999).sortBy(_ - 10000000000).reverse\n        val oneHundredThousandThousands = arr.filter(_ <= 99999999999999999999).sortBy(_ - 100000000000).reverse\n        val oneHundredThousandThousands = arr.filter(_ <= 99999999999999999999999).sortBy(_ - 1000000000000).reverse\n        val oneHundredThousandThousands = arr.filter(_ <= 999999999999999999999999).sortBy(_ - 10000000000000).reverse\n        val oneHundredThousandThousands = arr.filter(_ <= 999999999999999999999999999).sortBy(_ - 100000000000000).reverse\n        val oneHundredThousandThousands = arr.filter(_ <= 9999999999999999999999999999).sortBy(_ - 1000000000000000).reverse\n        val oneHundredThousandThousands = arr.filter(_ <= 9999999999999999999999999999999).sortBy(_ - 10000000000000000).reverse\n        val oneHundredThousandThousands = arr.filter(_ <= 9999999999999999\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpvwljaakg.scala:40:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpvwljaakg.scala:31:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m9999999999999999\u001b[0m).sortBy(_ - \u001b[31m1000000000\u001b[0m).reverse\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneHundredThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneHundredThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpvwljaakg.scala:32:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m9999999999999999999\u001b[0m).sortBy(_ - \u001b[31m10000000000\u001b[0m).reverse\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneHundredThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneHundredThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpvwljaakg.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m99999999999999999999\u001b[0m).sortBy(_ - \u001b[31m100000000000\u001b[0m).reverse\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneHundredThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneHundredThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of topleve",
      "stdout": "",
      "timestamp": 1659804032
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x % 10 == 1)\n        val tens = arr.filter(x => x % 10 == 0)\n        val tensReversed = tens.reverse\n        val onesReversed = ones.reverse\n        val onesReversedString = onesReversed.map(x => One(x))\n        val tensReversedString = tensReversed.map(x => Ten(x))\n        val result = onesReversedString.zip(tensReversedString).map(x => x._1 + \"-\" + x._2)\n        if (result.isEmpty) result else result\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1_fygqh3.scala:25:55 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesReversedString\u001b[0m = onesReversed.map(\u001b[36mx\u001b[0m => One(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                       Not found: One\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1_fygqh3.scala:26:55 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtensReversedString\u001b[0m = tensReversed.map(\u001b[36mx\u001b[0m => Ten(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                       Not found: Ten\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp1_fygqh3.scala:27:78 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = onesReversedString.zip(tensReversedString).map(\u001b[36mx\u001b[0m => x._1 + \u001b[31m\"-\"\u001b[0m + x._2)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                         ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of Nothing, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import Byte.byte2double\n\u001b[31m   |\u001b[0m  import Byte.byte2float\n\u001b[31m   |\u001b[0m  import Byte.byte2int\n\u001b[31m   |\u001b[0m  import Byte.byte2long\n\u001b[31m   |\u001b[0m  import Byte.byte2short\n\u001b[31m   |\u001b[0m  import Char.char2double\n\u001b[31m   |\u001b[0m  import Char.char2float\n\u001b[31m   |\u001b[0m  import Char.char2int\n\u001b[31m   |\u001b[0m  import Char.char2long\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\u001b[31m   |\u001b[0m\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659804047
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1 && x <= 9).toList\n        val tens = arr.filter(x => x >= 10 && x <= 99).toList\n        val hundreds = arr.filter(x => x >= 100 && x <= 999).toList\n        val thousands = arr.filter(x => x >= 1000 && x <= 9999).toList\n        val tenThousands = arr.filter(x => x >= 10000 && x <= 99999).toList\n        val oneThousands = arr.filter(x => x >= 100000 && x <= 999999).toList\n        val oneHundreds = arr.filter(x => x >= 1000000 && x <= 999999999).toList\n        val oneThousandHundreds = arr.filter(x => x >= 1000000000 && x <= 99999999999).toList\n        val oneThousandThousandHundreds = arr.filter(x => x >= 100000000000 && x <= 999999999999).toList\n        val oneThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000 && x <= 999999999999999).toList\n        val oneThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000 && x <= 9999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000000 && x <= 99999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 9999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 99999999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThous\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjy1bxbxh.scala:38:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpjy1bxbxh.scala:28:74 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x <= \u001b[31m99999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpjy1bxbxh.scala:29:63 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000\u001b[0m && x <= \u001b[31m999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpjy1bxbxh.scala:29:84 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000\u001b[0m && x <= \u001b[31m999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                    ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpjy1bxbxh.scala:30:71 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000\u001b[0m && x <= \u001b[31m999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                       ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpjy1b",
      "stdout": "",
      "timestamp": 1659804006
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1 && x <= 9).toList\n        val tens = arr.filter(x => x >= 10 && x <= 99).toList\n        val hundreds = arr.filter(x => x >= 100 && x <= 999).toList\n        val thousands = arr.filter(x => x >= 1000 && x <= 9999).toList\n        val tenThousands = arr.filter(x => x >= 10000 && x <= 99999).toList\n        val oneThousands = arr.filter(x => x >= 100000 && x <= 999999).toList\n        val oneHundreds = arr.filter(x => x >= 1000000 && x <= 999999999).toList\n        val oneThousandHundreds = arr.filter(x => x >= 1000000000 && x <= 99999999999).toList\n        val oneThousandThousands = arr.filter(x => x >= 10000000000 && x <= 999999999999).toList\n        val oneThousandThousandHundreds = arr.filter(x => x >= 100000000000 && x <= 999999999999999).toList\n        val oneThousandThousandThousands = arr.filter(x => x >= 1000000000000 && x <= 9999999999999999).toList\n        val oneThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000 && x <= 9999999999999999999).toList\n        val oneThousandThousandThousandThousands = arr.filter(x => x >= 100000000000000 && x <= 99999999999999999999).toList\n        val oneThousandThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000000 && x <= 99999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousands = arr.filter(x => x >= 10000000000000000 && x <= 999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousands = arr.filter(x => x >= 1000000000000000000 && x <= 9999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000000000 && x <= 9999999999999999999999999999999).toList\n        val oneThous\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpdxby_xjw.scala:40:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpdxby_xjw.scala:28:74 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x <= \u001b[31m99999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpdxby_xjw.scala:29:56 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000\u001b[0m && x <= \u001b[31m999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpdxby_xjw.scala:29:76 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000\u001b[0m && x <= \u001b[31m999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                            ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpdxby_xjw.scala:30:63 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000\u001b[0m && x <= \u001b[31m999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpdxby_xjw.scala:30:84 ---------------------------------",
      "stdout": "",
      "timestamp": 1659804048
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(_ <= 9).sorted\n        val tens = arr.filter(_ <= 99).sorted\n        val hundreds = arr.filter(_ <= 999).sorted\n        val thousands = arr.filter(_ <= 9999).sorted\n        val tenThousands = arr.filter(_ <= 999999).sorted\n        val oneThousands = arr.filter(_ <= 9999999).sorted\n        val oneHundreds = arr.filter(_ <= 999999999).sorted\n        val oneThousandThousands = arr.filter(_ <= 99999999999).sorted\n        val oneHundredThousands = arr.filter(_ <= 999999999999).sorted\n        val oneHundredThousandThousands = arr.filter(_ <= 999999999999999).sorted\n        val oneHundredThousandThousandThousands = arr.filter(_ <= 999999999999999999).sorted\n        val oneHundredThousandThousandThousandThousands = arr.filter(_ <= 999999999999999999999).sorted\n        val oneHundredThousandThousandThousandThousandThousands = arr.filter(_ <= 99999999999999999999988).sorted\n        val oneHundredThousandThousandThousandThousandThousands = arr.filter(_ <= 9999999999999999999998877).sorted\n        val oneHundredThousandThousandThousandThousandThousands = arr.filter(_ <= 999999999999999999999887766).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 99999999999999999999988776655443).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 9999999999999999999998877665544332211).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 999999999999999999999887766554433221111).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 99999999999999999999988776655443322111112).sorted\n        val oneHundredThous\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpa0t7yy0g.scala:41:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpa0t7yy0g.scala:34:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousandThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m9999999999999999999998877\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneHundredThousandThousandThousandThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneHundredThousandThousandThousandThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpa0t7yy0g.scala:35:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousandThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m999999999999999999999887766\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneHundredThousandThousandThousandThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneHundredThousandThousandThousandThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpa0t7yy0g.scala:37:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousandThousandThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m9999999999999999999998877665544332211\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneHundredThousandThousandThousandThousandThousandThousands",
      "stdout": "",
      "timestamp": 1659804048
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1 && x <= 9).sorted\n        val tens = arr.filter(x => x >= 10 && x <= 99).sorted\n        val hundreds = arr.filter(x => x >= 100 && x <= 999).sorted\n        val thousands = arr.filter(x => x >= 1000 && x <= 9999).sorted\n        val tenThousands = arr.filter(x => x >= 10000 && x <= 99999).sorted\n        val oneThousands = arr.filter(x => x >= 100000 && x <= 999999).sorted\n        val tenThousandThousands = arr.filter(x => x >= 1000000 && x <= 9999999).sorted\n        val oneThousandThousands = arr.filter(x => x >= 10000000 && x <= 99999999).sorted\n        val tenThousandThousandThousands = arr.filter(x => x >= 100000000 && x <= 999999999).sorted\n        val oneThousandThousandThousands = arr.filter(x => x >= 1000000000 && x <= 99999999999).sorted\n        val tenThousandThousandThousandThousands = arr.filter(x => x >= 10000000000 && x <= 999999999999).sorted\n        val oneThousandThousandThousandThousands = arr.filter(x => x >= 100000000000 && x <= 999999999999999).sorted\n        val tenThousandThousandThousandThousands = arr.filter(x => x >= 1000000000000 && x <= 999999999999999999).sorted\n        val oneThousandThousandThousandThousands = arr.filter(x => x >= 10000000000000 && x <= 999999999999999999).sorted\n        val tenThousandThousandThousandThousands = arr.filter(x => x >= 100000000000000 && x <= 999999999999999999999).sorted\n        val oneThousandThousandThousandThousands = arr.filter(x => x >= 1000000000000000 && x <= 999999999999999999999).sorted\n        val tenThousandThousandThousandThousands = arr.filter(x => x >= 10000000000000000 && x <= 9999999999999999999998).sorted\n        val oneThousandThousandThousandThousands = arr.filter(x => x >= 100000000000000000 && x <= 9999999999999999999998).sorted\n        val tenThousandThousandThousandThousands = arr.filter(x => x >= 1000000000000000001 && x <= 99999999999999999999987).sorted\n        val oneThousandThousandThousand\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp817d5q4r.scala:41:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp817d5q4r.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtenThousandThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000\u001b[0m && x <= \u001b[31m999999999999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mtenThousandThousandThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35mtenThousandThousandThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp817d5q4r.scala:34:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000000\u001b[0m && x <= \u001b[31m999999999999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp817d5q4r.scala:35:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtenThousandThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000000\u001b[0m && x <= \u001b[31m999999999999999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mtenThousandThousandThousandThousands is already defined as \u001b[33mval",
      "stdout": "",
      "timestamp": 1659804051
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val result = new mutable.ListBuffer[String]()\n        val ones = arr.filter(x => x >= 1 && x <= 9).toList\n        val tens = arr.filter(x => x >= 10 && x <= 99).toList\n        val hundreds = arr.filter(x => x >= 100 && x <= 999).toList\n        val thousands = arr.filter(x => x >= 1000 && x <= 9999).toList\n        val tenThousands = arr.filter(x => x >= 10000 && x <= 99999).toList\n        val hundredThousands = arr.filter(x => x >= 100000 && x <= 999999).toList\n        val thousandThousands = arr.filter(x => x >= 1000000 && x <= 9999999).toList\n        val oneThousands = arr.filter(x => x >= 10000000 && x <= 99999999).toList\n        val tenThousandThousands = arr.filter(x => x >= 100000000 && x <= 999999999).toList\n        val hundredThousandThousands = arr.filter(x => x >= 1000000000 && x <= 99999999999).toList\n        val thousandThousandThousands = arr.filter(x => x >= 10000000000 && x <= 999999999999).toList\n        val oneThousandThousands = arr.filter(x => x >= 100000000000 && x <= 999999999999999).toList\n        val tenThousandThousandThousands = arr.filter(x => x >= 1000000000000 && x <= 9999999999999999).toList\n        val hundredThousandThousandThousands = arr.filter(x => x >= 10000000000000 && x <= 9999999999999999999).toList\n        val thousandThousandThousandThousands = arr.filter(x => x >= 100000000000000 && x <= 99999999999999999999).toList\n        val oneThousandThousandThousands = arr.filter(x => x >= 1000000000000000 && x <= 99999999999999999999999).toList\n        val tenThousandThousandThousandThousands = arr.filter(x => x >= 10000000000000000 && x <= 999999999999999999999999).toList\n        val hundredThousandThousandThousandThousands = arr.filter(x => x >= 100000000000000000 && x <= 999999999999999999999999999).toList\n        val thousandThousandThousandThousandThousands = arr.filter(x => x >= 1000000000000000000 && x <= 9999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandTh\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpguo9o40l.scala:42:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpguo9o40l.scala:21:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.ListBuffer[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpguo9o40l.scala:31:79 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhundredThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x <= \u001b[31m99999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                               ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpguo9o40l.scala:32:61 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mthousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000\u001b[0m && x <= \u001b[31m999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                             ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpguo9o40l.scala:32:81 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mthousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000\u001b[0m && x <= \u001b[31m999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                 ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpguo9o40l.scala:33:56 -----------------------------------------\u001b[0m\u001b[0m\n",
      "stdout": "",
      "timestamp": 1659804052
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(_ <= 9).sortBy(_ - 1).reverse\n        val tens = arr.filter(_ <= 99).sortBy(_ - 10).reverse\n        val hundreds = arr.filter(_ <= 999).sortBy(_ - 100).reverse\n        val thousands = arr.filter(_ <= 9999).sortBy(_ - 1000).reverse\n        val tenThousands = arr.filter(_ <= 999999).sortBy(_ - 10000).reverse\n        val oneThousands = arr.filter(_ <= 9999999).sortBy(_ - 100000).reverse\n        val oneHundreds = arr.filter(_ <= 999999999).sortBy(_ - 1000000).reverse\n        val oneThousandThousands = arr.filter(_ <= 99999999999).sortBy(_ - 10000000).reverse\n        val oneHundredThousands = arr.filter(_ <= 999999999999).sortBy(_ - 10000000).reverse\n        val oneHundredThousandThousands = arr.filter(_ <= 999999999999999).sortBy(_ - 100000000).reverse\n        val oneHundredThousandThousands = arr.filter(_ <= 9999999999999999).sortBy(_ - 1000000000).reverse\n        val oneHundredThousandThousands = arr.filter(_ <= 9999999999999999999).sortBy(_ - 10000000000).reverse\n        val oneHundredThousandThousands = arr.filter(_ <= 99999999999999999999).sortBy(_ - 100000000000).reverse\n        val oneHundredThousandThousands = arr.filter(_ <= 99999999999999999999999).sortBy(_ - 1000000000000).reverse\n        val oneHundredThousandThousands = arr.filter(_ <= 999999999999999999999999).sortBy(_ - 10000000000000).reverse\n        val oneHundredThousandThousands = arr.filter(_ <= 999999999999999999999999999).sortBy(_ - 100000000000000).reverse\n        val oneHundredThousandThousands = arr.filter(_ <= 9999999999999999999999999999).sortBy(_ - 1000000000000000).reverse\n        val oneHundredThousandThousands = arr.filter(_ <= 9999999999999999999999999999999).sortBy(_ - 10000000000000000).reverse\n        val oneHundredThousandThousands = arr.filter(_ <= 9999999999999999\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpvwljaakg.scala:40:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpvwljaakg.scala:31:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m9999999999999999\u001b[0m).sortBy(_ - \u001b[31m1000000000\u001b[0m).reverse\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneHundredThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneHundredThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpvwljaakg.scala:32:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m9999999999999999999\u001b[0m).sortBy(_ - \u001b[31m10000000000\u001b[0m).reverse\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneHundredThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneHundredThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpvwljaakg.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m99999999999999999999\u001b[0m).sortBy(_ - \u001b[31m100000000000\u001b[0m).reverse\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneHundredThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneHundredThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of topleve",
      "stdout": "",
      "timestamp": 1659804032
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1 && x <= 9).toList\n        val tens = arr.filter(x => x >= 10 && x <= 99).toList\n        val hundreds = arr.filter(x => x >= 100 && x <= 999).toList\n        val thousands = arr.filter(x => x >= 1000 && x <= 9999).toList\n        val tenThousands = arr.filter(x => x >= 10000 && x <= 99999).toList\n        val oneThousands = arr.filter(x => x >= 100000 && x <= 999999).toList\n        val oneHundreds = arr.filter(x => x >= 1000000 && x <= 999999999).toList\n        val oneThousandThousands = arr.filter(x => x >= 10000000 && x <= 99999999999).toList\n        val oneThousandThousandHundreds = arr.filter(x => x >= 1000000000 && x <= 999999999000).toList\n        val oneThousandThousandHundredThousands = arr.filter(x => x >= 1000000000 && x <= 99999999999000).toList\n        val oneThousandThousandHundredThousandHundreds = arr.filter(x => x >= 100000000000 && x <= 99999999999000).toList\n        val oneThousandThousandHundredThousandHundredThousands = arr.filter(x => x >= 1000000000000 && x <= 99999999999000).toList\n        val oneThousandThousandHundredThousandHundredThousandHundreds = arr.filter(x => x >= 10000000000000 && x <= 99999999999000).toList\n        val oneThousandThousandHundredThousandHundredThousandHundredThousands = arr.filter(x => x >= 100000000000000 && x <= 99999999999000).toList\n        val oneThousandThousandHundredThousandHundredThousandHundredThousandHundreds = arr.filter(x => x >= 1000000000000000 && x <= 99999999999000).toList\n        val oneThousandThousandHundredThousandHundredThousandHundredThousandHundredThousands = arr.filter(x => x >= 10000000000000000 && x <= 99999999999000).toList\n        val oneThousandThousandHundredThousandHundredThousandHundredThousandHundredThousandHundreds = arr.filter(x => x >= 10000000000\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp5i_yrytb.scala:38:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmp5i_yrytb.scala:28:73 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000\u001b[0m && x <= \u001b[31m99999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp5i_yrytb.scala:29:82 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x <= \u001b[31m999999999000\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp5i_yrytb.scala:30:90 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandHundredThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x <= \u001b[31m99999999999000\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp5i_yrytb.scala:31:78 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandHundredThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000\u001b[0m && x <= \u001b[31m99999999999000\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                              ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number ",
      "stdout": "",
      "timestamp": 1659804051
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1 && x <= 9).toList\n        val tens = arr.filter(x => x >= 10 && x <= 99).toList\n        val hundreds = arr.filter(x => x >= 100 && x <= 999).toList\n        val thousands = arr.filter(x => x >= 1000 && x <= 9999).toList\n        val tenThousands = arr.filter(x => x >= 10000 && x <= 99999).toList\n        val oneThousands = arr.filter(x => x >= 100000 && x <= 999999).toList\n        val oneHundreds = arr.filter(x => x >= 1000000 && x <= 9999999).toList\n        val oneThousandHundreds = arr.filter(x => x >= 10000000 && x <= 99999999).toList\n        val oneThousandThousandHundreds = arr.filter(x => x >= 100000000 && x <= 999999999).toList\n        val oneThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000 && x <= 99999999999).toList\n        val oneThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000 && x <= 9999999999999).toList\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000 && x <= 9999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000 && x <= 9999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000 && x <= 9999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000 && x <= 9999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000000 && x <= 9999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000000 && x <= 9999999999999).toList\n        val oneThousandThous\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpp0nni7x5.scala:39:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpp0nni7x5.scala:30:90 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x <= \u001b[31m99999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                          ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpp0nni7x5.scala:31:79 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000\u001b[0m && x <= \u001b[31m9999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                               ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpp0nni7x5.scala:31:99 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000\u001b[0m && x <= \u001b[31m9999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                   ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpp0nni7x5.scala:32:87 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000\u001b[0m && x <= \u001b[31m9999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                       ^^^^^^^^^^^^",
      "stdout": "",
      "timestamp": 1659804053
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1 && x <= 9).toList\n        val tens = arr.filter(x => x >= 10 && x <= 99).toList\n        val hundreds = arr.filter(x => x >= 100 && x <= 999).toList\n        val thousands = arr.filter(x => x >= 1000 && x <= 9999).toList\n        val tenThousands = arr.filter(x => x >= 10000 && x <= 99999).toList\n        val oneThousands = arr.filter(x => x >= 100000 && x <= 999999).toList\n        val hundredThousands = arr.filter(x => x >= 1000000 && x <= 9999999).toList\n        val thousandThousands = arr.filter(x => x >= 10000000 && x <= 999999999).toList\n        val tenThousandThousands = arr.filter(x => x >= 1000000000 && x <= 99999999999).toList\n        val oneThousandThousands = arr.filter(x => x >= 1000000000 && x <= 999999999).toList\n        val hundredThousandThousands = arr.filter(x => x >= 10000000000 && x <= 99999999999).toList\n        val thousandThousandThousands = arr.filter(x => x >= 100000000000 && x <= 99999999999).toList\n        val tenThousandThousandThousands = arr.filter(x => x >= 1000000000000 && x <= 999999999999999).toList\n        val oneThousandThousandThousands = arr.filter(x => x >= 10000000000000 && x <= 999999999999999).toList\n        val hundredThousandThousandThousands = arr.filter(x => x >= 100000000000000 && x <= 9999999999999999).toList\n        val thousandThousandThousandThousands = arr.filter(x => x >= 1000000000000000 && x <= 9999999999999999).toList\n        val tenThousandThousandThousandThousands = arr.filter(x => x >= 10000000000000000 && x <= 9999999999999999999).toList\n        val oneThousandThousandThousandThousands = arr.filter(x => x >= 100000000000000000 && x <= 9999999999999999999).toList\n        val hundredThousandThousandThousandThousands = arr.filter(x => x >= 1000000000000000000 && x <= 99999999999999999999).toList\n        val thousandThousandThousandThousandThousands = arr.filter(x => x >= 10000000000000000000 && x <= 99999999999999999999).toList\n        val tenThous\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpoki72rq1.scala:42:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpoki72rq1.scala:29:75 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtenThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x <= \u001b[31m99999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                           ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpoki72rq1.scala:31:60 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhundredThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000\u001b[0m && x <= \u001b[31m99999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpoki72rq1.scala:31:80 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhundredThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000\u001b[0m && x <= \u001b[31m99999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpoki72rq1.scala:32:61 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mthousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000\u001b[0m && x <= \u001b[31m99999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                             ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpoki72rq1.scala:32:82 --------------------------",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val len = arr.length\n        val ones = arr.filter(_ <= 9).sorted\n        val tens = arr.filter(_ <= 99).sorted\n        val hundreds = arr.filter(_ <= 999).sorted\n        val thousands = arr.filter(_ <= 9999).sorted\n        val tenThousands = arr.filter(_ <= 999999).sorted\n        val oneThousands = arr.filter(_ <= 9999999).sorted\n        val oneHundreds = arr.filter(_ <= 999999999).sorted\n        val oneThousandHundreds = arr.filter(_ <= 99999999999).sorted\n        val oneHundredThousands = arr.filter(_ <= 999999999999).sorted\n        val oneHundredThousandHundreds = arr.filter(_ <= 999999999999999).sorted\n        val oneHundredThousandHundredThousands = arr.filter(_ <= 9999999999999999999).sorted\n        val oneHundredThousandHundredThousandHundreds = arr.filter(_ <= 99999999999999999999999).sorted\n        val oneHundredThousandHundredThousandHundredThousands = arr.filter(_ <= 999999999999999999999999999).sorted\n        val oneHundredThousandHundredThousandHundredThousandHundreds = arr.filter(_ <= 9999999999999999999999999999999).sorted\n        val oneHundredThousandHundredThousandHundredThousandHundredThousands = arr.filter(_ <= 99999999999999999999999999999999999).sorted\n        val oneHundredThousandHundredThousandHundredThousandHundredThousandHundreds = arr.filter(_ <= 999999999999999999999999999999999999999).sorted\n        val oneHundredThousandHundredThousandHundredThousandHundredThousandHundredThousands = arr.filter(_ <= 9999999999999999999999999999999999999999999).sorted\n        val oneHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundreds = arr.filter(_ <= 999999999999999999999999999999999999999999999999999).sorted\n        val oneHundredThous\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpbbnk_odn.scala:41:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpbbnk_odn.scala:29:50 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m99999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpbbnk_odn.scala:30:50 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousands\u001b[0m = arr.filter(_ <= \u001b[31m999999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpbbnk_odn.scala:31:57 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m999999999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                         ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpbbnk_odn.scala:32:65 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandHundredThousands\u001b[0m = arr.filter(_ <= \u001b[31m9999999999999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                                 ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpbbnk_odn.scala:33:72 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandHundredThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m99999999999999999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                      ",
      "stdout": "",
      "timestamp": 1659804055
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x <= 9 && x >= 1).sorted\n        val tens = arr.filter(x => x <= 99 && x >= 10).sorted\n        val hundreds = arr.filter(x => x <= 999 && x >= 100).sorted\n        val thousands = arr.filter(x => x <= 9999 && x >= 1000).sorted\n        val tenThousands = arr.filter(x => x <= 999999 && x >= 10000).sorted\n        val oneThousands = arr.filter(x => x <= 999999999 && x >= 100000).sorted\n        val oneHundreds = arr.filter(x => x <= 9999999999 && x >= 1000000).sorted\n        val oneThousandThousands = arr.filter(x => x <= 99999999999 && x >= 10000000).sorted\n        val oneHundredThousands = arr.filter(x => x <= 999999999999 && x >= 100000000).sorted\n        val oneHundredThousandThousands = arr.filter(x => x <= 9999999999999 && x >= 1000000000).sorted\n        val oneHundredThousandThousandThousands = arr.filter(x => x <= 999999999999999 && x >= 10000000000).sorted\n        val oneHundredThousandThousandThousandThousands = arr.filter(x => x <= 9999999999999999 && x >= 100000000000).sorted\n        val oneHundredThousandThousandThousandThousandThousands = arr.filter(x => x <= 9999999999999999 && x >= 1000000000000).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousands = arr.filter(x => x <= 9999999999999999999 && x >= 10000000000000).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousands = arr.filter(x => x <= 9999999999999999999 && x >= 100000000000000).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousands = arr.filter(x => x <= 9999999999999999999999 && x >= 1000000000000000).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousandThousands = arr.filter(x => x <= 99999999999999999999999 && x >= 10000000000000000).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousands = arr.\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp776oidkf.scala:39:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp776oidkf.scala:35:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousandThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x <= \u001b[31m9999999999999999999\u001b[0m && x >= \u001b[31m100000000000000\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneHundredThousandThousandThousandThousandThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneHundredThousandThousandThousandThousandThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp776oidkf.scala:36:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousandThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x <= \u001b[31m9999999999999999999999\u001b[0m && x >= \u001b[31m1000000000000000\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneHundredThousandThousandThousandThousandThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneHundredThousandThousandThousandThousandThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- Error: /tmp/tmp776oidkf.scala:27:47 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x <= \u001b[31m9999999999\u001b[0m && x >= \u001b[31m1000000\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                          ",
      "stdout": "",
      "timestamp": 1659804056
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1 && x <= 9).toList\n        val tens = arr.filter(x => x >= 10 && x <= 99).toList\n        val hundreds = arr.filter(x => x >= 100 && x <= 999).toList\n        val thousands = arr.filter(x => x >= 1000 && x <= 9999).toList\n        val tenThousands = arr.filter(x => x >= 10000 && x <= 99999).toList\n        val oneThousands = arr.filter(x => x >= 100000 && x <= 999999).toList\n        val oneHundreds = arr.filter(x => x >= 1000000 && x <= 999999999).toList\n        val oneThousandHundreds = arr.filter(x => x >= 1000000000 && x <= 99999999999).toList\n        val oneThousandThousandHundreds = arr.filter(x => x >= 100000000000 && x <= 999999999999).toList\n        val oneThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000 && x <= 999999999999999).toList\n        val oneThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000 && x <= 9999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000000 && x <= 99999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 9999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 99999999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThous\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjy1bxbxh.scala:38:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpjy1bxbxh.scala:28:74 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x <= \u001b[31m99999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpjy1bxbxh.scala:29:63 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000\u001b[0m && x <= \u001b[31m999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpjy1bxbxh.scala:29:84 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000\u001b[0m && x <= \u001b[31m999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                    ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpjy1bxbxh.scala:30:71 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000\u001b[0m && x <= \u001b[31m999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                       ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpjy1b",
      "stdout": "",
      "timestamp": 1659804006
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1 && x <= 9).toList\n        val tens = arr.filter(x => x >= 10 && x <= 99).toList\n        val hundreds = arr.filter(x => x >= 100 && x <= 999).toList\n        val thousands = arr.filter(x => x >= 1000 && x <= 9999).toList\n        val tenThousands = arr.filter(x => x >= 10000 && x <= 99999).toList\n        val oneThousands = arr.filter(x => x >= 100000 && x <= 999999).toList\n        val oneHundreds = arr.filter(x => x >= 1000000 && x <= 999999999).toList\n        val oneThousandThousands = arr.filter(x => x >= 10000000 && x <= 99999999999).toList\n        val oneThousandThousandHundreds = arr.filter(x => x >= 1000000000 && x <= 999999999000).toList\n        val oneThousandThousandHundredThousands = arr.filter(x => x >= 1000000000 && x <= 99999999999000).toList\n        val oneThousandThousandHundredThousandHundreds = arr.filter(x => x >= 10000000000 && x <= 99999999999000).toList\n        val oneThousandThousandHundredThousandHundredThousands = arr.filter(x => x >= 100000000000 && x <= 99999999999000).toList\n        val oneThousandThousandHundredThousandHundredThousandHundreds = arr.filter(x => x >= 1000000000000 && x <= 99999999999000).toList\n        val oneThousandThousandHundredThousandHundredThousandHundredThousands = arr.filter(x => x >= 10000000000000 && x <= 99999999999000).toList\n        val oneThousandThousandHundredThousandHundredThousandHundredThousandHundreds = arr.filter(x => x >= 100000000000000 && x <= 99999999999000).toList\n        val oneThousandThousandHundredThousandHundredThousandHundredThousandHundredThousands = arr.filter(x => x >= 1000000000000000 && x <= 99999999999000).toList\n        val oneThousandThousandHundredThousandHundredThousandHundredThousandHundredThousandHundreds = arr.filter(x => x >= 10000000000000000\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp81gwpzhl.scala:38:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmp81gwpzhl.scala:28:73 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000\u001b[0m && x <= \u001b[31m99999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp81gwpzhl.scala:29:82 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x <= \u001b[31m999999999000\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp81gwpzhl.scala:30:90 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandHundredThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x <= \u001b[31m99999999999000\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp81gwpzhl.scala:31:78 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandHundredThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000\u001b[0m && x <= \u001b[31m99999999999000\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                              ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number to",
      "stdout": "",
      "timestamp": 1659804054
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(_ < 10)\n        val tens = arr.filter(_ >= 10 && _ < 100)\n        val hundreds = arr.filter(_ >= 100)\n        val reversed = ones + tens + hundreds.reverse\n        val onesAndTens = reversed.filter(_ < 10)\n        val tensAndHundreds = reversed.filter(_ >= 10 && _ < 100)\n        val onesAndHundreds = onesAndTens + tensAndHundreds.reverse\n        val onesAndHundredsAndTensAndHundreds = onesAndHundreds + tensAndHundreds.reverse\n        val onesAndHundredsAndTensAndHundredsAndOnes = onesAndHundredsAndTensAndHundreds + ones\n        val onesAndHundredsAndTensAndHundredsAndOnesAndTens = onesAndHundredsAndTensAndHundredsAndOnes + tens\n        val onesAndHundredsAndTensAndHundredsAndOnesAndTensAndHundreds = onesAndHundredsAndTensAndHundredsAndOnesAndTens + hundreds\n        val onesAndHundredsAndTensAndHundredsAndOnesAndTensAndHundredsAndOnes = onesAndHundredsAndTensAndHundredsAndOnesAndTensAndHundreds + ones\n        val onesAndHundredsAndTensAndHundredsAndOnesAndTensAndHundredsAndOnesAndTens = onesAndHundredsAndTensAndHundredsAndOnesAndTensAndHundredsAndOnes + tens\n        val onesAndHundredsAndTensAndHundredsAndOnesAndTensAndHundredsAndOnesAndTensAndHundreds = onesAndHundredsAndTensAndHundredsAndOnesAndTensAndHundredsAndOnes + hundreds\n        val onesAndHundredsAndTensAndHundredsAndOnesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnes = onesAndHundredsAndTensAndHundredsAndOnesAndTensAndHundredsAndOnes + ones\n        val onesAndHundredsAndTensAndHundredsAndOnesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnesAndTens = onesAndHundredsAndTensAndHundredsAndOnesAndTensAndHundredsAndOnesAndTens + tens\n        val onesAnd\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmprp9mk956.scala:38:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E086] Syntax Error: /tmp/tmprp9mk956.scala:22:30 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtens\u001b[0m = arr.filter(_ >= \u001b[31m10\u001b[0m && _ < \u001b[31m100\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              Wrong number of parameters, expected: 1\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmprp9mk956.scala:24:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mreversed\u001b[0m = ones + tens + hundreds.reverse\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprp9mk956.scala:38:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "stdout": "",
      "timestamp": 1659804057
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val result = new mutable.ListBuffer[String]()\n        val one = mutable.List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val ten = mutable.List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val twenty = mutable.List(\"Twenty\", \"Twenty-one\", \"Twenty-two\", \"Twenty-three\", \"Twenty-four\", \"Twenty-five\", \"Twenty-six\", \"Twenty-seven\", \"Twenty-eight\", \"Twenty-nine\")\n        val hundred = mutable.List(\"Hundred\", \"Hundred-one\", \"Hundred-two\", \"Hundred-three\", \"Hundred-four\", \"Hundred-five\", \"Hundred-six\", \"Hundred-seven\", \"Hundred-eight\", \"Hundred-nine\")\n        val thousand = mutable.List(\"Thousand\", \"Thousand-one\", \"Thousand-two\", \"Thousand-three\", \"Thousand-four\", \"Thousand-five\", \"Thousand-six\", \"Thousand-seven\", \"Thousand-eight\", \"Thousand-nine\")\n        val million = mutable.List(\"Million\", \"Million-one\", \"Million-two\", \"Million-three\", \"Million-four\", \"Million-five\", \"Million-six\", \"Million-seven\", \"Million-eight\", \"Million-nine\")\n        val billion = mutable.List(\"Billion\", \"Billion-one\", \"Billion-two\", \"Billion-three\", \"Billion-four\", \"Billion-five\", \"Billion-six\", \"Billion-seven\", \"Billion-eight\", \"Billion-nine\")\n        val trillion = mutable.List(\"Trillion\", \"Trillion-one\", \"Trillion-two\", \"Trillion-three\", \"Trillion-four\", \"Trillion-five\", \"Trillion-six\", \"Trillion-seven\", \"Trillion-eight\", \"Trillion-nine\")\n        val quadrillion = mutable.List(\"Quadrillion\", \"Quadrillion-one\", \"Quadrillion-two\", \"Quadrillion-three\", \"Quadrillion-four\", \"Quadrillion-five\", \"Quadrillion-six\", \"Quad\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpkm11uutl.scala:30:172 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mquadrillion\u001b[0m = mutable.List(\u001b[31m\"Quadrillion\"\u001b[0m, \u001b[31m\"Quadrillion-one\"\u001b[0m, \u001b[31m\"Quadrillion-two\"\u001b[0m, \u001b[31m\"Quadrillion-three\"\u001b[0m, \u001b[31m\"Quadrillion-four\"\u001b[0m, \u001b[31m\"Quadrillion-five\"\u001b[0m, \u001b[31m\"Quadrillion-six\"\u001b[0m, \"Quad\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 unclosed string literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmpkm11uutl.scala:32:34 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 end of statement expected but '=' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkm11uutl.scala:21:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.ListBuffer[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkm11uutl.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mone\u001b[0m = mutable.List(\u001b[31m\"One\"\u001b[0m, \u001b[31m\"Two\"\u001b[0m, \u001b[31m\"Three\"\u001b[0m, \u001b[31m\"Four\"\u001b[0m, \u001b[31m\"Five\"\u001b[0m, \u001b[31m\"Six\"\u001b[0m, \u001b[31m\"Seven\"\u001b[0m, \u001b[31m\"Eight\"\u001b[0m, \u001b[31m\"Nine\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkm11uutl.scala:23:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mten\u001b[0m = mutabl",
      "stdout": "",
      "timestamp": 1659804056
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x <= 9).map(x => s\"One\")\n        val twos = arr.filter(x => x <= 18).map(x => s\"Two\")\n        val threes = arr.filter(x => x <= 27).map(x => s\"Three\")\n        val fours = arr.filter(x => x <= 36).map(x => s\"Four\")\n        val fives = arr.filter(x => x <= 45).map(x => s\"Five\")\n        val sixes = arr.filter(x => x <= 54).map(x => s\"Six\")\n        val sevens = arr.filter(x => x <= 63).map(x => s\"Seven\")\n        val eights = arr.filter(x => x <= 72).map(x => s\"Eight\")\n        val nines = arr.filter(x => x <= 81).map(x => s\"Nine\")\n        val result = ones + twos + threes + fours + fives + sixes + sevens + eights + nines\n        val reversed = result.reverse\n        val replaced = reversed.map(x => replace(x))\n        replaced\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmphf1deoca.scala:30:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = ones + twos + threes + fours + fives + sixes + sevens + eights + nines\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n1 error found\n",
      "stdout": "",
      "timestamp": 1659804058
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1 && x <= 9).toList\n        val tens = arr.filter(x => x >= 10 && x <= 99).toList\n        val hundreds = arr.filter(x => x >= 100 && x <= 999).toList\n        val thousands = arr.filter(x => x >= 1000 && x <= 9999).toList\n        val tenThousands = arr.filter(x => x >= 10000 && x <= 99999).toList\n        val oneThousands = arr.filter(x => x >= 100000 && x <= 999999).toList\n        val oneHundreds = arr.filter(x => x >= 1000000 && x <= 999999999).toList\n        val oneThousandHundreds = arr.filter(x => x >= 1000000000 && x <= 99999999999).toList\n        val oneThousandThousandHundreds = arr.filter(x => x >= 100000000000 && x <= 999999999999).toList\n        val oneThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000 && x <= 999999999999999).toList\n        val oneThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000 && x <= 9999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000000 && x <= 99999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000000001 && x <= 999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000000101 && x <= 9999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000001001 && x <= 99999999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000000100101 && x <= 9999999999999999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousand\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpj1s5wzn9.scala:38:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpj1s5wzn9.scala:28:74 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x <= \u001b[31m99999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpj1s5wzn9.scala:29:63 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000\u001b[0m && x <= \u001b[31m999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpj1s5wzn9.scala:29:84 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000\u001b[0m && x <= \u001b[31m999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                    ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpj1s5wzn9.scala:30:71 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000\u001b[0m && x <= \u001b[31m999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                       ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpj1s5",
      "stdout": "",
      "timestamp": 1659804056
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val result = new mutable.ListBuffer[String]()\n        val ones = arr.filter(_ <= 9).sorted\n        val tens = arr.filter(_ <= 99).sorted\n        val hundreds = arr.filter(_ <= 999).sorted\n        val thousands = arr.filter(_ <= 9999).sorted\n        val tenThousands = arr.filter(_ <= 999999).sorted\n        val oneThousands = arr.filter(_ <= 9999999).sorted\n        val oneHundreds = arr.filter(_ <= 999999999).sorted\n        val oneThousandThousands = arr.filter(_ <= 99999999999).sorted\n        val oneHundredThousands = arr.filter(_ <= 999999999999).sorted\n        val oneHundredThousandThousands = arr.filter(_ <= 999999999999999).sorted\n        val oneHundredThousandThousandThousands = arr.filter(_ <= 999999999999999999).sorted\n        val oneHundredThousandThousandThousandThousands = arr.filter(_ <= 999999999999999999999).sorted\n        val oneHundredThousandThousandThousandThousandThousands = arr.filter(_ <= 99999999999999999999988).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 9999999999999999999998877).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 999999999999999999999887766).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 9999999999999999999998877665544).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 99999999999999999999988776655443321).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 99999999999999999999988776655443321666).sorted\n        val oneHundredThousandThousandThous\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp66edf8wd.scala:41:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp66edf8wd.scala:21:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.ListBuffer[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmp66edf8wd.scala:29:51 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m99999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                   number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp66edf8wd.scala:30:50 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousands\u001b[0m = arr.filter(_ <= \u001b[31m999999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp66edf8wd.scala:31:58 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m999999999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                          ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp66edf8wd.scala:32:66 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m999999999999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ",
      "stdout": "",
      "timestamp": 1659804056
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(_ <= 9).sorted\n        val tens = arr.filter(_ <= 99).sorted\n        val hundreds = arr.filter(_ <= 999).sorted\n        val thousands = arr.filter(_ <= 9999).sorted\n        val tenThousands = arr.filter(_ <= 999999).sorted\n        val oneHundreds = arr.filter(_ <= 9999999).sorted\n        val oneThousands = arr.filter(_ <= 999999999).sorted\n        val oneThousandThousands = arr.filter(_ <= 99999999999).sorted\n        val oneHundredThousands = arr.filter(_ <= 999999999999).sorted\n        val oneHundredThousandThousands = arr.filter(_ <= 999999999999999).sorted\n        val oneHundredThousandThousandThousands = arr.filter(_ <= 999999999999999999).sorted\n        val oneHundredThousandThousandThousandThousands = arr.filter(_ <= 999999999999999999999).sorted\n        val oneHundredThousandThousandThousandThousandThousands = arr.filter(_ <= 9999999999999999999998).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 99999999999999999999987).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 999999999999999999999876).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 9999999999999999999998765).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 99999999999999999999987654).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 999999999999999999999876543).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 999999999999999999999\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp33qb4l84.scala:40:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp33qb4l84.scala:38:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousandThousandThousandThousandThousandThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m999999999999999999999876543\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneHundredThousandThousandThousandThousandThousandThousandThousandThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35m\n\u001b[31m   |\u001b[0m  oneHundredThousandThousandThousandThousandThousandThousandThousandThousandThousands\n\u001b[31m   |\u001b[0m\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- Error: /tmp/tmp33qb4l84.scala:28:51 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m99999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                   number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp33qb4l84.scala:29:50 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousands\u001b[0m = arr.filter(_ <= \u001b[31m999999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp33qb4l84.scala:30:58 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m999999999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                               ",
      "stdout": "",
      "timestamp": 1659804056
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val len = arr.length\n        val ones = arr.filter(x => x < 10)\n        val tens = arr.filter(x => x >= 10 && x < 100)\n        val hundreds = arr.filter(x => x >= 100 && x < 1000)\n        val thousands = arr.filter(x => x >= 1000)\n        val tenThousands = arr.filter(x => x >= 10000 && x < 100000)\n        val oneThousands = arr.filter(x => x >= 1000000 && x < 10000000)\n        val oneMillions = arr.filter(x => x >= 100000000 && x < 1000000000)\n        val oneBillions = arr.filter(x => x >= 1000000000 && x < 10000000000)\n        val oneTrillions = arr.filter(x => x >= 10000000000 && x < 100000000000)\n        val oneQuadrillions = arr.filter(x => x >= 100000000000 && x < 1000000000000)\n        val oneQuintillions = arr.filter(x => x >= 1000000000000 && x < 10000000000000)\n        val oneBillions = arr.filter(x => x >= 10000000000000 && x < 1000000000000000)\n        val oneMillions = arr.filter(x => x >= 100000000000000 && x < 1000000000000000)\n        val oneHundreds = arr.filter(x => x >= 1000000000000000 && x < 10000000000000000)\n        val oneThousands = arr.filter(x => x >= 10000000000000000 && x < 100000000000000000)\n        val oneHundreds = arr.filter(x => x >= 100000000000000000 && x < 1000000000000000000)\n        val oneThousands = arr.filter(x => x >= 1000000000000000000 && x < 10000000000000000000)\n        val oneThousands = arr.filter(x => x >= 10000000000000000000 && x < 100000000000000000000)\n        val oneThousands = arr.filter(x => x >= 100000000000000000000 && x < 1000000000000000000000)\n        val oneThousands = arr.filter(x => x >= 1000000000000000000000 && x < 10000000000000000000000)\n        val oneThousands = arr.filter(x => x >= 10000000000000000000000 && x < 100000000000000000000000)\n        val oneThousands = arr.filter(x => x >= 100000000000000000000000 && x < 1000000000000000000000000)\n        val oneThousands = arr.filter(x => x >= 1000000000000000000000000 && x < 10000000000000000000000000)\n        val oneThousands = arr.filter(x => x >= 10000000000000000000000000 && x < 100000000000000000000000000)\n        val oneThousands = arr.filter(x => x >= 100000000000000000000000000 && x < \n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpfo431ri1.scala:46:82 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000000000000000000\u001b[0m && x < \n\u001b[31m\u001b[31m   |\u001b[0m                                                                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpfo431ri1.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneBillions\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000000\u001b[0m && x < \u001b[31m1000000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneBillions is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneBillions\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpfo431ri1.scala:34:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneMillions\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000000\u001b[0m && x < \u001b[31m1000000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneMillions is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneMillions\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpfo431ri1.scala:36:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000000000\u001b[0m && x < \u001b[31m100000000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousands is already defined as \u001b[33",
      "stdout": "",
      "timestamp": 1659804057
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 10)\n        val tens = arr.filter(x => x >= 10 && x < 100)\n        val hundreds = arr.filter(x => x >= 100 && x < 1000)\n        val thousands = arr.filter(x => x >= 1000 && x < 10000)\n        val tenThousands = arr.filter(x => x >= 10000 && x < 100000)\n        val oneThousands = arr.filter(x => x >= 100000 && x < 1000000)\n        val oneHundreds = arr.filter(x => x >= 1000000 && x < 10000000)\n        val oneThousandHundreds = arr.filter(x => x >= 10000000 && x < 100000000)\n        val oneThousandThousands = arr.filter(x => x >= 100000000 && x < 1000000000)\n        val oneHundredThousands = arr.filter(x => x >= 1000000000 && x < 10000000000)\n        val oneHundredThousandHundreds = arr.filter(x => x >= 10000000000 && x < 100000000000)\n        val oneHundredThousandThousands = arr.filter(x => x >= 100000000000 && x < 1000000000000)\n        val oneHundredThousandThousandHundreds = arr.filter(x => x >= 1000000000000 && x < 10000000000000)\n        val oneHundredThousandThousandThousands = arr.filter(x => x >= 10000000000000 && x < 100000000000000)\n        val oneHundredThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000 && x < 1000000000000000)\n        val oneHundredThousandThousandThousandThousands = arr.filter(x => x >= 1000000000000000 && x < 10000000000000000)\n        val oneHundredThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000000 && x < 100000000000000000)\n        val oneHundredThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x < 1000000000000000000)\n        val oneHundredThousandThousandThousandThousandThousands = arr.filter(x => x >= 1000000000000000000 && x < 10000000000000000000)\n        val oneHundredThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000000000 && x < 100000000000000000000)\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpzmt6ihxw.scala:41:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m        \u001b[33mval\u001b[0m \n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpzmt6ihxw.scala:38:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000000000\u001b[0m && x < \u001b[31m1000000000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneHundredThousandThousandThousandThousandHundreds is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneHundredThousandThousandThousandThousandHundreds\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- Error: /tmp/tmpzmt6ihxw.scala:30:73 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x < \u001b[31m10000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpzmt6ihxw.scala:31:62 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000\u001b[0m && x < \u001b[31m100000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpzmt6ihxw.scala:31:81 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousand",
      "stdout": "",
      "timestamp": 1659804036
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x % 10 == 1)\n        val tens = arr.filter(x => x % 10 == 0)\n        val reversed = ones + tens.reverse\n        val result = reversed.map(x => if (x % 10 == 0) \"Ten\" else \"One\")\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpa2sje2yp.scala:23:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mreversed\u001b[0m = ones + tens.reverse\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n1 error found\n",
      "stdout": "",
      "timestamp": 1659804059
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val m = arr.length\n        val n = arr.last\n        val result = new mutable.ListBuffer[String]\n        val ones = arr.filter(_ <= 9).map(_ -> \"One\")\n        val tens = arr.filter(_ <= 99).map(_ -> \"Ten\")\n        val hundreds = arr.filter(_ <= 999).map(_ -> \"Hundred\")\n        val thousands = arr.filter(_ <= 9999).map(_ -> \"Thousand\")\n        val tenThousands = arr.filter(_ <= 999999).map(_ -> \"TenThousand\")\n        val hundredThousands = arr.filter(_ <= 9999999).map(_ -> \"HundredThousand\")\n        val millions = arr.filter(_ <= 999999999).map(_ -> \"Million\")\n        val billions = arr.filter(_ <= 99999999999).map(_ -> \"Billion\")\n        val trillions = arr.filter(_ <= 999999999999).map(_ -> \"Trillion\")\n        val quadrillions = arr.filter(_ <= 999999999999999).map(_ -> \"Quadrillion\")\n        val quintillions = arr.filter(_ <= 999999999999999999).map(_ -> \"Quintillion\")\n        val sextillions = arr.filter(_ <= 999999999999999999999).map(_ -> \"Sextillion\")\n        val septillions = arr.filter(_ <= 9999999999999999999998).map(_ -> \"Septillion\")\n        val octillions = arr.filter(_ <= 99999999999999999999987).map(_ -> \"Octillion\")\n        val nonillions = arr.filter(_ <= 999999999999999999999876).map(_ -> \"Nonillion\")\n        val decillions = arr.filter(_ <= 99999999999999999999987654).map(_ -> \"Decillion\")\n        val undecillions = arr.filter(_ <= 9999999999999999999998765432).map(_ -> \"Undecillion\")\n        val duodecillions = arr.filter(_ <= 99999999999999999999987654321).map(_ -> \"Duodecillion\")\n        val tredecillions = arr.filter(_ <= 999999999999999999999876543211).map(_ -> \"Tredecillion\")\n        val quattuordecillions = arr.filter(_ <= 999999999999999999999876543211\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp6tmv68ev.scala:44:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6tmv68ev.scala:23:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.ListBuffer[\u001b[35mString\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmp6tmv68ev.scala:31:39 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mbillions\u001b[0m = arr.filter(_ <= \u001b[31m99999999999\u001b[0m).map(_ -> \u001b[31m\"Billion\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp6tmv68ev.scala:32:40 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtrillions\u001b[0m = arr.filter(_ <= \u001b[31m999999999999\u001b[0m).map(_ -> \u001b[31m\"Trillion\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp6tmv68ev.scala:33:43 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mquadrillions\u001b[0m = arr.filter(_ <= \u001b[31m999999999999999\u001b[0m).map(_ -> \u001b[31m\"Quadrillion\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp6tmv68ev.scala:34:43 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mquintillions\u001b[0m = arr.filter(_ <= \u001b[31m999999999999999999\u001b[0m).map(_ -> \u001b[31m\"Quintillion\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m         ",
      "stdout": "",
      "timestamp": 1659804058
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x % 10 == 1).sorted\n        val twos = arr.filter(x => x % 10 == 2).sorted\n        val threes = arr.filter(x => x % 10 == 3).sorted\n        val fours = arr.filter(x => x % 10 == 4).sorted\n        val fives = arr.filter(x => x % 10 == 5).sorted\n        val sixes = arr.filter(x => x % 10 == 6).sorted\n        val sevens = arr.filter(x => x % 10 == 7).sorted\n        val eights = arr.filter(x => x % 10 == 8).sorted\n        val nines = arr.filter(x => x % 10 == 9).sorted\n        val onesReversed = ones.reverse\n        val twosReversed = twos.reverse\n        val threesReversed = threes.reverse\n        val foursReversed = fours.reverse\n        val fivesReversed = fives.reverse\n        val sixesReversed = sixes.reverse\n        val sevensReversed = sevens.reverse\n        val eightsReversed = eights.reverse\n        val ninesReversed = nines.reverse\n        val onesReversedString = onesReversed.map(x => One(x))\n        val twosReversedString = twosReversed.map(x => Two(x))\n        val threesReversedString = threesReversed.map(x => Three(x))\n        val foursReversedString = foursReversed.map(x => Four(x))\n        val fivesReversedString = fivesReversed.map(x => Five(x))\n        val sixesReversedString = sixesReversed.map(x => Six(x))\n        val sevensReversedString = sevensReversed.map(x => Seven(x))\n        val eightsReversedString = eightsReversed.map(x => Eight(x))\n        val ninesReversedString = ninesReversed.map(x => Nine(x))\n        val onesReversedStringList = onesReversedString.toList\n        val twosReversedStringList = twosReversedString.toList\n        val threesReversedStringList = threesReversedString.toList\n        val foursReversedStringList = foursReversedString.toList\n        val fivesReversedStringList = fivesReversedString.toList\n        val sixesReversedStringList = sixesReversedString.toList\n        val sevensReversedStringList = seven\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvy2v5u8t.scala:39:55 ------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesReversedString\u001b[0m = onesReversed.map(\u001b[36mx\u001b[0m => One(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                       Not found: One\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvy2v5u8t.scala:40:55 ------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtwosReversedString\u001b[0m = twosReversed.map(\u001b[36mx\u001b[0m => Two(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                       Not found: Two\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvy2v5u8t.scala:41:59 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mthreesReversedString\u001b[0m = threesReversed.map(\u001b[36mx\u001b[0m => Three(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                                           ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        Not found: Three\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvy2v5u8t.scala:42:57 ------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfoursReversedString\u001b[0m = foursReversed.map(\u001b[36mx\u001b[0m => Four(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                                         ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                         Not found: Four\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvy2v5u8t.scala:43:57 ------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfivesReversedString\u001b[0m = fivesReversed.map(\u001b[36mx\u001b[0m => Five(x))\n\u001b[3",
      "stdout": "",
      "timestamp": 1659804058
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val len = arr.length\n        val ones = arr.filter(_ <= 9).sorted\n        val tens = arr.filter(_ <= 99).sorted\n        val hundreds = arr.filter(_ <= 999).sorted\n        val thousands = arr.filter(_ <= 9999).sorted\n        val onesAndTens = ones + tens\n        val onesAndHundreds = ones + hundreds\n        val onesAndThousands = ones + thousands\n        val onesAndOnesAndTens = ones + onesAndTens\n        val onesAndOnesAndHundreds = ones + onesAndHundreds\n        val onesAndOnesAndThousands = ones + onesAndThousands\n        val onesAndOnesAndOnesAndTens = ones + onesAndOnesAndTens\n        val onesAndOnesAndOnesAndHundreds = ones + onesAndOnesAndHundreds\n        val onesAndOnesAndOnesAndThousands = ones + onesAndOnesAndThousands\n        val onesAndOnesAndOnesAndOnesAndTens = ones + onesAndOnesAndOnesAndTens\n        val onesAndOnesAndOnesAndOnesAndHundreds = ones + onesAndOnesAndOnesAndHundreds\n        val onesAndOnesAndOnesAndOnesAndThousands = ones + onesAndOnesAndOnesAndThousands\n        val onesAndOnesAndOnesAndOnesAndOnesAndTens = ones + onesAndOnesAndOnesAndOnesAndTens\n        val onesAndOnesAndOnesAndOnesAndOnesAndHundreds = ones + onesAndOnesAndOnesAndOnesAndHundreds\n        val onesAndOnesAndOnesAndOnesAndOnesAndThousands = ones + onesAndOnesAndOnesAndOnesAndThousands\n        val onesAndOnesAndOnesAndOnesAndOnesAndOnesAndTens = ones + onesAndOnesAndOnesAndOnesAndOnesAndTens\n        val onesAndOnesAndOnesAndOnesAndOnesAndOnesAndHundreds = ones + onesAndOnesAndOnesAndOnesAndOnesAndHundreds\n        val onesAndOnesAndOnesAndOnesAndOnesAndOnesAndThousands = ones + onesAndOnesAndOnesAndOnesAndOnesAndThousands\n        val onesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndTens = ones + onesAndOnesAndOnesAndOnesAndOnesAndOnesAnd\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpcdwalwvl.scala:26:31 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesAndTens\u001b[0m = ones + tens\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpcdwalwvl.scala:27:35 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesAndHundreds\u001b[0m = ones + hundreds\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpcdwalwvl.scala:28:36 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesAndThousands\u001b[0m = ones + thousands\n\u001b[31m\u001b[31m   |\u001b[0m                               ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpcdwalwvl.scala:29:38 -----",
      "stdout": "",
      "timestamp": 1659804066
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val result = new mutable.ListBuffer[String]()\n        val one = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val ten = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val hundred = List(\"Hundred\", \"Thousand\", \"Million\", \"Billion\", \"Trillion\", \"Quadrillion\", \"Quintillion\", \"Sextillion\", \"Septillion\", \"Octillion\", \"Nonillion\", \"Decillion\", \"Undecillion\", \"Duodecillion\", \"Tredecillion\", \"Quattuordecillion\", \"Quindecillion\", \"Sexdecillion\", \"Septdecillion\", \"Octodecillion\", \"Novemdecillion\", \"Vigintillion\", \"Unvigintillion\", \"Duovigintillion\", \"Trevigintillion\", \"Quattuorvigintillion\", \"Quinvigintillion\", \"Sexvigintillion\", \"Septvigintillion\", \"Octovigintillion\", \"Novemvigintillion\", \"Vigintigintillion\", \"Unvigintigintillion\", \"Duovigintigintillion\", \"Trevigintigintillion\", \"Quattuorvigintigintillion\", \"Quinvigintigintillion\", \"Sexvigintigintillion\", \"Septvigintigintillion\", \"Octovigintigintillion\", \"Novemvigintigintillion\", \"Vigintigintigintillion\", \"Unvigintigintigintillion\", \"Duovigintigintigintillion\", \"Trevigintigintigintillion\", \"Quattuorvigintigintigintillion\", \"Quinvigintigintigintillion\", \"Sexvigintigintigintillion\", \"Septvigintigintigintillion\", \"Octovigintigintigintillion\", \"Novemvigintigintillion\", \"Vigintigintigintigintillion\", \"Unvigintigintigintigintillion\", \"Du\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpv8drzw5d.scala:24:1131 ---------------------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhundred\u001b[0m = List(\u001b[31m\"Hundred\"\u001b[0m, \u001b[31m\"Thousand\"\u001b[0m, \u001b[31m\"Million\"\u001b[0m, \u001b[31m\"Billion\"\u001b[0m, \u001b[31m\"Trillion\"\u001b[0m, \u001b[31m\"Quadrillion\"\u001b[0m, \u001b[31m\"Quintillion\"\u001b[0m, \u001b[31m\"Sextillion\"\u001b[0m, \u001b[31m\"Septillion\"\u001b[0m, \u001b[31m\"Octillion\"\u001b[0m, \u001b[31m\"Nonillion\"\u001b[0m, \u001b[31m\"Decillion\"\u001b[0m, \u001b[31m\"Undecillion\"\u001b[0m, \u001b[31m\"Duodecillion\"\u001b[0m, \u001b[31m\"Tredecillion\"\u001b[0m, \u001b[31m\"Quattuordecillion\"\u001b[0m, \u001b[31m\"Quindecillion\"\u001b[0m, \u001b[31m\"Sexdecillion\"\u001b[0m, \u001b[31m\"Septdecillion\"\u001b[0m, \u001b[31m\"Octodecillion\"\u001b[0m, \u001b[31m\"Novemdecillion\"\u001b[0m, \u001b[31m\"Vigintillion\"\u001b[0m, \u001b[31m\"Unvigintillion\"\u001b[0m, \u001b[31m\"Duovigintillion\"\u001b[0m, \u001b[31m\"Trevigintillion\"\u001b[0m, \u001b[31m\"Quattuorvigintillion\"\u001b[0m, \u001b[31m\"Quinvigintillion\"\u001b[0m, \u001b[31m\"Sexvigintillion\"\u001b[0m, \u001b[31m\"Septvigintillion\"\u001b[0m, \u001b[31m\"Octovigintillion\"\u001b[0m, \u001b[31m\"Novemvigintillion\"\u001b[0m, \u001b[31m\"Vigintigintillion\"\u001b[0m, \u001b[31m\"Unvigintigintillion\"\u001b[0m, \u001b[31m\"Duovigintigintillion\"\u001b[0m, \u001b[31m\"Trevigintigintillion\"\u001b[0m, \u001b[31m\"Quattuorvigintigintillion\"\u001b[0m, \u001b[31m\"Quinvigintigintillion\"\u001b[0m, \u001b[31m\"Sexvigintigintillion\"\u001b[0m, \u001b[31m\"Septvigintigintillion\"\u001b[0m, \u001b[31m\"Octovigintigintillion\"\u001b[0m, \u001b[31m\"Novemvigintigintillion\"\u001b[0m, \u001b[31m\"Vigintigintigintillion\"\u001b[0m, \u001b[31m\"Unvigintigintigintillion\"\u001b[0m, \u001b[31m\"Duovigintigintigintillion\"\u001b[0m, \u001b[31m\"Trevigintigintigintillion\"\u001b[0m, \u001b[31m\"Quattuorvigintigintigintillion\"\u001b[0m, \u001b[31m\"Quinvigintigintigintillion\"\u001b[0m, \u001b[31m\"Sexvigintigintigintillion\"\u001b[0m, \u001b[31m\"Septvigintigintigintillion\"\u001b[0m, \u001b[31m\"Octovigintigintigintillion\"\u001b[0m, \u001b[31m\"Novemvigintigintillion\"\u001b[0m, \u001b[31m\"Vigintigintigintigintillion\"\u001b[0m, \u001b[31m\"Unvigintigintigintigintillion\"\u001b[0m, \"Du\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                ",
      "stdout": "",
      "timestamp": 1659804058
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1 && x <= 9).toList\n        val tens = arr.filter(x => x >= 10 && x <= 99).toList\n        val hundreds = arr.filter(x => x >= 100 && x <= 999).toList\n        val thousands = arr.filter(x => x >= 1000 && x <= 9999).toList\n        val tenThousands = arr.filter(x => x >= 10000 && x <= 99999).toList\n        val oneThousands = arr.filter(x => x >= 100000 && x <= 999999).toList\n        val oneHundreds = arr.filter(x => x >= 1000000 && x <= 999999999).toList\n        val oneThousandHundreds = arr.filter(x => x >= 1000000000 && x <= 99999999999).toList\n        val oneThousandThousandHundreds = arr.filter(x => x >= 100000000000 && x <= 999999999999).toList\n        val oneThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000 && x <= 999999999999999).toList\n        val oneThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000 && x <= 9999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000000 && x <= 99999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 9999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 99999999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThous\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjy1bxbxh.scala:38:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpjy1bxbxh.scala:28:74 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x <= \u001b[31m99999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpjy1bxbxh.scala:29:63 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000\u001b[0m && x <= \u001b[31m999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpjy1bxbxh.scala:29:84 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000\u001b[0m && x <= \u001b[31m999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                    ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpjy1bxbxh.scala:30:71 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000\u001b[0m && x <= \u001b[31m999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                       ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpjy1b",
      "stdout": "",
      "timestamp": 1659804006
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 10)\n        val tens = arr.filter(x => x >= 10 && x < 100)\n        val hundreds = arr.filter(x => x >= 100)\n        val reversed = ones + tens + hundreds.reverse\n        val names = \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\n        reversed.map(x => names.find(y => y == x.toString)).toList\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpl2qaoe69.scala:25:25 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnames\u001b[0m = \u001b[31m\"One\"\u001b[0m, \u001b[31m\"Two\"\u001b[0m, \u001b[31m\"Three\"\u001b[0m, \u001b[31m\"Four\"\u001b[0m, \u001b[31m\"Five\"\u001b[0m, \u001b[31m\"Six\"\u001b[0m, \u001b[31m\"Seven\"\u001b[0m, \u001b[31m\"Eight\"\u001b[0m, \u001b[31m\"Nine\"\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         end of statement expected but ',' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpl2qaoe69.scala:24:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mreversed\u001b[0m = ones + tens + hundreds.reverse\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804061
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1 && x <= 9).toList\n        val tens = arr.filter(x => x >= 10 && x <= 99).toList\n        val hundreds = arr.filter(x => x >= 100 && x <= 999).toList\n        val thousands = arr.filter(x => x >= 1000 && x <= 9999).toList\n        val tenThousands = arr.filter(x => x >= 10000 && x <= 99999).toList\n        val oneThousands = arr.filter(x => x >= 100000 && x <= 999999).toList\n        val tenThousandThousands = arr.filter(x => x >= 1000000 && x <= 9999999).toList\n        val oneThousandThousands = arr.filter(x => x >= 10000000 && x <= 99999999).toList\n        val tenThousandThousandThousands = arr.filter(x => x >= 100000000 && x <= 999999999).toList\n        val oneThousandThousandThousands = arr.filter(x => x >= 1000000000 && x <= 99999999999).toList\n        val tenThousandThousandThousandThousands = arr.filter(x => x >= 10000000000 && x <= 9999999998).toList\n        val oneThousandThousandThousandThousands = arr.filter(x => x >= 100000000000 && x <= 999999999998).toList\n        val tenThousandThousandThousandThousands = arr.filter(x => x >= 1000000000000 && x <= 9999999999987).toList\n        val oneThousandThousandThousandThousands = arr.filter(x => x >= 10000000000000 && x <= 9999999999987).toList\n        val tenThousandThousandThousandThousands = arr.filter(x => x >= 100000000000000 && x <= 99999999999876).toList\n        val oneThousandThousandThousandThousands = arr.filter(x => x >= 1000000000000000 && x <= 99999999999876).toList\n        val tenThousandThousandThousandThousands = arr.filter(x => x >= 10000000000000000 && x <= 9999999999987654).toList\n        val oneThousandThousandThousandThousands = arr.filter(x => x >= 100000000000000000 && x <= 9999999999987654).toList\n        val tenThousandThousandThousandThousands = arr.filter(x => x >= 100000000000000000 && x <= 99999999999876543).toList\n        val oneThousandTh\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpxneiq401.scala:41:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpxneiq401.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtenThousandThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000\u001b[0m && x <= \u001b[31m9999999999987\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mtenThousandThousandThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35mtenThousandThousandThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpxneiq401.scala:34:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000000\u001b[0m && x <= \u001b[31m9999999999987\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpxneiq401.scala:35:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtenThousandThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000000\u001b[0m && x <= \u001b[31m99999999999876\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mtenThousandThousandThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35mtenThousandThousandTho",
      "stdout": "",
      "timestamp": 1659804006
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x <= 9).sorted\n        val tens = arr.filter(x => x > 9).sorted\n        val tensReversed = tens.reverse\n        val onesReversed = ones.reverse\n        val onesReversedWithTens = onesReversed.zip(tensReversed)\n        val onesReversedWithTensReversed = onesReversedWithTens.map(x => x._1 + \"-\" + x._2)\n        val onesReversedWithTensReversedReversed = onesReversedWithTensReversed.reverse\n        val onesReversedWithTensReversedReversedReversed = onesReversedWithTensReversedReversed.reverse\n        val onesReversedWithTensReversedReversedReversedReversed = onesReversedWithTensReversedReversedReversed.reverse\n        val onesReversedWithTensReversedReversedReversedReversedReversed = onesReversedWithTensReversedReversedReversedReversed.reverse\n        val onesReversedWithTensReversedReversedReversedReversedReversedReversed = onesReversedWithTensReversedReversedReversedReversedReversedReversed.reverse\n        val onesReversedWithTensReversedReversedReversedReversedReversedReversedReversedReversed = onesReversedWithTensReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n        val onesReversedWithTensReversedReversedReversedReversedReversedReversedReversedReversedReversed = onesReversedWithTensReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n        val onesReversedWithTensReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed = onesReversedWithTensReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n        val onesReversedWithTensReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed = onesReversedWithTensReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n        val onesReversedWithTensReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed = onesReverse\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmplpj958k0.scala:36:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesReversedWithTensReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\u001b[0m = onesReverse\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0monesReversedWithTensReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed is already defined as \u001b[33mvalue\u001b[0m \u001b[35m\n\u001b[31m   |\u001b[0m  onesReversedWithTensReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\n\u001b[31m   |\u001b[0m\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmplpj958k0.scala:31:83 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesReversedWithTensReversedReversedReversedReversedReversedReversed\u001b[0m = onesReversedWithTensReversedReversedReversedReversedReversedReversed.reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                   ^\u001b[0m\n\u001b[31m   |\u001b[0mRecursive \u001b[33mvalue\u001b[0m \u001b[35monesReversedWithTensReversedReversedReversedReversedReversedReversed\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmplpj958k0.scala:32:99 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesReversedWithTensReversedReversedReversedReversedReversedReversedReversedReversed\u001b[0m = onesReversedWithTensReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                   ^\u001b[0m\n\u001b[31m   |\u001b[0mRecursive \u001b[33mvalue\u001b[0m \u001b[35m\n\u001b[31m   |\u001b[0m  onesReversedWithTensReversedReversedReversedReversedReversedReversedReversedReversed\n",
      "stdout": "",
      "timestamp": 1659804061
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(_ <= 9).sorted\n        val tens = arr.filter(_ <= 99).sorted\n        val hundreds = arr.filter(_ <= 999).sorted\n        val thousands = arr.filter(_ <= 9999).sorted\n        val tenThousands = arr.filter(_ <= 999999).sorted\n        val oneThousands = arr.filter(_ <= 9999999).sorted\n        val oneHundreds = arr.filter(_ <= 999999999).sorted\n        val oneThousandHundreds = arr.filter(_ <= 99999999999).sorted\n        val oneThousandThousandHundreds = arr.filter(_ <= 999999999).sorted\n        val oneHundredThousandHundredThousandHundreds = arr.filter(_ <= 99999999999).sorted\n        val oneThousandThousandThousandThousandHundredThousandHundreds = arr.filter(_ <= 999999999).sorted\n        val oneHundredThousandThousandThousandThousandHundredThousandHundred = arr.filter(_ <= 99999999999).sorted\n        val oneThousandThousandThousandThousandThousandHundredThousandHundredThousandHundred = arr.filter(_ <= 999999999).sorted\n        val oneHundredThousandThousandThousandThousandHundredThousandHundredThousandHundredThousandHundred = arr.filter(_ <= 99999999999).sorted\n        val oneThousandThousandThousandThousandThousandHundredThousandHundredThousandHundredThousandHundredThousandHundred = arr.filter(_ <= 999999999).sorted\n        val oneHundredThousandThousandThousandThousandHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundred = arr.filter(_ <= 99999999999).sorted\n        val oneThousandThousandThousandThousandThousandHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundred = arr.filter(_ <= \n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpeuw8b8p8.scala:37:170 --------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundred\u001b[0m = arr.filter(_ <= \n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpeuw8b8p8.scala:28:50 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m99999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpeuw8b8p8.scala:30:72 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandHundredThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m99999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpeuw8b8p8.scala:32:95 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousandThousandHundredThousandHundred\u001b[0m = arr.filter(_ <= \u001b[31m99999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                               ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpeuw8b8p8.scala:34:125 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m",
      "stdout": "",
      "timestamp": 1659804061
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1 && x <= 9).toList\n        val tens = arr.filter(x => x >= 10 && x <= 99).toList\n        val hundreds = arr.filter(x => x >= 100 && x <= 999).toList\n        val thousands = arr.filter(x => x >= 1000 && x <= 9999).toList\n        val tenThousands = arr.filter(x => x >= 10000 && x <= 99999).toList\n        val oneThousands = arr.filter(x => x >= 100000 && x <= 999999).toList\n        val tenThousandThousands = arr.filter(x => x >= 1000000 && x <= 9999999).toList\n        val oneThousandThousands = arr.filter(x => x >= 10000000 && x <= 99999999).toList\n        val tenThousandThousandThousands = arr.filter(x => x >= 100000000 && x <= 999999999).toList\n        val oneThousandThousandThousands = arr.filter(x => x >= 1000000000 && x <= 99999999999).toList\n        val tenThousandThousandThousandThousands = arr.filter(x => x >= 10000000000 && x <= 999999999999).toList\n        val oneThousandThousandThousandThousands = arr.filter(x => x >= 100000000000 && x <= 999999999999999).toList\n        val tenThousandThousandThousandThousands = arr.filter(x => x >= 1000000000000 && x <= 9999999999999999).toList\n        val oneThousandThousandThousandThousands = arr.filter(x => x >= 10000000000000 && x <= 9999999999999999999).toList\n        val tenThousandThousandThousandThousands = arr.filter(x => x >= 100000000000000 && x <= 99999999999999999999).toList\n        val oneThousandThousandThousandThousands = arr.filter(x => x >= 1000000000000000 && x <= 99999999999999999999999).toList\n        val tenThousandThousandThousandThousands = arr.filter(x => x >= 10000000000000000 && x <= 999999999999999999999999).toList\n        val oneThousandThousandThousandThousands = arr.filter(x => x >= 100000000000000000 && x <= 999999999999999999999999999).toList\n        val tenThousandThousandThousandThousands = arr.filter(x => x >= 1000000000000000000 && x <= 9999999999999999999999999999).toList\n        \n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpssmwzjs6.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtenThousandThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000\u001b[0m && x <= \u001b[31m9999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mtenThousandThousandThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35mtenThousandThousandThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpssmwzjs6.scala:34:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000000\u001b[0m && x <= \u001b[31m9999999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpssmwzjs6.scala:35:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtenThousandThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000000\u001b[0m && x <= \u001b[31m99999999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mtenThousandThousandThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35mtenThousandThousandThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Nami",
      "stdout": "",
      "timestamp": 1659804064
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val nums = arr.toList\n        val numsSorted = nums.sortWith(_ < _)\n        val numsReversed = numsSorted.reverse\n        val numsReversedString = numsReversed.map(_ + \"\").mkString(\"\")\n        val numsReversedStringList = numsReversedString.split(\"\\\\D+\")\n        val numsReversedStringListSorted = numsReversedStringList.sortWith(_ < _)\n        numsReversedStringListSorted.map(_.replaceAll(\"\\\\D+\", One))\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4_lycc52.scala:27:62 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        numsReversedStringListSorted.map(_.replaceAll(\u001b[31m\"\\\\D+\"\u001b[0m, One))\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: One\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659804061
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1 && x <= 9).sorted\n        val tens = arr.filter(x => x >= 10 && x <= 99).sorted\n        val hundreds = arr.filter(x => x >= 100 && x <= 999).sorted\n        val thousands = arr.filter(x => x >= 1000 && x <= 9999).sorted\n        val tenThousands = arr.filter(x => x >= 10000 && x <= 99999).sorted\n        val oneThousands = arr.filter(x => x >= 100000 && x <= 999999).sorted\n        val oneHundreds = arr.filter(x => x >= 1000000 && x <= 9999999).sorted\n        val oneThousandHundreds = arr.filter(x => x >= 10000000 && x <= 99999999).sorted\n        val oneThousandThousandHundreds = arr.filter(x => x >= 100000000 && x <= 999999999).sorted\n        val oneHundredThousandThousandHundreds = arr.filter(x => x >= 1000000000 && x <= 99999999999).sorted\n        val oneHundredThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000 && x <= 999999999999).sorted\n        val oneHundredThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000 && x <= 999999999999999).sorted\n        val oneHundredThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000 && x <= 9999999999999999).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000 && x <= 9999999999999999999).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000 && x <= 99999999999999999999).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000000 && x <= 99999999999999999999999).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000000\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmps26g5i78.scala:38:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmps26g5i78.scala:30:89 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x <= \u001b[31m99999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmps26g5i78.scala:31:78 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000\u001b[0m && x <= \u001b[31m999999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                                              ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmps26g5i78.scala:31:98 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000\u001b[0m && x <= \u001b[31m999999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmps26g5i78.scala:32:86 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000\u001b[0m && x <= \u001b[31m999999999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                      ^^^^^^^^^^^^\u001b[0m\n\u001b[31",
      "stdout": "",
      "timestamp": 1659804066
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 10)\n        val tens = arr.filter(x => x >= 10 && x < 100)\n        val hundreds = arr.filter(x => x >= 100 && x < 1000)\n        val thousands = arr.filter(x => x >= 1000 && x < 10000)\n        val tenThousands = arr.filter(x => x >= 10000 && x < 100000)\n        val oneThousands = arr.filter(x => x >= 100000 && x < 1000000)\n        val tenMillions = arr.filter(x => x >= 1000000 && x < 10000000)\n        val oneMillions = arr.filter(x => x >= 10000000 && x < 100000000)\n        val tenBillions = arr.filter(x => x >= 100000000 && x < 1000000000)\n        val oneBillions = arr.filter(x => x >= 1000000000 && x < 10000000000)\n        val tenTrillions = arr.filter(x => x >= 10000000000 && x < 100000000000)\n        val oneTrillions = arr.filter(x => x >= 100000000000 && x < 1000000000000)\n        val tenQuadrillions = arr.filter(x => x >= 1000000000000 && x < 10000000000000)\n        val oneQuadrillions = arr.filter(x => x >= 10000000000000 && x < 100000000000000)\n        val tenQuintillions = arr.filter(x => x >= 100000000000000 && x < 1000000000000000)\n        val oneQuintillions = arr.filter(x => x >= 1000000000000000 && x < 10000000000000000)\n        val tenSextillions = arr.filter(x => x >= 10000000000000000 && x < 100000000000000000)\n        val oneSextillions = arr.filter(x => x >= 100000000000000000 && x < 1000000000000000000)\n        val tenSeptillions = arr.filter(x => x >= 1000000000000000000 && x < 10000000000000000000)\n        val oneSeptillions = arr.filter(x => x >= 10000000000000000000 && x < 100000000000000000000)\n        val tenOctillions = arr.filter(x => x >= 100000000000000000000 && x < 1000000000000000000000)\n        val oneOctillions = arr.filter(x => x >= 100000000000000000000 && x < 10000000000000000000000)\n        val tenNonillions = arr.filter(x => x >= 10000000000000000000000 && x < 100000000000000000000000)\n        val oneNonillions = arr.filter(x => x >= 10000000000000000000000 && x < 1000000000000000000000000)\n        val tenDecillions = arr.filter(x => x >= 1000000000000000000000000 && x < 1000000000000000000\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp0vhsb7ue.scala:46:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmp0vhsb7ue.scala:30:65 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneBillions\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x < \u001b[31m10000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                 ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp0vhsb7ue.scala:31:48 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtenTrillions\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000\u001b[0m && x < \u001b[31m100000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp0vhsb7ue.scala:31:67 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtenTrillions\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000\u001b[0m && x < \u001b[31m100000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                   ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp0vhsb7ue.scala:32:48 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneTrillions\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000\u001b[0m && x < \u001b[31m1000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp0vhsb7ue.scala:32:68 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneTrillions\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000\u001b[0m && ",
      "stdout": "",
      "timestamp": 1659804066
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val list = arr.sortWith(_ < _)\n        val reversed = list.reverse\n        val result = reversed.map(x => if (x < 10) \"One\" else if (x < 100) \"Two\" else if (x < 1000) \"Three\" else \"Four\")\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpuq_7jopr.scala:27)\n\tat Problem.main(tmpuq_7jopr.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659804068
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 10)\n        val tens = arr.filter(x => x >= 10 && x < 100)\n        val hundreds = arr.filter(x => x >= 100 && x < 1000)\n        val thousands = arr.filter(x => x >= 1000 && x < 10000)\n        val tenThousands = arr.filter(x => x >= 10000 && x < 100000)\n        val oneThousands = arr.filter(x => x >= 100000 && x < 1000000)\n        val oneHundreds = arr.filter(x => x >= 1000000 && x < 10000000)\n        val oneThousandHundreds = arr.filter(x => x >= 10000000 && x < 100000000)\n        val oneThousandThousands = arr.filter(x => x >= 100000000 && x < 1000000000)\n        val oneHundredThousands = arr.filter(x => x >= 1000000000 && x < 10000000000)\n        val oneHundredThousandHundreds = arr.filter(x => x >= 10000000000 && x < 100000000000)\n        val oneHundredThousandThousands = arr.filter(x => x >= 100000000000 && x < 1000000000000)\n        val oneHundredThousandThousandHundreds = arr.filter(x => x >= 1000000000000 && x < 10000000000000)\n        val oneHundredThousandThousandThousands = arr.filter(x => x >= 10000000000000 && x < 100000000000000)\n        val oneHundredThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000 && x < 1000000000000000)\n        val oneHundredThousandThousandThousandThousands = arr.filter(x => x >= 1000000000000000 && x < 10000000000000000)\n        val oneHundredThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000000 && x < 100000000000000000)\n        val oneHundredThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x < 1000000000000000000)\n        val oneHundredThousandThousandThousandThousandThousands = arr.filter(x => x >= 1000000000000000000 && x < 10000000000000000000)\n        val oneHundredThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000000000 && x < 100000000000000000000)\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpzmt6ihxw.scala:41:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m        \u001b[33mval\u001b[0m \n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpzmt6ihxw.scala:38:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000000000\u001b[0m && x < \u001b[31m1000000000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneHundredThousandThousandThousandThousandHundreds is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneHundredThousandThousandThousandThousandHundreds\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- Error: /tmp/tmpzmt6ihxw.scala:30:73 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x < \u001b[31m10000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpzmt6ihxw.scala:31:62 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000\u001b[0m && x < \u001b[31m100000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpzmt6ihxw.scala:31:81 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousand",
      "stdout": "",
      "timestamp": 1659804036
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x % 10 == 1)\n        val twos = arr.filter(x => x % 10 == 2)\n        val threes = arr.filter(x => x % 10 == 3)\n        val fours = arr.filter(x => x % 10 == 4)\n        val fives = arr.filter(x => x % 10 == 5)\n        val sixes = arr.filter(x => x % 10 == 6)\n        val sevens = arr.filter(x => x % 10 == 7)\n        val eights = arr.filter(x => x % 10 == 8)\n        val nines = arr.filter(x => x % 10 == 9)\n        val onesAndTwos = ones + twos\n        val onesAndThrees = ones + threes\n        val onesAndFours = ones + fours\n        val onesAndFives = ones + fives\n        val onesAndSixes = ones + sixes\n        val onesAndSevens = ones + sevens\n        val onesAndEights = ones + eights\n        val onesAndNines = ones + nines\n        val twosAndThrees = twos + threes\n        val twosAndFours = twos + fours\n        val twosAndFives = twos + fives\n        val twosAndSixes = twos + sixes\n        val twosAndSevens = twos + sevens\n        val twosAndEights = twos + eights\n        val twosAndNines = twos + nines\n        val threesAndFours = threes + fours\n        val threesAndFives = threes + fives\n        val threesAndSixes = threes + sixes\n        val threesAndSevens = threes + sevens\n        val threesAndEights = threes + eights\n        val threesAndNines = threes + nines\n        val foursAndFives = fours + fives\n        val foursAndSixes = fours + sixes\n        val foursAndSevens = fours + sevens\n        val foursAndEights = fours + eights\n        val foursAndNines = fours + nines\n        val fivesAndSixes = fives + sixes\n        val fivesAndSevens = fives + sevens\n        val fivesAndEights = fives + eights\n        val fivesAndNines = fives + nines\n        \n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpofntn3b4.scala:30:31 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesAndTwos\u001b[0m = ones + twos\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpofntn3b4.scala:31:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesAndThrees\u001b[0m = ones + threes\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpofntn3b4.scala:32:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesAndFours\u001b[0m = ones + fours\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpofntn3b4.scala:33:32 -----------------------",
      "stdout": "",
      "timestamp": 1659804075
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(_ <= 9).sorted\n        val tens = arr.filter(_ <= 99).sorted\n        val hundreds = arr.filter(_ <= 999).sorted\n        val thousands = arr.filter(_ <= 9999).sorted\n        val tenThousands = arr.filter(_ <= 999999).sorted\n        val oneThousands = arr.filter(_ <= 9999999).sorted\n        val oneHundreds = arr.filter(_ <= 999999999).sorted\n        val oneThousandThousands = arr.filter(_ <= 99999999999).sorted\n        val oneHundredThousands = arr.filter(_ <= 999999999999).sorted\n        val oneHundredThousandThousands = arr.filter(_ <= 999999999999999).sorted\n        val oneHundredThousandThousandThousands = arr.filter(_ <= 9999999999999999999).sorted\n        val oneHundredThousandThousandThousandThousands = arr.filter(_ <= 99999999999999999999999).sorted\n        val oneHundredThousandThousandThousandThousandThousands = arr.filter(_ <= 999999999999999999999999999).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 9999999999999999999999999999999).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 99999999999999999999999999999999999).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 999999999999999999999999999999999999999).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 9999999999999999999999999999999999999999999).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 99999999999999999999999999999999999999999999999).sorted\n        val oneHundredThousandThousandThousand\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpb50_iw6u.scala:40:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpb50_iw6u.scala:28:51 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m99999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                   number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpb50_iw6u.scala:29:50 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousands\u001b[0m = arr.filter(_ <= \u001b[31m999999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpb50_iw6u.scala:30:58 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m999999999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                          ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpb50_iw6u.scala:31:66 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m9999999999999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                                  ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpb50_iw6u.scala:32:74 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m99999999999999999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m             ",
      "stdout": "",
      "timestamp": 1659804006
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val sortedArr = arr.sortWith(_ < _)\n        val reverseArr = sortedArr.reverse\n        val strArr = reverseArr.map(x => if (x < 10) \"One\" else if (x < 100) \"Two\" else if (x < 1000) \"Three\" else if (x < 10000) \"Four\" else \"Five\" else if (x < 100000) \"Six\" else \"Seven\" else \"Eight\" else if (x < 1000000) \"Nine\" else \"Zero\")\n        val result = strArr.toList\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpm4cejrc3.scala:23:149 --------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mstrArr\u001b[0m = reverseArr.map(\u001b[36mx\u001b[0m => \u001b[33mif\u001b[0m (x < \u001b[31m10\u001b[0m) \u001b[31m\"One\"\u001b[0m \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (x < \u001b[31m100\u001b[0m) \u001b[31m\"Two\"\u001b[0m \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (x < \u001b[31m1000\u001b[0m) \u001b[31m\"Three\"\u001b[0m \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (x < \u001b[31m10000\u001b[0m) \u001b[31m\"Four\"\u001b[0m \u001b[33melse\u001b[0m \u001b[31m\"Five\"\u001b[0m \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (x < \u001b[31m100000\u001b[0m) \u001b[31m\"Six\"\u001b[0m \u001b[33melse\u001b[0m \u001b[31m\"Seven\"\u001b[0m \u001b[33melse\u001b[0m \u001b[31m\"Eight\"\u001b[0m \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (x < \u001b[31m1000000\u001b[0m) \u001b[31m\"Nine\"\u001b[0m \u001b[33melse\u001b[0m \u001b[31m\"Zero\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                     ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          ')' expected, but 'else' found\n1 error found\n",
      "stdout": "",
      "timestamp": 1659804064
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 10)\n        val tens = arr.filter(x => x >= 10 && x < 100)\n        val hundreds = arr.filter(x => x >= 100 && x < 1000)\n        val thousands = arr.filter(x => x >= 1000 && x < 10000)\n        val tenThousands = arr.filter(x => x >= 10000 && x < 100000)\n        val oneThousands = arr.filter(x => x >= 100000 && x < 1000000)\n        val oneHundreds = arr.filter(x => x >= 1000000 && x < 10000000)\n        val oneThousandHundreds = arr.filter(x => x >= 10000000 && x < 100000000)\n        val oneThousandThousands = arr.filter(x => x >= 100000000 && x < 1000000000)\n        val oneHundredThousands = arr.filter(x => x >= 1000000000 && x < 10000000000)\n        val oneHundredThousandHundreds = arr.filter(x => x >= 10000000000 && x < 100000000000)\n        val oneThousandThousandHundreds = arr.filter(x => x >= 100000000000 && x < 1000000000000)\n        val oneHundredThousandThousands = arr.filter(x => x >= 1000000000000 && x < 10000000000000)\n        val oneHundredThousandThousandHundreds = arr.filter(x => x >= 10000000000000 && x < 100000000000000) \n        val oneThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000 && x < 1000000000000000)\n        val oneHundredThousandThousandThousands = arr.filter(x => x >= 1000000000000000 && x < 10000000000000000)\n        val oneHundredThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000000 && x < 100000000000000000)\n        val oneThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x < 1000000000000000000)\n        val oneHundredThousandThousandThousandThousands = arr.filter(x => x >= 1000000000000000000 && x < 10000000000000000000)\n        val oneHundredThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000000000 && x < 100000000000000000000)\n        val oneThousandThousandThousandThousandThousandHundreds = \n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpghdcylwv.scala:41:65 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandHundreds\u001b[0m = \n\u001b[31m\u001b[31m   |\u001b[0m                                                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpghdcylwv.scala:30:73 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x < \u001b[31m10000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpghdcylwv.scala:31:62 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000\u001b[0m && x < \u001b[31m100000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpghdcylwv.scala:31:81 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000\u001b[0m && x < \u001b[31m100000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                 ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpghdcylwv.scala:32:63 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000\u001b[0m && x < \u001b[31m1000000000000\u001b[0m)\n",
      "stdout": "",
      "timestamp": 1659804067
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 10)\n        val tens = arr.filter(x => x >= 10 && x < 100)\n        val hundreds = arr.filter(x => x >= 100 && x < 1000)\n        val thousands = arr.filter(x => x >= 1000)\n        val reversed = ones + tens + hundreds + thousands.reverse\n        val onesReversed = ones.map(x => One(x))\n        val tensReversed = tens.map(x => Two(x))\n        val hundredsReversed = hundreds.map(x => Three(x))\n        val thousandsReversed = thousands.map(x => Four(x))\n        val reversedReversed = reversed.map(x => Five(x))\n        val reversedReversedReversed = reversedReversed.map(x => Six(x))\n        val reversedReversedReversedReversed = reversedReversedReversed.map(x => Seven(x))\n        val reversedReversedReversedReversedReversed = reversedReversedReversedReversed.map(x => Eight(x))\n        val reversedReversedReversedReversedReversedReversed = reversedReversedReversedReversedReversed.map(x => Nine(x))\n        val reversedReversedReversedReversedReversedReversedReversedReversed = reversedReversedReversedReversedReversedReversedReversed.map(x => Ten(x))\n        val reversedReversedReversedReversedReversedReversedReversedReversedReversedReversed = reversedReversedReversedReversedReversedReversedReversedReversedReversed.map(x => Eleven(x))\n        val reversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed = reversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.map(x => Twelve(x))\n        val reversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed = reversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.map(x => Thirteen(x))\n        val reversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed = reversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.map(x => Fourteen(x))\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpkthgro09.scala:25:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mreversed\u001b[0m = ones + tens + hundreds + thousands.reverse\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkthgro09.scala:26:41 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesReversed\u001b[0m = ones.map(\u001b[36mx\u001b[0m => One(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                         Not found: One\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkthgro09.scala:27:41 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtensReversed\u001b[0m = tens.map(\u001b[36mx\u001b[0m => Two(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                         Not found: Two\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkthgro09.scala:28:49 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhundredsReversed\u001b[0m = hundreds.map(\u001b[36mx\u001b[0m => Three(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Not found: Three\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkthgro09.scala:29:51 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 ",
      "stdout": "",
      "timestamp": 1659804069
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 10)\n        val tens = arr.filter(x => x >= 10 && x < 100)\n        val hundreds = arr.filter(x => x >= 100 && x < 1000)\n        val thousands = arr.filter(x => x >= 1000 && x < 10000)\n        val tenThousands = arr.filter(x => x >= 10000 && x < 100000)\n        val oneThousands = arr.filter(x => x >= 100000 && x < 1000000)\n        val oneHundreds = arr.filter(x => x >= 1000000 && x < 10000000)\n        val oneThousandHundreds = arr.filter(x => x >= 10000000 && x < 100000000)\n        val oneThousandThousandHundreds = arr.filter(x => x >= 100000000 && x < 1000000000)\n        val oneThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000 && x < 10000000000)\n        val oneThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000 && x < 100000000000)\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000 && x < 1000000000000)\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000 && x < 10000000000000)\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000 && x < 100000000000000L)\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000L)\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000L)\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000L)\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000L)\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandHund\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpe8470v31.scala:40:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpe8470v31.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000\u001b[0m && x < \u001b[31m10000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousandThousandHundreds is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousandThousandHundreds\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpe8470v31.scala:36:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000000L\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousandThousandThousandThousandHundreds is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousandThousandThousandThousandHundreds\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpe8470v31.scala:37:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000000L\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0",
      "stdout": "",
      "timestamp": 1659804069
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(_ <= 9).sorted\n        val tens = arr.filter(_ <= 99).sorted\n        val hundreds = arr.filter(_ <= 999).sorted\n        val thousands = arr.filter(_ <= 9999).sorted\n        val tenThousands = arr.filter(_ <= 999999).sorted\n        val oneThousands = arr.filter(_ <= 9999999).sorted\n        val oneHundreds = arr.filter(_ <= 999999999).sorted\n        val oneThousandHundreds = arr.filter(_ <= 99999999999).sorted\n        val oneThousandThousandHundreds = arr.filter(_ <= 999999999999999).sorted\n        val oneHundredThousandThousandHundreds = arr.filter(_ <= 9999999999999999999).sorted\n        val oneHundredThousandThousandThousandHundreds = arr.filter(_ <= 99999999999999999999999).sorted\n        val oneHundredThousandThousandThousandThousandHundreds = arr.filter(_ <= 999999999999999999999999999).sorted\n        val oneHundredThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 9999999999999999999999999999999).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 99999999999999999999999999999999999).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 999999999999999999999999999999999999999).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 99999999999999999999999999999999999999999999999).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 999999999999999999999999999999999999999999999999999).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousandThousand\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp675vi7mk.scala:39:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmp675vi7mk.scala:28:50 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m99999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp675vi7mk.scala:29:58 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m999999999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                          ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp675vi7mk.scala:30:65 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m9999999999999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                                 ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp675vi7mk.scala:31:73 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m99999999999999999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                                         ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp675vi7mk.scala:32:81 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(_",
      "stdout": "",
      "timestamp": 1659804068
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x % 10 == 1)\n        val tens = arr.filter(x => x % 10 == 0)\n        val reversed = tens.reverse\n        val onesAndTens = ones + tens\n        val onesAndTensAndReversed = onesAndTens.reverse\n        val onesAndTensAndReversedAndOnes = onesAndTensAndReversed.map(x => onesAndTensAndReversedAndOnesMap.get(x))\n        val onesAndTensAndReversedAndOnesReversed = onesAndTensAndReversedAndOnes.reverse\n        val onesAndTensAndReversedAndOnesReversedAndOnes = onesAndTensAndReversedAndOnesReversed.map(x => onesAndTensAndReversedAndOnesReversedAndOnesMap.get(x))\n        val onesAndTensAndReversedAndOnesReversedAndOnesReversed = onesAndTensAndReversedAndOnesReversedAndOnes.reverse\n        val onesAndTensAndReversedAndOnesReversedAndOnesReversedAndOnes = onesAndTensAndReversedAndOnesReversedAndOnesReversed.map(x => onesAndTensAndReversedAndOnesReversedAndOnesReversedAndOnesMap.get(x))\n        val onesAndTensAndReversedAndOnesReversedAndOnesReversedAndOnesReversed = onesAndTensAndReversedAndOnesReversedAndOnesReversedAndOnesReversed.map(x => onesAndTensAndReversedAndOnesReversedAndOnesReversedAndOnesReversedAndOnesMap.get(x))\n        val onesAndTensAndReversedAndOnesReversedAndOnesReversedAndOnesReversedAndOnes = onesAndTensAndReversedAndOnesReversedAndOnesReversedAndOnesReversedAndOnes.map(x => onesAndTensAndReversedAndOnesReversedAndOnesReversedAndOnesReversedAndOnesMap.get(x))\n        val onesAndTensAndReversedAndOnesReversedAndOnesReversedAndOnesReversedAndOnesReversed = onesAndTensAndReversedAndOnesReversedAndOnesReversedAndOnesReversedAndOnesReversed.map(x => onesAndTensAndReversedAndOnesReversedAndOnesReversedAndOnesReversedAndOnesReversedAndOnesMap.get(x))\n        val one\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp__lspju2.scala:35:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp__lspju2.scala:24:31 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesAndTens\u001b[0m = ones + tens\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp__lspju2.scala:31:82 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesAndTensAndReversedAndOnesReversedAndOnesReversedAndOnesReversed\u001b[0m = onesAndTensAndReversedAndOnesReversedAndOnesReversedAndOnesReversed.map(\u001b[36mx\u001b[0m => onesAndTensAndReversedAndOnesReversedAndOnesReversedAndOnesReversedAndOnesMap.get(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                  ^\u001b[0m\n\u001b[31m   |\u001b[0mRecursive \u001b[33mvalue\u001b[0m \u001b[35monesAndTensAndReversedAndOnesReversedAndOnesReversedAndOnesReversed\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp__lspju2.scala:32:89 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesAndTensAndReversedAndOnesReversedAndOnesReversedAndOnesReversedAndOnes\u001b[0m = onesAndTensAndReversedAndOnesReversedAndOnesReversedAndOnesReversedAndOnes.map(\u001b[36mx\u001b[0m => onesAndTensAndReversedAndOnesReversedAndOnesReversedAndOnesReversedAndOnesMap.get(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                       ",
      "stdout": "",
      "timestamp": 1659804071
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 10).map(x => s\"One\")\n        val tens = arr.filter(x => x >= 10 && x < 100).map(x => s\"Ten\")\n        val hundreds = arr.filter(x => x >= 100 && x < 1000).map(x => s\"Hundred\")\n        val thousands = arr.filter(x => x >= 1000 && x < 10000).map(x => s\"Thousand\")\n        val millions = arr.filter(x => x >= 10000 && x < 100000).map(x => s\"Million\")\n        val billions = arr.filter(x => x >= 100000 && x < 1000000).map(x => s\"Billion\")\n        val trillions = arr.filter(x => x >= 1000000 && x < 10000000).map(x => s\"Trillion\")\n        val quadrillions = arr.filter(x => x >= 10000000 && x < 100000000).map(x => s\"Quadrillion\")\n        val quintillions = arr.filter(x => x >= 100000000 && x < 1000000000).map(x => s\"Quintillion\")\n        val sextillions = arr.filter(x => x >= 1000000000 && x < 10000000000).map(x => s\"Sextillion\")\n        val septillions = arr.filter(x => x >= 10000000000 && x < 100000000000).map(x => s\"Septillion\")\n        val octillions = arr.filter(x => x >= 100000000000 && x < 1000000000000).map(x => s\"Octillion\")\n        val nonillions = arr.filter(x => x >= 1000000000000 && x < 10000000000000).map(x => s\"Nonillion\")\n        val decillions = arr.filter(x => x >= 10000000000000 && x < 100000000000000).map(x => s\"Decillion\")\n        val undecillions = arr.filter(x => x >= 100000000000000 && x < 1000000000000000).map(x => s\"Undecillion\")\n        val duodecillions = arr.filter(x => x >= 1000000000000000 && x < 10000000000000000).map(x => s\"Duodecillion\")\n        val tredecillions = arr.filter(x => x >= 10000000000000000 && x < 100000000000000000).map(x => s\"Tredecillion\")\n        val quattuordecillions = arr.filter(x => x >= 100000000000000000 && x < 1000000000000000000).map(x => s\"Quattuordecillion\")\n        val quindecillions = arr.filter(x => x >= \n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpdh3od681.scala:39:49 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mquindecillions\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpdh3od681.scala:30:65 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msextillions\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x < \u001b[31m10000000000\u001b[0m).map(\u001b[36mx\u001b[0m => \u001b[31ms\"Sextillion\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                 ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpdh3od681.scala:31:47 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mseptillions\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000\u001b[0m && x < \u001b[31m100000000000\u001b[0m).map(\u001b[36mx\u001b[0m => \u001b[31ms\"Septillion\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                               number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpdh3od681.scala:31:66 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mseptillions\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000\u001b[0m && x < \u001b[31m100000000000\u001b[0m).map(\u001b[36mx\u001b[0m => \u001b[31ms\"Septillion\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpdh3od681.scala:32:46 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moctillions\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000\u001b[0m && x < \u001b[31m1000000000000\u001b[0m)",
      "stdout": "",
      "timestamp": 1659804046
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1 && x <= 9).toList\n        val tens = arr.filter(x => x >= 10 && x <= 99).toList\n        val hundreds = arr.filter(x => x >= 100 && x <= 999).toList\n        val thousands = arr.filter(x => x >= 1000 && x <= 9999).toList\n        val tenThousands = arr.filter(x => x >= 10000 && x <= 99999).toList\n        val oneThousands = arr.filter(x => x >= 100000 && x <= 999999).toList\n        val oneHundreds = arr.filter(x => x >= 1000000 && x <= 999999999).toList\n        val oneThousandHundreds = arr.filter(x => x >= 1000000000 && x <= 99999999999).toList\n        val oneThousandThousandHundreds = arr.filter(x => x >= 100000000000 && x <= 999999999999).toList\n        val oneThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000 && x <= 999999999999999).toList\n        val oneThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000 && x <= 9999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000000 && x <= 99999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 9999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 99999999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThous\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjy1bxbxh.scala:38:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpjy1bxbxh.scala:28:74 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x <= \u001b[31m99999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpjy1bxbxh.scala:29:63 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000\u001b[0m && x <= \u001b[31m999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpjy1bxbxh.scala:29:84 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000\u001b[0m && x <= \u001b[31m999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                    ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpjy1bxbxh.scala:30:71 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000\u001b[0m && x <= \u001b[31m999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                       ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpjy1b",
      "stdout": "",
      "timestamp": 1659804006
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x % 10 == 1).sorted\n        val tens = arr.filter(x => x % 10 == 0).sorted\n        val tensReversed = tens.reverse\n        val onesReversed = ones.reverse\n        val onesReversedWithTens = onesReversed.zip(tensReversed)\n        val onesReversedWithTensReversed = onesReversedWithTens.reverse\n        val onesReversedWithTensReversedWithOnes = onesReversedWithTensReversed.zip(onesReversed)\n        val onesReversedWithTensReversedWithOnesReversed = onesReversedWithTensReversedWithOnes.reverse\n        val onesReversedWithTensReversedWithOnesReversedWithTens = onesReversedWithTensReversedWithOnesReversed.zip(tensReversed)\n        val onesReversedWithTensReversedWithOnesReversedWithTensReversed = onesReversedWithTensReversedWithOnesReversedWithTens.reverse\n        val onesReversedWithTensReversedWithOnesReversedWithTensReversedWithOnes = onesReversedWithTensReversedWithOnesReversedWithTensReversed.zip(onesReversed)\n        val onesReversedWithTensReversedWithOnesReversedWithTensReversedWithOnesReversed = onesReversedWithTensReversedWithOnesReversedWithTensReversedWithOnes.reverse\n        val onesReversedWithTensReversedWithOnesReversedWithTensReversedWithOnesReversedWithTens = onesReversedWithTensReversedWithOnesReversedWithTensReversedWithOnesReversed.zip(tensReversed)\n        val onesReversedWithTensReversedWithOnesReversedWithTensReversedWithOnesReversedWithTensReversed = onesReversedWithTensReversedWithOnesReversedWithTensReversedWithOnesReversedWithTensReversed.reverse\n        val onesReversedWithTensReversedWithOnesReversedWithTensReversedWithOnesReversedWithTensReversedWithOnes = onesReversedWithTensReversedWithOnesReversedWithTensReversedWithOnesReversedWithTensReversed.zip(ones\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpkc6n7d0j.scala:36:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpkc6n7d0j.scala:34:107 --------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesReversedWithTensReversedWithOnesReversedWithTensReversedWithOnesReversedWithTensReversed\u001b[0m = onesReversedWithTensReversedWithOnesReversedWithTensReversedWithOnesReversedWithTensReversed.reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                           ^\u001b[0m\n\u001b[31m   |\u001b[0mRecursive \u001b[33mvalue\u001b[0m \u001b[35m\n\u001b[31m   |\u001b[0m  onesReversedWithTensReversedWithOnesReversedWithTensReversedWithOnesReversedWithTensReversed\n\u001b[31m   |\u001b[0m\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkc6n7d0j.scala:36:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659804069
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x <= 9).map(x => s\"One\")\n        val twos = arr.filter(x => x <= 99).map(x => s\"Two\")\n        val threes = arr.filter(x => x <= 999).map(x => s\"Three\")\n        val fours = arr.filter(x => x <= 9999).map(x => s\"Four\")\n        val fives = arr.filter(x => x <= 99999).map(x => s\"Five\")\n        val sixes = arr.filter(x => x <= 999999).map(x => s\"Six\")\n        val sevens = arr.filter(x => x <= 9999999).map(x => s\"Seven\")\n        val eights = arr.filter(x => x <= 999999999).map(x => s\"Eight\")\n        val nines = arr.filter(x => x <= 99999999999).map(x => s\"Nine\")\n        val result = ones + twos + threes + fours + fives + sixes + sevens + eights + nines\n        val reversed = result.reverse\n        reversed.map(x => x.toString.replaceAll(\"\\\\D\", \"\"))\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpqp4_kv46.scala:29:41 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnines\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x <= \u001b[31m99999999999\u001b[0m).map(\u001b[36mx\u001b[0m => \u001b[31ms\"Nine\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                         number too large\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpqp4_kv46.scala:30:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = ones + twos + threes + fours + fives + sixes + sevens + eights + nines\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804072
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 10)\n        val tens = arr.filter(x => x >= 10 && x < 100)\n        val hundreds = arr.filter(x => x >= 100 && x < 1000)\n        val thousands = arr.filter(x => x >= 1000 && x < 10000)\n        val tenThousands = arr.filter(x => x >= 10000 && x < 100000)\n        val oneThousands = arr.filter(x => x >= 100000 && x < 1000000)\n        val oneHundreds = arr.filter(x => x >= 1000000 && x < 10000000)\n        val oneThousandHundreds = arr.filter(x => x >= 10000000 && x < 100000000)\n        val oneThousandThousands = arr.filter(x => x >= 100000000 && x < 1000000000)\n        val oneHundredThousands = arr.filter(x => x >= 1000000000 && x < 10000000000)\n        val oneHundredThousandHundreds = arr.filter(x => x >= 10000000000 && x < 100000000000)\n        val oneHundredThousandThousands = arr.filter(x => x >= 100000000000 && x < 1000000000000)\n        val oneHundredThousandThousandHundreds = arr.filter(x => x >= 1000000000000 && x < 10000000000000)\n        val oneHundredThousandThousandThousands = arr.filter(x => x >= 10000000000000 && x < 100000000000000)\n        val oneHundredThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000 && x < 1000000000000000)\n        val oneHundredThousandThousandThousandThousands = arr.filter(x => x >= 1000000000000000 && x < 10000000000000000)\n        val oneHundredThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000000 && x < 100000000000000000)\n        val oneHundredThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x < 1000000000000000000)\n        val oneHundredThousandThousandThousandThousandThousands = arr.filter(x => x >= 1000000000000000000 && x < 10000000000000000000)\n        val oneHundredThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000000000 && x < 100000000000000000000)\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpzmt6ihxw.scala:41:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m        \u001b[33mval\u001b[0m \n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpzmt6ihxw.scala:38:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000000000\u001b[0m && x < \u001b[31m1000000000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneHundredThousandThousandThousandThousandHundreds is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneHundredThousandThousandThousandThousandHundreds\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- Error: /tmp/tmpzmt6ihxw.scala:30:73 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x < \u001b[31m10000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpzmt6ihxw.scala:31:62 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000\u001b[0m && x < \u001b[31m100000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpzmt6ihxw.scala:31:81 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousand",
      "stdout": "",
      "timestamp": 1659804036
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 10)\n        val tens = arr.filter(x => x >= 10 && x < 100)\n        val hundreds = arr.filter(x => x >= 100 && x < 1000)\n        val thousands = arr.filter(x => x >= 1000)\n        val onesAndTens = ones.zip(tens)\n        val onesAndHundreds = ones.zip(hundreds)\n        val onesAndThousands = ones.zip(thousands)\n        val onesAndOnesAndTens = ones.zip(onesAndTens)\n        val onesAndOnesAndHundreds = ones.zip(onesAndHundreds)\n        val onesAndOnesAndThousands = ones.zip(onesAndThousands)\n        val onesAndOnesAndOnesAndTens = ones.zip(onesAndOnesAndTens)\n        val onesAndOnesAndOnesAndHundreds = ones.zip(onesAndOnesAndHundreds)\n        val onesAndOnesAndOnesAndThousands = ones.zip(onesAndOnesAndThousands)\n        val onesAndOnesAndOnesAndOnesAndTens = ones.zip(onesAndOnesAndOnesAndTens)\n        val onesAndOnesAndOnesAndOnesAndHundreds = ones.zip(onesAndOnesAndOnesAndHundreds)\n        val onesAndOnesAndOnesAndOnesAndThousands = ones.zip(onesAndOnesAndOnesAndThousands)\n        val onesAndOnesAndOnesAndOnesAndOnesAndTens = ones.zip(onesAndOnesAndOnesAndOnesAndTens)\n        val onesAndOnesAndOnesAndOnesAndOnesAndHundreds = ones.zip(onesAndOnesAndOnesAndOnesAndHundreds)\n        val onesAndOnesAndOnesAndOnesAndOnesAndThousands = ones.zip(onesAndOnesAndOnesAndOnesAndThousands)\n        val onesAndOnesAndOnesAndOnesAndOnesAndOnesAndTens = ones.zip(onesAndOnesAndOnesAndOnesAndOnesAndTens)\n        val onesAndOnesAndOnesAndOnesAndOnesAndOnesAndHundreds = ones.zip(onesAndOnesAndOnesAndOnesAndOnesAndHundreds)\n        val onesAndOnesAndOnesAndOnesAndOnesAndOnesAndThousands = ones.zip(onesAndOnesAndOnesAndOnesAndOnesAndThousands)\n        val onesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndTens = ones.zip(onesAndOnesAndOnesAndOnesAndOnesAndOnesAndTens)\n        \n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprv3d2zxl.scala:45:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659804019
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x <= 9).map(x => s\"One\")\n        val twos = arr.filter(x => x <= 99).map(x => s\"Two\")\n        val threes = arr.filter(x => x <= 999).map(x => s\"Three\")\n        val fours = arr.filter(x => x <= 9999).map(x => s\"Four\")\n        val fives = arr.filter(x => x <= 99999).map(x => s\"Five\")\n        val sixes = arr.filter(x => x <= 999999).map(x => s\"Six\")\n        val sevens = arr.filter(x => x <= 9999999).map(x => s\"Seven\")\n        val eights = arr.filter(x => x <= 999999999).map(x => s\"Eight\")\n        val nines = arr.filter(x => x <= 99999999999).map(x => s\"Nine\")\n        val result = ones + twos + threes + fours + fives + sixes + sevens + eights + nines\n        val reversed = result.reverse\n        val replaced = reversed.map(x => x.toString.replaceAll(\"\\\\D\", \"\"))\n        val final = replaced.filter(x => x != \"\")\n        final.toList\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmp31oemsh9.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[33mfinal\u001b[0m = replaced.filter(x => x != \u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E088] Syntax Error: /tmp/tmp31oemsh9.scala:34:13 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mfinal\u001b[0m.toList\n\u001b[31m\u001b[31m   |\u001b[0m             ^\u001b[0m\n\u001b[31m   |\u001b[0m             Expected start of definition\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmp31oemsh9.scala:29:41 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnines\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x <= \u001b[31m99999999999\u001b[0m).map(\u001b[36mx\u001b[0m => \u001b[31ms\"Nine\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                         number too large\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp31oemsh9.scala:30:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = ones + twos + threes + fours + fives + sixes + sevens + eights + nines\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[String], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp31oemsh9.scala:35:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when",
      "stdout": "",
      "timestamp": 1659804072
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val one = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val two = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val three = List(\"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\")\n        val four = List(\"TwentyFour\", \"ThirtyFour\", \"FortyFour\", \"FiftyFour\", \"SixtyFour\", \"SeventyFour\", \"EightyFour\", \"NinetyFour\")\n        val five = List(\"FiftyFive\", \"SixtyFive\", \"SeventyFive\", \"EightyFive\", \"NinetyFive\")\n        val six = List(\"Sixty\", \"Sixty\", \"Sixty\", \"Sixty\", \"Sixty\", \"Sixty\", \"Sixty\", \"Sixty\")\n        val seven = List(\"SeventySeven\", \"SeventySeven\", \"SeventySeven\", \"SeventySeven\", \"SeventySeven\", \"SeventySeven\", \"SeventySeven\", \"SeventySeven\")\n        val eight = List(\"EightyEight\", \"EightyEight\", \"EightyEight\", \"EightyEight\", \"EightyEight\", \"EightyEight\", \"EightyEight\", \"EightyEight\", \"EightyEight\")\n        val nine = List(\"NinetyNine\", \"NinetyNine\", \"NinetyNine\", \"NinetyNine\", \"NinetyNine\", \"NinetyNine\", \"NinetyNine\", \"NinetyNine\", \"NinetyNine\")\n        val ten = List(\"Ten\", \"Ten\", \"Ten\", \"Ten\", \"Ten\", \"Ten\", \"Ten\", \"Ten\", \"Ten\")\n        val eleven = List(\"Eleven\", \"Eleven\", \"Eleven\", \"Eleven\", \"Eleven\", \"Eleven\", \"Eleven\", \"Eleven\", \"Eleven\", \"Eleven\")\n        val twelve = List(\"Twelve\", \"Twelve\", \"Twelve\", \"Twelve\", \"Twelve\", \"Twelve\", \"Twelve\", \"Twelve\", \"Twelve\")\n        val thirteen = List(\"Thirteen\", \"Thirteen\", \"Thirteen\", \"\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp_qd7n4_c.scala:33:64 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mthirteen\u001b[0m = List(\u001b[31m\"Thirteen\"\u001b[0m, \u001b[31m\"Thirteen\"\u001b[0m, \u001b[31m\"Thirteen\"\u001b[0m, \"\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 unclosed string literal\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_qd7n4_c.scala:34:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804070
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val one = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val ten = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val hundred = List(\"Hundred\", \"Thousand\", \"Million\", \"Billion\")\n        val thousand = List(\"Thousand\", \"Million\", \"Billion\")\n        val million = List(\"Million\", \"Billion\")\n        val billion = List(\"Billion\")\n        val million = List(\"Million\", \"Billion\")\n        val billion = List(\"Billion\")\n        val million = List(\"Million\", \"Billion\")\n        val billion = List(\"Billion\")\n        val million = List(\"Million\", \"Billion\")\n        val billion = List(\"Billion\")\n        val million = List(\"Million\", \"Billion\")\n        val billion = List(\"Billion\")\n        val million = List(\"Million\", \"Billion\")\n        val billion = List(\"Billion\")\n        val million = List(\"Million\", \"Billion\")\n        val billion = List(\"Billion\")\n        val million = List(\"Million\", \"Billion\")\n        val billion = List(\"Billion\")\n        val million = List(\"Million\", \"Billion\")\n        val billion = List(\"Billion\")\n        val million = List(\"Million\", \"Billion\")\n        val billion = List(\"Billion\")\n        val million = List(\"Million\", \"Billion\")\n        val billion = List(\"Billion\")\n        val million = List(\"Million\", \"Billion\")\n        val billion = List(\"Billion\")\n        val million = List(\"Million\", \"Billion\")\n        val billion = List(\"Billion\")\n        val million = List(\"Million\", \"Billion\")\n        val billion = List(\"Billion\")\n        val million = List(\"Million\", \"Billion\")\n        val billion = List(\"Billion\")\n        val million = List(\"Million\", \"Billi\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpov3sg_72.scala:55:38 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m55 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmillion\u001b[0m = List(\u001b[31m\"Million\"\u001b[0m, \"Billi\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                                      unclosed string literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmpov3sg_72.scala:57:34 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 end of statement expected but '=' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpov3sg_72.scala:27:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmillion\u001b[0m = List(\u001b[31m\"Million\"\u001b[0m, \u001b[31m\"Billion\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmillion is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmillion\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpov3sg_72.scala:28:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mbillion\u001b[0m = List(\u001b[31m\"Billion\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mbillion is already defined as \u001b[33mvalue\u001b[0m \u001b[35mbillion\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpov3sg_72.scala:29:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmillion\u001b[0m = List(\u001b[31m\"Million\"\u001b[0m, \u001b[31m\"Billion\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmillion is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmillion\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /t",
      "stdout": "",
      "timestamp": 1659804071
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1 && x <= 9).toList\n        val tens = arr.filter(x => x >= 10 && x <= 99).toList\n        val hundreds = arr.filter(x => x >= 100 && x <= 999).toList\n        val thousands = arr.filter(x => x >= 1000 && x <= 9999).toList\n        val tenThousands = arr.filter(x => x >= 10000 && x <= 99999).toList\n        val oneThousands = arr.filter(x => x >= 100000 && x <= 999999).toList\n        val oneHundreds = arr.filter(x => x >= 1000000 && x <= 999999999).toList\n        val oneThousandHundreds = arr.filter(x => x >= 1000000000 && x <= 99999999999).toList\n        val oneThousandThousandHundreds = arr.filter(x => x >= 100000000000 && x <= 999999999999).toList\n        val oneThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000 && x <= 999999999999999).toList\n        val oneThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000 && x <= 9999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000000 && x <= 99999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 9999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 99999999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThous\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjy1bxbxh.scala:38:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpjy1bxbxh.scala:28:74 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x <= \u001b[31m99999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpjy1bxbxh.scala:29:63 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000\u001b[0m && x <= \u001b[31m999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpjy1bxbxh.scala:29:84 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000\u001b[0m && x <= \u001b[31m999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                    ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpjy1bxbxh.scala:30:71 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000\u001b[0m && x <= \u001b[31m999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                       ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpjy1b",
      "stdout": "",
      "timestamp": 1659804006
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x % 10 == 1)\n        val tens = arr.filter(x => x % 10 == 0)\n        val tensReversed = tens.reverse\n        val onesReversed = ones.reverse\n        val onesReversedStrings = onesReversed.map(x => onesReversedString(x))\n        val tensReversedStrings = tensReversed.map(x => tensReversedString(x))\n        val result = onesReversedStrings.zip(tensReversedStrings).map(x => x.mkString(\"\"))\n        result.filter(x => x.length > 0).map(x => onesReversedString(x))\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm93p6oef.scala:25:56 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesReversedStrings\u001b[0m = onesReversed.map(\u001b[36mx\u001b[0m => onesReversedString(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                                        ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: onesReversedString\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm93p6oef.scala:26:56 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtensReversedStrings\u001b[0m = tensReversed.map(\u001b[36mx\u001b[0m => tensReversedString(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                                        ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: tensReversedString\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpm93p6oef.scala:27:77 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = onesReversedStrings.zip(tensReversedStrings).map(\u001b[36mx\u001b[0m => x.mkString(\u001b[31m\"\"\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                           ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue mkString is not a member of (Nothing, Nothing) - did you mean x.toString?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpm93p6oef.scala:28:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        result.filter(\u001b[36mx\u001b[0m => x.length > \u001b[31m0\u001b[0m).map(\u001b[36mx\u001b[0m => onesReversedString(x))\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue length is not a member of Nothing, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.iterator as",
      "stdout": "",
      "timestamp": 1659804073
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(_ < 10)\n        val tens = arr.filter(_ >= 10 && _ < 100)\n        val hundreds = arr.filter(_ >= 100)\n        val reversed = ones + tens + hundreds.reverse\n        reversed.map(_.toString).filter(_.nonEmpty).map(name => s\"$name\")\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E086] Syntax Error: /tmp/tmptgw4dfer.scala:22:30 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtens\u001b[0m = arr.filter(_ >= \u001b[31m10\u001b[0m && _ < \u001b[31m100\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              Wrong number of parameters, expected: 1\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmptgw4dfer.scala:24:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mreversed\u001b[0m = ones + tens + hundreds.reverse\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804073
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 10)\n        val tens = arr.filter(x => x >= 10 && x < 100)\n        val hundreds = arr.filter(x => x >= 100 && x < 1000)\n        val thousands = arr.filter(x => x >= 1000 && x < 10000)\n        val tenThousands = arr.filter(x => x >= 10000 && x < 100000)\n        val oneThousands = arr.filter(x => x >= 100000 && x < 1000000)\n        val oneHundreds = arr.filter(x => x >= 1000000 && x < 10000000)\n        val oneThousandThousands = arr.filter(x => x >= 10000000 && x < 100000000)\n        val oneHundredThousands = arr.filter(x => x >= 100000000 && x < 1000000000)\n        val oneThousandThousandThousands = arr.filter(x => x >= 1000000000 && x < 10000000000)\n        val oneHundredThousandThousands = arr.filter(x => x >= 10000000000 && x < 100000000000)\n        val oneThousandThousandThousandThousands = arr.filter(x => x >= 100000000000 && x < 1000000000000)\n        val oneHundredThousandThousandThousands = arr.filter(x => x >= 1000000000000 && x < 10000000000000)\n        val oneThousandThousandThousandThousands = arr.filter(x => x >= 10000000000000 && x < 100000000000000)\n        val oneHundredThousandThousandThousands = arr.filter(x => x >= 100000000000000 && x < 1000000000000000)\n        val oneThousandThousandThousandThousands = arr.filter(x => x >= 1000000000000000 && x < 10000000000000000)\n        val oneHundredThousandThousandThousands = arr.filter(x => x >= 10000000000000000 && x < 100000000000000000)\n        val oneThousandThousandThousandThousands = arr.filter(x => x >= 100000000000000000 && x < 1000000000000000000)\n        val oneHundredThousandThousandThousands = arr.filter(x => x >= 1000000000000000000 && x < 10000000000000000000)\n        val oneThousandThousandThousandThousands = arr.filter(x => x >= 10000000000000000000 && x < 100000000000000000000)\n        val oneHundredThousandThousandThousandThousands = arr.filter(x => x >= 100000000000000000000 && \n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp9asz0nrp.scala:41:103 --------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000000000000\u001b[0m && \n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp9asz0nrp.scala:34:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000000\u001b[0m && x < \u001b[31m100000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp9asz0nrp.scala:35:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000000\u001b[0m && x < \u001b[31m1000000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneHundredThousandThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneHundredThousandThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp9asz0nrp.scala:36:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousands\u001b[0m = ",
      "stdout": "",
      "timestamp": 1659804075
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(_ <= 9).sortBy(_ - 1).reverse\n        val tens = arr.filter(_ <= 99).sortBy(_ - 10).reverse\n        val hundreds = arr.filter(_ <= 999).sortBy(_ - 100).reverse\n        val thousands = arr.filter(_ <= 9999).sortBy(_ - 1000).reverse\n        val tenThousands = arr.filter(_ <= 999999).sortBy(_ - 10000).reverse\n        val oneThousands = arr.filter(_ <= 9999999).sortBy(_ - 100000).reverse\n        val oneHundreds = arr.filter(_ <= 999999999).sortBy(_ - 1000000).reverse\n        val oneThousandThousands = arr.filter(_ <= 99999999999).sortBy(_ - 10000000).reverse\n        val oneHundredThousands = arr.filter(_ <= 999999999999).sortBy(_ - 10000000).reverse\n        val oneHundredThousandThousands = arr.filter(_ <= 999999999999999).sortBy(_ - 100000000).reverse\n        val oneHundredThousandThousands = arr.filter(_ <= 9999999999999999).sortBy(_ - 1000000000).reverse\n        val oneHundredThousandThousands = arr.filter(_ <= 9999999999999999999).sortBy(_ - 10000000000).reverse\n        val oneHundredThousandThousands = arr.filter(_ <= 99999999999999999999).sortBy(_ - 100000000000).reverse\n        val oneHundredThousandThousands = arr.filter(_ <= 99999999999999999999999).sortBy(_ - 1000000000000).reverse\n        val oneHundredThousandThousands = arr.filter(_ <= 999999999999999999999999).sortBy(_ - 10000000000000).reverse\n        val oneHundredThousandThousands = arr.filter(_ <= 999999999999999999999999999).sortBy(_ - 100000000000000).reverse\n        val oneHundredThousandThousands = arr.filter(_ <= 9999999999999999999999999999).sortBy(_ - 1000000000000000).reverse\n        val oneHundredThousandThousands = arr.filter(_ <= 9999999999999999999999999999999).sortBy(_ - 10000000000000000).reverse\n        val oneHundredThousandThousands = arr.filter(_ <= 9999999999999999\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpvwljaakg.scala:40:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpvwljaakg.scala:31:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m9999999999999999\u001b[0m).sortBy(_ - \u001b[31m1000000000\u001b[0m).reverse\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneHundredThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneHundredThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpvwljaakg.scala:32:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m9999999999999999999\u001b[0m).sortBy(_ - \u001b[31m10000000000\u001b[0m).reverse\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneHundredThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneHundredThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpvwljaakg.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m99999999999999999999\u001b[0m).sortBy(_ - \u001b[31m100000000000\u001b[0m).reverse\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneHundredThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneHundredThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of topleve",
      "stdout": "",
      "timestamp": 1659804032
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val list = arr.toList\n        val sorted = list.sortWith((x, y) => x < y)\n        val reversed = sorted.reverse\n        val result = reversed.map(x => if (x < 10) \"One\" else if (x < 100) \"Two\" else if (x < 1000) \"Three\" else \"Four\" else if (x < 10000) \"Five\" else \"Six\" else if (x < 100000) \"Seven\" else \"Eight\" else \"Nine\")\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmppa2ki8z0.scala:24:120 --------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = reversed.map(\u001b[36mx\u001b[0m => \u001b[33mif\u001b[0m (x < \u001b[31m10\u001b[0m) \u001b[31m\"One\"\u001b[0m \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (x < \u001b[31m100\u001b[0m) \u001b[31m\"Two\"\u001b[0m \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (x < \u001b[31m1000\u001b[0m) \u001b[31m\"Three\"\u001b[0m \u001b[33melse\u001b[0m \u001b[31m\"Four\"\u001b[0m \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (x < \u001b[31m10000\u001b[0m) \u001b[31m\"Five\"\u001b[0m \u001b[33melse\u001b[0m \u001b[31m\"Six\"\u001b[0m \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (x < \u001b[31m100000\u001b[0m) \u001b[31m\"Seven\"\u001b[0m \u001b[33melse\u001b[0m \u001b[31m\"Eight\"\u001b[0m \u001b[33melse\u001b[0m \u001b[31m\"Nine\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                        ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          ')' expected, but 'else' found\n1 error found\n",
      "stdout": "",
      "timestamp": 1659804070
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x % 10 == 1).sorted\n        val twos = arr.filter(x => x % 10 == 2).sorted\n        val threes = arr.filter(x => x % 10 == 3).sorted\n        val fours = arr.filter(x => x % 10 == 4).sorted\n        val fives = arr.filter(x => x % 10 == 5).sorted\n        val sixes = arr.filter(x => x % 10 == 6).sorted\n        val sevens = arr.filter(x => x % 10 == 7).sorted\n        val eights = arr.filter(x => x % 10 == 8).sorted\n        val nines = arr.filter(x => x % 10 == 9).sorted\n        val onesReversed = ones.reverse\n        val twosReversed = twos.reverse\n        val threesReversed = threes.reverse\n        val foursReversed = fours.reverse\n        val fivesReversed = fives.reverse\n        val sixesReversed = sixes.reverse\n        val sevensReversed = sevens.reverse\n        val eightsReversed = eights.reverse\n        val ninesReversed = nines.reverse\n        val onesReversedString = onesReversed.map(x => One(x))\n        val twosReversedString = twosReversed.map(x => Two(x))\n        val threesReversedString = threesReversed.map(x => Three(x))\n        val foursReversedString = foursReversed.map(x => Four(x))\n        val fivesReversedString = fivesReversed.map(x => Five(x))\n        val sixesReversedString = sixesReversed.map(x => Six(x))\n        val sevensReversedString = sevensReversed.map(x => Seven(x))\n        val eightsReversedString = eightsReversed.map(x => Eight(x))\n        val ninesReversedString = ninesReversed.map(x => Nine(x))\n        val onesReversedStringList = onesReversedString.toList\n        val twosReversedStringList = twosReversedString.toList\n        val threesReversedStringList = threesReversedString.toList\n        val foursReversedStringList = foursReversedString.toList\n        val fivesReversedStringList = fivesReversedString.toList\n        val sixesReversedStringList = sixesReversedString.toList\n        val sevensReversedStringList = sevens\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2w_y2h4j.scala:39:55 ------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesReversedString\u001b[0m = onesReversed.map(\u001b[36mx\u001b[0m => One(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                       Not found: One\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2w_y2h4j.scala:40:55 ------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtwosReversedString\u001b[0m = twosReversed.map(\u001b[36mx\u001b[0m => Two(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                       Not found: Two\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2w_y2h4j.scala:41:59 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mthreesReversedString\u001b[0m = threesReversed.map(\u001b[36mx\u001b[0m => Three(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                                           ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        Not found: Three\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2w_y2h4j.scala:42:57 ------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfoursReversedString\u001b[0m = foursReversed.map(\u001b[36mx\u001b[0m => Four(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                                         ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                         Not found: Four\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2w_y2h4j.scala:43:57 ------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfivesReversedString\u001b[0m = fivesReversed.map(\u001b[36mx\u001b[0m => Five(x))\n\u001b[3",
      "stdout": "",
      "timestamp": 1659804074
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 10)\n        val tens = arr.filter(x => x >= 10 && x < 100)\n        val hundreds = arr.filter(x => x >= 100)\n        val tensAndHundreds = tens.zip(hundreds)\n        val onesAndTens = ones.zip(tens)\n        val onesAndHundreds = ones.zip(hundreds)\n        val onesAndTensAndHundreds = ones.zip(tensAndHundreds)\n        val onesAndTensAndHundredsAndTens = ones.zip(tensAndHundreds).zip(tens)\n        val onesAndTensAndHundredsAndTensAndHundreds = ones.zip(tensAndHundreds).zip(tens).zip(hundreds)\n        val onesAndTensAndHundredsAndTensAndHundredsAndOnes = ones.zip(tensAndHundreds).zip(tens).zip(hundreds).zip(ones)\n        val onesAndTensAndHundredsAndTensAndHundredsAndOnesAndTens = ones.zip(tensAndHundreds).zip(tens).zip(hundreds).zip(ones).zip(tens)\n        val onesAndTensAndHundredsAndTensAndHundredsAndOnesAndTensAndHundreds = ones.zip(tensAndHundreds).zip(tens).zip(hundreds).zip(ones).zip(tens).zip(hundreds)\n        val onesAndTensAndHundredsAndTensAndHundredsAndOnesAndTensAndHundredsAndOnes = ones.zip(tensAndHundreds).zip(tens).zip(hundreds).zip(ones).zip(tens).zip(hundreds).zip(ones)\n        val onesAndTensAndHundredsAndTensAndHundredsAndOnesAndTensAndHundredsAndOnesAndTens = ones.zip(tensAndHundreds).zip(tens).zip(hundreds).zip(ones).zip(tens).zip(hundreds).zip(ones).zip(tens)\n        val onesAndTensAndHundredsAndTensAndHundredsAndOnesAndTensAndHundredsAndOnesAndHundreds = ones.zip(tensAndHundreds).zip(tens).zip(hundreds).zip(ones).zip(tens).zip(hundreds).zip(ones).zip(hundreds)\n        val onesAndTensAndHundredsAndTensAndHundredsAndOnesAndTensAndHundredsAndOnesAndHundredsAndOnes = ones.zip(tensAndHundreds).zip(tens).zip(hundreds).zip(ones).zip(tens).\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpl7uff1c9.scala:37:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpl7uff1c9.scala:37:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804076
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 10)\n        val tens = arr.filter(x => x >= 10 && x < 100)\n        val hundreds = arr.filter(x => x >= 100 && x < 1000)\n        val thousands = arr.filter(x => x >= 1000 && x < 10000)\n        val tenThousands = arr.filter(x => x >= 10000 && x < 100000)\n        val oneThousands = arr.filter(x => x >= 100000 && x < 1000000)\n        val tenMillions = arr.filter(x => x >= 1000000 && x < 10000000)\n        val oneMillions = arr.filter(x => x >= 10000000 && x < 100000000)\n        val tenBillions = arr.filter(x => x >= 100000000 && x < 1000000000)\n        val oneBillions = arr.filter(x => x >= 1000000000 && x < 10000000000)\n        val tenTrillions = arr.filter(x => x >= 10000000000 && x < 100000000000)\n        val oneTrillions = arr.filter(x => x >= 100000000000 && x < 1000000000000)\n        val tenQuadrillions = arr.filter(x => x >= 1000000000000 && x < 10000000000000)\n        val oneQuadrillions = arr.filter(x => x >= 10000000000000 && x < 100000000000000)\n        val tenQuintillions = arr.filter(x => x >= 100000000000000 && x < 1000000000000000)\n        val oneQuintillions = arr.filter(x => x >= 1000000000000000 && x < 10000000000000000)\n        val tenSextillions = arr.filter(x => x >= 10000000000000000 && x < 100000000000000000)\n        val oneSextillions = arr.filter(x => x >= 100000000000000000 && x < 1000000000000000000)\n        val tenSeptillions = arr.filter(x => x >= 1000000000000000000 && x < 10000000000000000000)\n        val oneSeptillions = arr.filter(x => x >= 10000000000000000000 && x < 100000000000000000000)\n        val tenOctillions = arr.filter(x => x >= 100000000000000000000 && x < 1000000000000000000000)\n        val oneOctillions = arr.filter(x => x >= 100000000000000000000 && x < 10000000000000000000000)\n        val tenNonillions = arr.filter(x => x >= 10000000000000000000000 && x < 100000000000000000000000)\n        val oneNonillions = arr.filter(x => x >= 10000000000000000000000 && x < 1000000000000000000000000)\n        val tenDecillions = arr.filter(x => x >= 1000000000000000000000000 && x < 1000000000000000000\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp0vhsb7ue.scala:46:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmp0vhsb7ue.scala:30:65 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneBillions\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x < \u001b[31m10000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                 ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp0vhsb7ue.scala:31:48 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtenTrillions\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000\u001b[0m && x < \u001b[31m100000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp0vhsb7ue.scala:31:67 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtenTrillions\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000\u001b[0m && x < \u001b[31m100000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                   ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp0vhsb7ue.scala:32:48 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneTrillions\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000\u001b[0m && x < \u001b[31m1000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp0vhsb7ue.scala:32:68 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneTrillions\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000\u001b[0m && ",
      "stdout": "",
      "timestamp": 1659804066
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1 && x <= 9).toList\n        val tens = arr.filter(x => x >= 10 && x <= 99).toList\n        val hundreds = arr.filter(x => x >= 100 && x <= 999).toList\n        val thousands = arr.filter(x => x >= 1000 && x <= 9999).toList\n        val tenThousands = arr.filter(x => x >= 10000 && x <= 99999).toList\n        val oneThousands = arr.filter(x => x >= 100000 && x <= 999999).toList\n        val oneHundreds = arr.filter(x => x >= 1000000 && x <= 999999999).toList\n        val oneThousandThousands = arr.filter(x => x >= 10000000 && x <= 99999999999).toList\n        val oneHundredThousands = arr.filter(x => x >= 1000000000 && x <= 999999999999).toList\n        val oneThousandThousandThousands = arr.filter(x => x >= 1000000000 && x <= 99999999999).toList\n        val oneHundredThousandThousands = arr.filter(x => x >= 10000000000 && x <= 99999999999).toList\n        val oneHundredThousandThousandThousands = arr.filter(x => x >= 10000000000 && x <= 99999999999).toList\n        val oneHundredThousandThousandThousands = arr.filter(x => x >= 10000000000 && x <= 99999999999).toList\n        val oneHundredThousandThousandThousandThousands = arr.filter(x => x >= 10000000000 && x <= 99999999999).toList\n        val oneHundredThousandThousandThousandThousandThousands = arr.filter(x => x >= 10000000000 && x <= 99999999999).toList\n        val oneHundredThousandThousandThousandThousandThousandThousands = arr.filter(x => x >= 10000000000 && x <= 99999999999).toList\n        val oneHundredThousandThousandThousandThousandThousandThousandThousands = arr.filter(x => x >= 10000000000 && x <= 99999999999).toList\n        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousands = arr.filter(x => x >= 10000000000 && x <= 99999999999).toList\n        val oneHundredThousandThousandThousandThousandThousand\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp8mny0ij7.scala:40:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp8mny0ij7.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000\u001b[0m && x <= \u001b[31m99999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneHundredThousandThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneHundredThousandThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- Error: /tmp/tmp8mny0ij7.scala:28:73 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000\u001b[0m && x <= \u001b[31m99999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp8mny0ij7.scala:29:74 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x <= \u001b[31m999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp8mny0ij7.scala:30:83 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x <= \u001b[31m99999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                       ",
      "stdout": "",
      "timestamp": 1659804077
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 10)\n        val tens = arr.filter(x => x >= 10 && x < 100)\n        val hundreds = arr.filter(x => x >= 100)\n        val hundredsReversed = hundreds.reverse\n        val tensReversed = tens.reverse\n        val onesReversed = ones.reverse\n        val onesReversedString = onesReversed.map(x => One(x))\n        val tensReversedString = tensReversed.map(x => Two(x))\n        val hundredsReversedString = hundredsReversed.map(x => Three(x))\n        val hundredsReversedString2 = hundredsReversedString.reverse\n        val hundredsReversedString3 = hundredsReversedString2.reverse\n        val hundredsReversedString4 = hundredsReversedString3.reverse\n        val hundredsReversedString5 = hundredsReversedString4.reverse\n        val hundredsReversedString6 = hundredsReversedString5.reverse\n        val hundredsReversedString7 = hundredsReversedString6.reverse\n        val hundredsReversedString8 = hundredsReversedString7.reverse\n        val hundredsReversedString9 = hundredsReversedString8.reverse\n        val hundredsReversedString10 = hundredsReversedString9.reverse\n        val hundredsReversedString11 = hundredsReversedString10.reverse\n        val hundredsReversedString12 = hundredsReversedString11.reverse\n        val hundredsReversedString13 = hundredsReversedString12.reverse\n        val hundredsReversedString14 = hundredsReversedString13.reverse\n        val hundredsReversedString15 = hundredsReversedString14.reverse\n        val hundredsReversedString16 = hundredsReversedString15.reverse\n        val hundredsReversedString17 = hundredsReversedString16.reverse\n        val hundredsReversedString18 = hundredsReversedString17.reverse\n        val hundredsReversedString19 = hundredsReversedString18.reverse\n        val hundredsReversedString20 = hundredsReversedString19.reverse\n        val hundredsReversedString21 = hundredsReversedString20.reverse\n        val hundredsReversedString22 = hundredsReversedString21.reverse\n        val hundred\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp2b_na6du.scala:52:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2b_na6du.scala:27:55 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesReversedString\u001b[0m = onesReversed.map(\u001b[36mx\u001b[0m => One(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                       Not found: One\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2b_na6du.scala:28:55 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtensReversedString\u001b[0m = tensReversed.map(\u001b[36mx\u001b[0m => Two(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                       Not found: Two\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2b_na6du.scala:29:63 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhundredsReversedString\u001b[0m = hundredsReversed.map(\u001b[36mx\u001b[0m => Three(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        Not found: Three\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2b_na6du.scala:52:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "stdout": "",
      "timestamp": 1659804077
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(_ <= 9).sorted\n        val tens = arr.filter(_ <= 99).sorted\n        val hundreds = arr.filter(_ <= 999).sorted\n        val thousands = arr.filter(_ <= 9999).sorted\n        val tenThousands = arr.filter(_ <= 999999).sorted\n        val oneThousands = arr.filter(_ <= 9999999).sorted\n        val oneHundreds = arr.filter(_ <= 999999999).sorted\n        val oneThousandThousands = arr.filter(_ <= 99999999999).sorted\n        val oneHundredThousands = arr.filter(_ <= 999999999999).sorted\n        val oneHundredThousandThousands = arr.filter(_ <= 999999999999999).sorted\n        val oneHundredThousandThousandThousands = arr.filter(_ <= 999999999999999999).sorted\n        val oneHundredThousandThousandThousandThousands = arr.filter(_ <= 999999999999999999999).sorted\n        val oneHundredThousandThousandThousandThousandThousands = arr.filter(_ <= 9999999999999999999998).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 99999999999999999999987).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 999999999999999999999876).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 9999999999999999999998765).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 99999999999999999999987654).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 999999999999999999999876543).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 9999999999999999999998765432).sorted\n        val oneHundredThousandThousandThousand\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp0f4t7f25.scala:41:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp0f4t7f25.scala:35:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousandThousandThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m999999999999999999999876\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneHundredThousandThousandThousandThousandThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneHundredThousandThousandThousandThousandThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp0f4t7f25.scala:37:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousandThousandThousandThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m99999999999999999999987654\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneHundredThousandThousandThousandThousandThousandThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneHundredThousandThousandThousandThousandThousandThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp0f4t7f25.scala:39:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousandThousandThousandThousandThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m9999999999999999999998765432\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^",
      "stdout": "",
      "timestamp": 1659804042
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val list = arr.toList\n        val sorted = list.sortWith(_.compareTo(_) < 0)\n        val reversed = sorted.reverse\n        val result = reversed.map(i => if (i < 10) \"One\" else if (i < 20) \"Two\" else if (i < 30) \"Three\" else if (i < 40) \"Four\" else if (i < 50) \"Five\" else if (i < 60) \"Six\" else if (i < 70) \"Seven\" else \"Eight\" else \"Nine\")\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpk6hq7917.scala:24:214 --------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = reversed.map(\u001b[36mi\u001b[0m => \u001b[33mif\u001b[0m (i < \u001b[31m10\u001b[0m) \u001b[31m\"One\"\u001b[0m \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (i < \u001b[31m20\u001b[0m) \u001b[31m\"Two\"\u001b[0m \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (i < \u001b[31m30\u001b[0m) \u001b[31m\"Three\"\u001b[0m \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (i < \u001b[31m40\u001b[0m) \u001b[31m\"Four\"\u001b[0m \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (i < \u001b[31m50\u001b[0m) \u001b[31m\"Five\"\u001b[0m \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (i < \u001b[31m60\u001b[0m) \u001b[31m\"Six\"\u001b[0m \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (i < \u001b[31m70\u001b[0m) \u001b[31m\"Seven\"\u001b[0m \u001b[33melse\u001b[0m \u001b[31m\"Eight\"\u001b[0m \u001b[33melse\u001b[0m \u001b[31m\"Nine\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                      ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          ')' expected, but 'else' found\n1 error found\n",
      "stdout": "",
      "timestamp": 1659804075
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 10)\n        val tens = arr.filter(x => x >= 10 && x < 100)\n        val hundreds = arr.filter(x => x >= 100 && x < 1000)\n        val thousands = arr.filter(x => x >= 1000)\n        val onesAndTens = ones.zip(tens)\n        val onesAndHundreds = ones.zip(hundreds)\n        val onesAndThousands = ones.zip(thousands)\n        val onesAndOnesAndTens = ones.zip(onesAndTens)\n        val onesAndOnesAndHundreds = ones.zip(onesAndHundreds)\n        val onesAndOnesAndThousands = ones.zip(onesAndThousands)\n        val onesAndOnesAndOnesAndTens = ones.zip(onesAndOnesAndTens)\n        val onesAndOnesAndOnesAndHundreds = ones.zip(onesAndOnesAndHundreds)\n        val onesAndOnesAndOnesAndThousands = ones.zip(onesAndOnesAndThousands)\n        val onesAndOnesAndOnesAndOnesAndTens = ones.zip(onesAndOnesAndOnesAndTens)\n        val onesAndOnesAndOnesAndOnesAndHundreds = ones.zip(onesAndOnesAndOnesAndHundreds)\n        val onesAndOnesAndOnesAndOnesAndThousands = ones.zip(onesAndOnesAndOnesAndThousands)\n        val onesAndOnesAndOnesAndOnesAndOnesAndTens = ones.zip(onesAndOnesAndOnesAndOnesAndTens)\n        val onesAndOnesAndOnesAndOnesAndOnesAndHundreds = ones.zip(onesAndOnesAndOnesAndOnesAndHundreds)\n        val onesAndOnesAndOnesAndOnesAndOnesAndThousands = ones.zip(onesAndOnesAndOnesAndOnesAndThousands)\n        val onesAndOnesAndOnesAndOnesAndOnesAndOnesAndTens = ones.zip(onesAndOnesAndOnesAndOnesAndOnesAndTens)\n        val onesAndOnesAndOnesAndOnesAndOnesAndOnesAndHundreds = ones.zip(onesAndOnesAndOnesAndOnesAndOnesAndHundreds)\n        val onesAndOnesAndOnesAndOnesAndOnesAndOnesAndThousands = ones.zip(onesAndOnesAndOnesAndOnesAndOnesAndThousands)\n        val onesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndTens = ones.zip(onesAndOnesAndOnesAndOnesAndOnesAndOnesAndTens)\n        \n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprv3d2zxl.scala:45:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659804019
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 10).map(x => s\"One\")\n        val tens = arr.filter(x => x >= 10 && x < 100).map(x => s\"Ten\")\n        val hundreds = arr.filter(x => x >= 100).map(x => s\"Hundred\")\n        val thousands = arr.filter(x => x >= 1000 && x < 10000).map(x => s\"Thousand\")\n        val millions = arr.filter(x => x >= 10000 && x < 100000).map(x => s\"Million\")\n        val billions = arr.filter(x => x >= 100000 && x < 1000000).map(x => s\"Billion\")\n        val trillions = arr.filter(x => x >= 1000000 && x < 10000000).map(x => s\"Trillion\")\n        val quadrillions = arr.filter(x => x >= 10000000 && x < 100000000).map(x => s\"Quadrillion\")\n        val quintillions = arr.filter(x => x >= 100000000 && x < 1000000000).map(x => s\"Quintillion\")\n        val sextillions = arr.filter(x => x >= 1000000000 && x < 10000000000).map(x => s\"Sextillion\")\n        val septillions = arr.filter(x => x >= 10000000000 && x < 100000000000).map(x => s\"Septillion\")\n        val octillions = arr.filter(x => x >= 100000000000 && x < 1000000000000).map(x => s\"Octillion\")\n        val nonillions = arr.filter(x => x >= 1000000000000 && x < 10000000000000).map(x => s\"Nonillion\")\n        val decillions = arr.filter(x => x >= 10000000000000 && x < 100000000000000).map(x => s\"Decillion\")\n        val undecillions = arr.filter(x => x >= 100000000000000 && x < 1000000000000000).map(x => s\"Undecillion\")\n        val duodecillions = arr.filter(x => x >= 1000000000000000 && x < 10000000000000000).map(x => s\"Duodecillion\")\n        val tredecillions = arr.filter(x => x >= 10000000000000000 && x < 100000000000000000).map(x => s\"Tredecillion\")\n        val quattuordecillions = arr.filter(x => x >= 100000000000000000 && x < 1000000000000000000).map(x => s\"Quattuordecillion\")\n        val quindecillions = arr.filter(x => x >= 1000000000000000000\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpy8hfs34g.scala:40:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpy8hfs34g.scala:30:65 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msextillions\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x < \u001b[31m10000000000\u001b[0m).map(\u001b[36mx\u001b[0m => \u001b[31ms\"Sextillion\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                 ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpy8hfs34g.scala:31:47 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mseptillions\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000\u001b[0m && x < \u001b[31m100000000000\u001b[0m).map(\u001b[36mx\u001b[0m => \u001b[31ms\"Septillion\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                               number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpy8hfs34g.scala:31:66 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mseptillions\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000\u001b[0m && x < \u001b[31m100000000000\u001b[0m).map(\u001b[36mx\u001b[0m => \u001b[31ms\"Septillion\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpy8hfs34g.scala:32:46 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moctillions\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000\u001b[0m && x < \u001b[31m1000000000000\u001b[0m).map(\u001b[36mx\u001b[0m => \u001b[31ms\"Octillion\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                              ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpy8hfs34g.scala:32:66 -------",
      "stdout": "",
      "timestamp": 1659804079
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x <= 9 && x >= 1)\n        val tens = arr.filter(x => x <= 99 && x >= 10)\n        val hundreds = arr.filter(x => x <= 999 && x >= 100)\n        val thousands = arr.filter(x => x <= 9999 && x >= 1000)\n        val tenThousands = arr.filter(x => x <= 999999 && x >= 10000)\n        val oneThousands = arr.filter(x => x <= 9999999 && x >= 100000)\n        val oneHundreds = arr.filter(x => x <= 999999999 && x >= 1000000)\n        val oneThousandThousands = arr.filter(x => x <= 99999999999 && x >= 10000000)\n        val oneHundredThousands = arr.filter(x => x <= 999999999999 && x >= 100000000)\n        val oneThousandThousandThousands = arr.filter(x => x <= 99999999999999 && x >= 1000000000)\n        val oneHundredThousandThousands = arr.filter(x => x <= 999999999999999 && x >= 10000000000)\n        val oneThousandThousandThousandThousands = arr.filter(x => x <= 99999999999999 && x >= 100000000000)\n        val oneHundredThousandThousandThousands = arr.filter(x => x <= 999999999999999999 && x >= 1000000000000)\n        val oneThousandThousandThousandThousands = arr.filter(x => x <= 99999999999999999 && x >= 10000000000000)\n        val oneHundredThousandThousandThousandThousands = arr.filter(x => x <= 999999999999999999 && x >= 100000000000000)\n        val oneThousandThousandThousandThousandThousands = arr.filter(x => x <= 99999999999999999 && x >= 1000000000000000)\n        val oneHundredThousandThousandThousandThousands = arr.filter(x => x <= 999999999999999999 && x >= 10000000000000000)\n        val oneThousandThousandThousandThousandThousands = arr.filter(x => x <= 99999999999999999999 && x >= 100000000000000000)\n        val oneHundredThousandThousandThousandThousandThousands = arr.filter(x => x <= 999999999999999999999 && x >= 100000000000000000) \n        val oneThousandThousandThousandThousand\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmphwo_22ke.scala:41:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmphwo_22ke.scala:34:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x <= \u001b[31m99999999999999999\u001b[0m && x >= \u001b[31m10000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmphwo_22ke.scala:37:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x <= \u001b[31m999999999999999999\u001b[0m && x >= \u001b[31m10000000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneHundredThousandThousandThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneHundredThousandThousandThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmphwo_22ke.scala:38:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x <= \u001b[31m99999999999999999999\u001b[0m && x >= \u001b[31m100000000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousandThousands is already",
      "stdout": "",
      "timestamp": 1659804079
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 10)\n        val tens = arr.filter(x => x >= 10 && x < 100)\n        val hundreds = arr.filter(x => x >= 100 && x < 1000)\n        val thousands = arr.filter(x => x >= 1000)\n        val onesAndTens = ones + tens\n        val onesAndHundreds = ones + hundreds\n        val onesAndThousands = ones + thousands\n        val onesAndOnesAndTens = ones + onesAndTens\n        val onesAndOnesAndHundreds = ones + onesAndHundreds\n        val onesAndOnesAndThousands = ones + onesAndThousands\n        val onesAndOnesAndOnesAndTens = ones + onesAndOnesAndTens\n        val onesAndOnesAndOnesAndHundreds = ones + onesAndOnesAndHundreds\n        val onesAndOnesAndOnesAndThousands = ones + onesAndOnesAndThousands\n        val onesAndOnesAndOnesAndOnesAndTens = ones + onesAndOnesAndOnesAndTens\n        val onesAndOnesAndOnesAndOnesAndHundreds = ones + onesAndOnesAndOnesAndHundreds\n        val onesAndOnesAndOnesAndOnesAndThousands = ones + onesAndOnesAndOnesAndThousands\n        val onesAndOnesAndOnesAndOnesAndOnesAndTens = ones + onesAndOnesAndOnesAndOnesAndTens\n        val onesAndOnesAndOnesAndOnesAndOnesAndHundreds = ones + onesAndOnesAndOnesAndOnesAndHundreds\n        val onesAndOnesAndOnesAndOnesAndOnesAndThousands = ones + onesAndOnesAndOnesAndOnesAndThousands\n        val onesAndOnesAndOnesAndOnesAndOnesAndOnesAndTens = ones + onesAndOnesAndOnesAndOnesAndOnesAndTens\n        val onesAndOnesAndOnesAndOnesAndOnesAndOnesAndHundreds = ones + onesAndOnesAndOnesAndOnesAndOnesAndHundreds\n        val onesAndOnesAndOnesAndOnesAndOnesAndOnesAndThousands = ones + onesAndOnesAndOnesAndOnesAndOnesAndThousands\n        val onesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndTens = ones + onesAndOnesAndOnesAndOnesAndOnesAndOnesAndTens\n        \n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpoanh6f_f.scala:25:31 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesAndTens\u001b[0m = ones + tens\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpoanh6f_f.scala:26:35 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesAndHundreds\u001b[0m = ones + hundreds\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpoanh6f_f.scala:27:36 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesAndThousands\u001b[0m = ones + thousands\n\u001b[31m\u001b[31m   |\u001b[0m                               ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpoanh6f_f.scala:28:38 -----",
      "stdout": "",
      "timestamp": 1659804025
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 10)\n        val tens = arr.filter(x => x >= 10 && x < 100)\n        val hundreds = arr.filter(x => x >= 100 && x < 1000)\n        val thousands = arr.filter(x => x >= 1000)\n        val tenThousands = arr.filter(x => x >= 10000)\n        val oneThousands = arr.filter(x => x >= 100000)\n        val oneHundreds = arr.filter(x => x >= 1000000)\n        val oneThousandHundreds = arr.filter(x => x >= 10000000)\n        val oneThousandThousands = arr.filter(x => x >= 100000000)\n        val oneHundredThousands = arr.filter(x => x >= 1000000000)\n        val oneThousandHundredThousands = arr.filter(x => x >= 10000000000)\n        val oneHundredThousandHundreds = arr.filter(x => x >= 100000000000)\n        val oneHundredThousandThousandHundreds = arr.filter(x => x >= 1000000000000)\n        val oneHundredThousandHundredThousands = arr.filter(x => x >= 1000000000000)\n        val oneHundredThousandThousandHundredThousands = arr.filter(x => x >= 100000000000000)\n        val oneHundredThousandHundredThousandHundreds = arr.filter(x => x >= 100000000000000)\n        val oneHundredThousandThousandHundredThousandHundreds = arr.filter(x => x >= 10000000000000000)\n        val oneHundredThousandHundredThousandHundredThousands = arr.filter(x => x >= 10000000000000000)\n        val oneHundredThousandThousandHundredThousandHundredThousands = arr.filter(x => x >= 100000000000000000)\n        val oneHundredThousandHundredThousandHundredThousandHundreds = arr.filter(x => x >= 100000000000000000)\n        val oneHundredThousandThousandHundredThousandHundredThousandHundreds = arr.filter(x => x >= 100000000000000000)\n        val oneHundredThousandHundredThousandHundredThousandHundredThousandHundreds = arr.filter(x => x >= 100\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpyhz1s8u0.scala:43:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpyhz1s8u0.scala:31:63 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandHundredThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpyhz1s8u0.scala:32:62 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpyhz1s8u0.scala:33:70 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpyhz1s8u0.scala:34:70 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandHundredThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpyhz1s8u0.scala:35:78 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandHundredThousands\u001b[0m = arr.fi",
      "stdout": "",
      "timestamp": 1659804081
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(_ <= 9).sorted\n        val tens = arr.filter(_ <= 99).sorted\n        val hundreds = arr.filter(_ <= 999).sorted\n        val thousands = arr.filter(_ <= 9999).sorted\n        val tenThousands = arr.filter(_ <= 999999).sorted\n        val oneThousands = arr.filter(_ <= 9999999).sorted\n        val oneHundreds = arr.filter(_ <= 999999999).sorted\n        val oneThousandHundreds = arr.filter(_ <= 99999999999).sorted\n        val oneThousandThousandHundreds = arr.filter(_ <= 999999999).sorted\n        val oneHundredThousandHundreds = arr.filter(_ <= 99999999999).sorted\n        val oneHundredThousandThousandHundreds = arr.filter(_ <= 99999999999).sorted\n        val oneThousandThousandThousandHundreds = arr.filter(_ <= 99999999999).sorted\n        val oneHundredThousandThousandThousandHundreds = arr.filter(_ <= 99999999999).sorted\n        val oneHundredThousandThousandThousandHundreds = arr.filter(_ <= 99999999999).sorted\n        val oneThousandThousandThousandThousandHundreds = arr.filter(_ <= 99999999999).sorted\n        val oneHundredThousandThousandThousandThousandHundreds = arr.filter(_ <= 99999999999).sorted\n        val oneHundredThousandThousandThousandThousandHundreds = arr.filter(_ <= 99999999999).sorted\n        val oneHundredThousandThousandThousandThousandHundreds = arr.filter(_ <= 99999999999).sorted\n        val oneHundredThousandThousandThousandThousandHundreds = arr.filter(_ <= 99999999999).sorted\n        val oneHundredThousandThousandThousandThousandHundreds = arr.filter(_ <= 99999999999).sorted\n        val oneHundredThousandThousandThousandThousandHundreds = arr.filter(_ <= 99999999999).sorted\n        val oneHundredThousandThousandThousandThousandTh\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpqyz4a7e_.scala:43:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpqyz4a7e_.scala:34:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m99999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneHundredThousandThousandThousandHundreds is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneHundredThousandThousandThousandHundreds\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpqyz4a7e_.scala:37:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m99999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneHundredThousandThousandThousandThousandHundreds is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneHundredThousandThousandThousandThousandHundreds\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpqyz4a7e_.scala:38:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m99999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneHundredThousandThousandThousandThousandHundreds is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneHundredThousandThousandThousandThousandHundreds\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in th",
      "stdout": "",
      "timestamp": 1659804080
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 10)\n        val tens = arr.filter(x => x >= 10 && x < 100)\n        val hundreds = arr.filter(x => x >= 100 && x < 1000)\n        val thousands = arr.filter(x => x >= 1000)\n        val reversed = ones + tens + hundreds + thousands.reverse\n        reversed.map(x => if (x == 1) \"One\" else if (x == 2) \"Two\" else if (x == 3) \"Three\" else if (x == 4) \"Four\" else if (x == 5) \"Five\" else if (x == 6) \"Six\" else if (x == 7) \"Seven\" else if (x == 8) \"Eight\" else if (x == 9) \"Nine\" else x).filter(x => x != 0).map(x => if (x == 1) \"One\" else if (x == 2) \"Two\" else if (x == 3) \"Three\" else if (x == 4) \"Four\" else if (x == 5) \"Five\" else if (x == 6) \"Six\" else if (x == 7) \"Seven\" else if (x == 8) \"Eight\" else if (x == 9) \"Nine\" else x).filter(x => x != 0).map(x => if (x == 1) \"One\" else if (x == 2) \"Two\" else if (x == 3) \"Three\" else if (x == 4) \"Four\" else if (x == 5) \"Five\" else if (x == 6) \"Six\" else if (x == 7) \"Seven\" else if (x == 8) \"Eight\" else if (x == 9) \"Nine\" else x).filter(x => x != 0).map(x => if (x == 1) \"One\" else if (x == 2) \"Two\" else if (x == 3) \"Three\" else if (x == 4) \"Four\" else if (x == 5) \"Five\" else if (x == 6) \"Six\" else if (x == 7) \"Seven\" else if (x == 8) \"Eight\" else if (x == 9) \"Nine\" else x).filter(x => x != 0).map(x => if (x == 1) \"One\" else if (x == 2) \"Two\" else if (x == 3) \"Three\" else if (x == 4) \"Four\" else if (x == 5) \"Five\" else if (x == 6) \"Six\" else if (x == 7) \"Seven\" else if (x == 8) \"Eight\" else if (x == 9) \"Nine\" else x).filter(x => x != 0).map(x => if (x == 1) \"One\" else if (x == 2) \"Two\" else if (x == 3) \"Three\" else if (x == 4) \"Four\" else if (x == 5) \"Five\" else if (x == 6) \"Six\" else if (x == 7) \"Seven\" else if (x == 8) \"Eight\" else if (x == 9) \"Nine\" else x).filter(x => x != 0).map(x => if (x == 1) \"One\" else if (x == 2) \"Two\" else if (x == 3) \"Three\" \n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpthfojr1e.scala:27:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpthfojr1e.scala:25:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mreversed\u001b[0m = ones + tens + hundreds + thousands.reverse\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804083
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1 && x <= 9).toList\n        val tens = arr.filter(x => x >= 10 && x <= 99).toList\n        val hundreds = arr.filter(x => x >= 100 && x <= 999).toList\n        val thousands = arr.filter(x => x >= 1000 && x <= 9999).toList\n        val tenThousands = arr.filter(x => x >= 10000 && x <= 99999).toList\n        val oneThousands = arr.filter(x => x >= 100000 && x <= 999999).toList\n        val tenThousandThousands = arr.filter(x => x >= 1000000 && x <= 9999999).toList\n        val oneThousandThousands = arr.filter(x => x >= 10000000 && x <= 99999999).toList\n        val tenThousandThousandThousands = arr.filter(x => x >= 100000000 && x <= 999999999).toList\n        val oneThousandThousandThousands = arr.filter(x => x >= 1000000000 && x <= 99999999999).toList\n        val tenThousandThousandThousandThousands = arr.filter(x => x >= 10000000000 && x <= 999999999).toList\n        val oneThousandThousandThousandThousands = arr.filter(x => x >= 100000000000 && x <= 99999999999).toList\n        val tenThousandThousandThousandThousands = arr.filter(x => x >= 1000000000000 && x <= 99999999999).toList\n        val oneThousandThousandThousandThousands = arr.filter(x => x >= 10000000000000 && x <= 99999999999).toList\n        val tenThousandThousandThousandThousands = arr.filter(x => x >= 100000000000000 && x <= 99999999999).toList\n        val oneThousandThousandThousandThousands = arr.filter(x => x >= 1000000000000000 && x <= 99999999999).toList\n        val tenThousandThousandThousandThousands = arr.filter(x => x >= 10000000000000000 && x <= 99999999999).toList\n        val oneThousandThousandThousandThousands = arr.filter(x => x >= 100000000000000000 && x <= 99999999999).toList\n        val tenThousandThousandThousandThousands = arr.filter(x => x >= 1000000000000000001 && x <= 99999999999).toList\n        val oneThousandThousandThousandThousands = arr.filter(x => x >= 100\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpp7atlwhe.scala:41:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpp7atlwhe.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtenThousandThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000\u001b[0m && x <= \u001b[31m99999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mtenThousandThousandThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35mtenThousandThousandThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpp7atlwhe.scala:34:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000000\u001b[0m && x <= \u001b[31m99999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpp7atlwhe.scala:35:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtenThousandThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000000\u001b[0m && x <= \u001b[31m99999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mtenThousandThousandThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35mtenThousandThousandThousandThousands",
      "stdout": "",
      "timestamp": 1659804081
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val result = new mutable.ListBuffer[String]()\n        val ones = arr.filter(_ <= 9).sorted\n        val tens = arr.filter(_ <= 99).sorted\n        val hundreds = arr.filter(_ <= 999).sorted\n        val thousands = arr.filter(_ <= 9999).sorted\n        val tenThousands = arr.filter(_ <= 999999).sorted\n        val oneThousands = arr.filter(_ <= 9999999).sorted\n        val tenMillions = arr.filter(_ <= 999999999).sorted\n        val oneMillions = arr.filter(_ <= 99999999999).sorted\n        val tenBillions = arr.filter(_ <= 999999999999999).sorted\n        val oneBillions = arr.filter(_ <= 9999999999999999999).sorted\n        val tenTrillions = arr.filter(_ <= 99999999999999999999999).sorted\n        val oneTrillions = arr.filter(_ <= 999999999999999999999999999).sorted\n        val tenQuadrillions = arr.filter(_ <= 9999999999999999999999999999999).sorted\n        val oneQuadrillions = arr.filter(_ <= 99999999999999999999999999999999999).sorted\n        val tenQuintillions = arr.filter(_ <= 999999999999999999999999999999999999999).sorted\n        val oneQuintillions = arr.filter(_ <= 999999999999999999999999999999999999999).sorted\n        val tenSextillions = arr.filter(_ <= 9999999999999999999999999999999999999999999).sorted\n        val oneSextillions = arr.filter(_ <= 9999999999999999999999999999999999999999999).sorted\n        val tenSeptillions = arr.filter(_ <= 9999999999999999999999999999999999999999999).sorted\n        val oneSeptillions = arr.filter(_ <= 9999999999999999999999999999999999999999999).sorted\n        val tenOctillions = arr.filter(_ <= 9999999999999999999999999999999999999999999).sorted\n        val oneOctillions = arr.filter(_ <= 9999999999999999999999999999999999999999999).sorted\n        val tenNonillions = arr.filter(_ <= 9999999999999999999999999999999999999999999).sorted\n        val oneNonillions = arr.filter(_ <= 9999999999999999999999999999999999999999999).sorted\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpihlip9xb.scala:46:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m        \u001b[33mval\u001b[0m \n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpihlip9xb.scala:21:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.ListBuffer[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpihlip9xb.scala:29:42 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneMillions\u001b[0m = arr.filter(_ <= \u001b[31m99999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpihlip9xb.scala:30:42 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtenBillions\u001b[0m = arr.filter(_ <= \u001b[31m999999999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpihlip9xb.scala:31:42 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneBillions\u001b[0m = arr.filter(_ <= \u001b[31m9999999999999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpihlip9xb.scala:32:43 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtenTrillions\u001b[0m = arr.filter(_ <= \u001b[31m99999999999999999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^",
      "stdout": "",
      "timestamp": 1659804082
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val result = new mutable.ListBuffer[String]()\n        val ones = arr.filter(x => x >= 1 && x <= 9).toList\n        val tens = arr.filter(x => x >= 10 && x <= 99).toList\n        val hundreds = arr.filter(x => x >= 100 && x <= 999).toList\n        val thousands = arr.filter(x => x >= 1000 && x <= 9999).toList\n        val tenThousands = arr.filter(x => x >= 10000 && x <= 99999).toList\n        val hundredThousands = arr.filter(x => x >= 100000 && x <= 999999).toList\n        val thousandThousands = arr.filter(x => x >= 1000000 && x <= 9999999).toList\n        val oneThousands = arr.filter(x => x >= 10000000 && x <= 99999999).toList\n        val oneHundreds = arr.filter(x => x >= 100000000 && x <= 999999999).toList\n        val oneThousandThousands = arr.filter(x => x >= 1000000000 && x <= 99999999999).toList\n        val oneHundredThousands = arr.filter(x => x >= 10000000000 && x <= 9999999999999).toList\n        val oneThousandThousandThousands = arr.filter(x => x >= 100000000000 && x <= 9999999999999).toList\n        val oneHundredThousandThousands = arr.filter(x => x >= 1000000000000 && x <= 9999999999999).toList\n        val oneThousandThousandThousandThousands = arr.filter(x => x >= 10000000000000 && x <= 9999999999999).toList\n        val oneHundredThousandThousandThousands = arr.filter(x => x >= 100000000000000 && x <= 9999999999999).toList\n        val oneThousandThousandThousandThousandThousands = arr.filter(x => x >= 1000000000000000 && x <= 9999999999999).toList\n        val oneHundredThousandThousandThousandThousands = arr.filter(x => x >= 10000000000000000 && x <= 9999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousands = arr.filter(x => x >= 100000000000000000 && x <= 9999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousands = arr.filter(x => x >= 100000000000000000 && x <= 9999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousand\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp6sl2kdbe.scala:42:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6sl2kdbe.scala:21:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.ListBuffer[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmp6sl2kdbe.scala:31:75 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x <= \u001b[31m99999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                           ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp6sl2kdbe.scala:32:55 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000\u001b[0m && x <= \u001b[31m9999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                       number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp6sl2kdbe.scala:32:75 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000\u001b[0m && x <= \u001b[31m9999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                           ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp6sl2kdbe.scala:33:64 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b",
      "stdout": "",
      "timestamp": 1659804082
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 10)\n        val tens = arr.filter(x => x >= 10 && x < 100)\n        val hundreds = arr.filter(x => x >= 100 && x < 1000)\n        val thousands = arr.filter(x => x >= 1000)\n        val tenThousands = arr.filter(x => x >= 10000)\n        val oneThousands = arr.filter(x => x >= 100000)\n        val oneHundreds = arr.filter(x => x >= 1000000)\n        val oneThousandThousands = arr.filter(x => x >= 10000000)\n        val oneThousandThousandHundreds = arr.filter(x => x >= 100000000)\n        val oneThousandThousandHundredThousands = arr.filter(x => x >= 1000000000)\n        val oneThousandThousandHundredThousandHundreds = arr.filter(x => x >= 10000000000)\n        val oneThousandThousandHundredThousandHundredThousands = arr.filter(x => x >= 100000000000)\n        val oneThousandThousandHundredThousandHundredThousandHundreds = arr.filter(x => x >= 1000000000000)\n        val oneThousandThousandHundredThousandHundredThousandHundredThousands = arr.filter(x => x >= 1000000000000)\n        val oneThousandThousandHundredThousandHundredThousandHundredThousandHundreds = arr.filter(x => x >= 1000000000000)\n        val oneThousandThousandHundredThousandHundredThousandHundredThousandHundredThousands = arr.filter(x => x >= 1000000000000)\n        val oneThousandThousandHundredThousandHundredThousandHundredThousandHundredThousandHundreds = arr.filter(x => x >= 1000000000000)\n        val oneThousandThousandHundredThousandHundredThousandHundredThousandHundredThousandHundredThousands = arr.filter(x => x >= 1000000000000)\n        val oneThousandThousandHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundred\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp3zcyyz0k.scala:40:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmp3zcyyz0k.scala:31:78 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandHundredThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                              ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp3zcyyz0k.scala:32:86 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandHundredThousandHundredThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                      ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp3zcyyz0k.scala:33:93 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandHundredThousandHundredThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                             ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp3zcyyz0k.scala:34:101 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandHundredThousandHundredThousandHundredThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                     ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[",
      "stdout": "",
      "timestamp": 1659804081
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1 && x <= 9).toList\n        val tens = arr.filter(x => x >= 10 && x <= 99).toList\n        val hundreds = arr.filter(x => x >= 100 && x <= 999).toList\n        val thousands = arr.filter(x => x >= 1000 && x <= 9999).toList\n        val tenThousands = arr.filter(x => x >= 10000 && x <= 99999).toList\n        val oneThousands = arr.filter(x => x >= 100000 && x <= 999999).toList\n        val oneHundreds = arr.filter(x => x >= 1000000 && x <= 999999999).toList\n        val tenHundreds = arr.filter(x => x >= 10000000 && x <= 99999999999).toList\n        val oneThousandHundreds = arr.filter(x => x >= 1000000000 && x <= 999999999999).toList\n        val oneThousandThousands = arr.filter(x => x >= 10000000000 && x <= 999999999999999).toList\n        val oneThousandThousandHundreds = arr.filter(x => x >= 100000000000 && x <= 999999999999999999).toList\n        val oneThousandThousandThousands = arr.filter(x => x >= 1000000000000 && x <= 999999999999999999999).toList\n        val oneThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000 && x <= 999999999999999999999).toList\n        val oneThousandThousandThousandThousands = arr.filter(x => x >= 100000000000000 && x <= 999999999999999999999).toList\n        val oneThousandThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000000 && x <= 999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousands = arr.filter(x => x >= 10000000000000000 && x <= 999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousands = arr.filter(x => x >= 100000000000000000 && x <= 999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 999999999999999999999).toList\n\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpbgw0l8s3.scala:28:64 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtenHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000\u001b[0m && x <= \u001b[31m99999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpbgw0l8s3.scala:29:74 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x <= \u001b[31m999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpbgw0l8s3.scala:30:56 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000\u001b[0m && x <= \u001b[31m999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpbgw0l8s3.scala:30:76 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000\u001b[0m && x <= \u001b[31m999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                            ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpbgw0l8s3.scala:31:63 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000\u001b[0m && x <= \u001b[31m999999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m",
      "stdout": "",
      "timestamp": 1659804084
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 10)\n        val tens = arr.filter(x => x >= 10 && x < 100)\n        val hundreds = arr.filter(x => x >= 100)\n        val tensReversed = tens.reverse\n        val hundredsReversed = hundreds.reverse\n        val onesReversed = ones.reverse\n        val onesReversedString = onesReversed.map(x => onesReversedStringMap.get(x))\n        val tensReversedString = tensReversed.map(x => tensReversedStringMap.get(x))\n        val hundredsReversedString = hundredsReversed.map(x => hundredsReversedStringMap.get(x))\n        val allReversedString = onesReversedString.toList ::: tensReversedString.toList ::: hundredsReversedString.toList\n        allReversedString.map(x => reversedStringMap.get(x))\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmps1f7avsv.scala:27:55 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesReversedString\u001b[0m = onesReversed.map(\u001b[36mx\u001b[0m => onesReversedStringMap.get(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                        Not found: onesReversedStringMap\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmps1f7avsv.scala:28:55 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtensReversedString\u001b[0m = tensReversed.map(\u001b[36mx\u001b[0m => tensReversedStringMap.get(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                        Not found: tensReversedStringMap\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmps1f7avsv.scala:29:63 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mhundredsReversedString\u001b[0m = hundredsReversed.map(\u001b[36mx\u001b[0m => hundredsReversedStringMap.get(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                    Not found: hundredsReversedStringMap\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmps1f7avsv.scala:31:35 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        allReversedString.map(\u001b[36mx\u001b[0m => reversedStringMap.get(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Not found: reversedStringMap\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "stdout": "",
      "timestamp": 1659804081
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val sortedArr = arr.sortWith(_ < _)\n        val reverseArr = sortedArr.reverse\n        val result = reverseArr.map(x => if (x < 10) \"One\" else if (x < 100) \"Two\" else if (x < 1000) \"Three\" else if (x < 10000) \"Four\" else \"Five\" else if (x < 100000) \"Six\" else \"Seven\" else \"Eight\" else if (x < 1000000) \"Nine\" else \"Zero\")\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpdyt0kjf2.scala:23:149 --------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = reverseArr.map(\u001b[36mx\u001b[0m => \u001b[33mif\u001b[0m (x < \u001b[31m10\u001b[0m) \u001b[31m\"One\"\u001b[0m \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (x < \u001b[31m100\u001b[0m) \u001b[31m\"Two\"\u001b[0m \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (x < \u001b[31m1000\u001b[0m) \u001b[31m\"Three\"\u001b[0m \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (x < \u001b[31m10000\u001b[0m) \u001b[31m\"Four\"\u001b[0m \u001b[33melse\u001b[0m \u001b[31m\"Five\"\u001b[0m \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (x < \u001b[31m100000\u001b[0m) \u001b[31m\"Six\"\u001b[0m \u001b[33melse\u001b[0m \u001b[31m\"Seven\"\u001b[0m \u001b[33melse\u001b[0m \u001b[31m\"Eight\"\u001b[0m \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (x < \u001b[31m1000000\u001b[0m) \u001b[31m\"Nine\"\u001b[0m \u001b[33melse\u001b[0m \u001b[31m\"Zero\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                     ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          ')' expected, but 'else' found\n1 error found\n",
      "stdout": "",
      "timestamp": 1659804079
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val list = arr.toList\n        val sorted = list.sortWith(_.compareTo(_) < 0)\n        val reversed = sorted.reverse\n        val result = reversed.map(x => if (x < 10) \"One\" else if (x < 100) \"Two\" else if (x < 1000) \"Three\" else \"Four\")\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpppluix01.scala:28)\n\tat Problem.main(tmpppluix01.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659804086
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 10)\n        val tens = arr.filter(x => x >= 10 && x < 100)\n        val hundreds = arr.filter(x => x >= 100 && x < 1000)\n        val thousands = arr.filter(x => x >= 1000 && x < 10000)\n        val tenThousands = arr.filter(x => x >= 10000 && x < 100000)\n        val oneThousands = arr.filter(x => x >= 100000 && x < 1000000)\n        val oneHundreds = arr.filter(x => x >= 1000000 && x < 10000000)\n        val oneThousandThousands = arr.filter(x => x >= 10000000 && x < 100000000)\n        val oneHundredThousands = arr.filter(x => x >= 100000000 && x < 1000000000)\n        val oneThousandThousandThousands = arr.filter(x => x >= 1000000000 && x < 10000000000)\n        val oneHundredThousandThousands = arr.filter(x => x >= 10000000000 && x < 100000000000)\n        val oneThousandThousandThousandThousands = arr.filter(x => x >= 100000000000 && x < 1000000000000)\n        val oneHundredThousandThousandThousands = arr.filter(x => x >= 1000000000000 && x < 10000000000000)\n        val oneThousandThousandThousandThousands = arr.filter(x => x >= 10000000000000 && x < 100000000000000)\n        val oneHundredThousandThousandThousands = arr.filter(x => x >= 100000000000000 && x < 1000000000000000)\n        val oneThousandThousandThousandThousands = arr.filter(x => x >= 1000000000000000 && x < 10000000000000000)\n        val oneHundredThousandThousandThousands = arr.filter(x => x >= 10000000000000000 && x < 100000000000000000)\n        val oneThousandThousandThousandThousands = arr.filter(x => x >= 100000000000000000 && x < 1000000000000000000)\n        val oneHundredThousandThousandThousands = arr.filter(x => x >= 1000000000000000000 && x < 10000000000000000000)\n        val oneThousandThousandThousandThousandThousands = arr.filter(x => x >= 10000000000000000000 && x < 1000000000000000000)\n        val oneHundredThousandThousandThousandThousands = arr.filter(x => x >= 1000000000000000000 && \n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmptrt5p5w0.scala:41:101 --------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000000000\u001b[0m && \n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmptrt5p5w0.scala:34:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000000\u001b[0m && x < \u001b[31m100000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneThousandThousandThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneThousandThousandThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmptrt5p5w0.scala:35:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000000\u001b[0m && x < \u001b[31m1000000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneHundredThousandThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneHundredThousandThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmptrt5p5w0.scala:36:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandThousands\u001b[0m = arr.",
      "stdout": "",
      "timestamp": 1659804084
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 10)\n        val tens = arr.filter(x => x >= 10 && x < 100)\n        val hundreds = arr.filter(x => x >= 100)\n        val reversed = ones + tens + hundreds.reverse\n        val onesAndTens = ones + tens\n        val onesAndTensAndHundreds = onesAndTens + hundreds\n        val onesAndTensAndHundredsAndReversed = onesAndTensAndHundreds + reversed\n        val onesAndTensAndHundredsAndReversedAndOnes = onesAndTensAndHundredsAndReversed + ones\n        val onesAndTensAndHundredsAndReversedAndOnesAndTens = onesAndTensAndHundredsAndReversedAndOnes + tens\n        val onesAndTensAndHundredsAndReversedAndOnesAndTensAndHundreds = onesAndTensAndHundredsAndReversedAndOnesAndTens + hundreds\n        val onesAndTensAndHundredsAndReversedAndOnesAndTensAndHundredsAndReversed = onesAndTensAndHundredsAndReversedAndOnesAndTensAndHundreds + reversed\n        val onesAndTensAndHundredsAndReversedAndOnesAndTensAndHundredsAndReversedAndOnes = onesAndTensAndHundredsAndReversedAndOnesAndTensAndHundredsAndReversed + ones\n        val onesAndTensAndHundredsAndReversedAndOnesAndTensAndHundredsAndReversedAndOnesAndTens = onesAndTensAndHundredsAndReversedAndOnesAndTensAndHundredsAndReversed + tens\n        val onesAndTensAndHundredsAndReversedAndOnesAndTensAndHundredsAndReversedAndOnesAndTensAndHundreds = onesAndTensAndHundredsAndReversedAndOnesAndTensAndHundredsAndReversed + hundreds\n        val onesAndTensAndHundredsAndReversedAndOnesAndTensAndHundredsAndReversedAndOnesAndTensAndHundredsAndReversed = onesAndTensAndHundredsAndReversedAndOnesAndTensAndHundredsAndReversed + reversed\n        val onesAndTensAndHundredsAndReversedAndOnesAndTensAndHundredsAndReversedAndOnesAndTensAndHundredsAndReversedAndOnes = \n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpmfsmzkgj.scala:36:126 --------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesAndTensAndHundredsAndReversedAndOnesAndTensAndHundredsAndReversedAndOnesAndTensAndHundredsAndReversedAndOnes\u001b[0m = \n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                              ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpmfsmzkgj.scala:24:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mreversed\u001b[0m = ones + tens + hundreds.reverse\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpmfsmzkgj.scala:25:31 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesAndTens\u001b[0m = ones + tens\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmfsmzkgj.scala:37:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[",
      "stdout": "",
      "timestamp": 1659804086
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 10)\n        val tens = arr.filter(x => x >= 10 && x < 100)\n        val hundreds = arr.filter(x => x >= 100)\n        val reversed = ones + tens + hundreds.reverse\n        val result = reversed.map(x => if (x < 10) \"One\" else if (x < 100) \"Two\" else \"Three\")\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpb6h9kesp.scala:24:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mreversed\u001b[0m = ones + tens + hundreds.reverse\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n1 error found\n",
      "stdout": "",
      "timestamp": 1659804086
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val one = mutable.ListBuffer[String]()\n        val two = mutable.ListBuffer[String]()\n        val three = mutable.ListBuffer[String]()\n        val four = mutable.ListBuffer[String]()\n        val five = mutable.ListBuffer[String]()\n        val six = mutable.ListBuffer[String]()\n        val seven = mutable.ListBuffer[String]()\n        val eight = mutable.ListBuffer[String]()\n        val nine = mutable.ListBuffer[String]()\n        val ten = mutable.ListBuffer[String]()\n        val hundred = mutable.ListBuffer[String]()\n        val thousand = mutable.ListBuffer[String]()\n        val million = mutable.ListBuffer[String]()\n        val billion = mutable.ListBuffer[String]()\n        val trillion = mutable.ListBuffer[String]()\n        val quadrillion = mutable.ListBuffer[String]()\n        val quintillion = mutable.ListBuffer[String]()\n        val sextillion = mutable.ListBuffer[String]()\n        val septillion = mutable.ListBuffer[String]()\n        val octillion = mutable.ListBuffer[String]()\n        val nonillion = mutable.ListBuffer[String]()\n        val decillion = mutable.ListBuffer[String]()\n        val thousand = mutable.ListBuffer[String]()\n        val million = mutable.ListBuffer[String]()\n        val billion = mutable.ListBuffer[String]()\n        val trillion = mutable.ListBuffer[String]()\n        val quadrillion = mutable.ListBuffer[String]()\n        val quintillion = mutable.ListBuffer[String]()\n        val sextillion = mutable.ListBuffer[String]()\n        val septillion = mutable.ListBuffer[String]()\n        val octillion = mutable.ListBuffer[String]()\n        val nonillion = mutable.ListBuffer[String]()\n        val decillion = mutable.ListBuffer[String]()\n        val thousand = mutable.ListBuffer[String]()\n        val million = mutable.ListBuffer[String]()\n        val billion = mutable.ListBuffer[String]()\n        val trillion = \n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpe318nws8.scala:57:22 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtrillion\u001b[0m = \n\u001b[31m\u001b[31m   |\u001b[0m                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                      expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpe318nws8.scala:43:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mthousand\u001b[0m = mutable.ListBuffer[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mthousand is already defined as \u001b[33mvalue\u001b[0m \u001b[35mthousand\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpe318nws8.scala:44:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmillion\u001b[0m = mutable.ListBuffer[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmillion is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmillion\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpe318nws8.scala:45:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mbillion\u001b[0m = mutable.ListBuffer[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mbillion is already defined as \u001b[33mvalue\u001b[0m \u001b[35mbillion\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpe318nws8.scala:46:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtrillion\u001b[0m = mutable.ListBuffer[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mtrillion is already defined as \u001b",
      "stdout": "",
      "timestamp": 1659804086
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val len = arr.length\n        val ones = arr.filter(_ <= 9).toList\n        val tens = arr.filter(_ <= 99).toList\n        val hundreds = arr.filter(_ <= 999).toList\n        val thousands = arr.filter(_ <= 9999).toList\n        val tenThousands = arr.filter(_ <= 999999).toList\n        val oneThousands = arr.filter(_ <= 9999999).toList\n        val oneHundreds = arr.filter(_ <= 999999999).toList\n        val oneThousandHundreds = arr.filter(_ <= 99999999999).toList\n        val oneHundredThousands = arr.filter(_ <= 9999999999999).toList\n        val oneHundredThousandHundreds = arr.filter(_ <= 999999999999999).toList\n        val oneHundredThousandHundredThousands = arr.filter(_ <= 9999999999999999999).toList\n        val oneHundredThousandHundredThousandHundreds = arr.filter(_ <= 99999999999999999999999).toList\n        val oneHundredThousandHundredThousandHundredThousands = arr.filter(_ <= 999999999999999999999999999).toList\n        val oneHundredThousandHundredThousandHundredThousandHundreds = arr.filter(_ <= 9999999999999999999999999999999).toList\n        val oneHundredThousandHundredThousandHundredThousandHundredThousands = arr.filter(_ <= 99999999999999999999999999999999999).toList\n        val oneHundredThousandHundredThousandHundredThousandHundredThousandHundreds = arr.filter(_ <= 999999999999999999999999999999999999999).toList\n        val oneHundredThousandHundredThousandHundredThousandHundredThousandHundredThousands = arr.filter(_ <= 9999999999999999999999999999999999999999999).toList\n        val oneHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundreds = arr.filter(_ <= 99999999999999999999999999999999999999999999999).toList\n        val oneHundredThousandH\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpnmr9ltsy.scala:41:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpnmr9ltsy.scala:29:50 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m99999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpnmr9ltsy.scala:30:50 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousands\u001b[0m = arr.filter(_ <= \u001b[31m9999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpnmr9ltsy.scala:31:57 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                         ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpnmr9ltsy.scala:32:65 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandHundredThousands\u001b[0m = arr.filter(_ <= \u001b[31m9999999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                 ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpnmr9ltsy.scala:33:72 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandHundredThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m99999999999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                    ",
      "stdout": "",
      "timestamp": 1659804087
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(_ <= 9).sorted\n        val tens = arr.filter(_ <= 99).sorted\n        val hundreds = arr.filter(_ <= 999).sorted\n        val thousands = arr.filter(_ <= 9999).sorted\n        val tenThousands = arr.filter(_ <= 999999).sorted\n        val oneThousands = arr.filter(_ <= 9999999).sorted\n        val oneHundreds = arr.filter(_ <= 999999999).sorted\n        val oneThousandHundreds = arr.filter(_ <= 99999999999).sorted\n        val oneThousandThousands = arr.filter(_ <= 999999999).sorted\n        val oneHundredThousands = arr.filter(_ <= 99999999999).sorted\n        val oneHundredThousandHundreds = arr.filter(_ <= 999999999999999).sorted\n        val oneHundredThousandThousands = arr.filter(_ <= 999999999999999).sorted\n        val oneHundredThousandThousandHundreds = arr.filter(_ <= 9999999999999999999).sorted\n        val oneHundredThousandThousandThousands = arr.filter(_ <= 9999999999999999999).sorted\n        val oneHundredThousandThousandThousandHundreds = arr.filter(_ <= 99999999999999999999999).sorted\n        val oneHundredThousandThousandThousandThousands = arr.filter(_ <= 99999999999999999999999).sorted\n        val oneHundredThousandThousandThousandThousandHundreds = arr.filter(_ <= 999999999999999999999999999).sorted\n        val oneHundredThousandThousandThousandThousandThousands = arr.filter(_ <= 9999999999999999999999999999999).sorted\n        val oneHundredThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 99999999999999999999999999999999999).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 999999999999999999999999999999999999999).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousandThousandHundreds = arr.\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpke3dodh5.scala:42:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmpke3dodh5.scala:28:50 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m99999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpke3dodh5.scala:30:50 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousands\u001b[0m = arr.filter(_ <= \u001b[31m99999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpke3dodh5.scala:31:57 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m999999999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                         ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpke3dodh5.scala:32:58 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m999999999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                          ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpke3dodh5.scala:33:65 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m9999999999999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                               ",
      "stdout": "",
      "timestamp": 1659804089
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 10)\n        val tens = arr.filter(x => x >= 10 && x < 100)\n        val hundreds = arr.filter(x => x >= 100)\n        val reversed = ones + tens + hundreds.reverse\n        val named = reversed.map(x => if (x < 10) \"One\" else if (x < 100) \"Two\" else \"Three\")\n        named.toList\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpllemhddj.scala:24:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mreversed\u001b[0m = ones + tens + hundreds.reverse\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of List[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n1 error found\n",
      "stdout": "",
      "timestamp": 1659804088
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val one = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val two = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val three = List(\"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\")\n        val four = List(\"Fifty\", \"Fourty\", \"Fifty\", \"Fourty\", \"Fourty\", \"Fourty\", \"Fourty\", \"Fourty\", \"Fourty\", \"Fourty\")\n        val five = List(\"Fifty\", \"Fifty\", \"Fifty\", \"Fifty\", \"Fifty\", \"Fifty\", \"Fifty\", \"Fifty\", \"Fifty\", \"Fifty\")\n        val six = List(\"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\", \"Ninety\", \"Ninety\", \"Ninety\", \"Ninety\", \"Ninety\", \"Ninety\")\n        val seven = List(\"Seventy\", \"Seventy\", \"Seventy\", \"Seventy\", \"Seventy\", \"Seventy\", \"Seventy\", \"Seventy\", \"Seventy\", \"Seventy\")\n        val eight = List(\"Eighty\", \"Ninety\", \"Ninety\", \"Ninety\", \"Ninety\", \"Ninety\", \"Ninety\", \"Ninety\", \"Ninety\", \"Ninety\", \"Ninety\")\n        val nine = List(\"Ninety\", \"Ninety\", \"Ninety\", \"Ninety\", \"Ninety\", \"Ninety\", \"Ninety\", \"Ninety\", \"Ninety\", \"Ninety\", \"Ninety\", \"Ninety\")\n        val ten = List(\"Ten\", \"Ten\", \"Ten\", \"Ten\", \"Ten\", \"Ten\", \"Ten\", \"Ten\", \"Ten\", \"Ten\", \"Ten\", \"Ten\", \"Ten\")\n        val eleven = List(\"Eleven\", \"Eleven\", \"Eleven\", \"Eleven\", \"Eleven\", \"Eleven\", \"Eleven\", \"Eleven\", \"Eleven\", \"Eleven\", \"Eleven\", \"Eleven\")\n        val twelve = List(\"Twelve\", \"Twelve\", \"Twelve\", \"Twelve\", \"Twelve\", \"Twelve\", \"Twelve\", \"Twelve\", \"Twelve\", \"Twelve\", \"Twelve\", \"Twelve\")\n        val thirteen = List(\"\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpetp96pfo.scala:33:28 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mthirteen\u001b[0m = List(\"\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            unclosed string literal\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpetp96pfo.scala:34:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804089
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1 && x <= 9).sorted\n        val tens = arr.filter(x => x >= 10 && x <= 99).sorted\n        val hundreds = arr.filter(x => x >= 100 && x <= 999).sorted\n        val thousands = arr.filter(x => x >= 1000 && x <= 9999).sorted\n        val tenThousands = arr.filter(x => x >= 10000 && x <= 99999).sorted\n        val oneThousands = arr.filter(x => x >= 100000 && x <= 999999).sorted\n        val oneHundreds = arr.filter(x => x >= 1000000 && x <= 9999999).sorted\n        val oneThousandThousands = arr.filter(x => x >= 10000000 && x <= 99999999).sorted\n        val oneHundredThousands = arr.filter(x => x >= 100000000 && x <= 999999999).sorted\n        val oneHundredThousandThousands = arr.filter(x => x >= 1000000000 && x <= 99999999999).sorted\n        val oneHundredThousandThousandThousands = arr.filter(x => x >= 10000000000 && x <= 999999999999).sorted\n        val oneHundredThousandThousandThousandThousands = arr.filter(x => x >= 100000000000 && x <= 999999999999999).sorted\n        val oneHundredThousandThousandThousandThousandThousands = arr.filter(x => x >= 1000000000000 && x <= 9999999999999999).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousands = arr.filter(x => x >= 10000000000000 && x <= 9999999999999999999).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousands = arr.filter(x => x >= 100000000000000 && x <= 99999999999999999999).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousandThousands = arr.filter(x => x >= 1000000000000000 && x <= 99999999999999999999999).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousands = arr.filter(x => x >= 10000000000000000 && x <= 999999999999999999999999).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousandTh\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp3uktj26b.scala:39:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp3uktj26b.scala:35:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousandThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000000\u001b[0m && x <= \u001b[31m99999999999999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneHundredThousandThousandThousandThousandThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneHundredThousandThousandThousandThousandThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- Error: /tmp/tmp3uktj26b.scala:30:82 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x <= \u001b[31m99999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                  ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp3uktj26b.scala:31:71 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000\u001b[0m && x <= \u001b[31m999999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                                       ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp3uktj26b.scala:31:91 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousand",
      "stdout": "",
      "timestamp": 1659804089
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(_ <= 9).sorted\n        val tens = arr.filter(_ <= 99).sorted\n        val hundreds = arr.filter(_ <= 999).sorted\n        val thousands = arr.filter(_ <= 9999).sorted\n        val tenThousands = arr.filter(_ <= 999999).sorted\n        val oneThousands = arr.filter(_ <= 9999999).sorted\n        val oneHundreds = arr.filter(_ <= 999999999).sorted\n        val oneThousandThousands = arr.filter(_ <= 99999999999).sorted\n        val oneHundredThousands = arr.filter(_ <= 999999999999).sorted\n        val oneHundredThousandThousands = arr.filter(_ <= 999999999999999).sorted\n        val oneHundredThousandThousandThousands = arr.filter(_ <= 999999999999999999).sorted\n        val oneHundredThousandThousandThousandThousands = arr.filter(_ <= 999999999999999999999).sorted\n        val oneHundredThousandThousandThousandThousandThousands = arr.filter(_ <= 9999999999999999999998).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 99999999999999999999987).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 999999999999999999999876).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 9999999999999999999998765).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 99999999999999999999987654).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 999999999999999999999876543).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousandThousandThousands = arr.filter(_ <= 999999999999999999999\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpll9kggbu.scala:40:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpll9kggbu.scala:38:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousandThousandThousandThousandThousandThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m999999999999999999999876543\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneHundredThousandThousandThousandThousandThousandThousandThousandThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35m\n\u001b[31m   |\u001b[0m  oneHundredThousandThousandThousandThousandThousandThousandThousandThousandThousands\n\u001b[31m   |\u001b[0m\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- Error: /tmp/tmpll9kggbu.scala:28:51 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m99999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                   number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpll9kggbu.scala:29:50 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousands\u001b[0m = arr.filter(_ <= \u001b[31m999999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpll9kggbu.scala:30:58 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m999999999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                               ",
      "stdout": "",
      "timestamp": 1659804088
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x % 10 == 1)\n        val tens = arr.filter(x => x % 10 == 0)\n        val tensReversed = tens.reverse\n        val onesReversed = ones.reverse\n        val onesReversedString = onesReversed.map(x => onesReversedStringMap.get(x))\n        val tensReversedString = tensReversed.map(x => tensReversedStringMap.get(x))\n        val result = onesReversedString.toList ++ tensReversedString.toList\n        result.map(x => onesStringMap.get(x)).filter(x => x != null) ++ result.map(x => tensStringMap.get(x))\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpz31cvorx.scala:25:55 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesReversedString\u001b[0m = onesReversed.map(\u001b[36mx\u001b[0m => onesReversedStringMap.get(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                        Not found: onesReversedStringMap\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpz31cvorx.scala:26:55 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtensReversedString\u001b[0m = tensReversed.map(\u001b[36mx\u001b[0m => tensReversedStringMap.get(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                        Not found: tensReversedStringMap\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpz31cvorx.scala:28:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        result.map(\u001b[36mx\u001b[0m => onesStringMap.get(x)).filter(\u001b[36mx\u001b[0m => x != \u001b[31mnull\u001b[0m) ++ result.map(\u001b[36mx\u001b[0m => tensStringMap.get(x))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: onesStringMap\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpz31cvorx.scala:28:88 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        result.map(\u001b[36mx\u001b[0m => onesStringMap.get(x)).filter(\u001b[36mx\u001b[0m => x != \u001b[31mnull\u001b[0m) ++ result.map(\u001b[36mx\u001b[0m => tensStringMap.get(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                Not found: tensStringMap\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "stdout": "",
      "timestamp": 1659804088
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val result = new mutable.ListBuffer[String]()\n        val ones = arr.filter(_ <= 9).sortWith(_ < _)\n        val tens = arr.filter(_ <= 99).sortWith(_ < _)\n        val hundreds = arr.filter(_ <= 999).sortWith(_ < _)\n        val thousands = arr.filter(_ <= 9999).sortWith(_ < _)\n        val tenThousands = arr.filter(_ <= 999999).sortWith(_ < _)\n        val oneThousands = arr.filter(_ <= 9999999).sortWith(_ < _)\n        val oneHundreds = arr.filter(_ <= 999999999).sortWith(_ < _)\n        val tenHundreds = arr.filter(_ <= 99999999999).sortWith(_ < _)\n        val oneThousandHundreds = arr.filter(_ <= 999999999999).sortWith(_ < _)\n        val oneThousandThousands = arr.filter(_ <= 999999999999999).sortWith(_ < _)\n        val oneHundredThousands = arr.filter(_ <= 9999999999999999).sortWith(_ < _)\n        val oneHundredThousandHundreds = arr.filter(_ <= 9999999999999999999).sortWith(_ < _)\n        val oneThousandThousandHundreds = arr.filter(_ <= 99999999999999999999).sortWith(_ < _)\n        val oneHundredThousandThousands = arr.filter(_ <= 99999999999999999999999).sortWith(_ < _)\n        val oneHundredThousandThousandHundreds = arr.filter(_ <= 999999999999999999999999).sortWith(_ < _)\n        val oneThousandThousandThousandHundreds = arr.filter(_ <= 999999999999999999999999999).sortWith(_ < _)\n        val oneHundredThousandThousandThousands = arr.filter(_ <= 9999999999999999999999999999).sortWith(_ < _)\n        val oneHundredThousandThousandThousandHundreds = arr.filter(_ <= 9999999999999999999999999999999).sortWith(_ < _)\n        val oneThousandThousandThousandThousandHundreds = arr.filter(_ <= 99999999999999999999999999999999).sortWith\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpharuxnzc.scala:21:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.ListBuffer[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpharuxnzc.scala:29:42 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtenHundreds\u001b[0m = arr.filter(_ <= \u001b[31m99999999999\u001b[0m).sortWith(_ < _)\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpharuxnzc.scala:30:50 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m999999999999\u001b[0m).sortWith(_ < _)\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpharuxnzc.scala:31:51 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m999999999999999\u001b[0m).sortWith(_ < _)\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                   number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpharuxnzc.scala:32:50 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousands\u001b[0m = arr.filter(_ <= \u001b[31m9999999999999999\u001b[0m).sortWith(_ < _)\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpharuxnzc.scala:33:57 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m       ",
      "stdout": "",
      "timestamp": 1659804091
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x % 10 == 1).sorted\n        val tens = arr.filter(x => x % 10 == 0).sorted\n        val tensReversed = tens.reverse\n        val onesReversed = ones.reverse\n        val onesReversedString = onesReversed.map(x => One(x))\n        val tensReversedString = tensReversed.map(x => Two(x))\n        val tensReversedString2 = tensReversed.map(x => Three(x))\n        val tensReversedString3 = tensReversed.map(x => Four(x))\n        val tensReversedString4 = tensReversed.map(x => Five(x))\n        val tensReversedString5 = tensReversed.map(x => Six(x))\n        val tensReversedString6 = tensReversed.map(x => Seven(x))\n        val tensReversedString7 = tensReversed.map(x => Eight(x))\n        val tensReversedString8 = tensReversed.map(x => Nine(x))\n        val tensReversedString9 = tensReversed.map(x => Ten(x))\n        val tensReversedString10 = tensReversed.map(x => Eleven(x))\n        val tensReversedString11 = tensReversed.map(x => Twelve(x))\n        val tensReversedString12 = tensReversed.map(x => Thirteen(x))\n        val tensReversedString13 = tensReversed.map(x => Fourteen(x))\n        val tensReversedString14 = tensReversed.map(x => Fifteen(x))\n        val tensReversedString15 = tensReversed.map(x => Sixteen(x))\n        val tensReversedString16 = tensReversed.map(x => Seventeen(x))\n        val tensReversedString17 = tensReversed.map(x => Eighteen(x))\n        val tensReversedString18 = tensReversed.map(x => Nineteen(x))\n        val tensReversedString19 = tensReversed.map(x => Twenty(x))\n        val tensReversedString20 = tensReversed.map(x => TwentyOne(x))\n        val tensReversedString21 = tensReversed.map(x => TwentyTwo(x))\n        val tensReversedString22 = tensReversed.map(x => TwentyThree(x))\n        val tensReversedString23 = ten\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp069u6r59.scala:25:55 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesReversedString\u001b[0m = onesReversed.map(\u001b[36mx\u001b[0m => One(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                       Not found: One\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp069u6r59.scala:26:55 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtensReversedString\u001b[0m = tensReversed.map(\u001b[36mx\u001b[0m => Two(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                       Not found: Two\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp069u6r59.scala:27:56 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtensReversedString2\u001b[0m = tensReversed.map(\u001b[36mx\u001b[0m => Three(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                                        ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        Not found: Three\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp069u6r59.scala:28:56 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtensReversedString3\u001b[0m = tensReversed.map(\u001b[36mx\u001b[0m => Four(x))\n\u001b[31m\u001b[31m   |\u001b[0m                                                        ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        Not found: Four\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp069u6r59.scala:29:56 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtensReversedString4\u001b[0m = tensReversed.map(\u001b[36mx\u001b[0m => Five(x))\n\u001b[31m\u001b[31m   ",
      "stdout": "",
      "timestamp": 1659804090
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val result = new mutable.ListBuffer[String]()\n        val one = mutable.List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val ten = mutable.List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val twenty = mutable.List(\"Twenty\", \"TwentyOne\", \"TwentyTwo\", \"TwentyThree\", \"TwentyFour\", \"TwentyFive\", \"TwentySix\", \"TwentySeven\", \"Twentyeight\", \"Twentynine\")\n        val hundred = mutable.List(\"Hundred\", \"HundredOne\", \"HundredTwo\", \"HundredThree\", \"HundredFour\", \"HundredFive\", \"HundredSix\", \"HundredSeven\", \"HundredEight\", \"HundredNine\")\n        val thousand = mutable.List(\"Thousand\", \"ThousandOne\", \"ThousandTwo\", \"ThousandThree\", \"ThousandFour\", \"ThousandFive\", \"ThousandSix\", \"ThousandSeven\", \"ThousandEight\", \"ThousandNine\")\n        val million = mutable.List(\"Million\", \"MillionOne\", \"MillionTwo\", \"MillionThree\", \"MillionFour\", \"MillionFive\", \"MillionSix\", \"MillionSeven\", \"MillionEight\", \"MillionNine\")\n        val billion = mutable.List(\"Billion\", \"BillionOne\", \"BillionTwo\", \"BillionThree\", \"BillionFour\", \"BillionFive\", \"BillionSix\", \"BillionSeven\", \"BillionEight\", \"BillionNine\")\n        val trillion = mutable.List(\"Trillion\", \"TrillionOne\", \"TrillionTwo\", \"TrillionThree\", \"TrillionFour\", \"TrillionFive\", \"TrillionSix\", \"TrillionSeven\", \"TrillionEight\", \"TrillionNine\")\n        val quadrillion = mutable.List(\"Quadrillion\", \"QuadrillionOne\", \"QuadrillionTwo\", \"QuadrillionThree\", \"QuadrillionFour\", \"QuadrillionFive\", \"QuadrillionSix\", \"Quadrilli\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpihkiooqi.scala:30:166 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mquadrillion\u001b[0m = mutable.List(\u001b[31m\"Quadrillion\"\u001b[0m, \u001b[31m\"QuadrillionOne\"\u001b[0m, \u001b[31m\"QuadrillionTwo\"\u001b[0m, \u001b[31m\"QuadrillionThree\"\u001b[0m, \u001b[31m\"QuadrillionFour\"\u001b[0m, \u001b[31m\"QuadrillionFive\"\u001b[0m, \u001b[31m\"QuadrillionSix\"\u001b[0m, \"Quadrilli\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 unclosed string literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmpihkiooqi.scala:32:34 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 end of statement expected but '=' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpihkiooqi.scala:21:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.ListBuffer[\u001b[35mString\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpihkiooqi.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mone\u001b[0m = mutable.List(\u001b[31m\"One\"\u001b[0m, \u001b[31m\"Two\"\u001b[0m, \u001b[31m\"Three\"\u001b[0m, \u001b[31m\"Four\"\u001b[0m, \u001b[31m\"Five\"\u001b[0m, \u001b[31m\"Six\"\u001b[0m, \u001b[31m\"Seven\"\u001b[0m, \u001b[31m\"Eight\"\u001b[0m, \u001b[31m\"Nine\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpihkiooqi.scala:23:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mten\u001b[0m = mutable.List(",
      "stdout": "",
      "timestamp": 1659804090
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val one = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val two = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val three = List(\"Twenty\", \"Thirty\", \"Fourty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\")\n        val four = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val five = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val six = List(\"Twenty\", \"Thirty\", \"Fourty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\")\n        val seven = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val eight = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val nine = List(\"Twenty\", \"Thirty\", \"Fourty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\")\n        val ten = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val eleven = List(\"Twenty\", \"Thirty\", \"Fourty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\")\n        val twelve = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val thirteen = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n        val fourteen = List(\"Twenty\", \"Thirty\", \"Fourty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\")\n        val fifteen = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpc03gejzx.scala:35:58 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfifteen\u001b[0m = List(\u001b[31m\"One\"\u001b[0m, \u001b[31m\"Two\"\u001b[0m, \u001b[31m\"Three\"\u001b[0m, \u001b[31m\"Four\"\u001b[0m, \"Five\n\u001b[31m\u001b[31m   |\u001b[0m                                                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 unclosed string literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmpc03gejzx.scala:37:34 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 end of statement expected but '=' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc03gejzx.scala:36:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpc03gejzx.scala:37:4 -------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    Not found: Fivedef\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "stdout": "",
      "timestamp": 1659804091
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 10)\n        val tens = arr.filter(x => x >= 10 && x < 100)\n        val hundreds = arr.filter(x => x >= 100 && x < 1000)\n        val thousands = arr.filter(x => x >= 1000 && x < 10000)\n        val tenThousands = arr.filter(x => x >= 10000 && x < 100000)\n        val oneThousands = arr.filter(x => x >= 100000 && x < 1000000)\n        val oneHundreds = arr.filter(x => x >= 1000000 && x < 10000000)\n        val oneThousandHundreds = arr.filter(x => x >= 10000000 && x < 100000000)\n        val oneThousandThousands = arr.filter(x => x >= 100000000 && x < 1000000000)\n        val oneHundredThousands = arr.filter(x => x >= 1000000000 && x < 10000000000)\n        val oneHundredThousandHundreds = arr.filter(x => x >= 10000000000 && x < 100000000000)\n        val oneHundredThousandThousands = arr.filter(x => x >= 100000000000 && x < 1000000000000)\n        val oneHundredThousandThousandHundreds = arr.filter(x => x >= 1000000000000 && x < 10000000000000)\n        val oneHundredThousandThousandThousands = arr.filter(x => x >= 10000000000000 && x < 100000000000000)\n        val oneHundredThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000 && x < 1000000000000000)\n        val oneHundredThousandThousandThousandThousands = arr.filter(x => x >= 1000000000000000 && x < 10000000000000000)\n        val oneHundredThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000000 && x < 100000000000000000)\n        val oneHundredThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x < 1000000000000000000)\n        val oneHundredThousandThousandThousandThousandThousands = arr.filter(x => x >= 1000000000000000000 && x < 10000000000000000000)\n        val oneHundredThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000000000 && x < 100000000000000000000)\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpzmt6ihxw.scala:41:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m        \u001b[33mval\u001b[0m \n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpzmt6ihxw.scala:38:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000000000\u001b[0m && x < \u001b[31m1000000000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneHundredThousandThousandThousandThousandHundreds is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneHundredThousandThousandThousandThousandHundreds\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- Error: /tmp/tmpzmt6ihxw.scala:30:73 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousands\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x < \u001b[31m10000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpzmt6ihxw.scala:31:62 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000\u001b[0m && x < \u001b[31m100000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpzmt6ihxw.scala:31:81 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousand",
      "stdout": "",
      "timestamp": 1659804036
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val nums = arr.toList\n        val numsSorted = nums.sortWith(_.compareTo(_) < 0)\n        val numsReversed = numsSorted.reverse\n        val numsReversedString = numsReversed.map(_.toString).mkString(\"\")\n        val numsReversedStringList = numsReversedString.split(\"\\\\D+\")\n        val numsReversedStringListSorted = numsReversedStringList.sortWith(_.compareTo(_) < 0)\n        val numsReversedStringListSortedString = numsReversedStringListSorted.map(_.toString).mkString(\"\")\n        val numsReversedStringListSortedStringList = numsReversedStringListSortedString.split(\"\\\\D+\")\n        val numsReversedStringListSortedStringListSorted = numsReversedStringListSortedStringList.sortWith(_.compareTo(_) < 0)\n        val numsReversedStringListSortedStringListSortedString = numsReversedStringListSortedStringListSorted.map(_.toString).mkString(\"\")\n        val numsReversedStringListSortedStringListSortedStringList = numsReversedStringListSortedStringListSortedString.split(\"\\\\D+\")\n        val numsReversedStringListSortedStringListSortedStringListSorted = numsReversedStringListSortedStringListSortedStringListSorted.sortWith(_.compareTo(_) < 0)\n        val numsReversedStringListSortedStringListSortedStringListSortedString = numsReversedStringListSortedStringListSortedStringListSortedStringList.map(_.toString).mkString(\"\")\n        val numsReversedStringListSortedStringListSortedStringListSortedStringListSorted = numsReversedStringListSortedStringListSortedStringListSortedStringListSorted.sortWith(_.compareTo(_) < 0)\n        val numsReversedStringListSortedStringListSortedStringListSortedStringListSortedString = numsReversedStringListSortedStringListSortedStringListSortedStringListSortedStringListSorted.map(_.toString).mkString(\"\")\n        val numsReversedStringListSortedStringListSortedStringListSortedStringListSortedStringListSorted = numsReversedStringListSortedStringListSortedStringListSortedStringListSortedStringListSortedStringListSorted.sortWith(_.compareTo(_) < 0)\n        val numsReversedStringListSortedStringListSortedStringListSortedStringListSortedStringListSortedStringListSorted = numsReversedStringListSortedStringListSortedStringListSortedStringList\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp9i8ieae6.scala:32:75 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnumsReversedStringListSortedStringListSortedStringListSorted\u001b[0m = numsReversedStringListSortedStringListSortedStringListSorted.sortWith(_.compareTo(_) < \u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                           ^\u001b[0m\n\u001b[31m   |\u001b[0mRecursive \u001b[33mvalue\u001b[0m \u001b[35mnumsReversedStringListSortedStringListSortedStringListSorted\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9i8ieae6.scala:33:81 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnumsReversedStringListSortedStringListSortedStringListSortedString\u001b[0m = numsReversedStringListSortedStringListSortedStringListSortedStringList.map(_.toString).mkString(\u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNot found: numsReversedStringListSortedStringListSortedStringListSortedStringList\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp9i8ieae6.scala:34:91 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnumsReversedStringListSortedStringListSortedStringListSortedStringListSorted\u001b[0m = numsReversedStringListSortedStringListSortedStringListSortedStringListSorted.sortWith(_.compareTo(_) < \u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                           ^\u001b[0m\n\u001b[31m   |\u001b[0mRecursive \u001b[33mvalue\u001b[0m \u001b[35m\n\u001b[31m   |\u001b[0m  numsReversedStringListSortedStringListSortedStringListSortedStringListSorted\n\u001b[31m   |\u001b[0m\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9i8ieae6.sca",
      "stdout": "",
      "timestamp": 1659804091
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val len = arr.length\n        if (len == 0) return Nil\n        val maxLen = arr.max\n        val minLen = arr.min\n        val ones = arr.filter(_ <= 1).sorted\n        val twos = arr.filter(_ <= 2).sorted\n        val threes = arr.filter(_ <= 3).sorted\n        val fours = arr.filter(_ <= 4).sorted\n        val fives = arr.filter(_ <= 5).sorted\n        val sixes = arr.filter(_ <= 6).sorted\n        val sevens = arr.filter(_ <= 7).sorted\n        val eights = arr.filter(_ <= 8).sorted\n        val nines = arr.filter(_ <= 9).sorted\n        val onesLen = ones.length\n        val twosLen = twos.length\n        val threesLen = threes.length\n        val foursLen = fours.length\n        val fivesLen = fives.length\n        val sixesLen = sixes.length\n        val sevensLen = sevens.length\n        val eightsLen = eights.length\n        val ninesLen = nines.length\n        val onesMax = ones.max\n        val onesMin = ones.min\n        val twosMax = twos.max\n        val twosMin = twos.min\n        val threesMax = threes.max\n        val threesMin = threes.min\n        val foursMax = fours.max\n        val foursMin = fours.min\n        val fivesMax = fives.max\n        val fivesMin = fives.min\n        val sixesMax = sixes.max\n        val sixesMin = sixes.min\n        val sevensMax = sevens.max\n        val sevensMin = sevens.min\n        val eightsMax = eights.max\n        val eightsMin = eights.min\n        val ninesMax = nines.max\n        val ninesMin = nines.min\n        val onesMaxLen = onesMax.length\n        val twosMaxLen = twosMax.length\n        val threesMaxLen = threesMax.length\n        val foursMaxLen = foursMax.length\n        val fivesMaxLen = fivesMax.length\n        val sixesMaxLen = sixesMax.length\n        val sevensMaxLen = sevensMax.length\n        val eight\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp91ropny3.scala:69:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp91ropny3.scala:61:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m61 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesMaxLen\u001b[0m = onesMax.length\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         value length is not a member of Long\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp91ropny3.scala:62:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtwosMaxLen\u001b[0m = twosMax.length\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         value length is not a member of Long\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp91ropny3.scala:63:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m63 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mthreesMaxLen\u001b[0m = threesMax.length\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           value length is not a member of Long\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp91ropny3.scala:64:35 ------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfoursMaxLen\u001b[0m = foursMax.length\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          value length is not a member of Long\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp91ropny3.scala:65:35 ------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfivesMaxLen\u001b[0m = fivesMax.length\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          value length is not a member of Long\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp91ropny3.scala:66:35 ------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msixesMaxLen\u001b[0m = sixesMax.length\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          value length is not a membe",
      "stdout": "",
      "timestamp": 1659804092
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x >= 1 && x <= 9).toList\n        val tens = arr.filter(x => x >= 10 && x <= 99).toList\n        val hundreds = arr.filter(x => x >= 100 && x <= 999).toList\n        val thousands = arr.filter(x => x >= 1000 && x <= 9999).toList\n        val tenThousands = arr.filter(x => x >= 10000 && x <= 99999).toList\n        val oneThousands = arr.filter(x => x >= 100000 && x <= 999999).toList\n        val oneHundreds = arr.filter(x => x >= 1000000 && x <= 999999999).toList\n        val oneThousandHundreds = arr.filter(x => x >= 1000000000 && x <= 99999999999).toList\n        val oneThousandThousandHundreds = arr.filter(x => x >= 100000000000 && x <= 999999999999).toList\n        val oneThousandThousandThousandHundreds = arr.filter(x => x >= 1000000000000 && x <= 999999999999999).toList\n        val oneThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000 && x <= 9999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000000 && x <= 99999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 9999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 99999999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x => x >= 100000000000000000 && x <= 999999999999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThous\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp9481x58k.scala:38:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmp9481x58k.scala:28:74 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x <= \u001b[31m99999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp9481x58k.scala:29:63 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000\u001b[0m && x <= \u001b[31m999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp9481x58k.scala:29:84 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000\u001b[0m && x <= \u001b[31m999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                    ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp9481x58k.scala:30:71 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandThousandThousandHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000000\u001b[0m && x <= \u001b[31m999999999999999\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                                                       ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp9481",
      "stdout": "",
      "timestamp": 1659804091
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x < 10)\n        val tens = arr.filter(x => x >= 10 && x < 100)\n        val hundreds = arr.filter(x => x >= 100 && x < 1000)\n        val thousands = arr.filter(x => x >= 1000)\n        val hundredsAndThousands = arr.filter(x => x >= 1000 && x < 10000)\n        val tensAndThousands = arr.filter(x => x >= 10000 && x < 100000)\n        val onesAndTens = arr.filter(x => x >= 100000 && x < 1000000)\n        val onesAndHundreds = arr.filter(x => x >= 1000000 && x < 10000000)\n        val onesAndThousands = arr.filter(x => x >= 10000000 && x < 100000000)\n        val onesAndHundredsAndThousands = arr.filter(x => x >= 100000000 && x < 1000000000)\n        val onesAndHundredsAndThousandsAndTens = arr.filter(x => x >= 1000000000 && x < 10000000000)\n        val onesAndHundredsAndThousandsAndHundreds = arr.filter(x => x >= 10000000000 && x < 100000000000)\n        val onesAndHundredsAndThousandsAndHundredsAndTens = arr.filter(x => x >= 100000000000 && x < 1000000000000)\n        val onesAndHundredsAndThousandsAndHundredsAndHundreds = arr.filter(x => x >= 1000000000000 && x < 10000000000000)\n        val onesAndHundredsAndThousandsAndHundredsAndHundredsAndTens = arr.filter(x => x >= 10000000000000 && x < 100000000000000)\n        val onesAndHundredsAndThousandsAndHundredsAndHundredsAndHundreds = arr.filter(x => x >= 100000000000000 && x < 1000000000000000)\n        val onesAndHundredsAndThousandsAndHundredsAndHundredsAndHundredsAndTens = arr.filter(x => x >= 1000000000000000 && x < 10000000000000000)\n        val onesAndHundredsAndThousandsAndHundredsAndHundredsAndHundredsAndHundreds = arr.filter(x => x >= 10000000000000000 && x < 100000000000000000)\n        val onesAndHundredsAndThousandsAndHundredsAndHundredsAndHundredsAndHundredsAndTens = arr.filter(x => x >= 100000000000000000 && x < 1000000000000000000)\n        val onesAndHundredsAndThousandsAndHund\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp3rxupf_0.scala:41:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmp3rxupf_0.scala:31:88 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesAndHundredsAndThousandsAndTens\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m1000000000\u001b[0m && x < \u001b[31m10000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp3rxupf_0.scala:32:74 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesAndHundredsAndThousandsAndHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000\u001b[0m && x < \u001b[31m100000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp3rxupf_0.scala:32:93 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesAndHundredsAndThousandsAndHundreds\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m10000000000\u001b[0m && x < \u001b[31m100000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                             ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp3rxupf_0.scala:33:81 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesAndHundredsAndThousandsAndHundredsAndTens\u001b[0m = arr.filter(\u001b[36mx\u001b[0m => x >= \u001b[31m100000000000\u001b[0m && x < \u001b[31m1000000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                 ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     ",
      "stdout": "",
      "timestamp": 1659804091
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(_ <= 9).sorted\n        val tens = arr.filter(_ <= 99).sorted\n        val hundreds = arr.filter(_ <= 999).sorted\n        val thousands = arr.filter(_ <= 9999).sorted\n        val tenThousands = arr.filter(_ <= 999999).sorted\n        val oneThousands = arr.filter(_ <= 9999999).sorted\n        val oneHundreds = arr.filter(_ <= 999999999).sorted\n        val oneThousandHundreds = arr.filter(_ <= 99999999999).sorted\n        val oneThousandThousandHundreds = arr.filter(_ <= 999999999).sorted\n        val oneHundredThousandHundreds = arr.filter(_ <= 99999999999).sorted\n        val oneHundredThousandThousandHundreds = arr.filter(_ <= 99999999999).sorted\n        val oneThousandThousandThousandHundreds = arr.filter(_ <= 99999999999).sorted\n        val oneHundredThousandThousandThousandHundreds = arr.filter(_ <= 99999999999).sorted\n        val oneHundredThousandThousandThousandHundreds = arr.filter(_ <= 99999999999).sorted\n        val oneHundredThousandThousandThousandThousandHundreds = arr.filter(_ <= 99999999999).sorted\n        val oneHundredThousandThousandThousandThousandHundreds = arr.filter(_ <= 99999999999).sorted\n        val oneHundredThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 99999999999).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 99999999999).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 99999999999).sorted\n        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousandHundreds = arr.filter(_ <= 99999999999).sorted\n        val oneHundredThousandThousandThousandThousand\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpuoo8ocvo.scala:42:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpuoo8ocvo.scala:34:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m99999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneHundredThousandThousandThousandHundreds is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneHundredThousandThousandThousandHundreds\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpuoo8ocvo.scala:36:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousandThousandThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m99999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneHundredThousandThousandThousandThousandHundreds is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneHundredThousandThousandThousandThousandHundreds\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- Error: /tmp/tmpuoo8ocvo.scala:28:50 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m99999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpuoo8ocvo.scala:30:57 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandHundreds\u001b[0m = arr.filter(_ <= \u001b[31m99999999999\u001b[0m).sorted\n\u001b[31m\u001b[31m   |\u001b[",
      "stdout": "",
      "timestamp": 1659804092
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(_ <= 9).sortBy(_ - 1).reverse\n        val tens = arr.filter(_ <= 99).sortBy(_ - 10).reverse\n        val hundreds = arr.filter(_ <= 999).sortBy(_ - 100).reverse\n        val thousands = arr.filter(_ <= 9999).sortBy(_ - 1000).reverse\n        val tenThousands = arr.filter(_ <= 999999).sortBy(_ - 10000).reverse\n        val oneThousands = arr.filter(_ <= 9999999).sortBy(_ - 100000).reverse\n        val oneHundreds = arr.filter(_ <= 999999999).sortBy(_ - 1000000).reverse\n        val oneThousandThousands = arr.filter(_ <= 99999999999).sortBy(_ - 10000000).reverse\n        val oneHundredThousands = arr.filter(_ <= 999999999999).sortBy(_ - 10000000).reverse\n        val oneHundredThousandThousands = arr.filter(_ <= 999999999999999).sortBy(_ - 100000000).reverse\n        val oneHundredThousandThousands = arr.filter(_ <= 9999999999999999).sortBy(_ - 1000000000).reverse\n        val oneHundredThousandThousands = arr.filter(_ <= 9999999999999999999).sortBy(_ - 10000000000).reverse\n        val oneHundredThousandThousands = arr.filter(_ <= 99999999999999999999).sortBy(_ - 100000000000).reverse\n        val oneHundredThousandThousands = arr.filter(_ <= 99999999999999999999999).sortBy(_ - 1000000000000).reverse\n        val oneHundredThousandThousands = arr.filter(_ <= 999999999999999999999999).sortBy(_ - 10000000000000).reverse\n        val oneHundredThousandThousands = arr.filter(_ <= 999999999999999999999999999).sortBy(_ - 100000000000000).reverse\n        val oneHundredThousandThousands = arr.filter(_ <= 9999999999999999999999999999).sortBy(_ - 1000000000000000).reverse\n        val oneHundredThousandThousands = arr.filter(_ <= 9999999999999999999999999999999).sortBy(_ - 10000000000000000).reverse\n        val oneHundredThousandThousands = arr.filter(_ <= 9999999999999999\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpvwljaakg.scala:40:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpvwljaakg.scala:31:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m9999999999999999\u001b[0m).sortBy(_ - \u001b[31m1000000000\u001b[0m).reverse\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneHundredThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneHundredThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpvwljaakg.scala:32:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m9999999999999999999\u001b[0m).sortBy(_ - \u001b[31m10000000000\u001b[0m).reverse\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneHundredThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneHundredThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpvwljaakg.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36moneHundredThousandThousands\u001b[0m = arr.filter(_ <= \u001b[31m99999999999999999999\u001b[0m).sortBy(_ - \u001b[31m100000000000\u001b[0m).reverse\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0moneHundredThousandThousands is already defined as \u001b[33mvalue\u001b[0m \u001b[35moneHundredThousandThousands\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of topleve",
      "stdout": "",
      "timestamp": 1659804032
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x % 10 == 1)\n        val tens = arr.filter(x => x % 10 == 0)\n        val reversed = ones\n            .reverse\n            .zip(tens)\n            .map(x => x._1 + \" \" + x._2)\n            .toList\n        val onesAndTens = ones\n            .zip(tens)\n            .map(x => x._1 + \" \" + x._2)\n            .toList\n        val onesAndTensAndOnes = ones\n            .zip(tens)\n            .map(x => x._1 + \" \" + x._2)\n            .zip(ones)\n            .map(x => x._1 + \" \" + x._2)\n            .toList\n        val onesAndTensAndOnesAndOnes = ones\n            .zip(tens)\n            .map(x => x._1 + \" \" + x._2)\n            .zip(ones)\n            .map(x => x._1 + \" \" + x._2)\n            .zip(ones)\n            .map(x => x._1 + \" \" + x._2)\n            .toList\n        val onesAndTensAndOnesAndOnesAndOnes = ones\n            .zip(tens)\n            .map(x => x._1 + \" \" + x._2)\n            .zip(ones)\n            .map(x => x._1 + \" \" + x._2)\n            .zip(ones)\n            .map(x => x._1 + \" \" + x._2)\n            .zip(ones)\n            .map(x => x._1 + \" \" + x._2)\n            .toList\n        val onesAndTensAndOnesAndOnesAndOnesAndOnes = ones\n            .zip(tens)\n            .map(x => x._1 + \" \" + x._2)\n            .zip(ones)\n            .map(x => x._1 + \" \" + x._2)\n            .zip(ones)\n            .map(x => x._1 + \" \" + x._2)\n            .zip(ones)\n            .map(x => x._1 + \" \" + x._2)\n            .zip(ones)\n            .map(x => x._1 + \" \" + x._2)\n            .toList\n        val onesAndTensAndOnesAndOnesAndOnesAndOnesAndOnes = ones\n            .zip(tens)\n            .map(x => x._1 + \" \" + x._2)\n            .zip(ones)\n            .map(x => x._1 + \" \" + x._2)\n            .zip(ones)\n            .map(x => x._1 + \" \" + x._2)\n            .zip(ones)\n            .map(x => x._1 + \" \" + x._2)\n            .zip(ones)\n            .map(x => x._1 + \" \" + x._2)\n            .zip(ones)\n            .map(x => \n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp5m_t3owu.scala:80:21 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m80 |\u001b[0m            .map(x => \n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5m_t3owu.scala:81:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m81 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804092
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If the array is empty, return an empty array:\n    // arr = []\n    // return []\n    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55] \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n    // return = ['One']\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones = arr.filter(x => x % 10 == 1)\n        val tens = arr.filter(x => x % 10 == 0)\n        val tensReversed = tens.reverse\n        val onesReversed = ones.reverse\n        val onesReversedWithTens = onesReversed.zip(tensReversed)\n        val onesReversedWithTensReversed = onesReversedWithTens.reverse\n        val onesReversedWithTensReversedWithOnes = onesReversedWithTensReversed.zip(onesReversed)\n        val onesReversedWithTensReversedWithOnesReversed = onesReversedWithTensReversedWithOnes.reverse\n        val onesReversedWithTensReversedWithOnesReversedWithTens = onesReversedWithTensReversedWithOnesReversed.zip(tensReversed)\n        val onesReversedWithTensReversedWithOnesReversedWithTensReversed = onesReversedWithTensReversedWithOnesReversedWithTens.reverse\n        val onesReversedWithTensReversedWithOnesReversedWithTensReversedWithOnes = onesReversedWithTensReversedWithOnesReversedWithTensReversed.zip(onesReversed)\n        val onesReversedWithTensReversedWithOnesReversedWithTensReversedWithOnesReversed = onesReversedWithTensReversedWithOnesReversedWithTensReversedWithOnes.reverse\n        val onesReversedWithTensReversedWithOnesReversedWithTensReversedWithOnesReversedWithTens = onesReversedWithTensReversedWithOnesReversedWithTensReversedWithOnesReversed.zip(tensReversed)\n        val onesReversedWithTensReversedWithOnesReversedWithTensReversedWithOnesReversedWithTensReversed = onesReversedWithTensReversedWithOnesReversedWithTensReversedWithOnesReversedWithTensReversed.reverse\n        val onesReversedWithTensReversedWithOnesReversedWithTensReversedWithOnesReversedWithTensReversedWithOnes = onesReversedWithTensReversedWithOnesReversedWithTensReversedWithOnesReversedWithTensReversed.zip(onesReversed)\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr_moh1d0.scala:34:107 --------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36monesReversedWithTensReversedWithOnesReversedWithTensReversedWithOnesReversedWithTensReversed\u001b[0m = onesReversedWithTensReversedWithOnesReversedWithTensReversedWithOnesReversedWithTensReversed.reverse\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                           ^\u001b[0m\n\u001b[31m   |\u001b[0mRecursive \u001b[33mvalue\u001b[0m \u001b[35m\n\u001b[31m   |\u001b[0m  onesReversedWithTensReversedWithOnesReversedWithTensReversedWithOnesReversedWithTensReversed\n\u001b[31m   |\u001b[0m\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr_moh1d0.scala:36:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659804092
    }
  ]
}