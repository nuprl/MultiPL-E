name: HumanEval_94_skjkasdkd
language: rs
prompt: "/// You are given a list of integers.\n/// You need to find the largest prime\
  \ value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst: Vec<isize>)\
  \ -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
  \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
  \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
  \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
  \ 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0, 724,\
  \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
  \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
  \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
  \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
  }\n"
completions: ["    let mut largest = 0;\n    for &x in lst.iter() {\n        if x\
    \ > largest && is_prime(x) {\n            largest = x;\n        }\n    }\n   \
    \ sum_digits(largest)", '    return lst.iter().map(|x| x.to_string()).collect::<Vec<String>>().join("").parse::<isize>().unwrap();',
  "    let mut max: isize = 0;\n    for x in lst {\n        if is_prime(x) && x >\
    \ max {\n            max = x;\n        }\n    }\n    max", "    let mut lst =\
    \ lst;\n    lst.sort();\n    lst.reverse();\n    let mut lst = lst;\n    lst.iter().fold(0,\
    \ |acc, cur| acc + cur)", "    // your code here\n    let mut ans = 0;\n    let\
    \ mut best = 0;\n    for value in lst {\n        if is_prime(value) {\n      \
    \      let mut n = value;\n            let mut s = 0;\n            while n > 0\
    \ {\n                s += n % 10;\n                n /= 10;\n            }\n \
    \           if s > ans {\n                ans = s;\n                best = value;\n\
    \            }\n        }\n    }\n    best", "    let mut lst: Vec<isize> = lst.iter().filter(|x|\
    \ is_prime(*x)).collect();\n    let mut lst: Vec<isize> = lst.iter().map(|x| (x\
    \ / 10) + (x % 10)).collect();\n    lst.into_iter().sum()", "    let mut biggest\
    \ = 0;\n    for i in lst {\n        if i < 0 {\n            continue;\n      \
    \  }\n        if is_prime(i) {\n            if i > biggest {\n               \
    \ biggest = i;\n            }\n        }\n    }\n    return vec_to_int(biggest);",
  "  let mut lst = lst;\n  lst.sort();\n  let lst = lst;\n  lst[lst.len() - 1]", " \
    \   let mut map = HashMap::new();\n    let mut primes = HashSet::new();\n    let\
    \ mut max = 0;\n    let mut prime_max = 0;\n    for num in lst {\n        if num\
    \ < 2 {\n            continue;\n        }\n        if primes.contains(&num) {\n\
    \            continue;\n        }\n        max = num;\n        if let Some(v)\
    \ = map.get(&num) {\n            max = *v.iter().max().unwrap();\n           \
    \ continue;\n        }\n        for i in 2..num {\n            if num % i == 0\
    \ {\n                max = i;\n                let mut div = num / i;\n      \
    \          if let Some(v) = map.get(&div) {\n                    for n in v {\n\
    \                        max = n.max(max);\n                    }\n          \
    \      } else {\n                    map.insert(div, vec![i]);\n             \
    \   }\n                break;\n            }\n        }\n        primes.insert(num);\n\
    \        prime_max = max.max(prime_max);\n    }\n    prime_max", "    let mut\
    \ sum = 0;\n    let mut max = 0;\n    for i in &lst {\n        if *i < 0 {\n \
    \           continue;\n        }\n        if is_prime(*i) {\n            if *i\
    \ > max {\n                max = *i;\n            }\n        }\n    }\n    if\
    \ max == 0 {\n        return 0;\n    }\n\n    while max > 0 {\n        sum +=\
    \ max % 10;\n        max /= 10;\n    }\n    sum", "    let mut max_prime = 1;\n\
    \    for n in lst {\n        let mut j = 2;\n        while j * j <= n {\n    \
    \        if n % j == 0 {\n                break;\n            }\n            j\
    \ += 1;\n        }\n        if j * j > n {\n            max_prime = max_prime.max(n);\n\
    \        }\n    }\n    max_prime.to_string()\n        .chars()\n        .map(|s|\
    \ s.to_digit(10).unwrap() as isize)\n        .sum()", "    let primes: Vec<isize>\
    \ = lst.iter().filter(|&n| is_prime(*n)).collect();\n    let mut max_prime = -1;\n\
    \    for p in primes {\n        if p > max_prime {\n            max_prime = p;\n\
    \        }\n    }\n    if max_prime == -1 {\n        return 0;\n    }\n\n    let\
    \ mut sum = 0;\n    let mut value = max_prime;\n    while value > 0 {\n      \
    \  sum += value % 10;\n        value /= 10;\n    }\n    sum", "    let mut l =\
    \ lst.clone();\n    l.sort();\n    let mut v = l.last().unwrap();\n    while *v\
    \ % 2 == 0 {\n        v = &l[l.len() - 2];\n    }\n    let sum = v.to_string().chars().filter_map(|x|\
    \ x.to_digit(10)).sum::<u32>();\n    sum as isize", "    let mut primes = Primes::new();\n\
    \    let mut cur = 0;\n    for i in lst {\n        if primes.is_prime(i) {\n \
    \           cur = i;\n        }\n    }\n    let mut sum = 0;\n    let mut k =\
    \ cur;\n    while k > 0 {\n        sum += k % 10;\n        k /= 10;\n    }\n \
    \   sum", "    use std::collections::HashMap;\n    let mut prime = HashMap::new();\n\
    \    for x in lst {\n        let mut y = x;\n        let mut sum = 0;\n      \
    \  while y > 0 {\n            sum += y % 10;\n            y /= 10;\n        }\n\
    \        prime.insert(x, sum);\n    }\n    let mut max = (0, 0);\n    for (k,\
    \ v) in prime {\n        if v > max.1 {\n            max = (k, v);\n        }\n\
    \    }\n    max.0", "    let mut primes: Vec<isize> = vec![];\n    for i in 2..lst.len()\
    \ {\n        let mut is_prime = true;\n        for j in 2..i {\n            if\
    \ i % j == 0 {\n                is_prime = false;\n                break;\n  \
    \          }\n        }\n        if is_prime {\n            primes.push(i);\n\
    \        }\n    }\n    let primes = primes;\n    let mut lst = lst;\n    lst.sort();\n\
    \    let mut res = 0;\n    for i in primes {\n        res += i;\n    }\n    res",
  '    lst.iter().filter(|&x| is_prime(*x)).max().unwrap().to_string().chars().map(|d|
    d.to_digit(10).unwrap() as isize).sum()', "    let mut lst = lst;\n    lst.sort();\n\
    \    lst.iter().rev().take(2).fold(0, |acc, x| acc + x)", "    let mut it = lst.iter();\n\
    \    let mut prime = *it.next().unwrap();\n    for i in it {\n        if i % prime\
    \ == 0 {\n            prime = *i;\n        }\n    }\n    prime.to_string().chars().map(|x|\
    \ x.to_digit(10).unwrap() as isize).sum()", "    let mut largest_prime = 0;\n\
    \    for n in lst {\n        for i in 2..=n {\n            if n % i == 0 && n\
    \ != i {\n                break;\n            } else if n == i {\n           \
    \     if n > largest_prime {\n                    largest_prime = n;\n       \
    \         }\n            }\n        }\n    }\n    largest_prime", "    let mut\
    \ lst_primes: Vec<isize> = vec![];\n    let mut lst_non_primes: Vec<isize> = vec![];\n\
    \    let mut _first_prime: Option<isize> = None;\n    let mut _last_prime: Option<isize>\
    \ = None;\n    let mut _first_non_prime: Option<isize> = None;\n    let mut _last_non_prime:\
    \ Option<isize> = None;\n    for _v in lst {\n        if pn(_v as u64) {\n   \
    \         lst_primes.push(_v);\n        } else {\n            lst_non_primes.push(_v);\n\
    \        }\n    }\n    let mut _max: Option<isize> = None;\n    if lst_primes.len()\
    \ > 0 {\n        _first_prime = Some(lst_primes[0]);\n        _last_prime = Some(lst_primes[lst_primes.len()\
    \ - 1]);\n        _max = Some(_last_prime.unwrap());\n    }\n    if lst_non_primes.len()\
    \ > 0 {\n        _first_non_prime = Some(lst_non_primes[0]);\n        _last_non_prime\
    \ = Some(lst_non_primes[lst_non_primes.len() - 1]);\n    }\n    if _max.is_some()\
    \ {\n        println!(\"_max: {:?}\", _max);\n        println!(\"_first_prime:\
    \ {:?}\", _first_prime);\n        println!(\"_last_prime: {:?}\", _last_prime);\n\
    \        println!(\"_first_non_prime: {:?}\", _first_non_prime);\n        println!(\"\
    _last_non_prime: {:?}\", _last_non_prime);\n        let mut _lst_digits: Vec<isize>\
    \ = vec![];\n        let mut _s: String = _max.unwrap().to_string();\n       \
    \ let mut _v: Vec<&str> = _s.split(\"\").collect();\n        let mut _sv: Vec",
  "    // 123\n    // 1 + 2 + 3 = 6\n    lst.iter().fold(0, |acc, val| acc + val)",
  '    lst.iter().fold(0, |acc, i| acc + i)', "    let mut lst = lst;\n    let mut\
    \ temp = lst.len();\n    let mut i = 0;\n    while i < temp {\n        let val\
    \ = lst[i];\n        let mut j = 0;\n        let mut can_check = true;\n     \
    \   while j < temp {\n            if val % lst[j] == 0 && lst[j] != val {\n  \
    \              can_check = false;\n                break;\n            }\n   \
    \         j += 1;\n        }\n        if can_check {\n            return val;\n\
    \        }\n        i += 1;\n    }\n    return 0;", '    lst.iter().filter(|&&i|
    is_prime(i)).max().unwrap().to_string().chars().map(|d| d.to_digit(10).unwrap()
    as isize).sum()', '    return 0;', "    let mut hm = HashMap::new();\n    for\
    \ i in lst {\n        *hm.entry(i).or_insert(0) += 1;\n    }\n    let mut set:\
    \ HashSet<_> = hm.keys().cloned().collect();\n    let mut v = vec![];\n    for\
    \ i in hm.keys() {\n        if !set.contains(i) {\n            continue;\n   \
    \     }\n        for j in (2..=i.abs()).rev() {\n            if j == 1 {\n   \
    \             v.push(*i);\n                continue;\n            }\n        \
    \    if (i % j) == 0 {\n                set.remove(i);\n                break;\n\
    \            }\n        }\n    }\n    let mut v: Vec<isize> = v.into_iter().filter(|x|\
    \ x > &&0).collect();\n    v.sort();\n    let s = v.pop().unwrap();\n    let mut\
    \ sum = 0;\n    while s > 0 {\n        sum += s % 10;\n        s /= 10;\n    }\n\
    \    sum", "    let mut result = 1;\n    for i in lst {\n        result *= i;\n\
    \    }\n    result", "    let mut largest = 0;\n    for elem in lst {\n      \
    \  if elem > largest {\n            if elem % 2 != 0 {\n                if elem\
    \ % 3 != 0 {\n                    if elem % 5 != 0 {\n                       \
    \ if elem % 7 != 0 {\n                            largest = elem;\n          \
    \              }\n                    }\n                }\n            }\n  \
    \      }\n    }\n    let mut sum = 0;\n    let mut tmp = largest;\n    loop {\n\
    \        sum += tmp % 10;\n        tmp /= 10;\n        if tmp == 0 {\n       \
    \     break;\n        }\n    }\n    sum", "    let mut result = 0;\n    let mut\
    \ max_prime: Option<isize> = None;\n    for n in lst {\n        if n > result\
    \ {\n            let mut prime = true;\n            for m in 2..n {\n        \
    \        if n % m == 0 {\n                    prime = false;\n               \
    \     break;\n                }\n            }\n            if prime {\n     \
    \           result = n;\n                max_prime = Some(n);\n            }\n\
    \        }\n    }\n    match max_prime {\n        Some(x) => sum_digits(x),\n\
    \        None => 0,\n    }", "  let mut res = 0;\n  for n in lst {\n    let mut\
    \ counter = 0;\n    for i in 0..n {\n      if n % i == 0 {\n        counter +=\
    \ 1;\n      }\n    }\n    if counter == 2 {\n      res += n;\n    }\n  }\n  res",
  "    let mut result = 0;\n    for i in lst {\n        if i % 2 == 0 {\n        \
    \    result += i;\n        }\n    }\n    result", "    let mut m = 0;\n    for\
    \ x in lst {\n        if is_prime(x) && x > m {\n            m = x;\n        }\n\
    \    }\n    m", "    let mut max = 0;\n    for i in lst {\n        if is_prime(i)\
    \ && i > max {\n            max = i;\n        }\n    }\n    let mut ret = 0;\n\
    \    let mut m = max;\n    while m > 0 {\n        ret += m % 10;\n        m /=\
    \ 10;\n    }\n    ret", "    match largest_prime_number(lst) {\n        Some(n)\
    \ => n,\n        None => -1,\n    }", "    let mut max = 0;\n    for number in\
    \ lst {\n        if max < number {\n            max = number;\n        }\n   \
    \ }\n    fn prime(n: isize) -> bool {\n        for i in 2..n {\n            if\
    \ n % i == 0 {\n                return false;\n            }\n        }\n    \
    \    true\n    }\n    let mut sum = 0;\n    for j in 2..max {\n        if prime(j)\
    \ {\n            let mut m = j;\n            while m > 0 {\n                sum\
    \ += m % 10;\n                m /= 10;\n            }\n        }\n    }\n    sum",
  "    let mut a: Vec<isize> = lst.iter().map(|x| (x.abs() as f64).sqrt() as isize).collect();\n\
    \    a.dedup();\n    a.iter().sum()", "    let mut sum = 0;\n    let mut max =\
    \ 0;\n    for i in lst {\n        if is_prime(i) {\n            if i > max {\n\
    \                max = i;\n            }\n        }\n    }\n    while max > 0\
    \ {\n        sum += max % 10;\n        max /= 10;\n    }\n    sum", "    let mut\
    \ s = 0;\n    for i in &lst {\n        s += i.abs();\n    }\n    s", "  let mut\
    \ k: Vec<isize> = Vec::new();\n  for x in &lst {\n    if prime::is_prime(*x) {\n\
    \      k.push(*x);\n    }\n  }\n  if k.len() != 0 {\n    let max = k.iter().max().unwrap();\n\
    \    let mut sum: isize = 0;\n    let mut num = *max;\n    while num > 0 {\n \
    \     sum += num % 10;\n      num /= 10;\n    }\n    return sum;\n  }\n  return\
    \ 0;", "    let mut l: isize = 0;\n    for i in lst {\n        let mut k: isize\
    \ = 0;\n        for j in 2..i {\n            if i % j == 0 {\n               \
    \ k += 1;\n            }\n        }\n        if k == 0 {\n            if i > l\
    \ {\n                l = i;\n            }\n        }\n    }\n    let mut q: isize\
    \ = 0;\n    while l > 0 {\n        q += l % 10;\n        l /= 10;\n    }\n   \
    \ q", "    let k: isize = lst.iter().map(|x| *x).fold(0, |x, y| {\n        let\
    \ mut b = y;\n        while !is_prime(b) {\n            b -= 1;\n        }\n \
    \       if b > x {\n            b\n        } else {\n            x\n        }\n\
    \    });\n    let mut k = k;\n    let mut r = 0;\n    while k > 0 {\n        r\
    \ += k % 10;\n        k /= 10;\n    }\n    r", "    let mut result = 0;\n    for\
    \ item in lst {\n        if is_prime(item) {\n            result = item;\n   \
    \     }\n    }\n    let mut digit = 0;\n    for d in result.to_string().chars()\
    \ {\n        digit += d.to_digit(10).unwrap() as isize;\n    }\n    return digit;",
  '    lst.iter().fold(0, |acc, x| acc + x)', "    let mut lst: Vec<isize> = lst;\n\
    \    lst.sort();\n    let m = lst.last().unwrap();\n    let x = *m;\n    let mut\
    \ y = 0;\n    while x != 0 {\n        y += x % 10;\n        x /= 10;\n    }\n\
    \    y", "    let mut larget_prime = 0;\n    for num in lst {\n        if is_prime(num)\
    \ {\n            if num > larget_prime {\n                larget_prime = num;\n\
    \            }\n        }\n    }\n    sum_digits(larget_prime)", "    if lst.len()\
    \ == 0 {\n        return 0;\n    }\n    let mut largest = 0;\n    for x in lst\
    \ {\n        if is_prime(x) && x > largest {\n            largest = x;\n     \
    \   }\n    }\n    get_digits(largest).iter().sum()", '    lst.iter().filter(|&x|
    x > 1 && (2..x).all(|y| x % y != 0)).max().unwrap().to_string().parse::<isize>().unwrap()',
  "    let mut res = isize::min_value();\n    let mut s = isize::min_value();\n  \
    \  for i in lst {\n        if prim(i) {\n            s = i;\n            if res\
    \ < s {\n                res = s;\n            }\n        }\n    }\n    sum_digits(res)",
  "  let mut primes: Vec<isize> = Vec::new();\n  for i in 0..lst.len() {\n    for\
    \ j in 0..lst.len() {\n      if lst[i] % lst[j] == 0 && i != j {\n        primes.push(lst[i]);\n\
    \      }\n    }\n  }\n  primes.sort();\n  primes.reverse();\n  return primes[0];",
  "    use std::collections::HashMap;\n    let mut map = HashMap::new();\n    for\
    \ n in lst {\n        *map.entry(n).or_insert(0) += 1;\n    }\n    let mut max\
    \ = 0;\n    for (key, value) in map {\n        if value > max {\n            max\
    \ = value;\n        }\n    }\n    max", "    let mut list: Vec<isize> = Vec::new();\n\
    \    let mut num: Vec<isize> = Vec::new();\n    let mut num1: Vec<isize> = Vec::new();\n\
    \    let mut num_main: Vec<isize> = Vec::new();\n    let mut sum = 0;\n    let\
    \ mut k = 0;\n    let mut n = lst.len();\n    let mut s;\n    let mut m;\n   \
    \ let mut o;\n    let mut p;\n    let mut q;\n    let mut w;\n    let mut a;\n\
    \    let mut b;\n    let mut c;\n    let mut e;\n    let mut f;\n    let mut g;\n\
    \    let mut h;\n    let mut j;\n    let mut kek = 0;\n    let mut r;\n    let\
    \ mut t;\n    for i in 0..n {\n        list.push(lst[i]);\n    }\n    for _i in\
    \ 0..n {\n        if list[k] > kek {\n            kek = list[k];\n        }\n\
    \        k += 1;\n    }\n    for _i in 0..kek {\n        num.push(0);\n    }\n\
    \    for _i in 0..kek {\n        num1.push(0);\n    }\n    for _i in 0..n {\n\
    \        num_main.push(0);\n    }\n    k = 0;\n    n = num.len();\n    while k\
    \ < n {\n        if k == 0 {\n            s = 0;\n            m = 0;\n       \
    \     o = 0;\n            p = 0;\n            q = 0;\n            w = 0;\n   \
    \         a = 0;\n            b = 0;\n            c = 0;\n            e = 0;\n\
    \            f = 0;\n            g = 0;\n            h = 0;\n            j = 0;\n\
    \            r = 0;\n            t = 0;\n        }\n        if num[k] == 2 {\n\
    \            s += 1;\n        }\n        if num[k] == 3 {\n            m += 1;\n\
    \        }\n        if num[k] == 5 {\n            o += 1", "    let lst: Vec<u32>\
    \ = lst.iter().map(|x| *x as u32).collect();\n    let (a, _) = lst.iter().fold((0,\
    \ 0), |acc, v| {\n        let (largest, sum) = acc;\n        if largest == 0 {\n\
    \            return acc;\n        }\n        if largest < *v {\n            (largest,\
    \ sum)\n        } else {\n            (largest, sum + largest)\n        }\n  \
    \  });\n    a as isize", "    let mut largest = 1;\n    for i in lst {\n     \
    \   if i >= largest && is_prime(i) {\n            largest = i;\n        }\n  \
    \  }\n    //println!(\"{}\", largest);\n    return sum_digits(largest);", "  \
    \  let mut max = 0;\n    for x in lst {\n        if (x as f64).sqrt() == (x as\
    \ f64).sqrt().floor() {\n            continue;\n        }\n        let mut m =\
    \ x / 2;\n        let mut d = x;\n        while d * d > x {\n            if x\
    \ % d == 0 {\n                return 0;\n            }\n            d -= 1;\n\
    \        }\n        max = x;\n    }\n    let mut sum = 0;\n    let mut number\
    \ = max;\n    while number > 0 {\n        sum += number % 10;\n        number\
    \ /= 10;\n    }\n    sum", "    let mut lst = lst;\n    let mut found = false;\n\
    \    let mut res = 0;\n    lst.sort();\n    lst.reverse();\n    for i in lst {\n\
    \        if i == 1 {\n            continue;\n        }\n        let mut is_prime\
    \ = true;\n        for j in 2..i {\n            if i % j == 0 {\n            \
    \    is_prime = false;\n                break;\n            }\n        }\n   \
    \     if is_prime {\n            res = i;\n            found = true;\n       \
    \     break;\n        }\n    }\n    let mut sum = 0;\n    if found {\n       \
    \ let mut tmp = res;\n        while tmp > 0 {\n            sum += tmp % 10;\n\
    \            tmp /= 10;\n        }\n    }\n    sum", "    let mut lst = lst;\n\
    \    lst.sort();\n    let lst: Vec<isize> = lst.into_iter().rev().collect();\n\
    \    for i in lst {\n        if divisors(i).len() == 1 {\n            return i;\n\
    \        }\n    }\n    -1", "    let mut largest = 0;\n    for i in lst {\n  \
    \      if is_prime(i) && i > largest {\n            largest = i;\n        }\n\
    \    }\n    if largest == 0 {\n        0\n    } else {\n        let mut sum =\
    \ 0;\n        for i in 0..largest.to_string().len() {\n            sum += largest.to_string().chars().nth(i).unwrap().to_digit(10).unwrap()\
    \ as isize;\n        }\n        sum\n    }", "    use std::cmp::max;\n    let\
    \ mut max_val = 0;\n    for &val in lst.iter() {\n        if is_prime(val) {\n\
    \            max_val = max(max_val, val);\n        }\n    }\n    sum_digits(max_val)",
  "    let mut lst = lst;\n    lst.sort();\n    lst.reverse();\n    for x in lst {\n\
    \        let mut x = x;\n        loop {\n            if x <= 0 {\n           \
    \     break;\n            }\n            if check_prime(x) {\n               \
    \ break;\n            }\n            x -= 1;\n        }\n        let mut sum =\
    \ 0;\n        loop {\n            if x == 0 {\n                break;\n      \
    \      }\n            sum += x % 10;\n            x /= 10;\n        }\n      \
    \  return sum;\n    }\n    0", "    let mut max = -1;\n    for n in lst {\n  \
    \      if n > max && is_prime(n) {\n            max = n;\n        }\n    }\n \
    \   return sum_digits(max);", "    let mut iter = lst.iter();\n    let mut largest_prime\
    \ = 0;\n    while let Some(value) = iter.next() {\n        if let Some(value_prime)\
    \ = is_prime(value) {\n            if value_prime > largest_prime {\n        \
    \        largest_prime = value_prime;\n            }\n        }\n    }\n    return\
    \ largest_prime;", "    // Write your code here\n    let mut n = 0;\n    let mut\
    \ prime_numbers = vec![];\n    while n <= lst.len() {\n        if lst[n] % 2 !=\
    \ 0 {\n            prime_numbers.push(lst[n]);\n        }\n        n += 1;\n \
    \   }\n    let primes = prime_numbers.iter().fold(0, |acc, x| acc + x);\n    let\
    \ mut str_sum = primes.to_string();\n    let mut numbers = vec![];\n    for c\
    \ in str_sum.chars() {\n        let x = c.to_string().parse::<isize>().unwrap();\n\
    \        numbers.push(x);\n    }\n    let sum = numbers.iter().fold(0, |acc, x|\
    \ acc + x);\n    sum", "    //let mut tst = 0;\n    let mut mx = 0;\n    for x\
    \ in lst {\n        if is_prime(x) && mx < x {\n            mx = x;\n        }\n\
    \    }\n    //println!(\"{}\", mx);\n    mx.to_string().chars().fold(0, |sum,\
    \ el| sum + el.to_digit(10).unwrap() as isize)", '    return 1', '    return 0;',
  "    if lst.len() == 0 {\n        return 0;\n    }\n    let mut i = lst.iter().max().unwrap();\n\
    \    while !is_prime(*i) {\n        i -= 1;\n    }\n    let mut res = *i;\n  \
    \  while res > 0 {\n        *i += res % 10;\n        res /= 10;\n    }\n    *i",
  '    isize::pow(lst.iter().max().unwrap(),2)', "    let mut lst: Vec<isize> = lst.iter().map(|x|\
    \ x.abs()).collect();\n    lst.sort();\n    lst.reverse();\n    let mut lst: Vec<isize>\
    \ = lst.iter().map(|x| x.abs()).collect();\n    let mut lst_prime = Vec::new();\n\
    \    for x in lst {\n        if is_prime(x) {\n            lst_prime.push(x);\n\
    \        }\n    }\n    lst_prime.sort();\n    lst_prime.reverse();\n    let mut\
    \ lst_prime = lst_prime.iter().map(|x| x.abs()).collect();\n    let new = lst_prime[0];\n\
    \    let mut i = 0;\n    let mut s: String = new.to_string();\n    let mut sum:\
    \ isize = 0;\n    while i < s.len() {\n        let x = s.remove(i);\n        let\
    \ y = x.to_string().parse::<isize>().unwrap();\n        sum += y;\n    }\n   \
    \ sum", "    let mut lgprm: isize = 0;\n    for it in lst {\n        let mut primes\
    \ = vec![];\n        let mut bla = it;\n        while bla > 1 {\n            for\
    \ j in 2..(bla + 1) {\n                if bla % j == 0 {\n                   \
    \ primes.push(j);\n                    bla = bla / j;\n                    break;\n\
    \                }\n            }\n        }\n        let mut s: isize = 0;\n\
    \        for it in primes {\n            s += it;\n        }\n        if s > lgprm\
    \ {\n            lgprm = s;\n        }\n    }\n    return lgprm;", '    unimplemented!()',
  "    let a = lst\n        .iter()\n        .filter(|&x| is_prime(*x))\n        .cloned()\n\
    \        .max()\n        .unwrap();\n    a.to_string()\n        .chars()\n   \
    \     .map(|x| x.to_digit(10).unwrap() as isize)\n        .sum()", "    let mut\
    \ vec = lst.clone();\n    vec.sort();\n    vec.iter().rev().collect::<Vec<_>>()[0]",
  '    lst.iter().max().unwrap().to_string().chars().map(|c| c.to_digit(10).unwrap()
    as isize).sum()', '    0', "    let mut max = 0;\n    for x in lst {\n       \
    \ if is_prime(x) && x > max {\n            max = x;\n        }\n    }\n    let\
    \ mut sum = 0;\n    let mut tmp = max;\n    while tmp > 0 {\n        sum += tmp\
    \ % 10;\n        tmp /= 10;\n    }\n    sum", "    let mut lst = lst;\n    lst.sort();\n\
    \    lst.reverse();\n    for number in lst {\n        if is_prime(number) {\n\
    \            let mut number = number;\n            let mut sum = 0;\n        \
    \    while number != 0 {\n                sum += number % 10;\n              \
    \  number /= 10;\n            }\n            return sum;\n        }\n    }\n \
    \   0", "    let mut max: isize = 0;\n    for item in lst {\n        if is_prime(item)\
    \ && item > max {\n            max = item;\n        }\n    }\n    return max;",
  "    // You are given a list of integers.\n    // You need to find the largest prime\
    \ value and return the sum of its digits.\n    // Examples:\n    let lst = lst;\n\
    \    // Input: list = [12, 33, 44, 55, 66, 67, 3]\n    // Output: 18\n    // Explanation:\n\
    \    // The largest prime is 67 and the sum of its digits is 8.\n    let mut sum\
    \ = 0;\n    let mut largest = 0;\n    for i in lst {\n        let is_prime = vec![i].iter().all(|&x|\
    \ (2..x).all(|y| x % y != 0));\n        if is_prime {\n            if i > largest\
    \ {\n                largest = i;\n            }\n        }\n    }\n    let str_number\
    \ = largest.to_string();\n    let vec_number: Vec<char> = str_number.chars().collect();\n\
    \    for i in vec_number {\n        let k: Vec<char> = vec![i];\n        let k\
    \ = k.join(\"\");\n        sum += k.parse::<isize>().unwrap();\n    }\n    return\
    \ sum;", "    let mut primes: Vec<usize> = vec![];\n    for i in 1..lst.len()\
    \ {\n        if is_prime(i) {\n            primes.push(i);\n        }\n    }\n\
    \    let mut m: usize = 0;\n    for i in primes {\n        if i > m {\n      \
    \      m = i;\n        }\n    }\n    let mut sum: isize = 0;\n    let mut n: usize\
    \ = m;\n    while n > 0 {\n        sum += (n % 10) as isize;\n        n /= 10;\n\
    \    }\n    sum", "    let mut prime_factors: Vec<isize> = Vec::new();\n    for\
    \ i in &lst {\n        if *i == 0 {\n            continue;\n        }\n      \
    \  if is_prime(*i) {\n            prime_factors.push(*i);\n        } else {\n\
    \            let mut lst = get_factors(*i);\n            lst.sort();\n       \
    \     let mut i = 0;\n            while i < lst.len() {\n                let n\
    \ = lst[i];\n                if is_prime(n) {\n                    prime_factors.push(n);\n\
    \                }\n                i += 1;\n            }\n        }\n    }\n\
    \    prime_factors.sort();\n    let mut sum = 0;\n    for n in prime_factors.pop().unwrap().to_string().chars()\
    \ {\n        sum += n.to_digit(10).unwrap() as isize;\n    }\n    sum", "  let\
    \ mut s = lst.iter().filter(|&x| x > &1).filter(|&x| {\n    let mut d = 2;\n \
    \   while d * d <= *x {\n      if x % d == 0 {\n        return false;\n      }\n\
    \      d += 1;\n    }\n    true\n  }).max().unwrap();\n  let mut total = 0;\n\
    \  while s > 0 {\n    total += s % 10;\n    s /= 10;\n  }\n  total", "    let\
    \ mut list: Vec<isize> = lst;\n    let mut res = 0;\n    let i = list.len() -\
    \ 1;\n    for i in 0..i {\n        if list[i] > res {\n            res = list[i];\n\
    \        }\n    }\n    res", "  // write your code here\n  if let Some(largest_prime)\
    \ = lst.iter().filter(|&x| is_prime(*x)).max() {\n    return sum_digits(*largest_prime)\n\
    \  }\n  return 0", "    let mut primes: Vec<_> = eratosthenes_primes::PrimeIter::new()\n\
    \        .filter(|x| x < &50000)\n        .collect();\n    let mut lprimes: Vec<_>\
    \ = primes.iter().map(|x| *x as isize).collect();\n    let mut lprimes_n: Vec<_>\
    \ = lprimes.iter().map(|x| *x as isize).collect();\n    let mut lprimes_nn: Vec<_>\
    \ = lprimes_n.iter().map(|x| *x as isize).collect();\n    let mut lprimes_nnn:\
    \ Vec<_> = lprimes_nn.iter().map(|x| *x as isize).collect();\n    let mut lprimes_nnnn:\
    \ Vec<_> = lprimes_nnn.iter().map(|x| *x as isize).collect();\n    let mut lprimes_nnnnn:\
    \ Vec<_> = lprimes_nnnn.iter().map(|x| *x as isize).collect();\n    lprimes.append(&mut\
    \ lprimes_n);\n    lprimes.append(&mut lprimes_nn);\n    lprimes.append(&mut lprimes_nnn);\n\
    \    lprimes.append(&mut lprimes_nnnn);\n    lprimes.append(&mut lprimes_nnnnn);\n\
    \    lprimes.sort();\n    lprimes.dedup();\n    lprimes.sort_by(|a, b| b.cmp(a));\n\
    \    let mut numbers: Vec<_> = lst.iter().map(|x| *x as isize).collect();\n  \
    \  for x in lprimes {\n        let mut in_vec = false;\n        for i in &numbers\
    \ {\n            if *i % x == 0 {\n                in_vec = true;\n          \
    \  }\n        }\n        if in_vec {\n            return x;\n        }\n    }\n\
    \    0", "    let mut largest = 0;\n    for i in &lst {\n        let mut j = 2;\n\
    \        let mut is_prime = true;\n        while j <= (i / 2) {\n            if\
    \ i % j == 0 {\n                is_prime = false;\n                break;\n  \
    \          }\n            j += 1;\n        }\n        if is_prime {\n        \
    \    if *i > largest {\n                largest = *i;\n            }\n       \
    \ }\n    }\n    let mut sum = 0;\n    let mut s: String = largest.to_string();\n\
    \    for c in s.chars() {\n        sum += c.to_digit(10).unwrap() as isize;\n\
    \    }\n    sum", "    let mut max = 0;\n    for x in lst {\n        let (mut\
    \ i, mut is_prime) = (2, true);\n        while i < x && is_prime {\n         \
    \   if x % i == 0 {\n                is_prime = false;\n            }\n      \
    \      i += 1;\n        }\n        if is_prime && x > max {\n            max =\
    \ x;\n        }\n    }\n    let mut sum = 0;\n    let mut max_str = max.to_string();\n\
    \    for c in max_str.chars() {\n        sum += c.to_digit(10).unwrap() as isize;\n\
    \    }\n    sum", '    0', "    return lst\n        .iter()\n        .filter(|&x|\
    \ is_prime(*x))\n        .fold(0, |acc, x| acc + x)\n        .to_string()\n  \
    \      .chars()\n        .map(|x| x.to_digit(10).unwrap() as isize)\n        .sum::<isize>();",
  "    let mut lst = lst;\n    lst.sort();\n    lst.reverse();\n    for i in lst {\n\
    \        if is_prime(i) {\n            return i.to_string().chars().map(|a| a.to_digit(10).unwrap()\
    \ as isize).sum()\n        }\n    }\n    0", "    let mut prime_list: Vec<isize>\
    \ = Vec::new();\n    let mut largest_prime: isize = 0;\n    for num in lst {\n\
    \        if is_prime(num) {\n            largest_prime = num;\n            prime_list.push(num);\n\
    \        }\n    }\n    let mut sum = 0;\n    while largest_prime > 0 {\n     \
    \   sum += largest_prime % 10;\n        largest_prime /= 10;\n    }\n    sum",
  '    lst.iter().fold(0, |acc, val| acc + *val).to_string().chars().map(|x| x.to_digit(10).unwrap()
    as isize).sum()', "    let mut prime_lst: Vec<isize> = Vec::new();\n    // let\
    \ mut prime_lst:Vec<isize> = Vec::new();\n    for i in lst {\n        let mut\
    \ count = 0;\n        for j in 2..i {\n            if i % j == 0 {\n         \
    \       count += 1;\n            }\n        }\n        if count == 0 {\n     \
    \       prime_lst.push(i);\n        }\n    }\n    println!(\"{:?}\", prime_lst);\n\
    \    let max = prime_lst.iter().max().unwrap();\n    let mut sum = 0;\n    for\
    \ i in max.to_string().chars() {\n        sum += i.to_digit(10).unwrap() as isize;\n\
    \    }\n    return sum;", "    lst.iter().fold(0, |a, v| {\n        if is_prime(*v)\
    \ {\n            return a + v.to_string().chars().map(|d| d.to_digit(10).unwrap()\
    \ as isize).sum::<isize>();\n        }\n        a\n    })", "    let mut prime_numbers:\
    \ Vec<usize> = vec![];\n    let mut max_prime = 0;\n    for i in 2..lst.len()\
    \ {\n        if lst[i] % 2 != 0 {\n            prime_numbers.push(i);\n      \
    \  }\n    }\n    max_prime = prime_numbers[prime_numbers.len() - 1];\n    for\
    \ prime in prime_numbers {\n        for i in 1..max_prime {\n            if prime\
    \ % i == 0 {\n                let index = prime_numbers.iter().position(|&r| r\
    \ == prime).unwrap();\n                prime_numbers.remove(index);\n        \
    \    }\n        }\n    }\n    println!(\"{:?}\", prime_numbers);\n    max_prime\
    \ = prime_numbers[prime_numbers.len() - 1];\n    max_prime as isize", '    unimplemented!()',
  "    //lst.into_iter().map(|x| x.to_string()).collect::<Vec<String>>().join(\"\"\
    ).to_string()\n    let mut res: isize = 0;\n    let mut primes: Vec<isize> = Vec::new();\n\
    \    let mut seen: HashSet<isize> = HashSet::new();\n    let mut i: isize = 1;\n\
    \    while seen.len() < lst.len() {\n        if is_prime(i) {\n            for\
    \ x in lst.clone() {\n                if x % i == 0 && !seen.contains(&x) {\n\
    \                    seen.insert(x);\n                    primes.push(i);\n  \
    \              }\n            }\n        }\n        i += 1;\n    }\n    for x\
    \ in primes {\n        res += prime_digits(x);\n    }\n    res", "    let mut\
    \ max = lst[0];\n    for i in lst {\n        if i > max {\n            max = i;\n\
    \        }\n    }\n    let mut prime = 0;\n    for j in 2..max {\n        let\
    \ mut count = 0;\n        for k in 2..j {\n            if j % k == 0 {\n     \
    \           count += 1;\n            }\n        }\n        if count == 0 {\n \
    \           prime = j;\n        }\n    }\n    let mut sum = 0;\n    let mut tmp\
    \ = prime;\n    while tmp > 0 {\n        sum += tmp % 10;\n        tmp /= 10;\n\
    \    }\n    sum", "    let mut largest_prime: isize = -1;\n    for num in lst\
    \ {\n        if num % 2 == 0 {\n            continue;\n        }\n\n        let\
    \ mut not_prime = false;\n        for n in 3..num / 2 {\n            if num %\
    \ n == 0 {\n                not_prime = true;\n                break;\n      \
    \      }\n        }\n\n        if not_prime {\n            continue;\n       \
    \ }\n        if num > largest_prime {\n            largest_prime = num;\n    \
    \    }\n    }\n\n    let mut sum = 0;\n    while largest_prime > 0 {\n       \
    \ sum += largest_prime % 10;\n        largest_prime /= 10;\n    }\n    sum", " \
    \   let mut result = 0;\n    let mut prime = 0;\n    for i in lst {\n        let\
    \ mut isprime = true;\n        for j in 2..i {\n            if i % j == 0 {\n\
    \                isprime = false;\n                break;\n            }\n   \
    \     }\n        if isprime {\n            if i > prime {\n                prime\
    \ = i;\n            }\n        }\n    }\n    let mut remainder = prime;\n    while\
    \ remainder != 0 {\n        result += remainder % 10;\n        remainder /= 10;\n\
    \    }\n    result", "    let mut result = lst[0];\n    for i in 1..lst.len()\
    \ {\n        result = skjkasdk(result, lst[i]);\n    }\n    result", "    let\
    \ mut res = 0;\n    for i in lst {\n        let mut val = i;\n        let mut\
    \ q = 0;\n        let mut prev = 1;\n        while val > 1 {\n            q +=\
    \ 1;\n            if val % q == 0 {\n                if q > prev {\n         \
    \           prev = q;\n                }\n                val /= q;\n        \
    \        q = 1;\n            }\n        }\n        res += prev;\n    }\n    res",
  '    lst.iter().fold(0, |acc, el| acc + el)', '    lst.iter().fold(0, |acc, x| acc
    + x)', "    let mut result = 0;\n    let mut max = 0;\n    for i in lst {\n  \
    \      if i >= max {\n            max = i;\n        }\n    }\n    for j in lst\
    \ {\n        if j == max {\n            if is_prime(j) {\n                result\
    \ = sum_digits(j);\n            }\n        }\n    }\n    result", "    let mut\
    \ max: isize = 0;\n    for n in lst {\n        if n > max && is_prime(n) {\n \
    \           max = n;\n        }\n    }\n    return sum_digits(max);", "    let\
    \ max = lst.iter().max().unwrap();\n    let mut max_copy = *max;\n    let mut\
    \ max_final: isize = 0;\n    while max_copy != 0 {\n        if prime(max_copy)\
    \ {\n            max_final = max_copy;\n            break;\n        }\n      \
    \  max_copy -= 1;\n    }\n    let mut max_final_copy = max_final;\n    let mut\
    \ sum = 0;\n    while max_final_copy != 0 {\n        sum += max_final_copy % 10;\n\
    \        max_final_copy /= 10;\n    }\n    sum", "    use std::num::Wrapping;\n\
    \    let mut lst: Vec<isize> = lst.into_iter().filter(|x| x != &1).collect();\n\
    \    let mut res = Vec::new();\n    let mut n = 0;\n    while n < lst.len() {\n\
    \        res.push(lst[n]);\n        for j in n..lst.len() {\n            lst[j]\
    \ = (Wrapping(lst[j]) / Wrapping(lst[n])).0;\n        }\n        n += 1;\n   \
    \ }\n    res.into_iter().filter(|x| *x > 1).max().unwrap()", "    let mut max_prime\
    \ = 0;\n    for n in lst {\n        if n > max_prime && is_prime(n) {\n      \
    \      max_prime = n;\n        }\n    }\n    return max_prime;", "    let mut\
    \ lst = lst;\n    lst.sort();\n    println!(\"{:?}\", lst);\n    lst.reverse();\n\
    \    println!(\"{:?}\", lst);\n    let r = lst[0];\n    let sum = r.to_string().chars().map(|x|\
    \ x.to_digit(10).unwrap()).sum::<u32>();\n    sum as isize", "    let mut lst\
    \ = lst;\n    lst.sort();\n    lst.iter().rev().nth(0).unwrap()", '    lst.iter().fold(1,
    |acc, x| acc * x)', "    let mut out: isize = 0;\n    let mut d = lst.iter().max().unwrap();\n\
    \    while *d > 1 {\n        if is_prime(*d) {\n            out = sum_digits(*d);\n\
    \            break;\n        }\n        d -= 1;\n    }\n    out", "    let mut\
    \ ret = 0;\n    if let Some(max) = lst.iter().max() {\n        let largest_prime\
    \ = p99::prime_pairs().skip_while(|&(p, _)| p < *max).next().unwrap().0;\n   \
    \     let sd = largest_prime.to_string();\n        for c in sd.chars() {\n   \
    \         let n = c.to_digit(10).unwrap();\n            ret += n as isize;\n \
    \       }\n    }\n    ret", "    let mut lst: Vec<isize> = lst.into_iter().filter(|x|\
    \ x.is_prime()).collect();\n    lst.sort();\n    let mut lst: Vec<String> = lst.iter().map(|x|\
    \ x.to_string()).collect();\n    let mut lst: String = lst.pop().unwrap();\n \
    \   let mut lst: Vec<char> = lst.chars().collect();\n    let mut count: isize\
    \ = 0;\n    while !lst.is_empty() {\n        count += lst.pop().unwrap().to_digit(10).unwrap()\
    \ as isize;\n    }\n    count", "  let mut lst2 = lst.clone();\n  lst2.sort();\n\
    \  let n = lst2.len();\n  for i in (2..).take_while(|x| x * x <= lst2[n - 1])\
    \ {\n    for j in (0..n).rev() {\n      if lst2[j] == 1 {\n        return lst2.iter().fold(0,\
    \ |a, &b| a + b);\n      }\n      if lst2[j] % i == 0 {\n        lst2[j] /= i;\n\
    \      }\n    }\n  }\n  lst2.iter().fold(0, |a, &b| a + b)", "    let mut v: Vec<_>\
    \ = lst.iter().filter(|x| *x > &1 && *x < &100).collect();\n    v.sort();\n  \
    \  v.dedup();\n    println!(\"{:?}\", v);\n    v.iter().fold(0, |acc, x| acc +\
    \ x)", "    // A prime number is a natural number greater than 1 that has no positive\
    \ divisors other than 1 and itself.\n    let mut lst = lst;\n    lst.sort();\n\
    \    // Need to check there is at least one value in the array\n    if lst.len()\
    \ < 1 {\n        return 0;\n    }\n    let mut current_index = 0;\n    let mut\
    \ current_prime = lst[current_index];\n    let mut current_max = lst[current_index];\n\
    \    let mut current_count = 1;\n    let mut current_greatest_count = 1;\n   \
    \ let mut current_greatest_prime = current_prime;\n    let mut finished = false;\n\
    \    while !finished {\n        current_index += 1;\n        // println!(\"Current:\
    \ {:?}\", current_index);\n        // println!(\"Max: {:?}\", lst.len());\n  \
    \      if current_index == lst.len() {\n            finished = true;\n       \
    \     break;\n        }\n        if lst[current_index] == current_max {\n    \
    \        current_count += 1;\n        } else {\n            current_max = lst[current_index];\n\
    \            if current_count > current_greatest_count {\n                current_greatest_count\
    \ = current_count;\n                current_greatest_prime = current_prime;\n\
    \            }\n            current_count = 1;\n            current_prime = lst[current_index];\n\
    \        }\n    }\n    if current_count > current_greatest_count {\n        current_greatest_prime\
    \ = current_prime;\n    }\n    let mut ret = 0;\n    let current_max_prime_str\
    \ = current_greatest_prime.to_string();\n    for d in current_max_prime_str.chars()\
    \ {\n        let chr = d.to_string();\n        let chr_num = chr.parse::<isize>().unwrap();\n\
    \        ret += chr_num;\n    }\n    return ret;", "    if lst.is_empty() {\n\
    \        return 0;\n    }\n    let mut is_prime = vec![false; lst.len()];\n  \
    \  for (ind, elem) in lst.iter().enumerate() {\n        let is_prime_tmp = is_prime_number(*elem);\n\
    \        is_prime[ind] = is_prime_tmp;\n    }\n    let mut max_prime = 0;\n  \
    \  for (ind, elem) in lst.iter().enumerate() {\n        if is_prime[ind] && elem\
    \ > &max_prime {\n            max_prime = *elem;\n        }\n    }\n    let mut\
    \ result = 0;\n    let mut num = max_prime;\n    while num > 0 {\n        result\
    \ += num % 10;\n        num /= 10;\n    }\n    result", '    lst.iter().filter(|x|
    is_prime(x)).max().unwrap()', "    let mut sum = 0;\n    let mut max = 0;\n  \
    \  for item in lst {\n        if is_prime(item) {\n            max = item;\n \
    \       }\n    }\n    let mut i = max;\n    while i > 0 {\n        sum += i %\
    \ 10;\n        i /= 10;\n    }\n    sum", "    let mut lst: Vec<isize> = lst.into_iter().filter(|&x|\
    \ is_prime(x)).collect();\n    lst.sort();\n    lst.pop().unwrap()", "    let\
    \ mut lst = lst;\n    lst.sort();\n    println!(\"{:?}\", lst);\n    let mut prime_list\
    \ = Vec::new();\n    let mut sum_list = Vec::new();\n    for i in 0..lst.len()\
    \ {\n        if is_prime(lst[i]) {\n            prime_list.push(lst[i]);\n   \
    \     }\n    }\n    if prime_list.len() == 0 {\n        return 0;\n    }\n   \
    \ let mut largest_prime = prime_list[0];\n    for i in 0..prime_list.len() {\n\
    \        if prime_list[i] > largest_prime {\n            largest_prime = prime_list[i];\n\
    \        }\n    }\n    sum_list = int_to_vec(largest_prime);\n    let mut sum\
    \ = 0;\n    for i in 0..sum_list.len() {\n        sum += sum_list[i];\n    }\n\
    \    sum", "  let mut lst_temp = lst.clone();\n  lst_temp.sort();\n  lst_temp.reverse();\n\
    \  for elem in lst_temp {\n    if is_prime(elem) {\n      let mut sum: isize =\
    \ 0;\n      let mut temp = elem;\n      while temp > 0 {\n        sum += temp\
    \ % 10;\n        temp /= 10;\n      }\n      return sum;\n    }\n  }\n  return\
    \ 0;", "    let mut max = 0;\n    for i in lst {\n        if is_prime(i) && i\
    \ > max {\n            max = i;\n        }\n    }\n    sum_digits(max)", '    lst.iter().filter(|x|
    is_prime(*x)).max().unwrap().to_string().chars().map(|x| x.to_digit(10).unwrap()
    as isize).sum()', '  unimplemented!();', '    lst.iter().filter(|&x| is_prime(*x)).max().unwrap().to_string().chars().map(|c|
    c.to_digit(10).unwrap() as isize).sum()', "    let mut primes: Vec<isize> = vec![];\n\
    \    let mut i = 0;\n    while primes.len() < lst.len() {\n        if is_prime(lst[i])\
    \ {\n            primes.push(lst[i]);\n        }\n        i += 1;\n    }\n   \
    \ let mut sum = 0;\n    for c in primes.last().unwrap().to_string().chars() {\n\
    \        sum += c.to_digit(10).unwrap() as isize;\n    }\n    sum", "    let l\
    \ = lst.iter().max().unwrap();\n    let l = l.to_string();\n    let mut l_total\
    \ = 0;\n    for i in l.chars() {\n        l_total += i.to_digit(10).unwrap() as\
    \ isize;\n    }\n    l_total", "    for i in (0..lst.len()).rev() {\n        if\
    \ lst[i] % 2 != 0 {\n            return lst[i] + 1;\n        }\n    }\n    return\
    \ 0;", "    let mut lst: Vec<isize> = lst;\n    let mut lst: Vec<isize> = lst.iter().filter(|&x|\
    \ {\n        *x > 0\n    }).collect();\n    lst.sort();\n    let largest_prime\
    \ = lst.last().unwrap();\n    let mut sum: isize = 0;\n    for c in largest_prime.to_string().chars()\
    \ {\n        sum += c.to_digit(10).unwrap() as isize;\n    }\n    sum", "    let\
    \ mut prod = 1;\n    for i in lst {\n        prod *= i;\n    }\n    let mut val\
    \ = prod;\n    let mut p = 2;\n    while p * p <= val {\n        if val % p ==\
    \ 0 {\n            val /= p;\n        } else {\n            p += 1;\n        }\n\
    \    }\n    if val == 1 {\n        p\n    } else {\n        val\n    }", "   \
    \ if lst.len() == 0 {\n        return 0;\n    }\n    lst.iter().max().unwrap().to_string().chars().map(|d|\
    \ d.to_digit(10).unwrap() as isize).sum()", "    let mut lst = lst;\n    lst.sort();\n\
    \    lst.reverse();\n    for n in lst {\n        if n % 2 != 0 && n % 3 != 0 &&\
    \ n % 5 != 0 && n % 7 != 0 {\n            return n % 10 + n / 10;\n        }\n\
    \    }\n    0", "    let mut primes = vec![];\n    for i in lst {\n        if\
    \ is_prime(i) {\n            primes.push(i);\n        }\n    }\n    let largest_prime\
    \ = primes.iter().fold(0, |acc, x| {\n        if acc < *x {\n            *x\n\
    \        } else {\n            acc\n        }\n    });\n    let mut digits = vec![];\n\
    \    let mut n = largest_prime;\n    while n > 0 {\n        digits.push(n % 10);\n\
    \        n /= 10;\n    }\n    digits.iter().fold(0, |acc, x| acc + x)", "    let\
    \ mut nums = lst;\n    nums.sort();\n    nums.reverse();\n    for n in nums {\n\
    \        if is_prime(n) {\n            return n.to_string().chars().map(|s| s.to_digit(10).unwrap()\
    \ as isize).sum();\n        }\n    }\n    0", "    let mut lst: Vec<isize> = lst;\n\
    \    let mut largest_prime: isize = 0;\n    lst.sort();\n    for n in &lst {\n\
    \        for a in 0..n {\n            if n % a == 0 {\n                largest_prime\
    \ = n;\n            }\n        }\n    }\n    largest_prime", '    return lst.iter().fold(1,
    |acc, num| acc * num);', "    let mut lst = lst;\n    let l = lst.len();\n   \
    \ let mut mx = 0;\n    let mut mxi = 0;\n    for i in 0..l {\n        if lst[i]\
    \ > mx {\n            mx = lst[i];\n            mxi = i;\n        }\n    }\n \
    \   lst.remove(mxi);\n    let sum = lst.iter().sum();\n    sum + mx", "    let\
    \ mut largest_prime: isize = 0;\n    for item in lst {\n        let mut prime:\
    \ bool = true;\n        if item < 0 {\n            return -1;\n        }\n   \
    \     if item == 0 || item == 1 {\n            continue;\n        }\n        for\
    \ num in 2..item {\n            if item % num == 0 {\n                prime =\
    \ false;\n                break;\n            }\n        }\n        if prime {\n\
    \            if item > largest_prime {\n                largest_prime = item;\n\
    \            }\n        }\n    }\n    largest_prime", "    let mut lst_sort =\
    \ lst.clone();\n    lst_sort.sort();\n    let mut result: isize = 0;\n    for\
    \ i in lst_sort.iter().rev() {\n        if is_prime(*i) {\n            let mut\
    \ temp: isize = *i;\n            while temp > 0 {\n                result += temp\
    \ % 10;\n                temp /= 10;\n            }\n            break;\n    \
    \    }\n    }\n    result", "    // let mut a = 0;\n    let mut prim = 0;\n  \
    \  for elem in lst {\n        if is_prime(elem) && elem > prim {\n           \
    \ prim = elem;\n        }\n    }\n    return prim.to_string().chars().map(|x|\
    \ x.to_digit(10).unwrap() as isize).sum();", "    if lst.is_empty() {\n      \
    \  return 0;\n    }\n    let mut max = 0;\n    for i in &lst {\n        if i %\
    \ 2 == 0 {\n            continue;\n        }\n        if max < *i {\n        \
    \    max = *i;\n        }\n    }\n    let mut sum = 0;\n    while max > 0 {\n\
    \        sum += max % 10;\n        max /= 10;\n    }\n    sum", "    if lst.len()\
    \ == 0 {\n        return 0;\n    }\n    let mut prime = lst[0];\n    for l in\
    \ lst {\n        if l > prime && l % 2 != 0 {\n            prime = l;\n      \
    \  }\n    }\n    let mut sum = 0;\n    let mut a = prime;\n    while a > 0 {\n\
    \        sum += a % 10;\n        a /= 10;\n    }\n    sum", "    if lst.len()\
    \ == 0 {\n        return 0;\n    }\n    let big_prime = lst.iter().fold(0, |acc,\
    \ &n| {\n        let mut divisor = 2;\n        let mut candidate = n;\n      \
    \  let mut factors = vec![];\n        while divisor <= candidate {\n         \
    \   if candidate % divisor == 0 {\n                factors.push(divisor);\n  \
    \              candidate /= divisor;\n            } else {\n                divisor\
    \ += 1;\n            }\n        }\n        if factors.len() == 1 {\n         \
    \   n\n        } else {\n            acc\n        }\n    });\n    let mut sum\
    \ = 0;\n    let mut big_prime = big_prime;\n    while big_prime > 0 {\n      \
    \  sum += big_prime % 10;\n        big_prime /= 10;\n    }\n    sum", "    let\
    \ mut max = 0;\n    for x in lst {\n        if is_prime(x) && x > max {\n    \
    \        max = x;\n        }\n    }\n    digits(max).iter().fold(0, |x, y| x +\
    \ y)", "    let mut primes = Primes::new();\n    let mut max = isize::min_value();\n\
    \    for i in lst {\n        let mut v = i;\n        while v != 1 {\n        \
    \    if v > max {\n                max = v;\n            }\n            if let\
    \ Some(f) = primes.factor(v) {\n                v /= f;\n            } else {\n\
    \                primes.next();\n            }\n        }\n    }\n    digits(max).iter().sum()",
  "    let mut sum = 0;\n    let mut prime = 0;\n    for i in lst {\n        if i\
    \ > prime && is_prime(i) {\n            prime = i;\n        }\n    }\n    while\
    \ prime > 0 {\n        sum += prime % 10;\n        prime /= 10;\n    }\n    sum",
  "    let mut primes = vec![true; lst.len()];\n    let mut sieve = vec![];\n    let\
    \ mut sum = 0;\n    let mut primes_vec = vec![];\n    let mut j = 0;\n    for\
    \ i in 2..lst.len() {\n        if primes[i] {\n            sieve.push(i);\n  \
    \          primes_vec.push(i);\n            j += 1;\n        }\n        for k\
    \ in 0..j {\n            if i * sieve[k] >= lst.len() {\n                break;\n\
    \            }\n            primes[i * sieve[k]] = false;\n            if i %\
    \ sieve[k] == 0 {\n                break;\n            }\n        }\n    }\n \
    \   for prime in primes_vec {\n        for number in lst.clone() {\n         \
    \   if number == prime {\n                sum += prime;\n            }\n     \
    \   }\n    }\n    sum", "    let mut primes = vec![2, 3, 5, 7];\n    for i in\
    \ 1..10 {\n        let mut added = false;\n        for p in primes.iter() {\n\
    \            if i % p == 0 {\n                added = true;\n                break;\n\
    \            }\n        }\n        if !added {\n            primes.push(i);\n\
    \        }\n    }\n    println!(\"{:?}\", primes);\n    let mut max = 0;\n   \
    \ for i in lst.iter() {\n        let a = (i - 1) / 2;\n        if a > max {\n\
    \            max = a;\n        }\n    }\n    max", "    let mut primes: Vec<isize>\
    \ = Vec::new();\n    let mut current_number = 2;\n    while primes.len() < 2 {\n\
    \        let mut is_prime = true;\n        for x in (2..current_number).rev()\
    \ {\n            if current_number % x == 0 {\n                is_prime = false;\n\
    \                break;\n            }\n        }\n        if is_prime {\n   \
    \         primes.push(current_number);\n        }\n        current_number += 1;\n\
    \    }\n    let mut largest_prime = 0;\n    for x in lst {\n        let mut current_number\
    \ = x;\n        let mut found_prime = false;\n        for prime in primes.iter()\
    \ {\n            if current_number % prime == 0 {\n                found_prime\
    \ = true;\n                if *prime > largest_prime {\n                    largest_prime\
    \ = *prime;\n                }\n                current_number /= prime;\n   \
    \         }\n        }\n        if !found_prime {\n            primes.push(current_number);\n\
    \            if current_number > largest_prime {\n                largest_prime\
    \ = current_number;\n            }\n        }\n    }\n    let mut result = 0;\n\
    \    while largest_prime > 0 {\n        result += largest_prime % 10;\n      \
    \  largest_prime /= 10;\n    }\n    result", "    let mut primes: Vec<isize> =\
    \ vec![];\n    let mut max_prime = 0;\n    for item in lst {\n        let mut\
    \ is_prime = true;\n        for i in 2..item {\n            if item % i == 0 {\n\
    \                is_prime = false;\n                break;\n            }\n  \
    \      }\n        if is_prime {\n            primes.push(item);\n            if\
    \ item > max_prime {\n                max_prime = item;\n            }\n     \
    \   }\n    }\n    let mut digits: Vec<isize> = vec![];\n    for digit in max_prime.to_string().chars()\
    \ {\n        digits.push(digit.to_digit(10).unwrap() as isize);\n    }\n    let\
    \ mut total = 0;\n    for item in digits {\n        total += item;\n    }\n  \
    \  total", "    let prime = lst.iter().filter(|&&x| is_prime(x)).fold(0, |a, b|\
    \ a.max(*b));\n    prime.to_string().chars().map(|x| x.to_digit(10).unwrap() as\
    \ isize).sum()", "    if lst.len() == 0 {\n        return 0;\n    }\n    let mut\
    \ lst: Vec<usize> = lst.iter().map(|&x| x as usize).collect();\n    let mut s\
    \ = vec![0; lst.len()];\n    for i in 0..lst.len() {\n        if lst[i] == 0 {\n\
    \            continue;\n        }\n        s[i] = 1;\n        for j in i + 1..lst.len()\
    \ {\n            if lst[j] == 0 {\n                continue;\n            }\n\
    \            if lst[j] % lst[i] == 0 {\n                s[j] = 0;\n          \
    \      lst[j] = 0;\n            }\n        }\n    }\n    let mut x: usize = 0;\n\
    \    for (i, &v) in s.iter().enumerate() {\n        if v == 1 {\n            x\
    \ = i;\n        }\n    }\n    let mut ans = 0;\n    while lst[x] > 0 {\n     \
    \   ans += lst[x] % 10;\n        lst[x] /= 10;\n    }\n    ans as isize", "  \
    \  //     largest_prime_sum([10, 2, 15, 7, 20]) == 17\n    //     largest_prime_sum([10,\
    \ 30, 2, -15, 7, 20]) == 19\n    //     largest_prime_sum([10, 20, 30, 50, -15,\
    \ 7, 20]) == 23\n    //     largest_prime_sum([]) == 0\n    //     largest_prime_sum([2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157,\
    \ 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241,\
    \ 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347,\
    \ 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439,\
    \ 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547,\
    \ 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643,\
    \ 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751,\
    \ 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859,\
    \ 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977,\
    \ 983, 991, 997])", "    let mut result = 0;\n    let mut is_prime = true;\n \
    \   let mut max = 0;\n    for i in lst {\n        for j in 2..i {\n          \
    \  if i % j == 0 {\n                is_prime = false;\n                break;\n\
    \            }\n        }\n        if is_prime {\n            max = i;\n     \
    \   }\n        is_prime = true;\n    }\n    if max > 0 {\n        let s = max.to_string();\n\
    \        for i in s.chars() {\n            result += i.to_digit(10).unwrap() as\
    \ isize;\n        }\n    }\n\n    result", "    let mut largest = 0;\n    for\
    \ x in lst {\n        if x > largest {\n            if is_prime(x) {\n       \
    \         largest = x;\n            }\n        }\n    }\n    digits_sum(largest)",
  "    let mut answer = 0;\n    for x in lst {\n        if is_prime(x) {\n       \
    \     answer = x;\n        }\n    }\n    answer", "    let mut k = -1;\n    for\
    \ x in lst {\n        if x > k {\n            k = x;\n        }\n    }\n    if\
    \ k == -1 {\n        return 0;\n    }\n    let mut ans = 0;\n    while k > 0 {\n\
    \        ans += k % 10;\n        k /= 10;\n    }\n    ans", "    // TODO\n   \
    \ 0", "    let mut fout = 0;\n    for i in lst {\n        if is_prime(i) {\n \
    \           fout = i;\n        }\n    }\n    let mut sout = 0;\n    for i in fout.to_string().chars()\
    \ {\n        sout += i.to_digit(10).unwrap() as isize;\n    }\n    sout", '    0',
  '    0', "    if lst.len() == 0 {\n        return 0;\n    }\n    let mut f = lst.to_vec();\n\
    \    f.sort();\n    f.reverse();\n    let mut result = 0;\n    for p in &f {\n\
    \        if is_prime(*p) {\n            result = sum_of_digits(*p);\n        \
    \    break;\n        }\n    }\n    result", "    let mut res = 0;\n    let mut\
    \ prime = 0;\n    for i in lst {\n        if lst.iter().all(|&x| x % i != 0 ||\
    \ x == i) {\n            prime = i;\n        }\n    }\n    let mut it = prime;\n\
    \    while it > 0 {\n        res += it % 10;\n        it /= 10;\n    }\n    res",
  "    let mut sum = 0;\n    for num in lst {\n        sum += num;\n    }\n    let\
    \ mut largest_prime = 0;\n    for num in lst {\n        if is_prime(num) {\n \
    \           if num > largest_prime {\n                largest_prime = num;\n \
    \           }\n        }\n    }\n    let mut string = largest_prime.to_string();\n\
    \    let mut num_val = 0;\n    for ch in string.chars() {\n        let string\
    \ = ch.to_string();\n        let num = string.parse::<isize>().unwrap();\n   \
    \     num_val += num;\n    }\n    num_val", "    let mut x: isize = 0;\n    let\
    \ mut y: isize = 0;\n    for item in lst {\n        if is_prime(item) && item\
    \ > x {\n            x = item;\n        }\n    }\n    for n in x.to_string().chars()\
    \ {\n        let n = n.to_string().parse::<isize>().unwrap();\n        y += n;\n\
    \    }\n    y", "    let mut max = 0;\n    for i in lst {\n        if i > max\
    \ {\n            max = i;\n        }\n    }\n    if (max == 2) || (max == 3) {\n\
    \        return max;\n    }\n    let mut prime = 0;\n    for j in (max - 1)..=max\
    \ {\n        let mut flag = true;\n        for k in 2..j {\n            if j %\
    \ k == 0 {\n                flag = false;\n                break;\n          \
    \  }\n        }\n        if flag {\n            prime = j;\n            break;\n\
    \        }\n    }\n    let ans = prime.to_string();\n    let mut sum = 0;\n  \
    \  for i in ans.chars() {\n        let j = i.to_digit(10).unwrap();\n        sum\
    \ += j as isize;\n    }\n    sum", "    let mut res = 0;\n    for num in lst {\n\
    \        if num > res && is_prime(num) {\n            res = num;\n        }\n\
    \    }\n    res", '    lst.iter().fold(0, |acc, &x| acc + digits_sum(x))', " \
    \   let mut primes = vec![];\n    for el in lst {\n        let mut factor_sum\
    \ = 0;\n        for i in 2..el {\n            if el % i == 0 {\n             \
    \   factor_sum += 1;\n            }\n        }\n        if factor_sum == 0 {\n\
    \            primes.push(el);\n        }\n    }\n    let mut total = 0;\n    let\
    \ mut prime_sum = 0;\n    for el in primes {\n        if el > prime_sum {\n  \
    \          prime_sum = el;\n        }\n    }\n    while prime_sum > 0 {\n    \
    \    total += prime_sum % 10;\n        prime_sum /= 10;\n    }\n    total", " \
    \   if lst.len() == 0 {\n        return 0;\n    }\n    let mut val = isize::MIN;\n\
    \    for i in lst {\n        if i > val && is_prime(i) {\n            val = i;\n\
    \        }\n    }\n    if val == isize::MIN {\n        return 0;\n    }\n    let\
    \ mut sum = 0;\n    let mut val2 = val;\n    while val2 > 0 {\n        sum +=\
    \ val2 % 10;\n        val2 /= 10;\n    }\n    sum", "    let mut s = 0;\n    for\
    \ i in lst {\n        s += i;\n    }\n    s", "    let mut max_prime = 0;\n  \
    \  for i in lst {\n        for j in 2..i {\n            if i % j == 0 {\n    \
    \            break;\n            }\n            if j == i - 1 {\n            \
    \    max_prime = max(max_prime, i);\n            }\n        }\n    }\n    let\
    \ mut sum = 0;\n    let string = max_prime.to_string();\n    for i in string.chars()\
    \ {\n        sum += i.to_digit(10).unwrap() as isize;\n    }\n    sum", "  let\
    \ mut max_prime = 0;\n  for n in lst {\n    let prime = n.is_prime();\n    if\
    \ prime {\n      max_prime = max_prime.max(n);\n    }\n  }\n  return max_prime;",
  "    let mut first = false;\n    let mut last = false;\n    let mut result = 0;\n\
    \    let mut largest = 0;\n    for i in lst {\n        if i % 2 == 0 {\n     \
    \       continue;\n        }\n        for j in 2..i {\n            if i % j ==\
    \ 0 {\n                first = true;\n                break;\n            }\n\
    \        }\n        if first {\n            first = false;\n            continue;\n\
    \        }\n        if i >= largest {\n            largest = i;\n        }\n \
    \   }\n    while largest != 0 {\n        result += largest % 10;\n        largest\
    \ /= 10;\n    }\n    result", "    let mut nums = lst;\n    let mut primes = vec![];\n\
    \    let mut i = 0;\n    loop {\n        if nums[i] % 2 == 0 {\n            primes.push(nums[i]);\n\
    \            nums.remove(i);\n        }\n        i += 1;\n        if i == nums.len()\
    \ {\n            i = 0;\n        }\n        if nums.len() == 0 {\n           \
    \ break;\n        }\n    }\n    for j in 0..primes.len() {\n        for k in j..primes.len()\
    \ {\n            if primes[k] % primes[j] == 0 {\n                primes.remove(k);\n\
    \            }\n        }\n    }\n    let mut sum = 0;\n    let mut max = 0;\n\
    \    for l in 0..primes.len() {\n        if primes[l] > max {\n            max\
    \ = primes[l];\n        }\n    }\n    while max > 0 {\n        sum += max % 10;\n\
    \        max /= 10;\n    }\n    sum", "    if lst.len() == 0 {\n        return\
    \ 0;\n    }\n    let k = lst.iter().fold(lst[0], |k, &l| if l > k { l } else {\
    \ k });\n    let mut i = k;\n    while i > 1 {\n        if i.is_prime() {\n  \
    \          let mut ret = 0;\n            let mut k2 = i;\n            while k2\
    \ > 0 {\n                ret += k2 % 10;\n                k2 /= 10;\n        \
    \    }\n            return ret;\n        }\n        i -= 1;\n    }\n    0", " \
    \   let mut lst_iter = lst.iter();\n    let mut sum: isize = 0;\n    for i in\
    \ lst_iter {\n        let mut k: isize = *i;\n        let mut counter: isize =\
    \ 0;\n        if k == 1 {\n            continue;\n        }\n        for j in\
    \ 2..k {\n            if k % j == 0 {\n                counter += 1;\n       \
    \     }\n        }\n        if counter == 0 {\n            while k != 0 {\n  \
    \              sum += k % 10;\n                k /= 10;\n            }\n     \
    \   }\n    }\n    sum", "    let mut lst = lst;\n    lst.sort();\n    let mut\
    \ primes = vec![2];\n    for i in 3..lst[lst.len() - 1] {\n        let mut is_prime\
    \ = true;\n        for j in primes.iter() {\n            if i % j == 0 {\n   \
    \             is_prime = false;\n                break;\n            }\n     \
    \   }\n        if is_prime {\n            primes.push(i);\n        }\n    }\n\
    \    primes.sort();\n    let mut sum = 0;\n    for i in primes[primes.len() -\
    \ 1].to_string().chars() {\n        sum += i.to_digit(10).unwrap() as isize;\n\
    \    }\n    sum", "    let mut ttt: Vec<isize> = Vec::new();\n    let mut max\
    \ = 0;\n    for i in lst {\n        let mut x = 2;\n        let mut b = 0;\n \
    \       while x <= i {\n            if i % x == 0 {\n                b += 1;\n\
    \            }\n            x += 1;\n        }\n        if b == 1 {\n        \
    \    ttt.push(i);\n        }\n    }\n    max = *ttt.iter().max().unwrap();\n \
    \   let mut sum = 0;\n    while max > 0 {\n        sum += max % 10;\n        max\
    \ /= 10;\n    }\n    sum", "    let mut primes = Vec::new();\n    let mut skip\
    \ = false;\n    let mut max_prime = 0;\n    for i in lst {\n        if i == 1\
    \ {\n            continue;\n        }\n        for j in 2..i {\n            if\
    \ i % j == 0 {\n                skip = true;\n                break;\n       \
    \     }\n        }\n        if !skip {\n            primes.push(i);\n        }\n\
    \        skip = false;\n    }\n    primes.sort();\n    max_prime = primes[primes.len()\
    \ - 1];\n    println!(\"{:?}\", primes);\n    let mut sum = 0;\n    let mut digits\
    \ = Vec::new();\n    for j in max_prime.to_string().chars() {\n        digits.push(j.to_digit(10).unwrap());\n\
    \    }\n    for k in digits {\n        sum += k;\n    }\n    sum", "    use std::iter::Iterator;\n\
    \    use std::collections::HashSet;\n    let mut n = lst.into_iter().map(|x| x.abs()).max().unwrap();\n\
    \    let mut m = n;\n    while n > 1 {\n        let mut factors = HashSet::new();\n\
    \        let mut i = 2;\n        while i * i <= n {\n            if n % i == 0\
    \ {\n                factors.insert(i);\n                n /= i;\n           \
    \ } else {\n                i += 1;\n            }\n        }\n        if n >\
    \ 1 {\n            factors.insert(n);\n        }\n        if factors.len() ==\
    \ 1 {\n            break;\n        }\n        n = m;\n    }\n    n.to_string().chars().map(|x|\
    \ x.to_digit(10).unwrap() as isize).sum()", "    let temp: Vec<isize> = lst.iter().map(|n|\
    \ {\n        let r = is_prime(*n);\n        match r {\n            true => n,\n\
    \            false => 0,\n        }\n    }).collect();\n    let mut sum: isize\
    \ = 0;\n    let mut max: isize = 0;\n    for t in temp {\n        if t > max {\n\
    \            max = t;\n        }\n    }\n    if max == 0 {\n        return 0;\n\
    \    } else {\n        let c: Vec<char> = max.to_string().chars().collect();\n\
    \        for cc in c {\n            sum += cc.to_digit(10).unwrap() as isize;\n\
    \        }\n        return sum;\n    }", "    let mut lst2 = lst.iter().filter(|x|\
    \ x.is_prime()).collect::<Vec<&isize>>();\n    lst2.sort();\n    let res = format!(\"\
    {}\", lst2.pop().unwrap());\n    res.chars().map(|x| x.to_digit(10).unwrap() as\
    \ isize).sum()", "    let x = lst.iter().filter(|&y| is_prime(*y)).max().unwrap();\n\
    \    let mut ret = 0;\n    for i in x.to_string().chars() {\n        ret += i.to_digit(10).unwrap()\
    \ as isize;\n    }\n    ret", "    let mut largest = 0;\n    for (i, item) in\
    \ lst.iter().enumerate() {\n        let factor_lst = get_prime_factorization(&item);\n\
    \        let cur_prime = factor_lst[factor_lst.len() - 1];\n        if cur_prime\
    \ > largest {\n            largest = cur_prime;\n        }\n    }\n    let dig_lst\
    \ = get_digits(&largest);\n    let mut dig_sum = 0;\n    for dig in dig_lst {\n\
    \        dig_sum += dig;\n    }\n    dig_sum", "    let mut temp: Vec<isize> =\
    \ Vec::new();\n    let mut sum: isize = 0;\n    for i in lst {\n        temp.push(i);\n\
    \    }\n    sum += lst[0];\n    while sum > 10 {\n        let mut total: isize\
    \ = 0;\n        let mut a = 0;\n        while a < temp.len() {\n            let\
    \ mut val: isize = temp[a];\n            while val > 0 {\n                total\
    \ += val % 10;\n                val /= 10;\n            }\n            temp[a]\
    \ = total;\n            total = 0;\n            a += 1;\n        }\n        sum\
    \ = temp[0];\n    }\n    sum", '    lst.iter().filter(|&x| is_prime(*x)).max().unwrap().to_string().chars().map(|d|
    d.to_digit(10).unwrap() as isize).sum()', "    let rst = lst.iter().max().unwrap();\n\
    \    let mut temp = rst.clone();\n    let mut sum = 0;\n    while temp > 0 {\n\
    \        sum += temp % 10;\n        temp /= 10;\n    }\n    sum", "    let mut\
    \ prod = 1;\n    for i in lst {\n        prod *= i;\n    }\n    // find last prime\
    \ factor\n    if prod <= 1 {\n        return 0;\n    }\n    let mut cur = 2;\n\
    \    let mut next = 1;\n    while prod > 1 {\n        if cur > (prod as f64).sqrt()\
    \ as isize {\n            break;\n        }\n        if prod % cur == 0 {\n  \
    \          next = cur;\n            prod /= cur;\n        } else {\n         \
    \   cur += 1;\n        }\n    }\n    let mut ans = 0;\n    let mut cur = next;\n\
    \    while cur > 0 {\n        ans += cur % 10;\n        cur /= 10;\n    }\n  \
    \  ans", "    let mut sorted_lst = lst.clone();\n    sorted_lst.sort();\n    let\
    \ mut lst = sorted_lst.clone();\n    lst.reverse();\n    for i in lst {\n    \
    \    let mut is_prime = true;\n        for j in 2..i {\n            if i % j ==\
    \ 0 {\n                is_prime = false;\n                break;\n           \
    \ }\n        }\n        if is_prime && i > 1 {\n            let mut sum = 0;\n\
    \            let mut n = i;\n            while n > 0 {\n                sum +=\
    \ n % 10;\n                n /= 10;\n            }\n            return sum;\n\
    \        }\n    }\n    0", "    let mut my_vec = lst.clone();\n    my_vec.sort();\n\
    \    my_vec.reverse();\n    my_vec.iter().fold(0, |acc, x| if *x % 2 == 0 { acc\
    \ } else { acc + x })", "    let mut primes: Vec<isize> = Vec::new();\n    let\
    \ mut lst_iter = lst.iter();\n    while let Some(x) = lst_iter.next() {\n    \
    \    let mut is_prime = true;\n        for y in 2..(x-1) {\n            if x %\
    \ y == 0 {\n                is_prime = false;\n                break;\n      \
    \      }\n        }\n        if is_prime {\n            primes.push(*x);\n   \
    \     }\n    }\n    let mut max = 0;\n    for x in primes {\n        if x > max\
    \ {\n            max = x;\n        }\n    }\n    let mut max_str = max.to_string();\n\
    \    let mut sum = 0;\n    for x in max_str.chars() {\n        sum += x.to_digit(10).unwrap()\
    \ as isize;\n    }\n    sum", "    let mut res = 0;\n    for i in lst {\n    \
    \    res += i.abs();\n    }\n    return res;", "    // let mut lst = lst;\n  \
    \  // let mut b = (0, 0);\n    // let mut counter = 0;\n    // let mut stop =\
    \ false;\n    // let is_prime = |x: isize| -> bool {\n    //     for i in 2..x\
    \ {\n    //         if x % i == 0 {\n    //             return false;\n    //\
    \         }\n    //     }\n    //     true\n    // };\n    // // let lst = vec![2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157,\
    \ 163, 167, 173, 179, 181, 191, 193, 197, 199, 2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107,\
    \ 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193,\
    \ 197, 199, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61,\
    \ 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149,\
    \ 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101,\
    \ 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181,\
    \ 191, 193, 197, 199, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43", '    unimplemented!();',
  "    let mut primes = vec![];\n    for i in lst {\n        if is_prime(i) {\n  \
    \          primes.push(i);\n        }\n    }\n    if primes.len() == 0 {\n   \
    \     return 0;\n    }\n    let mx = primes.iter().max().unwrap();\n    mx.to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap() as isize).sum()", "    let mut primes: Vec<isize> =\
    \ Vec::new();\n    let mut res: isize = 0;\n    let mut results: Vec<isize> =\
    \ Vec::new();\n    for i in lst {\n        let mut count: isize = 0;\n       \
    \ for k in 1..i + 1 {\n            if i % k == 0 {\n                count += 1;\n\
    \            }\n        }\n        if count == 2 {\n            primes.push(i);\n\
    \        }\n    }\n    primes.sort();\n    println!(\"{:?}\", primes);\n    for\
    \ p in primes {\n        res = p;\n        while res != 0 {\n            results.push(res\
    \ % 10);\n            res /= 10;\n        }\n    }\n    let (mut j, mut sum) =\
    \ (0, 0);\n    for b in results {\n        j += 1;\n        sum += b;\n      \
    \  if j == results.len() {\n            break;\n        }\n    }\n    return sum;"]
stop_tokens:
- "\n}"
