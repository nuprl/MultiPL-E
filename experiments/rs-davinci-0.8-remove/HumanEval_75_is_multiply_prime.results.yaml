language: rs
name: HumanEval_75_is_multiply_prime
results:
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpyh2r3b24.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822618
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    for i in 1..a {\n        for j in 1..a {\n            for k in 1..a {\n\
    \                if i * j * k == a {\n                    return true;\n     \
    \           }\n            }\n        }\n    }\n    false\n}\n\nfn main() {\n\
    \    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp2sgwmzjs.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822618
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut result = false;\n    for i in 2..a {\n        for j in 2..a {\n\
    \            for k in 2..a {\n                if i * j * k == a {\n          \
    \          result = true;\n                }\n            }\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp9pbl3tn_.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822618
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut b = 2;\n    let mut c = 2;\n    let mut d = 2;\n    for x in\
    \ 2..a {\n        if a % x == 0 {\n            b = x;\n            break;\n  \
    \      }\n    }\n    for y in 3..a {\n        if (a / b) % y == 0 {\n        \
    \    c = y;\n            break;\n        }\n    }\n    for z in 5..a {\n     \
    \   if (a / (b * c)) % z == 0 {\n            d = z;\n            break;\n    \
    \    }\n    }\n    if b * c * d == a {\n        true\n    } else {\n        false\n\
    \    }\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpbjwpbb5j.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822618
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n\t//let mut count = 0;\n\tfor i in 2..a {\n\t\tif a % i == 0 {\n\t\t\t//println!(\"\
    Number is not prime {}\", i);\n\t\t\t//println!(\"a is {}\", a);\n\t\t\t//count\
    \ += 1;\n\t\t\tif is_prime(i) && is_prime(a / i) {\n\t\t\t\treturn true;\n\t\t\
    \t}\n\t\t}\n\t}\n\t//if count == 0 {\n\t//\tprintln!(\"Number is prime {}\", a);\n\
    \t//}\n\tfalse\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n   \
    \ assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n   \
    \ assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n   \
    \ assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n \
    \   assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpeb3h11gm.rs:13:7\n\
    \   |\n13 |             if is_prime(i) && is_prime(a / i) {\n   |            \
    \    ^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `is_prime`\
    \ in this scope\n  --> /tmp/tmpeb3h11gm.rs:13:22\n   |\n13 |             if is_prime(i)\
    \ && is_prime(a / i) {\n   |                               ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822618
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut is_prime = false;\n    if a % 2 == 0 {\n        for i in 3..a\
    \ / 2 {\n            if a % i == 0 {\n                is_prime = true;\n     \
    \       }\n        }\n    }\n    is_prime\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpf1pz7e0b.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822618
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n\tfor i in 1..101 {\n\t\tfor j in 1..101 {\n\t\t\tfor k in 1..101 {\n\t\t\
    \t\tif a == i * j * k && is_prime(i) && is_prime(j) && is_prime(k) {\n\t\t\t\t\
    \treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfalse\n}\n\nfn main() {\n  \
    \  let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpixxqxsj2.rs:10:26\n\
    \   |\n10 |                 if a == i * j * k && is_prime(i) && is_prime(j) &&\
    \ is_prime(k) {\n   |                                      ^^^^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find function `is_prime` in this scope\n\
    \  --> /tmp/tmpixxqxsj2.rs:10:41\n   |\n10 |                 if a == i * j * k\
    \ && is_prime(i) && is_prime(j) && is_prime(k) {\n   |                       \
    \                              ^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `is_prime` in this scope\n  --> /tmp/tmpixxqxsj2.rs:10:56\n\
    \   |\n10 |                 if a == i * j * k && is_prime(i) && is_prime(j) &&\
    \ is_prime(k) {\n   |                                                        \
    \            ^^^^^^^^ not found in this scope\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822618
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut divisor = 2;\n    let mut counter = 0;\n    let mut is_multiply_prime\
    \ = false;\n    let mut prime_counter = 0;\n    while divisor <= a {\n       \
    \ if a % divisor == 0 {\n            a /= divisor;\n            counter += 1;\n\
    \            if counter > 2 {\n                break;\n            }\n       \
    \ } else {\n            for i in 2..divisor {\n                if divisor % i\
    \ == 0 {\n                    prime_counter += 1;\n                }\n       \
    \     }\n            if prime_counter == 0 {\n                divisor += 1;\n\
    \            } else {\n                divisor += 1;\n                prime_counter\
    \ = 0;\n            }\n        }\n    }\n    if counter == 3 {\n        is_multiply_prime\
    \ = true;\n    }\n    is_multiply_prime\n}\n\nfn main() {\n    let candidate =\
    \ is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `a`\n  --> /tmp/tmpkt7kwryu.rs:13:13\n\
    \   |\n6  | fn is_multiply_prime(a: isize) -> bool {\n   |                   \
    \   - help: consider making this binding mutable: `mut a`\n...\n13 |         \
    \    a /= divisor;\n   |             ^^^^^^^^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659822618
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let vec_prime = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    for x in vec_prime.iter()\
    \ {\n        for y in vec_prime.iter() {\n            for z in vec_prime.iter()\
    \ {\n                if x * y * z == a {\n                    return true;\n \
    \               }\n            }\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822618
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    for i in 2..a {\n        if a % i == 0 {\n            if is_prime(i)\
    \ {\n                if a / i != i {\n                    if is_prime(a / i) {\n\
    \                        if a / i / i != i {\n                            if is_prime(a\
    \ / i / i) {\n                                return true;\n                 \
    \           }\n                        }\n                    }\n            \
    \    }\n            }\n        }\n    }\n    false\n}\n\nfn main() {\n    let\
    \ candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n --> /tmp/tmpgpt9lyo7.rs:9:16\n\
    \  |\n9 |             if is_prime(i) {\n  |                ^^^^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find function `is_prime` in this scope\n\
    \  --> /tmp/tmpgpt9lyo7.rs:11:24\n   |\n11 |                     if is_prime(a\
    \ / i) {\n   |                        ^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `is_prime` in this scope\n  --> /tmp/tmpgpt9lyo7.rs:13:32\n\
    \   |\n13 | ...                   if is_prime(a / i / i) {\n   |             \
    \             ^^^^^^^^ not found in this scope\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822618
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    return false;\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmppxo6l6fc.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822618
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut is_multiply = false;\n    let mut vec = vec![];\n    for i in\
    \ 2..a {\n        if a % i == 0 {\n            vec.push(i);\n        }\n    }\n\
    \    if vec.len() == 3 {\n        for j in &vec {\n            if !is_prime(*j)\
    \ {\n                return false;\n            }\n        }\n        is_multiply\
    \ = true;\n    }\n    is_multiply\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmprkml3mcp.rs:16:17\n\
    \   |\n16 |             if !is_prime(*j) {\n   |                 ^^^^^^^^ not\
    \ found in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822618
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut num = a;\n    let mut count = 0;\n    for i in 2..(num/2+1) {\n\
    \        if num % i == 0 {\n            let mut is_prime = true;\n           \
    \ for j in 2..(i/2+1) {\n                if i % j == 0 {\n                   \
    \ is_prime = false;\n                    break;\n                }\n         \
    \   }\n            if is_prime {\n                num = num / i;\n           \
    \     count += 1;\n            }\n        }\n        if count == 3 {\n       \
    \     break;\n        }\n    }\n    if count == 3 {\n        return true;\n  \
    \  }\n    false\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n  \
    \  assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n  \
    \  assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n  \
    \  assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp0vp7ghvv.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822618
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    // TODO\n    unimplemented!();\n}\n\nfn main() {\n    let candidate =\
    \ is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmphw_vqunq.rs:8:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822618
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    if a <= 0 {\n        return false;\n    }\n\n    let mut fact = a;\n\
    \    let mut res = true;\n    let mut i = 2;\n    while fact > 1 {\n        while\
    \ fact % i == 0 {\n            fact /= i;\n            if is_prime(i) {\n    \
    \            res = true;\n            } else {\n                res = false;\n\
    \            }\n        }\n        i += 1;\n    }\n    res\n}\n\nfn main() {\n\
    \    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpe_00r9gy.rs:17:16\n\
    \   |\n17 |             if is_prime(i) {\n   |                ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822618
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut check = false;\n    for b in 2..(a/2) {\n        for c in 2..(a/2)\
    \ {\n            for d in 2..(a/2) {\n                if b * c * d == a {\n  \
    \                  check = true;\n                }\n            }\n        }\n\
    \    }\n    check\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpy795qhca.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822618
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut is_prime = true;\n    for i in 2..a {\n        if a % i == 0\
    \ {\n            if is_prime(i) {\n                let b = a / i;\n          \
    \      if is_prime(b) {\n                    if is_prime(b / i) {\n          \
    \              return true;\n                    }\n                }\n      \
    \      }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0618]: expected function, found `bool`\n  --> /tmp/tmp3suw4za6.rs:10:16\n\
    \   |\n7  |     let mut is_prime = true;\n   |         ------------ `is_prime`\
    \ has type `bool`\n...\n10 |             if is_prime(i) {\n   |              \
    \  ^^^^^^^^---\n   |                |\n   |                call expression requires\
    \ function\n\nerror[E0618]: expected function, found `bool`\n  --> /tmp/tmp3suw4za6.rs:12:20\n\
    \   |\n7  |     let mut is_prime = true;\n   |         ------------ `is_prime`\
    \ has type `bool`\n...\n12 |                 if is_prime(b) {\n   |          \
    \          ^^^^^^^^---\n   |                    |\n   |                    call\
    \ expression requires function\n\nerror[E0618]: expected function, found `bool`\n\
    \  --> /tmp/tmp3suw4za6.rs:13:24\n   |\n7  |     let mut is_prime = true;\n  \
    \ |         ------------ `is_prime` has type `bool`\n...\n13 |               \
    \      if is_prime(b / i) {\n   |                        ^^^^^^^^-------\n   |\
    \                        |\n   |                        call expression requires\
    \ function\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0618`.\n"
  stdout: ''
  timestamp: 1659822618
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let three_primes = vec![2, 3, 5];\n    let mut prime_numbers: Vec<isize>\
    \ = Vec::new();\n    for prime in three_primes {\n        if a % prime == 0 {\n\
    \            prime_numbers.push(prime);\n        }\n    }\n    let mut p = 7;\n\
    \    while p < a && prime_numbers.len() < 3 {\n        let mut is_prime = true;\n\
    \        for prime in &prime_numbers {\n            if p % prime == 0 {\n    \
    \            is_prime = false;\n                break;\n            }\n      \
    \  }\n        if is_prime {\n            prime_numbers.push(p);\n        }\n \
    \       p += 1;\n    }\n    if prime_numbers.len() != 3 {\n        return false;\n\
    \    }\n    for prime in &prime_numbers {\n        if a % prime != 0 {\n     \
    \       return false;\n        }\n    }\n    return true;\n}\n\nfn main() {\n\
    \    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpr5n7gju1.rs:43:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822618
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut a = a;\n    let mut three_prime = 0;\n    let mut divider = 2;\n\
    \    while a != 1 {\n        if is_prime(divider) && a % divider == 0 {\n    \
    \        a /= divider;\n            three_prime += 1;\n        } else {\n    \
    \        divider += 1;\n        }\n    }\n    if three_prime == 3 {\n        true\n\
    \    } else {\n        false\n    }\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpcxexlx2_.rs:11:12\n\
    \   |\n11 |         if is_prime(divider) && a % divider == 0 {\n   |         \
    \   ^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822618
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut result = true;\n    let mut counter = 0;\n    let primes: Vec<isize>\
    \ = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97];\n    for i in 0..primes.len() {\n        if a % primes[i]\
    \ == 0 {\n            counter += 1;\n        }\n    }\n    if counter != 3 {\n\
    \        result = false;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp00pm5twz.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822618
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpt75_w1dk.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822618
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    if a <= 0 {\n        return false;\n    }\n\n    let mut primes = vec![2,\
    \ 3, 5];\n    let mut primes_count = vec![0, 0, 0];\n    let mut i = 0;\n    let\
    \ mut num = a;\n    while i < primes.len() && num > 1 {\n        while num % primes[i]\
    \ == 0 {\n            num /= primes[i];\n            primes_count[i] += 1;\n \
    \       }\n        i += 1;\n    }\n\n    if num > 1 {\n        let mut is_prime\
    \ = true;\n        for p in primes.iter() {\n            if num % p == 0 {\n \
    \               is_prime = false;\n                break;\n            }\n   \
    \     }\n        if is_prime {\n            primes.push(num);\n            primes_count.push(1);\n\
    \        }\n    }\n\n    let mut res = 1;\n    for i in 0..primes.len() {\n  \
    \      if primes_count[i] > 0 {\n            res *= primes_count[i] + 1;\n   \
    \     }\n    }\n\n    res == 3\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpdns_itzm.rs:50:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822618
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let p1 = 2;\n    let p2 = 3;\n    let p3 = 5;\n    if a % p1 == 0 &&\
    \ a % p2 == 0 && a % p3 == 0 {\n        true\n    } else {\n        false\n  \
    \  }\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmputu19mha.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822618
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut fact = Vec::new();\n    let mut num = a;\n    for prime in 2..(a\
    \ + 1) {\n        while num % prime == 0 {\n            fact.push(prime);\n  \
    \          num /= prime;\n        }\n    }\n    if fact.len() == 3 {\n       \
    \ return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822618
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpt75_w1dk.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822618
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut found = false;\n \
    \   for i in 0..primes.len() {\n        for j in i..primes.len() {\n         \
    \   for k in j..primes.len() {\n                if primes[i] * primes[j] * primes[k]\
    \ == a {\n                    found = true;\n                }\n            }\n\
    \        }\n    }\n    found\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822618
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    // TODO: Complete this function\n    // The expected output is:\n   \
    \ // is_multiply_prime(30) == true\n    // is_multiply_prime(9) == false\n   \
    \ // is_multiply_prime(15) == false\n    false\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpyd80wkun.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822618
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    for x in 2..100 {\n        for y in 2..100 {\n            for z in 2..100\
    \ {\n                if is_prime(x) && is_prime(y) && is_prime(z) && x * y * z\
    \ == a {\n                    return true;\n                }\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmppvbo2nbr.rs:10:20\n\
    \   |\n10 |                 if is_prime(x) && is_prime(y) && is_prime(z) && x\
    \ * y * z == a {\n   |                    ^^^^^^^^ not found in this scope\n\n\
    error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmppvbo2nbr.rs:10:35\n\
    \   |\n10 |                 if is_prime(x) && is_prime(y) && is_prime(z) && x\
    \ * y * z == a {\n   |                                   ^^^^^^^^ not found in\
    \ this scope\n\nerror[E0425]: cannot find function `is_prime` in this scope\n\
    \  --> /tmp/tmppvbo2nbr.rs:10:50\n   |\n10 |                 if is_prime(x) &&\
    \ is_prime(y) && is_prime(z) && x * y * z == a {\n   |                       \
    \                           ^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822618
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut prime = 2;\n    let mut primes = Vec::new();\n    let mut count\
    \ = 0;\n    let mut factors = a;\n    let mut is_primes = true;\n    // Factorise\
    \ the number\n    while factors > 1 {\n        while factors % prime == 0 {\n\
    \            count += 1;\n            factors /= prime;\n        }\n        if\
    \ count > 0 {\n            primes.push(prime);\n            count = 0;\n     \
    \   }\n        prime += 1;\n    }\n    // Check if each factor is prime\n    for\
    \ prime in primes {\n        if !is_prime(prime) {\n            is_primes = false;\n\
    \        }\n    }\n    return is_primes;\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmp_lmvou5q.rs:26:13\n\
    \   |\n26 |         if !is_prime(prime) {\n   |             ^^^^^^^^ help: a local\
    \ variable with a similar name exists: `is_primes`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822618
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    //function body\n    let prime_vec = vec![2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let\
    \ mut result: Vec<isize> = Vec::new();\n    let mut counter = 0;\n    let mut\
    \ i = 0;\n    let mut flag = false;\n    while prime_vec[i] <= a {\n        if\
    \ a % prime_vec[i] == 0 {\n            result.push(prime_vec[i]);\n          \
    \  counter += 1;\n        }\n        i += 1;\n    }\n    if counter == 3 {\n \
    \       flag = true;\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpz7m4r_g1.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822618
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    if a == 0 {\n        return false;\n    }\n\n    let mut i = 0;\n   \
    \ let mut primes = Vec::new();\n    let mut prime = 0;\n    let mut current =\
    \ a;\n\n    while i < 3 {\n        prime = get_next_prime(&primes);\n        while\
    \ current % prime == 0 {\n            primes.push(prime);\n            current\
    \ = current / prime;\n        }\n        if current != 1 {\n            return\
    \ false;\n        }\n        i += 1;\n    }\n\n    true\n}\n\nfn main() {\n  \
    \  let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `get_next_prime` in this scope\n  -->\
    \ /tmp/tmp_pe__vj_.rs:17:17\n   |\n17 |         prime = get_next_prime(&primes);\n\
    \   |                 ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659822618
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    if a < 0 {\n        false\n    } else {\n        let mut vec = vec![];\n\
    \        for i in 2..a {\n            if a % i == 0 {\n                vec.push(i);\n\
    \            }\n        }\n        vec.len() == 3\n    }\n}\n\nfn main() {\n \
    \   let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp1pqy3azq.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822618
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    // TODO!\n    true\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp8qozx_9m.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822619
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    assert!(a >= 0);\n    let mut result = false;\n    let mut temp = a;\n\
    \    for i in 2..a {\n        if is_prime(i) && temp % i == 0 {\n            temp\
    \ /= i;\n            if temp == 1 {\n                result = true;\n        \
    \        break;\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmphagd9ysk.rs:11:12\n\
    \   |\n11 |         if is_prime(i) && temp % i == 0 {\n   |            ^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822618
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpt75_w1dk.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822618
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpt75_w1dk.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822618
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    if a <= 0 {\n        return false;\n    }\n\n    let mut i = 2;\n   \
    \ let mut count = 0;\n    let mut product = 1;\n    let mut b = a;\n\n    while\
    \ i <= a && count < 3 {\n        if a % i == 0 {\n            b = a / i;\n   \
    \         if is_prime(i) && is_prime(b) {\n                count += 1;\n     \
    \           product *= i;\n            }\n        }\n        i += 1;\n    }\n\n\
    \    if count == 3 && product == a {\n        return true;\n    }\n\n    false\n\
    }\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmp82nhv7nr.rs:19:16\n\
    \   |\n19 |             if is_prime(i) && is_prime(b) {\n   |                ^^^^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find function `is_prime` in\
    \ this scope\n  --> /tmp/tmp82nhv7nr.rs:19:31\n   |\n19 |             if is_prime(i)\
    \ && is_prime(b) {\n   |                               ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822618
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut n = a;\n    while\
    \ n != 1 {\n        let mut i = 0;\n        while n % primes[i] != 0 {\n     \
    \       i += 1;\n        }\n        n /= primes[i];\n        primes.remove(i);\n\
    \    }\n    primes.len() == 3\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpnrkqyrew.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822619
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    a\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp7u10jo4w.rs:7:5\n  |\n6 |\
    \ fn is_multiply_prime(a: isize) -> bool {\n  |                              \
    \     ---- expected `bool` because of return type\n7 |     a\n  |     ^ expected\
    \ `bool`, found `isize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822619
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut result = false;\n    let mut primes = vec![2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n\
    \    for i in 0..primes.len() {\n        for j in i..primes.len() {\n        \
    \    for k in j..primes.len() {\n                if primes[i] * primes[j] * primes[k]\
    \ == a {\n                    result = true;\n                }\n            }\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822619
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut prime_factors = Vec::new();\n    let limit = a / 2;\n    for\
    \ b in 2..limit {\n        if a % b == 0 {\n            if is_prime(b) {\n   \
    \             prime_factors.push(b);\n            }\n        }\n    }\n    prime_factors.len()\
    \ == 3\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpnct879xu.rs:11:16\n\
    \   |\n11 |             if is_prime(b) {\n   |                ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822618
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut primes: Vec<isize> = vec![];\n    for i in 2..a {\n        if\
    \ is_prime(i) {\n            primes.push(i);\n        }\n    }\n    for prime\
    \ in primes.iter() {\n        for second_prime in primes.iter() {\n          \
    \  if *prime * second_prime < a {\n                if prime * second_prime * (*prime\
    \ * second_prime) == a {\n                    return true;\n                }\n\
    \            }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n --> /tmp/tmpuzdazrlv.rs:9:12\n\
    \  |\n9 |         if is_prime(i) {\n  |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822618
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    // Check if parameter is less then 0\n    if a < 0 {\n        return\
    \ false;\n    }\n\n    // Calculate its prime numbers and return true if the sum\
    \ of the prime numbers\n    // equals the parameter.\n    let prime_numbers =\
    \ get_prime_numbers(a);\n    for i in 0..prime_numbers.len() {\n        for j\
    \ in i+1..prime_numbers.len() {\n            for k in j+1..prime_numbers.len()\
    \ {\n                if prime_numbers[i] * prime_numbers[j] * prime_numbers[k]\
    \ == a {\n                    return true;\n                }\n            }\n\
    \        }\n    }\n\n    false\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `get_prime_numbers` in this scope\n\
    \  --> /tmp/tmpe6bbkg5v.rs:14:25\n   |\n14 |     let prime_numbers = get_prime_numbers(a);\n\
    \   |                         ^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822618
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n\tlet mut flag: bool = false;\n\tlet mut counter: usize = 0;\n\tif a <= 0\
    \ {\n\t\treturn false;\n\t}\n\tif a < 100 {\n\t\tfor i in 2..a {\n\t\t\tif a %\
    \ i == 0 {\n\t\t\t\tlet mut flag_inner: bool = false;\n\t\t\t\tfor j in 2..i {\n\
    \t\t\t\t\tif i % j == 0 {\n\t\t\t\t\t\tflag_inner = true;\n\t\t\t\t\t\tbreak;\n\
    \t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif !flag_inner {\n\t\t\t\t\tcounter += 1;\n\t\t\
    \t\t}\n\t\t\t}\n\t\t}\n\t\tif counter == 3 {\n\t\t\tflag = true;\n\t\t}\n\t}\n\
    \tflag\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpdc_0rbrq.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822619
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpyh2r3b24.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822618
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut a = a;\n    for i in 2..100 {\n        if a % i == 0 {\n    \
    \        a /= i;\n            println!(\"{}\", i);\n        }\n    }\n    println!(\"\
    {}\", a);\n    if a == 1 {\n        return true;\n    } else {\n        return\
    \ false;\n    }\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n  \
    \  assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n  \
    \  assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n  \
    \  assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp96kwdxfc.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: '5

    1

    '
  timestamp: 1659822619
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n\tlet three_primes = (1..100).filter(|n| is_prime(*n)).take(3).collect::<Vec<isize>>();\n\
    \tfor i in 0..three_primes.len() {\n\t\tfor j in 0..three_primes.len() {\n\t\t\
    \tfor k in 0..three_primes.len() {\n\t\t\t\tif three_primes[i] * three_primes[j]\
    \ * three_primes[k] == a {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\
    \t}\n\tfalse\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n --> /tmp/tmp1fsez79d.rs:7:41\n\
    \  |\n7 |     let three_primes = (1..100).filter(|n| is_prime(*n)).take(3).collect::<Vec<isize>>();\n\
    \  |                                            ^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822618
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut base = 3;\n    let mut aux = a;\n    let mut flag = false;\n\
    \    while base <= aux {\n        if aux % base == 0 {\n            aux = aux\
    \ / base;\n            if aux == 1 || is_prime(aux) {\n                flag =\
    \ true;\n                break;\n            }\n        } else {\n           \
    \ base += 2;\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpy0jkolzr.rs:13:28\n\
    \   |\n13 |             if aux == 1 || is_prime(aux) {\n   |                 \
    \           ^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822618
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n\tfor i in 2..a {\n\t\tif a % i == 0 {\n\t\t\tfor j in 2..a {\n\t\t\t\tif\
    \ a % j == 0 {\n\t\t\t\t\tfor k in 2..a {\n\t\t\t\t\t\tif a % k == 0 {\n\t\t\t\
    \t\t\t\tif (i * j * k) == a {\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\
    \t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n\
    }\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp5gu_0sef.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822619
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut counter = 0;\n    for i in (2..a).rev() {\n        if a % i ==\
    \ 0 {\n            for j in (2..i).rev() {\n                if i % j == 0 {\n\
    \                    counter += 1;\n                }\n            }\n       \
    \     if counter == 0 {\n                let a_copy = a;\n                let\
    \ i_copy = i;\n                let diff = a_copy / i_copy;\n                for\
    \ j in (2..diff).rev() {\n                    if diff % j == 0 {\n           \
    \             counter += 1;\n                    }\n                }\n      \
    \          if counter == 0 {\n                    return true;\n             \
    \   }\n            }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp42js5rvs.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822619
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut is_multiply_prime = false;\n    let mut possible_factors: Vec<isize>\
    \ = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97];\n    let n = possible_factors.len();\n    let mut i\
    \ = 0;\n    while !is_multiply_prime && i < n {\n        if a % possible_factors[i]\
    \ == 0 {\n            possible_factors.retain(|&x| x % possible_factors[i] !=\
    \ 0);\n            is_multiply_prime = true;\n        }\n        i += 1;\n   \
    \ }\n    is_multiply_prime\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0502]: cannot borrow `possible_factors` as mutable because it is\
    \ also borrowed as immutable\n  --> /tmp/tmprlis2iql.rs:13:13\n   |\n13 |    \
    \         possible_factors.retain(|&x| x % possible_factors[i] != 0);\n   |  \
    \           ^^^^^^^^^^^^^^^^^------^----^^^^^----------------^^^^^^^^^\n   | \
    \            |                |      |        |\n   |             |          \
    \      |      |        first borrow occurs due to use of `possible_factors` in\
    \ closure\n   |             |                |      immutable borrow occurs here\n\
    \   |             |                immutable borrow later used by call\n   | \
    \            mutable borrow occurs here\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1659822618
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpt75_w1dk.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822618
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut result = false;\n    if a % 2 == 0 {\n        if a % 3 == 0 {\n\
    \            result = true;\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpom3laxoa.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822619
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n\treturn is_prime(a)\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n --> /tmp/tmpm3x8903p.rs:7:9\n\
    \  |\n7 |     return is_prime(a)\n  |            ^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822618
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    for i in 2..a {\n        if a % i == 0 {\n            if is_prime(i)\
    \ {\n                for j in 2..a {\n                    if a % j == 0 {\n  \
    \                      if is_prime(j) {\n                            if i * j\
    \ != a {\n                                if a % (i * j) == 0 {\n            \
    \                        if is_prime(a / (i * j)) {\n                        \
    \                return true;\n                                    }\n       \
    \                         }\n                            }\n                 \
    \       }\n                    }\n                }\n            }\n        }\n\
    \    }\n    false\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n --> /tmp/tmpv1gfpym5.rs:9:16\n\
    \  |\n9 |             if is_prime(i) {\n  |                ^^^^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find function `is_prime` in this scope\n\
    \  --> /tmp/tmpv1gfpym5.rs:12:28\n   |\n12 |                         if is_prime(j)\
    \ {\n   |                            ^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `is_prime` in this scope\n  --> /tmp/tmpv1gfpym5.rs:15:40\n\
    \   |\n15 | ...                   if is_prime(a / (i * j)) {\n   |           \
    \               ^^^^^^^^ not found in this scope\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822618
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    if a > 100 {\n        return false;\n    }\n    for n in (1..a + 1) {\n\
    \        for k in (1..a + 1) {\n            for l in (1..a + 1) {\n          \
    \      if is_prime(n) && is_prime(k) && is_prime(l) && n * k * l == a {\n    \
    \                return true;\n                }\n            }\n        }\n \
    \   }\n    false\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n \
    \   assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n \
    \   assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n \
    \   assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpw7o2gm4h.rs:13:20\n\
    \   |\n13 |                 if is_prime(n) && is_prime(k) && is_prime(l) && n\
    \ * k * l == a {\n   |                    ^^^^^^^^ not found in this scope\n\n\
    error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpw7o2gm4h.rs:13:35\n\
    \   |\n13 |                 if is_prime(n) && is_prime(k) && is_prime(l) && n\
    \ * k * l == a {\n   |                                   ^^^^^^^^ not found in\
    \ this scope\n\nerror[E0425]: cannot find function `is_prime` in this scope\n\
    \  --> /tmp/tmpw7o2gm4h.rs:13:50\n   |\n13 |                 if is_prime(n) &&\
    \ is_prime(k) && is_prime(l) && n * k * l == a {\n   |                       \
    \                           ^^^^^^^^ not found in this scope\n\nwarning: unnecessary\
    \ parentheses around `for` iterator expression\n  --> /tmp/tmpw7o2gm4h.rs:10:14\n\
    \   |\n10 |     for n in (1..a + 1) {\n   |              ^^^^^^^^^^ help: remove\
    \ these parentheses\n   |\n   = note: `#[warn(unused_parens)]` on by default\n\
    \nwarning: unnecessary parentheses around `for` iterator expression\n  --> /tmp/tmpw7o2gm4h.rs:11:18\n\
    \   |\n11 |         for k in (1..a + 1) {\n   |                  ^^^^^^^^^^ help:\
    \ remove these parentheses\n\nwarning: unnecessary parentheses around `for` iterator\
    \ expression\n  --> /tmp/tmpw7o2gm4h.rs:12:22\n   |\n12 |             for l in\
    \ (1..a + 1) {\n   |                      ^^^^^^^^^^ help: remove these parentheses\n\
    \nerror: aborting due to 3 previous errors; 3 warnings emitted\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822619
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    // TODO\n    true\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmprita9ovp.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822619
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut prime = true;\n    for i in 2..a {\n        if a % i == 0 {\n\
    \            if !is_prime(i) {\n                prime = false;\n             \
    \   break;\n            }\n        }\n    }\n    prime\n}\n\nfn main() {\n   \
    \ let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n \
    \   assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n  \
    \  assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpcj96i50r.rs:10:17\n\
    \   |\n10 |             if !is_prime(i) {\n   |                 ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822619
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let three_primes: Vec<isize> = prime_divisors(a).into_iter().take(3).collect();\n\
    \    three_primes.len() == 3 && three_primes.iter().fold(1, |m, &n| m * n) ==\
    \ a\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `prime_divisors` in this scope\n -->\
    \ /tmp/tmpa8na8_pf.rs:7:36\n  |\n7 |     let three_primes: Vec<isize> = prime_divisors(a).into_iter().take(3).collect();\n\
    \  |                                    ^^^^^^^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822619
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let p = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53,\
    \ 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut c = 0;\n    let mut x = a;\n\
    \    for i in p.iter() {\n        if x % i == 0 {\n            x /= i;\n     \
    \       c += 1;\n        }\n    }\n    c == 3\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpr99lcvjz.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822619
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let sieve = sieve_of_eratosthenes(a as usize);\n    let primes: Vec<isize>\
    \ = sieve.into_iter().enumerate().filter(|&(_, p)| p).map(|(x, _)| x as isize).collect();\n\
    \    for i in 0..primes.len() {\n        for j in i..primes.len() {\n        \
    \    for k in j..primes.len() {\n                if primes[i] * primes[j] * primes[k]\
    \ == a {\n                    return true;\n                }\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `sieve_of_eratosthenes` in this scope\n\
    \ --> /tmp/tmp1fp03t88.rs:7:17\n  |\n7 |     let sieve = sieve_of_eratosthenes(a\
    \ as usize);\n  |                 ^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822619
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpt75_w1dk.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822618
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    false\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n   \
    \ assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n   \
    \ assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n   \
    \ assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n \
    \   assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpuq0kx2xi.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822619
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut vec = vec![];\n    for i in 2..100 {\n        if is_prime(i)\
    \ && a % i == 0 {\n            vec.push(i);\n        }\n    }\n    if vec.len()\
    \ == 3 {\n        println!(\"{:?}\", vec);\n        return true;\n    }\n    println!(\"\
    {:?}\", vec);\n    false\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n --> /tmp/tmphrq7vzw4.rs:9:12\n\
    \  |\n9 |         if is_prime(i) && a % i == 0 {\n  |            ^^^^^^^^ not\
    \ found in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822619
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let get_prime_numbers = |num: isize| -> Vec<isize> {\n        let mut\
    \ numbers = Vec::new();\n        let mut prime_numbers = Vec::new();\n       \
    \ for i in 2..num + 1 {\n            numbers.push(i);\n        }\n        while\
    \ numbers.len() > 0 {\n            let prime = numbers[0];\n            prime_numbers.push(prime);\n\
    \            numbers.retain(|x| x % prime != 0);\n        }\n        prime_numbers\n\
    \    };\n    let prime_numbers = get_prime_numbers(a);\n    for p1 in &prime_numbers\
    \ {\n        for p2 in &prime_numbers {\n            for p3 in &prime_numbers\
    \ {\n                if a == p1 * p2 * p3 {\n                    return true;\n\
    \                }\n            }\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822619
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut i = 0;\n    while i <\
    \ primes.len() {\n        let prime = primes[i];\n        let mut j = i;\n   \
    \     while j < primes.len() {\n            let prime2 = primes[j];\n        \
    \    let mut k = j;\n            while k < primes.len() {\n                let\
    \ prime3 = primes[k];\n                if prime * prime2 * prime3 == a {\n   \
    \                 return true;\n                }\n                k += 1;\n \
    \           }\n            j += 1;\n        }\n        i += 1;\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822619
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    // We need to check in a range of numbers to see if they are prime\n\
    \    // then check if they divide a\n    fn is_prime(b: isize) -> bool {\n   \
    \     let mut is_prime = true;\n        for n in 2..(b/2 + 1) {\n            if\
    \ b % n == 0 {\n                is_prime = false;\n                break;\n  \
    \          }\n        }\n        is_prime\n    }\n\n    for x in 2..(a/2 + 1)\
    \ {\n        if is_prime(x) && a % x == 0 {\n            // Check if the other\
    \ factor is prime\n            if is_prime(a/x) {\n                return true;\n\
    \            }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpo03u3y45.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822619
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpt75_w1dk.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822618
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpt75_w1dk.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822618
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    // TODO: Write your code here\n    let p = vec![2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n \
    \   let mut count = 0;\n    let mut s = 0;\n    for j in &p {\n        if a %\
    \ j == 0 {\n            count += 1;\n            s += 1;\n        }\n        if\
    \ count == 3 {\n            break;\n        }\n    }\n    if s == 3 {\n      \
    \  return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpstj55sjx.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822619
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    for i in 2..a {\n        for j in 2..i {\n            if i % j == 0 {\n\
    \                break;\n            } else if i * j == a {\n                for\
    \ k in 2..j {\n                    if j % k == 0 {\n                        break;\n\
    \                    } else if i * j * k == a {\n                        for s\
    \ in 2..k {\n                            if k % s == 0 {\n                   \
    \             break;\n                            } else if i * j * k * s == a\
    \ {\n                                return true;\n                          \
    \  }\n                        }\n                    }\n                }\n  \
    \          }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpn8ea0k0d.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822619
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    for i in 2..10 {\n        for j in 2..10 {\n            for k in 2..10\
    \ {\n                if a == i * j * k {\n                    return true;\n \
    \               }\n            }\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp3u4you7z.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822619
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let primes = (2..=a)\n        .filter(|x| is_prime(*x))\n        .collect::<Vec<isize>>();\n\
    \    primes.len() >= 3\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n --> /tmp/tmp3g0bbgs1.rs:8:21\n\
    \  |\n8 |         .filter(|x| is_prime(*x))\n  |                     ^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822619
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    if a % 2 == 0 {\n        for i in 1..50 {\n            if a % (2 * i)\
    \ == 0 {\n                return is_multiply_prime(a / (2 * i));\n           \
    \ }\n        }\n    } else {\n        for i in 1..10 {\n            if a % (3\
    \ * i) == 0 {\n                return is_multiply_prime(a / (3 * i));\n      \
    \      }\n        }\n    }\n    is_prime(a)\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpmp4abe8v.rs:20:5\n\
    \   |\n20 |     is_prime(a)\n   |     ^^^^^^^^ not found in this scope\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822619
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    (2..a).all(|x| a % x != 0 || (2..(x / 2)).all(|y| x % y != 0))\n}\n\n\
    fn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpp5_44f_6.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822619
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut primes = Vec::new();\n    for i in 2..a {\n        if is_prime(i)\
    \ {\n            primes.push(i);\n        }\n    }\n    for i in 0..primes.len()\
    \ {\n        for j in i..primes.len() {\n            for k in j..primes.len()\
    \ {\n                if primes[i] * primes[j] * primes[k] == a {\n           \
    \         return true;\n                }\n            }\n        }\n    }\n \
    \   false\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n --> /tmp/tmpbcb30gdi.rs:9:12\n\
    \  |\n9 |         if is_prime(i) {\n  |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822619
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut x = a;\n    for i in 2..a {\n        if x % i == 0 {\n      \
    \      x = x / i;\n            println!(\"{}\", i);\n        }\n    }\n    println!(\"\
    {}\", x);\n    return true;\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpr6rzbbrb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: '5

    '
  timestamp: 1659822619
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    // TODO\n    unimplemented!();\n}\n\nfn main() {\n    let candidate =\
    \ is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmphw_vqunq.rs:8:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822618
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let num_factors = count_primes(a);\n    match num_factors {\n       \
    \ 3 => true,\n        _ => false,\n    }\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `count_primes` in this scope\n --> /tmp/tmp2b6uvfii.rs:7:23\n\
    \  |\n7 |     let num_factors = count_primes(a);\n  |                       ^^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822619
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let is_prime = |n: isize| {\n        let mut i = 2;\n        while i\
    \ < n {\n            if n % i == 0 {\n                return false;\n        \
    \    }\n            i += 1;\n        }\n        true\n    };\n\n    let mut i\
    \ = 2;\n    let mut nums = vec![];\n    while i < a {\n        if a % i == 0 &&\
    \ is_prime(i) {\n            nums.push(i);\n        }\n        i += 1;\n    }\n\
    \    if nums.len() == 3 {\n        true\n    } else {\n        false\n    }\n\
    }\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpaezwomhu.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822619
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut x = 2;\n    let mut y = 2;\n    let mut z = 2;\n    for x in\
    \ 2..100 {\n        for y in 2..100 {\n            for z in 2..100 {\n       \
    \         if a == x * y * z {\n                    return true;\n            \
    \    }\n            }\n        }\n    }\n    false\n}\n\nfn main() {\n    let\
    \ candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpto_yby9y.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822619
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut i = 2;\n    let mut prime = vec![];\n    while i <= a {\n   \
    \     if is_prime(i) {\n            prime.push(i);\n        }\n        i += 1;\n\
    \    }\n    for a in prime.iter() {\n        let mut b = a + 1;\n        while\
    \ b <= a {\n            let mut c = b + 1;\n            while c <= b {\n     \
    \           if a * b * c == a {\n                    return true;\n          \
    \      }\n                c += 1;\n            }\n            b += 1;\n      \
    \  }\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmp59tpijp9.rs:10:12\n\
    \   |\n10 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp59tpijp9.rs:17:20\n \
    \  |\n17 |         while b <= a {\n   |                    ^ expected `isize`,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n17 |  \
    \       while b <= *a {\n   |                    +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp59tpijp9.rs:20:33\n   |\n20 |                 if a * b\
    \ * c == a {\n   |                                 ^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n20 |                 if\
    \ a * b * c == *a {\n   |                                 +\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822619
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut a = a;\n    let mut prime_numbers = vec![];\n    for n in 2..a\
    \ + 1 {\n        if is_prime(n) {\n            if a % n == 0 {\n             \
    \   prime_numbers.push(n);\n                a = a / n;\n            }\n      \
    \  }\n    }\n    if prime_numbers.len() != 3 {\n        return false;\n    }\n\
    \    for n in prime_numbers {\n        if n > 100 {\n            return false;\n\
    \        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmp0ospouya.rs:10:12\n\
    \   |\n10 |         if is_prime(n) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822619
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let primes: Vec<_> = PRIMES.iter().take_while(|&&n| n <= a).collect();\n\
    \    let (_, is_mul) = primes.iter().fold((0, false), |(curr, mul), &n| {\n  \
    \      let next = curr * n;\n        if next > a {\n            (next, mul)\n\
    \        } else if next == a {\n            (next, true)\n        } else {\n \
    \           (next, mul)\n        }\n    });\n    is_mul\n}\n\nfn main() {\n  \
    \  let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `PRIMES` in this scope\n --> /tmp/tmpuii03exx.rs:7:26\n\
    \  |\n7 |     let primes: Vec<_> = PRIMES.iter().take_while(|&&n| n <= a).collect();\n\
    \  |                          ^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659822619
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    for i in 2..a / 2 {\n        if a % i == 0 {\n            if is_prime(i)\
    \ {\n                for y in i..a / 2 {\n                    if a % y == 0 {\n\
    \                        if is_prime(y) {\n                            let x =\
    \ a / (i * y);\n                            if is_prime(x) {\n               \
    \                 println!(\"{} = {} * {} * {}\", a, i, y, x);\n             \
    \                   return true;\n                            }\n            \
    \            }\n                    }\n                }\n            }\n    \
    \    }\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n --> /tmp/tmpycrj4usd.rs:9:16\n\
    \  |\n9 |             if is_prime(i) {\n  |                ^^^^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find function `is_prime` in this scope\n\
    \  --> /tmp/tmpycrj4usd.rs:12:28\n   |\n12 |                         if is_prime(y)\
    \ {\n   |                            ^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `is_prime` in this scope\n  --> /tmp/tmpycrj4usd.rs:14:32\n\
    \   |\n14 | ...                   if is_prime(x) {\n   |                     \
    \     ^^^^^^^^ not found in this scope\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822619
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    false\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n   \
    \ assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n   \
    \ assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n   \
    \ assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n \
    \   assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpuq0kx2xi.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822619
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut result = false;\n    let primes = vec![2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n \
    \   for i in 0..primes.len() {\n        for j in i+1..primes.len() {\n       \
    \     for k in j+1..primes.len() {\n                if a == primes[i] * primes[j]\
    \ * primes[k] {\n                    result = true;\n                }\n     \
    \       }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate =\
    \ is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmph6cwtvmb.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822619
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let array_primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    for i in 0..array_primes.len()\
    \ {\n        for j in 0..array_primes.len() {\n            for k in 0..array_primes.len()\
    \ {\n                if a == array_primes[i] * array_primes[j] * array_primes[k]\
    \ {\n                    return true;\n                }\n            }\n    \
    \    }\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822619
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut i = 2;\n    let mut a = a;\n    let mut count = 0;\n    while\
    \ a != 1 {\n        if a % i == 0 {\n            a /= i;\n            count +=\
    \ 1;\n        } else {\n            i += 1;\n        }\n    }\n    count == 3\n\
    }\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822619
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpt75_w1dk.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822618
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    // code here!\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpbrgxp2zc.rs:8:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822619
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    for i in 2..a {\n        if a % i == 0 {\n            if is_prime(i)\
    \ {\n                let mut b = a / i;\n                if is_prime(b) {\n  \
    \                  b = b / i;\n                    if is_prime(b) {\n        \
    \                return true;\n                    }\n                }\n    \
    \        }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate =\
    \ is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n --> /tmp/tmp3qperhhi.rs:9:16\n\
    \  |\n9 |             if is_prime(i) {\n  |                ^^^^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find function `is_prime` in this scope\n\
    \  --> /tmp/tmp3qperhhi.rs:11:20\n   |\n11 |                 if is_prime(b) {\n\
    \   |                    ^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find function `is_prime` in this scope\n  --> /tmp/tmp3qperhhi.rs:13:24\n  \
    \ |\n13 |                     if is_prime(b) {\n   |                        ^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to 3 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822619
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    for i in 2..100 {\n        if a % i == 0 {\n            for j in 2..100\
    \ {\n                if a % j == 0 && i != j {\n                    for k in 2..100\
    \ {\n                        if a % k == 0 && i != k && j != k {\n           \
    \                 return true;\n                        }\n                  \
    \  }\n                }\n            }\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpkfwu1uoc.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822619
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut a = a;\n    let mut p = vec![];\n    while a % 2 == 0 {\n   \
    \     p.push(2);\n        a /= 2;\n    }\n    let mut f = 3;\n    while f * f\
    \ <= a {\n        if a % f == 0 {\n            p.push(f);\n            a /= f;\n\
    \        } else {\n            f += 2;\n        }\n    }\n    if a > 1 {\n   \
    \     p.push(a);\n    }\n    p.len() == 3\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822619
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let primes: Vec<isize> = (1..a).filter(|x| is_prime(*x)).collect();\n\
    \    for i in 0..primes.len() {\n        for j in i..primes.len() {\n        \
    \    for k in j..primes.len() {\n                if primes[i] * primes[j] * primes[k]\
    \ == a {\n                    return true;\n                }\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n --> /tmp/tmpnnel0hp9.rs:7:48\n\
    \  |\n7 |     let primes: Vec<isize> = (1..a).filter(|x| is_prime(*x)).collect();\n\
    \  |                                                ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822619
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n\tlet primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53,\
    \ 59, 61, 67, 71, 73, 79, 83, 89, 97];\n\tfor &i in primes.iter() {\n\t\tif a\
    \ % i == 0 {\n\t\t\tlet a = a / i;\n\t\t\tfor &j in primes.iter() {\n\t\t\t\t\
    if a % j == 0 {\n\t\t\t\t\tlet a = a / j;\n\t\t\t\t\tfor &k in primes.iter() {\n\
    \t\t\t\t\t\tif a % k == 0 {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\
    \t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfalse\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp5cd7ppov.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822619
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    for x in 2..100 {\n        for y in 2..100 {\n            for z in 2..100\
    \ {\n                if a == x * y * z {\n                    if is_prime(x) &&\
    \ is_prime(y) && is_prime(z) {\n                        return true;\n       \
    \             }\n                }\n            }\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmp29boxzfn.rs:11:24\n\
    \   |\n11 |                     if is_prime(x) && is_prime(y) && is_prime(z) {\n\
    \   |                        ^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `is_prime` in this scope\n  --> /tmp/tmp29boxzfn.rs:11:39\n\
    \   |\n11 |                     if is_prime(x) && is_prime(y) && is_prime(z) {\n\
    \   |                                       ^^^^^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmp29boxzfn.rs:11:54\n\
    \   |\n11 |                     if is_prime(x) && is_prime(y) && is_prime(z) {\n\
    \   |                                                      ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822619
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut primes: Vec<isize> = vec![];\n    for i in 2..a {\n        if\
    \ is_prime(i) {\n            primes.push(i);\n        }\n    }\n    primes.iter().any(|x|\
    \ primes.iter().any(|y| primes.iter().any(|z| x * y * z == a)))\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n --> /tmp/tmppp4zfnnu.rs:9:12\n\
    \  |\n9 |         if is_prime(i) {\n  |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822619
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpyh2r3b24.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822618
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let max = ((a as f64).sqrt() as isize) + 1;\n    (2..max).any(|i| {\n\
    \        if a % i == 0 {\n            let b = a / i;\n            let c = ((b\
    \ as f64).sqrt() as isize) + 1;\n            (2..c).any(|j| {\n              \
    \  if b % j == 0 {\n                    let d = b / j;\n                    is_prime(d)\n\
    \                } else {\n                    false\n                }\n    \
    \        })\n        } else {\n            false\n        }\n    })\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpox4hjtye.rs:15:21\n\
    \   |\n15 |                     is_prime(d)\n   |                     ^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822619
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    if a < 0 {\n        return false;\n    }\n\n    let mut t_a = a;\n  \
    \  let mut prime_check: Vec<bool> = vec![true; 100];\n    prime_check[0] = false;\n\
    \    prime_check[1] = false;\n    for i in 2..a {\n        if prime_check[i] {\n\
    \            for j in 2..(100/i) {\n                prime_check[i*j] = false;\n\
    \            }\n        }\n    }\n\n    for i in 2..a {\n        if prime_check[i]\
    \ && t_a % i == 0 {\n            t_a /= i;\n            if t_a == 1 {\n      \
    \          return true;\n            }\n\n            for j in 2..a {\n      \
    \          if prime_check[j] && t_a % j == 0 {\n                    t_a /= j;\n\
    \                    if t_a == 1 {\n                        return true;\n   \
    \                 }\n                    for k in 2..a {\n                   \
    \     if prime_check[k] && t_a % k == 0 {\n                            t_a /=\
    \ k;\n                            if t_a == 1 {\n                            \
    \    return true;\n                            }\n                        }\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   false\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[bool]` cannot be indexed by `isize`\n  --> /tmp/tmp_pzbiw91.rs:16:12\n\
    \   |\n16 |         if prime_check[i] {\n   |            ^^^^^^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[bool]>` is not implemented for `isize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<bool>`\n\nerror[E0277]:\
    \ the type `[bool]` cannot be indexed by `isize`\n  --> /tmp/tmp_pzbiw91.rs:18:17\n\
    \   |\n18 |                 prime_check[i*j] = false;\n   |                 ^^^^^^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[bool]>` is not implemented for `isize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<bool>`\n\n\
    error[E0277]: the type `[bool]` cannot be indexed by `isize`\n  --> /tmp/tmp_pzbiw91.rs:24:12\n\
    \   |\n24 |         if prime_check[i] && t_a % i == 0 {\n   |            ^^^^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[bool]>` is not implemented for `isize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<bool>`\n\n\
    error[E0277]: the type `[bool]` cannot be indexed by `isize`\n  --> /tmp/tmp_pzbiw91.rs:31:20\n\
    \   |\n31 |                 if prime_check[j] && t_a % j == 0 {\n   |        \
    \            ^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[bool]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<bool>`\n\nerror[E0277]: the type `[bool]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmp_pzbiw91.rs:37:28\n   |\n37 |                         if prime_check[k]\
    \ && t_a % k == 0 {\n   |                            ^^^^^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[bool]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>"
  stdout: ''
  timestamp: 1659822619
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut num: isize = 2;\n    let mut prime_multiply: Vec<isize> = Vec::new();\n\
    \    while num <= a {\n        if is_prime(num) {\n            if a % num == 0\
    \ {\n                prime_multiply.push(num);\n                a /= num;\n  \
    \          }\n        }\n        num += 1;\n    }\n    if prime_multiply.len()\
    \ == 3 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n \
    \   let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpne8kdcsk.rs:10:12\n\
    \   |\n10 |         if is_prime(num) {\n   |            ^^^^^^^^ not found in\
    \ this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822619
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut b = a;\n    let mut prime_num = 2;\n    let mut flag = false;\n\
    \    let mut counter = 0;\n    while b > 1 {\n        while b % prime_num == 0\
    \ {\n            b /= prime_num;\n            counter += 1;\n        }\n     \
    \   if counter == 3 {\n            flag = true;\n        }\n        prime_num\
    \ += 1;\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp1usd6h34.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822619
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    if a == 0 {\n        return false;\n    }\n    let mut i = 2;\n    let\
    \ mut vec: Vec<isize> = Vec::new();\n    while i < 100 {\n        if a % i ==\
    \ 0 {\n            vec.push(i);\n            a /= i;\n        } else {\n     \
    \       i += 1;\n        }\n    }\n    let mut result = true;\n    for i in vec\
    \ {\n        if !is_prime(i) {\n            result = false;\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpy81gk47n.rs:22:13\n\
    \   |\n22 |         if !is_prime(i) {\n   |             ^^^^^^^^ not found in\
    \ this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822619
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    (2..a - 1).fold(false, |acc, x| {\n        if acc {\n            return\
    \ acc;\n        }\n        let rem = a % x;\n        if rem == 0 {\n         \
    \   is_prime(x) && is_multiply_prime(a / x)\n        } else {\n            false\n\
    \        }\n    })\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmp40i3ggt2.rs:13:13\n\
    \   |\n13 |             is_prime(x) && is_multiply_prime(a / x)\n   |        \
    \     ^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822619
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpt75_w1dk.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822618
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    for i in 2..a {\n        if is_prime(i) && a % i == 0 {\n           \
    \ for j in 2..a {\n                if is_prime(j) && i != j && a % j == 0 {\n\
    \                    for k in 2..a {\n                        if is_prime(k) &&\
    \ i != k && j != k && a % k == 0 {\n                            return true;\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n --> /tmp/tmp2d12lmf2.rs:8:12\n\
    \  |\n8 |         if is_prime(i) && a % i == 0 {\n  |            ^^^^^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find function `is_prime` in this\
    \ scope\n  --> /tmp/tmp2d12lmf2.rs:10:20\n   |\n10 |                 if is_prime(j)\
    \ && i != j && a % j == 0 {\n   |                    ^^^^^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find function `is_prime` in this scope\n  -->\
    \ /tmp/tmp2d12lmf2.rs:12:28\n   |\n12 |                         if is_prime(k)\
    \ && i != k && j != k && a % k == 0 {\n   |                            ^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to 3 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822619
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let factors = prime_factors(a);\n    let mut counter = 0;\n    for x\
    \ in factors {\n        if x == a {\n            continue;\n        }\n      \
    \  for y in factors {\n            if x*y == a {\n                counter += 1;\n\
    \            }\n        }\n    }\n    return counter == 3;\n}\n\nfn main() {\n\
    \    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `prime_factors` in this scope\n -->\
    \ /tmp/tmpp_uc8ude.rs:7:19\n  |\n7 |     let factors = prime_factors(a);\n  |\
    \                   ^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659822619
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    (1..a).filter(|x| *x * x * x < a).filter(|x| a % x == 0).count() == 3\n\
    }\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpjrdfpc6j.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822619
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let a = a as usize;\n    let mut primes = vec![];\n    let mut is_prime\
    \ = true;\n    for x in 2..a {\n        for y in 2..x {\n            if x % y\
    \ == 0 {\n                is_prime = false;\n                break;\n        \
    \    }\n        }\n        if is_prime {\n            primes.push(x);\n      \
    \  }\n        is_prime = true;\n    }\n    for x in 0..primes.len() {\n      \
    \  for y in x+1..primes.len() {\n            for z in y+1..primes.len() {\n  \
    \              if primes[x] * primes[y] * primes[z] == a {\n                 \
    \   return true;\n                }\n            }\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp8m5sy06c.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822619
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let primes: Vec<isize> = (2..a/2+1).filter(|n| is_prime(*n)).collect();\n\
    \    let mut result = false;\n    for (i,&p1) in primes.iter().enumerate() {\n\
    \        for &p2 in primes.iter().skip(i+1) {\n            for &p3 in primes.iter().skip(i+2)\
    \ {\n                if p1 * p2 * p3 == a {\n                    result = true;\n\
    \                    break;\n                }\n            }\n        }\n   \
    \ }\n    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n  \
    \  assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n  \
    \  assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n  \
    \  assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n --> /tmp/tmp76c23lf6.rs:7:52\n\
    \  |\n7 |     let primes: Vec<isize> = (2..a/2+1).filter(|n| is_prime(*n)).collect();\n\
    \  |                                                    ^^^^^^^^ not found in\
    \ this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822619
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let three_prime = vec![2, 3, 5];\n    let mut i = 1;\n    while a > 1\
    \ {\n        if a % three_prime[i] == 0 {\n            a /= three_prime[i];\n\
    \        } else {\n            i += 1;\n        }\n    }\n    i == 2\n}\n\nfn\
    \ main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `a`\n  --> /tmp/tmp3uof9n2_.rs:11:13\n\
    \   |\n6  | fn is_multiply_prime(a: isize) -> bool {\n   |                   \
    \   - help: consider making this binding mutable: `mut a`\n...\n11 |         \
    \    a /= three_prime[i];\n   |             ^^^^^^^^^^^^^^^^^^^ cannot assign\
    \ to immutable argument\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659822619
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut x = 2;\n    let mut y = 2;\n    let mut z = 2;\n    let mut flag\
    \ = false;\n    for x in 2..a {\n        for y in 2..a {\n            for z in\
    \ 2..a {\n                if x * y * z == a {\n                    flag = true;\n\
    \                }\n            }\n        }\n    }\n    flag\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpvaj5gnni.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822620
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut result = false;\n\
    \    let mut iterator = 0;\n    let mut temp = a;\n    while temp > 1 {\n    \
    \    if primes[iterator] > temp {\n            break;\n        }\n        if temp\
    \ % primes[iterator] == 0 {\n            temp /= primes[iterator];\n         \
    \   if temp == 1 {\n                result = true;\n            }\n        } else\
    \ {\n            iterator += 1;\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp8rbn8flg.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822619
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n\tlet prime = is_prime(a);\n\tlet mut c = 3;\n\twhile c < a {\n\t\tif is_prime(c)\
    \ && a % c == 0 {\n\t\t\tif is_prime(a / c) {\n\t\t\t\treturn true;\n\t\t\t}\n\
    \t\t}\n\t\tc += 1;\n\t}\n\tfalse\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n --> /tmp/tmpxfp16xp5.rs:7:14\n\
    \  |\n7 |     let prime = is_prime(a);\n  |                 ^^^^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find function `is_prime` in this scope\n\
    \  --> /tmp/tmpxfp16xp5.rs:10:6\n   |\n10 |         if is_prime(c) && a % c ==\
    \ 0 {\n   |            ^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find function `is_prime` in this scope\n  --> /tmp/tmpxfp16xp5.rs:11:7\n   |\n\
    11 |             if is_prime(a / c) {\n   |                ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822619
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut i = 0;\n    while i <\
    \ primes.len() {\n        let j = 0;\n        while j < primes.len() {\n     \
    \       let k = 0;\n            while k < primes.len() {\n                if primes[i]\
    \ * primes[j] * primes[k] == a {\n                    return true;\n         \
    \       }\n                k += 1;\n            }\n            j += 1;\n     \
    \   }\n        i += 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign twice to immutable variable `k`\n  --> /tmp/tmpwl7gnx2t.rs:17:17\n\
    \   |\n12 |             let k = 0;\n   |                 -\n   |             \
    \    |\n   |                 first assignment to `k`\n   |                 help:\
    \ consider making this binding mutable: `mut k`\n...\n17 |                 k +=\
    \ 1;\n   |                 ^^^^^^ cannot assign twice to immutable variable\n\n\
    error[E0384]: cannot assign twice to immutable variable `j`\n  --> /tmp/tmpwl7gnx2t.rs:19:13\n\
    \   |\n10 |         let j = 0;\n   |             -\n   |             |\n   | \
    \            first assignment to `j`\n   |             help: consider making this\
    \ binding mutable: `mut j`\n...\n19 |             j += 1;\n   |             ^^^^^^\
    \ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659822619
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let primes = vec![1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut counter = 0;\n\
    \    for x in &primes {\n        for y in &primes {\n            for z in &primes\
    \ {\n                if x * y * z == a {\n                    counter += 1;\n\
    \                }\n            }\n        }\n    }\n    if counter == 1 {\n \
    \       return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate =\
    \ is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpyl3vcu7w.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822620
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    if a < 6 {\n        return false;\n    }\n    for i in 2..a {\n     \
    \   if a % i == 0 {\n            let b = a / i;\n            for j in 2..b {\n\
    \                if b % j == 0 {\n                    let c = b / j;\n       \
    \             if is_prime(i) && is_prime(j) && is_prime(c) {\n               \
    \         return true;\n                    }\n                }\n           \
    \ }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmppl8tc8ez.rs:16:24\n\
    \   |\n16 |                     if is_prime(i) && is_prime(j) && is_prime(c) {\n\
    \   |                        ^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `is_prime` in this scope\n  --> /tmp/tmppl8tc8ez.rs:16:39\n\
    \   |\n16 |                     if is_prime(i) && is_prime(j) && is_prime(c) {\n\
    \   |                                       ^^^^^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmppl8tc8ez.rs:16:54\n\
    \   |\n16 |                     if is_prime(i) && is_prime(j) && is_prime(c) {\n\
    \   |                                                      ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822619
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    if a < 6 {\n        return false;\n    }\n\n    // Create a vector with\
    \ all the prime numbers\n    let mut primes: Vec<isize> = Vec::new();\n    for\
    \ i in 2..100 {\n        let mut is_prime = true;\n        for j in 2..i {\n \
    \           if i % j == 0 {\n                is_prime = false;\n             \
    \   break;\n            }\n        }\n        if is_prime {\n            primes.push(i);\n\
    \        }\n    }\n\n    // let prime_numbers: Vec<isize> = vec![2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89,\
    \ 97];\n    for i in &primes {\n        if a % i == 0 {\n            let mut b\
    \ = a / i;\n            for j in &primes {\n                if b % j == 0 {\n\
    \                    let mut c = b / j;\n                    for k in &primes\
    \ {\n                        if c % k == 0 {\n                            if c\
    \ / k == 1 {\n                                return true;\n                 \
    \           }\n                        }\n                    }\n            \
    \    }\n            }\n        }\n    }\n    false\n}\n\nfn main() {\n    let\
    \ candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822620
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n\tlet mut b: isize = a;\n\tlet mut c: isize = 2;\n\tlet mut arr: Vec<isize>\
    \ = Vec::new();\n\twhile b != 1 {\n\t\twhile b % c == 0 {\n\t\t\tb = b / c;\n\t\
    \t\tarr.push(c);\n\t\t}\n\t\tc += 1;\n\t}\n\tarr.len() == 3\n}\n\nfn main() {\n\
    \    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822620
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut result = Vec::new();\n    let mut number = a;\n    let limit\
    \ = (a as f64).sqrt() as isize;\n    for x in 2..limit {\n        if number %\
    \ x == 0 {\n            result.push(x);\n            number = number / x;\n  \
    \      }\n    }\n    if result.len() == 3 {\n        if is_prime(result[0]) &&\
    \ is_prime(result[1]) && is_prime(result[2]) {\n            return true;\n   \
    \     }\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpsz1r1odr.rs:17:12\n\
    \   |\n17 |         if is_prime(result[0]) && is_prime(result[1]) && is_prime(result[2])\
    \ {\n   |            ^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find function `is_prime` in this scope\n  --> /tmp/tmpsz1r1odr.rs:17:35\n  \
    \ |\n17 |         if is_prime(result[0]) && is_prime(result[1]) && is_prime(result[2])\
    \ {\n   |                                   ^^^^^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpsz1r1odr.rs:17:58\n\
    \   |\n17 |         if is_prime(result[0]) && is_prime(result[1]) && is_prime(result[2])\
    \ {\n   |                                                          ^^^^^^^^ not\
    \ found in this scope\n\nerror: aborting due to 3 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822619
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpt75_w1dk.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822618
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let r = (2..=100).filter(|x| x <= &a).filter(|x| x.is_prime()).filter(|x|\
    \ a % x == 0);\n    if r.len() < 3 {\n        return false;\n    }\n\n    let\
    \ mut prime_factors = Vec::new();\n    let mut copy_a = a;\n    while copy_a >\
    \ 1 {\n        for p in r {\n            if copy_a % p == 0 {\n              \
    \  prime_factors.push(p);\n                copy_a /= p;\n                break;\n\
    \            }\n        }\n    }\n\n    return prime_factors.len() == 3;\n}\n\n\
    fn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_prime` found for reference `&isize` in\
    \ the current scope\n --> /tmp/tmpj6xbbwh6.rs:7:56\n  |\n7 |     let r = (2..=100).filter(|x|\
    \ x <= &a).filter(|x| x.is_prime()).filter(|x| a % x == 0);\n  |             \
    \                                           ^^^^^^^^ method not found in `&isize`\n\
    \nerror[E0599]: no method named `len` found for struct `Filter` in the current\
    \ scope\n --> /tmp/tmpj6xbbwh6.rs:8:10\n  |\n8 |     if r.len() < 3 {\n  |   \
    \       ^^^ method not found in `Filter<Filter<Filter<RangeInclusive<isize>, [closure@/tmp/tmpj6xbbwh6.rs:7:30:\
    \ 7:41]>, [closure@/tmp/tmpj6xbbwh6.rs:7:50: 7:66]>, [closure@/tmp/tmpj6xbbwh6.rs:7:75:\
    \ 7:89]>`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659822619
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let primes: Vec<isize> = (2..a).filter(|n| is_prime(*n)).collect();\n\
    \    let mut res = vec![];\n    for i in primes.iter() {\n        for j in primes.iter()\
    \ {\n            for k in primes.iter() {\n                if i * j * k == a {\n\
    \                    res.push(vec![*i, *j, *k]);\n                }\n        \
    \    }\n        }\n    }\n    if res.len() > 0 {\n        return true;\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n --> /tmp/tmpf70wz6kc.rs:7:48\n\
    \  |\n7 |     let primes: Vec<isize> = (2..a).filter(|n| is_prime(*n)).collect();\n\
    \  |                                                ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822619
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let primes: Vec<isize> = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut i = 0;\n\
    \    while i < primes.len() {\n        let mut num = a;\n        let mut multiple\
    \ = 1;\n        while num > 1 {\n            if num % primes[i] == 0 {\n     \
    \           multiple *= primes[i];\n                num /= primes[i];\n      \
    \      } else {\n                i += 1;\n                break;\n           \
    \ }\n        }\n        if multiple == a {\n            return true;\n       \
    \ }\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmps6d3n07l.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822620
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    if a < 6 { return false; }\n    for i in 2..(a/2) {\n        if is_prime(i)\
    \ && a % i == 0 {\n            if is_prime(a/i) {\n                return true;\n\
    \            }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n --> /tmp/tmpjt3lfla7.rs:9:12\n\
    \  |\n9 |         if is_prime(i) && a % i == 0 {\n  |            ^^^^^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find function `is_prime` in this\
    \ scope\n  --> /tmp/tmpjt3lfla7.rs:10:16\n   |\n10 |             if is_prime(a/i)\
    \ {\n   |                ^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659822619
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut result = false;\n    let primes = [2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    for\
    \ i in 0..primes.len() {\n        for j in 0..primes.len() {\n            for\
    \ k in 0..primes.len() {\n                if a == primes[i] * primes[j] * primes[k]\
    \ {\n                    result = true;\n                }\n            }\n  \
    \      }\n    }\n    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822620
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut ret = false;\n    let mut primes: Vec<isize> = vec![];\n    let\
    \ mut num = a;\n    for i in 2..num {\n        let mut is_prime = true;\n    \
    \    for j in 2..i {\n            if i % j == 0 {\n                is_prime =\
    \ false;\n                break;\n            }\n        }\n        if is_prime\
    \ {\n            primes.push(i);\n        }\n    }\n    for i in primes.iter()\
    \ {\n        let quotient = num / i;\n        if num % i == 0 {\n            num\
    \ = quotient;\n            println!(\"{}\", i);\n        }\n    }\n    if num\
    \ <= 1 {\n        ret = true;\n    }\n    ret\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6nigdqoy.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: '2

    3

    5

    2

    '
  timestamp: 1659822620
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    false\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n   \
    \ assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n   \
    \ assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n   \
    \ assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n \
    \   assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpuq0kx2xi.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822619
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    for i in 0..primes.len() {\n\
    \        for j in 0..primes.len() {\n            for k in 0..primes.len() {\n\
    \                if primes[i] * primes[j] * primes[k] == a {\n               \
    \     return true;\n                }\n            }\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822620
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut a_origin = a;\n    let mut num_primes = 0;\n    let mut current_divisor\
    \ = 2;\n    while a_origin > 1 {\n        if a_origin % current_divisor == 0 {\n\
    \            num_primes += 1;\n            a_origin /= current_divisor;\n    \
    \    } else {\n            current_divisor += 1;\n        }\n    }\n    return\
    \ num_primes == 3;\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822620
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n\tlet mut counter = 0;\n\tlet mut i = 1;\n\twhile i < a {\n\t\tif is_prime(i)\
    \ && a % i == 0 {\n\t\t\tcounter += 1;\n\t\t}\n\t\ti += 1;\n\t}\n\tcounter ==\
    \ 3\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpp1pqr67i.rs:10:6\n\
    \   |\n10 |         if is_prime(i) && a % i == 0 {\n   |            ^^^^^^^^ not\
    \ found in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822619
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let a: usize = a as usize;\n    let primes: Vec<usize> = (2..100).filter(|&x|\
    \ is_prime(x)).collect();\n    for x in primes.iter() {\n        for y in primes.iter()\
    \ {\n            for z in primes.iter() {\n                if a == x * y * z {\n\
    \                    return true;\n                }\n            }\n        }\n\
    \    }\n    false\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n --> /tmp/tmpni_yk8hw.rs:8:51\n\
    \  |\n8 |     let primes: Vec<usize> = (2..100).filter(|&x| is_prime(x)).collect();\n\
    \  |                                                   ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822619
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    for i in 2..(a/2) {\n        for j in 2..(a/2) {\n            for k in\
    \ 2..(a/2) {\n                if i * j * k == a {\n                    return\
    \ true;\n                }\n            }\n        }\n    }\n    false\n}\n\n\
    fn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpx9tprsyb.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822620
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut result = false;\n    for x in 2..a {\n        for y in 2..a {\n\
    \            for z in 2..a {\n                if ((x*y*z) == a) && (is_prime(x)\
    \ && is_prime(y) && is_prime(z)) {\n                    result = true;\n     \
    \           }\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpqypx_oue.rs:11:39\n\
    \   |\n11 |                 if ((x*y*z) == a) && (is_prime(x) && is_prime(y) &&\
    \ is_prime(z)) {\n   |                                       ^^^^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find function `is_prime` in this scope\n\
    \  --> /tmp/tmpqypx_oue.rs:11:54\n   |\n11 |                 if ((x*y*z) == a)\
    \ && (is_prime(x) && is_prime(y) && is_prime(z)) {\n   |                     \
    \                                 ^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `is_prime` in this scope\n  --> /tmp/tmpqypx_oue.rs:11:69\n\
    \   |\n11 |                 if ((x*y*z) == a) && (is_prime(x) && is_prime(y) &&\
    \ is_prime(z)) {\n   |                                                       \
    \              ^^^^^^^^ not found in this scope\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822619
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let primes: Vec<isize> = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    for i in primes.iter()\
    \ {\n        if a % i == 0 {\n            let b = a / i;\n            for j in\
    \ primes.iter() {\n                if j >= i { break }\n                if b %\
    \ j == 0 {\n                    let c = b / j;\n                    for k in primes.iter()\
    \ {\n                        if k >= j { break }\n                        if c\
    \ % k == 0 {\n                            return c / k == 1;\n               \
    \         }\n                    }\n                }\n            }\n       \
    \ }\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvs57nqqn.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822620
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    // TODO ^ Try your code here\n\n    true\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp4hcyh6zc.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822620
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let prime = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut counter = 0;\n    for\
    \ i in prime.iter() {\n        if a % i == 0 {\n            counter += 1;\n  \
    \      }\n    }\n    if counter == 3 {\n        return true;\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpa1qaq7pi.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822620
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    // TODO: Implement\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpgrjx14dj.rs:8:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822620
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpt75_w1dk.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822618
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    if a < 6 {\n        return false;\n    }\n    let is_prime = |x: isize|\
    \ (2..x).all(|i| x % i != 0);\n    for i in 2..a {\n        if is_prime(i) &&\
    \ a % i == 0 {\n            let mut b = a / i;\n            while b % i == 0 {\n\
    \                b /= i;\n            }\n            if is_prime(b) {\n      \
    \          return true;\n            }\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp7kkbed7h.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822620
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    for i in 2..a + 1 {\n        for j in 2..a + 1 {\n            for k in\
    \ 2..a + 1 {\n                if i * j * k == a {\n                    if is_prime(i)\
    \ && is_prime(j) && is_prime(k) {\n                        return true;\n    \
    \                }\n                }\n            }\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpwn1dvxa7.rs:11:24\n\
    \   |\n11 |                     if is_prime(i) && is_prime(j) && is_prime(k) {\n\
    \   |                        ^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `is_prime` in this scope\n  --> /tmp/tmpwn1dvxa7.rs:11:39\n\
    \   |\n11 |                     if is_prime(i) && is_prime(j) && is_prime(k) {\n\
    \   |                                       ^^^^^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpwn1dvxa7.rs:11:54\n\
    \   |\n11 |                     if is_prime(i) && is_prime(j) && is_prime(k) {\n\
    \   |                                                      ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822620
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut num = a;\n    let mut is_multiply = false;\n    let mut prime_factors\
    \ = Vec::new();\n    for i in 2..a {\n        while num % i == 0 {\n         \
    \   prime_factors.push(i);\n            num /= i;\n        }\n    }\n    if prime_factors.len()\
    \ == 3 {\n        if (prime_factors[0] * prime_factors[1] * prime_factors[2])\
    \ == a {\n            is_multiply = true;\n        }\n    }\n    is_multiply\n\
    }\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822620
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    true\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpyg54zneo.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822620
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut divisor: isize = 2;\n    let mut index: isize = 0;\n    let mut\
    \ primes: Vec<isize> = Vec::new();\n    let mut result: bool = false;\n\n    while\
    \ index != 3 {\n        if a % divisor == 0 {\n            if is_prime(divisor)\
    \ {\n                primes.push(divisor);\n                index += 1;\n    \
    \        }\n        }\n        divisor += 1;\n    }\n\n    if primes.len() !=\
    \ 3 {\n        return false;\n    }\n\n    result = (primes[0] * primes[1] * primes[2])\
    \ == a;\n\n    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmp5d4orwj5.rs:14:16\n\
    \   |\n14 |             if is_prime(divisor) {\n   |                ^^^^^^^^ not\
    \ found in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822620
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpt75_w1dk.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822618
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    if a <= 0 {\n        return false;\n    }\n\n    let mut n = a;\n   \
    \ for i in 2..a {\n        if n % i == 0 {\n            n /= i;\n            if\
    \ n == 1 {\n                return true;\n            }\n        }\n    }\n  \
    \  false\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpbbo17mfh.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822620
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut rest = a;\n    let mut is_multiply = false;\n    let mut result\
    \ = vec![];\n    if is_prime(a) {\n        return false;\n    }\n    for n in\
    \ 2..a {\n        if is_prime(n) {\n            while rest % n == 0 {\n      \
    \          rest = rest / n;\n                result.push(n);\n            }\n\
    \        }\n    }\n    if result.len() == 3 {\n        is_multiply = true;\n \
    \   }\n    is_multiply\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpa7m5kmv8.rs:10:8\n\
    \   |\n10 |     if is_prime(a) {\n   |        ^^^^^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpa7m5kmv8.rs:14:12\n\
    \   |\n14 |         if is_prime(n) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822620
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    for i in 2..a {\n        for j in 2..a {\n            for k in 2..a {\n\
    \                if i * j * k == a {\n                    return true;\n     \
    \           }\n            }\n        }\n    }\n    false\n}\n\nfn main() {\n\
    \    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp9hl0ce_2.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822620
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    if a < 6 {\n        return false;\n    }\n\n    let mut i = 2;\n    let\
    \ mut prime = [2, 3, 5];\n    let mut j = 0;\n    while i <= a {\n        let\
    \ mut k = 0;\n        while k < j {\n            if a % prime[k] == 0 {\n    \
    \            if a / prime[k] != 1 {\n                    a /= prime[k];\n    \
    \                prime[j] = i;\n                    j += 1;\n                }\
    \ else {\n                    return true;\n                }\n            }\n\
    \            k += 1;\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `a`\n  --> /tmp/tmpkmtbow4j.rs:19:21\n\
    \   |\n6  | fn is_multiply_prime(a: isize) -> bool {\n   |                   \
    \   - help: consider making this binding mutable: `mut a`\n...\n19 |         \
    \            a /= prime[k];\n   |                     ^^^^^^^^^^^^^ cannot assign\
    \ to immutable argument\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659822620
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let prime_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    prime_numbers.iter().any(|x|\
    \ {\n        if a % x == 0 {\n            let b = a / x;\n            if prime_numbers.contains(&b)\
    \ {\n                let c = b / x;\n                if prime_numbers.contains(&c)\
    \ {\n                    return true;\n                }\n            }\n    \
    \    }\n        false\n    })\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpgistelp2.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822620
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut result = true;\n    let mut num = a;\n    let mut i = 2;\n  \
    \  let mut num_of_prime = 0;\n    while i <= a && num_of_prime < 3 {\n       \
    \ if is_prime(i) && num % i == 0 {\n            num_of_prime += 1;\n         \
    \   num /= i;\n        }\n        i += 1;\n    }\n    if num_of_prime != 3 {\n\
    \        result = false;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpubvzlr2h.rs:12:12\n\
    \   |\n12 |         if is_prime(i) && num % i == 0 {\n   |            ^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822620
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    if a <= 0 {\n        return false;\n    }\n    let mut a = a;\n    let\
    \ mut min = 2;\n    loop {\n        if a == 1 {\n            return true;\n  \
    \      }\n        if is_prime(a) {\n            return false;\n        }\n   \
    \     let max = a - 1;\n        let mut found = false;\n        for i in min..max\
    \ {\n            if is_prime(i) && a % i == 0 {\n                a = a / i;\n\
    \                min = i;\n                found = true;\n                break;\n\
    \            }\n        }\n        if !found {\n            return false;\n  \
    \      }\n    }\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n  \
    \  assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n  \
    \  assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n  \
    \  assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmp7nf8y__e.rs:16:12\n\
    \   |\n16 |         if is_prime(a) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find function `is_prime` in this scope\n  -->\
    \ /tmp/tmp7nf8y__e.rs:22:16\n   |\n22 |             if is_prime(i) && a % i ==\
    \ 0 {\n   |                ^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822620
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpt75_w1dk.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822618
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    for i in 2..a {\n        if is_prime(i) && a % i == 0 {\n           \
    \ let b = a / i;\n            for j in 2..b {\n                if is_prime(j)\
    \ && b % j == 0 {\n                    let c = b / j;\n                    if\
    \ is_prime(c) {\n                        return true;\n                    }\n\
    \                }\n            }\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n --> /tmp/tmp9pqniufk.rs:8:12\n\
    \  |\n8 |         if is_prime(i) && a % i == 0 {\n  |            ^^^^^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find function `is_prime` in this\
    \ scope\n  --> /tmp/tmp9pqniufk.rs:11:20\n   |\n11 |                 if is_prime(j)\
    \ && b % j == 0 {\n   |                    ^^^^^^^^ not found in this scope\n\n\
    error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmp9pqniufk.rs:13:24\n\
    \   |\n13 |                     if is_prime(c) {\n   |                       \
    \ ^^^^^^^^ not found in this scope\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822620
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut a = a;\n    let mut counter = 0;\n    let max_num = 100;\n  \
    \  while a > 1 && counter < 3 {\n        let mut i = 2;\n        while i < max_num\
    \ {\n            if is_prime(i) && a % i == 0 {\n                a /= i;\n   \
    \             counter += 1;\n                break;\n            }\n         \
    \   i += 1;\n        }\n    }\n    if counter == 3 {\n        true\n    } else\
    \ {\n        false\n    }\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmp5x3cgpv0.rs:13:16\n\
    \   |\n13 |             if is_prime(i) && a % i == 0 {\n   |                ^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822620
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    if a < 3 {\n        return false;\n    }\n\n    let mut prime_numbers:\
    \ Vec<isize> = Vec::new();\n    let mut a_temp = a;\n    for i in 2..a {\n   \
    \     if a_temp % i == 0 {\n            if is_prime(i) {\n                prime_numbers.push(i);\n\
    \                a_temp = a_temp / i;\n            }\n        }\n    }\n\n   \
    \ prime_numbers.len() == 3\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpu__1wm0p.rs:15:16\n\
    \   |\n15 |             if is_prime(i) {\n   |                ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822620
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    a == 2*3*5\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp815gj_gq.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822620
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let square_root = (a as f64).sqrt() as isize;\n    (2..square_root)\n\
    \        .filter(|x| a % x == 0)\n        .filter(|x| is_prime(*x))\n        .take(2)\n\
    \        .count()\n        == 2\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpies6vc0n.rs:10:21\n\
    \   |\n10 |         .filter(|x| is_prime(*x))\n   |                     ^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822620
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut a = a;\n    let mut b = 2;\n    let mut c = a - b;\n    while\
    \ b < c {\n        let b = a - b;\n        c = a - b;\n        if is_prime(b)\
    \ && is_prime(c) {\n            return true;\n        }\n    }\n    false\n}\n\
    \nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpdsimsryl.rs:13:12\n\
    \   |\n13 |         if is_prime(b) && is_prime(c) {\n   |            ^^^^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find function `is_prime` in\
    \ this scope\n  --> /tmp/tmpdsimsryl.rs:13:27\n   |\n13 |         if is_prime(b)\
    \ && is_prime(c) {\n   |                           ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822620
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    for num in primes.iter() {\n\
    \        if a % num == 0 {\n            let next = a / num;\n            for num2\
    \ in primes.iter() {\n                if next % num2 == 0 {\n                \
    \    let next2 = next / num2;\n                    for num3 in primes.iter() {\n\
    \                        if next2 % num3 == 0 {\n                            let\
    \ next3 = next2 / num3;\n                            if next3 == 1 {\n       \
    \                         return true;\n                            }\n      \
    \                  }\n                    }\n                }\n            }\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822620
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    if a == 0 {\n        return false;\n    }\n    let primes = prime_numbers_below(a\
    \ as usize + 1);\n    let mut factors = Vec::<usize>::new();\n    let mut number\
    \ = a as usize;\n    let mut index = 0;\n    while number > 1 {\n        if number\
    \ % primes[index] == 0 {\n            factors.push(primes[index]);\n         \
    \   number /= primes[index];\n        } else {\n            index += 1;\n    \
    \    }\n    }\n    factors.len() == 3\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `prime_numbers_below` in this scope\n\
    \  --> /tmp/tmpviq3duns.rs:10:18\n   |\n10 |     let primes = prime_numbers_below(a\
    \ as usize + 1);\n   |                  ^^^^^^^^^^^^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822620
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n\t// TODO: Write code here\n\tfalse\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp2sv292k9.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822620
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpt75_w1dk.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822618
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    // TODO\n    true\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmprita9ovp.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822619
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut i = 2;\n    let mut primes: Vec<isize> = Vec::new();\n    let\
    \ mut is_prime = true;\n    let mut divided_count = 0;\n    while i < 100 {\n\
    \        for j in 2..i {\n            if i % j == 0 {\n                is_prime\
    \ = false;\n                break;\n            }\n        }\n        if is_prime\
    \ {\n            primes.push(i);\n        }\n        i += 1;\n        is_prime\
    \ = true;\n    }\n    let mut i = 0;\n    while i < primes.len() {\n        for\
    \ j in i..primes.len() {\n            for k in j..primes.len() {\n           \
    \     if primes[i] * primes[j] * primes[k] == a {\n                    divided_count\
    \ += 1;\n                }\n            }\n        }\n        i += 1;\n    }\n\
    \    if divided_count > 0 {\n        return true;\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822620
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut result = false;\n    let mut a_is_prime = false;\n    let mut\
    \ b_is_prime = false;\n    let mut c_is_prime = false;\n    let mut i = 2;\n \
    \   let mut b = 0;\n    let mut c = 0;\n    if is_prime(a) {\n        a_is_prime\
    \ = true;\n    } else {\n        while i < a {\n            if a % i == 0 {\n\
    \                b = a / i;\n                if is_prime(b) {\n              \
    \      b_is_prime = true;\n                    break;\n                }\n   \
    \         }\n            i += 1;\n        }\n    }\n    if b_is_prime {\n    \
    \    i = 2;\n        while i < b {\n            if b % i == 0 {\n            \
    \    c = b / i;\n                if is_prime(c) {\n                    c_is_prime\
    \ = true;\n                    break;\n                }\n            }\n    \
    \        i += 1;\n        }\n    }\n    if a_is_prime || b_is_prime || c_is_prime\
    \ {\n        result = true;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvu61s9dp.rs:14:8\n\
    \   |\n14 |     if is_prime(a) {\n   |        ^^^^^^^^ help: a local variable\
    \ with a similar name exists: `a_is_prime`\n\nerror[E0425]: cannot find function\
    \ `is_prime` in this scope\n  --> /tmp/tmpvu61s9dp.rs:20:20\n   |\n20 |      \
    \           if is_prime(b) {\n   |                    ^^^^^^^^ help: a local variable\
    \ with a similar name exists: `a_is_prime`\n\nerror[E0425]: cannot find function\
    \ `is_prime` in this scope\n  --> /tmp/tmpvu61s9dp.rs:33:20\n   |\n33 |      \
    \           if is_prime(c) {\n   |                    ^^^^^^^^ help: a local variable\
    \ with a similar name exists: `a_is_prime`\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822620
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    for i in 2..a {\n        for j in 2..a {\n            for k in 2..a {\n\
    \                if i * j * k == a {\n                    if i % 2 != 0 {\n  \
    \                      if j % 2 != 0 {\n                            if k % 2 !=\
    \ 0 {\n                                return true;\n                        \
    \    }\n                        }\n                    }\n                }\n\
    \            }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp0xe3go6p.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822620
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n\tlet primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n\tlet mut ret = false;\n\tfor (i,\
    \ p) in primes.iter().enumerate() {\n\t\tfor j in i..primes.len() {\n\t\t\tfor\
    \ k in j..primes.len() {\n\t\t\t\tif a == primes[i] * primes[j] * primes[k] {\n\
    \t\t\t\t\tret = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tret\n}\n\nfn main() {\n\
    \    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822620
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut prime_numbers: Vec<isize> = Vec::new();\n    let mut prime_number_count\
    \ = 0;\n    let mut current_number = a;\n    for i in 2..current_number + 1 {\n\
    \        if current_number % i == 0 {\n            prime_numbers.push(i);\n  \
    \          current_number /= i;\n            prime_number_count += 1;\n      \
    \      if current_number == 1 {\n                break;\n            }\n     \
    \   }\n    }\n    prime_number_count == 3\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpf25t8u2e.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822620
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut n = a;\n    let mut c = 0;\n    while n % 2 == 0 {\n        n\
    \ /= 2;\n        c += 1;\n    }\n    if c % 3 != 0 {\n        return false;\n\
    \    }\n    let mut i = 3;\n    while i * i <= n {\n        c = 0;\n        while\
    \ n % i == 0 {\n            n /= i;\n            c += 1;\n        }\n        if\
    \ c % 2 != 0 {\n            return false;\n        }\n        i += 2;\n    }\n\
    \    n > 1\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp0ixuvite.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822620
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n\tlet mut prime_numbers: Vec<isize> = Vec::new();\n\tfor i in 2..a {\n\t\t\
    if is_prime(i) {\n\t\t\tprime_numbers.push(i);\n\t\t}\n\t}\n\tif a == 0 {\n\t\t\
    return false;\n\t}\n\tfor prime_num in prime_numbers {\n\t\tif a % prime_num ==\
    \ 0 {\n\t\t\tlet temp = a / prime_num;\n\t\t\tfor prime_num2 in prime_numbers\
    \ {\n\t\t\t\tif temp % prime_num2 == 0 {\n\t\t\t\t\tlet temp2 = temp / prime_num2;\n\
    \t\t\t\t\tfor prime_num3 in prime_numbers {\n\t\t\t\t\t\tif temp2 % prime_num3\
    \ == 0 {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\
    \t\t}\n\t\t}\n\t}\n\treturn false;\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n --> /tmp/tmpl2mj2gpk.rs:9:6\n\
    \  |\n9 |         if is_prime(i) {\n  |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822620
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n\tlet factors = Factor::factors(a);\n\tlet mut primes = Vec::new();\n\tfor\
    \ i in 0..factors.len() {\n\t\tif is_prime(factors[i]) {\n\t\t\tprimes.push(factors[i]);\n\
    \t\t}\n\t}\n\tif primes.len() == 3 {\n\t\treturn true;\n\t}\n\treturn false;\n\
    }\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Factor`\n -->\
    \ /tmp/tmp0rpgo0dj.rs:7:16\n  |\n7 |     let factors = Factor::factors(a);\n \
    \ |                   ^^^^^^ use of undeclared type `Factor`\n\nerror[E0425]:\
    \ cannot find function `is_prime` in this scope\n  --> /tmp/tmp0rpgo0dj.rs:10:6\n\
    \   |\n10 |         if is_prime(factors[i]) {\n   |            ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0425, E0433.\nFor more information about an error, try\
    \ `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822620
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    for i in 2..100 {\n        for j in 2..100 {\n            for k in 2..100\
    \ {\n                if i * j * k == a {\n                    return true;\n \
    \               }\n            }\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpzgqpw3el.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822620
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let primes: Vec<isize> = eratosthenes_sieve(a).into_iter().collect();\n\
    \    for i in 0..(primes.len() - 2) {\n        for j in (i + 1)..(primes.len()\
    \ - 1) {\n            for k in (j + 1)..primes.len() {\n                if a ==\
    \ primes[i] * primes[j] * primes[k] {\n                    return true;\n    \
    \            }\n            }\n        }\n    }\n    false\n}\n\nfn main() {\n\
    \    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `eratosthenes_sieve` in this scope\n\
    \ --> /tmp/tmp84a2yvyx.rs:7:30\n  |\n7 |     let primes: Vec<isize> = eratosthenes_sieve(a).into_iter().collect();\n\
    \  |                              ^^^^^^^^^^^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822620
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let primes: Vec<isize> = (2..a).filter(|x| is_prime(*x)).collect();\n\
    \    primes.iter().any(|&x| primes.iter().any(|&y| primes.iter().any(|&z| a ==\
    \ x * y * z)))\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n   \
    \ assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n   \
    \ assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n   \
    \ assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n \
    \   assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n --> /tmp/tmph0f_91p_.rs:7:48\n\
    \  |\n7 |     let primes: Vec<isize> = (2..a).filter(|x| is_prime(*x)).collect();\n\
    \  |                                                ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822620
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let primes: Vec<isize> = (2..=a).filter(|x| is_prime(*x)).collect();\n\
    \    for x in primes.iter() {\n        for y in primes.iter() {\n            if\
    \ x * y == a {\n                return true;\n            }\n        }\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n --> /tmp/tmpo1smqn_2.rs:7:49\n\
    \  |\n7 |     let primes: Vec<isize> = (2..=a).filter(|x| is_prime(*x)).collect();\n\
    \  |                                                 ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822620
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpt75_w1dk.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822618
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut a = a;\n    let mut factors = vec![];\n    let mut prime_factors\
    \ = vec![];\n    let mut i = 2;\n    while a != 1 {\n        if a % i == 0 {\n\
    \            factors.push(i);\n            a = a / i;\n        } else {\n    \
    \        i += 1;\n        }\n    }\n    let mut i = 2;\n    while i * i <= factors.len()\
    \ as isize {\n        if factors[i as usize] == 0 {\n            prime_factors.push(i);\n\
    \            for j in i..factors.len() as isize {\n                if j % i ==\
    \ 0 {\n                    factors[j as usize] = 0;\n                }\n     \
    \       }\n        }\n        i += 1;\n    }\n    prime_factors.len() == 3\n}\n\
    \nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpwu8a51y3.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822620
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let i = 2;\n    let mut result = true;\n    for i in 1..a {\n       \
    \ if a % i == 0 {\n            let x = a / i;\n            let mut m = 2;\n  \
    \          let mut is_divided = false;\n            for m in 1..x {\n        \
    \        if x % m == 0 {\n                    is_divided = true;\n           \
    \         break;\n                }\n            }\n            if !is_divided\
    \ {\n                break;\n            }\n        }\n    }\n    let k = 2;\n\
    \    for k in 1..a {\n        if a % k == 0 {\n            let x = a / k;\n  \
    \          let mut m = 2;\n            let mut is_divided = false;\n         \
    \   for m in 1..x {\n                if x % m == 0 {\n                    is_divided\
    \ = true;\n                    break;\n                }\n            }\n    \
    \        if !is_divided {\n                break;\n            }\n        }\n\
    \    }\n    for i in 1..a {\n        if a % i == 0 {\n            let x = a /\
    \ i;\n            let mut m = 2;\n            let mut is_divided = false;\n  \
    \          for m in 1..x {\n                if x % m == 0 {\n                \
    \    is_divided = true;\n                    break;\n                }\n     \
    \       }\n            if !is_divided {\n                break;\n            }\n\
    \        }\n    }\n    if a > 0 {\n        result = true;\n    } else {\n    \
    \    result = false;\n    }\n    result\n}\n\nfn main() {\n    let candidate =\
    \ is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp3bj2kggz.rs:68:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822620
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut result = false;\n    let mut temp = a;\n    for i in 2..temp\
    \ + 1 {\n        if temp % i == 0 {\n            if is_prime(i) {\n          \
    \      temp /= i;\n                result = is_prime(temp);\n                if\
    \ !result {\n                    break;\n                }\n            }\n  \
    \      }\n    }\n    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmp20t15s8x.rs:11:16\n\
    \   |\n11 |             if is_prime(i) {\n   |                ^^^^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find function `is_prime` in this scope\n\
    \  --> /tmp/tmp20t15s8x.rs:13:26\n   |\n13 |                 result = is_prime(temp);\n\
    \   |                          ^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822620
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    // TODO\n    false\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpmtnj4a7_.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822620
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    (2..(a / 2)).filter(|x| a % x == 0).any(|x| is_prime(x))\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n --> /tmp/tmpqa77mp3z.rs:7:49\n\
    \  |\n7 |     (2..(a / 2)).filter(|x| a % x == 0).any(|x| is_prime(x))\n  |  \
    \                                               ^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822620
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut b = a;\n    let mut c = 0;\n    while b % 2 == 0 {\n        b\
    \ /= 2;\n        c += 1;\n    }\n    if c >= 3 {\n        return false;\n    }\n\
    \    let mut d = 0;\n    while b % 3 == 0 {\n        b /= 3;\n        d += 1;\n\
    \    }\n    if d >= 2 {\n        return false;\n    }\n    let mut e = 0;\n  \
    \  while b % 5 == 0 {\n        b /= 5;\n        e += 1;\n    }\n    if e >= 2\
    \ {\n        return false;\n    }\n    if b == 1 {\n        return true;\n   \
    \ }\n    return false;\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpt1_h0z41.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822620
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    if a < 1 {\n        return false;\n    }\n    if a % 2 == 0 {\n     \
    \   return is_multiply_prime(a / 2);\n    }\n    if a % 3 == 0 {\n        return\
    \ is_multiply_prime(a / 3);\n    }\n    if a % 5 == 0 {\n        return is_multiply_prime(a\
    \ / 5);\n    }\n    if a % 7 == 0 {\n        return is_multiply_prime(a / 7);\n\
    \    }\n    a <= 7\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp58921ocs.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822620
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let factors = divisors(a);\n    if factors.len() < 3 {\n        return\
    \ false;\n    }\n    for factor in factors {\n        if ! is_prime(factor) {\n\
    \            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n   \
    \ let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n \
    \   assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n  \
    \  assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `divisors` in this scope\n --> /tmp/tmpnnt4xhj3.rs:7:19\n\
    \  |\n7 |     let factors = divisors(a);\n  |                   ^^^^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find function `is_prime` in this scope\n\
    \  --> /tmp/tmpnnt4xhj3.rs:12:14\n   |\n12 |         if ! is_prime(factor) {\n\
    \   |              ^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659822620
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut counter = 0;\n   \
    \ let mut div = false;\n    while counter < primes.len() {\n        if a % primes[counter]\
    \ == 0 {\n            div = true;\n            a /= primes[counter];\n       \
    \     counter = 0;\n        } else {\n            counter += 1;\n        }\n \
    \   }\n    return div;\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `a`\n  --> /tmp/tmpma1o27br.rs:13:13\n\
    \   |\n6  | fn is_multiply_prime(a: isize) -> bool {\n   |                   \
    \   - help: consider making this binding mutable: `mut a`\n...\n13 |         \
    \    a /= primes[counter];\n   |             ^^^^^^^^^^^^^^^^^^^^ cannot assign\
    \ to immutable argument\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659822620
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    for i in (1..100) {\n        for j in (1..100) {\n            for k in\
    \ (1..100) {\n                if is_prime(i) && is_prime(j) && is_prime(k) &&\
    \ i * j * k == a {\n                    return true;\n                }\n    \
    \        }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate =\
    \ is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmp8m9tjldd.rs:10:20\n\
    \   |\n10 |                 if is_prime(i) && is_prime(j) && is_prime(k) && i\
    \ * j * k == a {\n   |                    ^^^^^^^^ not found in this scope\n\n\
    error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmp8m9tjldd.rs:10:35\n\
    \   |\n10 |                 if is_prime(i) && is_prime(j) && is_prime(k) && i\
    \ * j * k == a {\n   |                                   ^^^^^^^^ not found in\
    \ this scope\n\nerror[E0425]: cannot find function `is_prime` in this scope\n\
    \  --> /tmp/tmp8m9tjldd.rs:10:50\n   |\n10 |                 if is_prime(i) &&\
    \ is_prime(j) && is_prime(k) && i * j * k == a {\n   |                       \
    \                           ^^^^^^^^ not found in this scope\n\nwarning: unnecessary\
    \ parentheses around `for` iterator expression\n --> /tmp/tmp8m9tjldd.rs:7:14\n\
    \  |\n7 |     for i in (1..100) {\n  |              ^^^^^^^^ help: remove these\
    \ parentheses\n  |\n  = note: `#[warn(unused_parens)]` on by default\n\nwarning:\
    \ unnecessary parentheses around `for` iterator expression\n --> /tmp/tmp8m9tjldd.rs:8:18\n\
    \  |\n8 |         for j in (1..100) {\n  |                  ^^^^^^^^ help: remove\
    \ these parentheses\n\nwarning: unnecessary parentheses around `for` iterator\
    \ expression\n --> /tmp/tmp8m9tjldd.rs:9:22\n  |\n9 |             for k in (1..100)\
    \ {\n  |                      ^^^^^^^^ help: remove these parentheses\n\nerror:\
    \ aborting due to 3 previous errors; 3 warnings emitted\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822620
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpt75_w1dk.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822618
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut b = a;\n    let mut i = 2;\n    let mut is_prime = false;\n \
    \   let mut cnt = 0;\n    while b != 1 {\n        if b % i == 0 {\n          \
    \  if is_prime_number(i) {\n                cnt += 1;\n                b /= i;\n\
    \            }\n        }\n        if b % i != 0 {\n            i += 1;\n    \
    \    }\n    }\n    if cnt == 3 {\n        return true;\n    }\n    false\n}\n\n\
    fn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime_number` in this scope\n  -->\
    \ /tmp/tmpxamagtre.rs:13:16\n   |\n13 |             if is_prime_number(i) {\n\
    \   |                ^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659822620
- exit_code: -1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut factor = 3;\n    let mut counter = 0;\n    let mut i = a;\n \
    \   while i > 0 {\n        if i % factor == 0 {\n            counter += 1;\n \
    \           i /= factor;\n        } else {\n            factor += 2;\n       \
    \ }\n    }\n    counter == 3\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659822625
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    if a % 2 == 0 || a % 3 == 0 || a % 5 == 0 {\n        true\n    } else\
    \ {\n        false\n    }\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpy4rngsw8.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822620
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let a = a as usize;\n    for x in 2..a {\n        for y in 2..a {\n \
    \           for z in 2..a {\n                if x * y * z == a {\n           \
    \         return true;\n                }\n            }\n        }\n    }\n \
    \   false\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpkf9j1tlm.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822620
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut n = a;\n    let mut d = 2;\n    let mut count = 0;\n    while\
    \ n > 1 {\n        while n % d == 0 {\n            n /= d;\n            count\
    \ += 1;\n        }\n        d += 1;\n    }\n    count == 3\n}\n\nfn main() {\n\
    \    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822620
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let prime_numbers = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,\
    \ 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    for p in prime_numbers\
    \ {\n        if a % p == 0 {\n            for p2 in prime_numbers {\n        \
    \        if p2 * p == a {\n                    return true;\n                }\n\
    \            }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `prime_numbers`\n   --> /tmp/tmp4hp2k6_d.rs:10:23\n\
    \    |\n7   |     let prime_numbers = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    |        \
    \ ------------- move occurs because `prime_numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n8   |     for p in prime_numbers {\n  \
    \  |              ------------- `prime_numbers` moved due to this implicit call\
    \ to `.into_iter()`\n9   |         if a % p == 0 {\n10  |             for p2 in\
    \ prime_numbers {\n    |                       ^^^^^^^^^^^^^ `prime_numbers` moved\
    \ due to this implicit call to `.into_iter()`, in previous iteration of loop\n\
    \    |\nnote: this function takes ownership of the receiver `self`, which moves\
    \ `prime_numbers`\nhelp: consider borrowing to avoid moving into the for loop\n\
    \    |\n10  |             for p2 in &prime_numbers {\n    |                  \
    \     ~~~~~~~~~~~~~~\nhelp: consider borrowing to avoid moving into the for loop\n\
    \    |\n8   |     for p in &prime_numbers {\n    |              ~~~~~~~~~~~~~~\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659822620
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut c: isize = 3;\n    let mut f: isize = 0;\n    let mut d: isize\
    \ = 0;\n    if a > 100 || a < 0 {\n        return false;\n    }\n    for b in\
    \ 2..a {\n        for c in 2..b {\n            if b % c == 0 {\n             \
    \   f = 1;\n                break;\n            }\n        }\n        if f ==\
    \ 0 {\n            if a % b == 0 {\n                d = d + 1;\n            }\n\
    \        }\n        f = 0;\n    }\n    if d == 3 {\n        return true;\n   \
    \ } else {\n        return false;\n    }\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmplk1vwx69.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822620
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut res = 0;\n    for i in 1..101 {\n        if res > 3 {\n     \
    \       return false;\n        }\n        if is_prime(i) && a % i == 0 {\n   \
    \         res += 1;\n        }\n    }\n    return res == 3;\n}\n\nfn main() {\n\
    \    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpotgqlqkx.rs:12:12\n\
    \   |\n12 |         if is_prime(i) && a % i == 0 {\n   |            ^^^^^^^^ not\
    \ found in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822620
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut b = a;\n    while b > 0 {\n        if is_prime(b) {\n       \
    \     let c = a / b;\n            if is_prime(c) {\n                if a == b\
    \ * c {\n                    return true;\n                }\n            }\n\
    \        }\n        b -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n --> /tmp/tmprshl0imq.rs:9:12\n\
    \  |\n9 |         if is_prime(b) {\n  |            ^^^^^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find function `is_prime` in this scope\n  -->\
    \ /tmp/tmprshl0imq.rs:11:16\n   |\n11 |             if is_prime(c) {\n   |   \
    \             ^^^^^^^^ not found in this scope\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822620
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    for i in 2..a {\n        for j in 2..a {\n            for k in 2..a {\n\
    \                if a == i * j * k {\n                    return true;\n     \
    \           }\n            }\n        }\n    }\n    false\n}\n\nfn main() {\n\
    \    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp_z4lxzbp.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822621
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    (1..a/2).any(|x| is_prime(x) && (a % x == 0) && is_prime(a / x))\n}\n\
    \nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n --> /tmp/tmpk4gxpm2r.rs:7:22\n\
    \  |\n7 |     (1..a/2).any(|x| is_prime(x) && (a % x == 0) && is_prime(a / x))\n\
    \  |                      ^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find function `is_prime` in this scope\n --> /tmp/tmpk4gxpm2r.rs:7:53\n  |\n\
    7 |     (1..a/2).any(|x| is_prime(x) && (a % x == 0) && is_prime(a / x))\n  |\
    \                                                     ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822620
