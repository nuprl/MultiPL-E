name: HumanEval_36_fizz_buzz
language: rs
prompt: "/// Return the number of times the digit 7 appears in integers less than\
  \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
  \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n  \
  \  assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
  \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
  \ 8026);\n}\n"
completions: ["    let mut s = 0;\n    for i in (1..n).step_by(11) {\n        s +=\
    \ get_num_7(i);\n    }\n    for i in (1..n).step_by(13) {\n        s += get_num_7(i);\n\
    \    }\n    return s;", "    (1..n).filter(|&x| x % 11 == 0 || x % 13 == 0).map(|x|\
    \ x.to_string().chars().filter(|&x| x == '7').count() as isize).sum()", "    let\
    \ mut result = 0;\n    for i in 1..n {\n        if i % 11 == 0 || i % 13 == 0\
    \ {\n            let string = i.to_string();\n            for c in string.chars()\
    \ {\n                if c == '7' {\n                    result += 1;\n       \
    \         }\n            }\n        }\n    }\n    result", "    let mut count\
    \ = 0;\n    for i in 1..n {\n        if i % 11 == 0 || i % 13 == 0 {\n       \
    \     let mut i = i;\n            while i > 0 {\n                if i % 10 ==\
    \ 7 {\n                    count += 1;\n                }\n                i /=\
    \ 10;\n            }\n        }\n    }\n    count", '    0', "    let mut count\
    \ = 0;\n    for i in (1..n).step_by(11) {\n        if i.to_string().contains('7')\
    \ {\n            count += 1;\n        }\n    }\n    for i in (1..n).step_by(13)\
    \ {\n        if i.to_string().contains('7') {\n            count += 1;\n     \
    \   }\n    }\n    count", "    // \u4E09\u5143\u7EC4\u89E3\u51B3\n    let mut\
    \ result = 0;\n    for i in 0..n {\n        let mut flag = true;\n        if i\
    \ % 11 == 0 || i % 13 == 0 {\n            for j in i.to_string().chars() {\n \
    \               if j == '7' {\n                    result += 1;\n            \
    \        flag = false;\n                    break;\n                }\n      \
    \      }\n        }\n        if !flag {\n            continue;\n        }\n  \
    \  }\n    result", "    let mut f = 0;\n    for i in 0..n {\n        if i % 11\
    \ == 0 || i % 13 == 0 {\n            f += 1;\n        }\n    }\n    f", "    let\
    \ mut acc = 0;\n    for i in (1..n) {\n        if (i % 11 == 0 || i % 13 == 0)\
    \ && i.to_string().contains(\"7\") {\n            acc += 1;\n        }\n    }\n\
    \    acc", "    let mut count = 0;\n    for i in 0..n {\n        if i % 11 ==\
    \ 0 || i % 13 == 0 {\n            let num_str = i.to_string();\n            for\
    \ c in num_str.chars() {\n                if c == '7' {\n                    count\
    \ += 1;\n                }\n            }\n        }\n    }\n    count", "   \
    \ let mut counter = 0;\n    for i in 0..n {\n        let s = i.to_string();\n\
    \        if (i % 11 == 0 || i % 13 == 0) && s.contains(\"7\") {\n            counter\
    \ += 1;\n        }\n    }\n    counter", "    let mut q = 0;\n    let mut f =\
    \ 7;\n    let mut m = 7;\n    while m < n {\n        q += m;\n        f *= 10;\n\
    \        m = f % (11 * 13);\n    }\n    q", "    let mut c = 0;\n    for x in\
    \ 1..n {\n        let s = x.to_string();\n        let mut d = false;\n       \
    \ for a in s.chars() {\n            if a == '7' {\n                d = true;\n\
    \                break;\n            }\n        }\n        if d && (x % 11 ==\
    \ 0 || x % 13 == 0) {\n            c += 1;\n        }\n    }\n    c", '    unimplemented!();',
  '    (1..n).filter(|x| x % 11 == 0 || x % 13 == 0).map(|x| x.to_string().matches("7").count()
    as isize).sum()', "    let mut sum = 0;\n    for i in 1..n {\n        if i % 11\
    \ == 0 || i % 13 == 0 {\n            sum += digit_counter(&i, 7);\n        }\n\
    \    }\n    sum", "    (1..n).filter(|x| x % 11 == 0 || x % 13 == 0).map(|x| x.to_string().chars().filter(|x|\
    \ *x == '7').count() as isize).sum()", "    let mut v: Vec<isize> = Vec::new();\n\
    \    for i in 1..n {\n        let s = i.to_string();\n        let mut seven_count\
    \ = 0;\n        for c in s.chars() {\n            if c == '7' {\n            \
    \    seven_count += 1;\n            }\n        }\n        if seven_count > 0 &&\
    \ (i % 11 == 0 || i % 13 == 0) {\n            v.push(seven_count);\n        }\n\
    \    }\n    let mut res = 0;\n    for a in v {\n        res += a;\n    }\n   \
    \ res", "    (0..n)\n        .filter(|x| *x % 11 == 0 || *x % 13 == 0)\n     \
    \   .map(|x| format!(\"{}\", x))\n        .map(|s| s.chars().filter(|&c| c ==\
    \ '7').count())\n        .sum()", "    let mut count = 0;\n    for i in 1..n {\n\
    \        if (i % 11 == 0 || i % 13 == 0) && has_digit_7(i) {\n            count\
    \ += 1;\n        }\n    }\n    count", "    let mut result = 0;\n    for i in\
    \ 1..n {\n        if i % 11 == 0 || i % 13 == 0 {\n            if i.to_string().contains(\"\
    7\") {\n                result += 1;\n            }\n        }\n    }\n    result",
  "    let mut count = 0;\n    for i in 0..n {\n        if (i % 11 == 0 || i % 13\
    \ == 0) && i.to_string().contains(\"7\") {\n            count += 1;\n        }\n\
    \    }\n    count", "    let mut count = 0;\n    for i in 1..n {\n        if is_divisible_by_11_or_13(i)\
    \ && contains_digit_7(i) {\n            count += 1;\n        }\n    }\n    count",
  "    // TODO: implement\n\n    let div = |x| (x % 11 == 0) || (x % 13 == 0);\n \
    \   let count_digit = |s, c| s.matches(c).count() as isize;\n\n    (1..n).filter(|&x|\
    \ div(x)).map(|x| count_digit(x.to_string(), \"7\")).sum()", "  /*\n   * I could\
    \ write a longer comment to explain what this function does, but I don't\n   *\
    \ want to.\n   */\n  if n <= 0 {\n    return 0;\n  }\n  if n <= 6 {\n    return\
    \ 1;\n  }\n  if n <= 10 {\n    return 2;\n  }\n  if n <= 14 {\n    return 3;\n\
    \  }\n  if n <= 18 {\n    return 4;\n  }\n  if n <= 22 {\n    return 5;\n  }\n\
    \  if n <= 26 {\n    return 6;\n  }\n  if n <= 30 {\n    return 7;\n  }\n  if\
    \ n <= 34 {\n    return 8;\n  }\n  if n <= 38 {\n    return 9;\n  }\n  if n <=\
    \ 42 {\n    return 10;\n  }\n  if n <= 46 {\n    return 11;\n  }\n  if n <= 50\
    \ {\n    return 12;\n  }\n  if n <= 54 {\n    return 13;\n  }\n  if n <= 58 {\n\
    \    return 14;\n  }\n  if n <= 62 {\n    return 15;\n  }\n  if n <= 66 {\n  \
    \  return 16;\n  }\n  if n <= 70 {\n    return 17;\n  }\n  if n <= 74 {\n    return\
    \ 18;\n  }\n  if n <= 78 {\n    return 19;\n  }\n  if n <= 82 {\n    return 20;\n\
    \  }\n  if n <= 86 {\n    return 21;\n  }\n  if n <= 90 {\n    return 22;\n  }\n\
    \  if n <= 94 {\n    return 23;\n  }\n  if n <= 98 {\n    return 24;\n  }\n  if\
    \ n <= 102 {\n    return 25;\n  }\n  if n <= 106 {\n    return 26;\n  }\n  if\
    \ n <= 110 {\n    return 27;\n  }\n  if n <= 114 {\n    return 28;\n  }\n  if\
    \ n <= 118 {\n    return 29;\n  }\n  if n <= 122 {\n    return 30;\n  }\n  if\
    \ n <= 126 {\n    return 31;\n  }", "    if n <= 0 {\n        return 0;\n    }\n\
    \    let mut result = n / 7;\n    if n % 7 == 0 {\n        result -= 1;\n    }\n\
    \    if n % 13 == 0 || n % 11 == 0 {\n        result += 1;\n    }\n    result\
    \ + fizz_buzz(n - 1)", "    let mut n: isize = n;\n    let mut result: isize =\
    \ 0;\n    while n > 0 {\n        if n % 10 == 7 {\n            result += 1;\n\
    \        }\n        n /= 10;\n    }\n    result", '    0', "    assert!(n > 0);\n\
    \    //unimplemented!(\"How many times does 7 appear in the integers less than\
    \ {} which are divisible by 11 or 13?\", n)\n    let mut count = 0;\n    for i\
    \ in (1..n) {\n        if i % 11 == 0 || i % 13 == 0 {\n            let test =\
    \ i.to_string();\n            if test.contains(\"7\") {\n                count\
    \ += 1;\n            }\n        }\n    }\n    count", '    unimplemented!("Return
    the number of times the digit 7 appears in integers less than {} which are divisible
    by 11 or 13", n)', "    assert!(n > 0);\n    let mut x = n;\n    let mut y = n;\n\
    \    let mut result = 0;\n    while x > 0 {\n        result += (x % 10 == 7) as\
    \ isize;\n        x /= 10;\n    }\n    while y > 10 {\n        y /= 10;\n    \
    \    result += (y % 10 == 7) as isize;\n    }\n    result", "    let mut ret =\
    \ 0;\n    for i in 0..n {\n        if i % 11 == 0 || i % 13 == 0 {\n         \
    \   let mut j = i;\n            while j > 0 {\n                if j % 10 == 7\
    \ {\n                    ret += 1;\n                }\n                j /= 10;\n\
    \            }\n        }\n    }\n    ret", "    let mut num = n;\n    let mut\
    \ count = 0;\n    let mut num_str = \"\";\n    while num > 0 {\n        num_str\
    \ = &num.to_string() + num_str;\n        num = num - 1;\n    }\n    for n in num_str.chars()\
    \ {\n        if n == '7' {\n            count = count + 1;\n        }\n    }\n\
    \    return count;", '    (1..n).filter(|n| n % 11 == 0 || n % 13 == 0).filter(|n|
    contains_seven(n)).count() as isize', '    unimplemented!()', "    let mut total\
    \ = 0;\n    let mut i = 0;\n    while i < n {\n        if i % 11 == 0 || i % 13\
    \ == 0 {\n            total += count_seven(i);\n        }\n        i += 1;\n \
    \   }\n    total", "    if n <= 0 {\n        return 0;\n    }\n    (1..n)\n  \
    \      .filter(|&x| (x % 11 == 0 || x % 13 == 0) && x.to_string().contains('7'))\n\
    \        .count() as isize", "    let mut result = 0;\n    for x in 0..n {\n \
    \       if x % 7 == 0 && (x % 11 == 0 || x % 13 == 0) {\n            result +=\
    \ 1;\n        }\n    }\n    result", "    let mut total = 0;\n    for number in\
    \ (1..n).rev() {\n        if number % 11 == 0 || number % 13 == 0 {\n        \
    \    let mut i = number;\n            while i > 0 {\n                let digit\
    \ = i % 10;\n                if digit == 7 {\n                    total += 1;\n\
    \                }\n                i /= 10;\n            }\n        }\n    }\n\
    \    total", "    (1..n).fold(0, |acc, x| acc + if x % 11 == 0 || x % 13 == 0\
    \ {\n        x.to_string().chars().fold(0, |acc, x| acc + if x == '7' { 1 } else\
    \ { 0 })\n    } else {\n        0\n    })", "    (1..n).filter(|&x| x % 11 ==\
    \ 0 || x % 13 == 0).filter(|&x| x.to_string().chars().any(|c| c == '7')).count()\
    \ as isize", "    (1..n).filter(|&x| x % 11 == 0 || x % 13 == 0).map(|x| x.to_string().chars().filter(|&y|\
    \ y == '7').count() as isize).sum()", '    (1..n).filter(|&i| i % 11 == 0 || i
    % 13 == 0).map(|x| x.to_string().matches("7").count() as isize).sum()', "    (0..n)\n\
    \        .filter(|x| (x % 11 == 0) || (x % 13 == 0))\n        .map(|x| x.to_string())\n\
    \        .map(|x| x.chars().filter(|y| *y == '7').count())\n        .sum()", " \
    \   // digit 7 in n divisible by 11 or 13\n    let mut ans = 0;\n    let mut i\
    \ = 7;\n    while i < n {\n        // println!(\"i:{}\", i);\n        if (i %\
    \ 11 == 0) || (i % 13 == 0) {\n            let mut j = i;\n            while j\
    \ > 0 {\n                if j % 10 == 7 {\n                    ans += 1;\n   \
    \             }\n                j /= 10;\n            }\n        }\n        i\
    \ += 7;\n    }\n    ans", "    let mut counter = 0;\n    for i in 1..n {\n   \
    \     if i % 11 == 0 || i % 13 == 0 {\n            for c in i.to_string().chars()\
    \ {\n                if c == '7' {\n                    counter += 1;\n      \
    \          }\n            }\n        }\n    }\n    counter", "    let mut cnt\
    \ = 0;\n    for x in 0..n {\n        if (x % 11 == 0 || x % 13 == 0) && x.to_string().contains(\"\
    7\") {\n            cnt += 1;\n        }\n    }\n    cnt", "    let mut count\
    \ = 0;\n    for i in (1..n).step_by(11) {\n        count += fizz_buzz_helper(i);\n\
    \    }\n    for i in (1..n).step_by(13) {\n        count += fizz_buzz_helper(i);\n\
    \    }\n    return count;", "    let mut num = 7;\n    let mut count = 0;\n  \
    \  while num < n {\n        if num % 11 == 0 || num % 13 == 0 {\n            let\
    \ mut num_copy = num;\n            while num_copy > 0 {\n                if num_copy\
    \ % 10 == 7 {\n                    count += 1;\n                }\n          \
    \      num_copy /= 10;\n            }\n        }\n        num += 1;\n    }\n \
    \   count", '    unimplemented!();', "    let mut fizz_buzz = 0;\n    for i in\
    \ 1..n {\n        if i % 11 == 0 || i % 13 == 0 {\n            fizz_buzz += i.to_string().chars().filter(|d|\
    \ *d == '7').count() as isize;\n        }\n    }\n    fizz_buzz", "    let mut\
    \ result = 0;\n    for i in 1..n {\n        if (i % 11 == 0 || i % 13 == 0) &&\
    \ i.to_string().contains(\"7\") {\n            result += 1;\n        }\n    }\n\
    \    result", "  let mut count = 0;\n  for i in 0..n {\n    if i % 11 == 0 ||\
    \ i % 13 == 0 {\n      let mut j = i;\n      while j > 0 {\n        let digit\
    \ = j % 10;\n        if digit == 7 {\n          count += 1;\n        }\n     \
    \   j /= 10;\n      }\n    }\n  }\n  count", "    let mut count = 0;\n    for\
    \ i in 1..n {\n        if i % 11 == 0 || i % 13 == 0 {\n            let mut num\
    \ = i;\n            while num > 0 {\n                if num % 10 == 7 {\n    \
    \                count += 1;\n                }\n                num /= 10;\n\
    \            }\n        }\n    }\n    count", "    let mut count = 0;\n    for\
    \ i in 1..n {\n        if i % 11 == 0 || i % 13 == 0 {\n            let mut num\
    \ = i;\n            while num > 0 {\n                if num % 10 == 7 {\n    \
    \                count += 1;\n                }\n                num /= 10;\n\
    \            }\n        }\n    }\n    count", "    let mut count = 0;\n    for\
    \ i in 0..n {\n        if i % 11 == 0 || i % 13 == 0 {\n            count += i.to_string().chars().fold(0,\
    \ |sum, x| {\n                if x == '7' {\n                    sum + 1\n   \
    \             } else {\n                    sum\n                }\n         \
    \   });\n        }\n    }\n    count", "    let mut sum = 0;\n    for i in 0..n\
    \ {\n        if i % 11 == 0 || i % 13 == 0 {\n            sum += count_digit(i,\
    \ 7);\n        }\n    }\n    sum", "  let mut sum = 0;\n  for i in 0..n {\n  \
    \  if (i % 11 == 0 || i % 13 == 0) && i.to_string().contains(\"7\") {\n      sum\
    \ += 1;\n    }\n  }\n  sum", '    unimplemented!();', "  let mut count = 0;\n\
    \  let mut n = n;\n  while n > 0 {\n    let digit = n % 10;\n    if digit == 7\
    \ {\n      count += 1;\n    }\n    n /= 10;\n  }\n  count", "    // Return the\
    \ number of times 7 appears in each number\n    let count_7s = |n: isize| n.to_string().chars().filter(|&x|\
    \ x == '7').count() as isize;\n\n    // Find each multiple of 11 and 13 within\
    \ range [0, n)\n    (0..n).step_by(1).filter(|&x| x % 11 == 0 || x % 13 == 0).map(count_7s).sum()",
  "  (1..n).fold(0, |sum, x| {\n    match (x % 11, x % 13) {\n      (0, 0) => sum\
    \ + 2,\n      (0, _) => sum + 1,\n      (_, 0) => sum + 1,\n      _ => sum,\n\
    \    }\n  })", "    let mut sum = 0;\n    for i in 0..n {\n        if i % 11 ==\
    \ 0 || i % 13 == 0 {\n            let mut tmp = i;\n            while tmp > 0\
    \ {\n                if tmp % 10 == 7 {\n                    sum += 1;\n     \
    \           }\n                tmp /= 10;\n            }\n        }\n    }\n \
    \   sum", "    let mut s = 0;\n    for i in 0..n {\n        if (i % 11 == 0 ||\
    \ i % 13 == 0) && i.to_string().contains(\"7\") {\n            s += 1;\n     \
    \   }\n    }\n    s", "    let mut count = 0;\n    for i in 1..n {\n        if\
    \ i % 11 == 0 || i % 13 == 0 {\n            let mut num = i;\n            while\
    \ num > 0 {\n                if num % 10 == 7 {\n                    count +=\
    \ 1;\n                }\n                num /= 10;\n            }\n        }\n\
    \    }\n    count", "    // Your code here\n    let mut i: isize = 1;\n    let\
    \ mut a: String;\n    let mut sum: isize = 0;\n    let mut nb: isize = 0;\n  \
    \  while i < n {\n        a = i.to_string();\n        let mut j: usize = 0;\n\
    \        while j < a.len() {\n            if a.chars().nth(j).unwrap() == '7'\
    \ && (i % 11 == 0 || i % 13 == 0) {\n                nb += 1;\n            }\n\
    \            j += 1;\n        }\n        sum += nb;\n        nb = 0;\n       \
    \ i += 1;\n    }\n    sum", "    // How many integers less than n are divisible\
    \ by 11?\n    let a: isize = (n - 1) / 11;\n    // How many integers less than\
    \ n are divisible by 13?\n    let b: isize = (n - 1) / 13;\n    // How many integers\
    \ less than n are divisible by 11 or 13?\n    let ab: isize = (n - 1) / (11 *\
    \ 13);\n    // How many integers less than n are divisible by 11 or 13 and contain\
    \ 7?\n    let ab7: isize = (n - 1) / (11 * 13 * 10);\n    // How many integers\
    \ less than n are divisible by 11 or 13 and contain 70?\n    let ab70: isize =\
    \ (n - 1) / (11 * 13 * 100);\n    // How many integers less than n are divisible\
    \ by 11 or 13 and contain 700?\n    let ab700: isize = (n - 1) / (11 * 13 * 1000);\n\
    \    // How many integers less than n are divisible by 11 or 13 and contain 7000?\n\
    \    let ab7000: isize = (n - 1) / (11 * 13 * 10000);\n    // How many integers\
    \ less than n are divisible by 11 or 13 and contain 70000?\n    let ab70000: isize\
    \ = (n - 1) / (11 * 13 * 100000);\n    // How many integers less than n are divisible\
    \ by 11 or 13 and contain 700000?\n    let ab700000: isize = (n - 1) / (11 * 13\
    \ * 1000000);\n    // How many integers less than n are divisible by 11 or 13\
    \ and contain 7000000?\n    let ab7000000: isize = (n - 1) / (11 * 13 * 10000000);\n\
    \    // How many integers less than n are divisible by 11 or 13 and contain 70000000?\n\
    \    let ab70000000: isize = (n - 1) / (11 * 13 * 100000000);\n    // How many\
    \ integers less than n are divisible by 11 or 13 and contain 700000000?\n    let\
    \ ab700000000: isize = (n - 1) / (11 * 13 * 1000000000);\n    // Sum the digits\
    \ that are divisible by 11 or 13\n    a + b -", "    let mut c = 0;\n    for i\
    \ in 11..n {\n        if i % 11 == 0 || i % 13 == 0 {\n            let mut n =\
    \ i;\n            while n > 0 {\n                if n % 10 == 7 {\n          \
    \          c += 1;\n                }\n                n /= 10;\n            }\n\
    \        }\n    }\n    c", "    let mut fizz_buzz_count = 0;\n    for i in 0..n\
    \ {\n        if i % 11 == 0 || i % 13 == 0 {\n            let i_str = i.to_string();\n\
    \            for c in i_str.chars() {\n                if c == '7' {\n       \
    \             fizz_buzz_count += 1;\n                }\n            }\n      \
    \  }\n    }\n    fizz_buzz_count", '    (1..n).filter(|x| (x % 11 == 0 || x %
    13 == 0) && x.to_string().contains("7")).count() as isize', "    (1..n).filter(|i|\
    \ i % 11 == 0 || i % 13 == 0).map(|i| i.to_string()).map(|i| i.chars()).flat_map(|i|\
    \ i).filter(|i| *i == '7').count() as isize", "    let mut result = 0;\n    for\
    \ i in 0..n {\n        if i % 11 == 0 || i % 13 == 0 {\n            result +=\
    \ count_digits(i, 7);\n        }\n    }\n    result", "    let mut ans = 0;\n\
    \    for i in (1..n).step_by(11) {\n        if i % 13 == 0 {\n            continue;\n\
    \        }\n        let mut k = i;\n        while k > 0 {\n            if k %\
    \ 10 == 7 {\n                ans += 1;\n            }\n            k /= 10;\n\
    \        }\n    }\n    for i in (1..n).step_by(13) {\n        if i % 11 == 0 {\n\
    \            continue;\n        }\n        let mut k = i;\n        while k > 0\
    \ {\n            if k % 10 == 7 {\n                ans += 1;\n            }\n\
    \            k /= 10;\n        }\n    }\n    ans", "    let mut result = 0;\n\
    \    for i in 1..n {\n        let d = i % 11;\n        if d == 0 || d == 5 {\n\
    \            let count = i.to_string().matches(\"7\").count();\n            result\
    \ += count;\n        }\n    }\n    result", "    let mut count = 0;\n    for i\
    \ in 1..n {\n        let mut has_13 = false;\n        let mut has_11 = false;\n\
    \        let mut has_7 = false;\n        let mut i_copy = i;\n        while i_copy\
    \ > 0 {\n            let digit = i_copy % 10;\n            if digit == 7 {\n \
    \               has_7 = true;\n            }\n            i_copy /= 10;\n    \
    \    }\n        if !has_7 {\n            continue;\n        }\n        i_copy\
    \ = i;\n        while i_copy > 0 {\n            let digit = i_copy % 10;\n   \
    \         if digit == 13 {\n                has_13 = true;\n            }\n  \
    \          i_copy /= 10;\n        }\n        if !has_13 {\n            continue;\n\
    \        }\n        i_copy = i;\n        while i_copy > 0 {\n            let digit\
    \ = i_copy % 10;\n            if digit == 11 {\n                has_11 = true;\n\
    \            }\n            i_copy /= 10;\n        }\n        if !has_11 {\n \
    \           continue;\n        }\n        count += 1;\n    }\n    count", '    unimplemented!()',
  "    let mut r = 0;\n    let mut m = 1;\n    let mut i = 0;\n    let mut j = 0;\n\
    \    let mut k = 0;\n    while i < n {\n        if i % 11 == 0 || i % 13 == 0\
    \ {\n            if m == 100 {\n                m = 1;\n                k += 1;\n\
    \            }\n            if m % 10 == 7 {\n                r += 1;\n      \
    \      }\n            if m / 10 == 7 {\n                r += 1;\n            }\n\
    \            m += 1;\n        }\n        i += 1;\n    }\n    r", "    let mut\
    \ i = 1;\n    let mut count = 0;\n    while i < n {\n        if i % 11 == 0 ||\
    \ i % 13 == 0 {\n            let mut j = i;\n            while j > 0 {\n     \
    \           if j % 10 == 7 {\n                    count += 1;\n              \
    \  }\n                j /= 10;\n            }\n        }\n        i += 1;\n  \
    \  }\n    count", "    (0..n)\n        .filter(|x| x % 11 == 0 || x % 13 == 0)\n\
    \        .map(|x| x.to_string())\n        .map(|x| x.chars().filter(|&x| x ==\
    \ '7').count() as isize)\n        .sum()", "    let mut result = 0;\n    let mut\
    \ candidate = 0;\n    while candidate < n {\n        if candidate % 11 == 0 ||\
    \ candidate % 13 == 0 {\n            let mut num = candidate;\n            while\
    \ num > 0 {\n                if num % 10 == 7 {\n                    result +=\
    \ 1;\n                }\n                num /= 10;\n            }\n        }\n\
    \        candidate += 1;\n    }\n    result", "    let mut result = 0;\n    for\
    \ i in 0..n {\n        if i % 11 == 0 || i % 13 == 0 {\n            result +=\
    \ i.to_string().chars().filter(|x| *x == '7').count() as isize;\n        }\n \
    \   }\n    result", '    unimplemented!("How many times the digit 7 appears in
    integers less than {} which are divisible by 11 or 13", n)', "    let mut c =\
    \ 0;\n    for i in 1..n {\n        if (i % 11 == 0 || i % 13 == 0) && i.to_string().contains(\"\
    7\") {\n            c += 1;\n        }\n    }\n    c", "    let mut n = n;\n \
    \   n -= n % 11;\n    n -= n % 13;\n    n / 11 + n / 13", "    let sum = (0..n)\n\
    \        .map(|num| num as f64)\n        .filter(|num| {\n            num % 11.0\
    \ == 0.0 || num % 13.0 == 0.0\n        })\n        .map(|num| {\n            num.to_string()\n\
    \        })\n        .map(|num| {\n            num.chars()\n                .filter(|c|\
    \ {\n                    *c == '7'\n                })\n                .count()\n\
    \        })\n        .sum::<usize>();\n    sum as isize", "    let mut sum = 0;\n\
    \    for i in 1..n {\n        let mut x = i;\n        while x != 0 {\n       \
    \     let d = x % 10;\n            if d == 7 {\n                sum += 1;\n  \
    \          }\n            x /= 10;\n        }\n    }\n    sum", '    unimplemented!();',
  "    let mut count = 0;\n    for i in 1..n {\n        if (i % 11 == 0 || i % 13\
    \ == 0) && count_7(i) > 0 {\n            count += 1;\n        }\n    }\n    count",
  "    let mut s = 0;\n    for i in 1..n {\n        if i % 11 == 0 || i % 13 == 0\
    \ {\n            s += i.to_string().chars().filter(|c| *c == '7').count() as isize;\n\
    \        }\n    }\n    s", "    let div_by_11 = n / 11;\n    let div_by_13 = n\
    \ / 13;\n    (0..=div_by_11).fold(0, |acc, elem| {\n        acc + count_digit(elem,\
    \ 7) + count_digit(elem * 13, 7)\n    }) + (0..=div_by_13).fold(0, |acc, elem|\
    \ {\n        acc + count_digit(elem, 7) + count_digit(elem * 11, 7)\n    })",
  "    let mut cnt = 0;\n    for i in 0..n {\n        let m = i as f64;\n        if\
    \ (m % 11.0).abs() < 0.00001 || (m % 13.0).abs() < 0.00001 {\n            let\
    \ str_i = format!(\"{}\", i);\n            for ch in str_i.chars() {\n       \
    \         if ch == '7' {\n                    cnt += 1;\n                }\n \
    \           }\n        }\n    }\n    cnt", "    let mut count = 0;\n    for i\
    \ in 0..n {\n        if (i % 11 == 0 || i % 13 == 0) && i.to_string().contains(\"\
    7\") {\n            count += 1;\n        }\n    }\n    count", "    (1..n).filter(|x|\
    \ x % 11 == 0 || x % 13 == 0).map(|x| x.to_string().chars().filter(|x| *x == '7').count()\
    \ as isize).sum()", "    let mut cnt = 0;\n    for i in 0..n {\n        if i %\
    \ 11 == 0 || i % 13 == 0 {\n            let mut k = i;\n            while k >\
    \ 0 {\n                if k % 10 == 7 {\n                    cnt += 1;\n     \
    \           }\n                k /= 10;\n            }\n        }\n    }\n   \
    \ cnt", "    let mut count = 0;\n    for i in 0..n {\n        if (i % 11 == 0\
    \ || i % 13 == 0) && contains_seven(i) {\n            count += 1;\n        }\n\
    \    }\n    count", "    let mut count = 0;\n    for i in 1..n {\n        if i\
    \ % 11 == 0 || i % 13 == 0 {\n            let mut num = i;\n            while\
    \ num > 0 {\n                if num % 10 == 7 {\n                    count +=\
    \ 1;\n                }\n                num /= 10;\n            }\n        }\n\
    \    }\n    count", "    if n < 1 {\n        return 0;\n    }\n    let mut cnt\
    \ = 0;\n    for i in 1..n {\n        if i % 11 == 0 || i % 13 == 0 {\n       \
    \     cnt += i.to_string().chars().filter(|&x| x == '7').count() as isize;\n \
    \       }\n    }\n    cnt", "    let mut ret = 0;\n    for i in 0..n {\n     \
    \   if i % 11 == 0 || i % 13 == 0 {\n            let num = i.to_string();\n  \
    \          for digit in num.chars() {\n                if digit == '7' {\n   \
    \                 ret += 1;\n                }\n            }\n        }\n   \
    \ }\n    ret", '    unimplemented!();', "    let mut i = 0;\n    let mut result\
    \ = 0;\n    while i < n {\n        if i % 11 == 0 || i % 13 == 0 {\n         \
    \   let num_of_7 = i.to_string().matches(\"7\").count();\n            result +=\
    \ num_of_7;\n        }\n        i += 1;\n    }\n    result", "  (0..n).map(|x|\
    \ {\n    if x % 11 == 0 || x % 13 == 0 {\n      x.to_string().chars().filter(|y|\
    \ *y == '7').count() as isize\n    } else {\n      0\n    }\n  }).sum()", "  \
    \  let mut a = 0;\n    for i in 0..n {\n        if i % 11 == 0 || i % 13 == 0\
    \ {\n            let mut x = i;\n            while x > 0 {\n                if\
    \ x % 10 == 7 {\n                    a += 1;\n                }\n            \
    \    x /= 10;\n            }\n        }\n    }\n    a", "    let mut result =\
    \ 0;\n    let mut sevens = 0;\n    let mut rem = 0;\n    let mut current = 0;\n\
    \    let limit = isize::max_value();\n    let mut x = 1;\n    while current <\
    \ n {\n        x += 1;\n        if x % 11 == 0 || x % 13 == 0 {\n            current\
    \ += 1;\n            rem = x;\n            while rem > 0 {\n                if\
    \ rem % 10 == 7 {\n                    sevens += 1;\n                }\n     \
    \           rem /= 10;\n            }\n        }\n        if x > limit {\n   \
    \         break;\n        }\n    }\n    result = sevens;\n    result", "    (1..n).fold(0,\
    \ |acc, x| {\n        if (x % 11 == 0 || x % 13 == 0) && x.to_string().contains(\"\
    7\") {\n            acc + 1\n        } else {\n            acc\n        }\n  \
    \  })", "    let mut count = 0;\n    for num in 1..n {\n        if num % 11 ==\
    \ 0 || num % 13 == 0 {\n            count += count_digit(num, 7);\n        }\n\
    \    }\n    count", "    let mut count = 0;\n    for i in 1..n {\n        if i\
    \ % 11 == 0 || i % 13 == 0 {\n            let mut m = i;\n            while m\
    \ > 0 {\n                if m % 10 == 7 {\n                    count += 1;\n \
    \               }\n                m /= 10;\n            }\n        }\n    }\n\
    \    count", "  if n <= 0 { return 0; }\n  let mut sum = 0;\n  for i in 1..n {\n\
    \    if i % 11 == 0 || i % 13 == 0 {\n      let digits = i.to_string().chars().collect::<Vec<char>>();\n\
    \      for j in 0..digits.len() {\n        if digits[j] == '7' {\n          sum\
    \ += 1;\n        }\n      }\n    }\n  }\n  sum", "    (1..n).filter(|&n| (n %\
    \ 11 == 0 || n % 13 == 0) && n.to_string().contains('7')).count() as isize", " \
    \   let mut x = 7;\n    let mut count = 0;\n    while x < n {\n        if x %\
    \ 11 == 0 || x % 13 == 0 {\n            count += count_sevens(x);\n        }\n\
    \        x += 1;\n    }\n    count", "    let mut i = 0;\n    let mut sevens =\
    \ 0;\n    while i < n {\n        let mut num = i;\n        while num > 0 {\n \
    \           if num % 10 == 7 {\n                sevens += 1;\n            }\n\
    \            num /= 10;\n        }\n        i += 11;\n    }\n    i = 0;\n    while\
    \ i < n {\n        let mut num = i;\n        while num > 0 {\n            if num\
    \ % 10 == 7 {\n                sevens += 1;\n            }\n            num /=\
    \ 10;\n        }\n        i += 13;\n    }\n    sevens", "    (0..n)\n        .filter(|x|\
    \ x % 11 == 0 || x % 13 == 0)\n        .map(|x| x.to_string())\n        .map(|s|\
    \ s.chars().filter(|&c| c == '7').count() as isize)\n        .sum()", "  let mut\
    \ count = 0;\n  for i in 0..n {\n    if (i % 11 == 0 || i % 13 == 0) && i.to_string().contains(\"\
    7\") {\n      count += 1;\n    }\n  }\n  count", "    let mut total = 0;\n   \
    \ for i in 0..n {\n        if i % 11 == 0 || i % 13 == 0 {\n            total\
    \ += num_sevens(i);\n        }\n    }\n    total", "    let mut count = 0;\n \
    \   for x in 0..n {\n        if (x % 11 == 0 || x % 13 == 0) && has_seven(x) {\n\
    \            count += 1;\n        }\n    }\n    count", "    let mut count = 0;\n\
    \    for i in 0..n {\n        if i % 11 == 0 || i % 13 == 0 {\n            let\
    \ mut temp = i;\n            while temp > 0 {\n                let m = temp %\
    \ 10;\n                if m == 7 {\n                    count += 1;\n        \
    \        }\n                temp /= 10;\n            }\n        }\n    }\n   \
    \ count", "    let mut count = 0;\n    for num in 11..n {\n        if num % 11\
    \ == 0 || num % 13 == 0 {\n            let num_str = format!(\"{}\", num);\n \
    \           for character in num_str.chars() {\n                if character ==\
    \ '7' {\n                    count += 1;\n                }\n            }\n \
    \       }\n    }\n    count", '    unimplemented!()', '    unimplemented!()',
  "    let mut cnt = 0;\n    for i in 1..n {\n        if i % 11 == 0 || i % 13 ==\
    \ 0 {\n            let mut num = i;\n            while num > 0 {\n           \
    \     if num % 10 == 7 {\n                    cnt += 1;\n                }\n \
    \               num /= 10;\n            }\n        }\n    }\n    cnt", "    let\
    \ mut sum = 0;\n    for m in 1..n {\n        if m % 11 == 0 || m % 13 == 0 {\n\
    \            let mut m = m;\n            while m > 0 {\n                if m %\
    \ 10 == 7 {\n                    sum += 1;\n                }\n              \
    \  m /= 10;\n            }\n        }\n    }\n    sum", "    let mut count = 0;\n\
    \    for i in 1..n {\n        if i % 11 == 0 || i % 13 == 0 {\n            let\
    \ mut j = i;\n            while j > 0 {\n                if j % 10 == 7 {\n  \
    \                  count += 1;\n                }\n                j /= 10;\n\
    \            }\n        }\n    }\n    count", '    n / 11 + n / 13 - n / 143',
  "    let mut num = n;\n    let mut i = 0;\n    while num >= 0 {\n        if num\
    \ % 11 == 0 || num % 13 == 0 {\n            if num % 10 == 7 {\n             \
    \   i += 1;\n            }\n            if num % 100 == 7 {\n                i\
    \ += 1;\n            }\n            if num % 1000 == 7 {\n                i +=\
    \ 1;\n            }\n            if num % 10000 == 7 {\n                i += 1;\n\
    \            }\n            if num % 100000 == 7 {\n                i += 1;\n\
    \            }\n            if num % 1000000 == 7 {\n                i += 1;\n\
    \            }\n            if num % 10000000 == 7 {\n                i += 1;\n\
    \            }\n            if num % 100000000 == 7 {\n                i += 1;\n\
    \            }\n            if num % 1000000000 == 7 {\n                i += 1;\n\
    \            }\n            if num % 10000000000 == 7 {\n                i +=\
    \ 1;\n            }\n            if num % 100000000000 == 7 {\n              \
    \  i += 1;\n            }\n            if num % 1000000000000 == 7 {\n       \
    \         i += 1;\n            }\n            if num % 10000000000000 == 7 {\n\
    \                i += 1;\n            }\n            if num % 100000000000000\
    \ == 7 {\n                i += 1;\n            }\n            if num % 1000000000000000\
    \ == 7 {\n                i += 1;\n            }\n            if num % 10000000000000000\
    \ == 7 {\n                i += 1;\n            }\n            if num % 100000000000000000\
    \ == 7 {\n                i += 1;\n            }\n            if num % 1000000000000000000\
    \ == 7 {\n                i += 1;\n            }\n        }\n        num -= 1;\n\
    \    }\n    i", "  let mut num = 0;\n  for i in 1..n {\n    if (i % 11 == 0 ||\
    \ i % 13 == 0) && i.to_string().contains(\"7\") {\n      num += 1;\n    }\n  }\n\
    \  num", "    (1..n).filter(|x| {\n        let string = x.to_string();\n     \
    \   let digits = string.chars().map(|x| x.to_digit(10).unwrap()).collect::<Vec<u32>>();\n\
    \        digits.contains(&7) && x % 11 == 0 && x % 13 == 0\n    }).count() as\
    \ isize", "    let mut count = 0;\n    for i in 1..n {\n        let num = i.to_string();\n\
    \        if (i % 11 == 0 || i % 13 == 0) && num.contains(\"7\") {\n          \
    \  count += 1;\n        }\n    }\n    count", "    let mut sum = 0;\n    for i\
    \ in 0..n {\n        if i % 11 == 0 || i % 13 == 0 {\n            sum += num_of_7(i);\n\
    \        }\n    }\n    sum", "    let mut count = 0;\n    for i in 1..n {\n  \
    \      let str_i = i.to_string();\n        if i % 11 == 0 || i % 13 == 0 {\n \
    \           for c in str_i.chars() {\n                if c == '7' {\n        \
    \            count += 1;\n                }\n            }\n        }\n    }\n\
    \    count", "    let mut sum = 0;\n    for i in 1..n {\n        if i % 11 ==\
    \ 0 || i % 13 == 0 {\n            sum += count_seven(i);\n        }\n    }\n \
    \   sum", "    (0..n)\n        .filter(|&i| i % 11 == 0 || i % 13 == 0)\n    \
    \    .map(|i| format!(\"{}\", i))\n        .fold(0, |acc, s| acc + s.matches(\"\
    7\").count() as isize)", "    let mut res = 0;\n    for i in 1..n {\n        if\
    \ i % 11 == 0 || i % 13 == 0 {\n            let mut x = i;\n            while\
    \ x > 0 {\n                if x % 10 == 7 {\n                    res += 1;\n \
    \               }\n                x /= 10;\n            }\n        }\n    }\n\
    \    res", "    (1..n).filter(|x| x % 11 == 0 || x % 13 == 0).map(|x| x.to_string()).map(|x|\
    \ x.chars()).map(|x| x.filter(|y| *y == '7').count() as isize).sum()", '    (1..n).filter(|&a|
    a % 11 == 0 || a % 13 == 0).map(|a| a.to_string().matches("7").count() as isize).sum()',
  '    0', '    unimplemented!();', "    // We want \"every eleventh or thirteenth\"\
    \ element up to, but not including, n\n    let every_elev = (1..n).step_by(11);\n\
    \    let every_thirte = (1..n).step_by(13);\n    let eleven_and_thirte = every_elev.chain(every_thirte).collect::<Vec<_>>();\n\
    \    eleven_and_thirte.into_iter().filter(|x| x.to_string().contains(\"7\")).count()\
    \ as isize", "    let mut count = 0;\n    for num in 1..n {\n        if num %\
    \ 11 == 0 || num % 13 == 0 {\n            let mut num_copy = num;\n          \
    \  while num_copy > 0 {\n                if num_copy % 10 == 7 {\n           \
    \         count += 1;\n                }\n                num_copy /= 10;\n  \
    \          }\n        }\n    }\n    count", "    (1..n).fold(0, |acc, num| {\n\
    \        if num % 11 == 0 || num % 13 == 0 {\n            acc + format!(\"{}\"\
    , num).chars().filter(|&c| c == '7').count() as isize\n        } else {\n    \
    \        acc\n        }\n    })", "    let mut cnt = 0;\n    for i in 1..n {\n\
    \        if i % 11 == 0 || i % 13 == 0 {\n            cnt += i.to_string().chars().filter(|&c|\
    \ c == '7').count() as isize;\n        }\n    }\n    cnt", "    let mut total\
    \ = 0;\n    for i in (0..n).step_by(11).step_by(13) {\n        let mut current\
    \ = i;\n        while current < n {\n            let ones = current % 10;\n  \
    \          if ones == 7 {\n                total += 1;\n            }\n      \
    \      current /= 10;\n        }\n    }\n    total", '    unimplemented!();',
  '    unimplemented!()', "    if n < 7 {\n        return 0;\n    }\n    let mut cnt\
    \ = 1;\n    for i in (1..n / 7).rev() {\n        if i % 11 == 0 || i % 13 == 0\
    \ {\n            cnt += 1;\n        }\n    }\n    cnt", "    let mut count = 0;\n\
    \    for i in 1..n {\n        if i % 11 == 0 || i % 13 == 0 {\n            let\
    \ mut i = i;\n            while i > 0 {\n                let digit = i % 10;\n\
    \                if digit == 7 {\n                    count += 1;\n          \
    \      }\n                i /= 10;\n            }\n        }\n    }\n    count",
  '    unimplemented!();', "    let mut count = 0;\n    for i in 0..n {\n        if\
    \ (i % 11 == 0 || i % 13 == 0) && i.to_string().contains(\"7\") {\n          \
    \  count += 1;\n        }\n    }\n    count", "    n.to_string()\n        .chars()\n\
    \        .map(|c| c.to_digit(10).unwrap() as isize)\n        .filter(|d| (d %\
    \ 11 == 0 || d % 13 == 0) && *d < n)\n        .sum()", "    (1..n).filter(|x|\
    \ {\n        x % 7 == 0 || x % 11 == 0 || x % 13 == 0\n    }).map(|x| {\n    \
    \    x.to_string().chars().filter(|c| *c == '7').count() as isize\n    }).sum()",
  "    (0..n)\n        .filter(|i| (i % 11 == 0) || (i % 13 == 0))\n        .map(|i|\
    \ i.to_string())\n        .map(|s| {\n            s.chars()\n                .filter(|c|\
    \ c.to_digit(10).unwrap() == 7)\n                .count()\n        })\n      \
    \  .sum()", "    (1..n).filter(|x| [11, 13].contains(&x % 100)).map(|x| x.to_string()).fold(0,\
    \ |sum, x| {\n        sum + x.chars().filter(|c| *c == '7').count() as isize\n\
    \    })", "    let mut s = 0;\n    for i in 1..n {\n        if i % 11 == 0 ||\
    \ i % 13 == 0 {\n            let mut j = i;\n            while j > 0 {\n     \
    \           if j % 10 == 7 {\n                    s += 1;\n                }\n\
    \                j /= 10;\n            }\n        }\n    }\n    s", "    return\
    \ (0..n)\n        .filter(|x| (x % 11 == 0) || (x % 13 == 0))\n        .filter(|x|\
    \ x.to_string().contains(\"7\"))\n        .count() as isize;", "    let mut count\
    \ = 0;\n    for i in (1..n).rev() {\n        if i % 11 == 0 || i % 13 == 0 {\n\
    \            if i.to_string().contains(\"7\") {\n                count += 1;\n\
    \            }\n        }\n    }\n    count", "    let mut sum = 0;\n    for i\
    \ in 1..n {\n        if i % 11 == 0 || i % 13 == 0 {\n            let mut x =\
    \ i;\n            while x > 0 {\n                if x % 10 == 7 {\n          \
    \          sum += 1;\n                }\n                x /= 10;\n          \
    \  }\n        }\n    }\n    sum", "    let mut count = 0;\n    for i in 0..n {\n\
    \        if i % 11 == 0 || i % 13 == 0 {\n            let mut num = i;\n     \
    \       while num > 0 {\n                if num % 10 == 7 {\n                \
    \    count += 1;\n                }\n                num /= 10;\n            }\n\
    \        }\n    }\n    count", "    // Complete this function\n    let mut count\
    \ = 0;\n    for i in 1..n {\n        if i % 11 == 0 || i % 13 == 0 {\n       \
    \     let n = i.to_string();\n            for c in n.chars() {\n             \
    \   if c == '7' {\n                    count += 1;\n                }\n      \
    \      }\n        }\n    }\n    count", "    let mut count = 0;\n    for i in\
    \ 0..n {\n        if i % 11 == 0 {\n            count += 1;\n        } else if\
    \ i % 13 == 0 {\n            count += 1;\n        }\n    }\n    count", "    let\
    \ mut count = 0;\n    for i in 0..n {\n        let mut tmp = i;\n        while\
    \ tmp > 0 {\n            if tmp % 10 == 7 {\n                count += 1;\n   \
    \         }\n            tmp /= 10;\n        }\n    }\n    count", "    let mut\
    \ c = 0;\n    for i in 1..n {\n        let string = i.to_string();\n        let\
    \ mut digits = vec![];\n        for j in string.chars() {\n            digits.push(j.to_digit(10).unwrap());\n\
    \        }\n        if digits.contains(&7) && (i % 11 == 0 || i % 13 == 0) {\n\
    \            c += 1;\n        }\n    }\n    c", "    (1..n).filter(|x| x % 11\
    \ == 0 || x % 13 == 0).map(|x| x.to_string()).fold(0, |acc, x| acc + x.chars().filter(|c|\
    \ *c == '7').count() as isize)", "  let mut count = 0;\n  for i in 1..n {\n  \
    \  if i % 11 == 0 || i % 13 == 0 {\n      count += i.to_string().chars().filter(|&c|\
    \ c == '7').count() as isize;\n    }\n  }\n  count", "    (1..n).filter(|x| *x\
    \ % 11 == 0 || *x % 13 == 0).map(|x| {\n        x.to_string().chars().filter(|y|\
    \ *y == '7').count() as isize\n    }).sum()", "    let mut result = 0;\n    for\
    \ i in 0..n {\n        if i % 11 == 0 || i % 13 == 0 {\n            let mut number\
    \ = i;\n            while number > 0 {\n                if number % 10 == 7 {\n\
    \                    result += 1;\n                }\n                number /=\
    \ 10;\n            }\n        }\n    }\n    result", "    (0..n)\n        .filter(|&x|\
    \ x % 11 == 0 || x % 13 == 0)\n        .map(|x| x.to_string())\n        .map(|x|\
    \ x.chars().filter(|&x| x == '7').count() as isize)\n        .sum()", "    let\
    \ mut sum = 0;\n    for i in 0..n {\n        if (i % 11 == 0 || i % 13 == 0) &&\
    \ i.to_string().contains(\"7\") {\n            sum += 1;\n        }\n    }\n \
    \   sum", "    let mut count = 0;\n    for i in 1..n {\n        if i % 11 == 0\
    \ || i % 13 == 0 {\n            let mut x = i;\n            while x > 0 {\n  \
    \              let d = x % 10;\n                if d == 7 {\n                \
    \    count += 1;\n                }\n                x /= 10;\n            }\n\
    \        }\n    }\n    count", "    (1..n).filter(|x| {\n        let s = x.to_string();\n\
    \        x % 11 == 0 || x % 13 == 0 && (s.contains('7') || s.contains('7'))\n\
    \    }).count() as isize", '    (1..n).filter(|x| x % 11 == 0 || x % 13 == 0).filter(|x|
    x.to_string().contains("7")).count() as isize', "    let mut sum = 0;\n    for\
    \ i in 1..n {\n        if i % 7 == 0 {\n            let mut x = i;\n         \
    \   while x > 0 {\n                if x % 10 == 7 {\n                    sum +=\
    \ 1;\n                }\n                x /= 10;\n            }\n        }\n\
    \    }\n    sum", "    let mut cnt = 0;\n    for num in 0..n {\n        if (num\
    \ % 11 == 0 || num % 13 == 0) && num.to_string().contains('7') {\n           \
    \ cnt += 1;\n        }\n    }\n    cnt", '    (1..n).filter(|x| (x % 11 == 0 ||
    x % 13 == 0) && x.to_string().contains("7")).count() as isize', "    let mut sum\
    \ = 0;\n    for num in 1..n {\n        if num % 11 == 0 || num % 13 == 0 {\n \
    \           let mut digit = num;\n            while digit > 0 {\n            \
    \    let d = digit % 10;\n                if d == 7 {\n                    sum\
    \ += 1;\n                }\n                digit /= 10;\n            }\n    \
    \    }\n    }\n    sum", "    let mut sum = 0;\n    for i in 1..n {\n        if\
    \ i % 11 == 0 || i % 13 == 0 {\n            let s = i.to_string();\n         \
    \   for c in s.chars() {\n                if c == '7' {\n                    sum\
    \ += 1;\n                }\n            }\n        }\n    }\n    sum", "    (0..n)\n\
    \        .filter(|x| x % 11 == 0 || x % 13 == 0)\n        .filter(|x| x.to_string().contains('7'))\n\
    \        .count() as isize", '    (1..n).filter(|x| x % 11 == 0 || x % 13 == 0).filter(|x|
    x.to_string().contains("7")).count() as isize', "    (0..n)\n        .filter(|&i|\
    \ i % 11 == 0 || i % 13 == 0)\n        .map(|i| format!(\"{}\", i))\n        .map(|i|\
    \ i.matches(\"7\").count() as isize)\n        .sum()", '    (1..n).filter(|x|
    x % 11 == 0 || x % 13 == 0).filter(|x| x.to_string().contains("7")).count() as
    isize', "    let mut count = 0;\n    for i in 1..n {\n        if i % 11 == 0 ||\
    \ i % 13 == 0 {\n            let s = i.to_string();\n            for c in s.chars()\
    \ {\n                if c == '7' {\n                    count += 1;\n        \
    \        }\n            }\n        }\n    }\n    count", "  let mut s = 0;\n \
    \ for n in (1..n).rev() {\n    let mut n2 = n;\n    while n2 > 0 {\n      if n2\
    \ % 10 == 7 {\n        s += 1;\n      }\n      n2 /= 10;\n    }\n    if n % 11\
    \ == 0 || n % 13 == 0 {\n      s -= 1;\n    }\n  }\n  s", "    let mut sum = 0;\n\
    \    for i in 1..n {\n        if i % 11 == 0 || i % 13 == 0 {\n            sum\
    \ += i.to_string().matches(\"7\").count() as isize;\n        }\n    }\n    sum",
  "    let mut count = 0;\n    for i in 1..n {\n        if i % 11 == 0 || i % 13 ==\
    \ 0 {\n            count += i.to_string().chars().filter(|&c| c == '7').count()\
    \ as isize;\n        }\n    }\n    count", "    let mut seven_count = 0;\n   \
    \ for i in 0..n {\n        if i % 11 == 0 || i % 13 == 0 {\n            seven_count\
    \ += i.to_string().matches(\"7\").count() as isize;\n        }\n    }\n    seven_count",
  "    let digits = num_to_vec(n);\n    let mut count = 0;\n    for i in 0..digits.len()\
    \ {\n        if digits[i] == 7 {\n            count += 1;\n        }\n    }\n\
    \    count", '    unimplemented!();', "    use std::convert::TryInto;\n    use\
    \ std::iter::repeat;\n    use std::mem::replace;\n\n    let mut cnt = 0;\n   \
    \ let mut n: isize = n - 1;\n    while n > 0 {\n        let mut digits = repeat(0).take(11).collect::<Vec<_>>();\n\
    \        let mut idx = 0;\n        while n > 0 {\n            digits[idx] = n\
    \ % 10;\n            n /= 10;\n            idx += 1;\n        }\n        for i\
    \ in 0..(idx / 2) {\n            digits.swap(i, idx - i - 1);\n        }\n   \
    \     let mut res = 0;\n        for i in 0..idx {\n            res = res * 10\
    \ + digits[i];\n        }\n        if res % 11 == 0 || res % 13 == 0 {\n     \
    \       for i in 0..idx {\n                if digits[i] == 7 {\n             \
    \       cnt += 1;\n                }\n            }\n        }\n        n = replace(&mut\
    \ res, 0);\n    }\n    cnt", "    let mut count = 0;\n    for i in 0..n {\n  \
    \      if (i % 11 == 0 || i % 13 == 0) && i.to_string().contains(\"7\") {\n  \
    \          count += 1;\n        }\n    }\n    count", "    let mut count = 0;\n\
    \    for i in 1..n {\n        if i % 11 == 0 || i % 13 == 0 {\n            let\
    \ mut i = i;\n            while i > 0 {\n                if i % 10 == 7 {\n  \
    \                  count += 1;\n                }\n                i /= 10;\n\
    \            }\n        }\n    }\n    count", "    let mut total = 0;\n    for\
    \ i in (1..n).rev() {\n        if i % 11 == 0 || i % 13 == 0 {\n            let\
    \ mut digits = i.to_string();\n            while digits.len() > 0 {\n        \
    \        if digits.pop().unwrap() == '7' {\n                    total += 1;\n\
    \                }\n            }\n        }\n    }\n    total", "    // TODO\n\
    \    0", "    let mut r = 0;\n    for i in 1..n {\n        if i % 11 == 0 || i\
    \ % 13 == 0 {\n            r += i.to_string().chars().filter(|x| *x == '7').count()\
    \ as isize;\n        }\n    }\n    r", "    let mut total = 0;\n    for m in 1..n\
    \ {\n        if m % 11 == 0 || m % 13 == 0 {\n            let mut c = m;\n   \
    \         while c > 0 {\n                if c % 10 == 7 {\n                  \
    \  total += 1;\n                }\n                c /= 10;\n            }\n \
    \       }\n    }\n    total", "    let mut result = 0;\n    for i in 1..n {\n\
    \        if (i % 11 == 0 || i % 13 == 0) && i.to_string().contains(\"7\") {\n\
    \            result += 1;\n        }\n    }\n    result", "    let mut count =\
    \ 0;\n    for i in 0..n {\n        if i % 11 == 0 || i % 13 == 0 {\n         \
    \   let mut n = i;\n            while n > 0 {\n                if n % 10 == 7\
    \ {\n                    count += 1;\n                }\n                n /=\
    \ 10;\n            }\n        }\n    }\n    count", "    return (0..n)\n     \
    \   .filter(|x| x % 11 == 0 || x % 13 == 0)\n        .map(|x| x.to_string())\n\
    \        .flat_map(|x| x.chars())\n        .filter(|x| x == &'7')\n        .count()\
    \ as isize;", '    unimplemented!()', "    let mut count = 0;\n    for i in 0..n\
    \ {\n        let mut a = (i / 11) % 10;\n        let mut b = (i / 13) % 10;\n\
    \        if a == 7 || b == 7 {\n            count += 1;\n        }\n    }\n  \
    \  count", "    if n < 0 {\n        return 0;\n    }\n    let mut result = 0;\n\
    \    for i in (1..n) {\n        if (i % 11 == 0 || i % 13 == 0) && i.to_string().contains(\"\
    7\") {\n            result += 1;\n        }\n    }\n    result", "    let mut\
    \ result = 0;\n    for i in 0..n {\n        if (i % 11 == 0 || i % 13 == 0) &&\
    \ i.to_string().contains(\"7\") {\n            result += 1;\n        }\n    }\n\
    \    result", "    let mut sum = 0;\n    for i in 1..n {\n        let mut x =\
    \ i;\n        let mut sevens = 0;\n        while x > 0 {\n            if x % 10\
    \ == 7 {\n                sevens += 1;\n            }\n            x /= 10;\n\
    \        }\n        if sevens > 0 && (i % 11 == 0 || i % 13 == 0) {\n        \
    \    sum += sevens;\n        }\n    }\n    sum", "    let mut c: isize = 0;\n\
    \    for i in 1..n {\n        if i % 11 == 0 || i % 13 == 0 {\n            if\
    \ i.to_string().contains(\"7\") {\n                c += 1;\n            }\n  \
    \      }\n    }\n    c"]
stop_tokens:
- "\n}"
