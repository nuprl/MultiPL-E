language: rs
name: HumanEval_25_factorize
results:
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut factors = Vec::new();\n    let mut n = n;\n    let mut prime = 2;\n\
    \    while n > 1 {\n        while n % prime == 0 {\n            factors.push(prime);\n\
    \            n /= prime;\n        }\n        prime += 1;\n    }\n    factors\n\
    }\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822430
- exit_code: 101
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let upper_bound = (n as f64).sqrt() as isize + 1;\n    let mut divisors =\
    \ Vec::new();\n    for i in 2..upper_bound {\n        if n % i == 0 {\n      \
    \      let mut e = 0;\n            let mut m = n;\n            while m % i ==\
    \ 0 {\n                e += 1;\n                m /= i;\n            }\n     \
    \       divisors.push((i, e));\n        }\n    }\n    if n != 1 {\n        divisors.push((n,\
    \ 1));\n    }\n    divisors.iter().flat_map(|(d, e)| vec![*d; *e as usize]).collect()\n\
    }\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 2, 4]`,\n right: `[2, 2]`', /tmp/tmpjtfv9lw4.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822430
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut factors = Vec::new();\n    let mut n = n;\n    let mut d = 2;\n \
    \   while n > 1 {\n        while n % d == 0 {\n            factors.push(d);\n\
    \            n /= d;\n        }\n        d += 1;\n    }\n    factors\n}\n\nfn\
    \ main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822430
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut result = Vec::new();\n    let mut candidate = 2;\n    let mut remaining\
    \ = n;\n    while remaining > 1 {\n        if remaining % candidate == 0 {\n \
    \           result.push(candidate);\n            remaining /= candidate;\n   \
    \     } else {\n            candidate += 1;\n        }\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822430
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut factors = Vec::new();\n    let mut current = n;\n    let mut i =\
    \ 2;\n    while i * i <= current {\n        while current % i == 0 {\n       \
    \     factors.push(i);\n            current /= i;\n        }\n        i += 1;\n\
    \    }\n    if current > 1 {\n        factors.push(current);\n    }\n    factors\n\
    }\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822430
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut buf = n;\n    let mut res = Vec::new();\n    let mut div = 2;\n \
    \   while buf != 1 {\n        while buf % div == 0 {\n            res.push(div);\n\
    \            buf /= div;\n        }\n        div += 1;\n    }\n    res\n}\n\n\
    fn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822430
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut result = Vec::new();\n    let mut remaining = n;\n    for i in 2..=(n\
    \ as f64).sqrt() as isize {\n        let mut count = 0;\n        while remaining\
    \ % i == 0 {\n            remaining /= i;\n            count += 1;\n        }\n\
    \        for _ in 0..count {\n            result.push(i);\n        }\n    }\n\
    \    if remaining > 1 {\n        result.push(remaining);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822430
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut factors = Vec::new();\n    if n <= 1 {\n        return factors;\n\
    \    }\n    if n % 2 == 0 {\n        factors.push(2);\n        let mut res = factorize(n\
    \ / 2);\n        factors.append(&mut res);\n        return factors;\n    }\n \
    \   let mut i = 3;\n    while i <= (n as f64).sqrt() as isize {\n        if n\
    \ % i == 0 {\n            factors.push(i);\n            let mut res = factorize(n\
    \ / i);\n            factors.append(&mut res);\n            return factors;\n\
    \        }\n        i += 2;\n    }\n    factors.push(n);\n    factors\n}\n\nfn\
    \ main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822430
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut v = Vec::new();\n    let mut i = 2;\n    let mut n = n;\n    while\
    \ i <= n {\n        if n % i == 0 {\n            v.push(i);\n            n /=\
    \ i;\n        } else {\n            i += 1;\n        }\n    }\n    v\n}\n\nfn\
    \ main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822430
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut result = Vec::new();\n    if n <= 3 {\n        result.push(n);\n\
    \        return result;\n    }\n    let sqrt = (n as f64).sqrt() as isize;\n \
    \   let mut m = n;\n    let mut i = 2;\n    while i <= sqrt {\n        if m %\
    \ i == 0 {\n            result.push(i);\n            m /= i;\n        } else {\n\
    \            i += 1;\n        }\n    }\n    if m > 1 {\n        result.push(m);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822430
- exit_code: 101
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    unimplemented!();\n}\n\nfn main() {\n    let candidate = factorize;\n   \
    \ assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n\
    \    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3,\
    \ 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp9z73xr2r.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822430
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    if n == 1 {\n        return vec![1];\n    }\n    let mut factors = Vec::new();\n\
    \    let mut n = n;\n    let mut i = 2;\n    while i * i <= n {\n        while\
    \ n % i == 0 {\n            factors.push(i);\n            n /= i;\n        }\n\
    \        i += 1;\n    }\n    if n > 1 {\n        factors.push(n);\n    }\n   \
    \ factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822430
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    if n == 1 {\n        return vec![];\n    }\n    let mut x = n;\n    let mut\
    \ factor = 2;\n    let mut factors = vec![];\n    while x > 1 {\n        if x\
    \ % factor == 0 {\n            x /= factor;\n            factors.push(factor);\n\
    \        } else {\n            factor += 1;\n        }\n    }\n    factors\n}\n\
    \nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822430
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut result = Vec::new();\n    let mut number = n;\n    let mut divisor\
    \ = 2;\n    while number > 1 {\n        while number % divisor == 0 {\n      \
    \      result.push(divisor);\n            number /= divisor;\n        }\n    \
    \    divisor += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822430
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut remainder = n;\n    let mut divisor = 2;\n    let mut factors = Vec::new();\n\
    \    while remainder != 1 {\n        if remainder % divisor == 0 {\n         \
    \   factors.push(divisor);\n            remainder /= divisor;\n        } else\
    \ {\n            divisor += 1;\n        }\n    }\n    factors\n}\n\nfn main()\
    \ {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822430
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    // println!(\"input: {}\", n);\n    if n == 1 {\n        return vec![1];\n\
    \    }\n    let mut result = Vec::new();\n    let mut current = n;\n    let mut\
    \ index = 2;\n    while current != 1 {\n        if index * index > current {\n\
    \            result.push(current);\n            break;\n        }\n        if\
    \ current % index == 0 {\n            result.push(index);\n            current\
    \ /= index;\n        } else {\n            index += 1;\n        }\n    }\n   \
    \ // println!(\"output: {:?}\", result);\n    result\n}\n\nfn main() {\n    let\
    \ candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822430
- exit_code: 101
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    vec![]\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[2]`', /tmp/tmpyk70o3nt.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822430
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut result = Vec::new();\n    let mut temp = n;\n    for i in 2..=n {\n\
    \        while temp % i == 0 {\n            result.push(i);\n            temp\
    \ /= i;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822430
- exit_code: 1
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut primes = prime_factors(n);\n    let mut res = Vec::new();\n    while\
    \ let Some(prime) = primes.pop() {\n        let mut next = prime;\n        while\
    \ primes.last() == Some(&prime) {\n            primes.pop();\n            next\
    \ *= prime;\n        }\n        res.push(next);\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `prime_factors` in this scope\n -->\
    \ /tmp/tmp6nojdzhq.rs:5:22\n  |\n5 |     let mut primes = prime_factors(n);\n\
    \  |                      ^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659822430
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut n = n;\n    let mut i = 2;\n    let mut result = Vec::new();\n  \
    \  while i * i <= n {\n        if n % i == 0 {\n            result.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    if n > 1 {\n        result.push(n);\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822430
- exit_code: 1
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut prime_factors = Vec::new();\n    let mut number = n;\n    for i in\
    \ 2..=number {\n        if number == 1 {\n            break;\n        }\n    \
    \    if is_prime(i) {\n            while number % i == 0 {\n                prime_factors.push(i);\n\
    \                number /= i;\n            }\n        }\n    }\n    prime_factors\n\
    }\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpmg4zv86a.rs:11:12\n\
    \   |\n11 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822430
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut v = vec![];\n    let mut n = n;\n    let mut d = 2;\n    while n\
    \ > 1 {\n        while n % d == 0 {\n            v.push(d);\n            n /=\
    \ d;\n        }\n        d += 1;\n    }\n    v\n}\n\nfn main() {\n    let candidate\
    \ = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822430
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    if n == 1 {\n        return vec![1];\n    }\n    let mut x = n;\n    let\
    \ mut i = 2;\n    let mut res = Vec::new();\n    while i * i <= x {\n        if\
    \ x % i == 0 {\n            res.push(i);\n            x /= i;\n        } else\
    \ {\n            i += 1;\n        }\n    }\n    res.push(x);\n    res\n}\n\nfn\
    \ main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822430
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut factors = Vec::new();\n    if n <= 1 {\n        return factors;\n\
    \    }\n    let mut x = n;\n    for i in 2..=n {\n        if i * i > n {\n   \
    \         break;\n        }\n        while x % i == 0 {\n            factors.push(i);\n\
    \            x /= i;\n        }\n    }\n    if x > 1 {\n        factors.push(x);\n\
    \    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822430
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let factors = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut factorization = Vec::new();\n\
    \    let mut n = n;\n    let mut i = 0;\n    while n > 1 {\n        if n % factors[i]\
    \ == 0 {\n            factorization.push(factors[i]);\n            n /= factors[i];\n\
    \        } else {\n            i += 1;\n        }\n    }\n    factorization\n\
    }\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822430
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    match n {\n        0 => vec![],\n        1 => vec![1],\n        n => {\n\
    \            let mut n = n;\n            let mut result = vec![];\n          \
    \  for f in 2..=(n as f64).sqrt() as isize {\n                while n % f == 0\
    \ {\n                    result.push(f);\n                    n /= f;\n      \
    \          }\n            }\n            if n > 1 {\n                result.push(n);\n\
    \            }\n            result\n        }\n    }\n}\n\nfn main() {\n    let\
    \ candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822430
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut n = n;\n    let mut result = Vec::new();\n    let mut factor = 2;\n\
    \    while n > 1 {\n        while n % factor == 0 {\n            result.push(factor);\n\
    \            n /= factor;\n        }\n        factor += 1;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822430
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut res = Vec::new();\n    let mut n = n;\n    let mut i = 2;\n    while\
    \ i <= n {\n        if n % i == 0 {\n            n /= i;\n            res.push(i);\n\
    \        } else {\n            i += 1;\n        }\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822430
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut factors = Vec::new();\n    let mut i = 2;\n    let mut n = n;\n \
    \   while i * i <= n {\n        while n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        }\n        i += 1;\n    }\n    if n > 1 {\n    \
    \    factors.push(n);\n    }\n    factors\n}\n\nfn main() {\n    let candidate\
    \ = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822430
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut v = Vec::new();\n    let mut k = n;\n    for i in 2..n + 1 {\n  \
    \      while k % i == 0 {\n            v.push(i);\n            k /= i;\n     \
    \   }\n    }\n    v\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822430
- exit_code: 1
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut m = n;\n    let mut result = Vec::new();\n    for i in 2..(m + 1)\
    \ {\n        if m % i == 0 {\n            result.push(i);\n            m /= i;\n\
    \            i -= 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: SyntaxError
  stderr: "warning: value assigned to `i` is never read\n  --> /tmp/tmpopf05p96.rs:11:13\n\
    \   |\n11 |             i -= 1;\n   |             ^\n   |\n   = note: `#[warn(unused_assignments)]`\
    \ on by default\n   = help: maybe it is overwritten before being read?\n\nerror[E0384]:\
    \ cannot assign twice to immutable variable `i`\n  --> /tmp/tmpopf05p96.rs:11:13\n\
    \   |\n7  |     for i in 2..(m + 1) {\n   |         -\n   |         |\n   |  \
    \       first assignment to `i`\n   |         help: consider making this binding\
    \ mutable: `mut i`\n...\n11 |             i -= 1;\n   |             ^^^^^^ cannot\
    \ assign twice to immutable variable\n\nerror: aborting due to previous error;\
    \ 1 warning emitted\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659822430
- exit_code: 1
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let primes: Vec<isize> = get_primes(n as usize + 1);\n    let mut v: Vec<isize>\
    \ = Vec::new();\n    let mut m = n;\n    for i in primes {\n        while m %\
    \ i == 0 {\n            v.push(i);\n            m /= i;\n        }\n    }\n  \
    \  v\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `get_primes` in this scope\n --> /tmp/tmpskcnhtoi.rs:5:30\n\
    \  |\n5 |     let primes: Vec<isize> = get_primes(n as usize + 1);\n  |      \
    \                        ^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659822430
- exit_code: 1
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut n = n;\n    let mut primes = Vec::new();\n    for i in 2..=n {\n\
    \        if is_prime(i) {\n            let mut t = 0;\n            while n % i\
    \ == 0 {\n                n /= i;\n                t += 1;\n            }\n  \
    \          if t > 0 {\n                primes.push(i);\n            }\n      \
    \  }\n    }\n    primes\n}\n\nfn main() {\n    let candidate = factorize;\n  \
    \  assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n\
    \    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3,\
    \ 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n --> /tmp/tmpe1cx1rpx.rs:8:12\n\
    \  |\n8 |         if is_prime(i) {\n  |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822430
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut n = n;\n    let mut factors = Vec::new();\n    let mut d = 2;\n \
    \   while n > 1 {\n        while n % d == 0 {\n            factors.push(d);\n\
    \            n /= d;\n        }\n        d += 1;\n    }\n    factors\n}\n\nfn\
    \ main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822430
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut factors = Vec::new();\n    let mut num = n;\n    while num % 2 ==\
    \ 0 {\n        factors.push(2);\n        num /= 2;\n    }\n    let mut div = 3;\n\
    \    while num > 1 {\n        while num % div == 0 {\n            factors.push(div);\n\
    \            num /= div;\n        }\n        div += 2;\n    }\n    factors\n}\n\
    \nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822430
- exit_code: 101
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    unimplemented!();\n}\n\nfn main() {\n    let candidate = factorize;\n   \
    \ assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n\
    \    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3,\
    \ 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp9z73xr2r.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822430
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut factors = Vec::new();\n    let mut candidate = 2;\n    let mut quotient\
    \ = n;\n    while candidate <= quotient {\n        if quotient % candidate ==\
    \ 0 {\n            factors.push(candidate);\n            quotient /= candidate;\n\
    \        } else {\n            candidate += 1;\n        }\n    }\n    factors\n\
    }\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822430
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut answer = Vec::new();\n    let mut tmp = n;\n    for i in 2..=n {\n\
    \        while tmp % i == 0 {\n            answer.push(i);\n            tmp /=\
    \ i;\n        }\n    }\n    answer\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822430
- exit_code: 101
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    match n {\n        1 => vec![1],\n        n => {\n            let f = (2..n+1).find(|&x|\
    \ n % x == 0).unwrap();\n            let mut factors = factorize(n / f);\n   \
    \         factors.push(f);\n            factors\n        }\n    }\n}\n\nfn main()\
    \ {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2]`,\n right: `[2]`', /tmp/tmppfsriutm.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822430
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut res = Vec::new();\n    let mut n = n;\n    for i in 2..=(n as f64).sqrt()\
    \ as isize {\n        while n % i == 0 {\n            res.push(i);\n         \
    \   n /= i;\n        }\n    }\n    if n > 1 {\n        res.push(n);\n    }\n \
    \   res\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822430
- exit_code: 101
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let max_factor = (n as f64).sqrt() as isize + 1;\n    (2..max_factor).fold(vec![n],\
    \ |mut factors, next_factor| {\n        if factors[0] % next_factor == 0 {\n \
    \           factors[0] /= next_factor;\n            factors.push(next_factor);\n\
    \        }\n        factors\n    })\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 2]`,\n right: `[2, 2, 2]`', /tmp/tmpc3bnaqpd.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822430
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut n = n;\n    let mut vec = Vec::new();\n    let mut d = 2;\n    while\
    \ n > 1 {\n        while n % d == 0 {\n            vec.push(d);\n            n\
    \ /= d;\n        }\n        d += 1;\n    }\n    vec\n}\n\nfn main() {\n    let\
    \ candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822430
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut num = n;\n    let mut ret = Vec::new();\n    if num < 0 {\n     \
    \   ret.push(-1);\n        num *= -1;\n    }\n    while num > 1 {\n        let\
    \ mut i = 2;\n        while num % i != 0 {\n            i += 1;\n        }\n \
    \       ret.push(i);\n        num /= i;\n    }\n    ret\n}\n\nfn main() {\n  \
    \  let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822430
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut n = n;\n    let mut factors = Vec::new();\n    let mut next_prime\
    \ = 2;\n    loop {\n        if n == 1 {\n            break;\n        }\n     \
    \   if n % next_prime == 0 {\n            factors.push(next_prime);\n        \
    \    n /= next_prime;\n        } else {\n            next_prime += 1;\n      \
    \  }\n    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n \
    \   assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n\
    \    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3,\
    \ 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822430
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut result = Vec::new();\n    let mut num = n;\n    let mut i = 2;\n\
    \    while num != 1 {\n        if num % i == 0 {\n            result.push(i);\n\
    \            num /= i;\n        } else {\n            i += 1;\n        }\n   \
    \ }\n    result\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822430
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut factors = Vec::new();\n    let mut num = n;\n    let mut i = 2;\n\
    \    while i*i <= num {\n        if num % i == 0 {\n            num /= i;\n  \
    \          factors.push(i);\n        } else {\n            i += 1;\n        }\n\
    \    }\n    if num > 1 {\n        factors.push(num);\n    }\n    factors\n}\n\n\
    fn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822430
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut fac = Vec::new();\n    let mut nn = n;\n    for i in 2..((n as f64).sqrt()\
    \ as isize) + 1 {\n        while nn % i == 0 {\n            fac.push(i);\n   \
    \         nn /= i;\n        }\n    }\n    if nn > 1 {\n        fac.push(nn);\n\
    \    }\n    fac\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822430
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut res = Vec::new();\n    let mut n = n;\n    let mut d = 2;\n    while\
    \ n > 1 {\n        if n % d == 0 {\n            n /= d;\n            res.push(d);\n\
    \        } else {\n            d += 1;\n        }\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822431
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut num = n;\n    let mut res = Vec::new();\n    for divisor in 2..n+1\
    \ {\n        while num % divisor == 0 {\n            res.push(divisor);\n    \
    \        num /= divisor;\n        }\n    }\n    res\n}\n\nfn main() {\n    let\
    \ candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822431
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut v = Vec::new();\n    let mut t = n;\n    let mut i = 2;\n    while\
    \ t > 1 {\n        while t % i == 0 {\n            v.push(i);\n            t /=\
    \ i;\n        }\n        i += 1;\n    }\n    v\n}\n\nfn main() {\n    let candidate\
    \ = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822431
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut factors = Vec::new();\n    let mut prime_counter = 2;\n    let mut\
    \ remaining = n;\n    while remaining > 1 {\n        if remaining % prime_counter\
    \ == 0 {\n            factors.push(prime_counter);\n            remaining /= prime_counter;\n\
    \        } else {\n            prime_counter += 1;\n        }\n    }\n    factors\n\
    }\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822431
- exit_code: 1
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut n = n;\n    let mut factors = Vec::new();\n    let mut primes = all_primes(n\
    \ as usize);\n    let mut current_prime = primes.next().unwrap();\n    while n\
    \ > 1 {\n        if n % current_prime == 0 {\n            factors.push(current_prime);\n\
    \            n /= current_prime;\n        } else {\n            current_prime\
    \ = primes.next().unwrap();\n        }\n    }\n    factors\n}\n\nfn main() {\n\
    \    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `all_primes` in this scope\n --> /tmp/tmp86dk5l_0.rs:7:22\n\
    \  |\n7 |     let mut primes = all_primes(n as usize);\n  |                  \
    \    ^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822430
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut n = n;\n    let mut factors = Vec::new();\n    while n % 2 == 0 {\n\
    \        factors.push(2);\n        n /= 2;\n    }\n    let mut i = 3;\n    while\
    \ i * i <= n {\n        while n % i == 0 {\n            factors.push(i);\n   \
    \         n /= i;\n        }\n        i += 2;\n    }\n    if n > 1 {\n       \
    \ factors.push(n);\n    }\n    factors\n}\n\nfn main() {\n    let candidate =\
    \ factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822431
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut res = Vec::new();\n    let mut n = n;\n    let mut i = 2;\n    while\
    \ i*i <= n {\n        while n % i == 0 {\n            res.push(i);\n         \
    \   n /= i;\n        }\n        i += 1;\n    }\n    if n > 1 {\n        res.push(n);\n\
    \    }\n    res\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822431
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut factors = Vec::new();\n    let mut divisor = 2;\n    let mut remaining\
    \ = n;\n    while remaining > 1 {\n        if remaining % divisor == 0 {\n   \
    \         factors.push(divisor);\n            remaining /= divisor;\n        }\
    \ else {\n            divisor += 1;\n        }\n    }\n    factors\n}\n\nfn main()\
    \ {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822431
- exit_code: 101
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut v = vec![];\n    let mut n = n;\n    for i in 2..=n {\n        if\
    \ n % i == 0 {\n            let mut c = 0;\n            while n % i == 0 {\n \
    \               n /= i;\n                c += 1;\n            }\n            v.push(i);\n\
    \            v.push(c);\n        }\n    }\n    v\n}\n\nfn main() {\n    let candidate\
    \ = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 1]`,\n right: `[2]`', /tmp/tmp659xmqx_.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822431
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \tif n == 1 {\n\t\treturn vec![1];\n\t}\n\tlet mut res = Vec::new();\n\tlet mut\
    \ remainder = n;\n\tfor factor in 2..n {\n\t\tif remainder % factor == 0 {\n\t\
    \t\tlet mut cnt = 0;\n\t\t\twhile remainder % factor == 0 {\n\t\t\t\tremainder\
    \ /= factor;\n\t\t\t\tcnt += 1;\n\t\t\t}\n\t\t\tres.extend(std::iter::repeat(factor).take(cnt\
    \ as usize));\n\t\t}\n\t}\n\tif remainder != 1 {\n\t\tres.push(remainder);\n\t\
    }\n\tres\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822431
- exit_code: 101
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    unimplemented!()\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp4tsoea1_.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822431
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut factors = Vec::new();\n    let mut num = n;\n    for i in 2.. {\n\
    \        if num == 1 {\n            break;\n        }\n        while num % i ==\
    \ 0 {\n            factors.push(i);\n            num /= i;\n        }\n    }\n\
    \    factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822431
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut factors = Vec::new();\n    let mut n = n;\n    let mut divisor =\
    \ 2;\n    while n > 1 {\n        while n % divisor == 0 {\n            factors.push(divisor);\n\
    \            n /= divisor;\n        }\n        divisor += 1;\n    }\n    factors\n\
    }\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822431
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut factors = Vec::new();\n    let mut d = 2;\n    let mut n = n;\n \
    \   while n > 1 {\n        while n % d == 0 {\n            factors.push(d);\n\
    \            n /= d;\n        }\n        d += 1;\n    }\n    factors\n}\n\nfn\
    \ main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822431
- exit_code: 101
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    unimplemented!()\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp4tsoea1_.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822431
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut result = Vec::new();\n    let mut n = n;\n    let mut i = 2;\n  \
    \  while i * i <= n {\n        while n % i == 0 {\n            result.push(i);\n\
    \            n /= i;\n        }\n        i += 1;\n    }\n    if n > 1 {\n    \
    \    result.push(n);\n    }\n    result\n}\n\nfn main() {\n    let candidate =\
    \ factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822431
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut i = 2;\n    let mut prime_factors = Vec::new();\n    let mut tmp\
    \ = n;\n    while i * i <= tmp {\n        if tmp % i == 0 {\n            prime_factors.push(i);\n\
    \            tmp /= i;\n        } else {\n            i += 1;\n        }\n   \
    \ }\n    if tmp > 1 {\n        prime_factors.push(tmp);\n    }\n    prime_factors\n\
    }\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822431
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut divisor = 2;\n    let mut n = n;\n    let mut factors = Vec::new();\n\
    \    while n > 1 {\n        if n % divisor == 0 {\n            factors.push(divisor);\n\
    \            n /= divisor;\n        } else {\n            divisor += 1;\n    \
    \    }\n    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822431
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut result = Vec::new();\n    let mut i = 2;\n    let mut n = n;\n  \
    \  while i * i <= n {\n        while n % i == 0 {\n            result.push(i);\n\
    \            n /= i;\n        }\n        i += 1;\n    }\n    if n > 1 {\n    \
    \    result.push(n);\n    }\n    result\n}\n\nfn main() {\n    let candidate =\
    \ factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822431
- exit_code: 101
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    unimplemented!();\n}\n\nfn main() {\n    let candidate = factorize;\n   \
    \ assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n\
    \    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3,\
    \ 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp9z73xr2r.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822430
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    if n == 1 {\n        return vec![];\n    }\n    let mut divisor = 2;\n  \
    \  let mut residual = n;\n    let mut factors = vec![];\n    while residual !=\
    \ 1 {\n        while residual % divisor == 0 {\n            factors.push(divisor);\n\
    \            residual /= divisor;\n        }\n        divisor += 1;\n    }\n \
    \   factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822431
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    if n == 1 {\n        return vec![];\n    }\n    let mut n = n;\n    let mut\
    \ factors = vec![];\n    let mut p = 2;\n    while n > 1 {\n        if n % p ==\
    \ 0 {\n            factors.push(p);\n            n /= p;\n        } else {\n \
    \           p += 1;\n        }\n    }\n    factors\n}\n\nfn main() {\n    let\
    \ candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822431
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut n = n;\n    let mut ret = Vec::new();\n    let mut i = 2;\n    while\
    \ i * i <= n {\n        if n % i == 0 {\n            ret.push(i);\n          \
    \  n /= i;\n        } else {\n            i += 1;\n        }\n    }\n    if n\
    \ > 1 {\n        ret.push(n);\n    }\n    ret\n}\n\nfn main() {\n    let candidate\
    \ = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822431
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut n = n;\n    let mut factors = Vec::new();\n    let mut d = 2;\n \
    \   while n > 1 {\n        while n % d == 0 {\n            factors.push(d);\n\
    \            n /= d;\n        }\n        d += 1;\n    }\n    factors\n}\n\nfn\
    \ main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822430
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    if n == 1 {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 2;\n    let mut temp = n;\n    while i * i <= temp {\n      \
    \  if temp % i == 0 {\n            result.push(i);\n            temp /= i;\n \
    \       } else {\n            i += 1;\n        }\n    }\n    result.push(temp);\n\
    \    result\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822431
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    if n == 1 {\n        return vec![1];\n    }\n    let mut res = Vec::new();\n\
    \    let mut num = n;\n    let mut i = 2;\n    while i <= n {\n        while num\
    \ % i == 0 {\n            res.push(i);\n            num /= i;\n        }\n   \
    \     i += 1;\n    }\n    res\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822431
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    if n == 1 {\n        return vec![];\n    }\n    let mut m = n;\n    let mut\
    \ i = 2;\n    let mut res = vec![];\n    while i * i <= m {\n        if m % i\
    \ == 0 {\n            res.push(i);\n            m /= i;\n        } else {\n  \
    \          i += 1;\n        }\n    }\n    res.push(m);\n    res\n}\n\nfn main()\
    \ {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822431
- exit_code: 1
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut i = 2;\n    let mut r = Vec::new();\n    while i * i <= n {\n   \
    \     while n % i == 0 {\n            r.push(i);\n            n /= i;\n      \
    \  }\n        i += 1;\n    }\n    if n > 1 {\n        r.push(n);\n    }\n    r\n\
    }\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp333f_ru5.rs:10:13\n\
    \   |\n4  | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n10 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659822431
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut result = Vec::new();\n    let mut n = n;\n    let mut factor = 2;\n\
    \    loop {\n        if n == 1 {\n            break;\n        }\n        if n\
    \ % factor == 0 {\n            result.push(factor);\n            n /= factor;\n\
    \        } else {\n            factor += 1;\n        }\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822431
- exit_code: 1
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    // We are using tail recursion, so no need for a mutable vector here.\n \
    \   fn factorize_rec(n: isize, factors: Vec<isize>) -> Vec<isize> {\n        //\
    \ helper function to get the next prime number\n        fn get_next_prime(n: isize)\
    \ -> isize {\n            let mut p = n;\n            while !is_prime(p) {\n \
    \               p += 1;\n            }\n            p\n        }\n\n        if\
    \ n == 1 {\n            return factors;\n        }\n\n        let p = get_next_prime(2);\n\
    \        if n % p == 0 {\n            factorize_rec(n / p, [factors, vec![p]].concat())\n\
    \        } else {\n            factorize_rec(n, factors)\n        }\n    }\n\n\
    \    factorize_rec(n, vec![])\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmp9hidh49_.rs:10:20\n\
    \   |\n10 |             while !is_prime(p) {\n   |                    ^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822431
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    // If n is negative, take the absolute value\n    let mut n = n.abs();\n\
    \    let mut factors = Vec::new();\n\n    // Largest factor will be less than\
    \ or equal to n\n    let max_factor = n;\n\n    // Start with the smallest possible\
    \ prime factor\n    let mut factor = 2;\n\n    // Factorize until we reach 1\n\
    \    while n > 1 {\n        // Check if factor is a factor of n\n        if n\
    \ % factor == 0 {\n            // Divide n by factor until it's no longer divisible\
    \ by factor\n            while n % factor == 0 {\n                n /= factor;\n\
    \                factors.push(factor);\n            }\n        }\n\n        //\
    \ Move to the next factor\n        factor += 1;\n\n        // If the next factor\
    \ is greater than the maximum possible factor, we're done\n        if factor >\
    \ max_factor {\n            break;\n        }\n    }\n\n    factors\n}\n\nfn main()\
    \ {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822431
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut result = Vec::new();\n    let mut n = n;\n    let mut i = 2;\n  \
    \  while n != 1 {\n        if n % i == 0 {\n            result.push(i);\n    \
    \        n /= i;\n        } else {\n            i += 1;\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822431
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut factors = Vec::new();\n    let mut n = n;\n    let mut last_prime\
    \ = 2;\n    while n > 1 {\n        if n % last_prime == 0 {\n            factors.push(last_prime);\n\
    \            n /= last_prime;\n        } else {\n            last_prime += 1;\n\
    \        }\n    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822431
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut n = n;\n    let mut factors = Vec::new();\n    let mut divisor =\
    \ 2;\n    while n > 1 {\n        while n % divisor == 0 {\n            factors.push(divisor);\n\
    \            n /= divisor;\n        }\n        divisor += 1;\n    }\n    factors\n\
    }\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822431
- exit_code: 1
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut factors = Vec::new();\n    for i in 2..n {\n        while n % i ==\
    \ 0 {\n            factors.push(i);\n            n /= i;\n        }\n    }\n \
    \   factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmpdgcntuhi.rs:9:13\n\
    \  |\n4 | fn factorize(n: isize) -> Vec<isize> {\n  |              - help: consider\
    \ making this binding mutable: `mut n`\n...\n9 |             n /= i;\n  |    \
    \         ^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659822431
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut factors = Vec::new();\n    let mut n = n;\n    for i in 2..=n {\n\
    \        while n % i == 0 {\n            factors.push(i);\n            n /= i;\n\
    \        }\n    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822431
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \tlet mut factors = Vec::new();\n\tlet mut a = n;\n\tfor i in 2..=n {\n\t\twhile\
    \ a % i == 0 {\n\t\t\tfactors.push(i);\n\t\t\ta /= i;\n\t\t}\n\t}\n\tfactors\n\
    }\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822431
- exit_code: 101
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    //let mut list = Vec::new();\n    //for i in 2..n/2 + 1 {\n    //    if n\
    \ % i == 0 {\n    //        list.push(i);\n    //    }\n    //}\n    //list\n\
    \    let mut n = n;\n    let mut list = Vec::new();\n    for i in 2..n/2 + 1 {\n\
    \        while n % i == 0 {\n            list.push(i);\n            n = n / i;\n\
    \        }\n    }\n    list\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[2]`', /tmp/tmpfn1vm6oe.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822431
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut factors = Vec::new();\n    let mut n = n;\n    let mut i = 2;\n \
    \   while n != 1 {\n        if n % i == 0 {\n            factors.push(i);\n  \
    \          n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822432
- exit_code: 1
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut res = Vec::new();\n    let mut n = n;\n    for &p in primes.iter()\
    \ {\n        if p * p > n {\n            break;\n        }\n        let mut cnt\
    \ = 0;\n        while n % p == 0 {\n            n /= p;\n            cnt += 1;\n\
    \        }\n        if cnt > 0 {\n            res.push(p);\n        }\n    }\n\
    \    if n > 1 {\n        res.push(n);\n    }\n    res\n}\n\nfn main() {\n    let\
    \ candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `primes` in this scope\n --> /tmp/tmpmt16x8ua.rs:7:15\n\
    \  |\n7 |     for &p in primes.iter() {\n  |               ^^^^^^ not found in\
    \ this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822431
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut x = n;\n    let mut res = Vec::new();\n    while x % 2 == 0 {\n \
    \       res.push(2);\n        x /= 2;\n    }\n    let mut k = 3;\n    while k\
    \ * k <= x {\n        while x % k == 0 {\n            res.push(k);\n         \
    \   x /= k;\n        }\n        k += 2;\n    }\n    if x > 1 {\n        res.push(x);\n\
    \    }\n    res\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822432
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut res = Vec::new();\n    let mut n = n;\n    let mut factor = 2;\n\
    \    while n > 1 {\n        while n % factor == 0 {\n            res.push(factor);\n\
    \            n /= factor;\n        }\n        factor += 1;\n    }\n    res\n}\n\
    \nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822432
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut t = n;\n    let mut f: Vec<isize> = Vec::new();\n    let mut p =\
    \ 2;\n    while t > 1 {\n        while t % p == 0 {\n            f.push(p);\n\
    \            t /= p;\n        }\n        p += 1;\n    }\n    f\n}\n\nfn main()\
    \ {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822432
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut factors = Vec::new();\n    let mut m = n;\n    if n == 0 {\n    \
    \    return factors;\n    }\n    while m % 2 == 0 {\n        factors.push(2);\n\
    \        m /= 2;\n    }\n    let mut d = 3;\n    while m > 1 {\n        while\
    \ m % d == 0 {\n            factors.push(d);\n            m /= d;\n        }\n\
    \        d += 2;\n    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822432
- exit_code: 1
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut result = Vec::new();\n    if n < 0 {\n        result.push(-1);\n\
    \        n *= -1;\n    }\n    for i in 2..n {\n        if n % i == 0 {\n     \
    \       result.append(&mut factorize(n / i));\n            result.push(i);\n \
    \           break;\n        }\n    }\n    if result.is_empty() {\n        result.push(n);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmpw32yxlki.rs:8:9\n\
    \  |\n4 | fn factorize(n: isize) -> Vec<isize> {\n  |              - help: consider\
    \ making this binding mutable: `mut n`\n...\n8 |         n *= -1;\n  |       \
    \  ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659822431
- exit_code: 101
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    vec![]\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[2]`', /tmp/tmpyk70o3nt.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822430
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut num = n;\n    let mut factors = Vec::new();\n    let mut factor =\
    \ 2;\n    while num > 1 {\n        while num % factor == 0 {\n            factors.push(factor);\n\
    \            num /= factor;\n        }\n        factor += 1;\n    }\n    factors\n\
    }\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822432
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut answer = Vec::new();\n    let mut num = n;\n    let mut divisor =\
    \ 2;\n    while num > 1 {\n        while num % divisor == 0 {\n            answer.push(divisor);\n\
    \            num /= divisor;\n        }\n        divisor += 1;\n    }\n    answer\n\
    }\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822432
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    if n == 1 {\n        return vec![1];\n    }\n    let mut n = n;\n    let\
    \ mut res = Vec::new();\n    while n % 2 == 0 {\n        res.push(2);\n      \
    \  n /= 2;\n    }\n    let mut i = 3;\n    while i * i <= n {\n        while n\
    \ % i == 0 {\n            res.push(i);\n            n /= i;\n        }\n     \
    \   i += 2;\n    }\n    if n > 1 {\n        res.push(n);\n    }\n    res\n}\n\n\
    fn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822432
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut result = Vec::new();\n    let mut n = n;\n    let mut divisor = 2;\n\
    \    while n != 1 {\n        if n % divisor == 0 {\n            result.push(divisor);\n\
    \            n /= divisor;\n        } else {\n            divisor += 1;\n    \
    \    }\n    }\n    result\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822432
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut remaining = n;\n    let mut prime_factors = Vec::new();\n    let\
    \ mut p = 2;\n    loop {\n        if remaining % p == 0 {\n            prime_factors.push(p);\n\
    \            remaining /= p;\n        } else {\n            if p > remaining {\n\
    \                break;\n            }\n            p += 1;\n        }\n    }\n\
    \    prime_factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822432
- exit_code: 101
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    unimplemented!()\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp4tsoea1_.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822431
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut factors = Vec::new();\n    let mut n = n;\n    while n % 2 == 0 {\n\
    \        factors.push(2);\n        n /= 2;\n    }\n    let mut i = 3;\n    while\
    \ i <= n {\n        while n % i == 0 {\n            factors.push(i);\n       \
    \     n /= i;\n        }\n        i += 2;\n    }\n    factors\n}\n\nfn main()\
    \ {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822432
- exit_code: 1
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    if n == 1 {\n        return vec![1];\n    }\n    let mut copy_n = n;\n  \
    \  let mut result = Vec::new();\n    for i in 2..(n / 2 + 1) {\n        if is_prime(i)\
    \ {\n            while copy_n % i == 0 {\n                result.push(i);\n  \
    \              copy_n /= i;\n            }\n        }\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmp_dx89gid.rs:11:12\n\
    \   |\n11 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822431
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    // convert to unsigned\n    let mut n = n as usize;\n    let mut result =\
    \ Vec::new();\n    // while n is even, simply add 2 to the result and divide n\
    \ by 2\n    while n % 2 == 0 {\n        result.push(2);\n        n /= 2;\n   \
    \ }\n    // while n is odd, iterate through the odd numbers and add the divisors\
    \ to the result\n    // we can assume that n will always be odd after the last\
    \ iteration of the previous loop\n    let mut i = 3;\n    while i <= n {\n   \
    \     while n % i == 0 {\n            result.push(i as isize);\n            n\
    \ /= i;\n        }\n        i += 2;\n    }\n    result\n}\n\nfn main() {\n   \
    \ let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822432
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut n = n;\n    let mut res = Vec::new();\n    if n == 1 {\n        return\
    \ vec![1];\n    }\n    while n > 1 {\n        for i in 2..n + 1 {\n          \
    \  if n % i == 0 {\n                res.push(i);\n                n /= i;\n  \
    \              break;\n            }\n        }\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822432
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut curr_num = n;\n    let mut i = 2;\n    let mut factors = Vec::new();\n\
    \    while i <= curr_num {\n        if curr_num % i == 0 {\n            factors.push(i);\n\
    \            curr_num /= i;\n        } else {\n            i += 1;\n        }\n\
    \    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822432
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut prime_factors = vec![];\n    let mut num = n;\n    for i in 2..=n\
    \ {\n        if num == 1 {\n            break;\n        }\n        while num %\
    \ i == 0 {\n            prime_factors.push(i);\n            num /= i;\n      \
    \  }\n    }\n    prime_factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822432
- exit_code: -1
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut factors = Vec::new();\n    let mut num = n;\n    for i in 2.. {\n\
    \        if num == 1 {\n            break;\n        }\n        if num % i == 0\
    \ {\n            factors.push(i);\n            num /= i;\n        } else {\n \
    \           continue;\n        }\n    }\n    factors\n}\n\nfn main() {\n    let\
    \ candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659822437
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \tlet mut factors = Vec::new();\n\tlet mut n = n;\n\tlet mut divisor = 2;\n\t\
    while n > 1 {\n\t\twhile n % divisor == 0 {\n\t\t\tfactors.push(divisor);\n\t\t\
    \tn /= divisor;\n\t\t}\n\t\tdivisor += 1;\n\t}\n\tfactors\n}\n\nfn main() {\n\
    \    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822432
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    match n {\n        0 | 1 => vec![n],\n        _ => {\n            let mut\
    \ res = Vec::new();\n            let mut i = 2;\n            let mut n_tmp = n;\n\
    \            while i <= n_tmp {\n                if n_tmp % i == 0 {\n       \
    \             res.push(i);\n                    n_tmp /= i;\n                }\
    \ else {\n                    i += 1;\n                }\n            }\n    \
    \        res\n        }\n    }\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822432
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut n = n;\n    let mut result = Vec::new();\n    let mut i = 2;\n  \
    \  while i*i <= n {\n        while n % i == 0 {\n            result.push(i);\n\
    \            n /= i;\n        }\n        i += 1;\n    }\n    if n > 1 {\n    \
    \    result.push(n);\n    }\n    result\n}\n\nfn main() {\n    let candidate =\
    \ factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822432
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut prime_factors = Vec::new();\n    let mut mutable_n = n;\n    let\
    \ mut divisor = 2;\n    while mutable_n > 1 {\n        while mutable_n % divisor\
    \ == 0 {\n            prime_factors.push(divisor);\n            mutable_n /= divisor;\n\
    \        }\n        divisor += 1;\n    }\n    prime_factors\n}\n\nfn main() {\n\
    \    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822432
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    // assert_eq!(factorize(0), vec![]);\n    // assert_eq!(factorize(1), vec![]);\n\
    \    // assert_eq!(factorize(2), vec![2]);\n    // assert_eq!(factorize(3), vec![3]);\n\
    \    // assert_eq!(factorize(4), vec![2, 2]);\n    // assert_eq!(factorize(5),\
    \ vec![5]);\n    // assert_eq!(factorize(6), vec![2, 3]);\n    // assert_eq!(factorize(7),\
    \ vec![7]);\n    // assert_eq!(factorize(8), vec![2, 2, 2]);\n    // assert_eq!(factorize(9),\
    \ vec![3, 3]);\n    // assert_eq!(factorize(27), vec![3, 3, 3]);\n    // assert_eq!(factorize(625),\
    \ vec![5, 5, 5, 5]);\n    // assert_eq!(factorize(901255), vec![5, 17, 23, 461]);\n\
    \    // assert_eq!(factorize(93819012551), vec![11, 9539, 894119]);\n    let mut\
    \ factors = Vec::new();\n    let mut num = n;\n    while num > 1 {\n        for\
    \ i in 2..num+1 {\n            if num % i == 0 {\n                factors.push(i);\n\
    \                num /= i;\n                break;\n            }\n        }\n\
    \    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822432
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut res = Vec::new();\n    if n == 1 {\n        return res;\n    }\n\
    \    let mut n = n;\n    let mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    for p\
    \ in primes {\n        while n % p == 0 {\n            res.push(p);\n        \
    \    n /= p;\n        }\n    }\n    if n > 1 {\n        res.push(n);\n    }\n\
    \    res\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822432
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    // Implementation goes here\n    // Hint: use std::collections::HashMap<u32,\
    \ u32> to store prime factors and number of their occurences\n    let mut n =\
    \ n;\n    let mut factors = Vec::new();\n    let mut d = 2;\n    while n > 1 {\n\
    \        while n % d == 0 {\n            factors.push(d);\n            n /= d;\n\
    \        }\n        d += 1;\n        if d * d > n {\n            if n > 1 {\n\
    \                factors.push(n);\n                break;\n            }\n   \
    \     }\n    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822432
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut n = n;\n    let mut factors = Vec::new();\n    if n < 2 {\n     \
    \   return factors;\n    }\n    let mut divisor = 2;\n    while n > 1 {\n    \
    \    if n % divisor == 0 {\n            factors.push(divisor);\n            n\
    \ /= divisor;\n        } else {\n            divisor += 1;\n        }\n    }\n\
    \    factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822432
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    if n < 2 {\n        return vec![];\n    }\n    let mut n = n;\n    let mut\
    \ i = 2;\n    let mut ret = vec![];\n    while i * i <= n {\n        if n % i\
    \ == 0 {\n            ret.push(i);\n            n /= i;\n        } else {\n  \
    \          i += 1;\n        }\n    }\n    ret.push(n);\n    ret\n}\n\nfn main()\
    \ {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822432
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    assert!(n > 0);\n    let mut factors = Vec::new();\n    let mut curr = n;\n\
    \    let mut d = 2;\n    while curr > 1 {\n        while curr % d == 0 {\n   \
    \         factors.push(d);\n            curr /= d;\n        }\n        d += 1;\n\
    \    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822432
- exit_code: 101
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut primes: Vec<isize> = Vec::new();\n    let mut prime_index = 0;\n\
    \    let mut reminder = n;\n    while reminder != 1 {\n        if reminder % primes[prime_index]\
    \ == 0 {\n            reminder /= primes[prime_index];\n            primes.push(primes[prime_index]);\n\
    \        } else {\n            prime_index += 1;\n        }\n    }\n    primes\n\
    }\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpl106qqi2.rs:9:23

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822432
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut result = Vec::new();\n    let mut d = 2;\n    let mut n = n;\n  \
    \  while n > 1 {\n        while n % d == 0 {\n            result.push(d);\n  \
    \          n /= d;\n        }\n        d += 1;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822432
- exit_code: 101
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let m = n as f64;\n    let mut i = 2;\n    let mut result = Vec::new();\n\
    \    while (i as f64) <= m.sqrt() {\n        if n % i == 0 {\n            result.push(i);\n\
    \            result.append(&mut factorize(n / i));\n            break;\n     \
    \   }\n        i += 1;\n    }\n    if n == i {\n        result.push(i);\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3]`,\n right: `[3, 19]`', /tmp/tmpg5etm97w.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822432
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut factors = Vec::new();\n    let mut tmp = n;\n    let mut i = 2;\n\
    \    while tmp > 1 {\n        if tmp % i == 0 {\n            factors.push(i);\n\
    \            tmp /= i;\n        } else {\n            i += 1;\n        }\n   \
    \ }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822432
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut factors = Vec::new();\n    let mut num = n;\n    for i in 2..n {\n\
    \        while num % i == 0 {\n            factors.push(i);\n            num /=\
    \ i;\n        }\n    }\n    if num > 1 {\n        factors.push(num);\n    }\n\
    \    factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822432
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut factors = Vec::new();\n    let mut num = n;\n    let mut i = 2;\n\
    \    while i*i <= num {\n        while num % i == 0 {\n            factors.push(i);\n\
    \            num /= i;\n        }\n        i += 1;\n    }\n    if num > 1 {\n\
    \        factors.push(num);\n    }\n    factors\n}\n\nfn main() {\n    let candidate\
    \ = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822432
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut factors = Vec::new();\n    let mut m = n;\n    let mut d = 2;\n \
    \   while m > 1 {\n        while m % d == 0 {\n            factors.push(d);\n\
    \            m /= d;\n        }\n        d += 1;\n    }\n    factors\n}\n\nfn\
    \ main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822432
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut result = Vec::new();\n    let mut m = n;\n    while m % 2 == 0 {\n\
    \        result.push(2);\n        m /= 2;\n    }\n    for i in (3..((n as f64).sqrt()\
    \ as usize) + 1).step_by(2) {\n        while m % i as isize == 0 {\n         \
    \   result.push(i as isize);\n            m /= i as isize;\n        }\n    }\n\
    \    if m > 2 {\n        result.push(m);\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822432
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut factors = Vec::new();\n    let mut current = n;\n    let mut divisor\
    \ = 2;\n    while current > 1 {\n        if current % divisor == 0 {\n       \
    \     factors.push(divisor);\n            current /= divisor;\n        } else\
    \ {\n            divisor += 1;\n        }\n    }\n    factors\n}\n\nfn main()\
    \ {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822432
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut factors = Vec::new();\n    let mut number = n;\n    let mut divider\
    \ = 2;\n    while number > 1 {\n        while number % divider == 0 {\n      \
    \      factors.push(divider);\n            number /= divider;\n        }\n   \
    \     divider += 1;\n    }\n    factors\n}\n\nfn main() {\n    let candidate =\
    \ factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822432
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut factors = Vec::new();\n    let mut divisor = 2;\n    let mut remainder\
    \ = n;\n    while remainder != 1 {\n        while remainder % divisor == 0 {\n\
    \            factors.push(divisor);\n            remainder /= divisor;\n     \
    \   }\n        divisor += 1;\n    }\n    factors\n}\n\nfn main() {\n    let candidate\
    \ = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822432
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut res = Vec::new();\n    let mut n = n;\n    for i in 2..=n {\n   \
    \     while n % i == 0 {\n            res.push(i);\n            n /= i;\n    \
    \    }\n    }\n    res\n}\n\nfn main() {\n    let candidate = factorize;\n   \
    \ assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n\
    \    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3,\
    \ 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822432
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut result = Vec::new();\n    let mut number = n;\n    let mut prime\
    \ = 2;\n    while number > 1 {\n        if number % prime == 0 {\n           \
    \ result.push(prime);\n            number /= prime;\n        } else {\n      \
    \      prime += 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822432
- exit_code: 101
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut factors = Vec::new();\n    let mut cur = n;\n    for i in 2..(cur\
    \ / 2 + 1) {\n        if cur % i == 0 {\n            let mut times = 0;\n    \
    \        while cur % i == 0 {\n                cur /= i;\n                times\
    \ += 1;\n            }\n            for _ in 0..times {\n                factors.push(i);\n\
    \            }\n        }\n    }\n    factors\n}\n\nfn main() {\n    let candidate\
    \ = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[2]`', /tmp/tmp0hj04yr0.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822432
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut n = n;\n    let mut factors = Vec::new();\n    let mut d = 2;\n \
    \   while n > 1 {\n        while n % d == 0 {\n            factors.push(d);\n\
    \            n /= d;\n        }\n        d += 1;\n    }\n    factors\n}\n\nfn\
    \ main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822430
- exit_code: 1
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    if n < 2 {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut current = n;\n    for i in 2..=(n as f64).sqrt() as isize {\n   \
    \     let mut times = 0;\n        while current % i == 0 {\n            current\
    \ /= i;\n            times += 1;\n        }\n        if times > 0 {\n        \
    \    result.extend(repeat(i).take(times as usize));\n        }\n    }\n    if\
    \ current > 1 {\n        result.push(current);\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `repeat` in this scope\n  --> /tmp/tmpapagxteo.rs:17:27\n\
    \   |\n17 |             result.extend(repeat(i).take(times as usize));\n   | \
    \                          ^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing one of these items\n   |\n1  | use std::io::repeat;\n   |\n1  | use\
    \ std::iter::repeat;\n   |\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822432
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut num = n;\n    let mut factors = Vec::new();\n    for i in 2..num\
    \ + 1 {\n        if num % i == 0 {\n            while num % i == 0 {\n       \
    \         factors.push(i);\n                num /= i;\n            }\n       \
    \ }\n    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n  \
    \  assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n\
    \    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3,\
    \ 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822432
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut factors = Vec::new();\n    let mut p = 2;\n    let mut n = n;\n \
    \   while n > 1 {\n        if n % p == 0 {\n            factors.push(p);\n   \
    \         n /= p;\n        } else {\n            p += 1;\n        }\n    }\n \
    \   factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822432
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut n = n;\n    let mut factors = Vec::new();\n    if n <= 0 {\n    \
    \    return factors;\n    }\n    while n % 2 == 0 {\n        factors.push(2);\n\
    \        n /= 2;\n    }\n    let mut i = 3;\n    while i <= n {\n        while\
    \ n % i == 0 {\n            factors.push(i);\n            n /= i;\n        }\n\
    \        i += 2;\n    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822432
- exit_code: 1
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut factors = Vec::new();\n    let mut value = n;\n    for prime in primes()\
    \ {\n        if value % prime == 0 {\n            factors.push(prime);\n     \
    \       value /= prime;\n        }\n        if value == 1 {\n            break;\n\
    \        }\n    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `primes` in this scope\n --> /tmp/tmpnml7djtz.rs:7:18\n\
    \  |\n7 |     for prime in primes() {\n  |                  ^^^^^^ not found in\
    \ this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822432
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    if n < 2 {\n        return vec![];\n    }\n    let mut cn = n;\n    let mut\
    \ k = 2;\n    let mut factors = vec![];\n    while k * k <= cn {\n        while\
    \ cn % k == 0 {\n            factors.push(k);\n            cn /= k;\n        }\n\
    \        k += 1;\n    }\n    if cn > 1 {\n        factors.push(cn);\n    }\n \
    \   factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822432
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut result = Vec::new();\n    let mut number = n;\n    let mut divisor\
    \ = 2;\n    while number > 1 {\n        while number % divisor == 0 {\n      \
    \      result.push(divisor);\n            number /= divisor;\n        }\n    \
    \    divisor += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822430
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut current = n;\n    let mut result = Vec::new();\n    let mut i = 2;\n\
    \    while i * i <= current {\n        if current % i == 0 {\n            current\
    \ /= i;\n            result.push(i);\n        } else {\n            i += 1;\n\
    \        }\n    }\n    if current > 1 {\n        result.push(current);\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822432
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut prime_factors = vec![];\n    let mut current_number = n;\n    let\
    \ mut divisor = 2;\n    while current_number > 1 {\n        if current_number\
    \ % divisor == 0 {\n            prime_factors.push(divisor);\n            current_number\
    \ /= divisor;\n        } else {\n            divisor += 1;\n        }\n    }\n\
    \    prime_factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822433
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut result = Vec::new();\n    let mut m = n;\n    let mut d = 2;\n  \
    \  while m > 1 {\n        while m % d == 0 {\n            result.push(d);\n  \
    \          m /= d;\n        }\n        d += 1;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822433
- exit_code: 1
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut result = Vec::new();\n    let mut num = n;\n    while num > 1 {\n\
    \        let next_factor = get_first_prime_factor(num);\n        result.push(next_factor);\n\
    \        num /= next_factor;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `get_first_prime_factor` in this scope\n\
    \ --> /tmp/tmpv9sm26b0.rs:8:27\n  |\n8 |         let next_factor = get_first_prime_factor(num);\n\
    \  |                           ^^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822432
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut factors = Vec::new();\n    let mut p = 2;\n    let mut m = n;\n \
    \   while m > 1 {\n        while m % p == 0 {\n            factors.push(p);\n\
    \            m /= p;\n        }\n        p += 1;\n    }\n    factors\n}\n\nfn\
    \ main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822433
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut n = n;\n    let mut factors = Vec::new();\n    let mut i = 2;\n \
    \   while i <= n {\n        if n % i == 0 {\n            n /= i;\n           \
    \ factors.push(i);\n        } else {\n            i += 1;\n        }\n    }\n\
    \    factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822433
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut n = n;\n    let mut factors = Vec::new();\n    let mut divisor =\
    \ 2;\n    while n > 1 {\n        while n % divisor == 0 {\n            factors.push(divisor);\n\
    \            n /= divisor;\n        }\n        divisor += 1;\n    }\n    factors\n\
    }\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822431
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut res = Vec::new();\n    let mut curr = n;\n    while curr % 2 == 0\
    \ {\n        res.push(2);\n        curr /= 2;\n    }\n    let mut d = 3;\n   \
    \ while d * d <= curr {\n        while curr % d == 0 {\n            res.push(d);\n\
    \            curr /= d;\n        }\n        d += 2;\n    }\n    if curr > 1 {\n\
    \        res.push(curr);\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822433
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut factors = Vec::new();\n    let mut m = n;\n    for factor in 2..n+1\
    \ {\n        while m % factor == 0 {\n            factors.push(factor);\n    \
    \        m /= factor;\n        }\n    }\n    factors\n}\n\nfn main() {\n    let\
    \ candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822433
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut remainder = n;\n    let mut result = Vec::new();\n    if remainder\
    \ == 1 {\n        return result;\n    }\n    let mut factor = 2;\n    while remainder\
    \ > 1 {\n        while remainder % factor == 0 {\n            result.push(factor);\n\
    \            remainder /= factor;\n        }\n        factor += 1;\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822433
- exit_code: 1
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    // First get all the unique prime factors.\n    let mut unique_factors =\
    \ Vec::new();\n    let mut n = n;\n    while n > 1 {\n        let factor = smallest_factor(n);\n\
    \        unique_factors.push(factor);\n        n /= factor;\n    }\n\n    // Then\
    \ expand them.\n    let mut result = Vec::new();\n    for factor in unique_factors\
    \ {\n        result.push(factor);\n        while n % factor == 0 {\n         \
    \   result.push(factor);\n            n /= factor;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `smallest_factor` in this scope\n -->\
    \ /tmp/tmpgeucmgal.rs:9:22\n  |\n9 |         let factor = smallest_factor(n);\n\
    \  |                      ^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659822432
- exit_code: 101
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    unimplemented!();\n}\n\nfn main() {\n    let candidate = factorize;\n   \
    \ assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n\
    \    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3,\
    \ 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp9z73xr2r.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822430
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut factorization = Vec::new();\n    if n <= 0 {\n        return factorization;\n\
    \    }\n    if n == 1 {\n        factorization.push(1);\n        return factorization;\n\
    \    }\n    let mut start = 1;\n    let mut temp_n = n;\n    while start < n {\n\
    \        start += 1;\n        if temp_n % start == 0 {\n            factorization.push(start);\n\
    \            temp_n /= start;\n            if temp_n == 1 {\n                break;\n\
    \            }\n            start = 1;\n        }\n    }\n    factorization\n\
    }\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822433
- exit_code: 101
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    unimplemented!()\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp4tsoea1_.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822431
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut n = n;\n    let mut res = Vec::new();\n    let mut i = 2;\n    while\
    \ i <= n {\n        while n % i == 0 {\n            res.push(i);\n           \
    \ n /= i;\n        }\n        i += 1;\n    }\n    res\n}\n\nfn main() {\n    let\
    \ candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822433
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut n = n;\n    let mut v = Vec::new();\n    let mut i = 2;\n    while\
    \ i * i <= n {\n        while n % i == 0 {\n            v.push(i);\n         \
    \   n /= i;\n        }\n        i += 1;\n    }\n    if n > 1 {\n        v.push(n);\n\
    \    }\n    v\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822433
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut factors = Vec::new();\n    let mut n = n;\n    let mut p = 2;\n \
    \   while n > 1 {\n        while n % p == 0 {\n            factors.push(p);\n\
    \            n /= p;\n        }\n        p += 1;\n    }\n    factors\n}\n\nfn\
    \ main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822433
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut factors = Vec::new();\n    let mut i = 2;\n    let mut num = n;\n\
    \    while i * i <= num {\n        if num % i == 0 {\n            num /= i;\n\
    \            factors.push(i);\n        } else {\n            i += 1;\n       \
    \ }\n    }\n    if num > 1 {\n        factors.push(num);\n    }\n    factors\n\
    }\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822433
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut n = n;\n    let mut res = Vec::new();\n    let mut factor = 2;\n\
    \    while n > 1 {\n        while n % factor == 0 {\n            res.push(factor);\n\
    \            n /= factor;\n        }\n        factor += 1;\n    }\n    res\n}\n\
    \nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822433
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut result = Vec::new();\n    let mut number = n;\n    let mut current_divider\
    \ = 2;\n    while number > 1 {\n        while number % current_divider == 0 {\n\
    \            result.push(current_divider);\n            number /= current_divider;\n\
    \        }\n        current_divider += 1;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822433
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut vec = Vec::new();\n    let mut i = 2;\n    let mut temp = n;\n  \
    \  while i * i <= temp {\n        while temp % i == 0 {\n            vec.push(i);\n\
    \            temp /= i;\n        }\n        i += 1;\n    }\n    if temp > 1 {\n\
    \        vec.push(temp);\n    }\n    vec\n}\n\nfn main() {\n    let candidate\
    \ = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822433
- exit_code: 1
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut factorization = Vec::new();\n    if n < 0 {\n        factorization.push(-1);\n\
    \        n *= -1;\n    }\n    let mut n = n;\n    let mut i = 2;\n    while i\
    \ <= n {\n        if n % i == 0 {\n            factorization.push(i);\n      \
    \      n /= i;\n        } else {\n            i += 1;\n        }\n    }\n    factorization\n\
    }\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmp287pjdmc.rs:8:9\n\
    \  |\n4 | fn factorize(n: isize) -> Vec<isize> {\n  |              - help: consider\
    \ making this binding mutable: `mut n`\n...\n8 |         n *= -1;\n  |       \
    \  ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659822432
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut res = Vec::new();\n    let mut n = n;\n    for i in 2.. {\n     \
    \   if n == 1 {\n            break;\n        }\n        while n % i == 0 {\n \
    \           res.push(i);\n            n /= i;\n        }\n    }\n    res\n}\n\n\
    fn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822433
- exit_code: -1
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut f: Vec<isize> = Vec::new();\n    let mut x = n;\n    for i in 2..\
    \ {\n        if x == 1 {\n            break;\n        }\n        if x % i == 0\
    \ {\n            f.push(i);\n            x /= i;\n        }\n    }\n    f\n}\n\
    \nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659822438
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut result = Vec::new();\n    if n == 1 {\n        return result;\n \
    \   }\n    let mut num = n;\n    let mut divisor = 2;\n    while num > 1 {\n \
    \       if num % divisor == 0 {\n            result.push(divisor);\n         \
    \   num /= divisor;\n        } else {\n            divisor += 1;\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822433
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut result = Vec::new();\n    let mut n = n;\n    let mut prime = 2;\n\
    \    while n > 1 {\n        while n % prime == 0 {\n            result.push(prime);\n\
    \            n /= prime;\n        }\n        prime += 1;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822433
- exit_code: 1
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut prime_factors = Vec::new();\n    if n == 1 {\n        return prime_factors;\n\
    \    }\n    for candidate in 2..=n {\n        if n % candidate == 0 {\n      \
    \      let mut power = 0;\n            while n % candidate == 0 {\n          \
    \      power += 1;\n                let remaining = n / candidate;\n         \
    \       if remaining == 1 {\n                    break;\n                }\n \
    \               n = remaining;\n            }\n            prime_factors.extend(vec![candidate;\
    \ power as usize]);\n        }\n    }\n    prime_factors\n}\n\nfn main() {\n \
    \   let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpj8ca473p.rs:18:17\n\
    \   |\n4  | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n18 |                 n =\
    \ remaining;\n   |                 ^^^^^^^^^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659822433
- exit_code: 1
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut v = vec![];\n    let mut n = n;\n    let mut primes = sieve_of_eratosthenes(n);\n\
    \    while n > 1 {\n        let p = primes.remove(0);\n        while n % p ==\
    \ 0 {\n            v.push(p);\n            n /= p;\n        }\n    }\n    v\n\
    }\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `sieve_of_eratosthenes` in this scope\n\
    \ --> /tmp/tmpev8rbglq.rs:7:22\n  |\n7 |     let mut primes = sieve_of_eratosthenes(n);\n\
    \  |                      ^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822433
- exit_code: 1
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut n = n;\n    let mut factors = Vec::new();\n    if n > 0 {\n     \
    \   while n > 1 {\n            let smallest_factor = smallest_prime_factor(n);\n\
    \            factors.push(smallest_factor);\n            n /= smallest_factor;\n\
    \        }\n    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `smallest_prime_factor` in this scope\n\
    \ --> /tmp/tmppq86szrv.rs:9:35\n  |\n9 |             let smallest_factor = smallest_prime_factor(n);\n\
    \  |                                   ^^^^^^^^^^^^^^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822433
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut n = n;\n    let mut factors = Vec::new();\n    let mut i = 2;\n \
    \   while i * i <= n {\n        while n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        }\n        i += 1;\n    }\n    if n > 1 {\n    \
    \    factors.push(n);\n    }\n    factors\n}\n\nfn main() {\n    let candidate\
    \ = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822433
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut factors = Vec::new();\n    let mut current = n;\n    let mut i =\
    \ 2;\n    while i <= current {\n        if current % i == 0 {\n            factors.push(i);\n\
    \            current /= i;\n        } else {\n            i += 1;\n        }\n\
    \    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822433
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut factors = Vec::new();\n    if n <= 1 {\n        return factors;\n\
    \    }\n    let mut n = n;\n    let mut i = 2;\n    while i * i <= n {\n     \
    \   if n % i == 0 {\n            n /= i;\n            factors.push(i);\n     \
    \   } else {\n            i += 1;\n        }\n    }\n    factors.push(n);\n  \
    \  factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822433
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut factors = Vec::new();\n    let mut value = n;\n    let mut divisor\
    \ = 2;\n    while value > 1 {\n        while value % divisor == 0 {\n        \
    \    factors.push(divisor);\n            value /= divisor;\n        }\n      \
    \  divisor += 1;\n    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822433
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut factors = Vec::new();\n    let max_factor = (n as f64).sqrt() as\
    \ isize + 1;\n    let mut n = n;\n    for x in 2..max_factor {\n        while\
    \ n % x == 0 {\n            factors.push(x);\n            n /= x;\n        }\n\
    \    }\n    if n > 1 {\n        factors.push(n);\n    }\n    factors\n}\n\nfn\
    \ main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822433
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut n = n;\n    let mut factors = Vec::new();\n    let mut i = 2;\n \
    \   while i * i <= n {\n        while n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        }\n        i += 1;\n    }\n    if n > 1 {\n    \
    \    factors.push(n);\n    }\n    factors\n}\n\nfn main() {\n    let candidate\
    \ = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822433
- exit_code: 1
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut factors = Vec::new();\n    let mut sqrt = (n as f64).sqrt().ceil()\
    \ as isize;\n    let mut i = 2;\n    while i <= sqrt {\n        if n % i == 0\
    \ {\n            factors.push(i);\n            n /= i;\n            sqrt = (n\
    \ as f64).sqrt().ceil() as isize;\n        } else {\n            i += 1;\n   \
    \     }\n    }\n    if n != 1 {\n        factors.push(n);\n    }\n    factors\n\
    }\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp7s5maj49.rs:11:13\n\
    \   |\n4  | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n11 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659822433
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut n = n;\n    let mut f = 2;\n    let mut v = Vec::new();\n    while\
    \ n > 1 {\n        if n % f == 0 {\n            n /= f;\n            v.push(f);\n\
    \        } else {\n            f += 1;\n        }\n    }\n    v\n}\n\nfn main()\
    \ {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822433
- exit_code: 1
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut factors = Vec::new();\n    let mut n = n;\n    while n > 1 {\n  \
    \      let f = smallest_prime_factor(n);\n        factors.push(f);\n        n\
    \ /= f;\n    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `smallest_prime_factor` in this scope\n\
    \ --> /tmp/tmpyfkocb56.rs:8:17\n  |\n8 |         let f = smallest_prime_factor(n);\n\
    \  |                 ^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659822433
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut n = n;\n    let mut factors = Vec::new();\n    let mut divisor =\
    \ 2;\n    while n > 1 {\n        while n % divisor == 0 {\n            factors.push(divisor);\n\
    \            n /= divisor;\n        }\n        divisor += 1;\n    }\n    factors\n\
    }\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822431
- exit_code: 1
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut n = n;\n    let mut result = Vec::new();\n    let mut primes = generate_primes(n);\n\
    \    primes.reverse();\n    for p in primes {\n        if n % p == 0 {\n     \
    \       n /= p;\n            result.push(p);\n        }\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `generate_primes` in this scope\n -->\
    \ /tmp/tmpnpiluu4n.rs:7:22\n  |\n7 |     let mut primes = generate_primes(n);\n\
    \  |                      ^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659822433
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut factors = Vec::new();\n    let mut current = n;\n    let mut i =\
    \ 2;\n    while i * i <= current {\n        if current % i == 0 {\n          \
    \  while current % i == 0 {\n                factors.push(i);\n              \
    \  current /= i;\n            }\n        }\n        i += 1;\n    }\n    if current\
    \ > 1 {\n        factors.push(current);\n    }\n    factors\n}\n\nfn main() {\n\
    \    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822433
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut n = n;\n    let mut factors = Vec::new();\n    let mut i = 2;\n \
    \   while i * i <= n {\n        if n % i == 0 {\n            n /= i;\n       \
    \     factors.push(i);\n        } else {\n            i += 1;\n        }\n   \
    \ }\n    if n > 1 {\n        factors.push(n);\n    }\n    factors\n}\n\nfn main()\
    \ {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822433
- exit_code: 1
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    if n < 0 {\n        panic!(\"factorize: number must be non-negative, got:\
    \ {}\", n);\n    }\n    if n == 0 {\n        panic!(\"factorize: number must be\
    \ non-zero, got: {}\", n);\n    }\n    if n == 1 {\n        return vec![1];\n\
    \    }\n    let mut n = n;\n    let mut result = Vec::new();\n    for p in PRIMES.iter()\
    \ {\n        if n % p == 0 {\n            let mut cnt = 0;\n            while\
    \ n % p == 0 {\n                n /= p;\n                cnt += 1;\n         \
    \   }\n            for _ in 0..cnt {\n                result.push(*p);\n     \
    \       }\n        }\n    }\n    if n > 1 {\n        panic!(\"factorize: number\
    \ is too large to factorize: {}\", n);\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `PRIMES` in this scope\n  --> /tmp/tmp8i_48om3.rs:16:14\n\
    \   |\n16 |     for p in PRIMES.iter() {\n   |              ^^^^^^ not found in\
    \ this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822433
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut result = Vec::new();\n    let mut n = n;\n    let mut d = 2;\n  \
    \  while n > 1 {\n        if n % d == 0 {\n            result.push(d);\n     \
    \       n /= d;\n        } else {\n            d += 1;\n        }\n    }\n   \
    \ result\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822433
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut prime_divisors = Vec::new();\n    let mut remaining = n;\n    let\
    \ mut divisor = 2;\n    while remaining > 1 {\n        if remaining % divisor\
    \ == 0 {\n            prime_divisors.push(divisor);\n            remaining /=\
    \ divisor;\n        } else {\n            divisor += 1;\n        }\n    }\n  \
    \  prime_divisors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822433
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut res = Vec::new();\n    if n <= 1 {\n        return res;\n    }\n\
    \    let mut cur = n;\n    for i in 2.. {\n        if cur == 1 {\n           \
    \ break;\n        }\n        while cur % i == 0 {\n            res.push(i);\n\
    \            cur /= i;\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822433
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut factors = Vec::new();\n    let mut number = n;\n    let mut divider\
    \ = 2;\n    while number > 1 {\n        while number % divider == 0 {\n      \
    \      factors.push(divider);\n            number /= divider;\n        }\n   \
    \     divider += 1;\n    }\n    factors\n}\n\nfn main() {\n    let candidate =\
    \ factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822432
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \tlet mut primes = Vec::new();\n\tlet mut num = n;\n\tlet mut i = 2;\n\twhile\
    \ i * i <= num {\n\t\tif num % i == 0 {\n\t\t\tprimes.push(i);\n\t\t\tnum /= i;\n\
    \t\t} else {\n\t\t\ti += 1;\n\t\t}\n\t}\n\tif num > 1 {\n\t\tprimes.push(num);\n\
    \t}\n\tprimes\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822433
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut result = Vec::new();\n    let mut num = n;\n    while num % 2 ==\
    \ 0 {\n        result.push(2);\n        num /= 2;\n    }\n    let mut d = 3;\n\
    \    while d * d <= num {\n        while num % d == 0 {\n            result.push(d);\n\
    \            num /= d;\n        }\n        d += 2;\n    }\n    if num > 1 {\n\
    \        result.push(num);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822433
- exit_code: 1
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut remaining = n;\n    let mut result = Vec::new();\n    let mut i =\
    \ 2;\n    while remaining > 1 {\n        if is_prime(i) {\n            let mut\
    \ count = 0;\n            while remaining % i == 0 {\n                count +=\
    \ 1;\n                remaining /= i;\n            }\n            if count > 0\
    \ {\n                result.push(i);\n            }\n        }\n        i += 1;\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n --> /tmp/tmp_4dfhuzk.rs:9:12\n\
    \  |\n9 |         if is_prime(i) {\n  |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822433
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    // your code\n    let mut prime_factors: Vec<isize> = Vec::new();\n    let\
    \ mut n = n;\n    let mut d = 2;\n    while n > 1 {\n        while n % d == 0\
    \ {\n            prime_factors.push(d);\n            n /= d;\n        }\n    \
    \    d += 1;\n    }\n    prime_factors\n}\n\nfn main() {\n    let candidate =\
    \ factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822433
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let limit = (n as f64).sqrt() as isize + 1;\n    let mut primes = vec![];\n\
    \    for i in 2..limit {\n        if n % i == 0 {\n            primes.push(i);\n\
    \            primes.extend(factorize(n / i));\n            break;\n        }\n\
    \    }\n    if primes.is_empty() {\n        primes.push(n);\n    }\n    primes\n\
    }\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822433
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut p: Vec<isize> = Vec::new();\n    let mut number = n;\n    for i in\
    \ 2..number {\n        while number % i == 0 {\n            p.push(i);\n     \
    \       number /= i;\n        }\n    }\n    if number > 1 {\n        p.push(number);\n\
    \    }\n    p\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822433
- exit_code: 101
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    unimplemented!()\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp4tsoea1_.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822431
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut ans = Vec::new();\n    let mut num = n;\n    let mut factor = 2;\n\
    \    while num > 1 {\n        while num % factor == 0 {\n            ans.push(factor);\n\
    \            num /= factor;\n        }\n        factor += 1;\n    }\n    ans\n\
    }\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822433
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut res = Vec::new();\n    let mut n = n;\n    while n % 2 == 0 {\n \
    \       res.push(2);\n        n /= 2;\n    }\n    let mut factor = 3;\n    while\
    \ n > 1 {\n        while n % factor == 0 {\n            res.push(factor);\n  \
    \          n /= factor;\n        }\n        factor += 2;\n    }\n    res\n}\n\n\
    fn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822433
- exit_code: 1
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut res = Vec::new();\n    let mut num = n;\n    while num > 1 {\n  \
    \      let f = factor(num);\n        res.push(f);\n        num /= f;\n    }\n\
    \    res\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factor` in this scope\n --> /tmp/tmpe_g38zfn.rs:8:17\n\
    \  |\n8 |         let f = factor(num);\n  |                 ^^^^^^ not found in\
    \ this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822433
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut factors = Vec::new();\n    let mut num = n;\n    let mut divisor\
    \ = 2;\n    while num > 1 {\n        while num % divisor == 0 {\n            factors.push(divisor);\n\
    \            num /= divisor;\n        }\n        divisor += 1;\n    }\n    factors\n\
    }\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822433
- exit_code: 1
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let factor = 2;\n    let mut number = n;\n    let mut factors = Vec::new();\n\
    \    while number > 1 {\n        if number % factor == 0 {\n            factors.push(factor);\n\
    \            number /= factor;\n        } else {\n            factor += 1;\n \
    \       }\n    }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign twice to immutable variable `factor`\n  -->\
    \ /tmp/tmpmheml54f.rs:13:13\n   |\n5  |     let factor = 2;\n   |         ------\n\
    \   |         |\n   |         first assignment to `factor`\n   |         help:\
    \ consider making this binding mutable: `mut factor`\n...\n13 |             factor\
    \ += 1;\n   |             ^^^^^^^^^^^ cannot assign twice to immutable variable\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659822433
- exit_code: 101
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut n = n;\n    let mut arr = Vec::new();\n    for d in 2..=n {\n   \
    \     if n%d == 0 {\n            let mut cnt = 0;\n            while n%d == 0\
    \ {\n                n /= d;\n                cnt += 1;\n            }\n     \
    \       arr.push(d);\n            arr.push(cnt);\n        }\n    }\n    arr\n\
    }\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 1]`,\n right: `[2]`', /tmp/tmpjh9o2fhz.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822433
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    let mut to_return = Vec::new();\n    let mut temp = n;\n    let mut divisor\
    \ = 2;\n    while temp > 1 {\n        while temp % divisor == 0 {\n          \
    \  to_return.push(divisor);\n            temp /= divisor;\n        }\n       \
    \ divisor += 1;\n    }\n    to_return\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822433
- exit_code: 0
  program: "/// Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n/// Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n/// Input number should be\
    \ equal to the product of all factors\nfn factorize(n: isize) -> Vec<isize> {\n\
    \    if n == 1 {\n        return vec![1];\n    }\n    let mut n = n;\n    let\
    \ mut result = Vec::new();\n    let mut i = 2;\n    while i <= n {\n        if\
    \ n % i == 0 {\n            result.push(i);\n            n /= i;\n        } else\
    \ {\n            i += 1;\n        }\n    }\n    result\n}\n\nfn main() {\n   \
    \ let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822433
