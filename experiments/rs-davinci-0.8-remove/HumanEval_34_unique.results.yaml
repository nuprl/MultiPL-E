language: rs
name: HumanEval_34_unique
results:
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n  let mut v = l.clone();\n  v.sort();\n  v.dedup();\n  v\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 1
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    // Using a BTreeSet, inserting a new element will fail\
    \ if it already exists\n    let mut s = BTreeSet::new();\n    for x in l {\n \
    \       s.insert(x);\n    }\n    s.into_iter().collect()\n}\n\nfn main() {\n \
    \   let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `BTreeSet`\n -->\
    \ /tmp/tmp0iot27p6.rs:4:17\n  |\n4 |     let mut s = BTreeSet::new();\n  |   \
    \              ^^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::BTreeSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659822513
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut s = l.clone();\n    s.sort();\n    s.dedup();\n\
    \    s\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 101
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    // If l is empty, return empty list\n    if l.len() ==\
    \ 0 {\n        return vec![];\n    }\n\n    // If there is only one element, return\
    \ the element\n    if l.len() == 1 {\n        return l;\n    }\n\n    // Sort\
    \ the input list\n    let mut ll = l.clone();\n    ll.sort();\n\n    // Initialize\
    \ an output list with the first element of the sorted list\n    let mut out =\
    \ vec![ll[0]];\n\n    // Iterate over the remaining elements\n    for (i, e) in\
    \ ll.iter().enumerate() {\n        // If the element differs from the previous,\
    \ add it to the output list\n        if *e != ll[i - 1] {\n            out.push(*e);\n\
    \        }\n    }\n\n    // Return the output list\n    out\n}\n\nfn main() {\n\
    \    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmp1hvmpgzg.rs:23:21

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822513
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut u = l.clone();\n    u.sort();\n    u.dedup();\n\
    \    u\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 1
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().cloned().collect::<HashSet<isize>>().iter().cloned().collect::<Vec<isize>>()\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmp99297udd.rs:3:33\n\
    \  |\n3 |     l.iter().cloned().collect::<HashSet<isize>>().iter().cloned().collect::<Vec<isize>>()\n\
    \  |                                 ^^^^^^^ not found in this scope\n  |\nhelp:\
    \ consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659822513
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut v = Vec::new();\n    for i in l {\n        if !v.contains(&i)\
    \ {\n            v.push(i);\n        }\n    }\n    v.sort();\n    v\n}\n\nfn main()\
    \ {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut ll = l.clone();\n    ll.sort();\n    ll.dedup();\n\
    \    ll\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut v = l;\n    v.sort();\n    v.dedup();\n    v\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut res = l.clone();\n    res.sort();\n    res.dedup();\n\
    \    res\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 1
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut m = HashMap::new();\n    for e in l {\n       \
    \ m.insert(e, true);\n    }\n    let mut v = Vec::new();\n    for (k, _) in m\
    \ {\n        v.push(k);\n    }\n    v.sort();\n    v\n}\n\nfn main() {\n    let\
    \ candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]),\
    \ vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmpvaq8m89l.rs:3:17\n  |\n3 |     let mut m = HashMap::new();\n  |    \
    \             ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this\
    \ struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659822513
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n  let mut l: Vec<isize> = l.clone();\n  l.sort();\n  l.dedup();\n\
    \  l\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut sorted = l.clone();\n    sorted.sort();\n    sorted.dedup();\n\
    \    sorted\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 1
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().collect::<BTreeSet<_>>().into_iter().collect()\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `BTreeSet` in this scope\n --> /tmp/tmpord0lloh.rs:3:29\n\
    \  |\n3 |     l.into_iter().collect::<BTreeSet<_>>().into_iter().collect()\n \
    \ |                             ^^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::BTreeSet;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659822513
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut ret = l.clone();\n    ret.sort();\n    ret.dedup();\n\
    \    ret\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut l: Vec<isize> = l.clone();\n    l.sort();\n   \
    \ l.dedup();\n    l\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut ll = l.clone();\n    ll.sort();\n    ll.dedup();\n\
    \    ll\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut u = l.clone();\n    u.sort();\n    u.dedup();\n\
    \    u\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut u = l.clone();\n    u.sort();\n    u.dedup();\n\
    \    u\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut sorted = l.clone();\n    sorted.sort();\n    let\
    \ mut unique = Vec::new();\n    let mut last = None;\n    for s in sorted {\n\
    \        if last.is_none() || s != last.unwrap() {\n            unique.push(s);\n\
    \        }\n        last = Some(s);\n    }\n    unique\n}\n\nfn main() {\n   \
    \ let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut uniq: Vec<isize> = l.into_iter().collect();\n \
    \   uniq.sort();\n    uniq.dedup();\n    uniq\n}\n\nfn main() {\n    let candidate\
    \ = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0,\
    \ 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut vec = l;\n    vec.sort();\n    vec.dedup();\n \
    \   vec\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut a = l;\n    a.sort();\n    a.dedup();\n    a\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut v = l;\n    v.sort();\n    v.dedup();\n    v\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut res = l.clone();\n    res.sort();\n    res.dedup();\n\
    \    res\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in l {\n      \
    \  if !result.contains(&i) {\n            result.push(i);\n        }\n    }\n\
    \    result.sort();\n    result\n}\n\nfn main() {\n    let candidate = unique;\n\
    \    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5,\
    \ 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n\tlet mut sorted = l.clone();\n\tsorted.sort();\n\tlet mut\
    \ unique: Vec<isize> = Vec::new();\n\tfor e in sorted {\n\t\tif !unique.contains(&e)\
    \ {\n\t\t\tunique.push(e);\n\t\t}\n\t}\n\tunique\n}\n\nfn main() {\n    let candidate\
    \ = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0,\
    \ 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut l: Vec<isize> = l.into_iter().collect();\n    l.sort();\n\
    \    l.dedup();\n    l\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut u = vec![];\n    for e in l {\n        if !u.contains(&e)\
    \ {\n            u.push(e);\n        }\n    }\n    u.sort();\n    u\n}\n\nfn main()\
    \ {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut v = l;\n    v.sort();\n    v.dedup();\n    v\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut s = Vec::with_capacity(l.len());\n    for e in\
    \ l {\n        if !s.contains(&e) {\n            s.push(e);\n        }\n    }\n\
    \    s.sort();\n    s\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut x = l;\n    x.sort();\n    x.dedup();\n    x\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n\tlet mut res = Vec::new();\n\tfor i in l {\n\t\tif !res.contains(&i)\
    \ {\n\t\t\tres.push(i);\n\t\t}\n\t}\n\tres.sort();\n\tres\n}\n\nfn main() {\n\
    \    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822514
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut l2 = l.clone();\n    l2.sort();\n    let mut l3\
    \ = vec![];\n    if l2.len() > 0 {\n        l3.push(l2[0]);\n    }\n    for i\
    \ in 1..l2.len() {\n        if l2[i] != l2[i - 1] {\n            l3.push(l2[i]);\n\
    \        }\n    }\n    l3\n}\n\nfn main() {\n    let candidate = unique;\n   \
    \ assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9,\
    \ 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822514
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut l: Vec<isize> = l.into_iter().collect();\n    l.sort();\n\
    \    l.dedup();\n    l\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 1
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().collect::<HashSet<isize>>().into_iter().collect::<Vec<isize>>()\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpn744_vs_.rs:3:29\n\
    \  |\n3 |     l.into_iter().collect::<HashSet<isize>>().into_iter().collect::<Vec<isize>>()\n\
    \  |                             ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659822513
- exit_code: 1
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().collect::<HashSet<isize>>().into_iter().collect::<Vec<isize>>()\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpn744_vs_.rs:3:29\n\
    \  |\n3 |     l.into_iter().collect::<HashSet<isize>>().into_iter().collect::<Vec<isize>>()\n\
    \  |                             ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659822513
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut s = l.clone();\n    s.sort();\n    s.dedup();\n\
    \    s\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 1
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut set = BTreeSet::new();\n    for val in l {\n  \
    \      set.insert(val);\n    }\n    set.into_iter().collect()\n}\n\nfn main()\
    \ {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `BTreeSet`\n -->\
    \ /tmp/tmpid0kosef.rs:3:19\n  |\n3 |     let mut set = BTreeSet::new();\n  | \
    \                  ^^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::BTreeSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659822513
- exit_code: 101
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().fold(Vec::new(), |mut acc, x| {\n       \
    \ if !acc.contains(&x) {\n            acc.push(x);\n        }\n        acc\n \
    \   })\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, 2, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmp_dms9le1.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822514
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut u = l.clone();\n    u.sort();\n    u.dedup();\n\
    \    u\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut v = l;\n    v.sort();\n    v.dedup();\n    v\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut l: Vec<isize> = l.into_iter().collect();\n    l.sort();\n\
    \    l.dedup();\n    l\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut v = l;\n    v.sort();\n    v.dedup();\n    v\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 1
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut seen = HashSet::new();\n    l.into_iter().filter(|x|\
    \ seen.insert(*x)).collect()\n}\n\nfn main() {\n    let candidate = unique;\n\
    \    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5,\
    \ 9, 123]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpffug1fm8.rs:3:20\n  |\n3 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659822513
- exit_code: 1
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut m = BTreeMap::new();\n    for x in l {\n      \
    \  let entry = m.entry(x).or_insert(0);\n        *entry += 1;\n    }\n    m.into_iter().map(|(k,\
    \ _)| k).collect()\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `BTreeMap`\n -->\
    \ /tmp/tmpnyn2i0_v.rs:3:17\n  |\n3 |     let mut m = BTreeMap::new();\n  |   \
    \              ^^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::BTreeMap;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659822513
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut res = l.clone();\n    res.sort();\n    res.dedup();\n\
    \    res\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut s = l.clone();\n    s.sort();\n    s.dedup();\n\
    \    s\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 101
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut ret = Vec::new();\n    let mut i = 0;\n    while\
    \ i < l.len() {\n        ret.push(l[i]);\n        while i < l.len() && l[i] ==\
    \ ret[ret.len() - 1] {\n            i += 1;\n        }\n    }\n    ret\n}\n\n\
    fn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpiuvq7nca.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822514
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut sorted = l.clone();\n    sorted.sort();\n    sorted.dedup();\n\
    \    sorted\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut v = l;\n    v.sort();\n    v.dedup();\n    v\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut uniq = l.clone();\n    uniq.sort();\n    uniq.dedup();\n\
    \    uniq\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822514
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut sorted = l.clone();\n    sorted.sort();\n    sorted.dedup();\n\
    \    sorted\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 1
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut seen = HashSet::new();\n    let mut res = Vec::new();\n\
    \    for &item in l.iter() {\n        if seen.insert(item) {\n            res.push(item);\n\
    \        }\n    }\n    res.sort();\n    res\n}\n\nfn main() {\n    let candidate\
    \ = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0,\
    \ 2, 3, 5, 9, 123]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpbvbcyhaf.rs:3:20\n  |\n3 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659822513
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut u = Vec::new();\n    for i in l {\n        if !u.contains(&i)\
    \ {\n            u.push(i);\n        }\n    }\n    u.sort();\n    u\n}\n\nfn main()\
    \ {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822514
- exit_code: 1
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    // Return unique elements in a list\n    let mut h = HashSet::new();\n\
    \    for i in l {\n        h.insert(i);\n    }\n    let mut u: Vec<isize> = h.into_iter().collect();\n\
    \    u.sort();\n    u\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpyiqxyirs.rs:4:17\n  |\n4 |     let mut h = HashSet::new();\n  |    \
    \             ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this\
    \ struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659822513
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    use std::collections::HashSet;\n    let mut u = l.clone();\n\
    \    u.sort();\n    u.dedup();\n    u\n}\n\nfn main() {\n    let candidate = unique;\n\
    \    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5,\
    \ 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822514
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut ret = l.clone();\n    ret.sort();\n    ret.dedup();\n\
    \    ret\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut xs = l;\n    xs.sort();\n    xs.dedup();\n    xs\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822514
- exit_code: 1
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut seen = HashSet::new();\n    let mut uniq = Vec::new();\n\
    \    for x in l {\n        if seen.insert(x) {\n            uniq.push(x);\n  \
    \      }\n    }\n    uniq.sort();\n    uniq\n}\n\nfn main() {\n    let candidate\
    \ = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0,\
    \ 2, 3, 5, 9, 123]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpx_gy1g8_.rs:3:20\n  |\n3 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659822513
- exit_code: 1
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut set = HashSet::new();\n    for x in l {\n     \
    \   set.insert(x);\n    }\n    let mut v: Vec<isize> = set.into_iter().collect();\n\
    \    v.sort();\n    v\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpbyg9cd30.rs:3:19\n  |\n3 |     let mut set = HashSet::new();\n  |  \
    \                 ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659822513
- exit_code: 1
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().collect::<HashSet<isize>>().into_iter().collect::<Vec<isize>>()\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpn744_vs_.rs:3:29\n\
    \  |\n3 |     l.into_iter().collect::<HashSet<isize>>().into_iter().collect::<Vec<isize>>()\n\
    \  |                             ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659822513
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut v = l;\n    v.sort();\n    v.dedup();\n    v\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 1
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    // Convert to a set, which removes duplicates\n    let\
    \ s: HashSet<isize> = l.into_iter().collect();\n    // Convert to a vector, because\
    \ we want it to be sorted\n    let mut v: Vec<isize> = s.into_iter().collect();\n\
    \    // Sort\n    v.sort();\n    // Return\n    v\n}\n\nfn main() {\n    let candidate\
    \ = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0,\
    \ 2, 3, 5, 9, 123]);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpjx4zon2j.rs:4:12\n\
    \  |\n4 |     let s: HashSet<isize> = l.into_iter().collect();\n  |          \
    \  ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659822513
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut v = l;\n    v.sort();\n    v.dedup();\n    v\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 1
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut last = 0;\n \
    \   for e in l.iter().sorted() {\n        if *e != last {\n            result.push(*e);\n\
    \            last = *e;\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]),\
    \ vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted` found for struct `std::slice::Iter`\
    \ in the current scope\n --> /tmp/tmpibh2n5zl.rs:5:23\n  |\n5 |     for e in l.iter().sorted()\
    \ {\n  |                       ^^^^^^ method not found in `std::slice::Iter<'_,\
    \ isize>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659822514
- exit_code: 1
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut m = HashMap::new();\n    for e in l {\n       \
    \ m.insert(e, 0);\n    }\n    m.keys().map(|x| *x).collect()\n}\n\nfn main() {\n\
    \    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmpr_ldzfza.rs:3:17\n  |\n3 |     let mut m = HashMap::new();\n  |    \
    \             ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this\
    \ struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659822513
- exit_code: 101
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n  // TODO\n  l\n}\n\nfn main() {\n    let candidate = unique;\n\
    \    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5,\
    \ 9, 123]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, 5, 2, 3, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpcj2l8ga8.rs:9:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822514
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 1
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    if l.len() == 0 {\n        return Vec::new();\n    }\n\
    \    let mut h = BTreeSet::new();\n    let mut ret = Vec::new();\n    for x in\
    \ l {\n        if h.insert(x) {\n            ret.push(x);\n        }\n    }\n\
    \    ret\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `BTreeSet`\n -->\
    \ /tmp/tmpz4pmlgx9.rs:6:17\n  |\n6 |     let mut h = BTreeSet::new();\n  |   \
    \              ^^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::BTreeSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659822514
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 1
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut s = BTreeSet::new();\n    for i in l {\n      \
    \  s.insert(i);\n    }\n    s.into_iter().collect()\n}\n\nfn main() {\n    let\
    \ candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]),\
    \ vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `BTreeSet`\n -->\
    \ /tmp/tmpzh3f4y9i.rs:3:17\n  |\n3 |     let mut s = BTreeSet::new();\n  |   \
    \              ^^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::BTreeSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659822514
- exit_code: 1
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut m = HashMap::new();\n    for el in l {\n      \
    \  let e = m.entry(el).or_insert(0);\n        *e += 1;\n    }\n    let mut res:\
    \ Vec<isize> = m.iter().map(|(k,_)| *k).collect();\n    res.sort();\n    res\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmp7gdrw5do.rs:3:17\n  |\n3 |     let mut m = HashMap::new();\n  |    \
    \             ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this\
    \ struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659822514
- exit_code: 1
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut m = HashMap::new();\n    let mut v = Vec::new();\n\
    \    for k in l {\n        if m.contains_key(&k) {\n            continue;\n  \
    \      }\n        m.insert(k, true);\n        v.push(k);\n    }\n    v.sort();\n\
    \    v\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmptli8caal.rs:3:17\n  |\n3 |     let mut m = HashMap::new();\n  |    \
    \             ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this\
    \ struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659822514
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut s = l.clone();\n    s.sort();\n    s.dedup();\n\
    \    s\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut v = l;\n    v.sort();\n    v.dedup();\n    v\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut r = Vec::new();\n    for &i in l.iter() {\n   \
    \     if !r.contains(&i) {\n            r.push(i);\n        }\n    }\n    r.sort();\n\
    \    r\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822514
- exit_code: 1
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut m = HashMap::new();\n    for e in l {\n       \
    \ m.insert(e, true);\n    }\n    let mut s = HashSet::new();\n    for e in m.keys()\
    \ {\n        s.insert(*e);\n    }\n    let mut v: Vec<isize> = s.into_iter().collect();\n\
    \    v.sort();\n    v\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmp85nb5w37.rs:3:17\n  |\n3 |     let mut m = HashMap::new();\n  |    \
    \             ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this\
    \ struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp85nb5w37.rs:7:17\n\
    \  |\n7 |     let mut s = HashSet::new();\n  |                 ^^^^^^^ not found\
    \ in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n\
    \  |\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659822514
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut temp: Vec<isize> = Vec::new();\n    for i in l\
    \ {\n        if !temp.contains(&i) {\n            temp.push(i);\n        }\n \
    \   }\n    temp.sort();\n    temp\n}\n\nfn main() {\n    let candidate = unique;\n\
    \    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5,\
    \ 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822514
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut tmp = l;\n    tmp.sort();\n    tmp.dedup();\n \
    \   tmp\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822514
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut res = l.clone();\n    res.sort();\n    res.dedup();\n\
    \    res\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut ret = l.clone();\n    ret.sort();\n    ret.dedup();\n\
    \    ret\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut l: Vec<isize> = l.iter().cloned().collect();\n\
    \    l.sort();\n    l.dedup();\n    l\n}\n\nfn main() {\n    let candidate = unique;\n\
    \    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5,\
    \ 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822514
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut sorted = l.clone();\n    sorted.sort();\n    sorted.dedup();\n\
    \    sorted\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut m = l.clone();\n    m.sort();\n    let mut v =\
    \ Vec::new();\n    let mut i = 0;\n    while i < m.len() {\n        let n = m[i];\n\
    \        v.push(n);\n        while i < m.len() && m[i] == n {\n            i +=\
    \ 1;\n        }\n    }\n    v\n}\n\nfn main() {\n    let candidate = unique;\n\
    \    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5,\
    \ 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822514
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut uniques = l.clone();\n    uniques.sort();\n   \
    \ uniques.dedup();\n    uniques\n}\n\nfn main() {\n    let candidate = unique;\n\
    \    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5,\
    \ 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822514
- exit_code: 1
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut seen = HashSet::new();\n    let mut out = Vec::new();\n\
    \    for e in l {\n        if seen.insert(e) {\n            out.push(e);\n   \
    \     }\n    }\n    out.sort();\n    out\n}\n\nfn main() {\n    let candidate\
    \ = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0,\
    \ 2, 3, 5, 9, 123]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp85gh21_b.rs:3:20\n  |\n3 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659822514
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut v = l;\n    v.sort();\n    v.dedup();\n    v\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut s = l.clone();\n    s.sort();\n    s.dedup();\n\
    \    s\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 1
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut m = BTreeMap::new();\n    for x in l {\n      \
    \  *m.entry(x).or_insert(0) += 1;\n    }\n    m.into_iter().map(|(k,_)| k).collect()\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `BTreeMap`\n -->\
    \ /tmp/tmplv8vgbg3.rs:3:17\n  |\n3 |     let mut m = BTreeMap::new();\n  |   \
    \              ^^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::BTreeMap;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659822514
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    //Sorted list\n    let mut x = l.clone();\n    x.sort();\n\
    \    //Generate sorted unique values by repeating the first\n    //element and\
    \ then changing it whenever a new value is found\n    let mut z = Vec::new();\n\
    \    z.push(x[0]);\n    for i in x {\n        if i != z[z.len() - 1] {\n     \
    \       z.push(i);\n        }\n    }\n    z\n}\n\nfn main() {\n    let candidate\
    \ = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0,\
    \ 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822514
- exit_code: 1
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut m = HashMap::new();\n    for i in l {\n       \
    \ m.insert(i, 0);\n    }\n    m.keys().cloned().collect()\n}\n\nfn main() {\n\
    \    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmpwr_87g4j.rs:3:17\n  |\n3 |     let mut m = HashMap::new();\n  |    \
    \             ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this\
    \ struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659822514
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut uniq = Vec::new();\n    for x in l {\n        if\
    \ !uniq.contains(&x) {\n            uniq.push(x);\n        }\n    }\n    uniq.sort();\n\
    \    uniq\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822514
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut res = Vec::new();\n    for x in l {\n        if\
    \ res.contains(&x) {\n            continue;\n        }\n        res.push(x);\n\
    \    }\n    res.sort();\n    res\n}\n\nfn main() {\n    let candidate = unique;\n\
    \    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5,\
    \ 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822514
- exit_code: 1
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut h: HashSet<isize> = HashSet::new();\n    for item\
    \ in l {\n        h.insert(item);\n    }\n    let mut result: Vec<isize> = Vec::new();\n\
    \    for item in h {\n        result.push(item);\n    }\n    result.sort();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpahqsezdo.rs:3:16\n\
    \  |\n3 |     let mut h: HashSet<isize> = HashSet::new();\n  |               \
    \ ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n --> /tmp/tmpahqsezdo.rs:3:33\n  |\n3 |  \
    \   let mut h: HashSet<isize> = HashSet::new();\n  |                         \
    \        ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0412, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659822514
- exit_code: 1
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut hs = HashSet::new();\n    for n in l {\n      \
    \  hs.insert(n);\n    }\n    let mut v = hs.into_iter().collect::<Vec<isize>>();\n\
    \    v.sort();\n    v\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmprnp39o1z.rs:3:18\n  |\n3 |     let mut hs = HashSet::new();\n  |   \
    \               ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659822514
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut n = l.clone();\n    n.sort();\n    n.dedup();\n\
    \    n\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822514
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 1
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n  l.into_iter().collect::<BTreeSet<isize>>().into_iter().collect()\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `BTreeSet` in this scope\n --> /tmp/tmpu0bie7fz.rs:3:27\n\
    \  |\n3 |   l.into_iter().collect::<BTreeSet<isize>>().into_iter().collect()\n\
    \  |                           ^^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::BTreeSet;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659822514
- exit_code: 1
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut seen = HashSet::new();\n    let mut out = Vec::new();\n\
    \    for item in l {\n        if seen.insert(item) {\n            out.push(item);\n\
    \        }\n    }\n    out.sort();\n    out\n}\n\nfn main() {\n    let candidate\
    \ = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0,\
    \ 2, 3, 5, 9, 123]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp5wf70di7.rs:3:20\n  |\n3 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659822514
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut v = l;\n    v.sort();\n    v.dedup();\n    v\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 1
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut m = BTreeMap::new();\n    for x in l {\n      \
    \  let e = m.entry(x).or_insert(0);\n        *e += 1;\n    }\n    m.keys().cloned().collect()\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `BTreeMap`\n -->\
    \ /tmp/tmpybydehwc.rs:3:17\n  |\n3 |     let mut m = BTreeMap::new();\n  |   \
    \              ^^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::BTreeMap;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659822514
- exit_code: 1
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut m = HashMap::new();\n    for i in l {\n       \
    \ let e = m.entry(i).or_insert(0);\n        *e += 1;\n    }\n    let mut result\
    \ = m.into_iter().collect::<Vec<(isize, usize)>>();\n    result.sort_by(|a, b|\
    \ a.0.cmp(&b.0));\n    result.into_iter().map(|(a, _)| a).collect()\n}\n\nfn main()\
    \ {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmpu6_90xjs.rs:3:17\n  |\n3 |     let mut m = HashMap::new();\n  |    \
    \             ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this\
    \ struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659822514
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 1
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut m = BTreeMap::new();\n    for i in l {\n      \
    \  *m.entry(i).or_insert(0) += 1;\n    }\n    let mut res = Vec::new();\n    for\
    \ (k, v) in m {\n        res.push(k);\n    }\n    res\n}\n\nfn main() {\n    let\
    \ candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]),\
    \ vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `BTreeMap`\n -->\
    \ /tmp/tmpliuw4zb5.rs:3:17\n  |\n3 |     let mut m = BTreeMap::new();\n  |   \
    \              ^^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::BTreeMap;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659822514
- exit_code: 1
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut m = HashMap::new();\n    for e in l {\n       \
    \ m.insert(e, 0);\n    }\n    m.keys().map(|&x| x).collect()\n}\n\nfn main() {\n\
    \    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmpvj1r7hwo.rs:3:17\n  |\n3 |     let mut m = HashMap::new();\n  |    \
    \             ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this\
    \ struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659822514
- exit_code: 1
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n  l.into_iter().collect::<HashSet<isize>>().into_iter().collect::<Vec<isize>>()\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmp07a9ypi5.rs:3:27\n\
    \  |\n3 |   l.into_iter().collect::<HashSet<isize>>().into_iter().collect::<Vec<isize>>()\n\
    \  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659822514
- exit_code: 1
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().cloned().collect::<BTreeSet<isize>>().into_iter().collect()\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `BTreeSet` in this scope\n --> /tmp/tmphiqg4jgj.rs:3:33\n\
    \  |\n3 |     l.iter().cloned().collect::<BTreeSet<isize>>().into_iter().collect()\n\
    \  |                                 ^^^^^^^^ not found in this scope\n  |\nhelp:\
    \ consider importing this struct\n  |\n1 | use std::collections::BTreeSet;\n \
    \ |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659822514
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut tmp = l;\n    tmp.sort();\n    tmp.dedup();\n \
    \   tmp\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822514
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 1
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut s = HashSet::new();\n    for el in l {\n      \
    \  s.insert(el);\n    }\n    let mut v: Vec<isize> = s.iter().map(|e| *e).collect();\n\
    \    v.sort();\n    v\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpxd5b8o32.rs:3:17\n  |\n3 |     let mut s = HashSet::new();\n  |    \
    \             ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this\
    \ struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659822514
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut ret = l.clone();\n    ret.sort();\n    ret.dedup();\n\
    \    ret\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut u = l.clone();\n    u.sort();\n    u.dedup();\n\
    \    u\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut l: Vec<isize> = l.clone();\n    l.sort();\n   \
    \ l.dedup();\n    l\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 1
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().collect::<BTreeSet<_>>().into_iter().collect()\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `BTreeSet` in this scope\n --> /tmp/tmpord0lloh.rs:3:29\n\
    \  |\n3 |     l.into_iter().collect::<BTreeSet<_>>().into_iter().collect()\n \
    \ |                             ^^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::BTreeSet;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659822513
- exit_code: 1
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut s = BTreeSet::new();\n    for i in l {\n      \
    \  s.insert(i);\n    }\n    s.into_iter().collect()\n}\n\nfn main() {\n    let\
    \ candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]),\
    \ vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `BTreeSet`\n -->\
    \ /tmp/tmpzh3f4y9i.rs:3:17\n  |\n3 |     let mut s = BTreeSet::new();\n  |   \
    \              ^^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::BTreeSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659822514
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut res = l.clone();\n    res.sort();\n    res.dedup();\n\
    \    res\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut uniq = l.clone();\n    uniq.sort();\n    uniq.dedup();\n\
    \    uniq\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822514
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut s = l.clone();\n    s.sort();\n    s.dedup();\n\
    \    s\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 1
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().cloned().collect::<HashSet<isize>>().iter().cloned().collect::<Vec<isize>>()\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmp99297udd.rs:3:33\n\
    \  |\n3 |     l.iter().cloned().collect::<HashSet<isize>>().iter().cloned().collect::<Vec<isize>>()\n\
    \  |                                 ^^^^^^^ not found in this scope\n  |\nhelp:\
    \ consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659822513
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = l.clone();\n    result.sort();\n    result.dedup();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822514
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut u = l.clone();\n    u.sort();\n    u.dedup();\n\
    \    u\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 1
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut s = BTreeSet::new();\n    for x in l {\n      \
    \  s.insert(x);\n    }\n    s.into_iter().collect()\n}\n\nfn main() {\n    let\
    \ candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]),\
    \ vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `BTreeSet`\n -->\
    \ /tmp/tmpjz0glql1.rs:3:17\n  |\n3 |     let mut s = BTreeSet::new();\n  |   \
    \              ^^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::BTreeSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659822514
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut l: Vec<isize> = l.iter().cloned().collect();\n\
    \    l.sort();\n    l.dedup();\n    l\n}\n\nfn main() {\n    let candidate = unique;\n\
    \    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5,\
    \ 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822514
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut tmp = l;\n    tmp.sort();\n    tmp.dedup();\n \
    \   tmp\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822514
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut m = l.clone();\n    m.sort();\n    let mut u =\
    \ Vec::new();\n    let mut i = 0;\n    while i < m.len() {\n        u.push(m[i]);\n\
    \        while i < m.len() && m[i] == u[u.len() - 1] {\n            i += 1;\n\
    \        }\n    }\n    u\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822514
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut res = l.clone();\n    res.sort();\n    res.dedup();\n\
    \    res\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut v = l;\n    v.sort();\n    v.dedup();\n    v\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut l: Vec<isize> = l.into_iter().collect();\n    l.sort();\n\
    \    l.dedup();\n    l\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut temp = l;\n    temp.sort();\n    temp.dedup();\n\
    \    temp\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822514
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut v = l;\n    v.sort();\n    v.dedup();\n    v\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut xs = l;\n    xs.sort();\n    xs.dedup();\n    xs\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822514
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 101
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().fold(Vec::new(), |mut acc, v| {\n       \
    \ if !acc.contains(&v) {\n            acc.push(v);\n        }\n        acc\n \
    \   })\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, 2, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpvyr8z16v.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822514
- exit_code: 1
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut prev = 0;\n    let mut res = Vec::new();\n    for\
    \ x in l.iter().sorted() {\n        if *x != prev {\n            res.push(*x);\n\
    \            prev = *x;\n        }\n    }\n    res\n}\n\nfn main() {\n    let\
    \ candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]),\
    \ vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted` found for struct `std::slice::Iter`\
    \ in the current scope\n --> /tmp/tmpsjp9vvb1.rs:5:23\n  |\n5 |     for x in l.iter().sorted()\
    \ {\n  |                       ^^^^^^ method not found in `std::slice::Iter<'_,\
    \ isize>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659822514
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut tmp = l;\n    tmp.sort();\n    tmp.dedup();\n \
    \   tmp\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822514
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut l2 = l.clone();\n    l2.sort();\n    l2.dedup();\n\
    \    l2\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822514
- exit_code: 1
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().fold(HashSet::new(), |mut s, x| {\n     \
    \   s.insert(x);\n        s\n    }).into_iter().collect()\n}\n\nfn main() {\n\
    \    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpum7ljp1h.rs:3:24\n  |\n3 |     l.into_iter().fold(HashSet::new(), |mut\
    \ s, x| {\n  |                        ^^^^^^^ not found in this scope\n  |\nhelp:\
    \ consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659822514
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut v = l;\n    v.sort();\n    v.dedup();\n    v\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 1
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().collect::<HashSet<isize>>().into_iter().collect::<Vec<isize>>()\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpn744_vs_.rs:3:29\n\
    \  |\n3 |     l.into_iter().collect::<HashSet<isize>>().into_iter().collect::<Vec<isize>>()\n\
    \  |                             ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659822513
- exit_code: 1
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut s = HashSet::new();\n    l.into_iter().filter(|x|\
    \ s.insert(*x)).collect()\n}\n\nfn main() {\n    let candidate = unique;\n   \
    \ assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9,\
    \ 123]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpp5ep22ej.rs:3:17\n  |\n3 |     let mut s = HashSet::new();\n  |    \
    \             ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this\
    \ struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659822514
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut uniq: Vec<isize> = l.iter().cloned().collect();\n\
    \    uniq.sort();\n    uniq.dedup();\n    uniq\n}\n\nfn main() {\n    let candidate\
    \ = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0,\
    \ 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822514
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = l.clone();\n    result.sort();\n    result.dedup();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822514
- exit_code: 1
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().unique().collect()\n}\n\nfn main() {\n  \
    \  let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `unique` found for struct `std::vec::IntoIter`\
    \ in the current scope\n --> /tmp/tmpo2exmxc9.rs:3:19\n  |\n3 |     l.into_iter().unique().collect()\n\
    \  |                   ^^^^^^ method not found in `std::vec::IntoIter<isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659822514
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut x = l;\n    x.sort();\n    x.dedup();\n    x\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut sorted = l.clone();\n    sorted.sort();\n    sorted.dedup();\n\
    \    sorted\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut v = l;\n    v.sort();\n    v.dedup();\n    v\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 1
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut s = HashSet::new();\n    for item in l {\n    \
    \    s.insert(item);\n    }\n    let mut res: Vec<isize> = s.into_iter().collect();\n\
    \    res.sort();\n    res\n}\n\nfn main() {\n    let candidate = unique;\n   \
    \ assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9,\
    \ 123]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp93qnwfxb.rs:3:17\n  |\n3 |     let mut s = HashSet::new();\n  |    \
    \             ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this\
    \ struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659822514
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut u = Vec::new();\n    for e in l {\n        if !u.contains(&e)\
    \ {\n            u.push(e);\n        }\n    }\n    u.sort();\n    u\n}\n\nfn main()\
    \ {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822514
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 1
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut m = HashMap::new();\n    for i in l {\n       \
    \ m.insert(i, true);\n    }\n    let mut keys = m.keys().collect::<Vec<_>>();\n\
    \    keys.sort();\n    keys.to_vec()\n}\n\nfn main() {\n    let candidate = unique;\n\
    \    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5,\
    \ 9, 123]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmp944igbj3.rs:3:17\n  |\n3 |     let mut m = HashMap::new();\n  |    \
    \             ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this\
    \ struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659822514
- exit_code: 1
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut set = BTreeSet::new();\n    for i in l {\n    \
    \    set.insert(i);\n    }\n    let mut result = Vec::new();\n    for i in set\
    \ {\n        result.push(i);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0,\
    \ 2, 3, 5, 9, 123]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `BTreeSet`\n -->\
    \ /tmp/tmpg72pca48.rs:3:19\n  |\n3 |     let mut set = BTreeSet::new();\n  | \
    \                  ^^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::BTreeSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659822514
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut s = l.clone();\n    s.sort();\n    s.dedup();\n\
    \    s\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 1
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut m = HashMap::new();\n    for x in l {\n       \
    \ *m.entry(x).or_insert(0) += 1;\n    }\n    let mut n = Vec::new();\n    for\
    \ x in m.keys() {\n        n.push(*x);\n    }\n    n.sort();\n    n\n}\n\nfn main()\
    \ {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmppnmmcjue.rs:3:17\n  |\n3 |     let mut m = HashMap::new();\n  |    \
    \             ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this\
    \ struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659822514
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut s = l.clone();\n    s.sort();\n    s.dedup();\n\
    \    s\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut u = l.clone();\n    u.sort();\n    u.dedup();\n\
    \    u\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut u = l.clone();\n    u.sort();\n    u.dedup();\n\
    \    u\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 1
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut m = HashMap::new();\n    for n in l {\n       \
    \ *m.entry(n).or_insert(0) += 1;\n    }\n    let mut i = m.into_iter().collect::<Vec<(isize,\
    \ i32)>>();\n    i.sort_by(|a, b| a.0.cmp(&b.0));\n    let mut r = vec![];\n \
    \   for (n, c) in i {\n        if c == 1 {\n            r.push(n);\n        }\n\
    \    }\n    r\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmpwtqdeefm.rs:3:17\n  |\n3 |     let mut m = HashMap::new();\n  |    \
    \             ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this\
    \ struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659822514
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut v = l;\n    v.sort();\n    v.dedup();\n    v\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut l = l;\n    l.sort();\n    l.dedup();\n    l\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 1
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().cloned().collect::<BTreeSet<isize>>().into_iter().collect()\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `BTreeSet` in this scope\n --> /tmp/tmphiqg4jgj.rs:3:33\n\
    \  |\n3 |     l.iter().cloned().collect::<BTreeSet<isize>>().into_iter().collect()\n\
    \  |                                 ^^^^^^^^ not found in this scope\n  |\nhelp:\
    \ consider importing this struct\n  |\n1 | use std::collections::BTreeSet;\n \
    \ |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659822514
- exit_code: 1
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().cloned().collect::<BTreeSet<isize>>().into_iter().collect()\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `BTreeSet` in this scope\n --> /tmp/tmphiqg4jgj.rs:3:33\n\
    \  |\n3 |     l.iter().cloned().collect::<BTreeSet<isize>>().into_iter().collect()\n\
    \  |                                 ^^^^^^^^ not found in this scope\n  |\nhelp:\
    \ consider importing this struct\n  |\n1 | use std::collections::BTreeSet;\n \
    \ |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659822514
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut u = Vec::new();\n    for x in l {\n        if !u.contains(&x)\
    \ {\n            u.push(x);\n        }\n    }\n    u.sort();\n    u\n}\n\nfn main()\
    \ {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822514
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut x = l;\n    x.sort();\n    x.dedup();\n    x\n\
    }\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
- exit_code: 0
  program: "/// Return sorted unique elements in a list\nfn unique(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut l: Vec<isize> = l.into_iter().collect();\n    l.sort();\n\
    \    l.dedup();\n    l\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822513
