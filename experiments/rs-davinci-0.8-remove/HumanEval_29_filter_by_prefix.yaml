name: HumanEval_29_filter_by_prefix
language: rs
prompt: "/// Filter an input list of strings only for ones that start with a given\
  \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
  \ {\n"
tests: "}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
  \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
  xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
  ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
  xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
completions: ["    let mut filtered_list = Vec::new();\n    for string in strings\
    \ {\n        if string.starts_with(&prefix) {\n            filtered_list.push(string);\n\
    \        }\n    }\n    filtered_list", '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()',
  "    let mut res = Vec::new();\n    for s in strings {\n        if s.starts_with(&prefix)\
    \ {\n            res.push(s);\n        }\n    }\n    res", '    strings.into_iter().filter(|s|
    s.starts_with(&prefix)).collect()', '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()',
  "    let mut ret = Vec::new();\n    for s in strings {\n        if s.starts_with(&prefix)\
    \ {\n            ret.push(s);\n        }\n    }\n    ret", '    strings.into_iter().filter(|s|
    s.starts_with(&prefix)).collect()', '    strings.into_iter().filter(|string| string.starts_with(&prefix)).collect()',
  '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()', '    strings.into_iter().filter(|s|
    s.starts_with(&prefix)).collect()', "    let prefix_length = prefix.len();\n \
    \   strings\n        .into_iter()\n        .filter(|s| s.starts_with(&prefix))\n\
    \        .map(|s| s[prefix_length..].to_string())\n        .collect()", "    let\
    \ mut filtered = Vec::new();\n    for string in strings {\n        if string.starts_with(&prefix)\
    \ {\n            filtered.push(string);\n        }\n    }\n    filtered", "  \
    \  let mut results = Vec::new();\n    for string in strings {\n        if string.starts_with(&prefix)\
    \ {\n            results.push(string);\n        }\n    }\n    results", '    strings.into_iter().filter(|string|
    string.starts_with(&prefix)).collect()', "    let mut matching_strings = Vec::new();\n\
    \    for string in strings {\n        if string.starts_with(&prefix) {\n     \
    \       matching_strings.push(string);\n        }\n    }\n    matching_strings",
  "    let mut filtered = Vec::new();\n    for string in strings {\n        if string.starts_with(&prefix)\
    \ {\n            filtered.push(string)\n        }\n    }\n    filtered", "   \
    \ let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(&prefix)\
    \ {\n            result.push(s);\n        }\n    }\n    result", '    return strings.into_iter().filter(|str|
    str.starts_with(&prefix)).collect();', "    let prefix_len = prefix.len();\n \
    \   strings\n        .into_iter()\n        .filter(|string| string.starts_with(&prefix))\n\
    \        .map(|string| string[prefix_len..].to_string())\n        .collect()",
  '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()', '    return
    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect();', '    strings.into_iter().filter(|string|
    string.starts_with(&prefix)).collect()', '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()',
  "    let mut rv = Vec::new();\n    for s in strings {\n        if !s.starts_with(&prefix)\
    \ {\n            continue;\n        }\n        rv.push(s);\n    }\n    rv", " \
    \   let mut res = Vec::new();\n    for s in strings {\n        if s.starts_with(&prefix)\
    \ {\n            res.push(s)\n        }\n    }\n    res", '    strings.into_iter().filter(|string|
    string.starts_with(&prefix)).collect()', "    let mut filtered = Vec::new();\n\
    \    for s in strings {\n        if s.starts_with(&prefix) {\n            filtered.push(s);\n\
    \        }\n    }\n    filtered", '    return strings.into_iter().filter(|s| s.starts_with(&prefix)).collect::<Vec<String>>();',
  "    let mut result = Vec::new();\n    for i in 0..strings.len() {\n        if strings[i].starts_with(&prefix)\
    \ {\n            result.push(strings[i].clone());\n        }\n    }\n    result",
  '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()', "    let\
    \ mut result = Vec::new();\n    for string in strings {\n        if string.starts_with(&prefix)\
    \ {\n            result.push(string);\n        }\n    }\n    result", '    strings.into_iter().filter(|s|
    s.starts_with(&prefix)).collect()', "    let filtered: Vec<String> = strings\n\
    \        .into_iter()\n        .filter(|s| s.starts_with(&prefix))\n        .collect();\n\
    \    filtered", "    let mut result = Vec::new();\n    for s in strings {\n  \
    \      if s.starts_with(&prefix) {\n            result.push(s);\n        }\n \
    \   }\n    result", '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()',
  "    let mut result = Vec::new();\n    for string in strings {\n        if string.starts_with(&prefix)\
    \ {\n            result.push(string);\n        }\n    }\n    result", '    strings.into_iter().filter(|s|
    s.starts_with(&prefix)).collect()', '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()',
  '    strings.into_iter().filter(|string| string.starts_with(&prefix)).collect()',
  "    let mut out = Vec::new();\n    for s in strings {\n        if s.starts_with(&prefix)\
    \ {\n            out.push(s);\n        }\n    }\n    out", "    let mut filtered\
    \ = Vec::new();\n    for s in strings {\n        if s.starts_with(&prefix) {\n\
    \            filtered.push(s);\n        }\n    }\n    filtered", '    strings.into_iter().filter(|s|
    s.starts_with(&prefix)).collect()', "    let mut result = Vec::new();\n    for\
    \ string in strings {\n        if string.starts_with(&prefix) {\n            result.push(string);\n\
    \        }\n    }\n    result", "    let len = prefix.len();\n    strings\n  \
    \      .into_iter()\n        .filter(|x| x.len() >= len && x[..len] == prefix)\n\
    \        .collect()", '    strings.into_iter().filter(|string| string.starts_with(&prefix)).collect()',
  '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()', '    strings.into_iter().filter(|s|
    s.starts_with(&prefix)).collect()', '    strings.into_iter().filter(|string| string.starts_with(&prefix)).collect()',
  '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()', '    strings.into_iter().filter(|s|
    s.starts_with(&prefix)).collect()', "    let mut results = Vec::new();\n    for\
    \ string in strings {\n        if string.starts_with(&prefix) {\n            results.push(string);\n\
    \        }\n    }\n    results", '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()',
  '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()', '    strings.into_iter().filter(|s|
    s.starts_with(&prefix)).collect()', '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()',
  '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()', '    strings.into_iter().filter(|x|
    x.starts_with(&prefix)).collect()', "    let mut filtered = Vec::new();\n    for\
    \ s in strings {\n        if s.starts_with(&prefix) {\n            filtered.push(s);\n\
    \        }\n    }\n    filtered", '    strings.into_iter().filter(|string| string.starts_with(&prefix)).collect()',
  '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()', '  strings.into_iter().filter(|string|
    string.starts_with(&prefix)).collect()', '    strings.into_iter().filter(|string|
    string.starts_with(&prefix)).collect()', "    let mut filtered_strings = Vec::new();\n\
    \    for string in strings {\n        if string.starts_with(&prefix) {\n     \
    \       filtered_strings.push(string);\n        }\n    }\n    filtered_strings",
  "    let mut filtered_strings = Vec::new();\n    for string in strings {\n     \
    \   if string.starts_with(&prefix) {\n            filtered_strings.push(string)\n\
    \        }\n    }\n    filtered_strings", "    let mut result = Vec::new();\n\
    \    for s in strings {\n        if s.starts_with(&prefix) {\n            result.push(s);\n\
    \        }\n    }\n    result", "    let mut strings_filtered = Vec::new();\n\
    \    for s in strings {\n        if s.starts_with(&prefix) {\n            strings_filtered.push(s);\n\
    \        }\n    }\n    strings_filtered", "    let mut result = Vec::new();\n\
    \    for s in strings {\n        if s.starts_with(&prefix) {\n            result.push(s);\n\
    \        }\n    }\n    result", "    let mut prefix_vec = Vec::new();\n    for\
    \ string in strings {\n        if string.starts_with(&prefix) {\n            prefix_vec.push(string);\n\
    \        }\n    }\n    prefix_vec", '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()',
  '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()', '    strings.into_iter().filter(|s|
    s.starts_with(&prefix)).collect()', "    let filtered: Vec<String> = strings\n\
    \        .into_iter()\n        .filter(|s| s.starts_with(&prefix))\n        .collect();\n\
    \    filtered", "    let l = prefix.len();\n    strings.into_iter().filter(|string|\
    \ {\n        string.chars().take(l).collect::<String>() == prefix\n    }).collect()",
  '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()', '    strings.into_iter().filter(|e|
    e.starts_with(&prefix)).collect()', '    return strings.into_iter().filter(|string|
    string.starts_with(&prefix)).collect();', '    strings.into_iter().filter(|string|
    string.starts_with(&prefix)).collect()', '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()',
  '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()', "    let\
    \ mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(&prefix)\
    \ {\n            result.push(s);\n        }\n    }\n    result", '    strings.into_iter().filter(|string|
    string.starts_with(&prefix)).collect()', '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()',
  '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()', '    strings.into_iter().filter(|s|
    s.starts_with(&prefix)).collect()', '  strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()',
  '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()', '    strings.into_iter().filter(|s|
    s.starts_with(&prefix)).collect()', '    return strings.into_iter().filter(|string|
    string.starts_with(&prefix)).collect();', '    strings.into_iter().filter(|x|
    x.starts_with(&prefix)).collect()', "    let mut result = Vec::new();\n    for\
    \ s in strings {\n        if s.starts_with(&prefix) {\n            result.push(s);\n\
    \        }\n    }\n    result", '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()',
  '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()', "    let\
    \ mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(&prefix)\
    \ {\n            result.push(s);\n        }\n    }\n    result", "    let mut\
    \ out = Vec::new();\n    for s in strings {\n        if s.starts_with(&prefix)\
    \ {\n            out.push(s);\n        }\n    }\n    out", '    strings.into_iter().filter(|s|
    s.starts_with(&prefix)).collect()', "    let mut filtered = Vec::new();\n    for\
    \ s in strings {\n        if s.starts_with(&prefix) {\n            filtered.push(s);\n\
    \        }\n    }\n    filtered", '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()',
  "    let mut res = Vec::new();\n    for s in strings {\n        if s.starts_with(&prefix)\
    \ {\n            res.push(s);\n        }\n    }\n    res", '    strings.into_iter().filter(|string|
    string.starts_with(&prefix)).collect()', '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()',
  '    strings.into_iter().filter(|candidate| candidate.starts_with(&prefix)).collect()',
  '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()', '    strings.into_iter().filter(|s|
    s.starts_with(&prefix)).collect()', '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()',
  "    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(&prefix)\
    \ {\n            result.push(s)\n        }\n    }\n    result", '    strings.into_iter().filter(|s|
    s.starts_with(&prefix)).collect()', '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()',
  '    strings.into_iter().filter(|x| x.starts_with(&prefix)).collect()', "    let\
    \ prefix_len = prefix.len();\n    strings\n        .into_iter()\n        .filter(|s|\
    \ s.starts_with(&prefix))\n        .map(|s| s[prefix_len..].to_string())\n   \
    \     .collect()", '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()',
  "    let mut v = Vec::new();\n    for s in strings {\n        if s.starts_with(&prefix)\
    \ {\n            v.push(s);\n        }\n    }\n    v", "    let mut res = Vec::new();\n\
    \    for s in strings {\n        if s.starts_with(&prefix) {\n            res.push(s);\n\
    \        }\n    }\n    res", '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()',
  '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()', '    strings.into_iter().filter(|s|
    s.starts_with(&prefix)).collect()', '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()',
  '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()', '    strings.into_iter().filter(|string|
    string.starts_with(&prefix)).collect()', "    let mut result = Vec::new();\n \
    \   for s in strings {\n        if s.starts_with(&prefix) {\n            result.push(s);\n\
    \        }\n    }\n    result", '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()',
  '    strings.into_iter().filter(|string| string.starts_with(&prefix)).collect()',
  '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()', '    strings.into_iter().filter(|s|
    s.starts_with(&prefix)).collect()', '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()',
  "    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(&prefix)\
    \ {\n            result.push(s);\n        }\n    }\n    result", "    let prefix_len\
    \ = prefix.len();\n    strings\n        .into_iter()\n        .filter(|word| word.starts_with(&prefix))\n\
    \        .map(|word| word[prefix_len..].to_string())\n        .collect()", '    strings.into_iter().filter(|s|
    s.starts_with(&prefix)).collect()', '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()',
  "    let mut ret = Vec::new();\n    for s in strings {\n        if s.starts_with(&prefix)\
    \ {\n            ret.push(s);\n        }\n    }\n    ret", "    let mut new_vec\
    \ = Vec::new();\n    for s in strings {\n        if s.starts_with(&prefix) {\n\
    \            new_vec.push(s);\n        }\n    }\n    new_vec", '    return strings.into_iter().filter(|s|
    s.starts_with(&prefix)).collect();', '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()',
  '    strings.into_iter().filter(|string| string.starts_with(&prefix)).collect()',
  '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()', '    strings.into_iter().filter(|s|
    s.starts_with(&prefix)).collect()', '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()',
  '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()', '    strings.into_iter().filter(|s|
    s.starts_with(&prefix)).collect()', '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()',
  '    return strings.into_iter().filter(|s| s.starts_with(&prefix)).collect();',
  '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()', '    strings.into_iter().filter(|s|
    s.starts_with(&prefix)).collect()', '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()',
  "    let prefix_regex = Regex::new(&format!(\"^{}\", prefix)).unwrap();\n    strings\n\
    \        .into_iter()\n        .filter(|string| prefix_regex.is_match(string))\n\
    \        .collect()", "    let mut filtered = Vec::new();\n    for s in strings\
    \ {\n        if s.starts_with(&prefix) {\n            filtered.push(s);\n    \
    \    }\n    }\n    filtered", "    let mut result = Vec::new();\n    for s in\
    \ strings {\n        if s.starts_with(&prefix) {\n            result.push(s);\n\
    \        }\n    }\n    result", "    // Unimplemented!\n    unimplemented!()",
  '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()', "    let\
    \ mut filtered_strings = Vec::new();\n    for string in strings {\n        if\
    \ string.starts_with(&prefix) {\n            filtered_strings.push(string);\n\
    \        }\n    }\n    filtered_strings", '    strings.into_iter().filter(|s|
    s.starts_with(&prefix)).collect()', '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()',
  "    let mut ret = Vec::new();\n    for string in strings {\n        if string.starts_with(&prefix)\
    \ {\n            ret.push(string);\n        }\n    }\n    ret", '    strings.into_iter().filter(|s|
    s.starts_with(&prefix)).collect()', "    let filtered = strings.into_iter().filter(|str|\
    \ str.starts_with(&prefix)).collect();\n    filtered", '    strings.into_iter().filter(|string|
    string.starts_with(&prefix)).collect()', "    let mut filtered_strings = Vec::new();\n\
    \    for s in strings {\n        if s.starts_with(&prefix) {\n            filtered_strings.push(s);\n\
    \        }\n    }\n    filtered_strings", '    strings.into_iter().filter(|s|
    s.starts_with(&prefix)).collect()', "    let mut result = Vec::new();\n    for\
    \ s in strings {\n        if s.starts_with(&prefix) {\n            result.push(s);\n\
    \        }\n    }\n    result", '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()',
  "    let mut result = Vec::new();\n    for string in strings {\n        if string.starts_with(&prefix)\
    \ {\n            result.push(string);\n        }\n    }\n    result", '    strings.into_iter().filter(|v|
    v.starts_with(&prefix)).collect()', '    strings.into_iter().filter(|string| string.starts_with(&prefix)).collect()',
  '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()', "    let\
    \ prefix_length = prefix.len();\n    return strings.into_iter().filter(|x| x.len()\
    \ >= prefix_length && &x[0..prefix_length] == prefix).collect();", '    strings.into_iter().filter(|s|
    s.starts_with(&prefix)).collect()', '    strings.into_iter().filter(|x| x.starts_with(&prefix)).collect()',
  "    let mut filtered = Vec::new();\n    for word in strings {\n        if word.starts_with(&prefix)\
    \ {\n            filtered.push(word);\n        }\n    }\n    filtered", '    strings.into_iter().filter(|string|
    string.starts_with(&prefix)).collect()', "    let mut result = Vec::new();\n \
    \   for string in strings {\n        if string.starts_with(&prefix) {\n      \
    \      result.push(string);\n        }\n    }\n    result", "    let mut result\
    \ = Vec::new();\n    for candidate in strings {\n        if candidate.starts_with(&prefix)\
    \ {\n            result.push(candidate);\n        }\n    }\n    result", '    return
    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect();', '    strings.into_iter().filter(|s|
    s.starts_with(&prefix)).collect()', '    strings.into_iter().filter(|string| string.starts_with(&prefix)).collect()',
  "    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(&prefix)\
    \ {\n            result.push(s)\n        }\n    }\n    result", '    strings.into_iter().filter(|s|
    s.starts_with(&prefix)).collect()', '    strings.into_iter().filter(|name| name.starts_with(&prefix)).collect()',
  "    let mut res = Vec::new();\n    for string in strings {\n        if string.starts_with(&prefix)\
    \ {\n            res.push(string);\n        }\n    }\n    res", '    strings.into_iter().filter(|v|
    v.starts_with(&prefix)).collect()', '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()',
  '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()', "    let\
    \ mut result = Vec::new();\n    for string in strings {\n        if string.starts_with(&prefix)\
    \ {\n            result.push(string);\n        }\n    }\n    result", '    strings.into_iter().filter(|string|
    string.starts_with(&prefix)).collect()', "    let mut filtered = Vec::new();\n\
    \    for item in strings {\n        if item.starts_with(&prefix) {\n         \
    \   filtered.push(item);\n        }\n    }\n    filtered", '    strings.into_iter().filter(|s|
    s.starts_with(&prefix)).collect()', '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()',
  "    let p = prefix.clone();\n    let mut out: Vec<String> = Vec::new();\n    for\
    \ s in strings {\n        if s.starts_with(&p) {\n            out.push(s);\n \
    \       }\n    }\n    out", '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()',
  "\tlet mut matches = Vec::new();\n\tfor s in strings {\n\t\tif s.starts_with(&prefix)\
    \ {\n\t\t\tmatches.push(s);\n\t\t}\n\t}\n\tmatches", "    let mut filtered_strings\
    \ = Vec::new();\n    for current_string in strings {\n        if current_string.starts_with(&prefix)\
    \ {\n            filtered_strings.push(current_string);\n        }\n    }\n  \
    \  filtered_strings", "\tlet mut result = Vec::new();\n\tfor string in strings\
    \ {\n\t\tif string.starts_with(&prefix) {\n\t\t\tresult.push(string);\n\t\t}\n\
    \t}\n\tresult", '    strings.into_iter().filter(|str| str.starts_with(&prefix)).collect()',
  '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()', "    //\
    \ The filter_map method applies the given closure to each item in the list, and\n\
    \    // returns an iterator of all the results. Once we have the iterator, we\
    \ use the\n    // collect method to turn it into a Vec.\n    //\n    // We use\
    \ filter_map, because we need to filter out any strings that the closure\n   \
    \ // returns None, which would happen if the string didn't start with the given\n\
    \    // prefix.\n    strings.into_iter().filter_map(|string| {\n        if string.starts_with(&prefix)\
    \ {\n            Some(string)\n        } else {\n            None\n        }\n\
    \    }).collect()", '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()',
  "    let prefix_length = prefix.len();\n    strings\n        .into_iter()\n    \
    \    .filter(|s| s.len() >= prefix_length && s[..prefix_length] == prefix)\n \
    \       .collect()", '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()',
  '    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()', '    strings.into_iter().filter(|s|
    s.starts_with(&prefix)).collect()', "    let mut result = Vec::new();\n    for\
    \ s in strings {\n        if s.starts_with(&prefix) {\n            result.push(s);\n\
    \        }\n    }\n    result", "    let mut list = Vec::new();\n    for s in\
    \ strings {\n        if s.starts_with(&prefix) {\n            list.push(s);\n\
    \        }\n    }\n    list"]
stop_tokens:
- "\n}"
