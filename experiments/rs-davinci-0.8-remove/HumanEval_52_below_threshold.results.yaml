language: rs
name: HumanEval_52_below_threshold
results:
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    l.iter().fold(true,\
    \ |acc, x| acc && *x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 101
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    for &n in &l {\n  \
    \      if n > t {\n            return false;\n        }\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpk2xcinjw.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    l.iter().all(|x| *x\
    \ < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    l.iter().all(|&x| x\
    \ < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    l.iter().all(|x| x\
    \ < &t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n  l.iter().all(|x| x <\
    \ &t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 101
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    for &x in &l {\n  \
    \      if x > t {\n            return false;\n        }\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmppvw4868r.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    l.iter().all(|&x| x\
    \ < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    l.iter().map(|i| i\
    \ < &t).all(|b| b)\n}\n\nfn main() {\n    let candidate = below_threshold;\n \
    \   assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    for n in l {\n    \
    \    if n >= t {\n            return false;\n        }\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    for n in l {\n    \
    \    if n >= t {\n            return false;\n        }\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 101
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    for i in l {\n    \
    \    if i > t {\n            return false;\n        }\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpgsc2j8y8.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    for n in l {\n    \
    \    if n >= t {\n            return false;\n        }\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    l.iter().all(|&x| x\
    \ < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    for i in &l {\n   \
    \     if *i >= t {\n            return false;\n        }\n    }\n    true\n}\n\
    \nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    for x in l {\n    \
    \    if x >= t {\n            return false;\n        }\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    for n in l {\n    \
    \    if n >= t {\n            return false;\n        }\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    l.iter().all(|&x| x\
    \ < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    let mut result = true;\n\
    \    for i in 0..l.len() {\n        result = result && l[i] < t;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 101
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    for i in &l {\n   \
    \     if *i > t {\n            return false;\n        }\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpsh5ry_n0.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    l.iter().map(|&x| x).all(|x|\
    \ x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n  let mut below_threshold\
    \ = true;\n  for elem in l {\n    if elem >= t {\n      below_threshold = false;\n\
    \    }\n  }\n  below_threshold\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 101
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    for x in l {\n    \
    \    if x > t {\n            return false;\n        }\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpr8kxx0n3.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822426
- exit_code: 101
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    for n in l {\n    \
    \    if n > t {\n            return false;\n        }\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpp_a0hztj.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    l.iter().all(|&val|\
    \ val < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    for n in l {\n    \
    \    if n >= t {\n            return false;\n        }\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    l.iter().all(|x| *x\
    \ < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    for v in l {\n    \
    \    if v >= t {\n            return false;\n        }\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    for i in l {\n    \
    \    if i >= t {\n            return false;\n        }\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    for item in l {\n \
    \       if item >= t {\n            return false;\n        }\n    }\n    true\n\
    }\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    l.iter().all(|x| x\
    \ < &t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 101
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    for n in l {\n    \
    \    if n > t {\n            return false;\n        }\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpp_a0hztj.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    for x in l {\n    \
    \    if x >= t {\n            return false;\n        }\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    for n in l {\n    \
    \    if n >= t {\n            return false;\n        }\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    l.iter().all(|n| *n\
    \ < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    l.iter().all(|&x| x\
    \ < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 101
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    for e in l {\n    \
    \    if e > t {\n            return false;\n        }\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpsabiz5ve.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822427
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    for n in l {\n    \
    \    if n >= t {\n            return false;\n        }\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 101
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    for v in l {\n    \
    \    if v > t {\n            return false;\n        }\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpzuvx1q_n.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822427
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    for x in l {\n    \
    \    if x >= t {\n            return false;\n        }\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    l.iter().all(|x| *x\
    \ < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    // All elements of\
    \ l are below t\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate\
    \ = below_threshold;\n    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822427
- exit_code: 101
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    for i in l {\n    \
    \    if i > t {\n            return false;\n        }\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpgsc2j8y8.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822426
- exit_code: 101
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    for n in l {\n    \
    \    if n > t {\n            return false;\n        }\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpp_a0hztj.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    l.iter().all(|&x| x\
    \ < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 101
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    for n in l {\n    \
    \    if n > t {\n            return false;\n        }\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpp_a0hztj.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    l.iter().all(|&x| x\
    \ < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 101
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    let mut i = 0;\n  \
    \  let mut j = l.len() - 1;\n    loop {\n        if i >= j {\n            break;\n\
    \        }\n        let v = l[i] + l[j];\n        if v < t {\n            i +=\
    \ 1;\n        } else if v > t {\n            j -= 1;\n        } else {\n     \
    \       return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = below_threshold;\n    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpsqgmvgnh.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822427
- exit_code: 101
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    for x in l {\n    \
    \    if x > t {\n            return false;\n        }\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpr8kxx0n3.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822426
- exit_code: 101
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    for n in l {\n    \
    \    if n > t {\n            return false;\n        }\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpp_a0hztj.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822426
- exit_code: 101
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    for n in l {\n    \
    \    if n > t {\n            return false;\n        }\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpp_a0hztj.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    let mut threshold_met\
    \ = true;\n    for n in l {\n        if n >= t {\n            threshold_met =\
    \ false;\n            break;\n        }\n    }\n    threshold_met\n}\n\nfn main()\
    \ {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1, 2,\
    \ 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822427
- exit_code: 101
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    for e in l {\n    \
    \    if e > t {\n            return false;\n        }\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpsabiz5ve.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822427
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    l.iter().fold(true,\
    \ |acc, num| acc && *num < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822427
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    l.iter().fold(true,\
    \ |a, &b| a && b < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822427
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    l.iter().all(|x| x\
    \ < &t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 101
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    for n in l {\n    \
    \    if n > t {\n            return false;\n        }\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpp_a0hztj.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    for i in l {\n    \
    \    if i >= t {\n            return false;\n        }\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    for n in l {\n    \
    \    if n >= t {\n            return false;\n        }\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    for n in l {\n    \
    \    if n >= t {\n            return false;\n        }\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    l.iter().all(|&x| x\
    \ < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    for i in l {\n    \
    \    if i >= t {\n            return false;\n        }\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 101
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    l.iter().fold(true,\
    \ |acc, val| acc && (val <= &t))\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp5j49rtcw.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822427
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    for elem in l {\n \
    \       if elem >= t {\n            return false;\n        }\n    }\n    true\n\
    }\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822427
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    let mut below = true;\n\
    \    for el in l {\n        if el >= t {\n            below = false;\n       \
    \ }\n    }\n    below\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822427
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    l.iter().all(|x| x\
    \ < &t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    for item in l {\n \
    \       if item >= t {\n            return false;\n        }\n    }\n    true\n\
    }\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    for el in l {\n   \
    \     if el >= t {\n            return false;\n        }\n    }\n    true\n}\n\
    \nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822427
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    for e in l {\n    \
    \    if e >= t {\n            return false;\n        }\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822427
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    for i in l {\n    \
    \    if i >= t {\n            return false;\n        }\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    for x in l {\n    \
    \    if x >= t {\n            return false;\n        }\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    l.iter().fold(true,\
    \ |acc, &x| acc && x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822427
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    l.iter().all(|x| x\
    \ < &t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    l.iter().all(|&x| x\
    \ < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    l.iter().all(|x| *x\
    \ < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    // Complete\n    //\
    \ l.iter().all(|&x| x < t)\n    l.iter().fold(true, |acc, &x| acc && x < t)\n\
    }\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822427
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    for &x in &l {\n  \
    \      if x >= t {\n            return false;\n        }\n    }\n    true\n}\n\
    \nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822427
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    for n in l {\n    \
    \    if n >= t {\n            return false;\n        }\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 101
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    for n in l {\n    \
    \    if n > t {\n            return false;\n        }\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpp_a0hztj.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    l.iter().all(|i| *i\
    \ < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822427
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    l.iter().all(|n| n\
    \ < &t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822427
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    let mut below = true;\n\
    \    for v in l {\n        if v >= t {\n            below = false;\n         \
    \   break;\n        }\n    }\n    below\n}\n\nfn main() {\n    let candidate =\
    \ below_threshold;\n    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822427
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    for v in l {\n    \
    \    if v >= t {\n            return false;\n        }\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    l.iter().all(|&x| x\
    \ < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 101
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    for i in l {\n    \
    \    if i > t {\n            return false;\n        }\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpgsc2j8y8.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    l.iter().all(|n| n\
    \ < &t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822427
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    l.iter().all(|&x| x\
    \ < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    for n in l {\n    \
    \    if n >= t {\n            return false;\n        }\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 1
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    // This function is\
    \ unsafe as it takes a raw pointer as an argument.\n    // It assumes that all\
    \ the elements of the Vec are below the threshold.\n    // In practice, we would\
    \ need to ensure that that was the case before using\n    // this function.\n\
    \    unsafe {\n        let threshold = t;\n        // We use an array slice::from_raw_parts\
    \ to construct a slice from a\n        // raw pointer. The first argument is the\
    \ pointer, the second is the\n        // number of elements in the slice. A slice\
    \ has a type like\n        // &[isize].\n        let l_slice = slice::from_raw_parts(l.as_ptr(),\
    \ l.len());\n        l_slice.iter().all(|&n| n < threshold)\n    }\n}\n\nfn main()\
    \ {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1, 2,\
    \ 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `slice`\n\
    \  --> /tmp/tmpcls4xwl4.rs:13:23\n   |\n13 |         let l_slice = slice::from_raw_parts(l.as_ptr(),\
    \ l.len());\n   |                       ^^^^^ use of undeclared crate or module\
    \ `slice`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659822427
- exit_code: 101
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    for n in l {\n    \
    \    if n > t {\n            return false;\n        }\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpp_a0hztj.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822426
- exit_code: 101
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    for i in l {\n    \
    \    if i > t {\n            return false;\n        }\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpgsc2j8y8.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    for &x in &l {\n  \
    \      if x >= t {\n            return false;\n        }\n    }\n    true\n}\n\
    \nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822427
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    l.iter().all(|i| i\
    \ < &t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822427
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    l.iter().all(|n| n\
    \ < &t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822427
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    l.iter().all(|&x| x\
    \ < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 101
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    for i in l {\n    \
    \    if i > t {\n            return false;\n        }\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpgsc2j8y8.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    l.iter().all(|&n| n\
    \ < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822427
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    for i in l {\n    \
    \    if i >= t {\n            return false;\n        }\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    l.iter().all(|x| x\
    \ < &t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 101
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    for n in l {\n    \
    \    if n > t {\n            return false;\n        }\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpp_a0hztj.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    l.iter().all(|&x| x\
    \ < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 101
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    for a in l {\n    \
    \    if a > t {\n            return false;\n        }\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp528e06cx.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822427
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    for i in l {\n    \
    \    if i >= t {\n            return false;\n        }\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    for i in l {\n    \
    \    if i >= t {\n            return false;\n        }\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    l.iter().all(|&x| x\
    \ < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 101
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    let mut sum = 0;\n\
    \    for i in l {\n        sum += i;\n        if sum > t {\n            return\
    \ false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpuwii6wxv.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822427
- exit_code: 101
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    for n in l {\n    \
    \    if n > t {\n            return false;\n        }\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpp_a0hztj.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    l.iter().all(|&n| n\
    \ < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822427
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    for v in l {\n    \
    \    if v >= t {\n            return false;\n        }\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    let mut result = true;\n\
    \    for i in l {\n        if i >= t {\n            result = false;\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = below_threshold;\n \
    \   assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822427
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    l.iter().all(|&x| x\
    \ < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 101
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n  let mut bt = true;\n\
    \  for &i in l.iter() {\n    if i > t {\n      bt = false;\n      break;\n   \
    \ }\n  }\n  bt\n}\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpxq2r_uc7.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822427
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    l.iter().all(|x| *x\
    \ < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    l.iter().all(|&x| x\
    \ < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 101
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    // TODO: check if all\
    \ numbers in list are below threshold\n    unimplemented!()\n}\n\nfn main() {\n\
    \    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1, 2, 4,\
    \ 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp2erg2rp_.rs:4:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822427
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    // Return true if all\
    \ elements in l are below t\n    l.iter().all(|x| *x < t)\n}\n\nfn main() {\n\
    \    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1, 2, 4,\
    \ 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822427
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    for el in l {\n   \
    \     if el >= t {\n            return false;\n        }\n    }\n    true\n}\n\
    \nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822427
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    for &n in &l {\n  \
    \      if n >= t {\n            return false;\n        }\n    }\n    true\n}\n\
    \nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822427
- exit_code: 101
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    for n in l {\n    \
    \    if n > t {\n            return false;\n        }\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpp_a0hztj.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    l.iter().all(|x| *x\
    \ < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    l.iter().fold(true,\
    \ |acc, i| acc && i < &t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822427
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    // iterate through\
    \ all numbers in the list and check if they are all\n    // below the threshold\
    \ t\n    for i in l {\n        if i >= t {\n            return false;\n      \
    \  }\n    }\n    return true;\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822427
- exit_code: 101
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    // The list is empty,\
    \ all numbers are below the threshold.\n    if l.len() == 0 {\n        return\
    \ true;\n    }\n\n    // If the head number is above the threshold, the threshold\
    \ is not below\n    // all numbers in the list.\n    if l[0] > t {\n        return\
    \ false;\n    }\n\n    // Recursively check the tail of the list.\n    return\
    \ below_threshold(l[1..].to_vec(), t);\n}\n\nfn main() {\n    let candidate =\
    \ below_threshold;\n    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp660j3ule.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822427
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    for &x in &l {\n  \
    \      if x >= t {\n            return false;\n        }\n    }\n    true\n}\n\
    \nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822427
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    l.iter().all(|x| *x\
    \ < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    for n in l {\n    \
    \    if n >= t {\n            return false;\n        }\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    for i in l {\n    \
    \    if i >= t {\n            return false;\n        }\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    for x in l {\n    \
    \    if x >= t {\n            return false;\n        }\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    l.iter().all(|e| e\
    \ < &t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822427
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    let mut result = true;\n\
    \    for n in l {\n        if n >= t {\n            result = false;\n        \
    \    break;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = below_threshold;\n    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822427
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    for item in l {\n \
    \       if item >= t {\n            return false;\n        }\n    }\n    true\n\
    }\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    let mut below = true;\n\
    \    for el in l {\n        if el >= t {\n            below = false;\n       \
    \ }\n    }\n    below\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822427
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    for e in l {\n    \
    \    if e >= t {\n            return false;\n        }\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822427
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    for n in l {\n    \
    \    if n >= t {\n            return false;\n        }\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 101
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    for n in l {\n    \
    \    if n > t {\n            return false;\n        }\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpp_a0hztj.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    l.iter().all(|&x| x\
    \ < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    for el in l {\n   \
    \     if el >= t {\n            return false;\n        }\n    }\n    true\n}\n\
    \nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822427
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    for n in l {\n    \
    \    if n >= t {\n            return false;\n        }\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 101
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    let mut result = true;\n\
    \    for e in l {\n        if e > t {\n            result = false;\n         \
    \   break;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = below_threshold;\n    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpp0e1i_6w.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822427
- exit_code: 101
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    for i in &l {\n   \
    \     if *i > t {\n            return false;\n        }\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpsh5ry_n0.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    for n in l {\n    \
    \    if n >= t {\n            return false;\n        }\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    l.iter().all(|v| *v\
    \ < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822427
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    for n in l {\n    \
    \    if n >= t {\n            return false;\n        }\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    l.iter().all(|&x| x\
    \ < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    for n in l {\n    \
    \    if n >= t {\n            return false;\n        }\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    for n in l {\n    \
    \    if n >= t {\n            return false;\n        }\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 101
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    l.iter().all(|x| x\
    \ <= &t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp55xwzsxj.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822427
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    l.iter().all(|&x| x\
    \ < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n  for n in l {\n    if\
    \ n >= t {\n      return false;\n    }\n  }\n  true\n}\n\nfn main() {\n    let\
    \ candidate = below_threshold;\n    assert_eq!(candidate(vec![1, 2, 4, 10], 100),\
    \ true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822427
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    l.iter().all(|&n| n\
    \ < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822427
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    for &num in l.iter()\
    \ {\n        if num >= t {\n            return false;\n        }\n    }\n    true\n\
    }\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822427
- exit_code: 101
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    for n in l {\n    \
    \    if n > t {\n            return false;\n        }\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpp_a0hztj.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    l.iter().all(|&x| x\
    \ < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    l.iter().all(|x| *x\
    \ < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    l.iter().all(|x| x\
    \ < &t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    for n in l {\n    \
    \    if n >= t {\n            return false;\n        }\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 101
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    for x in l {\n    \
    \    if x > t {\n            return false;\n        }\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpr8kxx0n3.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    l.iter().all(|x| *x\
    \ < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    l.iter().all(|&x| x\
    \ < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 101
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    for n in l {\n    \
    \    if n > t {\n            return false;\n        }\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpp_a0hztj.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822426
- exit_code: 101
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    let mut sum = 0;\n\
    \    for i in l {\n        sum += i;\n        if sum > t {\n            return\
    \ false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpuwii6wxv.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822427
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    for n in l {\n    \
    \    if n >= t {\n            return false;\n        }\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    for n in l {\n    \
    \    if n >= t {\n            return false;\n        }\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 1
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    // Our list `l` has\
    \ to be non-empty.\n    let head = l.head();\n    match head {\n        None =>\
    \ false,\n        Some(x) => {\n            // If the head is below the threshold,\
    \ then we check the tail.\n            if x < t {\n                // Here, the\
    \ tail is a list. We can use `below_threshold` on it\n                // directly!\n\
    \                below_threshold(l.tail(), t)\n            } else {\n        \
    \        // If the head is not below the threshold, the result is False.\n   \
    \             false\n            }\n        }\n    }\n}\n\nfn main() {\n    let\
    \ candidate = below_threshold;\n    assert_eq!(candidate(vec![1, 2, 4, 10], 100),\
    \ true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 10), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `head` found for struct `Vec<isize>` in the\
    \ current scope\n --> /tmp/tmpm919gk9w.rs:4:18\n  |\n4 |     let head = l.head();\n\
    \  |                  ^^^^ method not found in `Vec<isize>`\n\nerror[E0599]: no\
    \ method named `tail` found for struct `Vec<isize>` in the current scope\n  -->\
    \ /tmp/tmpm919gk9w.rs:12:35\n   |\n12 |                 below_threshold(l.tail(),\
    \ t)\n   |                                   ^^^^ method not found in `Vec<isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659822427
- exit_code: 101
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n  for &x in l.iter() {\n\
    \    if x > t {\n      return false;\n    }\n  }\n  true\n}\n\nfn main() {\n \
    \   let candidate = below_threshold;\n    assert_eq!(candidate(vec![1, 2, 4, 10],\
    \ 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n   \
    \ assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp4f7pipnp.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822427
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    let mut l = l;\n  \
    \  l.sort();\n    l.iter().all(|&x| x < t)\n}\n\nfn main() {\n    let candidate\
    \ = below_threshold;\n    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822427
- exit_code: 101
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    for i in l {\n    \
    \    if i > t {\n            return false;\n        }\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpgsc2j8y8.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    l.iter().all(|&x| x\
    \ < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    l.iter().all(|x| *x\
    \ < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    for n in l {\n    \
    \    if n >= t {\n            return false;\n        }\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    l.iter().fold(true,\
    \ |acc, &x| acc && x < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822427
- exit_code: 101
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    for e in l {\n    \
    \    if e > t {\n            return false;\n        }\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpsabiz5ve.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822427
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    l.iter().all(|&x| x\
    \ < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    for &n in &l {\n  \
    \      if n >= t {\n            return false;\n        }\n    }\n    true\n}\n\
    \nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822427
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    for e in l {\n    \
    \    if e >= t {\n            return false;\n        }\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822427
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    l.iter().all(|x| x\
    \ < &t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    l.iter().map(|&v| v).all(|v|\
    \ v < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822427
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    for n in l {\n    \
    \    if n >= t {\n            return false;\n        }\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    l.iter().all(|n| *n\
    \ < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    let mut below = true;\n\
    \    for x in l {\n        if x >= t {\n            below = false;\n        }\n\
    \    }\n    below\n}\n\nfn main() {\n    let candidate = below_threshold;\n  \
    \  assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822427
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    let mut below = true;\n\
    \    for n in l {\n        if n >= t {\n            below = false;\n        }\n\
    \    }\n    below\n}\n\nfn main() {\n    let candidate = below_threshold;\n  \
    \  assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822427
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    for i in l {\n    \
    \    if i >= t {\n            return false;\n        }\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    for item in l {\n \
    \       if item >= t {\n            return false;\n        }\n    }\n    true\n\
    }\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    l.iter().map(|x| *x\
    \ < t).fold(true, |a, b| a && b)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822427
- exit_code: 101
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    for &i in &l {\n  \
    \      if i > t {\n            return false;\n        }\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp2wb_afyp.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822427
- exit_code: 101
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    for n in l {\n    \
    \    if n > t {\n            return false;\n        }\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpp_a0hztj.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    for e in l {\n    \
    \    if e >= t {\n            return false;\n        }\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822427
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    for n in l {\n    \
    \    if n >= t {\n            return false;\n        }\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    l.iter().all(|&n| n\
    \ < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822427
- exit_code: 101
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    let mut result = true;\n\
    \    for i in l {\n        if i > t {\n            result = false;\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = below_threshold;\n \
    \   assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmps_5psd44.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822427
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    l.iter().all(|x| *x\
    \ < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 101
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    for n in l {\n    \
    \    if n > t {\n            return false;\n        }\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpp_a0hztj.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    let mut n = 0;\n  \
    \  while n < l.len() {\n        if l[n] >= t {\n            return false;\n  \
    \      }\n        n += 1;\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = below_threshold;\n    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822428
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    for i in l {\n    \
    \    if i >= t {\n            return false;\n        }\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    for x in l {\n    \
    \    if x >= t {\n            return false;\n        }\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    l.iter().all(|x| x\
    \ < &t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 101
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    for i in l {\n    \
    \    if i > t {\n            return false;\n        }\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpgsc2j8y8.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822426
- exit_code: 101
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    for n in l {\n    \
    \    if n > t {\n            return false;\n        }\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpp_a0hztj.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    // FIXME: You know\
    \ that the compiler can infer the type of `isize` here\n    // because you've\
    \ annotated the type of `below_threshold`.\n    // Is there a better way?\n  \
    \  l.iter().all(|&n| n < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 5), false);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1,\
    \ 8, 4, 10], 11), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822428
- exit_code: 0
  program: "/// Return True if all numbers in the list l are below threshold t.\n\
    fn below_threshold(l: Vec<isize>, t: isize) -> bool {\n    l.iter().all(|&x| x\
    \ < t)\n}\n\nfn main() {\n    let candidate = below_threshold;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10], 100), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10], 5), false);\n\
    \    assert_eq!(candidate(vec![1, 20, 4, 10], 21), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10], 22), true);\n    assert_eq!(candidate(vec![1, 8, 4, 10], 11), true);\n\
    \    assert_eq!(candidate(vec![1, 8, 4, 10], 10), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
