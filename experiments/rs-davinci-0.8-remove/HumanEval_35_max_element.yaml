name: HumanEval_35_max_element
language: rs
prompt: "/// Return maximum element in the list.\nfn max_element(l: Vec<isize>) ->\
  \ isize {\n"
tests: "}\n\nfn main() {\n    let candidate = max_element;\n    assert_eq!(candidate(vec![1,\
  \ 2, 3]), 3);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),\
  \ 124);\n}\n"
completions: ['    l.iter().fold(l[0], |m, &x| std::cmp::max(m, x))', "    let mut\
    \ m = l[0];\n    for x in l.iter() {\n        if x > &m {\n            m = *x;\n\
    \        }\n    }\n    m", "    let mut max = std::isize::MIN;\n    for x in l\
    \ {\n        if x > max {\n            max = x;\n        }\n    }\n    max", " \
    \   let mut m = l[0];\n    for i in 0..l.len() {\n        if l[i] > m {\n    \
    \        m = l[i];\n        }\n    }\n    m", "    let mut max = isize::min_value();\n\
    \    for i in l {\n        if i > max {\n            max = i;\n        }\n   \
    \ }\n    max", "    match l.is_empty() {\n        true => panic!(\"empty list\"\
    ),\n        false => {\n            let mut m = l[0];\n            for i in l\
    \ {\n                if i > m {\n                    m = i;\n                }\n\
    \            }\n            m\n        }\n    }", "    let mut result = l[0];\n\
    \    for i in 1..l.len() {\n        if l[i] > result {\n            result = l[i];\n\
    \        }\n    }\n    result", "    let mut max = l[0];\n    for &i in l.iter()\
    \ {\n        if i > max {\n            max = i;\n        }\n    }\n    max", " \
    \   let mut m = std::isize::MIN;\n    for e in l {\n        if e > m {\n     \
    \       m = e;\n        }\n    }\n    m", "    let mut max: isize = l[0];\n  \
    \  for i in 1..l.len() {\n        if l[i] > max {\n            max = l[i];\n \
    \       }\n    }\n    max", '    l.iter().fold(l[0], |m, &i| if i > m { i } else
    { m })', "    let mut max: isize = 0;\n    for i in 0..l.len() {\n        if l[i]\
    \ > max {\n            max = l[i];\n        }\n    }\n    max", "    let mut max:\
    \ isize = 0;\n    for i in l {\n        if i > max {\n            max = i;\n \
    \       }\n    }\n    max", "    // No need to sort, just find the biggest\n \
    \   // value in the list\n    let mut m = std::isize::MIN;\n    for i in l {\n\
    \        if i > m {\n            m = i;\n        }\n    }\n    m", '    *l.iter().max().unwrap()',
  "    assert!(l.len() > 0);\n    let mut max = l[0];\n    for i in 1..l.len() {\n\
    \        if l[i] > max {\n            max = l[i];\n        }\n    }\n    max",
  '    l.iter().fold(0, |a, b| if a > *b { a } else { *b })', "    let mut i = 0;\n\
    \    let mut j = 0;\n    let mut m = l[0];\n    while i < l.len() {\n        if\
    \ l[i] > m {\n            m = l[i];\n            j = i;\n        }\n        i\
    \ += 1;\n    }\n    j as isize", "    let mut l = l;\n    l.sort();\n    l.reverse();\n\
    \    l[0]", "    let mut m = l[0];\n    for x in l.iter() {\n        if *x > m\
    \ {\n            m = *x;\n        }\n    }\n    m", "    let mut max = l[0];\n\
    \    for &i in l.iter() {\n        if i > max {\n            max = i;\n      \
    \  }\n    }\n    max", "    let mut max = 0;\n    for n in l {\n        if n >\
    \ max {\n            max = n;\n        }\n    }\n    max", "    if l.len() ==\
    \ 0 {\n        return 0;\n    }\n    l.iter().fold(0, |a, &b| if a < b { b } else\
    \ { a })", "    let mut max = l[0];\n    for i in 1..l.len() {\n        if l[i]\
    \ > max {\n            max = l[i];\n        }\n    }\n    max", "    let mut maximum\
    \ = l[0];\n    for i in l {\n        if i > maximum {\n            maximum = i;\n\
    \        }\n    }\n    maximum", "    let mut m = l[0];\n    for i in 1..l.len()\
    \ {\n        if l[i] > m {\n            m = l[i];\n        }\n    }\n    m", " \
    \   let mut max = l[0];\n    for el in l {\n        if el > max {\n          \
    \  max = el;\n        }\n    }\n    max", "    let mut i = 0;\n    let mut max\
    \ = l[0];\n    while i < l.len() {\n        if l[i] > max {\n            max =\
    \ l[i];\n        }\n        i += 1;\n    }\n    max", "\tlet mut max = l[0];\n\
    \tfor elem in l {\n\t\tif elem > max {\n\t\t\tmax = elem;\n\t\t}\n\t}\n\tmax",
  "    let mut max: isize = l[0];\n    for &i in l.iter() {\n        if i > max {\n\
    \            max = i;\n        }\n    }\n    max", "    let mut res = l[0];\n\
    \    for i in 0..l.len() {\n        if l[i] > res {\n            res = l[i];\n\
    \        }\n    }\n    res", '    l.iter().max().unwrap().clone()', "    let mut\
    \ max: isize = 0;\n    for element in l {\n        if element > max {\n      \
    \      max = element;\n        }\n    }\n    max", '    l.iter().fold(0, |a, &b|
    if a > b { a } else { b })', "\tlet mut max = l[0];\n\tfor i in l {\n\t\tif i\
    \ > max {\n\t\t\tmax = i;\n\t\t}\n\t}\n\tmax", "    let mut max = l[0];\n    for\
    \ x in l {\n        if x > max {\n            max = x;\n        }\n    }\n   \
    \ max", "    let mut max = l[0];\n    for el in l.iter() {\n        if *el > max\
    \ {\n            max = *el;\n        }\n    }\n    max", '    l.iter().fold(0,
    |a, b| if a > *b { a } else { *b })', "\t*l.iter().max().unwrap()", "    let mut\
    \ res = l[0];\n    for elem in l.iter() {\n        if *elem > res {\n        \
    \    res = *elem;\n        }\n    }\n    res", '    l.iter().max().unwrap().clone()',
  "    let max = l.iter().max().unwrap();\n    *max", "    let mut max = l[0];\n \
    \   for i in l {\n        if i > max {\n            max = i;\n        }\n    }\n\
    \    max", "    let mut max = 0;\n    for n in l {\n        if n > max {\n   \
    \         max = n;\n        }\n    }\n    max", "    let mut max = 0;\n    for\
    \ v in l {\n        if v > max {\n            max = v;\n        }\n    }\n   \
    \ max", "    let mut current_max = l[0];\n    for i in 1..l.len() {\n        if\
    \ l[i] > current_max {\n            current_max = l[i];\n        }\n    }\n  \
    \  current_max", "    let mut max = l[0];\n    for &e in l.iter() {\n        if\
    \ e > max {\n            max = e;\n        }\n    }\n    max", "    let mut max\
    \ = l[0];\n    for &e in l.iter() {\n        if e > max {\n            max = e;\n\
    \        }\n    }\n    max", "    let mut m = l[0];\n    for v in l {\n      \
    \  if v > m {\n            m = v;\n        }\n    }\n    m", "    let mut result\
    \ = l[0];\n    for element in l {\n        if element > result {\n           \
    \ result = element;\n        }\n    }\n    result", "    assert!(l.len() > 0);\n\
    \    let mut max = l[0];\n    for x in l.iter() {\n        if *x > max {\n   \
    \         max = *x;\n        }\n    }\n    max", "    let mut max = std::isize::MIN;\n\
    \    for e in l {\n        if e > max {\n            max = e;\n        }\n   \
    \ }\n    max", "    let mut max = 0;\n    for i in l {\n        if i > max {\n\
    \            max = i;\n        }\n    }\n    max", "    // TODO: implement\n \
    \   unimplemented!()", "    let mut max = 0;\n    for i in l {\n        if i >\
    \ max {\n            max = i;\n        }\n    }\n    max", "    let mut max =\
    \ l[0];\n    for e in l {\n        if e > max {\n            max = e;\n      \
    \  }\n    }\n    max", "    let mut max = l[0];\n    for i in 0..l.len() {\n \
    \       if l[i] > max {\n            max = l[i];\n        }\n    }\n    max",
  '    l.iter().max().unwrap()', '    l.iter().fold(i32::min_value() as isize, |a,
    b| if a > *b { a } else { *b })', "    match l.len() {\n        0 => panic!(\"\
    max_element on empty list\"),\n        1 => l[0],\n        _ => {\n          \
    \  let (left, right) = l.split_at(l.len() / 2);\n            let max_left = max_element(left.to_vec());\n\
    \            let max_right = max_element(right.to_vec());\n            if max_left\
    \ > max_right {\n                max_left\n            } else {\n            \
    \    max_right\n            }\n        }\n    }", "    let mut curr_max = l[0];\n\
    \    for item in l {\n        if item > curr_max {\n            curr_max = item;\n\
    \        }\n    }\n    curr_max", "    let mut i = 0;\n    let mut res = l[0];\n\
    \    while i < l.len() {\n        if l[i] > res {\n            res = l[i];\n \
    \       }\n        i += 1;\n    }\n    res", "    let mut max = l[0];\n    for\
    \ i in 1..l.len() {\n        if l[i] > max {\n            max = l[i];\n      \
    \  }\n    }\n    max", '    l.iter().max().unwrap().clone()', "    let mut m =\
    \ l[0];\n    for i in l {\n        if i > m {\n            m = i;\n        }\n\
    \    }\n    m", '    return *l.iter().max().unwrap();', '    return l.iter().fold(0,
    |m, &n| if n > m { n } else { m });', "    // set the initial value to the first\
    \ element in the list\n    let mut max_val = l[0];\n    // loop over the rest\
    \ of the list\n    for item in l.iter() {\n        // if the current item is greater\
    \ than the initial value\n        if item > &max_val {\n            // replace\
    \ the initial value with the current item\n            max_val = *item;\n    \
    \    }\n    }\n    max_val", "    match l.len() {\n        0 => panic!(\"maximum\
    \ of empty list\"),\n        1 => l[0],\n        _ => {\n            let h = l[0];\n\
    \            let t = &l[1..];\n            if h > max_element(t.to_vec()) {\n\
    \                h\n            } else {\n                max_element(t.to_vec())\n\
    \            }\n        }\n    }", "    let mut max: isize = 0;\n    for el in\
    \ l {\n        if el > max {\n            max = el;\n        }\n    }\n    max",
  "    let mut max = isize::min_value();\n    for n in l {\n        if n > max {\n\
    \            max = n;\n        }\n    }\n    max", "    let mut max = 0;\n   \
    \ for i in l {\n        if i > max {\n            max = i;\n        }\n    }\n\
    \    max", "    let mut m = 0;\n    for i in l {\n        if i > m {\n       \
    \     m = i;\n        }\n    }\n    m", "\tlet mut max = l[0];\n\tfor &e in l.iter()\
    \ {\n\t\tif e > max {\n\t\t\tmax = e;\n\t\t}\n\t}\n\tmax", '    l.iter().fold(0,
    |acc, e| std::cmp::max(acc, *e))', "    let mut max = l[0];\n    for x in &l {\n\
    \        if *x > max {\n            max = *x;\n        }\n    }\n    max", '    l.iter().fold(0,
    |acc, &x| acc.max(x))', '    l.iter().max().unwrap().clone()', '    *l.iter().max().unwrap()',
  "    let mut m = l[0];\n    for x in l.iter() {\n        if *x > m {\n         \
    \   m = *x;\n        }\n    }\n    m", "    let mut m = l[0];\n    for i in 1..l.len()\
    \ {\n        if l[i] > m {\n            m = l[i];\n        }\n    }\n    m", " \
    \   let mut max = 0;\n    for i in l {\n        if i > max {\n            max\
    \ = i;\n        }\n    }\n    max", "    let mut max = 0;\n    for e in l {\n\
    \        if e > max {\n            max = e;\n        }\n    }\n    max", "   \
    \ let mut max = std::isize::MIN;\n    for i in l {\n        if i > max {\n   \
    \         max = i;\n        }\n    }\n    max", "\tlet mut max = std::isize::MIN;\n\
    \tfor i in 0..l.len() {\n\t\tif l[i] > max {\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\t\
    max", "    let mut m = l[0];\n    for i in l {\n        if i > m {\n         \
    \   m = i;\n        }\n    }\n    m", "    let mut max = l[0];\n    for e in l.iter()\
    \ {\n        if *e > max {\n            max = *e;\n        }\n    }\n    max",
  '    *l.iter().max().unwrap()', "    let mut m = 0;\n    for i in l {\n        if\
    \ i > m {\n            m = i;\n        }\n    }\n    m", '    l.iter().fold(0,
    |acc, n| if *n > acc { *n } else { acc })', "    let mut max = l[0];\n    for\
    \ x in l.iter() {\n        if x > &max {\n            max = *x;\n        }\n \
    \   }\n    max", "    let mut m = l[0];\n    for i in 1..l.len() {\n        if\
    \ l[i] > m {\n            m = l[i];\n        }\n    }\n    m", "\treturn l.iter().fold(0,\
    \ |x, &y| max(x, y));", "\tlet mut max = l[0];\n\tfor i in 0..l.len() {\n\t\t\
    if l[i] > max {\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\tmax", "    let mut m = l[0];\n\
    \    for &e in l.iter() {\n        if e > m {\n            m = e;\n        }\n\
    \    }\n    m", '    l.iter().max().unwrap()', "\tlet mut max = l[0];\n\tfor &i\
    \ in l.iter() {\n\t\tif i > max {\n\t\t\tmax = i;\n\t\t}\n\t}\n\tmax", "\tif l.len()\
    \ == 0 {\n\t\treturn 0;\n\t}\n\n\tlet mut max = l[0];\n\tfor i in 1..l.len() {\n\
    \t\tif l[i] > max {\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn max;", "\tlet mut\
    \ res = std::isize::MIN;\n\tfor item in l {\n\t\tif item > res {\n\t\t\tres =\
    \ item;\n\t\t}\n\t}\n\tres", '    l.iter().fold(isize::min_value(), cmp::max)',
  "    let mut m = 0;\n    for &x in l.iter() {\n        if x > m {\n            m\
    \ = x;\n        }\n    }\n    m", "    assert!(l.len() > 0);\n    let mut max\
    \ = l[0];\n    for &x in l.iter() {\n        if x > max {\n            max = x;\n\
    \        }\n    }\n    max", "    let mut list = l;\n    list.sort();\n    list.reverse();\n\
    \    list[0]", "    let mut max: isize = -1000000000000000;\n    for &el in l.iter()\
    \ {\n        if el > max {\n            max = el;\n        }\n    }\n    max",
  "    let mut max = l[0];\n    for &x in l.iter() {\n        if x > max {\n     \
    \       max = x;\n        }\n    }\n    max", "    let mut max = isize::min_value();\n\
    \    for x in l {\n        if x > max {\n            max = x;\n        }\n   \
    \ }\n    max", "    let mut m: isize = std::isize::MIN;\n    for e in l {\n  \
    \      if e > m {\n            m = e;\n        }\n    }\n    m", '    l.iter().fold(l[0],
    |acc, &x| if x > acc { x } else { acc })', "    let mut m = isize::min_value();\n\
    \    for e in l {\n        if e > m {\n            m = e;\n        }\n    }\n\
    \    m", "    let mut m = isize::min_value();\n    for v in l {\n        if v\
    \ > m {\n            m = v;\n        }\n    }\n    m", "    let mut max = isize::min_value();\n\
    \    for e in l {\n        if e > max {\n            max = e;\n        }\n   \
    \ }\n    max", "    match l.len() {\n        0 => 0,\n        _ => max_element_inner(l,\
    \ 0, 0)\n    }", "    let mut max = std::isize::MIN;\n    for n in l {\n     \
    \   if n > max {\n            max = n;\n        }\n    }\n    max", "    let mut\
    \ max: isize = l[0];\n    for i in 1..l.len() {\n        if l[i] > max {\n   \
    \         max = l[i];\n        }\n    }\n    max", "    let mut m = isize::min_value();\n\
    \    for &n in l.iter() {\n        if n > m {\n            m = n;\n        }\n\
    \    }\n    m", "    let mut max: isize = 0;\n    for i in l {\n        if i >\
    \ max {\n            max = i;\n        }\n    }\n    max", "    let mut max =\
    \ l[0];\n    for i in 1..l.len() {\n        if l[i] > max {\n            max =\
    \ l[i];\n        }\n    }\n    max", "    let mut max = l[0];\n    for elem in\
    \ l.iter() {\n        if *elem > max {\n            max = *elem;\n        }\n\
    \    }\n    max", "    let mut max = l[0];\n    for i in 0..l.len() {\n      \
    \  if l[i] > max {\n            max = l[i];\n        }\n    }\n    max", "   \
    \ let mut max = std::isize::MIN;\n    for e in l {\n        if e > max {\n   \
    \         max = e;\n        }\n    }\n    max", "    let mut max = *l.first().unwrap();\n\
    \    for i in l {\n        if i > max {\n            max = i;\n        }\n   \
    \ }\n    max", "    let mut m = -99999;\n    for i in l {\n        if i > m {\n\
    \            m = i;\n        }\n    }\n    m", "    // Write code here\n    let\
    \ mut max = -2147483648;\n    for i in l.iter() {\n        if *i > max {\n   \
    \         max = *i;\n        }\n    }\n    max", "    // TODO: return the maximum\
    \ element in list l\n    let mut max = 0;\n    for i in l {\n        if i > max\
    \ {\n            max = i;\n        }\n    }\n    max", "    let mut max = std::isize::MIN;\n\
    \    for e in l {\n        if e > max {\n            max = e;\n        }\n   \
    \ }\n    max", '    l.iter().fold(std::isize::MIN, |a, &b| a.max(b))', "    let\
    \ mut max = l[0];\n    for i in l {\n        if i > max {\n            max = i;\n\
    \        }\n    }\n    max", "    let mut max = -1;\n    for e in l {\n      \
    \  if e > max {\n            max = e;\n        }\n    }\n    max", "    let mut\
    \ max = 0;\n    for e in l {\n        if e > max {\n            max = e;\n   \
    \     }\n    }\n    max", "    if l.len() == 0 { panic!(\"max_element of an empty\
    \ list\"); }\n    let mut m = l[0];\n    for elt in l { if elt > m { m = elt;\
    \ } }\n    return m;", "    let mut max = l[0];\n    for x in l {\n        if\
    \ x > max {\n            max = x;\n        }\n    }\n    max", "\tlet mut max\
    \ = l[0];\n\tfor i in l {\n\t\tif i > max {\n\t\t\tmax = i;\n\t\t}\n\t}\n\tmax",
  "    let mut max = std::isize::MIN;\n    for i in l {\n        if i > max {\n  \
    \          max = i;\n        }\n    }\n    max", "    let mut max = l[0];\n  \
    \  for el in l.iter() {\n        if *el > max {\n            max = *el;\n    \
    \    }\n    }\n    max", "    let mut max: isize = l[0];\n    for i in 1..l.len()\
    \ {\n        if l[i] > max {\n            max = l[i];\n        }\n    }\n    max",
  "    let mut m = l[0];\n    for i in l {\n        if i > m {\n            m = i;\n\
    \        }\n    }\n    m", "    let mut max: isize = l[0];\n    for i in l {\n\
    \        if i > max {\n            max = i;\n        }\n    }\n    max", '    l.iter().fold(::std::isize::MIN,
    |a, b| a.max(*b))', "    let mut max = 0;\n    for x in l {\n        if x > max\
    \ {\n            max = x;\n        }\n    }\n    max", "    match l.len() {\n\
    \        0 => panic!(\"list must not be empty\"),\n        1 => l[0],\n      \
    \  2 => if l[0] > l[1] {\n            l[0]\n        } else {\n            l[1]\n\
    \        },\n        _ => {\n            let mid = l.len() / 2;\n            let\
    \ left = max_element(l[0..mid].to_vec());\n            let right = max_element(l[mid..l.len()].to_vec());\n\
    \            if left > right {\n                left\n            } else {\n \
    \               right\n            }\n        }\n    }", "    let mut max: isize\
    \ = l[0];\n    for i in 1..l.len() {\n        if l[i] > max {\n            max\
    \ = l[i];\n        }\n    }\n    max", "    if l.len() == 0 {\n        return\
    \ 0;\n    }\n    let mut i = 1;\n    let mut max = l[0];\n    while i < l.len()\
    \ {\n        if l[i] > max {\n            max = l[i];\n        }\n        i +=\
    \ 1;\n    }\n    max", "    let mut max = 0;\n    for i in l {\n        if i >\
    \ max {\n            max = i;\n        }\n    }\n    max", "    if l.len() ==\
    \ 0 {\n        panic!(\"Need non-empty list\");\n    }\n    let mut max_element\
    \ = l[0];\n    for &element in l.iter() {\n        if element > max_element {\n\
    \            max_element = element;\n        }\n    }\n    max_element", "   \
    \ let mut max = 0;\n    for e in l {\n        if e > max {\n            max =\
    \ e;\n        }\n    }\n    max", '    *l.iter().max().unwrap()', "    let mut\
    \ m = l[0];\n    for e in l {\n        if e > m {\n            m = e;\n      \
    \  }\n    }\n    m", "    let mut max = l[0];\n    for e in l.iter() {\n     \
    \   if e > &max {\n            max = *e;\n        }\n    }\n    max", "    l.iter().fold(None,\
    \ |max, &x| Some(max.unwrap_or(x).max(x)))\n        .unwrap()", "    let mut m\
    \ = isize::min_value();\n    for x in l {\n        if x > m {\n            m =\
    \ x;\n        }\n    }\n    m", '    l.iter().fold(std::isize::MIN, |acc, x| acc.max(*x))',
  "    let mut max = isize::min_value();\n    for e in l {\n        if e > max {\n\
    \            max = e;\n        }\n    }\n    max", "    let mut m = 0;\n    for\
    \ x in l {\n        if x > m {\n            m = x;\n        }\n    }\n    m",
  "    let mut max: isize = l[0];\n    for i in l {\n        if i > max {\n      \
    \      max = i;\n        }\n    }\n    max", '    l.iter().max().unwrap().clone()',
  "    let mut m = l[0];\n    for e in l.iter() {\n        if e > &m {\n         \
    \   m = *e;\n        }\n    }\n    m", "    let max_val = l[0];\n    let mut max_ind\
    \ = 0;\n    for (ind, val) in l.iter().enumerate() {\n        if val > &max_val\
    \ {\n            max_val = *val;\n            max_ind = ind;\n        }\n    }\n\
    \    max_ind as isize", '    return l.iter().fold(0, |a, &b| if a > b { a } else
    { b });', "    let mut max = l[0];\n    for &i in l.iter() {\n        if i > max\
    \ {\n            max = i;\n        }\n    }\n    max", "    let mut max = -1;\n\
    \    for elt in l {\n        if elt > max {\n            max = elt;\n        }\n\
    \    }\n    max", "    let mut max: isize = l[0];\n    for i in 1..l.len() {\n\
    \        if l[i] > max {\n            max = l[i];\n        }\n    }\n    max",
  "    match l.len() {\n        0 => panic!(\"Empty list is not allowed\"),\n    \
    \    1 => l[0],\n        _ => {\n            let (tail, head) = l.split_at(1);\n\
    \            let max_rest = max_element(tail.to_vec());\n            if head[0]\
    \ > max_rest {\n                head[0]\n            } else {\n              \
    \  max_rest\n            }\n        }\n    }", "\tlet mut m = isize::min_value();\n\
    \tfor elem in l {\n\t\tif elem > m {\n\t\t\tm = elem;\n\t\t}\n\t}\n\tm", "   \
    \ let mut result = l[0];\n    for e in l {\n        if e > result {\n        \
    \    result = e;\n        }\n    }\n    result", "    let mut min = std::isize::MIN;\n\
    \    for i in l {\n        if i > min {\n            min = i;\n        }\n   \
    \ }\n    min", "    let mut m = l[0];\n    for i in l {\n        if i > m {\n\
    \            m = i;\n        }\n    }\n    m", "    // Implemented using a for\
    \ loop\n    let mut max = l[0];\n    for el in l {\n        if el > max {\n  \
    \          max = el;\n        }\n    }\n    max", "    let mut max = l[0];\n \
    \   for &e in l.iter() {\n        if e > max {\n            max = e;\n       \
    \ }\n    }\n    max", "    let mut x: isize = 0;\n    for i in l {\n        if\
    \ i > x {\n            x = i;\n        }\n    }\n    x", "    let mut max = l[0];\n\
    \    for i in 0..l.len() {\n        if l[i] > max {\n            max = l[i];\n\
    \        }\n    }\n    max", "    let mut max = l[0];\n    for x in l {\n    \
    \    if x > max {\n            max = x;\n        }\n    }\n    max", "    l.iter().fold(0,\
    \ |acc, x| {\n        if x > &acc {\n            *x\n        } else {\n      \
    \      acc\n        }\n    })", '    return l.iter().max().unwrap();', "    let\
    \ mut max = std::isize::MIN;\n    for i in l {\n        if i > max {\n       \
    \     max = i;\n        }\n    }\n    max", "    let mut max = 0;\n    for e in\
    \ l {\n        if e > max {\n            max = e;\n        }\n    }\n    max",
  "    let mut max = isize::min_value();\n    for i in l {\n        if i > max {\n\
    \            max = i;\n        }\n    }\n    max", "    let mut max = std::isize::MIN;\n\
    \    for x in l {\n        if x > max {\n            max = x;\n        }\n   \
    \ }\n    max", "    let mut m = l[0];\n    for i in l {\n        if i > m {\n\
    \            m = i;\n        }\n    }\n    m", "    let mut m = std::isize::MIN;\n\
    \    for i in l {\n        if i > m {\n            m = i;\n        }\n    }\n\
    \    m", '    l.iter().fold(isize::min_value(), |acc, x| acc.max(*x))', "    let\
    \ mut current_max = l[0];\n    for i in l {\n        if i > current_max {\n  \
    \          current_max = i;\n        }\n    }\n    current_max", "    let mut\
    \ max = l[0];\n    for i in 1..l.len() {\n        if l[i] > max {\n          \
    \  max = l[i];\n        }\n    }\n    max", "    let mut max = 0;\n    for el\
    \ in l {\n        if el > max {\n            max = el;\n        }\n    }\n   \
    \ max", "    let mut m = std::isize::MIN;\n    for i in l {\n        if i > m\
    \ {\n            m = i;\n        }\n    }\n    m", "    let mut res = l[0];\n\
    \    for i in l {\n        if i > res {\n            res = i;\n        }\n   \
    \ }\n    res", "    let mut result = l[0];\n    for element in l.iter() {\n  \
    \      if *element > result {\n            result = *element;\n        }\n   \
    \ }\n    result", "    let mut max = l[0];\n    for &i in l.iter() {\n       \
    \ if i > max {\n            max = i;\n        }\n    }\n    max", "    let mut\
    \ m = l[0];\n    for e in l.iter() {\n        if *e > m {\n            m = *e;\n\
    \        }\n    }\n    m", "    let mut max = 0;\n    for &i in l.iter() {\n \
    \       if i > max {\n            max = i;\n        }\n    }\n    max", "\tlet\
    \ mut max = 0;\n\tfor e in l {\n\t\tif e > max {\n\t\t\tmax = e;\n\t\t}\n\t}\n\
    \tmax", "    let mut max = -1;\n    for e in l {\n        if e > max {\n     \
    \       max = e;\n        }\n    }\n    max", "    let mut max: isize = std::isize::MIN;\n\
    \    for x in l {\n        if x > max {\n            max = x;\n        }\n   \
    \ }\n    max", "    // TODO\n    l[0]", "    let mut l_cpy = l.clone();\n    l_cpy.sort();\n\
    \    l_cpy[l_cpy.len() - 1]", "    let mut max: isize = -1;\n    for i in l {\n\
    \        if i > max {\n            max = i;\n        }\n    }\n    max", "   \
    \ let mut max = l[0];\n    for &e in l.iter() {\n        if e > max {\n      \
    \      max = e;\n        }\n    }\n    max", "    let mut max = l[0];\n    for\
    \ e in l {\n        if e > max {\n            max = e;\n        }\n    }\n   \
    \ max", "    let mut curr_max = isize::min_value();\n    for item in l {\n   \
    \     if item > curr_max {\n            curr_max = item;\n        }\n    }\n \
    \   curr_max", "    let mut m = std::isize::MIN;\n    for i in l {\n        if\
    \ i > m {\n            m = i;\n        }\n    }\n    m", "\tlet mut current =\
    \ 0;\n\tfor i in l {\n\t\tif i > current {\n\t\t\tcurrent = i;\n\t\t}\n\t}\n\t\
    current"]
stop_tokens:
- "\n}"
