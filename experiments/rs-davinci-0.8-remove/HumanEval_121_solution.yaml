name: HumanEval_121_solution
language: rs
prompt: "/// Given a non-empty list of integers, return the sum of all of the odd\
  \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8, 7,\
  \ 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst: Vec<isize>)\
  \ -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
  \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
  \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
  \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
  \ 13, 2, 9]), 3);\n}\n"
completions: ['    lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).filter(|(_,
    n)| n % 2 != 0).map(|(_, n)| n).sum()', "    // Your code here!\n    let mut sum\
    \ = 0;\n    for (index, item) in lst.iter().enumerate() {\n        if index %\
    \ 2 == 0 && item % 2 != 0 {\n            sum += item;\n        }\n    }\n    sum",
  '    lst.iter().enumerate().filter(|x| x.0 % 2 == 0 && x.1 % 2 != 0).map(|x| x.1).sum()',
  "    lst.iter().enumerate().fold(0, |sum, (idx, el)| {\n        if idx % 2 == 0\
    \ && el % 2 != 0 {\n            sum + el\n        } else {\n            sum\n\
    \        }\n    })", "    lst.iter().enumerate().fold(0, |acc, (idx, x)| {\n \
    \       if idx % 2 == 0 && *x % 2 != 0 {\n            acc + x\n        } else\
    \ {\n            acc\n        }\n    })", "    let even = lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum();\n    even",
  '    lst.iter().enumerate().fold(0, |acc, (idx, v)| if idx % 2 == 0 { acc + v }
    else { acc })', "  let mut count = 0;\n  for (i, x) in lst.iter().enumerate()\
    \ {\n    if i % 2 == 0 && x % 2 != 0 {\n      count += x;\n    }\n  }\n  count",
  '    lst.iter().enumerate().filter(|(i, _)| *i % 2 == 0).map(|(_, x)| x).sum()',
  "    let mut sum = 0;\n    for (idx, elem) in lst.iter().enumerate() {\n       \
    \ if idx % 2 == 0 && elem % 2 != 0 {\n            sum += elem;\n        }\n  \
    \  }\n    sum", '    lst.iter().enumerate().filter(|x| x.0 % 2 == 0).map(|x| x.1
    % 2 == 1).filter(|x| *x).count() as isize', "    let mut iter = lst.iter();\n\
    \    let mut sum = 0;\n    loop {\n        match iter.next() {\n            Some(x)\
    \ => {\n                sum += x;\n                match iter.next() {\n     \
    \               Some(_) => continue,\n                    None => break,\n   \
    \             }\n            }\n            None => break,\n        }\n    }\n\
    \    sum", "    let mut res = 0;\n    for (i, n) in lst.iter().enumerate() {\n\
    \        if i % 2 == 0 && n % 2 != 0 {\n            res += n;\n        }\n   \
    \ }\n    res", "    let mut sum = 0;\n    for (i, item) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 0 && item % 2 != 0 {\n            sum += item;\n    \
    \    }\n    }\n    sum", '    lst.iter().enumerate().filter(|(i, _)| i % 2 ==
    0).map(|(_, x)| x).sum()', "    let mut sum = 0;\n    for (i, el) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 0 && el % 2 != 0 {\n            sum += el;\n        }\n\
    \    }\n    sum", "    let mut s = 0;\n    for (i, x) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 0 && x % 2 != 0 {\n            s += x;\n        }\n \
    \   }\n    s", "    lst.iter().enumerate().fold(0, |sum, (index, item)| {\n  \
    \      if index % 2 == 0 && item % 2 != 0 {\n            sum + item\n        }\
    \ else {\n            sum\n        }\n    })", "    let mut res = 0;\n    for\
    \ (i, x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x % 2 != 0 {\n\
    \            res += x;\n        }\n    }\n    res", "    lst.iter().enumerate().fold(0,\
    \ |acc, (i, x)| {\n        if i % 2 == 0 && x % 2 != 0 {\n            acc + x\n\
    \        } else {\n            acc\n        }\n    })", "    let mut odd_sum =\
    \ 0;\n    for i in 0..lst.len() {\n        if i % 2 == 0 && lst[i] % 2 != 0 {\n\
    \            odd_sum += lst[i];\n        }\n    }\n    odd_sum", "    let mut\
    \ even = false;\n    let mut result = 0;\n    for &i in lst.iter() {\n       \
    \ if even {\n            result += i;\n        }\n        even = !even;\n    }\n\
    \    result", '    lst.iter().enumerate().filter(|&(i, _)| i % 2 == 0).filter(|&(_,
    &x)| x % 2 == 1).map(|(_, &x)| x).sum()', '    lst.iter().enumerate().filter(|(i,
    _)| (i % 2) == 0).filter(|(_, &x)| x % 2 != 0).map(|(_, &x)| x).sum()', "  lst.iter().enumerate().fold(0,\
    \ |acc, (i, item)| {\n    if i % 2 == 0 && item % 2 != 0 {\n      acc + item\n\
    \    } else {\n      acc\n    }\n  })", '    lst.iter().enumerate().filter(|(i,
    _)| i % 2 == 0).filter(|(_, &x)| x % 2 == 1).map(|(_, &x)| x).sum()', "    let\
    \ mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if (i + 1)\
    \ % 2 == 0 && x % 2 != 0 {\n            sum += x;\n        }\n    }\n    sum",
  "    let mut s = 0;\n    for i in 0..lst.len() {\n        if i % 2 == 0 && lst[i]\
    \ % 2 != 0 {\n            s += lst[i];\n        }\n    }\n    s", '    lst.iter().enumerate().filter(|&(i,
    _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()', '    lst.iter().enumerate().filter(|&(i,
    _)| i % 2 == 0).map(|(_, x)| x).sum()', "    let mut total = 0;\n    for (i, &x)\
    \ in lst.iter().enumerate() {\n        if i % 2 == 0 && x % 2 != 0 {\n       \
    \     total += x;\n        }\n    }\n    total", "    let mut sum = 0;\n    for\
    \ (i, n) in lst.iter().enumerate() {\n        if n % 2 != 0 && i % 2 == 0 {\n\
    \            sum += n;\n        }\n    }\n    sum", "    lst.iter().enumerate().fold(0,\
    \ |sum, (i, &n)| {\n        if i % 2 == 0 && n % 2 != 0 {\n            sum + n\n\
    \        } else {\n            sum\n        }\n    })", "    let mut res = 0;\n\
    \    for (i, n) in lst.iter().enumerate() {\n        if i % 2 == 0 && n % 2 !=\
    \ 0 {\n            res += n;\n        }\n    }\n    res", "    // Your code here\n\
    \    0", '    lst.iter().enumerate().filter(|(i,_)| i%2 == 0).map(|(_,x)| x).filter(|x|
    x%2 == 1).sum()', "    let mut sum = 0;\n    for (i, j) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 0 && j % 2 != 0 {\n            sum += j;\n        }\n\
    \    }\n    sum", "    let mut sum = 0;\n    for (i, j) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 0 && j % 2 != 0 {\n            sum += j;\n        }\n\
    \    }\n    sum", '    return lst.iter().enumerate().filter(|&(i, _)| i % 2 ==
    0).filter(|&(_, v)| v % 2 != 0).map(|(_, v)| v).sum();', "    let mut sum = 0;\n\
    \    for i in 1..lst.len() {\n        if i % 2 == 0 {\n            sum += lst[i];\n\
    \        }\n    }\n    sum", '    lst.iter().enumerate().filter(|(i, _)| *i %
    2 == 0).map(|(_, n)| *n).sum()', "    let mut it = lst.iter();\n    let mut odd_sum\
    \ = 0;\n    loop {\n        let b = it.next();\n        let c = it.next();\n \
    \       match (b, c) {\n            (Some(b), Some(c)) => {\n                if\
    \ b % 2 == 1 {\n                    odd_sum += b;\n                }\n       \
    \         if c % 2 == 1 {\n                    odd_sum += c;\n               \
    \ }\n            }\n            (Some(b), None) => {\n                if b % 2\
    \ == 1 {\n                    odd_sum += b;\n                }\n            }\n\
    \            _ => break,\n        }\n    }\n    odd_sum", "    // return lst.iter().enumerate().filter(|&(i,_)|\
    \ i % 2 == 0).map(|(_, v)| v).filter(|&v| v % 2 == 1).sum();\n    return lst.iter().step_by(2).filter(|&&v|\
    \ v % 2 == 1).sum();", "    lst.iter().enumerate().fold(0, |acc, (i, v)| {\n \
    \       if i % 2 == 0 && *v % 2 != 0 {\n            acc + v\n        } else {\n\
    \            acc\n        }\n    })", "  let lst_len = lst.len();\n  if lst_len\
    \ == 0 {\n    return 0;\n  }\n  let mut sum = 0;\n  for (i, item) in lst.iter().enumerate()\
    \ {\n    if i % 2 == 0 && item % 2 != 0 {\n      sum += item;\n    }\n  }\n  sum",
  '    lst.iter().enumerate().filter(|&(i, _)| i % 2 == 0).map(|(_, x)| x).sum()',
  "    let mut sum = 0;\n    for (i, val) in lst.iter().enumerate() {\n        if\
    \ i % 2 == 0 && val % 2 != 0 {\n            sum += val;\n        }\n    }\n  \
    \  sum", '    lst.iter().enumerate().filter(|&(i, _)| i % 2 == 0).map(|(_, &v)|
    v).sum()', '    return lst.iter().enumerate().filter(|(i, x)| x % 2 == 1 && i
    % 2 == 0).map(|(_, x)| x).sum();', "    let mut num: isize = 0;\n    for (idx,\
    \ e) in lst.iter().enumerate() {\n        if idx % 2 == 0 && e % 2 != 0 {\n  \
    \          num += e;\n        }\n    }\n    num", "    let mut total = 0;\n  \
    \  for i in 0..lst.len() {\n        if i % 2 == 0 && lst[i] % 2 != 0 {\n     \
    \       total += lst[i];\n        }\n    }\n    total", "    let mut result =\
    \ 0;\n    for (i, el) in lst.iter().enumerate() {\n        if i % 2 == 0 && el\
    \ % 2 != 0 {\n            result += el;\n        }\n    }\n    result", "  let\
    \ mut sum = 0;\n  for (i, n) in lst.iter().enumerate() {\n    if i % 2 == 0 &&\
    \ n % 2 != 0 {\n      sum += n;\n    }\n  }\n  sum", "    let mut sum = 0;\n \
    \   for i in 1..lst.len() {\n        if i % 2 == 0 {\n            sum += lst[i];\n\
    \        }\n    }\n    sum", "    let mut ans = 0;\n    for (i, v) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 0 && v % 2 != 0 {\n            ans += v;\n        }\n\
    \    }\n    ans", "    // \u5947\u6570\u7684\u5076\u6570\u4F4D\u7684\u548C\n \
    \   let mut v = vec![];\n    for (i, v) in lst.iter().enumerate() {\n        if\
    \ i % 2 == 0 && v % 2 != 0 {\n            v.push(v);\n        }\n    }\n    v.iter().sum()",
  '    lst.iter().enumerate().filter(|&(i, _)| i % 2 == 0).filter(|&(_, x)| x % 2
    != 0).map(|(_, x)| x).sum()', '    lst.iter().filter(|&n| n % 2 == 1).enumerate().filter(|(i,
    _)| i % 2 == 0).map(|(_, &n)| n).sum()', '    lst.iter().enumerate().filter(|(i,
    _)| i % 2 == 0).filter(|(_, v)| v % 2 != 0).map(|(_, v)| v).sum()', "  let mut\
    \ sum = 0;\n  for (i, n) in lst.iter().enumerate() {\n    if i % 2 == 0 && n %\
    \ 2 != 0 {\n      sum += n;\n    }\n  }\n  sum", "    let mut result = 0;\n  \
    \  for (i, item) in lst.iter().enumerate() {\n        if i % 2 == 0 && item %\
    \ 2 != 0 {\n            result += item;\n        }\n    }\n    result", "    let\
    \ mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i % 2 ==\
    \ 0 && x % 2 != 0 {\n            sum += x;\n        }\n    }\n    sum", '    return
    lst.iter().enumerate().filter(|&(index, _)| index % 2 == 0).filter(|&(_, val)|
    val % 2 != 0).map(|(_, val)| val).sum();', '    lst.iter().enumerate().filter(|&(i,
    _)| i % 2 == 0).filter(|&(_, n)| n % 2 != 0).map(|(_, n)| n).sum()', "  let (even,\
    \ odd) = lst.into_iter().enumerate().partition(|(i, _)| i % 2 == 0);\n  even.filter(|(_,\
    \ n)| n % 2 != 0).map(|(_, n)| n).sum::<isize>() +\n  odd.filter(|(_, n)| n %\
    \ 2 == 0).map(|(_, n)| n).sum::<isize>()", "    let mut sum = 0;\n    for (i,\
    \ x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x % 2 != 0 {\n    \
    \        sum += x;\n        }\n    }\n    sum", '    lst.iter().enumerate().filter(|(i,
    _)| i % 2 == 0).filter(|(_, num)| num % 2 != 0).map(|(_, num)| num).sum()', " \
    \   let mut sum = 0;\n    for (i, num) in lst.iter().enumerate() {\n        if\
    \ i % 2 == 0 && num % 2 != 0 {\n            sum += num;\n        }\n    }\n  \
    \  sum", "    let lst_len = lst.len();\n    lst.iter().fold(0, |sum, value| {\n\
    \        if (lst_len - lst.iter().position(|&n| n == *value).unwrap() - 1) % 2\
    \ == 0 && *value % 2 != 0 {\n            sum + *value\n        } else {\n    \
    \        sum\n        }\n    })", "    let mut sum = 0;\n    for (idx, x) in lst.iter().enumerate()\
    \ {\n        if idx % 2 == 0 && x % 2 != 0 {\n            sum += x;\n        }\n\
    \    }\n    sum", '    lst.iter().filter(|&x| x % 2 == 1).enumerate().filter(|(a,
    _)| a % 2 == 0).map(|(_, y)| y).sum()', "    let mut total = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 2 == 0 && x % 2 != 0 {\n       \
    \     total += x;\n        }\n    }\n    total", "    lst.iter().filter(|&n| n\
    \ % 2 == 1)\n        .enumerate()\n        .filter(|&(i, _)| i % 2 == 0)\n   \
    \     .map(|(_, n)| n)\n        .sum()", '  lst.iter().step_by(2).filter(|x| x
    % 2 != 0).sum()', '    lst.iter().enumerate().filter(|x| x.0 % 2 == 0).map(|x|
    x.1).filter(|x| x % 2 != 0).sum()', "    let mut s = 0;\n    for (i, j) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 0 && j % 2 != 0 {\n            s += j;\n        }\n \
    \   }\n    s", '    lst.iter().step_by(2).sum()', '    lst.iter().enumerate().filter(|&(idx,
    _)| idx % 2 == 0).filter(|&(_, &val)| val % 2 != 0).map(|(_, &val)| val).sum()',
  '    lst.iter().enumerate().filter(|&(i, _)| i % 2 == 0).filter(|&(_, x)| x % 2
    != 0).map(|(_, x)| x).sum()', "    let mut res = 0;\n    for (idx, &i) in lst.iter().enumerate()\
    \ {\n        if idx % 2 == 0 && i % 2 != 0 {\n            res += i;\n        }\n\
    \    }\n    res", "    let mut sum = 0;\n    for (i, x) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 0 && x % 2 != 0 {\n            sum += x;\n        }\n\
    \    }\n    sum", "    lst.iter().enumerate().fold(0, |acc, (i, x)| {\n      \
    \  if i % 2 == 0 && x % 2 != 0 {\n            acc + x\n        } else {\n    \
    \        acc\n        }\n    })", '    lst.iter().enumerate().filter(|&(i, v)|
    i % 2 == 0 && v % 2 != 0).map(|(_, v)| v).sum()', "    let mut sum = 0;\n    for\
    \ n in lst.iter().step_by(2) {\n        if n % 2 != 0 {\n            sum += n;\n\
    \        }\n    }\n    sum", "    let mut sum = 0;\n    for (index, value) in\
    \ lst.iter().enumerate() {\n        if index % 2 == 0 && value % 2 != 0 {\n  \
    \          sum += value;\n        }\n    }\n    sum", "    let mut sum = 0;\n\
    \    for (i, v) in lst.iter().enumerate() {\n        if i % 2 == 0 && v % 2 !=\
    \ 0 {\n            sum += v;\n        }\n    }\n    sum", "    let mut result\
    \ = 0;\n    for (index, item) in lst.iter().enumerate() {\n        if index %\
    \ 2 == 0 && item % 2 != 0 {\n            result += item;\n        }\n    }\n \
    \   result", "    let mut sum = 0;\n    for i in 1..lst.len() {\n        if i\
    \ % 2 == 0 {\n            sum += lst[i];\n        }\n    }\n    sum", "    let\
    \ mut sum = 0;\n    for (i, v) in lst.iter().enumerate() {\n        if i % 2 ==\
    \ 0 && v % 2 != 0 {\n            sum += v;\n        }\n    }\n    sum", "    let\
    \ mut acc = 0;\n    for (index, item) in lst.iter().enumerate() {\n        if\
    \ index % 2 == 0 && item % 2 != 0 {\n            acc += item;\n        }\n   \
    \ }\n    acc", "    let mut accumulator = 0;\n    for (i, item) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 0 && item % 2 != 0 {\n            accumulator += item;\n\
    \        }\n    }\n    accumulator", "    let mut lst = lst;\n    lst.sort();\n\
    \    lst.iter().step_by(2).sum()", "    let mut result = 0;\n    for i in 0..lst.len()\
    \ {\n        if i % 2 == 0 && lst[i] % 2 != 0 {\n            result += lst[i];\n\
    \        }\n    }\n    result", "    // your solution here\n    return 0;", '    lst.iter().enumerate().filter(|&(i,
    _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()', "    let\
    \ mut res = 0;\n    for (i, n) in lst.iter().enumerate() {\n        if i % 2 ==\
    \ 0 && n % 2 != 0 {\n            res += n;\n        }\n    }\n    res", '    lst.iter().enumerate().filter(|(i,
    &x)| x % 2 == 1 && i % 2 == 0).map(|(_, &x)| x).sum()', "    // Your code here\n\
    \    let mut lst = lst;\n    lst.sort();\n    let mut sum = 0;\n    for i in (0..lst.len()).step_by(2)\
    \ {\n        sum += lst[i];\n    }\n    sum", '    lst.iter().filter(|n| n % 2
    == 1).enumerate().filter(|(i, _)| i % 2 == 0).map(|(_, n)| n).sum()', '    lst.iter().filter(|x|
    (x % 2) == 1).enumerate().filter(|(i, _)| i % 2 == 0).map(|(_, x)| x).sum()',
  '    lst.iter().enumerate().filter(|&(i, x)| i % 2 == 0 && x % 2 != 0).map(|(_,
    &x)| x).sum()', '    lst.iter().enumerate().filter(|&(i, _)| i % 2 == 0).filter(|&(_,
    &e)| e % 2 != 0).map(|(_, &e)| e).sum()', '    lst.iter().enumerate().filter(|&(i,
    _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, &x)| x).sum()', "    let\
    \ mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i % 2 ==\
    \ 0 && x % 2 != 0 {\n            sum += x;\n        }\n    }\n    sum", "    let\
    \ mut ret = 0;\n    for (i, item) in lst.iter().enumerate() {\n        if i %\
    \ 2 == 0 && item % 2 != 0 {\n            ret += item;\n        }\n    }\n    ret",
  '  lst.iter().enumerate().filter(|x| x.0 % 2 == 0 && x.1 % 2 != 0).map(|x| x.1).sum()',
  '    lst.iter().enumerate().filter(|&(i, _)| i % 2 == 0).map(|(_, &n)| n).sum()',
  "    let mut sum = 0;\n    for i in 0..lst.len() {\n        if i % 2 == 0 && lst[i]\
    \ % 2 != 0 {\n            sum += lst[i];\n        }\n    }\n    sum", '    lst.iter().enumerate().fold(0,
    |acc, (i, e)| if i % 2 == 0 { acc + e } else { acc })', "    let mut sum = 0;\n\
    \    for (i, v) in lst.iter().enumerate() {\n        if i % 2 == 0 && v % 2 !=\
    \ 0 {\n            sum += v;\n        }\n    }\n    sum", "    lst.iter().enumerate().fold(0,\
    \ |acc, (i, &n)| {\n        if i % 2 == 0 && n % 2 != 0 {\n            acc + n\n\
    \        } else {\n            acc\n        }\n    })", '    lst.iter().enumerate().filter(|(i,
    _)| i % 2 == 0).map(|(_, &n)| n).sum()', '    lst.iter().enumerate().filter(|&(i,
    _)| i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()', '    lst.iter().enumerate().filter(|&(i,
    _)| i % 2 == 0).filter(|&(_, &x)| x % 2 == 1).map(|(_, &x)| x).sum()', "    let\
    \ mut odd_sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i %\
    \ 2 == 0 && x % 2 != 0 {\n            odd_sum += x;\n        }\n    }\n    odd_sum",
  "    let mut sum = 0;\n    for i in 0..lst.len() {\n        if i % 2 == 0 && lst[i]\
    \ % 2 != 0 {\n            sum += lst[i];\n        }\n    }\n    sum", "    let\
    \ mut sum = 0;\n    for (i, &n) in lst.iter().enumerate() {\n        if i % 2\
    \ == 0 && n % 2 != 0 {\n            sum += n;\n        }\n    }\n    sum", " \
    \   let mut result = 0;\n    for (i, e) in lst.iter().enumerate() {\n        if\
    \ i % 2 == 0 && e % 2 != 0 {\n            result += e;\n        }\n    }\n   \
    \ result", '    lst.iter().enumerate().filter(|&(index, _)| index % 2 == 0).filter(|&(_,
    x)| x % 2 != 0).map(|(_, x)| x).sum()', '    lst.iter().enumerate().filter(|(i,
    n)| n % 2 == 1 && i % 2 == 0).map(|(_, n)| n).sum()', '    lst.iter().enumerate().filter(|(i,_)|
    i%2==0).map(|(_,n)| n).sum()', "    let mut ans = 0;\n    for i in 0..lst.len()\
    \ {\n        if i % 2 == 0 && lst[i] % 2 != 0 {\n            ans += lst[i];\n\
    \        }\n    }\n    ans", '    lst.iter().enumerate().filter(|&(i, _)| i %
    2 == 0).filter(|&(_, v)| v % 2 != 0).map(|(_, v)| v).sum()', "    let mut even\
    \ = 0;\n    let mut odd = 0;\n    for i in 0..lst.len() {\n        if i % 2 ==\
    \ 0 {\n            even += lst[i];\n        } else {\n            odd += lst[i];\n\
    \        }\n    }\n    odd - even", '    lst.iter().enumerate().fold(0, |acc,
    (i, n)| acc + n * (i & 1) as isize)', "    let mut result = 0;\n    for i in 0..lst.len()\
    \ {\n        if i%2==0 && lst[i]%2==1 {\n            result += lst[i];\n     \
    \   }\n    }\n    result", '    lst.iter().enumerate().filter(|x| x.0 % 2 == 0
    && x.1 % 2 != 0).map(|x| x.1).sum()', "    let mut odd_sum = 0;\n    for (i, v)\
    \ in lst.iter().enumerate() {\n        if i % 2 == 0 && v % 2 != 0 {\n       \
    \     odd_sum += v;\n        }\n    }\n    odd_sum", "    let res = lst.iter().enumerate().filter(|(i,\
    \ v)| *i % 2 == 0 && *v % 2 != 0).map(|(_, v)| v).sum();\n    res", "    //! Create\
    \ a vector to hold the odd numbered elements.\n    let mut odds = Vec::new();\n\
    \    //! Create a vector to hold the even numbered elements.\n    let mut evens\
    \ = Vec::new();\n    //! Populate the vectors with odd and even numbered elements.\n\
    \    for (i, &item) in lst.iter().enumerate() {\n        if i % 2 == 0 {\n   \
    \         evens.push(item);\n        } else {\n            odds.push(item);\n\
    \        }\n    }\n    //! Filter the odds vector to remove the evens and add\
    \ them up.\n    return odds.into_iter().filter(|&x| x % 2 != 0).sum();", "   \
    \ // Your solution goes here!\n    lst.iter().enumerate().filter(|&(i, _)| i %\
    \ 2 == 1).map(|(_, &x)| x).sum()", "    let mut sum = 0;\n    for (i, v) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 0 && v % 2 != 0 {\n            sum += v;\n        }\n\
    \    }\n    sum", "    lst.iter().enumerate().fold(0, |acc, (i, v)| {\n      \
    \  if i % 2 == 0 && *v % 2 != 0 {\n            acc + v\n        } else {\n   \
    \         acc\n        }\n    })", '    lst.iter().enumerate().filter(|&(i, _)|
    i % 2 == 0).map(|(_, x)| x).sum()', '    lst.iter().enumerate().filter(|(i, x)|
    i % 2 == 0 && x % 2 != 0).map(|(_, x)| x).sum()', "    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0)\n        .filter(|&(_, x)| x % 2 != 0)\n        .map(|(_, x)|\
    \ x)\n        .sum()", "  let len = lst.len();\n  let mut result = 0;\n  for i\
    \ in 0..len {\n    if i % 2 == 0 && lst[i] % 2 != 0 {\n      result += lst[i];\n\
    \    }\n  }\n  result", "    let length = lst.len();\n    let mut result = 0;\n\
    \    for i in 1..length {\n        if i % 2 == 0 {\n            result += lst[i];\n\
    \        }\n    }\n    result", "    let mut sum = 0;\n    for (i, &x) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 0 && x % 2 != 0 {\n            sum += x;\n        }\n\
    \    }\n    sum", "    let mut sum = 0;\n    for (pos, val) in lst.iter().enumerate()\
    \ {\n        if pos % 2 == 0 && val % 2 != 0 {\n            sum += val;\n    \
    \    }\n    }\n    sum", "    let mut sum = 0;\n    for (i, j) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 0 && j % 2 != 0 {\n            sum += j;\n        }\n\
    \    }\n    sum", "    let mut i = 0;\n    let mut result = 0;\n    while i <\
    \ lst.len() {\n        if i % 2 == 0 && lst[i] % 2 != 0 {\n            result\
    \ += lst[i];\n        }\n        i += 1;\n    }\n    result", "  if lst.len()\
    \ < 1 {\n    return 0;\n  }\n  lst.iter().enumerate().fold(0, |acc, (idx, x)|\
    \ {\n    if idx % 2 == 0 && x % 2 != 0 {\n      acc + x\n    } else {\n      acc\n\
    \    }\n  })", "    let mut solution: isize = 0;\n    for i in 0..lst.len() {\n\
    \        if i % 2 == 0 && lst[i] % 2 != 0 {\n            solution += lst[i];\n\
    \        }\n    }\n    solution", "    let mut sum = 0;\n    for i in 1..lst.len()\
    \ {\n        if i % 2 == 0 {\n            sum += lst[i];\n        }\n    }\n \
    \   sum", '    lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).filter(|(_,
    i)| i % 2 != 0).map(|(_, i)| i).sum()', "    let mut lst: Vec<isize> = lst;\n\
    \    lst.sort();\n    let mut sum = 0;\n    for i in (0..lst.len()).step_by(2)\
    \ {\n        sum += lst[i];\n    }\n    sum", "    let mut sum = 0;\n    for i\
    \ in 0..lst.len() {\n        if i % 2 == 0 && lst[i] % 2 != 0 {\n            sum\
    \ += lst[i];\n        }\n    }\n    sum", "    let mut res = 0;\n    for (i, &x)\
    \ in lst.iter().enumerate() {\n        if i % 2 == 0 && x % 2 != 0 {\n       \
    \     res += x;\n        }\n    }\n    res", "    let mut acc = 0;\n    for (i,\
    \ val) in lst.iter().enumerate() {\n        if (i + 1) % 2 == 0 && val % 2 !=\
    \ 0 {\n            acc += val;\n        }\n    }\n    acc", '    lst.iter().filter(|&&x|
    x % 2 == 1).fold(0, |acc, &x| acc + x)', "    let mut odds = Vec::new();\n   \
    \ let mut result = 0;\n    for (i, n) in lst.iter().enumerate() {\n        if\
    \ i % 2 == 0 {\n            result += n;\n        } else {\n            odds.push(n);\n\
    \        }\n    }\n    for n in odds {\n        result -= n;\n    }\n    result",
  '    return lst.iter().enumerate().filter(|(i, _v)| i % 2 == 1).map(|(_i, v)| v).sum();',
  '    lst.iter().enumerate().filter(|&(i, _)| i % 2 == 0).map(|(_, x)| x).sum()',
  "    let mut result = 0;\n    for (index, i) in lst.iter().enumerate() {\n     \
    \   if index % 2 == 0 && i % 2 != 0 {\n            result += i;\n        }\n \
    \   }\n    result", '    lst.iter().enumerate().filter(|(i, &x)| i % 2 == 0 &&
    x % 2 != 0).map(|(_, &x)| x).sum()', "    let mut sum = 0;\n    for i in 0..lst.len()\
    \ {\n        if lst[i] % 2 != 0 && i % 2 == 0 {\n            sum += lst[i];\n\
    \        }\n    }\n    sum", '    lst.iter().enumerate().filter(|(i, _)| i % 2
    == 0).map(|(_, n)| n).sum()', "    let mut sum = 0;\n    for i in 1..lst.len()\
    \ {\n        if lst[i] % 2 != 0 {\n            sum += lst[i];\n        }\n   \
    \ }\n    sum", "    let l = lst.len();\n    if l % 2 == 0 {\n        let mut sum\
    \ = 0;\n        for i in (0..l).step_by(2) {\n            sum += lst[i];\n   \
    \     }\n        sum\n    } else {\n        0\n    }", "    let mut result = 0;\n\
    \    for i in 0..lst.len() {\n        if i % 2 == 0 && lst[i] % 2 != 0 {\n   \
    \         result += lst[i];\n        }\n    }\n    result", "    lst.iter().enumerate().fold(0,\
    \ |acc, (pos, elem)| {\n        match pos % 2 {\n            0 => acc + elem,\n\
    \            _ => acc,\n        }\n    })", "    let mut sum = 0;\n    for i in\
    \ 0..lst.len() {\n        if lst[i] % 2 != 0 && i % 2 == 0 {\n            sum\
    \ += lst[i];\n        }\n    }\n    sum", "    let mut sum = 0;\n    for (i, x)\
    \ in lst.iter().enumerate() {\n        if i % 2 == 0 && x % 2 != 0 {\n       \
    \     sum += x;\n        }\n    }\n    sum", '    lst.iter().enumerate().filter(|&(i,
    _)| i % 2 == 0).filter(|&(_, &x)| x % 2 == 1).map(|(_, &x)| x).sum()', "    let\
    \ mut count = 0;\n    for i in 0..lst.len() {\n        if i % 2 == 0 && lst[i]\
    \ % 2 != 0 {\n            count += lst[i];\n        }\n    }\n    count", "  \
    \  let mut result = 0;\n    for (i, item) in lst.iter().enumerate() {\n      \
    \  if i % 2 == 0 && item % 2 != 0 {\n            result += item;\n        }\n\
    \    }\n    result", '    lst.iter().enumerate().filter(|&(i, _)| i % 2 == 0).map(|(_,
    &x)| x).sum()', '    return lst.iter().enumerate().filter(|(idx, _)| idx % 2 ==
    0).filter(|(_, num)| *num % 2 != 0).map(|(_, num)| *num).sum();', "    let mut\
    \ sum = 0;\n    for (i, &elem) in lst.iter().enumerate() {\n        if i % 2 ==\
    \ 0 && elem % 2 != 0 {\n            sum += elem;\n        }\n    }\n    sum",
  '    lst.iter().enumerate().filter(|(idx, _)| idx % 2 == 0).map(|(_, el)| el).sum()',
  '    return lst.iter().enumerate().filter(|&(i, x)| i % 2 == 0 && x % 2 != 0).map(|(_,
    x)| x).sum();', "    let mut sum = 0;\n    for (i, v) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 0 && v % 2 != 0 {\n            sum += v;\n        }\n\
    \    }\n    sum", "    let odd_sum = lst.iter().enumerate().filter(|(i, &x)| x\
    \ % 2 == 1 && i % 2 == 0).fold(0, |acc, (_, &x)| acc + x);\n    odd_sum", "  \
    \  let mut sum = 0;\n    for i in 0..lst.len() {\n        if i % 2 == 0 && lst[i]\
    \ % 2 != 0 {\n            sum += lst[i];\n        }\n    }\n    sum", "    //\
    \ accumulate the odd numbers from even positions\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 0).filter(|&(_, x)| x % 2 == 1).map(|(_, x)| x).sum()", '    lst.iter().enumerate().filter(|&(i,
    _)| i % 2 == 0).map(|(_, &x)| x).sum()', "    let mut sum = 0;\n    for i in 0..lst.len()\
    \ {\n        if lst[i] % 2 != 0 && i % 2 == 0 {\n            sum += lst[i];\n\
    \        }\n    }\n    sum", "  lst.iter().enumerate().fold(0, |a, (i, e)| {\n\
    \    if i & 1 == 0 && *e & 1 == 1 {\n      a + e\n    } else {\n      a\n    }\n\
    \  })", "    let mut iter = lst.iter();\n    iter.skip(1).step_by(2).sum()", " \
    \   let mut odd_even = 0;\n    for (i, x) in lst.iter().enumerate() {\n      \
    \  if i % 2 == 0 && x % 2 != 0 {\n            odd_even += x;\n        }\n    }\n\
    \    odd_even", "    let mut sum = 0;\n    for (i, n) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 0 && n % 2 != 0 {\n            sum += n;\n        }\n\
    \    }\n    sum", '    lst.iter().enumerate().filter(|(i, _)| i % 2 == 1).fold(0,
    |acc, (_, x)| acc + x)', "    let mut total = 0;\n    for (i, n) in lst.iter().enumerate()\
    \ {\n        if n % 2 != 0 && i % 2 == 0 {\n            total += n;\n        }\n\
    \    }\n    total", "    let mut sum = 0;\n    for (i, x) in lst.iter().enumerate()\
    \ {\n        if (i + 1) % 2 == 0 && x % 2 != 0 {\n            sum += x;\n    \
    \    }\n    }\n    sum", "    let mut total = 0;\n    for (i, n) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 0 && n % 2 != 0 {\n            total += n;\n        }\n\
    \    }\n    total", "  let mut x = 0;\n  for (i, v) in lst.iter().enumerate()\
    \ {\n    if i % 2 == 0 && v % 2 != 0 {\n      x += v;\n    }\n  }\n  x", '    lst.iter().enumerate().fold(0,
    |acc, (x, y)| if x % 2 == 0 && y % 2 != 0 { acc + y } else { acc })', "    let\
    \ mut answer = 0;\n    for i in 0..lst.len() {\n        if i % 2 == 0 && lst[i]\
    \ % 2 != 0 {\n            answer += lst[i];\n        }\n    }\n    answer", '    lst.iter().enumerate().filter(|(i,
    _)| i % 2 == 1).fold(0, |acc, (_, x)| acc + x)', "    let mut sum = 0;\n    for\
    \ i in 1..lst.len() {\n        if lst[i] % 2 != 0 {\n            sum += lst[i];\n\
    \        }\n    }\n    sum", "    lst.iter().enumerate().fold(0, |sum, (i, n)|\
    \ {\n        if i % 2 == 0 && *n % 2 != 0 {\n            sum + n\n        } else\
    \ {\n            sum\n        }\n    })", "    let mut sum = 0;\n    for i in\
    \ 0..lst.len() {\n        if i % 2 == 0 && lst[i] % 2 != 0 {\n            sum\
    \ += lst[i];\n        }\n    }\n    sum", "    let mut i = 0;\n    let mut sum\
    \ = 0;\n    for n in lst {\n        if i % 2 == 0 && n % 2 != 0 {\n          \
    \  sum += n;\n        }\n        i += 1;\n    }\n    sum", '    lst.iter().enumerate().filter(|&(i,
    _)| i % 2 == 0).map(|(_, num)| num).sum()', "    //We also need to know where\
    \ we are in the list, for this we will use an index\n    let mut index = 0;\n\
    \    //We are going to need to use the sum() method from the Iterator trait.\n\
    \    //The Iterator trait is implemented by Vec (and other types).\n    //The\
    \ sum() method takes a closure, so we pass in a lambda.\n    //The closure captures\
    \ the index variable, so we need to use the move keyword\n    lst.iter().filter(|x|\
    \ {\n        index += 1;\n        //To find the odd numbers in even positions,\
    \ we must check whether the current\n        //number is odd and the index is\
    \ even.\n        **x % 2 == 1 && index % 2 == 0\n    }).sum()", "    let mut sum\
    \ = 0;\n    for (i, n) in lst.iter().enumerate() {\n        if n % 2 != 0 && i\
    \ % 2 == 0 {\n            sum += n;\n        }\n    }\n    sum", '    lst.iter().enumerate().filter(|(i,
    _)| (i + 1) % 2 == 0).map(|(_, x)| x).sum()', "    // TODO: put your solution\
    \ here!\n    let mut sum = 0;\n    for (index, item) in lst.iter().enumerate()\
    \ {\n        if index % 2 == 0 && item % 2 != 0 {\n            sum += item;\n\
    \        }\n    }\n    sum", "    let mut sum = 0;\n    for (i, &n) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 0 && n % 2 != 0 {\n            sum += n;\n        }\n\
    \    }\n    sum"]
stop_tokens:
- "\n}"
