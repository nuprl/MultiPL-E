name: HumanEval_88_sort_array
language: rs
prompt: "/// Given an array of non-negative integers, return a copy of the given array\
  \ after sorting,\n/// you will sort the given array in ascending order if the sum(\
  \ first index value, last index value) is odd,\n/// or sort it in descending order\
  \ if the sum( first index value, last index value) is even.\n/// Note:\n/// * don't\
  \ change the given array.\n/// Examples:\nfn sort_array(array: Vec<isize>) -> Vec<isize>\
  \ {\n"
tests: "}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
  \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
  \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2, 4,\
  \ 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
  \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
  \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
  \ 21, 14, 11]);\n}\n"
completions: ["    let mut sorted_vec = array.clone();\n    sorted_vec.sort();\n \
    \   if sorted_vec[0] + sorted_vec[sorted_vec.len() - 1] % 2 == 0 {\n        sorted_vec.reverse();\n\
    \    }\n    sorted_vec", "    let mut sorted_array = array.clone();\n    sorted_array.sort();\n\
    \    if (array[0] + array[array.len() - 1]) % 2 == 0 {\n        sorted_array.reverse();\n\
    \    }\n    sorted_array", "    let sum: isize = array[0] + array[array.len()\
    \ - 1];\n    let mut array = array;\n    if sum % 2 == 0 {\n        array.sort_by(|a,\
    \ b| b.cmp(a));\n    } else {\n        array.sort_by(|a, b| a.cmp(b));\n    }\n\
    \    array", "    if array.len() < 2 {\n        return array;\n    }\n    let\
    \ mut v = array.clone();\n    let first = v[0];\n    let last = v[v.len() - 1];\n\
    \    let sum = first + last;\n    v.sort_by(|a, b| if sum % 2 == 0 { b.cmp(a)\
    \ } else { a.cmp(b) });\n    v", "    let mut array = array;\n    if array.len()\
    \ == 0 {\n        return array;\n    }\n    let is_even = array[0] + array[array.len()\
    \ - 1] % 2 == 0;\n    if is_even {\n        array.sort_by(|a, b| b.cmp(a));\n\
    \    } else {\n        array.sort_by(|a, b| a.cmp(b));\n    }\n    array", " \
    \   let mut res = array.clone();\n    if (array[0] + array[array.len() - 1]) %\
    \ 2 == 0 {\n        res.sort_by(|a, b| b.cmp(a));\n    } else {\n        res.sort_by(|a,\
    \ b| a.cmp(b));\n    }\n    res", "    let n = array.len();\n    let mut res =\
    \ array.clone();\n    if n == 0 {\n        return res;\n    }\n\n    if (res[0]\
    \ + res[n - 1]) % 2 == 0 {\n        res.sort_by(|a, b| b.cmp(a));\n    } else\
    \ {\n        res.sort_by(|a, b| a.cmp(b));\n    }\n    res", "    let mut values\
    \ = array.clone();\n    let mut new_values = vec![];\n    for i in (0..values.len()).rev()\
    \ {\n        new_values.push(values.remove(i));\n    }\n    let mut result = if\
    \ sum_first_last(array) % 2 == 0 {\n        new_values\n    } else {\n       \
    \ array\n    };\n    result", "    let mut result = array.clone();\n    if result.first().unwrap()\
    \ + result.last().unwrap() % 2 == 0 {\n        result.sort_by(|a, b| b.cmp(a));\n\
    \    } else {\n        result.sort_by(|a, b| a.cmp(b));\n    }\n    result", " \
    \   let sum = array[0] + array[array.len() - 1];\n    let mut numbers = array.clone();\n\
    \    if sum % 2 == 0 {\n        numbers.sort_by(|a, b| b.cmp(a));\n    } else\
    \ {\n        numbers.sort_by(|a, b| a.cmp(b));\n    }\n    numbers", "    let\
    \ mut sum = array[0] + array[array.len() - 1];\n    let mut sorted = array.clone();\n\
    \    sorted.sort();\n    if sum % 2 == 0 {\n        sorted.reverse();\n    }\n\
    \    sorted", "    let mut result = array.clone();\n    if array.len() > 0 {\n\
    \        let sum: isize = array[0] + array[array.len() - 1];\n        result.sort_by(|a,\
    \ b| {\n            if sum % 2 == 0 {\n                b.cmp(a)\n            }\
    \ else {\n                a.cmp(b)\n            }\n        });\n    }\n    result",
  "    if array.len() == 0 {\n        return array;\n    }\n    let mut array = array;\n\
    \    let sum = array[0] + array[array.len() - 1];\n    let mut flag = true;\n\
    \    if sum % 2 == 0 {\n        flag = false;\n    }\n    if flag {\n        array.sort();\n\
    \    } else {\n        array.sort_by(|a, b| b.cmp(a));\n    }\n    array", " \
    \   let mut array = array;\n    array.sort_by(|a, b| {\n        let len = array.len();\n\
    \        let sum = a + b;\n        if sum % 2 == 0 {\n            b.cmp(a)\n \
    \       } else {\n            a.cmp(b)\n        }\n    });\n    array", "    let\
    \ mut v = array.clone();\n    if (array[0] + array[array.len() - 1]) % 2 == 0\
    \ {\n        v.sort_by(|a, b| b.cmp(a));\n    } else {\n        v.sort_by(|a,\
    \ b| a.cmp(b));\n    }\n    v", "    let mut result = array.clone();\n    if array.is_empty()\
    \ {\n        return result;\n    }\n    if array.len() == 1 {\n        return\
    \ result;\n    }\n    if (array[0] + array[array.len() - 1]) % 2 == 0 {\n    \
    \    result.sort_by(|a, b| b.cmp(a));\n    } else {\n        result.sort_by(|a,\
    \ b| a.cmp(b));\n    }\n    result", "    let mut array = array;\n    if (array[0]\
    \ + array[array.len() - 1]) % 2 == 0 {\n        array.sort_by(|a, b| b.cmp(a));\n\
    \    } else {\n        array.sort_by(|a, b| a.cmp(b));\n    }\n    array", " \
    \   let mut result = Vec::with_capacity(array.len());\n    result.extend_from_slice(&array);\n\
    \    result.sort_by(|a, b| {\n        let sum = *a + *b;\n        if sum % 2 ==\
    \ 0 {\n            a.cmp(b)\n        } else {\n            b.cmp(a)\n        }\n\
    \    });\n    result", "    let mut res = array.clone();\n    // sort in place\n\
    \    if array.len() > 1 {\n        if array[0] + array[array.len() - 1] & 1 ==\
    \ 0 {\n            res.sort_by(|a, b| b.cmp(a));\n        } else {\n         \
    \   res.sort_by(|a, b| a.cmp(b));\n        }\n    }\n    res", "    let mut res\
    \ = array.clone();\n    let sum = array[0] + array[array.len() - 1];\n    if sum\
    \ % 2 == 0 {\n        res.sort_by(|a, b| b.cmp(a));\n    } else {\n        res.sort_by(|a,\
    \ b| a.cmp(b));\n    }\n    res", "    let mut array = array;\n    let len = array.len();\n\
    \    let idx_sum = array[0] + array[len - 1];\n    if idx_sum % 2 == 0 {\n   \
    \     array.sort_by(|a, b| b.cmp(a));\n    } else {\n        array.sort_by(|a,\
    \ b| a.cmp(b));\n    }\n    array", "    let mut result = array.clone();\n   \
    \ result.sort_by(|a, b| {\n        if (array[0] + array[array.len() - 1]) % 2\
    \ == 0 {\n            b.cmp(a)\n        } else {\n            a.cmp(b)\n     \
    \   }\n    });\n    result", "    let is_even = array.iter().zip(array.iter().rev()).map(|(x,\
    \ y)| x + y).sum::<isize>() % 2 == 0;\n    let mut array = array;\n    array.sort_by(|a,\
    \ b| if is_even { b.cmp(a) } else { a.cmp(b) });\n    array", "    let size =\
    \ array.len();\n    if size == 0 {\n        return vec![];\n    }\n\n    let mut\
    \ clone = array.clone();\n    clone.sort();\n\n    if (array[0] + array[size -\
    \ 1]) % 2 == 0 {\n        return clone.iter().rev().map(|x| *x).collect();\n \
    \   } else {\n        return clone;\n    }", '    return array;', "    let mut\
    \ array = array;\n    if (array[0] + array[array.len() - 1]) % 2 == 0 {\n    \
    \    array.sort_by(|a, b| b.cmp(a));\n    } else {\n        array.sort_by(|a,\
    \ b| a.cmp(b));\n    }\n    array", "    let len = array.len();\n    let mut array\
    \ = array;\n    array.sort_by(|a, b| {\n        if (len - 1 + 0) % 2 == 0 {\n\
    \            b.cmp(a)\n        } else {\n            a.cmp(b)\n        }\n   \
    \ });\n    array", "    let mut array = array;\n    let mut i = 0;\n    let mut\
    \ j = array.len() - 1;\n    let mut temp = 0;\n    let mut odd = false;\n    if\
    \ array[0] + array[array.len() - 1] % 2 == 0 {\n        odd = true;\n    }\n \
    \   loop {\n        if odd {\n            while array[i] % 2 == 0 {\n        \
    \        i += 1;\n            }\n            while array[j] % 2 == 1 {\n     \
    \           j -= 1;\n            }\n        } else {\n            while array[i]\
    \ % 2 == 1 {\n                i += 1;\n            }\n            while array[j]\
    \ % 2 == 0 {\n                j -= 1;\n            }\n        }\n        if i\
    \ >= j {\n            break;\n        }\n        temp = array[i];\n        array[i]\
    \ = array[j];\n        array[j] = temp;\n    }\n    array", "    let mut vec =\
    \ array.clone();\n    let length = vec.len();\n    if length == 0 {\n        return\
    \ vec;\n    }\n\n    let sum = vec[0] + vec[length - 1];\n    let odd = sum %\
    \ 2 == 1;\n    if odd {\n        vec.sort();\n    } else {\n        vec.sort_by(|a,\
    \ b| b.cmp(a));\n    }\n    vec", "    let size = array.len();\n    let last_index\
    \ = size - 1;\n    let sum = array[0] + array[last_index];\n    let mut sorted\
    \ = array.clone();\n    sorted.sort();\n    if sum % 2 == 0 {\n        sorted.reverse();\n\
    \    }\n    sorted", "    let mut a = array.clone();\n    a.sort();\n    if a[0]\
    \ + a[a.len() - 1] % 2 == 0 {\n        a.reverse();\n    }\n    a", "    let mut\
    \ array = array;\n    let len = array.len();\n    let sum = array[0] + array[len\
    \ - 1];\n    if sum % 2 == 0 {\n        array.sort_by(|a, b| b.cmp(a));\n    }\
    \ else {\n        array.sort_by(|a, b| a.cmp(b));\n    }\n    array", "    //\
    \ unimplemented!(\"sort the array {:?}\", array);\n    let mut vec1 = Vec::new();\n\
    \    let mut vec2 = Vec::new();\n    if array.len() == 0 {\n        return vec![];\n\
    \    }\n    let sum = array[0] + array[array.len() - 1];\n    if sum % 2 == 0\
    \ {\n        vec1 = array.clone();\n        vec1.sort();\n        vec1.reverse();\n\
    \        return vec1;\n    } else {\n        vec2 = array.clone();\n        vec2.sort();\n\
    \        return vec2;\n    }", "    let mut v = array.clone();\n    if v.len()\
    \ > 1 {\n        let sum = v[0] + v[v.len() - 1];\n        if sum % 2 == 0 {\n\
    \            v.sort_by(|a, b| b.cmp(a));\n        } else {\n            v.sort_by(|a,\
    \ b| a.cmp(b));\n        }\n    }\n    v", "    let array_size = array.len();\n\
    \    let mut res = array.clone();\n    for i in 0..array_size {\n        for j\
    \ in (i + 1)..array_size {\n            if sum_index(i, j, array_size) % 2 ==\
    \ 0 {\n                if res[i] < res[j] {\n                    let tmp = res[i];\n\
    \                    res[i] = res[j];\n                    res[j] = tmp;\n   \
    \             }\n            } else {\n                if res[i] > res[j] {\n\
    \                    let tmp = res[i];\n                    res[i] = res[j];\n\
    \                    res[j] = tmp;\n                }\n            }\n       \
    \ }\n    }\n    res", "    let mut res = array.clone();\n    if (array[0] + array[array.len()\
    \ - 1]) % 2 == 0 {\n        res.sort_by(|a, b| b.cmp(a));\n    } else {\n    \
    \    res.sort_by(|a, b| a.cmp(b));\n    }\n    res", "    let mut res = array.clone();\n\
    \    if (res[0] + res[res.len() - 1]) % 2 == 0 {\n        res.sort_by(|a, b| b.cmp(a));\n\
    \    } else {\n        res.sort_by(|a, b| a.cmp(b));\n    }\n    res", "    let\
    \ mut array = array;\n    let sum = array[0] + array[array.len() - 1];\n    if\
    \ sum % 2 == 0 {\n        array.sort_by(|a, b| b.cmp(a));\n    } else {\n    \
    \    array.sort_by(|a, b| a.cmp(b));\n    }\n    array", "    let mut output =\
    \ array.clone();\n    let sum = array[0] + array[array.len() - 1];\n    if sum\
    \ % 2 == 0 {\n        output.sort_by(|a, b| b.cmp(a));\n    } else {\n       \
    \ output.sort_by(|a, b| a.cmp(b));\n    }\n    output", "    use std::cmp::Ordering;\n\
    \    let mut array = array;\n    let sum = array[0] + array[array.len() - 1];\n\
    \    let order = match sum % 2 {\n        0 => Ordering::Less,\n        _ => Ordering::Greater,\n\
    \    };\n    array.sort_by(|a, b| a.cmp(b).reverse().then(order));\n    array",
  "    let mut res = vec![];\n    let mut sorted_odds = vec![];\n    let mut sorted_evens\
    \ = vec![];\n    let mut zero_count = 0;\n    let mut sum = 0;\n    let mut first_last_digits_sum\
    \ = 0;\n    let mut odds = vec![];\n    let mut evens = vec![];\n    for num in\
    \ array {\n        sum += num;\n        if num == 0 {\n            zero_count\
    \ += 1;\n        } else if num % 2 == 0 {\n            evens.push(num);\n    \
    \    } else {\n            odds.push(num);\n        }\n    }\n    if sum % 2 ==\
    \ 0 {\n        odds.sort();\n        odds.reverse();\n        evens.sort();\n\
    \        evens.reverse();\n        res.append(&mut odds);\n        res.append(&mut\
    \ evens);\n    } else {\n        odds.sort();\n        evens.sort();\n       \
    \ res.append(&mut odds);\n        res.append(&mut evens);\n    }\n    first_last_digits_sum\
    \ = array[0] + array[array.len() - 1];\n    if first_last_digits_sum % 2 == 0\
    \ {\n        res.reverse();\n    }\n    res", "    let mut array = array;\n  \
    \  if (array[0] + array[array.len() - 1]) % 2 == 0 {\n        array.sort_by(|a,\
    \ b| b.cmp(a));\n    } else {\n        array.sort_by(|a, b| a.cmp(b));\n    }\n\
    \    array", "    fn sort_array_inner(array: &mut Vec<isize>, is_ascending: bool)\
    \ {\n        fn inner(array: &mut Vec<isize>, is_ascending: bool, pivot: usize)\
    \ {\n            if pivot > array.len() - 1 {\n                return;\n     \
    \       }\n            let mut left = 0;\n            let mut right = array.len()\
    \ - 1;\n            let (mut l_val, mut r_val) = (array[left], array[right]);\n\
    \            while left < right {\n                if is_ascending {\n       \
    \             if array[left] >= pivot {\n                        left += 1;\n\
    \                        l_val = array[left];\n                    } else if array[right]\
    \ <= pivot {\n                        right -= 1;\n                        r_val\
    \ = array[right];\n                    } else {\n                        array[left]\
    \ = r_val;\n                        array[right] = l_val;\n                  \
    \      left += 1;\n                        right -= 1;\n                     \
    \   l_val = array[left];\n                        r_val = array[right];\n    \
    \                }\n                } else {\n                    if array[left]\
    \ <= pivot {\n                        left += 1;\n                        l_val\
    \ = array[left];\n                    } else if array[right] >= pivot {\n    \
    \                    right -= 1;\n                        r_val = array[right];\n\
    \                    } else {\n                        array[left] = r_val;\n\
    \                        array[right] = l_val;\n                        left +=\
    \ 1;\n                        right -= 1;\n                        l_val = array[left];\n\
    \                        r_val = array[right];\n                    }\n      \
    \          }\n            }\n            if array[left] > pivot {\n          \
    \      array[left] = pivot;\n                inner(array, is_ascending, array[left\
    \ - 1]);\n            } else {\n                inner(array, is_ascending, array[left\
    \ + 1]);\n            }\n        }\n        if array.len() <= 1 {\n          \
    \  return;\n        }\n        inner(array, is_ascending, array[0]);\n    }\n\
    \    let mut array = array;\n    let is_ascending = array[0] + array[array.len()\
    \ - 1] % 2 == 0;\n    sort", "    let (mut temp, n) = (0, array.len());\n    if\
    \ (array[0] + array[n - 1]) % 2 == 0 {\n        let mut sorted = array.clone();\n\
    \        sorted.sort_by(|a, b| b.cmp(a));\n        sorted\n    } else {\n    \
    \    let mut sorted = array.clone();\n        sorted.sort();\n        sorted\n\
    \    }", "    let mut array = array;\n    let mut first = array[0];\n    let mut\
    \ last = array[array.len() - 1];\n    if first + last % 2 == 0 {\n        array.sort_by(|a,\
    \ b| b.cmp(a));\n    } else {\n        array.sort_by(|a, b| a.cmp(b));\n    }\n\
    \    array", "    let len = array.len();\n    if len <= 1 {\n        return array;\n\
    \    }\n    let sum = array[0] + array[len - 1];\n    let mut ret = array.clone();\n\
    \    if sum % 2 == 0 {\n        ret.sort_by(|a, b| b.cmp(a));\n    } else {\n\
    \        ret.sort_by(|a, b| a.cmp(b));\n    }\n    ret", "    let mut array =\
    \ array;\n    let sort_type = array[0] + array[array.len() - 1];\n    let mut\
    \ is_odd = false;\n    if sort_type % 2 != 0 {\n        is_odd = true;\n    }\n\
    \    let mut i = 0;\n    while i < array.len() {\n        let mut j = i + 1;\n\
    \        while j < array.len() {\n            if is_odd {\n                if\
    \ array[i] < array[j] {\n                    let temp = array[i];\n          \
    \          array[i] = array[j];\n                    array[j] = temp;\n      \
    \          }\n            } else {\n                if array[i] > array[j] {\n\
    \                    let temp = array[i];\n                    array[i] = array[j];\n\
    \                    array[j] = temp;\n                }\n            }\n    \
    \        j += 1;\n        }\n        i += 1;\n    }\n    array", "    let mut\
    \ result = array.clone();\n    result.sort_by(|a, b| {\n        if (result.len()\
    \ == 1) || (result.first().unwrap() + result.last().unwrap()) % 2 == 0 {\n   \
    \         b.cmp(a)\n        } else {\n            a.cmp(b)\n        }\n    });\n\
    \    result", "    let sum = array[0] + array[array.len() - 1];\n    if sum %\
    \ 2 == 0 {\n        return array.into_iter().sorted().rev().collect();\n    }\n\
    \    array.into_iter().sorted().collect()", "    if array.len() < 2 {\n      \
    \  return array;\n    }\n    let mut res = vec![0; array.len()];\n    let mut\
    \ odd_index = if (array[0] + array[array.len() - 1]) % 2 == 0 {\n        0\n \
    \   } else {\n        array.len() - 1\n    };\n    let mut even_index = if odd_index\
    \ == 0 {\n        array.len() - 1\n    } else {\n        0\n    };\n    let mut\
    \ odd_count = 0;\n    let mut even_count = 0;\n    for i in 0..array.len() {\n\
    \        if i % 2 == 0 {\n            res[odd_index] = array[i];\n           \
    \ odd_index += 2;\n            odd_count += 1;\n        } else {\n           \
    \ res[even_index] = array[i];\n            even_index += 2;\n            even_count\
    \ += 1;\n        }\n    }\n    res.sort_by(|a, b| {\n        if (array[0] + array[array.len()\
    \ - 1]) % 2 == 0 {\n            if odd_count < even_count {\n                b.cmp(a)\n\
    \            } else {\n                a.cmp(b)\n            }\n        } else\
    \ {\n            if odd_count < even_count {\n                a.cmp(b)\n     \
    \       } else {\n                b.cmp(a)\n            }\n        }\n    });\n\
    \    res", "    let mut result = array.clone();\n    result.sort_by(|a, b| {\n\
    \        match (a + b) % 2 {\n            0 => b.cmp(a),\n            _ => a.cmp(b),\n\
    \        }\n    });\n    result", "    let (mut array, mut sum) = (array, 0);\n\
    \    array.iter().fold((0, false), |(index, mut odd), item| {\n        sum +=\
    \ index * item;\n        if !odd {\n            odd = index & 1 == 1;\n      \
    \  }\n        (index + 1, odd)\n    });\n    array.sort_by(|a, b| {\n        if\
    \ sum & 1 == 1 {\n            a.cmp(b)\n        } else {\n            b.cmp(a)\n\
    \        }\n    });\n    array", "    let mut array = array;\n    let first =\
    \ array[0];\n    let last = array[array.len() - 1];\n    let sum = first + last;\n\
    \    if sum % 2 == 0 {\n        array.sort_by(|a, b| b.cmp(a));\n    } else {\n\
    \        array.sort_by(|a, b| a.cmp(b));\n    }\n    array", "    let sum = array[0]\
    \ + array[array.len() - 1];\n    if sum % 2 == 0 {\n        array.sort_by(|a,\
    \ b| b.cmp(a));\n    } else {\n        array.sort_by(|a, b| a.cmp(b));\n    }\n\
    \    array", "    let mut res = array.clone();\n    if array.is_empty() {\n  \
    \      return res;\n    }\n    let mut left = 0;\n    let mut right = array.len()\
    \ - 1;\n    let mut sort_condition = array[left] + array[right] > 0;\n    while\
    \ left <= right {\n        if sort_condition {\n            if res[left] > res[right]\
    \ {\n                res.swap(left, right);\n            }\n            right\
    \ -= 1;\n        } else {\n            if res[left] < res[right] {\n         \
    \       res.swap(left, right);\n            }\n            left += 1;\n      \
    \  }\n        sort_condition = res[left] + res[right] > 0;\n    }\n    res", " \
    \   // TODO\n    let mut result = array.clone();\n    let mut i = 0;\n    let\
    \ mut j = array.len() - 1;\n    if (array[0] + array[array.len() - 1]) % 2 ==\
    \ 0 {\n        while i < j {\n            if array[i] < array[j] {\n         \
    \       result[i] = array[j];\n                result[j] = array[i];\n       \
    \         i += 1;\n                j -= 1;\n            } else {\n           \
    \     i += 1;\n            }\n        }\n    } else {\n        while i < j {\n\
    \            if array[i] > array[j] {\n                result[i] = array[j];\n\
    \                result[j] = array[i];\n                i += 1;\n            \
    \    j -= 1;\n            } else {\n                i += 1;\n            }\n \
    \       }\n    }\n    result", "    if array.len() <= 1 {\n        return array;\n\
    \    }\n    let mut index = 1;\n    let mut swapped = true;\n    let mut arr =\
    \ array.clone();\n    let is_even = (array[0] + array[array.len() - 1]) % 2 ==\
    \ 0;\n    while swapped {\n        swapped = false;\n        for i in 1..arr.len()\
    \ - index + 1 {\n            let is_less = if is_even {\n                arr[i\
    \ - 1] < arr[i]\n            } else {\n                arr[i - 1] > arr[i]\n \
    \           };\n            if is_less {\n                let swap = arr[i - 1];\n\
    \                arr[i - 1] = arr[i];\n                arr[i] = swap;\n      \
    \          swapped = true;\n            }\n        }\n        index += 1;\n  \
    \  }\n    arr", "    let mut result = array.clone();\n    result.sort_by(|a, b|\
    \ {\n        let sum = a + b;\n        if sum % 2 == 0 {\n            b.cmp(a)\n\
    \        } else {\n            a.cmp(b)\n        }\n    });\n    result", "  \
    \  let mut res = array.clone();\n    if array.len() > 0 {\n        if array[0]\
    \ + array[array.len() - 1] % 2 == 0 {\n            res.sort_by(|a, b| b.cmp(a));\n\
    \        } else {\n            res.sort_by(|a, b| a.cmp(b));\n        }\n    }\n\
    \    res", "    let length = array.len();\n    if length == 0 {\n        return\
    \ array;\n    }\n    let mut vec = vec![array[0]];\n    for idx in 1..length {\n\
    \        let array_idx = array[idx];\n        for val in vec.iter_mut() {\n  \
    \          if array_idx > *val {\n                val = &array_idx;\n        \
    \        break;\n            }\n        }\n        vec.push(array_idx);\n    }\n\
    \    vec", "    let mut odd_array = vec![];\n    let mut even_array = vec![];\n\
    \    for i in 0..array.len() {\n        let item = array[i];\n        if item\
    \ % 2 == 0 {\n            even_array.push(item);\n        } else {\n         \
    \   odd_array.push(item);\n        }\n    }\n    odd_array.sort();\n    even_array.sort();\n\
    \    let mut sorted_array = vec![];\n    if odd_array.len() + even_array.len()\
    \ % 2 == 0 {\n        sorted_array.append(&mut odd_array);\n        sorted_array.append(&mut\
    \ even_array);\n    } else {\n        sorted_array.append(&mut even_array);\n\
    \        sorted_array.append(&mut odd_array);\n    }\n    sorted_array", "   \
    \ let mut array = array;\n    let sum: isize = array[0] + array[array.len() -\
    \ 1];\n    if sum % 2 == 0 {\n        array.sort_by(|a, b| b.cmp(a));\n    } else\
    \ {\n        array.sort_by(|a, b| a.cmp(b));\n    }\n    array", "    let sum\
    \ = array[0] + array[array.len() - 1];\n    let result = if sum % 2 == 0 {\n \
    \       array.clone().sort();\n        array.clone().sort_by(|a, b| b.cmp(a));\n\
    \    } else {\n        array.clone().sort();\n    };\n    result", "    let mut\
    \ result = Vec::with_capacity(array.len());\n    result.extend_from_slice(&array);\n\
    \    let len = result.len();\n    let mut is_even = (result[0] + result[len -\
    \ 1]) % 2 == 0;\n    if is_even {\n        result.sort_by(|a, b| b.cmp(a));\n\
    \    } else {\n        result.sort_by(|a, b| a.cmp(b));\n    }\n    result", " \
    \   let mut ret: Vec<isize> = array.to_vec();\n    // if (array[0] + array[array.len()\
    \ - 1]) % 2 == 0 {\n    //     ret.sort_by(|a, b| b.cmp(a));\n    // } else {\n\
    \    //     ret.sort_by(|a, b| a.cmp(b));\n    // }\n    if (array[0] + array[array.len()\
    \ - 1]) % 2 == 0 {\n        ret.sort_by(|a, b| b.cmp(a));\n    } else {\n    \
    \    ret.sort_by(|a, b| a.cmp(b));\n    }\n    ret", "    let n = array.len();\n\
    \    let mut array = array;\n    let mut left = 0;\n    let mut right = n - 1;\n\
    \    if n % 2 == 0 {\n        while left < right {\n            if array[left]\
    \ > array[right] {\n                array.swap(left, right);\n            }\n\
    \            left += 1;\n            right -= 1;\n        }\n    } else {\n  \
    \      while left < right {\n            if array[left] < array[right] {\n   \
    \             array.swap(left, right);\n            }\n            left += 1;\n\
    \            right -= 1;\n        }\n    }\n    array", "    let sum = array[0]\
    \ + array[array.len() - 1];\n    if sum % 2 == 0 {\n        let mut res = array.clone();\n\
    \        res.sort_by(|a, b| b.cmp(a));\n        res\n    } else {\n        let\
    \ mut res = array.clone();\n        res.sort();\n        res\n    }", "    let\
    \ mut array = array;\n    let mut first = 0;\n    let mut last = array.len() -\
    \ 1;\n    array.sort_by(|a, b| {\n        if (first + last) % 2 == 0 {\n     \
    \       b.cmp(a)\n        } else {\n            a.cmp(b)\n        }\n    });\n\
    \    first += 1;\n    last -= 1;\n    array", "    let mut array = array;\n  \
    \  array.sort_by(|a, b| if ((0 + (array.len() - 1)) % 2) == 0 { b.cmp(a) } else\
    \ { a.cmp(b) });\n    array", "    let mut res = array.clone();\n    let l = res.len();\n\
    \    if l > 1 {\n        if (res[0] + res[l - 1]) % 2 == 0 {\n            res.sort_by(|a,\
    \ b| b.cmp(a));\n        } else {\n            res.sort_by(|a, b| a.cmp(b));\n\
    \        }\n    }\n    res", "    let len = array.len();\n    let mut array =\
    \ array;\n    if len > 1 {\n        if len % 2 == 0 {\n            for i in 1..len\
    \ {\n                for j in (1..i + 1).rev() {\n                    if array[j]\
    \ > array[j - 1] {\n                        array.swap(j, j - 1);\n          \
    \          }\n                }\n            }\n        } else {\n           \
    \ for i in 1..len {\n                for j in (1..i + 1).rev() {\n           \
    \         if array[j] < array[j - 1] {\n                        array.swap(j,\
    \ j - 1);\n                    }\n                }\n            }\n        }\n\
    \    }\n    array", "    let (mut first, mut last) = (array[0], array[array.len()\
    \ - 1]);\n    let sorted = if (first + last) % 2 == 0 {\n        array.sort_by(|a,\
    \ b| b.cmp(a));\n        array\n    } else {\n        array.sort_by(|a, b| a.cmp(b));\n\
    \        array\n    };\n    sorted", "    let mut result = array.clone();\n  \
    \  if result.len() < 2 {\n        return result;\n    }\n    if (result[0] + result[result.len()\
    \ - 1]) % 2 == 0 {\n        result.sort_by(|a, b| b.cmp(a));\n    } else {\n \
    \       result.sort_by(|a, b| a.cmp(b));\n    }\n    result", "    let sum: isize\
    \ = array[0] + array[array.len() - 1];\n    if sum % 2 == 0 {\n        array.sort_by(|a,\
    \ b| b.cmp(a));\n    } else {\n        array.sort_by(|a, b| a.cmp(b));\n    }\n\
    \    array", "    // 1. Sum first index value and last index value\n    let first_index\
    \ = array[0];\n    let last_index = array[array.len() - 1];\n    let sum = first_index\
    \ + last_index;\n\n    // 2. Create a new array, copy given array and sort it\n\
    \    let mut new_array = array.clone();\n    new_array.sort();\n\n    // 3. Return\
    \ new array in ascending order if the sum is odd, or descending order if the sum\
    \ is even\n    if sum % 2 == 0 {\n        new_array.reverse();\n    }\n\n    new_array",
  "    let mut array_cpy = array.clone();\n    let condition = array[0] + array[array.len()\
    \ - 1];\n    let len = array.len();\n    let mut res = vec![];\n    if condition\
    \ % 2 == 0 {\n        array_cpy.sort_by(|a, b| b.cmp(a));\n        res = array_cpy;\n\
    \    } else {\n        array_cpy.sort_by(|a, b| a.cmp(b));\n        res = array_cpy;\n\
    \    }\n    res", '    array', "    let len = array.len();\n    let first = array[0];\n\
    \    let last = array[len - 1];\n    if (first + last) % 2 == 0 {\n        array.sort_by(|a,\
    \ b| b.cmp(a));\n    } else {\n        array.sort_by(|a, b| a.cmp(b));\n    }\n\
    \    array", "    let mut result = array.clone();\n    let first = result[0];\n\
    \    let last = result[result.len() - 1];\n    result.sort_by(|a, b| {\n     \
    \   if (first + last) % 2 == 0 {\n            b.cmp(a)\n        } else {\n   \
    \         a.cmp(b)\n        }\n    });\n    result", "    let mut result = array.clone();\n\
    \    if array.len() < 2 {\n        return result;\n    }\n    if array[0] + array[array.len()\
    \ - 1] % 2 == 0 {\n        result.sort_by(|a, b| b.cmp(a));\n    } else {\n  \
    \      result.sort_by(|a, b| a.cmp(b));\n    }\n    result", "    let mut result\
    \ = array.clone();\n    let array_len = array.len();\n    if array_len <= 1 {\n\
    \        return result;\n    }\n    let compare_function = if (array[0] + array[array_len\
    \ - 1]) % 2 == 0 {\n        isize::cmp\n    } else {\n        isize::reverse_cmp\n\
    \    };\n    result.sort_by(compare_function);\n    result", "    if array.is_empty()\
    \ {\n        return vec![];\n    }\n    let mut sorted_array = array.clone();\n\
    \    let mut sum_of_first_and_last = array[0] + array[array.len() - 1];\n    if\
    \ sum_of_first_and_last % 2 == 0 {\n        sorted_array.sort_by(|a, b| b.cmp(a));\n\
    \    } else {\n        sorted_array.sort_by(|a, b| a.cmp(b));\n    }\n    sorted_array",
  "    let mut sorted = array.clone();\n    sorted.sort();\n    let sum: isize = sorted.iter().sum();\n\
    \    if sum % 2 == 0 {\n        sorted.reverse();\n    }\n    sorted", "    let\
    \ sum = array[0] + array[array.len() - 1];\n    let mut array = array;\n    array.sort_by(|a,\
    \ b| {\n        if sum % 2 == 0 {\n            b.cmp(a)\n        } else {\n  \
    \          a.cmp(b)\n        }\n    });\n    array", "    let mut array = array;\n\
    \    let mut a = 0;\n    let mut b = array.len() - 1;\n    while a < b {\n   \
    \     if (array[a] + array[b]) % 2 == 0 {\n            array.swap(a, b);\n   \
    \     }\n        a += 1;\n        b -= 1;\n    }\n    array", "    let mut array\
    \ = array;\n    array.sort_by(|a, b| {\n        let a_pair = (a, a.rem_euclid(2));\n\
    \        let b_pair = (b, b.rem_euclid(2));\n        match (a_pair, b_pair) {\n\
    \            ((first_value, first_remainder), (second_value, second_remainder))\
    \ => {\n                if first_remainder == second_remainder {\n           \
    \         first_value.cmp(&second_value)\n                } else {\n         \
    \           second_remainder.cmp(&first_remainder)\n                }\n      \
    \      }\n        }\n    });\n    array", "    let mut array = array;\n    let\
    \ is_odd = array[0] + array[array.len() - 1] % 2 == 1;\n    array.sort_by(|a,\
    \ b| {\n        if is_odd {\n            b.cmp(a)\n        } else {\n        \
    \    a.cmp(b)\n        }\n    });\n    array", "    let mut output = array.clone();\n\
    \    let mut i = 0;\n    let sum = output[0] + output[output.len() - 1];\n   \
    \ if sum % 2 == 0 {\n        output.sort_by(|a, b| b.cmp(a));\n    } else {\n\
    \        output.sort_by(|a, b| a.cmp(b));\n    }\n    output", "    let mut arr\
    \ = array.clone();\n    let sum = array[0] + array[array.len() - 1];\n    if sum\
    \ % 2 == 0 {\n        arr.sort_by(|a, b| b.cmp(a));\n    } else {\n        arr.sort_by(|a,\
    \ b| a.cmp(b));\n    }\n    arr", "    let mut arr = array.clone();\n    arr.sort();\n\
    \    if array[0] + array[array.len() - 1] % 2 == 0 {\n        arr.reverse();\n\
    \    }\n    arr", "    let mut array = array;\n    array.sort_by(|a, b| {\n  \
    \      let a = *a;\n        let b = *b;\n        if (a + b) % 2 == 0 {\n     \
    \       b.cmp(&a)\n        } else {\n            a.cmp(&b)\n        }\n    });\n\
    \    array", "    let mut sum = 0;\n    let mut array = array;\n    for i in 0..array.len()\
    \ {\n        sum += array[i];\n    }\n    if sum % 2 == 0 {\n        array.sort_by(|a,\
    \ b| b.cmp(a));\n    } else {\n        array.sort_by(|a, b| a.cmp(b));\n    }\n\
    \    array", "    if array.len() < 1 {\n        return array;\n    }\n    let\
    \ sum: isize = array[0] + array[array.len() - 1];\n    if sum % 2 == 0 {\n   \
    \     array.sort_by(|a, b| b.cmp(a));\n    } else {\n        array.sort_by(|a,\
    \ b| a.cmp(b));\n    }\n    array", "    let res = vec![];\n    return res;",
  "    let first_last_sum = array[0] + array[array.len() - 1];\n    let mut sorted_array\
    \ = Vec::from(array);\n    if first_last_sum % 2 == 0 {\n        sorted_array.sort_by(|a,\
    \ b| b.cmp(a));\n    } else {\n        sorted_array.sort_by(|a, b| a.cmp(b));\n\
    \    }\n    sorted_array", "    let mut result = array.clone();\n    result.sort_by(|a,\
    \ b| {\n        let sum = a + b;\n        if sum % 2 == 0 {\n            b.cmp(a)\n\
    \        } else {\n            a.cmp(b)\n        }\n    });\n    result", "  \
    \  let mut new_array = array.clone();\n    let odd = array[0] + array[array.len()\
    \ - 1] % 2 != 0;\n    new_array.sort_by(|a, b| {\n        if odd {\n         \
    \   a.cmp(b)\n        } else {\n            b.cmp(a)\n        }\n    });\n   \
    \ new_array", "    if array.is_empty() {\n        return vec![];\n    }\n    if\
    \ array.len() == 1 {\n        return array;\n    }\n    let mut array = array;\n\
    \    let mut sorted_array = Vec::with_capacity(array.len());\n    let index_sum\
    \ = array[0] + array[array.len() - 1];\n    let mut is_ascending = if index_sum\
    \ % 2 == 0 { true } else { false };\n    while !array.is_empty() {\n        let\
    \ (first, last) = (array[0], array[array.len() - 1]);\n        if is_ascending\
    \ {\n            sorted_array.push(first);\n            sorted_array.push(last);\n\
    \        } else {\n            sorted_array.push(last);\n            sorted_array.push(first);\n\
    \        }\n        array.remove(0);\n        array.remove(array.len() - 1);\n\
    \        is_ascending = !is_ascending;\n    }\n    sorted_array", "    if array.is_empty()\
    \ {\n        return vec![];\n    }\n    if array.len() < 2 {\n        return array;\n\
    \    }\n    let mut array = array;\n    for i in 0..array.len() {\n        for\
    \ j in 0..array.len() - 1 {\n            if array[j] < array[j + 1] {\n      \
    \          array.swap(j, j + 1);\n            }\n        }\n    }\n    return\
    \ array;", "    let mut new_array = array.clone();\n    new_array.sort();\n  \
    \  if (array[0] + array[array.len() - 1]) % 2 == 0 {\n        new_array.reverse();\n\
    \    }\n    new_array", "    let mut result = array.clone();\n    let even = if\
    \ (array[0] + array[array.len() - 1]) % 2 == 0 {\n        true\n    } else {\n\
    \        false\n    };\n    result.sort_by(|a, b| {\n        if even {\n     \
    \       b.cmp(a)\n        } else {\n            a.cmp(b)\n        }\n    });\n\
    \    result", "    let mut arr = array.clone();\n    let len = arr.len();\n  \
    \  let mut left = 0;\n    let mut right = len - 1;\n    while left < right {\n\
    \        let left_value = arr[left];\n        let right_value = arr[right];\n\
    \        if left_value % 2 == 0 && right_value % 2 == 1 {\n            arr[left]\
    \ = right_value;\n            arr[right] = left_value;\n            left += 1;\n\
    \            right -= 1;\n        } else if left_value % 2 == 1 && right_value\
    \ % 2 == 0 {\n            left += 1;\n            right -= 1;\n        } else\
    \ if left_value % 2 == 0 && right_value % 2 == 0 {\n            right -= 1;\n\
    \        } else {\n            left += 1;\n        }\n    }\n    arr.sort();\n\
    \    arr", "    let mut result = array.clone();\n    if array.len() > 0 {\n  \
    \      let sum = array[0] + array[array.len() - 1];\n        result.sort_by(|a,\
    \ b| if sum % 2 == 0 { a.cmp(b) } else { b.cmp(a) });\n    }\n    result", " \
    \   let mut array = array;\n    let mut idx = 0;\n    while idx < array.len()\
    \ {\n        let mut start = idx;\n        while idx < array.len() && start <\
    \ array.len() - 1 {\n            if (start + array.len() - 1) % 2 == 0 {\n   \
    \             if array[start] < array[start + 1] {\n                    let temp\
    \ = array[start];\n                    array[start] = array[start + 1];\n    \
    \                array[start + 1] = temp;\n                }\n            } else\
    \ {\n                if array[start] > array[start + 1] {\n                  \
    \  let temp = array[start];\n                    array[start] = array[start +\
    \ 1];\n                    array[start + 1] = temp;\n                }\n     \
    \       }\n            start += 1;\n        }\n        idx += 1;\n    }\n    array",
  "    let mut copy = array.clone();\n    copy.sort();\n    if array[0] + array[array.len()\
    \ - 1] % 2 == 0 {\n        copy.reverse();\n    }\n    copy", "    let mut array\
    \ = array;\n    let sum = array[0] + array[array.len() - 1];\n    array.sort_by(|a,\
    \ b| {\n        if sum % 2 == 0 {\n            b.cmp(a)\n        } else {\n  \
    \          a.cmp(b)\n        }\n    });\n    array", "    let mut array = array;\n\
    \    array.sort_by(|a, b| if (a + b) % 2 == 0 { b.cmp(a) } else { a.cmp(b) });\n\
    \    array", "    if array.len() == 0 {\n        return vec![];\n    }\n    let\
    \ mut array = array;\n    let sort_key = array[0] + array[array.len() - 1];\n\
    \    array.sort_by(|a, b| {\n        if sort_key % 2 == 0 {\n            return\
    \ b.cmp(a);\n        }\n        a.cmp(b)\n    });\n    array", "    let n = array.len();\n\
    \    let (head, tail) = array.split_at(n / 2);\n    let mut res = Vec::with_capacity(n);\n\
    \    let mut head_iter = head.iter();\n    let mut tail_iter = tail.iter();\n\
    \    let mut head_count = head.len();\n    let mut tail_count = tail.len();\n\
    \    while head_count > 0 && tail_count > 0 {\n        if head_iter.next().unwrap()\
    \ < tail_iter.next().unwrap() {\n            res.push(*head_iter.next().unwrap());\n\
    \            head_count -= 1;\n        } else {\n            res.push(*tail_iter.next().unwrap());\n\
    \            tail_count -= 1;\n        }\n    }\n    while head_count > 0 {\n\
    \        res.push(*head_iter.next().unwrap());\n        head_count -= 1;\n   \
    \ }\n    while tail_count > 0 {\n        res.push(*tail_iter.next().unwrap());\n\
    \        tail_count -= 1;\n    }\n    res", "    if array.len() == 0 {\n     \
    \   return array;\n    }\n    let mut res = array.clone();\n    let sum = array[0]\
    \ + array[array.len() - 1];\n    if sum % 2 == 0 {\n        res.sort_by(|a, b|\
    \ b.cmp(a));\n    } else {\n        res.sort_by(|a, b| a.cmp(b));\n    }\n   \
    \ res", "    let mut result = array.clone();\n    let first = array[0];\n    let\
    \ last = array[array.len() - 1];\n    if (first + last) % 2 == 0 {\n        result.sort_by(|a,\
    \ b| b.cmp(a));\n    } else {\n        result.sort_by(|a, b| a.cmp(b));\n    }\n\
    \    result", "    let mut v = array.clone();\n    let mut i = 0;\n    let j =\
    \ v.len() - 1;\n    while i < j {\n        if (v[i] + v[j]) % 2 == 0 {\n     \
    \       v.swap(i, j);\n        }\n        i += 1;\n        j -= 1;\n    }\n  \
    \  v.sort();\n    v", "    let sum = array[0] + array[array.len() - 1];\n    let\
    \ mut result = array.clone();\n    let order = if sum % 2 == 0 { Ordering::Greater\
    \ } else { Ordering::Less };\n    result.sort_by(|a, b| a.cmp(b).reverse().then(order));\n\
    \    result", "    let length = array.len();\n    let mut res = array.clone();\n\
    \    if length <= 0 {\n        return res;\n    }\n    let is_odd = array[0] +\
    \ array[length - 1] % 2 != 0;\n    res.sort_by(|a, b| if is_odd { b.cmp(a) } else\
    \ { a.cmp(b) });\n    res", "    let mut sum = 0;\n    let mut vec = array.clone();\n\
    \    let mut min = 0;\n    let mut max = 0;\n    for (i, v) in array.iter().enumerate()\
    \ {\n        if i == 0 {\n            min = *v;\n            max = *v;\n     \
    \   } else {\n            if *v < min {\n                min = *v;\n         \
    \   } else if *v > max {\n                max = *v;\n            }\n        }\n\
    \        sum += *v;\n    }\n    if sum % 2 == 0 {\n        vec.sort_by(|a, b|\
    \ b.cmp(a));\n    } else {\n        vec.sort_by(|a, b| a.cmp(b));\n    }\n   \
    \ return vec;", "    let mut arr = array.clone();\n    arr.sort();\n    if array[0]\
    \ + array[array.len() - 1] % 2 == 0 {\n        arr.reverse();\n    }\n    arr",
  "    if array.is_empty() {\n        return vec![];\n    }\n    let mut array = array;\n\
    \    let (mut start, mut end) = (0, array.len() - 1);\n    loop {\n        while\
    \ array[start] % 2 == 1 {\n            start += 1;\n        }\n        while array[end]\
    \ % 2 == 0 {\n            end -= 1;\n        }\n        if start >= end {\n  \
    \          break;\n        }\n        array.swap(start, end);\n    }\n    // let\
    \ left_array = &array[..start];\n    // let right_array = &array[start..];\n \
    \   let mut left_array = Vec::with_capacity(start);\n    let mut right_array =\
    \ Vec::with_capacity(array.len() - start);\n    for item in &array[..start] {\n\
    \        left_array.push(*item);\n    }\n    for item in &array[start..] {\n \
    \       right_array.push(*item);\n    }\n    // sort array\n    if (array[0] +\
    \ array[array.len() - 1]) % 2 == 0 {\n        // sort in descending order\n  \
    \      left_array.sort_by(|a, b| b.cmp(a));\n        right_array.sort_by(|a, b|\
    \ b.cmp(a));\n    } else {\n        // sort in ascending order\n        left_array.sort_by(|a,\
    \ b| a.cmp(b));\n        right_array.sort_by(|a, b| a.cmp(b));\n    }\n    for\
    \ i in 0..start {\n        array[i] = left_array[i];\n    }\n    for i in start..array.len()\
    \ {\n        array[i] = right_array[i - start];\n    }\n    array", "    let mut\
    \ clone = array.clone();\n    let sum: isize = array.first().unwrap() + array.last().unwrap();\n\
    \    let less_than = if sum % 2 == 0 {\n        false\n    } else {\n        true\n\
    \    };\n    clone.sort_by(|a, b| {\n        if less_than {\n            a.cmp(b)\n\
    \        } else {\n            b.cmp(a)\n        }\n    });\n    clone", "   \
    \ let len = array.len();\n    let sum = array[0] + array[len - 1];\n    let mut\
    \ array = array;\n    if sum % 2 == 0 {\n        array.sort_by(|a, b| b.cmp(a));\n\
    \    } else {\n        array.sort_by(|a, b| a.cmp(b));\n    }\n    array", " \
    \   let mut vec = array.clone();\n    vec.sort();\n    if (vec[0] + vec[vec.len()\
    \ - 1]) % 2 == 0 {\n        vec.reverse();\n    }\n    vec", "    let mut array\
    \ = array;\n    array.sort_by(|a, b| {\n        let sum = a + b;\n        if sum\
    \ % 2 == 0 {\n            b.cmp(a)\n        } else {\n            a.cmp(b)\n \
    \       }\n    });\n    array", "    let mut vec = array.clone();\n    vec.sort();\n\
    \    vec", "    let mut sort_array = array.clone();\n    let mut first_value:\
    \ isize = 0;\n    let mut last_value: isize = 0;\n    sort_array.sort();\n   \
    \ first_value = sort_array[0];\n    last_value = sort_array[sort_array.len() -\
    \ 1];\n    if (first_value + last_value) % 2 == 0 {\n        sort_array.reverse();\n\
    \    }\n    sort_array", "    let mut res = array.clone();\n    if (array[0] +\
    \ array[array.len() - 1]) % 2 == 0 {\n        res.sort_by(|a, b| b.cmp(a));\n\
    \    } else {\n        res.sort_by(|a, b| a.cmp(b));\n    }\n    res", "    if\
    \ array.is_empty() {\n        return vec![];\n    }\n    let mut array = array;\n\
    \    if (array[0] + array[array.len() - 1]) % 2 == 0 {\n        array.sort_by(|a,\
    \ b| b.cmp(a));\n    } else {\n        array.sort_by(|a, b| a.cmp(b));\n    }\n\
    \    array", "    // start < end => odd\n    // start > end => even\n    // start\
    \ == end => odd\n    // sort_by_key(|v| v % 2)\n    fn sum(start: usize, end:\
    \ usize) -> isize {\n        array[start] + array[end]\n    }\n    let mut new_array\
    \ = array.clone();\n    let mut start = 0;\n    let mut end = array.len() - 1;\n\
    \    while start < end {\n        if sum(start, end) % 2 == 0 {\n            new_array[start]\
    \ = array[end];\n            new_array[end] = array[start];\n        }\n     \
    \   start += 1;\n        end -= 1;\n    }\n    new_array", "    let mut result\
    \ = array.clone();\n    if (result[0] + result[result.len() - 1]) % 2 == 0 {\n\
    \        result.sort_by(|a, b| b.cmp(a));\n    } else {\n        result.sort_by(|a,\
    \ b| a.cmp(b));\n    }\n    result", "    let mut array = array;\n    let condition\
    \ = array[0] + array[array.len() - 1];\n    if condition % 2 == 0 {\n        array.sort_by(|a,\
    \ b| b.cmp(a));\n    } else {\n        array.sort_by(|a, b| a.cmp(b));\n    }\n\
    \    array", "    let mut v = array.clone();\n    let len = v.len();\n    if (v[0]\
    \ + v[len - 1]) % 2 == 0 {\n        v.sort_by(|a, b| b.cmp(a));\n    } else {\n\
    \        v.sort_by(|a, b| a.cmp(b));\n    }\n    v", "    let mut sorted_array\
    \ = array.clone();\n    if (array[0] + array[array.len() - 1]) % 2 == 0 {\n  \
    \      sorted_array.sort_by(|a, b| b.cmp(a));\n    } else {\n        sorted_array.sort_by(|a,\
    \ b| a.cmp(b));\n    }\n    sorted_array", "    let n = array.len();\n    let\
    \ array: Vec<_> = array.into_iter().enumerate().collect();\n    let mut result\
    \ = array.clone();\n    result.sort_by(|a, b| {\n        let (x1, i1) = *a;\n\
    \        let (x2, i2) = *b;\n        let (sum1, sum2) = (i1 + n - i2, i2 + n -\
    \ i1);\n        match (sum1 % 2, sum2 % 2) {\n            (0, 0) => x2.cmp(&x1),\n\
    \            (1, 1) => x1.cmp(&x2),\n            _ => x1.cmp(&x2),\n        }\n\
    \    });\n    result.into_iter().map(|x| x.0).collect()", "    let length = array.len();\n\
    \    let first = array[0];\n    let last = array[length - 1];\n    if (first +\
    \ last) % 2 == 0 {\n        array.sort_by(|a, b| b.cmp(a));\n    } else {\n  \
    \      array.sort_by(|a, b| a.cmp(b));\n    }\n    array", "    // get the length\
    \ of the array\n    let mut length = array.len();\n    // get the sum of the first\
    \ and last index value\n    let sum = array[0] + array[length - 1];\n    // check\
    \ the sum is odd or even\n    if sum % 2 == 0 {\n        // sort the array in\
    \ descending order\n        array.sort_by(|a, b| b.cmp(a));\n    } else {\n  \
    \      // sort the array in ascending order\n        array.sort_by(|a, b| a.cmp(b));\n\
    \    }\n    // return the array\n    array", "    let mut sorted = array.clone();\n\
    \    sorted.sort();\n    let reverse = sorted.clone();\n    reverse.reverse();\n\
    \    if (array[0] + array[array.len() - 1]) % 2 == 0 {\n        reverse\n    }\
    \ else {\n        sorted\n    }", "    let first_idx = array[0];\n    let last_idx\
    \ = array[array.len() - 1];\n    let mut sorted_array = array.clone();\n    if\
    \ (first_idx + last_idx) % 2 == 0 {\n        sorted_array.sort_by(|a, b| b.cmp(a));\n\
    \    } else {\n        sorted_array.sort_by(|a, b| a.cmp(b));\n    }\n    sorted_array",
  "    let len = array.len();\n    let mut v = array.clone();\n    if len > 0 {\n\
    \        if (array[0] + array[len - 1]) % 2 == 0 {\n            v.sort_by(|a,\
    \ b| b.cmp(a));\n        } else {\n            v.sort_by(|a, b| a.cmp(b));\n \
    \       }\n    }\n    v", "    if array.is_empty() {\n        return array;\n\
    \    }\n    let mut clone = array.clone();\n    let head = clone[0];\n    let\
    \ tail = clone[clone.len() - 1];\n    let mut func = sort_asc;\n    if (head +\
    \ tail) % 2 == 0 {\n        func = sort_desc;\n    }\n    func(&mut clone);\n\
    \    clone", "    if array.is_empty() {\n        return vec![];\n    }\n    let\
    \ mut array = array;\n    let mut sorted = vec![];\n    sorted.push(array.pop().unwrap());\n\
    \    while !array.is_empty() {\n        let num = array.pop().unwrap();\n    \
    \    for (i, num2) in sorted.iter().enumerate() {\n            if (i + array.len())\
    \ % 2 == 0 {\n                if num >= *num2 {\n                    sorted.insert(i,\
    \ num);\n                    break;\n                }\n            } else {\n\
    \                if num <= *num2 {\n                    sorted.insert(i, num);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     if sorted.len() == array.len() + 1 {\n            sorted.push(num);\n  \
    \      }\n    }\n    sorted", "    let mut result = array.clone();\n    if (array[0]\
    \ + array[array.len() - 1]) % 2 == 0 {\n        result.sort_by(|a, b| b.cmp(a));\n\
    \    } else {\n        result.sort_by(|a, b| a.cmp(b));\n    }\n    result", " \
    \   if array.is_empty() {\n        return array;\n    }\n    let mut array = array;\n\
    \    if array[0] + array[array.len() - 1] % 2 == 0 {\n        array.sort_by(|a,\
    \ b| b.cmp(a));\n    } else {\n        array.sort_by(|a, b| a.cmp(b));\n    }\n\
    \    array", "    let sum = array[0] + array[array.len() - 1];\n    let mut sorted\
    \ = array.clone();\n    sorted.sort();\n    if sum % 2 == 0 {\n        sorted.reverse();\n\
    \    }\n    sorted", "    let mut array = array;\n    let (mut left, mut right)\
    \ = (0, array.len() - 1);\n    while left < right {\n        if (array[left] +\
    \ array[right]) % 2 == 0 {\n            array.swap(left, right);\n        }\n\
    \        if array[left] % 2 == 0 {\n            left += 1;\n        }\n      \
    \  if array[right] % 2 == 1 {\n            right -= 1;\n        }\n    }\n   \
    \ if array[left] % 2 == 0 {\n        array[left..].sort();\n    } else {\n   \
    \     array[left..].sort_by(|x, y| y.cmp(x));\n    }\n    array", "    let mut\
    \ tmp = array.clone();\n    tmp.sort();\n    if (array[0] + array[array.len()\
    \ - 1]) % 2 == 0 {\n        tmp.reverse();\n    }\n    tmp", "    let mut a =\
    \ array.clone();\n    if array.len() == 0 {\n        return a;\n    }\n    a.sort();\n\
    \    let mut result = a.clone();\n    let mut start = 0;\n    let mut end = a.len()\
    \ - 1;\n    while start < end {\n        if (start + end) % 2 == 0 {\n       \
    \     result[start] = a[end];\n            result[end] = a[start];\n        }\n\
    \        start += 1;\n        end -= 1;\n    }\n    result", "    let mut array\
    \ = array;\n    array.sort_by(|a, b| {\n        let len = array.len();\n     \
    \   if (array[0] + array[len - 1]) % 2 == 0 {\n            b.cmp(a)\n        }\
    \ else {\n            a.cmp(b)\n        }\n    });\n    array", "    // #1\n \
    \   if array.len() == 0 {\n        return vec![];\n    }\n\n    let mut array\
    \ = array;\n    let sum = array[0] + array[array.len() - 1];\n    array.sort_by(|a,\
    \ b| {\n        if sum % 2 == 0 {\n            b.cmp(a)\n        } else {\n  \
    \          a.cmp(b)\n        }\n    });\n    array", "    let mut result = array.clone();\n\
    \    if array.is_empty() {\n        return result;\n    }\n    result.sort_by(|a,\
    \ b| (a + b) % 2);\n    result", "    let mut new_array = array.clone();\n   \
    \ new_array.sort();\n    if (array[0] + array[array.len() - 1]) % 2 == 0 {\n \
    \       new_array.reverse();\n    }\n    new_array", "    // TODO\n    return\
    \ array;", "    let mut array = array;\n    let mut max_num = isize::max_value();\n\
    \    let mut min_num = isize::min_value();\n    let mut i = 0;\n    let length\
    \ = array.len();\n    let mut j = length - 1;\n    let mut array_new = vec![];\n\
    \    if (array[0] + array[length - 1]) % 2 == 0 {\n        while i < j {\n   \
    \         if array[i] > max_num {\n                max_num = array[i];\n     \
    \       }\n            if array[j] < min_num {\n                min_num = array[j];\n\
    \            }\n            i += 1;\n            j -= 1;\n        }\n        i\
    \ = 0;\n        j = length - 1;\n        while i < j {\n            if array[i]\
    \ == max_num {\n                array_new.push(array[i]);\n                i +=\
    \ 1;\n            }\n            if array[j] == min_num {\n                array_new.push(array[j]);\n\
    \                j -= 1;\n            }\n        }\n        array_new\n    } else\
    \ {\n        while i < j {\n            if array[i] < min_num {\n            \
    \    min_num = array[i];\n            }\n            if array[j] > max_num {\n\
    \                max_num = array[j];\n            }\n            i += 1;\n   \
    \         j -= 1;\n        }\n        i = 0;\n        j = length - 1;\n      \
    \  while i < j {\n            if array[i] == min_num {\n                array_new.push(array[i]);\n\
    \                i += 1;\n            }\n            if array[j] == max_num {\n\
    \                array_new.push(array[j]);\n                j -= 1;\n        \
    \    }\n        }\n        array_new\n    }", "    let mut array = array;\n  \
    \  match (array[0] + array[array.len() - 1]) % 2 {\n        0 => array.sort_by(|a,\
    \ b| b.cmp(a)),\n        _ => array.sort_by(|a, b| a.cmp(b)),\n    }\n    array",
  "    let mut _array = array.clone();\n    _array.sort();\n    _array", "    if array.len()\
    \ == 0 {\n        return array;\n    }\n    let mut res = array.clone();\n   \
    \ let flag = (res[0] + res[res.len() - 1]) % 2 == 0;\n    res.sort_by(|a, b| {\n\
    \        if flag {\n            b.cmp(a)\n        } else {\n            a.cmp(b)\n\
    \        }\n    });\n    res", "    let mut ret: Vec<isize> = array.clone();\n\
    \    let pivot = if ret.first().unwrap() + ret.last().unwrap() % 2 == 0 {\n  \
    \      Ordering::Less\n    } else {\n        Ordering::Greater\n    };\n    ret.sort_by(|a,\
    \ b| a.cmp(b).reverse().then(pivot));\n    ret", "    let total = array.len();\n\
    \    let mut arr = array.clone();\n    if total < 2 {\n        return arr;\n \
    \   }\n    if total == 2 {\n        if arr[0] > arr[1] {\n            arr.swap(0,\
    \ 1);\n        }\n        return arr;\n    }\n    let sum = arr[0] + arr[total\
    \ - 1];\n    if sum % 2 == 0 {\n        // asc\n        arr.sort();\n    } else\
    \ {\n        // desc\n        arr.sort_by(|a, b| b.cmp(a));\n    }\n    arr",
  "    let mut vec = array.clone();\n    vec.sort();\n    if array[0] + array[array.len()\
    \ - 1] % 2 == 0 {\n        vec.reverse();\n    }\n    vec", "    let mut result\
    \ = array.clone();\n    let sum = array[0] + array[array.len() - 1];\n    if sum\
    \ % 2 == 0 {\n        result.sort_by(|a, b| b.cmp(a));\n    } else {\n       \
    \ result.sort_by(|a, b| a.cmp(b));\n    }\n    result", "    let mut res = array.clone();\n\
    \    res.sort_by(|a, b| {\n        if (*a + res[res.len() - 1]) % 2 == 0 {\n \
    \           b.cmp(a)\n        } else {\n            a.cmp(b)\n        }\n    });\n\
    \    res", "    let mut array = array;\n    if array.len() == 0 {\n        return\
    \ vec![];\n    }\n    // sort\n    if array[0] + array[array.len() - 1] % 2 ==\
    \ 0 {\n        array.sort_by(|a, b| b.cmp(a));\n    } else {\n        array.sort_by(|a,\
    \ b| a.cmp(b));\n    }\n    array", "    let mut result = array.clone();\n   \
    \ let mut reverse = sum_is_even(&array);\n    sort_order(&mut result, reverse);\n\
    \    result", "    let mut array = array;\n    if array.is_empty() {\n       \
    \ return array;\n    }\n    let sum = array[0] + array[array.len() - 1];\n   \
    \ if sum % 2 == 0 {\n        array.sort_by(|a, b| b.cmp(a));\n    } else {\n \
    \       array.sort_by(|a, b| a.cmp(b));\n    }\n    array", "    let mut sorted\
    \ = array.clone();\n    sorted.sort();\n    let mut reversed = sorted.clone();\n\
    \    reversed.reverse();\n    if (array[0] + array[array.len() - 1]) % 2 == 0\
    \ {\n        reversed\n    } else {\n        sorted\n    }", "    let first =\
    \ array[0];\n    let last = array[array.len() - 1];\n    if (first + last) % 2\
    \ == 0 {\n        let mut sorted = array.clone();\n        sorted.sort_by(|a,\
    \ b| b.cmp(a));\n        sorted\n    } else {\n        let mut sorted = array.clone();\n\
    \        sorted.sort();\n        sorted\n    }", "    let len = array.len();\n\
    \    let mut result = array.clone();\n    if (len < 2) {\n        return result;\n\
    \    }\n    let mid = len/2;\n    if array[0] + array[len-1] % 2 == 0 {\n    \
    \    result[..mid].sort();\n        result[mid..].sort_by(|x, y| y.cmp(x));\n\
    \    } else {\n        result[..mid].sort_by(|x, y| y.cmp(x));\n        result[mid..].sort();\n\
    \    }\n    result", "    let mut clone = array.clone();\n    let len = clone.len();\n\
    \    clone.sort_by(|a, b| if ((len - 1) + 0) % 2 == 0 { b.cmp(a) } else { a.cmp(b)\
    \ });\n    clone", "    let mut array = array;\n    let mut tmp: Vec<isize> =\
    \ Vec::new();\n    let mut index: usize = 0;\n    let mut r_index: usize = array.len()\
    \ - 1;\n    let mut min: isize = 0;\n    let mut max: isize = 0;\n    let mut\
    \ s = array[0] + array[array.len() - 1];\n    if s % 2 == 0 {\n        max = array[0];\n\
    \        for _i in 0..array.len() {\n            for (j, v) in array.iter().enumerate()\
    \ {\n                if *v >= max {\n                    max = *v;\n         \
    \           index = j;\n                }\n            }\n            tmp.push(max);\n\
    \            array[index] = -1;\n            max = 0;\n        }\n    } else {\n\
    \        min = array[0];\n        for _i in 0..array.len() {\n            for\
    \ (j, v) in array.iter().enumerate() {\n                if *v <= min {\n     \
    \               min = *v;\n                    index = j;\n                }\n\
    \            }\n            tmp.push(min);\n            array[index] = 100;\n\
    \            min = 100;\n        }\n    }\n    let mut res: Vec<isize> = Vec::new();\n\
    \    for _i in 0..array.len() {\n        res.push(tmp[r_index]);\n        r_index\
    \ -= 1;\n    }\n    res", "    let mut new_array = array.clone();\n    new_array.sort();\n\
    \    let sum = array[0] + array[array.len() - 1];\n    if sum % 2 == 0 {\n   \
    \     new_array.reverse();\n    }\n    new_array", "    if array.len() < 2 {\n\
    \        return array;\n    }\n    let mut i = 0;\n    let mut j = array.len()\
    \ - 1;\n    let mut v = vec![];\n    if (array[i] + array[j]) % 2 == 0 {\n   \
    \     while i <= j {\n            v.push(array[j]);\n            j -= 1;\n   \
    \         if i > j {\n                break;\n            }\n            v.push(array[i]);\n\
    \            i += 1;\n        }\n    } else {\n        while i <= j {\n      \
    \      v.push(array[i]);\n            i += 1;\n            if i > j {\n      \
    \          break;\n            }\n            v.push(array[j]);\n            j\
    \ -= 1;\n        }\n    }\n    v", "    let mut new_array = array.clone();\n \
    \   let array_len = new_array.len();\n    if array_len > 1 {\n        let sum\
    \ = new_array[0] + new_array[array_len - 1];\n        if sum % 2 == 0 {\n    \
    \        new_array.sort_by(|a, b| b.cmp(a));\n        } else {\n            new_array.sort_by(|a,\
    \ b| a.cmp(b));\n        }\n    }\n    new_array", "    let mut array = array;\n\
    \    array.sort_by(|a, b| (a + b) % 2);\n    array", "    // Compute the odds/evens\
    \ based on the first and last item\n    let sum = array[0] + array[array.len()\
    \ - 1];\n    let odds_evens = if sum % 2 == 0 { true } else { false };\n\n   \
    \ // Bubble sort the items\n    let mut result = array.clone();\n    let mut items_changed\
    \ = true;\n    while items_changed {\n        items_changed = false;\n       \
    \ for i in 0..result.len() - 1 {\n            let j = i + 1;\n            let\
    \ sort_result = if odds_evens {\n                result[i] > result[j]\n     \
    \       } else {\n                result[i] < result[j]\n            };\n    \
    \        if sort_result {\n                result.swap(i, j);\n              \
    \  items_changed = true;\n            }\n        }\n    }\n\n    result", "  \
    \  let mut array = array;\n    if array.iter().fold(0, |acc, x| acc + x) % 2 ==\
    \ 0 {\n        array.sort_by(|a, b| b.cmp(a));\n    } else {\n        array.sort();\n\
    \    }\n    array", '    array', "    let mut v = array.clone();\n    if v.len()\
    \ > 0 {\n        let s = v[0] + v[v.len() - 1];\n        if s % 2 == 0 {\n   \
    \         v.sort_by(|a, b| b.cmp(a));\n        } else {\n            v.sort_by(|a,\
    \ b| a.cmp(b));\n        }\n    }\n    v", "    let mut array = array;\n    let\
    \ len = array.len();\n    let sum = array[0] + array[len - 1];\n    if sum % 2\
    \ == 0 {\n        array.sort_by(|a, b| b.cmp(a));\n    } else {\n        array.sort_by(|a,\
    \ b| a.cmp(b));\n    }\n    array", '    unimplemented!()', "    let mut result\
    \ = array.clone();\n    let l = result.len();\n    let mut odd_indices = vec![];\n\
    \    let mut even_indices = vec![];\n    for i in 0..l {\n        if (i + result[i])\
    \ % 2 == 0 {\n            even_indices.push(i);\n        } else {\n          \
    \  odd_indices.push(i);\n        }\n    }\n    for i in odd_indices {\n      \
    \  for j in 0..l - 1 {\n            if result[j] > result[j + 1] {\n         \
    \       result.swap(j, j + 1);\n            }\n        }\n    }\n    for i in\
    \ even_indices {\n        for j in 0..l - 1 {\n            if result[j] < result[j\
    \ + 1] {\n                result.swap(j, j + 1);\n            }\n        }\n \
    \   }\n    result", "    let mut array = array;\n    let sum = array[0] + array[array.len()\
    \ - 1];\n    if sum % 2 == 0 {\n        array.sort_by(|a, b| b.cmp(a));\n    }\
    \ else {\n        array.sort_by(|a, b| a.cmp(b));\n    }\n    array", "    if\
    \ array.len() <= 1 {\n        return array;\n    }\n    let mut left = Vec::new();\n\
    \    let mut right = Vec::new();\n    let mut pivot = array[0];\n    for i in\
    \ 1..array.len() {\n        if array[i] <= pivot {\n            left.push(array[i]);\n\
    \        } else {\n            right.push(array[i]);\n        }\n    }\n    let\
    \ mut result = sort_array(left);\n    result.push(pivot);\n    result.append(&mut\
    \ sort_array(right));\n    result", "    let mut arr = array.clone();\n    let\
    \ sum: isize = arr[0] + arr[arr.len() - 1];\n    let is_ascending = sum % 2 ==\
    \ 1;\n    arr.sort_by(|a, b| if is_ascending { a.cmp(b) } else { b.cmp(a) });\n\
    \    arr", "    let first = array[0];\n    let last = array[array.len() - 1];\n\
    \    let sum = first + last;\n    let mut vec = array.clone();\n    if sum % 2\
    \ == 0 {\n        vec.sort_by(|a, b| b.cmp(a));\n    } else {\n        vec.sort_by(|a,\
    \ b| a.cmp(b));\n    }\n    vec", "    let mut copy_array = array.clone();\n \
    \   copy_array.sort();\n    if (copy_array[0] + copy_array[copy_array.len() -\
    \ 1]) % 2 == 0 {\n        copy_array.reverse();\n    }\n    copy_array", "   \
    \ let mut sorted = array.clone();\n    sorted.sort();\n    let sum = array[0]\
    \ + array[array.len() - 1];\n    if sum % 2 == 0 {\n        sorted.reverse();\n\
    \    }\n    sorted", "    let mut array = array;\n    if array.len() > 1 {\n \
    \       let sum = array[0] + array[array.len() - 1];\n        array.sort_by(|a,\
    \ b| if sum % 2 == 0 { b.cmp(a) } else { a.cmp(b) });\n    }\n    array", "  \
    \  if array.len() == 0 {\n        return vec![];\n    }\n    let mut vec = array.clone();\n\
    \    vec.sort();\n    let mut sum = 0;\n    for i in 0..vec.len() {\n        sum\
    \ += vec[i];\n    }\n    if sum % 2 == 0 {\n        vec.reverse();\n    }\n  \
    \  vec", "    let mut sort_array = array.clone();\n    if (array[0] + array[array.len()\
    \ - 1]) % 2 == 0 {\n        sort_array.sort_by(|a, b| b.cmp(a));\n    } else {\n\
    \        sort_array.sort_by(|a, b| a.cmp(b));\n    }\n    sort_array", "    let\
    \ mut array = array;\n    let (mut start, mut end) = (0, array.len() - 1);\n \
    \   let mut result = vec![];\n    let mut rev = false;\n    while start <= end\
    \ {\n        if array[start] + array[end] % 2 == 0 {\n            result.push(array[end]);\n\
    \            end -= 1;\n        } else {\n            result.push(array[start]);\n\
    \            start += 1;\n        }\n        rev = !rev;\n    }\n    if rev {\n\
    \        result.reverse();\n    }\n    result", "    let mut arr = array.clone();\n\
    \    if (arr[0] + arr[arr.len() - 1]) % 2 == 0 {\n        arr.sort_by(|a, b| b.cmp(a));\n\
    \    } else {\n        arr.sort_by(|a, b| a.cmp(b));\n    }\n    arr", "    if\
    \ array.len() < 2 {\n        return array;\n    }\n    let first = array[0];\n\
    \    let last = array[array.len() - 1];\n    let sum = first + last;\n    let\
    \ mut sort_array = array.clone();\n    if sum % 2 == 0 {\n        sort_array.sort_by(|a,\
    \ b| b.cmp(a));\n    } else {\n        sort_array.sort_by(|a, b| a.cmp(b));\n\
    \    }\n    sort_array", "    let mut array = array;\n    array.sort_by(|x, y|\
    \ if (x + y) % 2 == 0 { y.cmp(x) } else { x.cmp(y) });\n    array", "    if array.is_empty()\
    \ {\n        return array;\n    }\n    let (mut is_odd, mut odd_count) = (true,\
    \ 0);\n    let mut odd_values = vec![];\n    let mut even_values = vec![];\n \
    \   for (i, item) in array.iter().enumerate() {\n        if item % 2 == 0 {\n\
    \            even_values.push(item);\n        } else {\n            odd_values.push(item);\n\
    \            odd_count += 1;\n        }\n        if i + 1 == array.len() {\n \
    \           is_odd = odd_count % 2 == 1;\n        }\n    }\n    odd_values.sort_by(|a,\
    \ b| a.cmp(b));\n    even_values.sort_by(|a, b| b.cmp(a));\n    let mut output\
    \ = vec![];\n    for item in array {\n        if item % 2 == 0 {\n           \
    \ output.push(even_values.pop().unwrap());\n        } else {\n            output.push(odd_values.pop().unwrap());\n\
    \        }\n    }\n    if is_odd {\n        output.reverse();\n    }\n    output",
  "    let mut array = array;\n    array.sort_by(|a, b| {\n        let sum = a + b;\n\
    \        if sum % 2 == 0 {\n            b.cmp(a)\n        } else {\n         \
    \   a.cmp(b)\n        }\n    });\n    array", "    let mut new_array = array.clone();\n\
    \    new_array.sort();\n    new_array", "    if array.is_empty() {\n        return\
    \ vec![];\n    }\n    let mut result = array.clone();\n    if (result[0] + result[result.len()\
    \ - 1]) % 2 == 0 {\n        result.sort_by(|a, b| b.cmp(a));\n    } else {\n \
    \       result.sort_by(|a, b| a.cmp(b));\n    }\n    result", "    let mut sorted_array\
    \ = array.clone();\n    sorted_array.sort();\n    if array[0] + array[array.len()\
    \ - 1] % 2 == 0 {\n        sorted_array.reverse();\n    }\n    sorted_array",
  "    let mut array = array;\n    if array.len() > 1 {\n        let mut odd = array[0]\
    \ > array[array.len() - 1];\n        for i in 0..array.len() - 1 {\n         \
    \   for j in i + 1..array.len() {\n                if array[i] > array[j] == odd\
    \ {\n                    array.swap(i, j);\n                }\n            }\n\
    \        }\n    }\n    array", "    let length = array.len();\n    let mut clone\
    \ = array.clone();\n    clone.sort();\n    let sum = array[0] + array[length -\
    \ 1];\n    if sum % 2 == 0 {\n        clone.reverse();\n    }\n    clone", " \
    \   let mut array = array;\n    let sum: isize = array[0] + array[array.len()\
    \ - 1];\n    let method = if sum % 2 == 0 {\n        Ordering::Greater\n    }\
    \ else {\n        Ordering::Less\n    };\n    array.sort_by(|a, b| a.cmp(b).reverse().then(b.cmp(a)));\n\
    \    array", "    let mut result = Vec::new();\n    let mut sorted_array = array.clone();\n\
    \    sorted_array.sort();\n    let mut size = sorted_array.len();\n    let first_value\
    \ = sorted_array[0];\n    let last_value = sorted_array[size - 1];\n    if (first_value\
    \ + last_value) % 2 == 0 {\n        for i in 0..(size/2) {\n            result.push(sorted_array[size\
    \ - 1 - i]);\n            result.push(sorted_array[i]);\n        }\n        if\
    \ size % 2 != 0 {\n            result.push(sorted_array[size/2]);\n        }\n\
    \    } else {\n        for i in 0..(size/2) {\n            result.push(sorted_array[i]);\n\
    \            result.push(sorted_array[size - 1 - i]);\n        }\n        if size\
    \ % 2 != 0 {\n            result.push(sorted_array[size/2]);\n        }\n    }\n\
    \    result", "    if array.is_empty() {\n        return vec![];\n    }\n    let\
    \ mut arr = array.clone();\n    let sum = arr[0] + arr[arr.len() - 1];\n    if\
    \ sum % 2 == 0 {\n        arr.sort_by(|a, b| b.cmp(a));\n    } else {\n      \
    \  arr.sort_by(|a, b| a.cmp(b));\n    }\n    arr"]
stop_tokens:
- "\n}"
