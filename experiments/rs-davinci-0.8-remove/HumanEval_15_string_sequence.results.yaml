language: rs
name: HumanEval_15_string_sequence
results:
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    (0..n+1).map(|i|\
    \ i.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822494
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for i in 0..n+1 {\n        s.push_str(&i.to_string());\n\
    \        s.push(' ');\n    }\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpungbdhxj.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822494
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for i in 0..n+1 {\n        s.push_str(&format!(\"{} \",\
    \ i));\n    }\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpz80mrt3w.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822494
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    (0..=n).map(|n|\
    \ n.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822494
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut v =\
    \ Vec::new();\n    for i in 0..n+1 {\n        v.push(i.to_string());\n    }\n\
    \    v.join(\" \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n \
    \   assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822494
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for i in 0..n + 1 {\n        s.push_str(&format!(\"{} \"\
    , i));\n    }\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmplw_e8lc6.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822494
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for i in 0..n+1 {\n        s += &i.to_string();\n      \
    \  s += \" \";\n    }\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmp6jgkwub5.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822494
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut result\
    \ = String::new();\n    for i in 0..n + 1 {\n        result.push_str(&i.to_string());\n\
    \        result.push(' ');\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpr6t38hqw.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822494
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    if n == 0 {\n\
    \        \"0\".to_string()\n    } else {\n        (0..=n).map(|x| x.to_string()).collect::<Vec<String>>().join(\"\
    \ \")\n    }\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822494
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    (0..n + 1).map(|x|\
    \ x.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822494
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for i in 0..=n {\n        s.push_str(&i.to_string());\n\
    \        s.push(' ');\n    }\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpz1th5nfm.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822494
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    (0..=n).map(|n|\
    \ n.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822494
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for num in 0..=n {\n        s.push_str(&num.to_string());\n\
    \        s.push(' ');\n    }\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpxp4v1gq1.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822494
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut buffer\
    \ = String::new();\n    for i in 0..(n + 1) {\n        write!(&mut buffer, \"\
    {} \", i).unwrap();\n    }\n    buffer\n}\n\nfn main() {\n    let candidate =\
    \ string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `write_fmt` found for mutable reference `&mut\
    \ String` in the current scope\n --> /tmp/tmp8y1zo70s.rs:5:9\n  |\n5 |       \
    \  write!(&mut buffer, \"{} \", i).unwrap();\n  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ method not found in `&mut String`\n  |\n  = help: items from traits can only\
    \ be used if the trait is in scope\n  = note: this error originates in the macro\
    \ `write` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp:\
    \ the following trait is implemented but not in scope; perhaps add a `use` for\
    \ it:\n  |\n1 | use std::fmt::Write;\n  |\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659822494
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for i in 0..=n {\n        s.push_str(&i.to_string());\n\
    \        s.push(' ');\n    }\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpz1th5nfm.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822494
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    format!(\"\
    {}\", (0..n + 1).map(|x| x.to_string()).collect::<Vec<String>>().join(\" \"))\n\
    }\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822494
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for i in 0..n + 1 {\n        s.push_str(&format!(\"{} \"\
    , i));\n    }\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmplw_e8lc6.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822494
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut string\
    \ = String::new();\n    for i in 0..n + 1 {\n        string.push_str(&i.to_string());\n\
    \        string.push(' ');\n    }\n    string\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpstmn3ph4.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822494
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    (0..n + 1).map(|i|\
    \ i.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822494
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n  (0..n + 1).map(|i|\
    \ i.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822494
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    (0..=n).map(|x|\
    \ x.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822494
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    (0..n+1).map(|x|\
    \ x.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822494
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut i =\
    \ 0;\n    let mut s = String::new();\n    while i <= n {\n        s.push_str(&i.to_string());\n\
    \        s.push(' ');\n        i += 1;\n    }\n    s\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmp1be4huj_.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822494
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for i in 0..n + 1 {\n        s.push_str(&i.to_string());\n\
    \        s.push(' ');\n    }\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpms1fmlgd.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822494
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    (0..n + 1).map(|i|\
    \ i.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822494
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut result\
    \ = String::new();\n    for i in 0..=n {\n        if i > 0 {\n            result.push('\
    \ ');\n        }\n        result.push_str(&i.to_string());\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822494
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    (0..n + 1).map(|i|\
    \ i.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822494
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    (0..n+1).map(|x|\
    \ x.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822494
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut r =\
    \ String::new();\n    for i in 0..(n + 1) {\n        r.push_str(&i.to_string());\n\
    \        r.push(' ');\n    }\n    r\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmp1gg6tabl.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822494
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut output\
    \ = String::new();\n    for i in 0..n + 1 {\n        output.push_str(&i.to_string());\n\
    \        output.push(' ');\n    }\n    output\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpw_th_oc2.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822494
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut vec\
    \ = vec![];\n    for i in 0..n + 1 {\n        vec.push(i.to_string());\n    }\n\
    \    return vec.join(\" \");\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822495
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    (0..n + 1).map(|x|\
    \ x.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822494
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for i in 0..=n {\n        s.push_str(&format!(\"{} \", i));\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpndpdi8s3.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822495
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    format!(\"\
    {}\", (0..n+1).map(|x| x.to_string()).collect::<Vec<String>>().join(\" \"))\n\
    }\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822495
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for i in 0..=n {\n        s.push_str(&format!(\"{} \", i));\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpndpdi8s3.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822495
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    (0..n + 1).into_iter().map(|x|\
    \ x.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822495
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut res\
    \ = String::new();\n    for i in 0..n + 1 {\n        res.push_str(&i.to_string());\n\
    \        res.push(' ');\n    }\n    res\n}\n\nfn main() {\n    let candidate =\
    \ string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpirxpv6cq.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822495
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for i in 0..n + 1 {\n        s.push_str(&format!(\"{} \"\
    , i));\n    }\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmplw_e8lc6.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822494
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    (0..n + 1).map(|x|\
    \ x.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822494
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    (0..n + 1).map(|x|\
    \ x.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822494
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut string\
    \ = String::new();\n    for i in 0..n + 1 {\n        string.push_str(&i.to_string());\n\
    \        string.push(' ');\n    }\n    string\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpstmn3ph4.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822494
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    assert!(n >=\
    \ 0);\n    let mut seq = String::new();\n    for i in 0..n + 1 {\n        if i\
    \ > 0 {\n            seq.push(' ');\n        }\n        seq.push_str(&i.to_string());\n\
    \    }\n    seq\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822495
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut i =\
    \ 0;\n    let mut s = String::new();\n    while i <= n {\n        if i > 0 {\n\
    \            s.push(' ');\n        }\n        s.push_str(&i.to_string());\n  \
    \      i += 1;\n    }\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822495
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    (0..=n).map(|i|\
    \ i.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822495
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    (0..=n).map(|i|\
    \ i.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822495
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    (0..=n).map(|x|\
    \ x.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822494
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    (0..n + 1).map(|i|\
    \ i.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822494
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    (0..n+1).map(|i|\
    \ i.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822494
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut v =\
    \ Vec::new();\n    for i in 0..(n + 1) {\n        v.push(i.to_string());\n   \
    \ }\n    return v.join(\" \");\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822495
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut ret\
    \ = String::new();\n    for i in 0..(n + 1) {\n        ret.push_str(&i.to_string());\n\
    \        ret.push(' ');\n    }\n    ret\n}\n\nfn main() {\n    let candidate =\
    \ string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmp2vssc79q.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822495
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    (0..n + 1).map(|i|\
    \ i.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822494
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    (0..n + 1).map(|x|\
    \ x.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822494
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    (0..n + 1).map(|v|\
    \ v.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822495
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for i in 0..n + 1 {\n        if i > 0 {\n            s.push('\
    \ ');\n        }\n        s.push_str(&i.to_string());\n    }\n    s\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822495
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut i =\
    \ 0;\n    let mut string = String::new();\n    while i <= n {\n        string.push_str(&i.to_string());\n\
    \        string.push(' ');\n        i += 1;\n    }\n    string\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmplemviay6.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822495
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    (0..n + 1).map(|i|\
    \ i.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822494
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    use std::iter::FromIterator;\n\
    \    let mut ret = String::new();\n    for x in 0..(n + 1) {\n        if x !=\
    \ 0 {\n            ret.push(' ');\n        }\n        ret.push_str(&format!(\"\
    {}\", x));\n    }\n    ret\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822495
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    format!(\"\
    {}\", (0..=n).collect::<Vec<isize>>().join(\" \"))\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `join` exists for struct `Vec<isize>`, but its\
    \ trait bounds were not satisfied\n --> /tmp/tmp27tl5xvz.rs:3:51\n  |\n3 |   \
    \  format!(\"{}\", (0..=n).collect::<Vec<isize>>().join(\" \"))\n  |         \
    \                                          ^^^^ method cannot be called on `Vec<isize>`\
    \ due to unsatisfied trait bounds\n  |\n  = note: the following trait bounds were\
    \ not satisfied:\n          `<[isize] as Join<_>>::Output = _`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659822495
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    (0..=n).map(|i|\
    \ i.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822495
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for i in 0..n + 1 {\n        s.push_str(&format!(\"{} \"\
    , i));\n    }\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmplw_e8lc6.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822494
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    (0..n + 1).map(|x|\
    \ x.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822494
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    (0..n + 1).map(|x|\
    \ x.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822494
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    (0..=n).map(|n|\
    \ n.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822494
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for i in 0..=n {\n        s.push_str(&i.to_string());\n\
    \        s.push(' ');\n    }\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpz1th5nfm.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822494
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n  let mut buffer\
    \ = String::new();\n  for i in 0..n+1 {\n    buffer.push_str(&format!(\"{} \"\
    , i));\n  }\n  buffer\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmp4wbgmmyy.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822495
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut result\
    \ = String::new();\n    for i in 0..=n {\n        result.push_str(&format!(\"\
    {} \", i));\n    }\n    result\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmp7q1n8cze.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822495
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for i in 0..n + 1 {\n        s.push_str(&i.to_string());\n\
    \        s.push(' ');\n    }\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpms1fmlgd.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822494
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut result\
    \ = String::new();\n    for i in 0..n + 1 {\n        result.push_str(&i.to_string());\n\
    \        result.push(' ');\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpr6t38hqw.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822494
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n  let mut result\
    \ = String::new();\n  for i in 0..n+1 {\n    result.push_str(&i.to_string());\n\
    \    result.push(' ');\n  }\n  result\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmp6eeoo7uh.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822495
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    (0..n + 1).map(|x|\
    \ x.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822494
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    (0..n+1).into_iter().map(|x|\
    \ x.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822495
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for i in 0..=n {\n        if i != 0 {\n            s.push('\
    \ ');\n        }\n        s.push_str(&i.to_string());\n    }\n    s\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822495
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut sequence\
    \ = String::new();\n    for i in 0..n + 1 {\n        if !sequence.is_empty() {\n\
    \            sequence.push(' ');\n        }\n        sequence.push_str(&i.to_string());\n\
    \    }\n    sequence\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822495
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    (0..n + 1).map(|x|\
    \ x.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822494
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut v =\
    \ Vec::with_capacity(n as usize);\n    for i in 0..n + 1 {\n        v.push(i.to_string());\n\
    \    }\n    v.join(\" \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822495
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    (0..=n).into_iter().map(|v|\
    \ v.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822495
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut seq\
    \ = String::new();\n    for i in 0..n + 1 {\n        seq.push_str(&i.to_string());\n\
    \        seq.push(' ');\n    }\n    seq\n}\n\nfn main() {\n    let candidate =\
    \ string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpeqhp0je2.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822495
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut i =\
    \ 0;\n    let mut result = String::new();\n    while i <= n {\n        result.push_str(&format!(\"\
    {} \", i));\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpr4c5h3zq.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822496
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let v: Vec<String>\
    \ = (0..(n + 1)).map(|i| i.to_string()).collect();\n    v.join(\" \")\n}\n\nfn\
    \ main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822496
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n  format!(\"{}\"\
    , (0..n+1).into_iter().map(|x| x.to_string()).collect::<Vec<String>>().join(\"\
    \ \"))\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822496
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    range(0, n\
    \ + 1).map(|x| x.to_string()).collect::<Vec<String>>().connect(\" \")\n}\n\nfn\
    \ main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `range` in this scope\n --> /tmp/tmp5e7u4gvi.rs:3:5\n\
    \  |\n3 |     range(0, n + 1).map(|x| x.to_string()).collect::<Vec<String>>().connect(\"\
    \ \")\n  |     ^^^^^ not found in this scope\n  |\nhelp: consider importing this\
    \ function\n  |\n1 | use std::slice::range;\n  |\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822495
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    (0..=n).map(|i|\
    \ i.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822495
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut sequence\
    \ = String::new();\n    for i in 0..=n {\n        sequence += &format!(\"{} \"\
    , i);\n    }\n    sequence\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmp3s4rk99s.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822496
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut buf\
    \ = String::new();\n    for i in 0..n {\n        buf.push_str(&format!(\"{} \"\
    , i));\n    }\n    buf.push_str(&format!(\"{}\", n));\n    buf\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822496
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    (0..=n).map(|n|\
    \ n.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822494
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut string\
    \ = String::new();\n    for i in 0..n + 1 {\n        string.push_str(&i.to_string());\n\
    \        string.push(' ');\n    }\n    string\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpstmn3ph4.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822494
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut output\
    \ = String::new();\n    for i in 0..n + 1 {\n        output.push_str(&i.to_string());\n\
    \        output.push(' ');\n    }\n    output\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpw_th_oc2.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822494
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for i in 0..n + 1 {\n        s.push_str(&format!(\"{} \"\
    , i));\n    }\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmplw_e8lc6.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822494
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut strs\
    \ = Vec::new();\n    for i in 0..(n + 1) {\n        strs.push(i.to_string());\n\
    \    }\n    strs.join(\" \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822496
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for i in 0..n + 1 {\n        s.push_str(&format!(\"{} \"\
    , i));\n    }\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmplw_e8lc6.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822494
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for i in 0..n+1 {\n        s.push_str(&i.to_string());\n\
    \        s.push(' ');\n    }\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpungbdhxj.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822494
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut sequence\
    \ = String::new();\n    for i in 0..=n {\n        sequence.push_str(&i.to_string());\n\
    \        sequence.push(' ');\n    }\n    sequence\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmp5opishs0.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822496
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    (0..n + 1).map(|i|\
    \ i.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822494
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    (0..n + 1).map(|i|\
    \ i.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822494
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    (0..n + 1).map(|i|\
    \ i.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822494
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    (0..=n).map(|i|\
    \ i.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822495
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for i in 0..n+1 {\n        s.push_str(&format!(\"{} \",\
    \ i));\n    }\n    return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpca1luzj_.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822496
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut result\
    \ = String::new();\n    for i in 0..=n {\n        result.push_str(&i.to_string());\n\
    \        result.push(' ');\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpgcqj_shr.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822496
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for i in 0..n+1 {\n        s.push_str(&format!(\"{} \",\
    \ i));\n    }\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpz80mrt3w.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822494
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    (0..=n).map(|i|\
    \ i.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822495
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    (0..=n).map(|i|\
    \ i.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822495
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    (0..n+1).map(|i|\
    \ i.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822494
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut ret\
    \ = String::new();\n    for i in 0..(n + 1) {\n        ret.push_str(&format!(\"\
    {} \", i));\n    }\n    ret\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpcaxtx4ze.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822496
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for i in 0..n + 1 {\n        s.push_str(&format!(\"{} \"\
    , i));\n    }\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmplw_e8lc6.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822494
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut output\
    \ = String::new();\n    for i in 0..n + 1 {\n        output.push_str(&i.to_string());\n\
    \        output.push(' ');\n    }\n    output\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpw_th_oc2.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822494
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for i in 0..=n {\n        s.push_str(&format!(\"{} \", i));\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpndpdi8s3.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822495
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    (0..n + 1).map(|i|\
    \ i.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822494
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    (0..=n).map(|v|\
    \ v.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822496
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut string\
    \ = String::new();\n    for i in 0..n + 1 {\n        string.push_str(&i.to_string());\n\
    \        string.push(' ');\n    }\n    string\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpstmn3ph4.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822494
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut sequence\
    \ = String::new();\n    for i in 0..n + 1 {\n        sequence.push_str(&i.to_string());\n\
    \        sequence.push(' ');\n    }\n    sequence\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpxnc9ih9s.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822496
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut result\
    \ = String::new();\n    for i in 0..n + 1 {\n        result.push_str(&i.to_string());\n\
    \        result.push(' ');\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpr6t38hqw.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822494
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut seq\
    \ = String::new();\n    for k in 0..n + 1 {\n        seq += \" \";\n        seq\
    \ += &k.to_string();\n    }\n    seq\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\" 0\"`,\n right: `\"0\"`', /tmp/tmp0i6p5ji2.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822496
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for i in 0..n + 1 {\n        s.push_str(&i.to_string());\n\
    \        s.push(' ');\n    }\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpms1fmlgd.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822494
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    (0..n + 1).map(|x|\
    \ x.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822494
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    (0..n + 1).map(|x|\
    \ x.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822494
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for i in 0..=n {\n        s.push_str(&format!(\"{} \", i));\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpndpdi8s3.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822495
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for i in 0..n+1 {\n        s.push_str(&i.to_string());\n\
    \        s.push(' ');\n    }\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpungbdhxj.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822494
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    (0..n+1).map(|x|\
    \ x.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822494
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for i in 0..n+1 {\n        s.push_str(&format!(\"{} \",\
    \ i));\n    }\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpz80mrt3w.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822494
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut sequence\
    \ = String::new();\n    for i in 0..=n {\n        sequence.push_str(&format!(\"\
    {} \", i));\n    }\n    sequence\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmplx4s0vbw.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822496
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    (0..n + 1).map(|x|\
    \ x.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822494
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut result\
    \ = String::new();\n    for i in 0..n+1 {\n        result.push_str(&format!(\"\
    {} \", i));\n    }\n    result\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpklcodpxn.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822496
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut ret\
    \ = String::new();\n    for i in 0..n+1 {\n        ret.push_str(&format!(\"{}\
    \ \", i));\n    }\n    ret\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmp5y_89rk4.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822496
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut out\
    \ = String::new();\n    for i in 0..n+1 {\n        out.push_str(&format!(\"{}\
    \ \", i));\n    }\n    out\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmp7vogadcn.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822496
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    (0..n+1).map(|n|\
    \ n.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822496
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    (0..n + 1).map(|n|\
    \ n.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822496
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for n in 0..n + 1 {\n        if n == 0 {\n            s.push_str(&n.to_string());\n\
    \        } else {\n            s.push_str(&format!(\" {}\", n));\n        }\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822496
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    (0..n+1).map(|x|\
    \ x.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822494
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    (0..n+1).map(|i|\
    \ i.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822494
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for i in 0..=n {\n        s += &i.to_string();\n       \
    \ s += \" \";\n    }\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpv7j0qdr9.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822496
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for i in 0..n+1 {\n        s.push_str(&format!(\"{} \",\
    \ i));\n    }\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpz80mrt3w.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822494
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for i in 0..=n {\n        s.push_str(&format!(\"{} \", i));\n\
    \    }\n    return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmp5mcz30sm.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822496
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut ret\
    \ = String::new();\n    for i in 0..(n + 1) {\n        ret.push_str(&format!(\"\
    {} \", i));\n    }\n    ret\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpcaxtx4ze.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822496
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut builder\
    \ = String::new();\n    for i in 0..n {\n        builder.push_str(&i.to_string());\n\
    \        builder.push(' ');\n    }\n    builder.push_str(&n.to_string());\n  \
    \  builder\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822496
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for i in 0..n + 1 {\n        s += &format!(\"{} \", i);\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmp3od258u8.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822496
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    (0..n + 1).map(|i|\
    \ i.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822494
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for i in 0..n + 1 {\n        s += i.to_string().as_str();\n\
    \        s += \" \";\n    }\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpyjm5dxrv.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822496
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let s: Vec<String>\
    \ = (0..n + 1).map(|i| i.to_string()).collect();\n    s.join(\" \")\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822496
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for i in 0..n + 1 {\n        if i > 0 {\n            s.push('\
    \ ');\n        }\n        s.push_str(&i.to_string());\n    }\n    s\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822495
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for i in 0..n + 1 {\n        if i != 0 {\n            s.push('\
    \ ');\n        }\n        s.push_str(&i.to_string());\n    }\n    s\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822496
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for i in 0..n+1 {\n        s.push_str(&format!(\"{} \",\
    \ i));\n    }\n    return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpca1luzj_.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822496
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut seq\
    \ = String::new();\n    for i in 0..=n {\n        if !seq.is_empty() {\n     \
    \       seq.push(' ');\n        }\n        seq.push_str(&i.to_string());\n   \
    \ }\n    seq\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822496
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for i in 0..n + 1 {\n        s.push_str(&format!(\"{} \"\
    , i));\n    }\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmplw_e8lc6.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822494
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for n in 0..n + 1 {\n        s.push_str(&n.to_string());\n\
    \        s.push(' ');\n    }\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpo3qriddf.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822496
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut sequence\
    \ = String::new();\n    for i in 0..=n {\n        sequence.push_str(&i.to_string());\n\
    \        sequence.push(' ');\n    }\n    sequence\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmp5opishs0.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822496
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    (0..=n).map(|x|\
    \ x.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822494
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    if n < 0 {\n\
    \        panic!(\"n is negative\");\n    }\n\n    let mut v = Vec::with_capacity((n\
    \ + 1) as usize);\n    for i in 0..n+1 {\n        v.push(i.to_string());\n   \
    \ }\n    v.join(\" \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822497
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    (0..n + 1).map(|num|\
    \ num.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n  \
    \  let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822496
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut v =\
    \ Vec::with_capacity(n as usize);\n    for i in 0..=n {\n        v.push(i.to_string());\n\
    \    }\n    v.join(\" \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822497
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    (0..n+1).map(|i|\
    \ i.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822494
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut result\
    \ = String::new();\n    for i in 0..n+1 {\n        if i != 0 {\n            result.push('\
    \ ');\n        }\n        result.push_str(&i.to_string());\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822497
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    (0..=n).map(|x|\
    \ x.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822494
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut i = 0;\n    while i <= n {\n        result.push_str(&i.to_string());\n\
    \        result.push(' ');\n        i += 1;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpfz3jsbms.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    (0..n + 1).map(|v|\
    \ v.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822495
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    (0..n+1).map(|x|\
    \ x.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822494
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for i in 0..n+1 {\n        s.push_str(&i.to_string());\n\
    \        s.push(' ');\n    }\n    return s.trim().to_string();\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822497
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    (0..n+1).map(|x|\
    \ x.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822494
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for i in 0..n + 1 {\n        s.push_str(&format!(\"{} \"\
    , i));\n    }\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmplw_e8lc6.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822494
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut output\
    \ = String::new();\n    for i in 0..=n {\n        output.push_str(&i.to_string());\n\
    \        output.push(' ');\n    }\n    output\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpx_b6n4ix.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n  let mut s = String::new();\n\
    \  for i in 0..n + 1 {\n    s.push_str(&i.to_string());\n    s.push(' ');\n  }\n\
    \  s\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpjwg4ycqk.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    (0..n + 1).map(|i|\
    \ i.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822494
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    (0..n + 1).map(|v|\
    \ v.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822495
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut sequence\
    \ = String::new();\n    for i in 0..n + 1 {\n        sequence += &i.to_string();\n\
    \        sequence += \" \";\n    }\n    sequence\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpe32e26kz.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for i in 0..n+1 {\n        s.push_str(&format!(\"{} \",\
    \ i));\n    }\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpz80mrt3w.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822494
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    (0..n + 1).map(|i|\
    \ i.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822494
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    (0..n + 1).map(|x|\
    \ x.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822494
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for i in 0..=n {\n        s.push_str(&format!(\"{} \", i));\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpndpdi8s3.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822495
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut sequence\
    \ = String::new();\n    for i in 0..n+1 {\n        sequence.push_str(&i.to_string());\n\
    \        sequence.push(' ');\n    }\n    sequence\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmppzsphll8.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut string\
    \ = String::new();\n    for i in 0..n+1 {\n        string = format!(\"{} {}\"\
    , string, i);\n    }\n    string\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\" 0\"`,\n right: `\"0\"`', /tmp/tmp6iah8f1n.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    (0..n + 1).map(|i|\
    \ i.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822494
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    (0..=n).map(|i|\
    \ i.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822495
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    (0..n + 1).map(|i|\
    \ i.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822494
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    (0..n + 1).map(|i|\
    \ i.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822494
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    (0..n+1).map(|n|\
    \ n.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822496
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    (0..=n).map(|x|\
    \ x.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822494
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    (0..n+1).map(|x|\
    \ x.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822494
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut result\
    \ = String::new();\n    for i in 0..=n {\n        result.push_str(&format!(\"\
    {} \", i));\n    }\n    result\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmp7q1n8cze.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822495
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    (0..n + 1).map(|x|\
    \ x.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822494
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    (0..n+1).map(|i|\
    \ i.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822494
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    (0..=n).map(|i|\
    \ i.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822495
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    (0..n + 1).map(|x|\
    \ x.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822494
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut ret\
    \ = String::new();\n    for i in 0..n + 1 {\n        ret.push_str(&i.to_string());\n\
    \        ret.push(' ');\n    }\n    ret\n}\n\nfn main() {\n    let candidate =\
    \ string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpiaei81_7.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    (0..n + 1).map(|i|\
    \ i.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822494
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    (0..n+1).map(|x|\
    \ x.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822494
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for i in 0..n + 1 {\n        s.push_str(&i.to_string());\n\
    \        s.push(' ');\n    }\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpms1fmlgd.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822494
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut result\
    \ = String::new();\n    for i in 0..n + 1 {\n        result += &i.to_string();\n\
    \        result += \" \";\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpwyv22tjt.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut out\
    \ = String::new();\n    for i in 0..n + 1 {\n        out.push_str(&i.to_string());\n\
    \        out.push(' ');\n    }\n    out\n}\n\nfn main() {\n    let candidate =\
    \ string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpsd5pogew.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    (0..n + 1).map(|x|\
    \ x.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822494
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    (0..n + 1).map(|x|\
    \ x.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822494
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    (0..=n).map(|x|\
    \ x.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822494
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut v =\
    \ Vec::with_capacity(n as usize);\n    for i in 0..=n {\n        v.push(i.to_string());\n\
    \    }\n    v.join(\" \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822497
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    (0..=n).map(|x|\
    \ x.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822494
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut result\
    \ = String::new();\n    for i in 0..=n {\n        result.push_str(&format!(\"\
    {} \", i));\n    }\n    result\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmp7q1n8cze.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822495
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for i in 0..n+1 {\n        s.push_str(&i.to_string());\n\
    \        s.push(' ');\n    }\n    return s;\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpoxf5r7mq.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    // Implement\
    \ the function here.\n    \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\
    \ 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45\
    \ 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71\
    \ 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97\
    \ 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117\
    \ 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136\
    \ 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155\
    \ 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174\
    \ 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193\
    \ 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212\
    \ 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231\
    \ 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250\
    \ 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269\
    \ 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288\
    \ 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307\
    \ 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326\
    \ 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345\
    \ 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364\
    \ 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383\
    \ 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402\
    \ 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421\
    \ 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440\
    \ 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459\
    \ 460 461 462 463 464 465 466 467 468 469 470\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0765]: unterminated double quote string\n  --> /tmp/tmpre7r67_z.rs:11:67\n\
    \   |\n11 |       assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9\
    \ 10\"));\n   |  ___________________________________________________________________^\n\
    12 | | }\n   | |__^\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0765`.\n"
  stdout: ''
  timestamp: 1659822496
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for i in 0..n + 1 {\n        s.push_str(&format!(\"{} \"\
    , i));\n    }\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmplw_e8lc6.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822494
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    (0..=n).map(|x|\
    \ x.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822494
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut seq:\
    \ Vec<isize> = (0..n+1).collect();\n    seq.dedup();\n    seq.iter().map(|x| x.to_string()).collect::<Vec<String>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822497
- exit_code: 0
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    (0..n + 1).map(|x|\
    \ x.to_string()).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"\
    ));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822494
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nfn string_sequence(n: isize) -> String {\n    let mut s =\
    \ String::new();\n    for i in 0..n + 1 {\n        s.push_str(&i.to_string());\n\
    \        s.push(' ');\n    }\n    s\n}\n\nfn main() {\n    let candidate = string_sequence;\n\
    \    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3),\
    \ String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0\
    \ 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpms1fmlgd.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822494
