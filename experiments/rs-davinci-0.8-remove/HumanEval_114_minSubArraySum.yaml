name: HumanEval_114_minSubArraySum
language: rs
prompt: "/// Given an array of integers nums, find the minimum sum of any non-empty\
  \ sub-array\n/// of nums.\n/// Example\nfn minSubArraySum(nums: Vec<isize>) -> isize\
  \ {\n"
tests: "}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
  \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
  \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n\
  \    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1,\
  \ -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]),\
  \ -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100,\
  \ -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
  \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
completions: ["    let mut min_sum = std::isize::MAX;\n    let mut running_sum = 0;\n\
    \    for i in 0..nums.len() {\n        running_sum += nums[i];\n        if running_sum\
    \ < min_sum {\n            min_sum = running_sum;\n        }\n        if running_sum\
    \ > 0 {\n            running_sum = 0;\n        }\n    }\n    min_sum", "    let\
    \ mut min_sum = std::isize::MAX;\n    let mut current_sum = 0;\n    for num in\
    \ nums {\n        current_sum += num;\n        if current_sum < min_sum {\n  \
    \          min_sum = current_sum;\n        }\n        if current_sum > 0 {\n \
    \           current_sum = 0;\n        }\n    }\n    min_sum", "    let mut min_sum\
    \ = nums[0];\n    let mut current_sum = 0;\n    for i in 0..nums.len() {\n   \
    \     current_sum += nums[i];\n        if current_sum < min_sum {\n          \
    \  min_sum = current_sum;\n        }\n        if current_sum > 0 {\n         \
    \   current_sum = 0;\n        }\n    }\n    min_sum", "    let mut start = 0;\n\
    \    let mut end = 0;\n    let mut min_sum = std::isize::MAX;\n    let mut sum\
    \ = 0;\n    while end < nums.len() {\n        sum += nums[end];\n        while\
    \ sum >= 0 {\n            min_sum = std::cmp::min(min_sum, sum);\n           \
    \ sum -= nums[start];\n            start += 1;\n        }\n        end += 1;\n\
    \    }\n    if min_sum == std::isize::MAX {\n        min_sum = 0;\n    }\n   \
    \ min_sum", "    let n = nums.len();\n    if n == 0 {\n        return 0;\n   \
    \ }\n    let mut min = std::isize::MAX;\n    let mut sum = 0;\n    for i in 0..n\
    \ {\n        sum += nums[i];\n        if sum < min {\n            min = sum;\n\
    \        }\n        if sum > 0 {\n            sum = 0;\n        }\n    }\n   \
    \ min", "    if nums.is_empty() {\n        return 0;\n    }\n    let (mut sum,\
    \ mut min_sum) = (0, nums[0]);\n    for num in nums {\n        sum += num;\n \
    \       min_sum = min_sum.min(sum);\n        if sum > 0 {\n            sum = 0;\n\
    \        }\n    }\n    min_sum", "    let mut min_so_far = std::isize::MAX;\n\
    \    let mut sum = 0;\n    for i in 0..nums.len() {\n        sum += nums[i];\n\
    \        if sum < min_so_far {\n            min_so_far = sum;\n        }\n   \
    \     if sum > 0 {\n            sum = 0;\n        }\n    }\n    min_so_far", " \
    \   let mut sum = nums[0];\n    let mut min_sum = sum;\n    for i in 1..nums.len()\
    \ {\n        sum = sum.max(0) + nums[i];\n        min_sum = min_sum.min(sum);\n\
    \    }\n    min_sum", "    let mut min = std::isize::MAX;\n    let mut curr =\
    \ 0;\n    for num in nums {\n        curr += num;\n        if curr < min {\n \
    \           min = curr;\n        }\n        if curr > 0 {\n            curr =\
    \ 0;\n        }\n    }\n    min", "    let len = nums.len();\n    let mut sum\
    \ = 0;\n    let mut min = std::isize::MAX;\n    for i in 0..len {\n        sum\
    \ += nums[i];\n        if sum < min {\n            min = sum;\n        }\n   \
    \     if sum > 0 {\n            sum = 0;\n        }\n    }\n    min", "    let\
    \ mut min = nums[0];\n    let mut sum = nums[0];\n    for i in 1..nums.len() {\n\
    \        sum = sum.min(0) + nums[i];\n        min = min.min(sum);\n    }\n   \
    \ min", "    let mut min = isize::max_value();\n    let mut sum = 0;\n    for\
    \ i in 0..nums.len() {\n        if sum < 0 {\n            sum = 0;\n        }\n\
    \        sum += nums[i];\n        min = min.min(sum);\n    }\n    min", "    let\
    \ mut min_so_far = std::isize::MAX;\n    let mut min_ending_here = 0;\n    for\
    \ x in nums {\n        min_ending_here = std::cmp::min(x, min_ending_here + x);\n\
    \        min_so_far = std::cmp::min(min_so_far, min_ending_here);\n    }\n   \
    \ min_so_far", "    let mut result = std::isize::MAX;\n    let mut sum = 0;\n\
    \    for &num in nums.iter() {\n        sum += num;\n        result = std::cmp::min(result,\
    \ sum);\n        if sum > 0 {\n            sum = 0;\n        }\n    }\n    result",
  "    let mut cur_sum = 0;\n    let mut min_sum = isize::max_value();\n    for i\
    \ in 0..nums.len() {\n        cur_sum += nums[i];\n        if cur_sum < min_sum\
    \ {\n            min_sum = cur_sum;\n        }\n        if cur_sum > 0 {\n   \
    \         cur_sum = 0;\n        }\n    }\n    min_sum", "    let n = nums.len();\n\
    \    let mut left = 0;\n    let mut right = 0;\n    let mut sum = 0;\n    let\
    \ mut min_sum = nums[0];\n    while right < n {\n        sum += nums[right];\n\
    \        min_sum = min_sum.min(sum);\n        if sum >= 0 {\n            sum =\
    \ 0;\n            left = right + 1;\n        }\n        right += 1;\n    }\n \
    \   min_sum", "    let mut min_sum = nums[0];\n    let mut current_sum = 0;\n\
    \    for num in nums {\n        current_sum += num;\n        if current_sum <\
    \ min_sum {\n            min_sum = current_sum;\n        }\n        if current_sum\
    \ > 0 {\n            current_sum = 0;\n        }\n    }\n    min_sum", "    let\
    \ mut sum = 0;\n    let mut min = isize::max_value();\n    for i in 0..nums.len()\
    \ {\n        sum += nums[i];\n        if sum < min {\n            min = sum;\n\
    \        }\n        if sum > 0 {\n            sum = 0;\n        }\n    }\n   \
    \ min", "    if nums.is_empty() {\n        return 0;\n    }\n    let mut min =\
    \ std::isize::MAX;\n    let mut sum = 0;\n    for n in nums {\n        sum +=\
    \ n;\n        min = std::cmp::min(min, sum);\n        if sum > 0 {\n         \
    \   sum = 0;\n        }\n    }\n    return min;", "    let mut sum = 0;\n    let\
    \ mut min_sum = isize::max_value();\n    for i in 0..nums.len() {\n        sum\
    \ += nums[i];\n        if sum < min_sum {\n            min_sum = sum;\n      \
    \  }\n        if sum > 0 {\n            sum = 0;\n        }\n    }\n    min_sum",
  "    let mut min_sum = std::isize::MAX;\n    let mut sum = 0;\n    for num in nums\
    \ {\n        sum += num;\n        min_sum = std::cmp::min(min_sum, sum);\n   \
    \     if sum > 0 {\n            sum = 0;\n        }\n    }\n    min_sum", "  \
    \  let mut res = std::isize::MAX;\n    let mut sum = 0;\n    for i in 0..nums.len()\
    \ {\n        sum += nums[i];\n        res = min(res, sum);\n        if sum > 0\
    \ {\n            sum = 0;\n        }\n    }\n    res", "    let mut best = isize::MAX;\n\
    \    let mut sum = 0;\n    for i in 0..nums.len() {\n        sum += nums[i];\n\
    \        best = min(best, sum);\n        if sum > 0 {\n            sum = 0;\n\
    \        }\n    }\n    best", "    let mut sum: isize = 0;\n    let mut min_sum:\
    \ isize = isize::max_value();\n    for i in 0..nums.len() {\n        sum += nums[i];\n\
    \        if sum < min_sum {\n            min_sum = sum;\n        }\n        if\
    \ sum > 0 {\n            sum = 0;\n        }\n    }\n    min_sum", "    let mut\
    \ min_sum = std::isize::MAX;\n    let mut sum = 0;\n    for i in 0..nums.len()\
    \ {\n        sum += nums[i];\n        if sum < min_sum {\n            min_sum\
    \ = sum;\n        }\n        if sum > 0 {\n            sum = 0;\n        }\n \
    \   }\n    min_sum", "    let mut min = nums[0];\n    let mut sum = nums[0];\n\
    \    for i in 1..nums.len() {\n        sum = min_isize(sum + nums[i], nums[i]);\n\
    \        min = min_isize(min, sum);\n    }\n    min", "    let mut min = 0;\n\
    \    let mut sum = 0;\n    let mut i = 0;\n    let mut j = 0;\n    while j < nums.len()\
    \ {\n        sum += nums[j];\n        if sum < min {\n            min = sum;\n\
    \            i = j;\n        }\n        j += 1;\n    }\n    while sum > 0 {\n\
    \        sum -= nums[i];\n        if sum < min {\n            min = sum;\n   \
    \     }\n        i += 1;\n    }\n    min", "    let mut min_sum = nums[0];\n \
    \   let mut current_sum = nums[0];\n    for i in 1..nums.len() {\n        current_sum\
    \ = current_sum.min(0) + nums[i];\n        min_sum = min_sum.min(current_sum);\n\
    \    }\n    min_sum", "    if nums.is_empty() {\n        return 0;\n    }\n  \
    \  let mut sum = 0;\n    let mut res = std::isize::MAX;\n    for num in nums {\n\
    \        sum += num;\n        res = res.min(sum);\n        sum = sum.max(0);\n\
    \    }\n    res", "    let mut min_sum = isize::max_value();\n    let mut cur_sum\
    \ = 0;\n    for &i in nums.iter() {\n        cur_sum += i;\n        if cur_sum\
    \ < min_sum {\n            min_sum = cur_sum;\n        }\n        if cur_sum >\
    \ 0 {\n            cur_sum = 0;\n        }\n    }\n    min_sum", "    let mut\
    \ result = std::isize::MAX;\n    let mut current = 0;\n    for num in nums {\n\
    \        current = std::cmp::min(current + num, num);\n        result = std::cmp::min(result,\
    \ current);\n    }\n    result", "    let mut result = isize::MAX;\n    let mut\
    \ sum = 0;\n    for num in nums {\n        sum += num;\n        result = result.min(sum);\n\
    \        if sum > 0 {\n            sum = 0;\n        }\n    }\n    result", " \
    \   let mut min = isize::max_value();\n    let mut sum = 0;\n    for i in 0..nums.len()\
    \ {\n        sum += nums[i];\n        if sum < min {\n            min = sum;\n\
    \        }\n        if sum > 0 {\n            sum = 0;\n        }\n    }\n   \
    \ min", "    let mut min = isize::max_value();\n    let mut sum = 0;\n    for\
    \ num in nums {\n        sum += num;\n        min = std::cmp::min(min, sum);\n\
    \        if sum > 0 {\n            sum = 0;\n        }\n    }\n    min", "   \
    \ let mut min = nums[0];\n    let mut current = 0;\n    for n in nums {\n    \
    \    current += n;\n        if current < min {\n            min = current;\n \
    \       }\n        if current > 0 {\n            current = 0;\n        }\n   \
    \ }\n    min", "    let mut min_sum = nums[0];\n    let mut start = 0;\n    let\
    \ mut end = 0;\n    let mut sum = nums[0];\n    while end < nums.len() {\n   \
    \     if sum < min_sum {\n            min_sum = sum;\n        }\n        end +=\
    \ 1;\n        if end < nums.len() {\n            sum += nums[end];\n        }\n\
    \        while sum >= min_sum {\n            start += 1;\n            sum -= nums[start\
    \ - 1];\n        }\n    }\n    min_sum", "    let mut min = nums[0];\n    let\
    \ mut sum = 0;\n    for i in nums {\n        sum += i;\n        if sum < min {\n\
    \            min = sum;\n        }\n        if sum > 0 {\n            sum = 0;\n\
    \        }\n    }\n    min", "    if nums.is_empty() {\n        return 0;\n  \
    \  }\n    let mut min_sum = std::isize::MAX;\n    let mut sum = 0;\n    for i\
    \ in 0..nums.len() {\n        sum += nums[i];\n        min_sum = std::cmp::min(min_sum,\
    \ sum);\n        if sum > 0 {\n            sum = 0;\n        }\n    }\n    min_sum",
  "    let mut sum = 0;\n    let mut min = isize::max_value();\n    for num in nums\
    \ {\n        sum += num;\n        min = min.min(sum);\n        if sum > 0 {\n\
    \            sum = 0;\n        }\n    }\n    min", "    let mut res = nums[0];\n\
    \    let mut sum = nums[0];\n    for i in 1..nums.len() {\n        sum = sum.min(0)\
    \ + nums[i];\n        res = res.min(sum);\n    }\n    res", "    let mut min =\
    \ std::isize::MAX;\n    let mut sum = 0;\n    for i in 0..nums.len() {\n     \
    \   sum += nums[i];\n        if sum < min {\n            min = sum;\n        }\n\
    \        if sum > 0 {\n            sum = 0;\n        }\n    }\n    min", "   \
    \ let mut min: isize = nums[0];\n    let mut sum: isize = nums[0];\n    for i\
    \ in 1..nums.len() {\n        if sum > 0 {\n            sum = nums[i];\n     \
    \   } else {\n            sum += nums[i];\n        }\n        if sum < min {\n\
    \            min = sum;\n        }\n    }\n    min", "    let mut min_sum = std::isize::MAX;\n\
    \    let mut sum = 0;\n    for num in nums {\n        sum += num;\n        min_sum\
    \ = std::cmp::min(min_sum, sum);\n        if sum > 0 {\n            sum = 0;\n\
    \        }\n    }\n    min_sum", "    let mut sum = nums[0];\n    let mut min_sum\
    \ = sum;\n    for &x in nums.iter().skip(1) {\n        sum = std::cmp::min(x,\
    \ sum + x);\n        min_sum = std::cmp::min(min_sum, sum);\n    }\n    min_sum",
  "    let mut smallest = std::isize::MAX;\n    let mut curr = 0;\n    for num in\
    \ nums {\n        curr += num;\n        if curr < smallest {\n            smallest\
    \ = curr;\n        }\n        if curr > 0 {\n            curr = 0;\n        }\n\
    \    }\n    smallest", "    if nums.is_empty() {\n        return 0;\n    }\n \
    \   let mut min = std::isize::MAX;\n    let mut sum = 0;\n    for num in nums\
    \ {\n        sum += num;\n        min = std::cmp::min(min, sum);\n        if sum\
    \ > 0 {\n            sum = 0;\n        }\n    }\n    min", "    let mut ret =\
    \ isize::max_value();\n    let mut sum = 0;\n    for &item in nums.iter() {\n\
    \        sum += item;\n        ret = ret.min(sum);\n        if sum > 0 {\n   \
    \         sum = 0;\n        }\n    }\n    ret", "    let mut ans = std::isize::MAX;\n\
    \    let mut sum = 0;\n    for &num in nums.iter() {\n        sum += num;\n  \
    \      ans = std::cmp::min(ans, sum);\n        if sum > 0 {\n            sum =\
    \ 0;\n        }\n    }\n    ans", "    let mut min = nums[0];\n    let mut sum\
    \ = nums[0];\n    for i in 1..nums.len() {\n        sum = std::cmp::min(nums[i],\
    \ sum + nums[i]);\n        min = std::cmp::min(min, sum);\n    }\n    min", " \
    \   let mut ans = isize::max_value();\n    let mut sum = 0;\n    for (i, &num)\
    \ in nums.iter().enumerate() {\n        sum += num;\n        if i > 0 {\n    \
    \        ans = ans.min(sum);\n        }\n        for &num2 in nums[i + 1..].iter()\
    \ {\n            sum += num2;\n            ans = ans.min(sum);\n        }\n  \
    \      sum = 0;\n    }\n    ans", "    let mut best_min = 0;\n    let mut running_sum\
    \ = 0;\n    let mut start = 0;\n    let mut minimum = nums[0];\n    let mut min_start\
    \ = 0;\n    let mut min_end = 0;\n    let mut end = 0;\n    while end < nums.len()\
    \ {\n        if nums[end] < minimum {\n            minimum = nums[end];\n    \
    \        min_start = end;\n            min_end = end;\n        }\n        running_sum\
    \ += nums[end];\n        if running_sum < best_min {\n            best_min = running_sum;\n\
    \            start = end;\n        }\n        end += 1;\n    }\n    if best_min\
    \ > 0 {\n        best_min = minimum;\n        start = min_start;\n        end\
    \ = min_end;\n    }\n    println!(\"start {} end {}\", start, end);\n    return\
    \ best_min;", "    let mut minimum = std::isize::MAX;\n    let mut cur_sum = 0;\n\
    \    for n in nums {\n        cur_sum += n;\n        if cur_sum < minimum {\n\
    \            minimum = cur_sum;\n        }\n        if cur_sum > 0 {\n       \
    \     cur_sum = 0;\n        }\n    }\n    minimum", "    let mut min_sum = std::isize::MAX;\n\
    \    let mut i = 0;\n    let mut j = 0;\n    let mut sum = 0;\n    while j < nums.len()\
    \ {\n        sum += nums[j];\n        if sum < min_sum {\n            min_sum\
    \ = sum;\n        }\n        j += 1;\n        while sum >= 0 {\n            if\
    \ sum < min_sum {\n                min_sum = sum;\n            }\n           \
    \ sum -= nums[i];\n            i += 1;\n        }\n    }\n    min_sum", "    //\
    \ initialize min sum to max int\n    let mut min_sum = std::isize::MAX;\n    //\
    \ initialize running sum to 0\n    let mut running_sum = 0;\n    // initialize\
    \ min start and min end\n    let mut min_start = 0;\n    let mut min_end = 0;\n\
    \    // initialize running start\n    let mut running_start = 0;\n    // get length\
    \ of nums\n    let length = nums.len();\n    // calculate sum of all numbers\n\
    \    let total_sum: isize = nums.iter().sum();\n    // if numbers sum to negative\
    \ then return the min of all numbers\n    if total_sum < 0 {\n        return nums.iter().min().unwrap();\n\
    \    }\n    // for each number\n    for i in 0..length {\n        // add current\
    \ number to running sum\n        running_sum += nums[i];\n        // if running\
    \ sum is less than 0\n        if running_sum < 0 {\n            // reset running\
    \ sum to 0\n            running_sum = 0;\n            // set running start to\
    \ next number\n            running_start = i + 1;\n        }\n        // if running\
    \ sum is less than min sum\n        if running_sum < min_sum {\n            //\
    \ set min sum to running sum\n            min_sum = running_sum;\n           \
    \ // set min start to running start\n            min_start = running_start;\n\
    \            // set min end to current index\n            min_end = i;\n     \
    \   }\n    }\n    // return min sum\n    min_sum", "    if nums.is_empty() {\n\
    \        return 0;\n    }\n    let mut sum = nums[0];\n    let mut min = nums[0];\n\
    \    for i in 1..nums.len() {\n        sum = sum.max(0) + nums[i];\n        min\
    \ = min.min(sum);\n    }\n    min", "    let mut min_val = nums[0];\n    let mut\
    \ min_sum = 0;\n    for i in 0..nums.len() {\n        min_sum += nums[i];\n  \
    \      if min_sum < min_val {\n            min_val = min_sum;\n        }\n   \
    \     if min_sum > 0 {\n            min_sum = 0;\n        }\n    }\n    min_val",
  "    let mut cur_sum = 0;\n    let mut min_sum = isize::max_value();\n    for i\
    \ in 0..nums.len() {\n        cur_sum += nums[i];\n        if cur_sum < min_sum\
    \ {\n            min_sum = cur_sum;\n        }\n        if cur_sum > 0 {\n   \
    \         cur_sum = 0;\n        }\n    }\n    min_sum", "    let mut min = nums[0];\n\
    \    let mut sum = nums[0];\n    for i in 1..nums.len() {\n        sum = std::cmp::min(nums[i],\
    \ sum + nums[i]);\n        min = std::cmp::min(min, sum);\n    }\n    min", " \
    \   let mut min_sum = isize::max_value();\n    let mut sum = 0;\n    for n in\
    \ nums {\n        sum += n;\n        min_sum = min_sum.min(sum);\n        if sum\
    \ > 0 {\n            sum = 0;\n        }\n    }\n    min_sum", "    let mut min_sum\
    \ = i32::max_value();\n    let mut sum = 0;\n    for i in 0..nums.len() {\n  \
    \      sum += nums[i];\n        if sum < min_sum {\n            min_sum = sum;\n\
    \        }\n        if sum > 0 {\n            sum = 0;\n        }\n    }\n   \
    \ min_sum as isize", "    let mut min_sum = nums[0];\n    let mut current_sum\
    \ = 0;\n    for n in nums {\n        current_sum += n;\n        if current_sum\
    \ < min_sum {\n            min_sum = current_sum;\n        }\n        if current_sum\
    \ > 0 {\n            current_sum = 0;\n        }\n    }\n    min_sum", "    let\
    \ mut min = nums[0];\n    let mut sum = nums[0];\n    for num in nums.iter().skip(1)\
    \ {\n        sum = std::cmp::min(sum + num, *num);\n        min = std::cmp::min(min,\
    \ sum);\n    }\n    min", "    let mut local_min = std::isize::MAX;\n    let mut\
    \ cur_sum = 0;\n    for n in nums {\n        cur_sum += n;\n        local_min\
    \ = std::cmp::min(local_min, cur_sum);\n        if cur_sum > 0 {\n           \
    \ cur_sum = 0;\n        }\n    }\n    local_min", "    let mut best = std::isize::MAX;\n\
    \    let mut sum = 0;\n    for num in nums {\n        sum += num;\n        best\
    \ = std::cmp::min(best, sum);\n        if sum > 0 {\n            sum = 0;\n  \
    \      }\n    }\n    best", "    let mut min_sum = nums[0];\n    let mut cur_sum\
    \ = 0;\n    for n in nums {\n        cur_sum += n;\n        if cur_sum < min_sum\
    \ {\n            min_sum = cur_sum;\n        }\n        if cur_sum > 0 {\n   \
    \         cur_sum = 0;\n        }\n    }\n    min_sum", "    let mut res = std::isize::MAX;\n\
    \    let mut sum = 0;\n    for num in nums {\n        sum += num;\n        res\
    \ = std::cmp::min(res, sum);\n        if sum > 0 {\n            sum = 0;\n   \
    \     }\n    }\n    res", "    let mut min_sum = std::isize::MAX;\n    let mut\
    \ sum = 0;\n    for i in 0..nums.len() {\n        sum += nums[i];\n        if\
    \ sum < min_sum {\n            min_sum = sum;\n        }\n        if sum > 0 {\n\
    \            sum = 0;\n        }\n    }\n    min_sum", "    let mut min_sum =\
    \ nums[0];\n    let mut max_sum = min_sum;\n    let mut sum = min_sum;\n    for\
    \ &num in nums.iter().skip(1) {\n        sum += num;\n        max_sum = if sum\
    \ > max_sum { sum } else { max_sum };\n        min_sum = if sum < min_sum { sum\
    \ } else { min_sum };\n    }\n    if min_sum > 0 {\n        return 0;\n    }\n\
    \    if max_sum > 0 {\n        return min_sum;\n    }\n    let mut sum = 0;\n\
    \    let mut min_sum = max_sum;\n    for &num in nums.iter() {\n        sum +=\
    \ num;\n        min_sum = if sum < min_sum { sum } else { min_sum };\n    }\n\
    \    min_sum", "    let mut min = isize::max_value();\n    let mut sum = 0;\n\
    \    for num in nums {\n        sum += num;\n        min = std::cmp::min(min,\
    \ sum);\n        if sum > 0 {\n            sum = 0;\n        }\n    }\n    min",
  "    let mut result = std::isize::MAX;\n    let mut current = 0;\n    for i in 0..nums.len()\
    \ {\n        current += nums[i];\n        result = std::cmp::min(result, current);\n\
    \        if current > 0 {\n            current = 0;\n        }\n    }\n    result",
  "    let mut left = 0;\n    let mut right = 0;\n    let mut min = ISIZE_MAX;\n \
    \   let mut sum = 0;\n    while right < nums.len() {\n        sum += nums[right];\n\
    \        min = std::cmp::min(min, sum);\n        right += 1;\n        if sum >=\
    \ 0 {\n            sum = 0;\n            left = right;\n        }\n    }\n   \
    \ return min;", "    let mut global = INT_MAX;\n    let mut sum = 0;\n    for\
    \ v in nums {\n        sum += v;\n        global = min(global, sum);\n       \
    \ if sum > 0 {\n            sum = 0;\n        }\n    }\n    global", "    // \
    \    let mut min_sum = isize::MAX;\n    //     let mut last_idx = nums.len();\n\
    \    //     for i in 0..nums.len() {\n    //         let mut sum = 0;\n    //\
    \         for j in i..nums.len() {\n    //             sum += nums[j];\n    //\
    \             if sum <= min_sum {\n    //                 min_sum = sum;\n   \
    \ //                 last_idx = j;\n    //             }\n    //         }\n \
    \   //     }\n    //     min_sum\n    let mut min_sum = isize::MAX;\n    let mut\
    \ current_sum = 0;\n    for &num in nums.iter() {\n        current_sum += num;\n\
    \        if current_sum < min_sum {\n            min_sum = current_sum;\n    \
    \    }\n        if current_sum > 0 {\n            current_sum = 0;\n        }\n\
    \    }\n    min_sum", "    let mut min_sum = isize::max_value();\n    let mut\
    \ current_sum = 0;\n    for i in 0..nums.len() {\n        current_sum += nums[i];\n\
    \        if current_sum < min_sum {\n            min_sum = current_sum;\n    \
    \    }\n        if current_sum > 0 {\n            current_sum = 0;\n        }\n\
    \    }\n    min_sum", "    let mut subSum = nums[0];\n    let mut sum = nums[0];\n\
    \    for i in 1..nums.len() {\n        subSum = std::cmp::min(nums[i], subSum\
    \ + nums[i]);\n        sum = std::cmp::min(sum, subSum);\n    }\n    sum", " \
    \   let mut min_sum = nums[0];\n    let mut sum = 0;\n    for i in 0..nums.len()\
    \ {\n        sum += nums[i];\n        if sum < min_sum {\n            min_sum\
    \ = sum;\n        }\n        if sum > 0 {\n            sum = 0;\n        }\n \
    \   }\n    min_sum", "    let mut min = std::isize::MAX;\n    let mut sum = 0;\n\
    \    for n in nums {\n        sum += n;\n        if sum < min {\n            min\
    \ = sum;\n        }\n        if sum > 0 {\n            sum = 0;\n        }\n \
    \   }\n    min", "    if nums.is_empty() {\n        return 0;\n    }\n    let\
    \ mut min = isize::max_value();\n    let mut sum = 0;\n    for n in nums {\n \
    \       sum += n;\n        min = min.min(sum);\n        if sum < 0 {\n       \
    \     sum = 0;\n        }\n    }\n    min", "    if nums.is_empty() {\n      \
    \  return 0;\n    }\n    let mut max_sum = isize::min_value();\n    let mut min_sum\
    \ = 0;\n    let mut sum = 0;\n    for n in nums {\n        sum += n;\n       \
    \ max_sum = std::cmp::max(max_sum, sum - min_sum);\n        min_sum = std::cmp::min(min_sum,\
    \ sum);\n    }\n    max_sum", "    let mut min_sum = nums[0];\n    let mut cur_sum\
    \ = 0;\n    for v in nums {\n        cur_sum += v;\n        if cur_sum < min_sum\
    \ {\n            min_sum = cur_sum;\n        }\n        if cur_sum > 0 {\n   \
    \         cur_sum = 0;\n        }\n    }\n    min_sum", "    let (mut min, mut\
    \ curr): (isize, isize) = (isize::max_value(), 0);\n    for x in nums {\n    \
    \    curr = curr.min(0) + x;\n        min = min.min(curr);\n    }\n    min", " \
    \   let mut res = std::isize::MAX;\n    let mut sum = 0;\n    for v in nums {\n\
    \        sum += v;\n        res = std::cmp::min(res, sum);\n        if sum > 0\
    \ {\n            sum = 0;\n        }\n    }\n    res", "    let mut sum = 0;\n\
    \    let mut min_sum = isize::max_value();\n    for num in nums {\n        sum\
    \ += num;\n        min_sum = min_sum.min(sum);\n        if sum > 0 {\n       \
    \     sum = 0;\n        }\n    }\n    min_sum", "    let mut res = nums[0];\n\
    \    let mut tmp = nums[0];\n    for i in 1..nums.len() {\n        tmp = std::cmp::min(tmp\
    \ + nums[i], nums[i]);\n        res = std::cmp::min(res, tmp);\n    }\n    res",
  "    let mut min = isize::max_value();\n    let mut sum = 0;\n    for num in nums\
    \ {\n        sum += num;\n        min = min.min(sum);\n        if sum > 0 {\n\
    \            sum = 0;\n        }\n    }\n    min", "    let mut min = nums[0];\n\
    \    let mut sum = 0;\n    for n in nums {\n        sum += n;\n        if sum\
    \ < min {\n            min = sum;\n        }\n        if sum > 0 {\n         \
    \   sum = 0;\n        }\n    }\n    min", "    let mut arr = [0isize; 256];\n\
    \    let mut current_sum = 0;\n    let mut minimum_sum = std::isize::MAX;\n  \
    \  nums.iter().for_each(|num| {\n        current_sum += num;\n        arr[(current_sum\
    \ & 255) as usize] += 1;\n        let sum = current_sum - minimum_sum;\n     \
    \   let count = arr[(sum & 255) as usize];\n        if count > 0 {\n         \
    \   minimum_sum = current_sum;\n        }\n    });\n    minimum_sum", "    let\
    \ mut current_sum = 0;\n    let mut min_sum = isize::max_value();\n    for i in\
    \ 0..nums.len() {\n        current_sum += nums[i];\n        if current_sum < min_sum\
    \ {\n            min_sum = current_sum;\n        }\n        if current_sum > 0\
    \ {\n            current_sum = 0;\n        }\n    }\n    min_sum", "    use std::cmp::max;\n\
    \    let mut min_sum = std::isize::MAX;\n    let mut current_sum = 0;\n    for\
    \ num in nums {\n        current_sum = max(num, current_sum + num);\n        min_sum\
    \ = min(min_sum, current_sum);\n    }\n    min_sum", "    use std::cmp::min;\n\
    \    let mut min_sum = 0;\n    let mut last_sum = 0;\n    for num in nums {\n\
    \        last_sum = min(last_sum + num, num);\n        min_sum = min(min_sum,\
    \ last_sum);\n    }\n    min_sum", "    let mut min = std::isize::MAX;\n    let\
    \ mut current = 0;\n    for n in nums {\n        current += n;\n        if current\
    \ < min {\n            min = current;\n        }\n        if current > 0 {\n \
    \           current = 0;\n        }\n    }\n    min", "    let mut sum: isize\
    \ = 0;\n    let mut min_sum: isize = std::isize::MAX;\n    for num in nums {\n\
    \        sum += num;\n        if sum < min_sum {\n            min_sum = sum;\n\
    \        }\n        if sum > 0 {\n            sum = 0;\n        }\n    }\n   \
    \ min_sum", "    let mut mi = std::isize::MAX;\n    let mut sum = 0;\n    for\
    \ num in nums {\n        sum += num;\n        mi = std::cmp::min(mi, sum);\n \
    \       if sum > 0 {\n            sum = 0;\n        }\n    }\n    mi", "    let\
    \ mut min_sum = isize::max_value();\n    let mut sum = 0;\n    for num in nums\
    \ {\n        sum += num;\n        min_sum = isize::min(min_sum, sum);\n      \
    \  if sum > 0 {\n            sum = 0;\n        }\n    }\n    min_sum", "    let\
    \ mut result = *nums.first().unwrap();\n    let mut last = 0;\n    for number\
    \ in nums {\n        last = (last + number).min(number);\n        result = result.min(last);\n\
    \    }\n    result", "    let mut sub_sum = nums[0];\n    let mut min_sum = nums[0];\n\
    \    for i in 1..nums.len() {\n        if nums[i] > sub_sum + nums[i] {\n    \
    \        sub_sum = nums[i];\n        } else {\n            sub_sum += nums[i];\n\
    \        }\n        if sub_sum < min_sum {\n            min_sum = sub_sum;\n \
    \       }\n    }\n    min_sum", "    // non-empty sub-array\n    if nums.len()\
    \ == 0 {\n        return 0;\n    }\n    // non-empty sub-array\n    let mut sum\
    \ = nums[0];\n    let mut min_sum = sum;\n    for i in 1..nums.len() {\n     \
    \   sum = sum.max(0) + nums[i];\n        min_sum = min_sum.min(sum);\n    }\n\
    \    min_sum", "    let mut min_sum = nums[0];\n    let mut sum = nums[0];\n \
    \   for i in 1..nums.len() {\n        sum = sum.min(0) + nums[i];\n        min_sum\
    \ = min_sum.min(sum);\n    }\n    min_sum", "    let mut res = nums[0];\n    let\
    \ mut sum = 0;\n    for n in nums {\n        sum += n;\n        res = res.min(sum);\n\
    \        if sum > 0 {\n            sum = 0;\n        }\n    }\n    res", "   \
    \ let mut curr_min = None;\n    let mut curr_sum = 0;\n    for n in nums {\n \
    \       curr_sum += n;\n        match curr_min {\n            None => curr_min\
    \ = Some(curr_sum),\n            Some(c) => {\n                if curr_sum < c\
    \ {\n                    curr_min = Some(curr_sum);\n                }\n     \
    \       }\n        }\n        if curr_sum > 0 {\n            curr_sum = 0;\n \
    \       }\n    }\n    curr_min.unwrap()", "    let mut min_sum = std::isize::MAX;\n\
    \    let mut sum = 0;\n    for i in 0..nums.len() {\n        sum += nums[i];\n\
    \        if sum < min_sum {\n            min_sum = sum;\n        }\n        if\
    \ sum > 0 {\n            sum = 0;\n        }\n    }\n    min_sum", "    let mut\
    \ current_sum = nums[0];\n    let mut min_sum = current_sum;\n    for i in 1..nums.len()\
    \ {\n        current_sum = current_sum.max(0) + nums[i];\n        min_sum = min_sum.min(current_sum);\n\
    \    }\n    min_sum", "    let mut min_sum = isize::max_value();\n    let mut\
    \ cur_sum = 0;\n    for i in 0..nums.len() {\n        cur_sum += nums[i];\n  \
    \      if cur_sum < min_sum {\n            min_sum = cur_sum;\n        }\n   \
    \     if cur_sum > 0 {\n            cur_sum = 0;\n        }\n    }\n    min_sum",
  "    let mut min_sum = std::isize::MAX;\n    let mut sum = 0;\n    for (i, &num)\
    \ in nums.iter().enumerate() {\n        sum += num;\n        if sum < min_sum\
    \ {\n            min_sum = sum;\n        }\n        if i > 0 {\n            sum\
    \ -= nums[i - 1];\n        }\n    }\n    min_sum", "    // \u4F7F\u7528\u5C3A\u53D6\
    \u6CD5\n    let mut left = 0;\n    let mut right = 0;\n    let mut min = std::isize::MAX;\n\
    \    let mut sum = 0;\n    loop {\n        if sum < 0 {\n            sum -= nums[left];\n\
    \            left += 1;\n        } else {\n            if right == nums.len()\
    \ {\n                break;\n            }\n            sum += nums[right];\n\
    \            right += 1;\n        }\n        min = if sum < min { sum } else {\
    \ min };\n    }\n    min", "    let mut c_sum = 0;\n    let mut min_sum = std::isize::MAX;\n\
    \    for n in nums {\n        c_sum += n;\n        if c_sum < min_sum {\n    \
    \        min_sum = c_sum;\n        }\n        if c_sum > 0 {\n            c_sum\
    \ = 0;\n        }\n    }\n    min_sum", "    let mut start = 0;\n    let mut end\
    \ = 0;\n    let mut current_sum = 0;\n    let mut min_sum = std::isize::MAX;\n\
    \    for i in 0..nums.len() {\n        current_sum += nums[i];\n        if current_sum\
    \ < min_sum {\n            min_sum = current_sum;\n            end = i;\n    \
    \    }\n        if current_sum > 0 {\n            current_sum = 0;\n         \
    \   start = i + 1;\n        }\n    }\n    min_sum", "    let mut min = nums[0];\n\
    \    let mut sum = 0;\n    for v in nums {\n        sum += v;\n        if sum\
    \ < min {\n            min = sum;\n        }\n        if sum > 0 {\n         \
    \   sum = 0;\n        }\n    }\n    min", "    let mut min_value = nums[0];\n\
    \    let mut sum = nums[0];\n    for i in 1..nums.len() {\n        sum = nums[i]\
    \ + std::cmp::min(sum, 0);\n        min_value = std::cmp::min(min_value, sum);\n\
    \    }\n    min_value", "    let mut sum = nums[0];\n    let mut result = nums[0];\n\
    \    for i in 1..nums.len() {\n        if sum > 0 {\n            sum = nums[i];\n\
    \        } else {\n            sum += nums[i];\n        }\n        result = std::cmp::min(result,\
    \ sum);\n    }\n    result", "    let mut min_sum = isize::max_value();\n    let\
    \ mut sum = 0;\n    for num in nums {\n        sum += num;\n        min_sum =\
    \ sum.min(min_sum);\n        if sum > 0 {\n            sum = 0;\n        }\n \
    \   }\n    min_sum", "    let mut min_sum = std::isize::MAX;\n    let mut sum\
    \ = 0;\n    for num in nums {\n        sum += num;\n        min_sum = std::cmp::min(min_sum,\
    \ sum);\n        if sum > 0 {\n            sum = 0;\n        }\n    }\n    min_sum",
  "    let mut sum = 0;\n    let mut min_sum = 0;\n    let mut min_sum_neg = std::isize::MAX;\n\
    \    for num in nums {\n        sum += num;\n        if sum - min_sum < min_sum_neg\
    \ {\n            min_sum_neg = sum - min_sum;\n        }\n        if sum < min_sum\
    \ {\n            min_sum = sum;\n        }\n    }\n    min_sum_neg", "    let\
    \ mut min_so_far = nums[0];\n    let mut min_curr = nums[0];\n    for i in 1..nums.len()\
    \ {\n        min_curr = min(nums[i], min_curr + nums[i]);\n        min_so_far\
    \ = min(min_so_far, min_curr);\n    }\n    min_so_far", "    let mut min_sum =\
    \ isize::max_value();\n    let mut sum = 0;\n    for num in nums {\n        sum\
    \ += num;\n        min_sum = min_sum.min(sum);\n        if sum > 0 {\n       \
    \     sum = 0;\n        }\n    }\n    min_sum", "    let (mut min_so_far, mut\
    \ min_ending_here) = (std::isize::MAX, 0);\n    for num in nums {\n        min_ending_here\
    \ = std::cmp::min(min_ending_here + num, num);\n        min_so_far = std::cmp::min(min_so_far,\
    \ min_ending_here);\n    }\n    min_so_far", "    let mut res = 0;\n    for i\
    \ in 0..nums.len() {\n        let mut tmp = 0;\n        for j in i..nums.len()\
    \ {\n            tmp += nums[j];\n            if res == 0 || tmp < res {\n   \
    \             res = tmp;\n            }\n        }\n    }\n    res", "    let\
    \ mut res = std::isize::MAX;\n    let mut curr_sum = 0;\n    for i in 0..nums.len()\
    \ {\n        curr_sum += nums[i];\n        res = res.min(curr_sum);\n        if\
    \ curr_sum > 0 {\n            curr_sum = 0;\n        }\n    }\n    res", "   \
    \ let mut min_value = std::isize::MAX;\n    let mut sum = 0;\n    for i in 0..nums.len()\
    \ {\n        if sum + nums[i] < nums[i] {\n            sum = nums[i];\n      \
    \  } else {\n            sum += nums[i];\n        }\n        if sum < min_value\
    \ {\n            min_value = sum;\n        }\n    }\n    min_value", "    let\
    \ mut min_sum = std::isize::MAX;\n    let mut current_sum = 0;\n    for num in\
    \ nums {\n        current_sum += num;\n        if current_sum < min_sum {\n  \
    \          min_sum = current_sum;\n        }\n        if current_sum > 0 {\n \
    \           current_sum = 0;\n        }\n    }\n    min_sum", "    let mut min\
    \ = std::isize::MAX;\n    let mut sum = 0;\n    for i in 0..nums.len() {\n   \
    \     sum += nums[i];\n        if sum < min {\n            min = sum;\n      \
    \  }\n        if sum > 0 {\n            sum = 0;\n        }\n    }\n    min",
  "    let mut current = isize::max_value();\n    let mut min = isize::max_value();\n\
    \    for i in 0..nums.len() {\n        if current < 0 {\n            current =\
    \ nums[i];\n        } else {\n            current += nums[i];\n        }\n   \
    \     if current < min {\n            min = current;\n        }\n    }\n    min",
  "    // let mut min_sum = nums[0];\n    // let mut min_idx = 0;\n    // let mut\
    \ max_sum = nums[0];\n    // let mut max_idx = 0;\n    // let mut curr_sum = nums[0];\n\
    \    // let mut curr_idx = 0;\n    // for (i, &x) in nums.iter().enumerate().skip(1)\
    \ {\n    //     curr_sum += x;\n    //     if x < min_sum {\n    //         min_sum\
    \ = x;\n    //         min_idx = i;\n    //     }\n    //     if curr_sum < min_sum\
    \ {\n    //         min_sum = curr_sum;\n    //         min_idx = curr_idx;\n\
    \    //     }\n    //     if curr_sum < 0 {\n    //         curr_sum = 0;\n  \
    \  //         curr_idx = i + 1;\n    //     }\n    //     if x > max_sum {\n \
    \   //         max_sum = x;\n    //         max_idx = i;\n    //     }\n    //\
    \     if curr_sum > max_sum {\n    //         max_sum = curr_sum;\n    //    \
    \     max_idx = curr_idx;\n    //     }\n    // }\n    // if min_idx < max_idx\
    \ {\n    //     return 0;\n    // }\n    // return min_sum;\n    let mut min_sum\
    \ = nums[0];\n    let mut curr_sum = nums[0];\n    for &x in nums.iter().skip(1)\
    \ {\n        curr_sum += x;\n        if curr_sum < min_sum {\n            min_sum\
    \ = curr_sum;\n        }\n        if curr_sum < 0 {\n            curr_sum = 0;\n\
    \        }\n    }\n    return min_sum;", "    let n = nums.len();\n    let mut\
    \ min_sum = std::isize::MAX;\n    let mut sum = 0;\n    for i in 0..n {\n    \
    \    sum += nums[i];\n        min_sum = std::cmp::min(min_sum, sum);\n       \
    \ if sum > 0 {\n            sum = 0;\n        }\n    }\n    min_sum", "    let\
    \ mut min_sum = nums[0];\n    let mut sum = 0;\n    for n in nums {\n        sum\
    \ += n;\n        if sum < min_sum {\n            min_sum = sum;\n        }\n \
    \       if sum > 0 {\n            sum = 0;\n        }\n    }\n    min_sum", " \
    \   let mut min = std::isize::MAX;\n    let mut sum = 0;\n    for i in 0..nums.len()\
    \ {\n        sum += nums[i];\n        if sum < min {\n            min = sum;\n\
    \        }\n        if sum > 0 {\n            sum = 0;\n        }\n    }\n   \
    \ min", "    if nums.is_empty() {\n        return 0;\n    }\n    let mut sum =\
    \ nums[0];\n    let mut min = nums[0];\n    for i in 1..nums.len() {\n       \
    \ sum = std::cmp::min(nums[i], sum + nums[i]);\n        min = std::cmp::min(min,\
    \ sum);\n    }\n    min", "    let mut min = *nums.first().unwrap();\n    let\
    \ mut sum = min;\n    for n in nums.iter().skip(1) {\n        sum += n;\n    \
    \    if sum < min {\n            min = sum;\n        }\n        if sum > 0 {\n\
    \            sum = 0;\n        }\n    }\n    min", "    let mut min = None;\n\
    \    let mut sum = 0;\n    for num in nums {\n        sum += num;\n        min\
    \ = match min {\n            None => Some(sum),\n            Some(v) => Some(std::cmp::min(v,\
    \ sum)),\n        };\n    }\n    return min.unwrap();", "    if nums.is_empty()\
    \ {\n        return 0;\n    }\n    let mut res = nums[0];\n    let mut sum = 0;\n\
    \    for i in 0..nums.len() {\n        sum += nums[i];\n        res = std::cmp::min(res,\
    \ sum);\n        if sum > 0 {\n            sum = 0;\n        }\n    }\n    res",
  "    if nums.is_empty() {\n        return 0;\n    }\n    let mut min_sum = isize::max_value();\n\
    \    let mut sum = 0;\n    for i in 0..nums.len() {\n        sum += nums[i];\n\
    \        min_sum = min_sum.min(sum);\n        if sum > 0 {\n            sum =\
    \ 0;\n        }\n    }\n    min_sum", "    let mut minimum_sum = isize::max_value();\n\
    \    let mut sum = 0;\n    for i in 0..nums.len() {\n        sum += nums[i];\n\
    \        if sum < minimum_sum {\n            minimum_sum = sum;\n        }\n \
    \       if sum > 0 {\n            sum = 0;\n        }\n    }\n    minimum_sum",
  "    let mut sum = nums[0];\n    let mut min_sum = sum;\n    for x in nums.iter().skip(1)\
    \ {\n        sum = sum.max(*x);\n        min_sum = min_sum.min(sum);\n    }\n\
    \    min_sum", "    let mut sum = 0;\n    let mut min_sum = std::isize::MAX;\n\
    \    for num in nums {\n        sum += num;\n        min_sum = std::cmp::min(min_sum,\
    \ sum);\n        if sum > 0 {\n            sum = 0;\n        }\n    }\n    min_sum",
  "    if nums.is_empty() {\n        return 0;\n    }\n    let mut sum = nums[0];\n\
    \    let mut min = nums[0];\n    for &n in nums.iter().skip(1) {\n        sum\
    \ = std::cmp::min(n, sum + n);\n        min = std::cmp::min(min, sum);\n    }\n\
    \    min", "    let mut result = 0;\n    let mut sum = 0;\n    let mut min = isize::max_value();\n\
    \    for num in nums {\n        sum += num;\n        min = sum.min(min);\n   \
    \     if sum > 0 {\n            sum = 0;\n        }\n        result = min.min(result);\n\
    \    }\n    result", "    let mut s = 0;\n    let mut r = isize::max_value();\n\
    \    for n in nums {\n        s += n;\n        r = r.min(s);\n        s = s.max(0);\n\
    \    }\n    r", "    let mut sum = 0;\n    let mut min = isize::max_value();\n\
    \    for i in 0..nums.len() {\n        sum += nums[i];\n        if sum < min {\n\
    \            min = sum;\n        }\n        if sum > 0 {\n            sum = 0;\n\
    \        }\n    }\n    min", "    use std::cmp::min;\n    if nums.is_empty() {\n\
    \        return 0;\n    }\n    let (mut min_sum, mut sum) = (nums[0], nums[0]);\n\
    \    for num in nums.iter().skip(1) {\n        sum = min(sum + num, *num);\n \
    \       min_sum = min(min_sum, sum);\n    }\n    min_sum", "    let mut min =\
    \ nums[0];\n    let mut sum = nums[0];\n    for i in 1..nums.len() {\n       \
    \ sum = std::cmp::min(nums[i], sum + nums[i]);\n        min = std::cmp::min(min,\
    \ sum);\n    }\n    min", "    let mut res = isize::max_value();\n    let mut\
    \ sum = 0;\n    for num in nums {\n        sum += num;\n        res = res.min(sum);\n\
    \        if sum > 0 {\n            sum = 0;\n        }\n    }\n    res", "   \
    \ let mut best = isize::max_value();\n    let mut current = 0;\n    for item in\
    \ nums {\n        current += item;\n        best = best.min(current);\n      \
    \  if current > 0 {\n            current = 0;\n        }\n    }\n    best", " \
    \   use std::cmp::max;\n    nums.iter().fold((0, isize::min_value()), |(sum, min),\
    \ x| {\n        (max(sum + x, 0), max(min, sum + x))\n    }).1", "    if nums.is_empty()\
    \ {\n        return 0;\n    }\n    let mut min = nums[0];\n    let mut sum = nums[0];\n\
    \    for &x in nums.iter().skip(1) {\n        sum = sum.min(0) + x;\n        min\
    \ = min.min(sum);\n    }\n    min", "    let mut min_sum = *nums.iter().min().unwrap();\n\
    \    let mut curr_sum = 0;\n    let mut curr_min = min_sum;\n    for i in 0..nums.len()\
    \ {\n        curr_sum += nums[i];\n        if curr_sum < curr_min {\n        \
    \    curr_min = curr_sum;\n        }\n        if curr_sum >= 0 {\n           \
    \ curr_sum = 0;\n        }\n        if curr_min < min_sum {\n            min_sum\
    \ = curr_min;\n        }\n    }\n    min_sum", "    nums.iter().fold((isize::MAX,\
    \ 0), |acc, n| {\n        (acc.0.min(acc.1 + n), acc.1 + n)\n    }).0", "    let\
    \ mut min_sum = std::isize::MAX;\n    let mut sum = 0;\n    for i in 0..nums.len()\
    \ {\n        for j in i..nums.len() {\n            sum += nums[j];\n         \
    \   if sum < min_sum {\n                min_sum = sum;\n            }\n      \
    \  }\n        sum = 0;\n    }\n    min_sum", "    let mut min_sum = nums[0];\n\
    \    let mut sum = 0;\n    for i in 0..nums.len() {\n        sum += nums[i];\n\
    \        if sum < min_sum {\n            min_sum = sum;\n        }\n        if\
    \ sum > 0 {\n            sum = 0;\n        }\n    }\n    min_sum", "    let mut\
    \ min_sum = isize::max_value();\n    let mut sum = 0;\n    for i in 0..nums.len()\
    \ {\n        sum += nums[i];\n        if sum < min_sum {\n            min_sum\
    \ = sum;\n        }\n        if sum > 0 {\n            sum = 0;\n        }\n \
    \   }\n    min_sum", "    if nums.is_empty() {\n        return 0;\n    }\n   \
    \ let mut min = nums[0];\n    let mut sum = 0;\n    for n in nums {\n        sum\
    \ += n;\n        if sum < min {\n            min = sum;\n        }\n        if\
    \ sum > 0 {\n            sum = 0;\n        }\n    }\n    min", "    let mut min_sum\
    \ = std::isize::MAX;\n    let mut sum = 0;\n    for num in nums {\n        sum\
    \ += num;\n        min_sum = min_sum.min(sum);\n        if sum > 0 {\n       \
    \     sum = 0;\n        }\n    }\n    min_sum", "    let mut sum = nums[0];\n\
    \    let mut min_sum = sum;\n    for i in 1..nums.len() {\n        if sum > 0\
    \ {\n            sum = nums[i];\n        } else {\n            sum += nums[i];\n\
    \        }\n        min_sum = min_sum.min(sum);\n    }\n    min_sum", "    let\
    \ mut min = 0;\n    let mut sum = 0;\n    for &n in nums.iter() {\n        sum\
    \ += n;\n        if sum < min {\n            min = sum;\n        }\n    }\n  \
    \  min", "    let mut min_sum = nums[0];\n    let mut sum = 0;\n    for &num in\
    \ nums.iter() {\n        sum += num;\n        if sum < min_sum {\n           \
    \ min_sum = sum;\n        }\n        if sum > 0 {\n            sum = 0;\n    \
    \    }\n    }\n    min_sum", "    if nums.is_empty() {\n        return 0;\n  \
    \  }\n    let mut minimum_sum = std::isize::MAX;\n    let mut current_sum = 0;\n\
    \    for num in nums {\n        current_sum += num;\n        minimum_sum = minimum_sum.min(current_sum);\n\
    \        if current_sum > 0 {\n            current_sum = 0;\n        }\n    }\n\
    \    minimum_sum", "    let n = nums.len();\n    let mut sums = vec![0; n + 1];\n\
    \    for i in 0..n {\n        sums[i + 1] = sums[i] + nums[i];\n    }\n    let\
    \ mut min_so_far = isize::max_value();\n    for i in 0..(n + 1) {\n        for\
    \ j in i..(n + 1) {\n            min_so_far = min(min_so_far, sums[j] - sums[i]);\n\
    \        }\n    }\n    min_so_far", "    let mut min_sum = isize::max_value();\n\
    \    let mut running_sum = 0;\n    for num in nums {\n        running_sum += num;\n\
    \        min_sum = running_sum.min(min_sum);\n        if running_sum > 0 {\n \
    \           running_sum = 0;\n        }\n    }\n    min_sum", "    let mut sum\
    \ = 0;\n    let mut res = 0;\n    let mut min = std::isize::MAX;\n    for n in\
    \ nums {\n        sum += n;\n        if sum < res {\n            res = sum;\n\
    \        }\n        if sum - res < min {\n            min = sum - res;\n     \
    \   }\n    }\n    min", "    let mut sum = 0;\n    let mut min_sum = 0;\n    let\
    \ mut min_val = std::isize::MAX;\n    for num in nums {\n        sum += num;\n\
    \        min_val = std::cmp::min(min_val, sum - min_sum);\n        min_sum = std::cmp::min(min_sum,\
    \ sum);\n    }\n    min_val", "    // We want to find the minimum contiguous sub-array\
    \ sum\n    // One way to do this is to calculate the sum of every sub-array and\
    \ then\n    // find the minimum of all the sums. This will be a O(n^2)\n    //\
    \ There is a better way. For each index, we will calculate the sub-array\n   \
    \ // sum up to that index and keep track of the minimum\n    // In this way, we\
    \ will only do one pass over the array, so the runtime\n    // will be O(n)\n\
    \    let mut m: isize = std::isize::MAX;\n    let mut s: isize = 0;\n    for i\
    \ in 0..nums.len() {\n        s += nums[i];\n        if s < m {\n            m\
    \ = s;\n        }\n        if s > 0 {\n            s = 0;\n        }\n    }\n\
    \    m", "    let mut min_sum = std::isize::MAX;\n    let mut sum = 0;\n    for\
    \ num in nums {\n        sum += num;\n        min_sum = std::cmp::min(min_sum,\
    \ sum);\n        if sum > 0 {\n            sum = 0;\n        }\n    }\n    min_sum",
  "    let mut sum = 0;\n    let mut prev = 0;\n    let mut min = std::isize::MAX;\n\
    \    let mut i = 0;\n    while i < nums.len() {\n        sum += nums[i];\n   \
    \     min = std::cmp::min(min, sum - prev);\n        prev = std::cmp::min(prev,\
    \ sum);\n        i += 1;\n    }\n    min", "    if nums.is_empty() {\n       \
    \ return 0;\n    }\n    let mut sum = nums[0];\n    let mut min = sum;\n    for\
    \ i in 1..nums.len() {\n        sum = sum.max(0) + nums[i];\n        min = min.min(sum);\n\
    \    }\n    min", "    let mut sum = 0;\n    let mut min = std::isize::MAX;\n\
    \    for item in nums {\n        sum += item;\n        min = min.min(sum);\n \
    \       if sum > 0 {\n            sum = 0;\n        }\n    }\n    min", "    let\
    \ mut sum = 0;\n    let mut min_sum = isize::MAX;\n    for n in nums {\n     \
    \   sum += n;\n        min_sum = std::cmp::min(min_sum, sum);\n        if sum\
    \ > 0 {\n            sum = 0;\n        }\n    }\n    min_sum", "    let mut smallest\
    \ = isize::max_value();\n    let mut sum = 0;\n    for n in nums {\n        sum\
    \ += n;\n        if sum < smallest {\n            smallest = sum;\n        }\n\
    \        if sum > 0 {\n            sum = 0;\n        }\n    }\n    smallest",
  "    let mut cur = nums[0];\n    let mut min = nums[0];\n    for i in 1..nums.len()\
    \ {\n        cur = nums[i].min(cur + nums[i]);\n        min = min.min(cur);\n\
    \    }\n    min", "    let mut sum = nums[0];\n    let mut min = sum;\n    for\
    \ i in 1..nums.len() {\n        sum = nums[i].max(sum + nums[i]);\n        min\
    \ = min.min(sum);\n    }\n    min", "    let mut min_sum = std::isize::MAX;\n\
    \    let mut left = 0;\n    let mut right = 0;\n    let mut sum = 0;\n    while\
    \ right < nums.len() {\n        sum += nums[right];\n        while sum >= 0 {\n\
    \            min_sum = std::cmp::min(min_sum, sum);\n            sum -= nums[left];\n\
    \            left += 1;\n        }\n        right += 1;\n    }\n    min_sum",
  "    let mut s = nums[0];\n    let mut ans = nums[0];\n    for num in nums[1..].iter()\
    \ {\n        s = min(s + num, *num);\n        ans = min(ans, s);\n    }\n    ans",
  "    if nums.is_empty() {\n        return 0;\n    }\n    let (mut min_sum, mut sum)\
    \ = (std::isize::MAX, 0);\n    for i in 0..nums.len() {\n        sum += nums[i];\n\
    \        min_sum = std::cmp::min(min_sum, sum);\n        if sum > 0 {\n      \
    \      sum = 0;\n        }\n    }\n    min_sum", "    let mut min_sum = std::isize::MAX;\n\
    \    let mut current_sum = 0;\n    for num in nums {\n        current_sum += num;\n\
    \        if current_sum < min_sum {\n            min_sum = current_sum;\n    \
    \    }\n        if current_sum > 0 {\n            current_sum = 0;\n        }\n\
    \    }\n    min_sum", "    let mut min = nums[0];\n    let mut sum = 0;\n    for\
    \ num in nums {\n        sum += num;\n        if sum < min {\n            min\
    \ = sum;\n        }\n        if sum > 0 {\n            sum = 0;\n        }\n \
    \   }\n    min", "    let mut all_negatives = true;\n    let mut min_neg_val =\
    \ isize::max_value();\n    let mut sum = 0;\n    let mut temp_sum = 0;\n    for\
    \ i in nums {\n        sum += i;\n        if i > 0 {\n            all_negatives\
    \ = false;\n        } else {\n            min_neg_val = i.min(min_neg_val);\n\
    \        }\n    }\n    if all_negatives {\n        return min_neg_val;\n    }\n\
    \    if sum > 0 {\n        return 0;\n    }\n    sum = 0;\n    for i in nums {\n\
    \        temp_sum += i;\n        sum = sum.min(temp_sum);\n    }\n    return sum;",
  "    let mut min: isize = *nums.iter().min().unwrap();\n    let mut curr: isize\
    \ = 0;\n    for num in nums {\n        curr += num;\n        if curr < min {\n\
    \            min = curr;\n        }\n        if curr > 0 {\n            curr =\
    \ 0;\n        }\n    }\n    min", "    if nums.is_empty() {\n        return 0;\n\
    \    }\n    let mut left = 0;\n    let mut right = 0;\n    let mut res = isize::max_value();\n\
    \    let mut sum = 0;\n    loop {\n        if sum < 0 {\n            sum -= nums[left];\n\
    \            left += 1;\n        } else {\n            sum += nums[right];\n \
    \           right += 1;\n        }\n        if right >= nums.len() {\n       \
    \     break;\n        }\n        res = res.min(sum);\n    }\n    res", "    let\
    \ mut min_so_far = isize::MAX;\n    let mut sum = 0;\n    for n in nums {\n  \
    \      sum += n;\n        min_so_far = min_so_far.min(sum);\n        if sum >\
    \ 0 {\n            sum = 0;\n        }\n    }\n    min_so_far", "    let mut min_sum\
    \ = std::isize::MAX;\n    let mut sum = 0;\n    for num in nums {\n        sum\
    \ += num;\n        min_sum = std::cmp::min(min_sum, sum);\n        if sum > 0\
    \ {\n            sum = 0;\n        }\n    }\n    min_sum", "    let mut sum =\
    \ 0;\n    let mut min_sum = std::isize::MAX;\n    for x in nums {\n        sum\
    \ += x;\n        min_sum = std::cmp::min(min_sum, sum);\n        if sum > 0 {\n\
    \            sum = 0;\n        }\n    }\n    min_sum", "    let mut min_sum =\
    \ std::isize::MAX;\n    let mut current_sum = 0;\n    for x in nums {\n      \
    \  current_sum += x;\n        if current_sum < min_sum {\n            min_sum\
    \ = current_sum;\n        }\n        if current_sum > 0 {\n            current_sum\
    \ = 0;\n        }\n    }\n    min_sum", "    let mut global_min = nums[0];\n \
    \   let mut sub_min = nums[0];\n    for i in 1..nums.len() {\n        sub_min\
    \ = min(nums[i], sub_min + nums[i]);\n        global_min = min(global_min, sub_min);\n\
    \    }\n    global_min", "    let mut result = std::isize::MAX;\n    let mut sum\
    \ = 0;\n    for &i in nums.iter() {\n        sum += i;\n        result = std::cmp::min(result,\
    \ sum);\n        if sum > 0 {\n            sum = 0;\n        }\n    }\n    result",
  "    let mut min = isize::max_value();\n    let mut sum = 0;\n    for i in 0..nums.len()\
    \ {\n        sum += nums[i];\n        if sum < min {\n            min = sum;\n\
    \        }\n        if sum > 0 {\n            sum = 0;\n        }\n    }\n   \
    \ min", "    let mut min_sum = std::isize::MAX;\n    let mut sum = 0;\n    for\
    \ i in 0..nums.len() {\n        sum += nums[i];\n        if sum < min_sum {\n\
    \            min_sum = sum;\n        }\n        if sum > 0 {\n            sum\
    \ = 0;\n        }\n    }\n    min_sum", "    let mut result = *nums.first().unwrap();\n\
    \    let mut sum = 0;\n    for n in nums {\n        sum += n;\n        result\
    \ = result.min(sum);\n        if sum > 0 {\n            sum = 0;\n        }\n\
    \    }\n    result", "    let mut min_sum = nums[0];\n    let mut sum = 0;\n \
    \   for num in nums {\n        sum += num;\n        if sum < min_sum {\n     \
    \       min_sum = sum;\n        }\n        if sum > 0 {\n            sum = 0;\n\
    \        }\n    }\n    min_sum", "    if nums.is_empty() {\n        return 0;\n\
    \    }\n    let mut min_sum = isize::max_value();\n    let mut current_sum = 0;\n\
    \    for i in 0..nums.len() {\n        current_sum += nums[i];\n        if current_sum\
    \ < min_sum {\n            min_sum = current_sum;\n        }\n        if current_sum\
    \ > 0 {\n            current_sum = 0;\n        }\n    }\n    min_sum", "    let\
    \ mut min_sum = std::isize::MAX;\n    let mut cur_sum = 0;\n    for val in nums\
    \ {\n        cur_sum += val;\n        min_sum = std::cmp::min(min_sum, cur_sum);\n\
    \        if cur_sum > 0 {\n            cur_sum = 0;\n        }\n    }\n    min_sum",
  "    let mut min_sum = std::isize::MAX;\n    let mut sum = 0;\n    for num in nums\
    \ {\n        sum += num;\n        min_sum = sum.min(min_sum);\n        if sum\
    \ > 0 {\n            sum = 0;\n        }\n    }\n    min_sum", "    let mut result\
    \ = isize::max_value();\n    let mut current_sum = 0;\n    for n in nums {\n \
    \       current_sum += n;\n        result = std::cmp::min(result, current_sum);\n\
    \        if current_sum > 0 {\n            current_sum = 0;\n        }\n    }\n\
    \    result", "    let mut min_sum = nums[0];\n    let mut sum = nums[0];\n  \
    \  for num in nums.iter().skip(1) {\n        sum = sum.max(*num);\n        min_sum\
    \ = min_sum.min(sum);\n    }\n    min_sum", "    nums.iter().fold((isize::MAX,\
    \ 0), |(min, acc), &i| {\n        (cmp::min(acc + i, min), cmp::min(i, acc + i))\n\
    \    }).0", "    if nums.is_empty() {\n        return 0;\n    }\n    let mut total\
    \ = nums[0];\n    let mut mins = total;\n    for i in 1..nums.len() {\n      \
    \  total += nums[i];\n        if nums[i] < total {\n            total = nums[i];\n\
    \        }\n        if total < mins {\n            mins = total;\n        }\n\
    \    }\n    mins", "    let mut res = isize::max_value();\n    let mut sum = 0;\n\
    \    for i in 0..nums.len() {\n        sum += nums[i];\n        res = isize::min(res,\
    \ sum);\n        if sum > 0 {\n            sum = 0;\n        }\n    }\n    res",
  "    let mut cur_min_sum = std::isize::MAX;\n    let mut cur_sum = 0;\n    for num\
    \ in nums {\n        cur_sum += num;\n        cur_min_sum = std::cmp::min(cur_min_sum,\
    \ cur_sum);\n        if cur_sum > 0 {\n            cur_sum = 0;\n        }\n \
    \   }\n    cur_min_sum", "    // return 0;\n    let mut min_sum = nums[0];\n \
    \   let mut sum = nums[0];\n    let mut min_start = 0;\n    let mut min_end =\
    \ 0;\n    let mut start = 0;\n    let mut end = 0;\n    for i in 1..nums.len()\
    \ {\n        if sum < 0 {\n            sum = nums[i];\n            start = i;\n\
    \            end = i;\n        } else {\n            sum += nums[i];\n       \
    \     end = i;\n        }\n        if sum < min_sum {\n            min_sum = sum;\n\
    \            min_start = start;\n            min_end = end;\n        }\n    }\n\
    \    // println!(\"min_sum: {}, start: {}, end: {}\", min_sum, min_start, min_end);\n\
    \    min_sum", "    use std::cmp::min;\n    let mut ans = nums[0];\n    let mut\
    \ curr = 0;\n    for x in nums {\n        curr = min(curr + x, x);\n        ans\
    \ = min(ans, curr);\n    }\n    ans", "    let mut min_sum = std::isize::MAX;\n\
    \    let mut sum = 0;\n    for num in nums {\n        sum += num;\n        min_sum\
    \ = std::cmp::min(min_sum, sum);\n        if sum > 0 {\n            sum = 0;\n\
    \        }\n    }\n    min_sum", "    let mut min_sum = nums[0];\n    let mut\
    \ cur_sum = 0;\n    for n in nums {\n        cur_sum += n;\n        if cur_sum\
    \ < min_sum {\n            min_sum = cur_sum;\n        }\n        if cur_sum >\
    \ 0 {\n            cur_sum = 0;\n        }\n    }\n    min_sum", "    let mut\
    \ min_ending_here = nums[0];\n    let mut min_so_far = nums[0];\n    for i in\
    \ 1..nums.len() {\n        min_ending_here = min(nums[i], min_ending_here + nums[i]);\n\
    \        min_so_far = min(min_so_far, min_ending_here);\n    }\n    min_so_far"]
stop_tokens:
- "\n}"
