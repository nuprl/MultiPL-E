language: rs
name: HumanEval_85_add
results:
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  let\
    \ mut sum = 0;\n  for (i, x) in lst.iter().enumerate() {\n    if i % 2 == 1 &&\
    \ x % 2 == 0 {\n      sum += x;\n    }\n  }\n  sum\n}\n\nfn main() {\n    let\
    \ candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823167
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for i in 1..lst.len() {\n        if lst[i] % 2 == 0 {\n\
    \            sum += lst[i];\n        }\n    }\n    sum\n}\n\nfn main() {\n   \
    \ let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `130`,\n right: `122`', /tmp/tmpx0gwxmf6.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823167
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  lst.iter().enumerate().filter(|&(i,_)|\
    \ i % 2 == 1).map(|(_,v)| v).sum()\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmpxuo2r575.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823167
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  // TODO\n    0\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `88`', /tmp/tmp4hydw2tn.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823167
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().filter(|&num| num % 2 == 0).sum()\n}\n\nfn main() {\n    let candidate\
    \ = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpgv_h7y2j.rs:9:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823167
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, n) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && n % 2 == 0 {\n            sum += n;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823167
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().filter(|&(i, _)| i % 2 == 1).fold(0, |acc, (_, x)| acc\
    \ + x)\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmpwo7ft_eu.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823167
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for i in 1..lst.len() {\n        if i % 2 == 1 {\n  \
    \          sum += lst[i];\n        }\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmptjf37yq5.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823167
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().fold(0, |acc, (i, x)| {\n        match (i as isize)\
    \ % 2 {\n            0 => acc + x,\n            _ => acc,\n        }\n    })\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `88`', /tmp/tmp88avwz_5.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823167
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  let\
    \ mut sum = 0;\n  for i in 1..lst.len() {\n    let n = lst[i];\n    if n % 2 ==\
    \ 0 {\n      sum += n;\n    }\n  }\n  sum\n}\n\nfn main() {\n    let candidate\
    \ = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `130`,\n right: `122`', /tmp/tmpre98moi2.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823167
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  let\
    \ mut sum = 0;\n  for x in 0..lst.len() {\n    if x % 2 == 1 {\n      sum += lst[x];\n\
    \    }\n  }\n  sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmpfq_ywis2.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823167
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().fold(0, |acc, (i, x)| {\n        if i % 2 == 1 && x\
    \ % 2 == 0 {\n            acc + x\n        } else {\n            acc\n       \
    \ }\n    })\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823167
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  let\
    \ mut sum = 0;\n  for (i, x) in lst.iter().enumerate() {\n    if i % 2 == 1 &&\
    \ x % 2 == 0 {\n      sum += x;\n    }\n  }\n  sum\n}\n\nfn main() {\n    let\
    \ candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823167
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  lst.iter().enumerate().filter(|&(i,\
    \ x)| i % 2 == 1 && x % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let\
    \ candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823167
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().fold(0, |acc, (i, x)| {\n        if i % 2 == 1 && x\
    \ % 2 == 0 {\n            acc + x\n        } else {\n            acc\n       \
    \ }\n    })\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823167
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut result = 0;\n    for i in 0..lst.len() {\n        if i % 2 == 1 {\n\
    \            result += lst[i];\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmpfvfyoql3.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823167
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  //\
    \ Add your code here\n  lst.iter().enumerate().filter(|(i, _)| i % 2 == 1).map(|(_,\
    \ e)| e).sum()\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmp9o7xaw4u.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823167
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().filter(|(i, _)| i % 2 == 1).map(|(_, &x)| x).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmpg551099h.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823167
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, v) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && *v % 2 == 0 {\n            sum += *v;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823167
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().filter(|&(i, _)| i % 2 == 1).map(|(_, &x)| x).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmp20ru3kdf.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823167
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, n) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && n % 2 == 0 {\n            sum += n;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823167
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut total = 0;\n    for i in 0..lst.len() {\n        if i % 2 == 1 && lst[i]\
    \ % 2 == 0 {\n            total += lst[i];\n        }\n    }\n    total\n}\n\n\
    fn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823167
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().filter(|&(i, _)| i % 2 == 1).map(|(_, i)| i).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmp43oywrrb.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823167
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut s: isize = 0;\n    for (i, v) in lst.iter().enumerate() {\n       \
    \ if i % 2 == 1 && *v % 2 == 0 {\n            s += *v;\n        }\n    }\n   \
    \ s\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823167
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for i in 0..lst.len() {\n        if i % 2 == 1 && lst[i]\
    \ % 2 == 0 {\n            sum += lst[i];\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823167
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  return lst.iter().enumerate().filter(|&(i,_)| i % 2 == 1).map(|(_, &x)| x).sum();\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmpgzgm63iy.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823167
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut total = 0;\n    for (i, &j) in lst.iter().enumerate() {\n        if\
    \ i % 2 == 1 && j % 2 == 0 {\n            total += j;\n        }\n    }\n    total\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823168
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().filter(|&(i,_)| i%2==1).map(|(_,&x)| x).sum()\n}\n\n\
    fn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmpjfd3tdby.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823168
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().fold(0, |acc, (ind, &el)| {\n        if ind % 2 == 1\
    \ && el % 2 == 0 {\n            acc + el\n        } else {\n            acc\n\
    \        }\n    })\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823168
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (index, element) in lst.iter().enumerate() {\n  \
    \      if index % 2 == 1 && element % 2 == 0 {\n            sum += element;\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823168
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for i in 1..lst.len() {\n        if i % 2 == 1 {\n  \
    \          sum += lst[i];\n        }\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmptjf37yq5.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823167
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().filter(|&(x, _)| x % 2 == 1).fold(0, |acc, (_, &x)|\
    \ acc + x)\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmp5rlal21t.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823168
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().filter(|e| (e.0 & 1) == 1).filter(|e| e.1 % 2 == 0).map(|e|\
    \ e.1).sum()\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823168
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for i in 0..lst.len() {\n        if i % 2 == 1 && lst[i]\
    \ % 2 == 0 {\n            sum += lst[i];\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823167
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut result = 0;\n    for (i, n) in lst.iter().enumerate() {\n        if\
    \ i % 2 == 1 && n % 2 == 0 {\n            result += n;\n        }\n    }\n   \
    \ result\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823168
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().filter(|&(index, _)| index % 2 == 1).map(|(_, i)| i).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmpe6w_jabd.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823168
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().filter(|(i, _)| i % 2 == 1).map(|(_, x)| x).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmpirueghet.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823168
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  return lst.iter().step_by(2).sum();\n}\n\nfn main() {\n    let candidate =\
    \ add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `88`', /tmp/tmpz8qv7tg7.rs:9:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823168
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut ret: isize = 0;\n    for i in 1..lst.len() {\n        if i % 2 == 1\
    \ {\n            ret += lst[i];\n        }\n    }\n    ret\n}\n\nfn main() {\n\
    \    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmpgj77srxo.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823168
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().filter(|(i, _x)| i % 2 == 1).map(|(_i, x)| x).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmp1keipc5p.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823168
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  unimplemented!();\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp109g70r5.rs:4:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823168
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().filter(|&(index, _)| index % 2 == 1).fold(0, |acc, (_,\
    \ x)| acc + x)\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmpyz72qj8r.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823168
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  // your code\n    lst.iter().enumerate().filter(|&(i, _)| i % 2 == 1).map(|(_,\
    \ x)| x).sum()\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmp6p1i1xjd.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823168
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823168
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, j) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && j % 2 == 0 {\n            sum += j;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823168
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().filter(|x| **x % 2 == 0).fold(0, |sum, x| sum + x)\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpcidpvevr.rs:9:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823168
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  let\
    \ mut sum = 0;\n  for (i, n) in lst.iter().enumerate() {\n    if (i + 1) % 2 ==\
    \ 0 && n % 2 == 0 {\n      sum += n;\n    }\n  }\n  sum\n}\n\nfn main() {\n  \
    \  let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823168
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().filter(|&(i, _)| i % 2 == 1).map(|(_, &x)| x).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmp20ru3kdf.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823167
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut result = 0;\n    for (i, &v) in lst.iter().enumerate() {\n        if\
    \ i % 2 == 1 && v % 2 == 0 {\n            result += v;\n        }\n    }\n   \
    \ result\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823168
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  unimplemented!();\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp109g70r5.rs:4:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823168
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  // TODO: Implement this function\n    0\n}\n\nfn main() {\n    let candidate\
    \ = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `88`', /tmp/tmpmefryi4x.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823168
- exit_code: 1
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().filter(|x| x.is_even()).sum()\n}\n\nfn main() {\n    let candidate\
    \ = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_even` found for reference `&&isize` in\
    \ the current scope\n --> /tmp/tmp9kslzfer.rs:4:29\n  |\n4 |     lst.iter().filter(|x|\
    \ x.is_even()).sum()\n  |                             ^^^^^^^ method not found\
    \ in `&&isize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659823168
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut result = 0;\n    for (index, x) in lst.iter().enumerate() {\n     \
    \   if index % 2 == 1 && x % 2 == 0 {\n            result += x;\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823168
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, e) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && *e % 2 == 0 {\n            sum += *e;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823168
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, e) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && e % 2 == 0 {\n            sum += e;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823168
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut res = 0;\n    for (i, &v) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && v % 2 == 0 {\n            res += v;\n        }\n    }\n    res\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823168
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().fold(0, |acc, (i, x)| {\n        if i % 2 == 1 && x\
    \ % 2 == 0 {\n            acc + x\n        } else {\n            acc\n       \
    \ }\n    })\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823167
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut answer = 0;\n    for i in 0..lst.len() {\n        if i % 2 == 1 {\n\
    \            answer += lst[i];\n        }\n    }\n    answer\n}\n\nfn main() {\n\
    \    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmp_nfjy_hk.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823168
- exit_code: 1
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let odd = lst.iter().filter(|&x| lst.iter().position(|&y| x == y).unwrap()\
    \ % 2 == 1);\n    odd.filter(|&x| x % 2 == 0).sum()\n}\n\nfn main() {\n    let\
    \ candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&isize` with `isize`\n --> /tmp/tmphisuopux.rs:4:65\n\
    \  |\n4 |     let odd = lst.iter().filter(|&x| lst.iter().position(|&y| x == y).unwrap()\
    \ % 2 == 1);\n  |                                                            \
    \     ^^ no implementation for `&isize == isize`\n  |\n  = help: the trait `PartialEq<isize>`\
    \ is not implemented for `&isize`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659823168
- exit_code: 1
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().filter(|x| x % 2 == 0).sum()\n}\n\nfn main() {\n    let candidate\
    \ = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n --> /tmp/tmpsegc4ain.rs:4:29\n\
    \  |\n4 |     lst.iter().filter(|x| x % 2 == 0).sum()\n  |                   \
    \        - ^ - {integer}\n  |                           |\n  |               \
    \            &&isize\n  |\nhelp: `%` can be used on `isize`, you can dereference\
    \ `x`\n  |\n4 |     lst.iter().filter(|x| *x % 2 == 0).sum()\n  |            \
    \               +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659823168
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  unimplemented!();\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp109g70r5.rs:4:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823168
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, v) in lst.iter().enumerate() {\n        if (i\
    \ + 1) % 2 == 0 && *v % 2 == 0 {\n            sum += *v;\n        }\n    }\n \
    \   sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823168
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  let\
    \ mut result = 0;\n  for (index, value) in lst.iter().enumerate() {\n    if index\
    \ % 2 == 1 {\n      result += value;\n    }\n  }\n  result\n}\n\nfn main() {\n\
    \    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmp5lp_4ocq.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823168
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, n) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && n % 2 == 0 {\n            sum += n;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823167
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut i = 0;\n    let mut sum = 0;\n    for x in lst {\n        if i % 2\
    \ == 1 && x % 2 == 0 {\n            sum += x;\n        }\n        i += 1;\n  \
    \  }\n    sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823168
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut x = 0;\n    for i in 0..lst.len() {\n        if lst[i] % 2 == 0 &&\
    \ i % 2 != 0 {\n            x += lst[i];\n        }\n    }\n    x\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823168
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  let\
    \ mut sum = 0;\n  for (idx, val) in lst.iter().enumerate() {\n    if idx % 2 ==\
    \ 1 && *val % 2 == 0 {\n      sum += *val;\n    }\n  }\n  sum\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823168
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().fold(0, |acc, (i, &x)| {\n        if i % 2 == 1 && x\
    \ % 2 == 0 {\n            acc + x\n        } else {\n            acc\n       \
    \ }\n    })\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823168
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().fold(0, |sum, (i, &x)| if i % 2 == 1 && x % 2 == 0 {\
    \ sum + x } else { sum })\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823168
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().fold(0, |acc, (i, x)| {\n        if (i as isize) % 2\
    \ == 1 {\n            return acc + x;\n        } else {\n            return acc;\n\
    \        }\n    })\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmpyweigdc_.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823168
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut result = 0;\n    for (index, value) in lst.iter().enumerate() {\n \
    \       if index % 2 == 1 && value % 2 == 0 {\n            result += value;\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = add;\n  \
    \  assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4, 5,\
    \ 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n   \
    \ assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823168
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().fold(0, |acc, (i, &x)| if i % 2 == 1 { acc + x } else\
    \ { acc })\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmp7kk80hki.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823168
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for i in 1..lst.len() {\n        if lst[i] % 2 == 0 {\n\
    \            sum += lst[i];\n        }\n    }\n    sum\n}\n\nfn main() {\n   \
    \ let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `130`,\n right: `122`', /tmp/tmpx0gwxmf6.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823167
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for i in 1..lst.len() {\n        if i % 2 == 1 {\n  \
    \          sum += lst[i];\n        }\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmptjf37yq5.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823167
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().filter(|x| x.0 % 2 == 1).map(|x| *x.1).sum()\n}\n\n\
    fn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmpf3ye_r_4.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823168
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().filter(|&(i, _)| i % 2 == 1).map(|(_, &e)| e).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmps8hwwehi.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823168
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut res = 0;\n    for (i, &n) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && n % 2 == 0 {\n            res += n;\n        }\n    }\n    res\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823168
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().filter(|(n, _)| n % 2 == 1).map(|(_, x)| x).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmprpy2pjod.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823168
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, n) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && n % 2 == 0 {\n            sum += n;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823167
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().filter(|&(i, _)| i % 2 == 1).map(|(_, x)| x).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmpmqiqqxwn.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823168
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut ret = 0;\n    for (i, n) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && n % 2 == 0 {\n            ret += n;\n        }\n    }\n    ret\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823168
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().filter(|&(i, _)| i % 2 == 1).map(|(_, &n)| n).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmpkz93s_ea.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823168
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  let\
    \ mut result = 0;\n  for (index, value) in lst.iter().enumerate() {\n    if index\
    \ % 2 == 1 {\n      result += value;\n    }\n  }\n  result\n}\n\nfn main() {\n\
    \    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmp5lp_4ocq.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823168
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().fold(0, |acc, (i, x)| {\n        if i % 2 == 1 && x\
    \ % 2 == 0 {\n            return acc + x;\n        }\n\n        acc\n    })\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823168
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().filter(|&(i, _)| i % 2 == 1).map(|(_, &x)| x).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmp20ru3kdf.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823167
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().fold(0, |sum, (idx, elem)| {\n        if (idx % 2 ==\
    \ 1) && (elem % 2 == 0) {\n            sum + elem\n        } else {\n        \
    \    sum\n        }\n    })\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823168
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (idx, n) in lst.iter().enumerate() {\n        if\
    \ (idx % 2 == 1) && (n % 2 == 0) {\n            sum += n;\n        }\n    }\n\
    \    sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823168
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, v) in lst.iter().enumerate() {\n        if (i\
    \ % 2) != 0 && (v % 2) == 0 {\n            sum += v;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823168
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for i in lst.iter().enumerate() {\n        if i.0 % 2\
    \ == 1 && i.1 % 2 == 0 {\n            sum += i.1;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823168
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for i in 0..lst.len() {\n        if i % 2 == 1 && lst[i]\
    \ % 2 == 0 {\n            sum += lst[i];\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823167
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  let\
    \ mut s = 0;\n  for i in 0..lst.len() {\n    if i % 2 == 1 {\n      s += lst[i];\n\
    \    }\n  }\n  s\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmpatnqu7qm.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823169
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut lst = lst;\n    let mut sum = 0;\n    let mut index = 0;\n    loop\
    \ {\n        if index >= lst.len() {\n            break;\n        }\n        if\
    \ index % 2 == 1 {\n            sum += lst[index];\n        }\n        index +=\
    \ 1;\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmp7yhvs21b.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823169
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut result = 0;\n    for i in 1..lst.len() {\n        if i % 2 == 1 {\n\
    \            result += lst[i];\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmpsnpzqgwn.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823169
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().filter(|x| **x % 2 == 0).enumerate().filter(|(i, _)| i % 2 == 1).map(|(_,\
    \ x)| *x).sum()\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `128`,\n right: `122`', /tmp/tmpuhi27gnv.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823169
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for i in 0..lst.len() {\n        if i % 2 == 1 && lst[i]\
    \ % 2 == 0 {\n            sum += lst[i];\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823167
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().filter(|(i, _)| *i % 2 == 1).map(|(_, x)| *x).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmpv06dizg4.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823169
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut result = 0;\n    for (index, v) in lst.iter().enumerate() {\n     \
    \   if index % 2 == 1 && v % 2 == 0 {\n            result += v;\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823169
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().fold(0, |acc, (i, v)| if i % 2 == 1 { acc + v } else\
    \ { acc })\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmpeqjmtov3.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823169
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, n) in lst.iter().enumerate() {\n        if (i\
    \ % 2) == 1 && *n % 2 == 0 {\n            sum += *n;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823169
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  unimplemented!();\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp109g70r5.rs:4:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823168
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().filter(|&(i, _)| i % 2 == 1).map(|(_, x)| x).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmpmqiqqxwn.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823168
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (index, item) in lst.iter().enumerate() {\n     \
    \   if index % 2 == 1 && item % 2 == 0 {\n            sum += item;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823169
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().fold(0, |acc, (i, x)| {\n        if i % 2 == 1 && x\
    \ % 2 == 0 {\n            acc + x\n        } else {\n            acc\n       \
    \ }\n    })\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823167
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().filter(|&(x, _)| x % 2 == 1).fold(0, |acc, (_, x)| acc\
    \ + x)\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmptjf26dnv.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823169
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().filter(|&(i, _)| i % 2 == 1).map(|(_, i)| i).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmp43oywrrb.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823167
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().filter(|(i, _)| i % 2 == 1).map(|(_, x)| x).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmpirueghet.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823168
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  let\
    \ mut sum = 0;\n  for (i, elem) in lst.iter().enumerate() {\n    if i % 2 == 1\
    \ && *elem % 2 == 0 {\n      sum += *elem;\n    }\n  }\n  sum\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823169
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  return lst.iter().filter(|&x| x%2==0).fold(0, |acc, x| acc + x);\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmprn82w4ka.rs:9:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823169
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for i in 0..lst.len() {\n        if i % 2 == 1 && lst[i]\
    \ % 2 == 0 {\n            sum += lst[i];\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823167
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut answer = 0;\n    for (i, num) in lst.iter().enumerate() {\n       \
    \ if i % 2 == 1 {\n            answer += num;\n        }\n    }\n    answer\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmpsnihs100.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823169
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (index, value) in lst.iter().enumerate() {\n    \
    \    if index % 2 == 1 && value % 2 == 0 {\n            sum += value;\n      \
    \  }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823169
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().fold(0, |sum, (i, &x)| {\n        if i % 2 == 1 && x\
    \ % 2 == 0 {\n            sum + x\n        } else {\n            sum\n       \
    \ }\n    })\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823169
- exit_code: 1
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().filter(|n| n % 2 == 0).fold(0, |acc, n| acc + n)\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n --> /tmp/tmpb7awglr_.rs:4:29\n\
    \  |\n4 |     lst.iter().filter(|n| n % 2 == 0).fold(0, |acc, n| acc + n)\n  |\
    \                           - ^ - {integer}\n  |                           |\n\
    \  |                           &&isize\n  |\nhelp: `%` can be used on `isize`,\
    \ you can dereference `n`\n  |\n4 |     lst.iter().filter(|n| *n % 2 == 0).fold(0,\
    \ |acc, n| acc + n)\n  |                           +\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  stdout: ''
  timestamp: 1659823168
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut s = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i %\
    \ 2 == 1 && x % 2 == 0 {\n            s += x;\n        }\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823169
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().fold(0, |acc, (i, v)| {\n        if i % 2 == 1 {\n \
    \           acc + v\n        } else {\n            acc\n        }\n    })\n}\n\
    \nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmpufs1hz_g.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823169
- exit_code: 1
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let odd_indices = vec![0, 2, 4, 6, 8];\n    let odd_indices_map = HashMap::new();\n\
    \    for (i, &index) in odd_indices.iter().enumerate() {\n        odd_indices_map.insert(index,\
    \ i);\n    }\n    let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n\
    \        match odd_indices_map.get(&i) {\n            Some(_) => {\n         \
    \       if i % 2 == 0 {\n                    sum += x;\n                }\n  \
    \          }\n            None => {}\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmpgrellbqs.rs:5:27\n  |\n5 |     let odd_indices_map = HashMap::new();\n\
    \  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659823168
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823168
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  // initialize with the first (even) element at index 0\n    lst.iter().filter(|&x|\
    \ x % 2 == 0).skip(1).take(lst.len() / 2).sum()\n}\n\nfn main() {\n    let candidate\
    \ = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `130`,\n right: `122`', /tmp/tmphft81c6r.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823169
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().filter(|&(i, _)| i % 2 == 1).map(|(_, v)| v).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmpvsv1r9mg.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823169
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  let\
    \ mut sum = 0;\n  for (i, item) in lst.iter().enumerate() {\n    if i % 2 == 1\
    \ && item % 2 == 0 {\n      sum += item;\n    }\n  }\n  sum\n}\n\nfn main() {\n\
    \    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823169
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  return lst.iter().filter(|&x| (x % 2 == 0)).enumerate().filter(|&(i, _)| i\
    \ % 2 == 1).map(|(_, x)| x).sum();\n}\n\nfn main() {\n    let candidate = add;\n\
    \    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `128`,\n right: `122`', /tmp/tmpndjd2j9h.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823169
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().filter(|&(i, _)| i % 2 == 1).map(|(_, x)| x).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmpmqiqqxwn.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823168
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().filter(|&(i, _)| i % 2 == 1).fold(0, |sum, (_, &x)|\
    \ sum + x)\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmp9o03k346.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823169
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().fold(0, |acc, (i, &num)| {\n        if i % 2 == 1 &&\
    \ num % 2 == 0 {\n            acc + num\n        } else {\n            acc\n \
    \       }\n    })\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823169
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, a) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && a % 2 == 0 {\n            sum += a;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823169
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for i in lst.iter().enumerate() {\n        if i.0 % 2\
    \ == 1 && i.1 % 2 == 0 {\n            sum += i.1;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823168
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().filter(|&(i, _)| i % 2 == 1).map(|(_, n)| n).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmp0pux7pnr.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823169
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for i in 0..lst.len() {\n        if i % 2 == 1 && lst[i]\
    \ % 2 == 0 {\n            sum += lst[i];\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823167
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().step_by(2).sum()\n}\n\nfn main() {\n    let candidate = add;\n \
    \   assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `88`', /tmp/tmpzpsjumlc.rs:9:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823169
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (index, item) in lst.iter().enumerate() {\n     \
    \   if index % 2 == 1 && *item % 2 == 0 {\n            sum += *item;\n       \
    \ }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823169
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().fold(0, |acc, (i, &x)| acc + if i % 2 == 1 { x } else\
    \ { 0 })\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmpm66a9jzl.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823169
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (index, num) in lst.iter().enumerate() {\n      \
    \  if index % 2 == 1 && num % 2 == 0 {\n            sum += num;\n        }\n \
    \   }\n    sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823169
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, n) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && n % 2 == 0 {\n            sum += n;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823167
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().fold(0, |acc, (i, x)| if i % 2 == 1 { acc + x } else\
    \ { acc })\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmpkrr8gxyd.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823169
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for i in 0..lst.len() {\n        if i % 2 == 1 && lst[i]\
    \ % 2 == 0 {\n            sum += lst[i];\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823167
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823168
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  return lst.iter().enumerate().filter(|x| x.0 % 2 == 1).filter(|x| x.1 % 2 ==\
    \ 0).map(|x| x.1).sum();\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823169
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for i in 1..lst.len() {\n        if i % 2 == 1 {\n  \
    \          sum += lst[i];\n        }\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmptjf37yq5.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823167
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().filter(|&(i, v)| v % 2 == 0 && i % 2 == 1).map(|(_,\
    \ v)| v).sum()\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823169
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, val) in lst.iter().enumerate() {\n        if\
    \ i % 2 == 1 && *val % 2 == 0 {\n            sum += *val;\n        }\n    }\n\
    \    sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823169
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  // Initialize a sum variable.\n    let mut sum = 0;\n    // Use enumerate to\
    \ zip lst with its indices.\n    for (i, val) in lst.iter().enumerate() {\n  \
    \      // Check that i % 2 is 1, and that val is even.\n        if i % 2 == 1\
    \ && val % 2 == 0 {\n            // In the sum and print it.\n            sum\
    \ += val;\n        }\n    }\n    // Return the sum.\n    sum\n}\n\nfn main() {\n\
    \    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823169
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut count = 0;\n    for (i, element) in lst.iter().enumerate() {\n    \
    \    if i % 2 == 1 && element % 2 == 0 {\n            count += element;\n    \
    \    }\n    }\n    count\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823169
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  if lst.len() == 0 {\n        return 0;\n    }\n    let sum: isize = lst.iter().enumerate().fold(0,\
    \ |acc, (idx, val)| {\n        if idx % 2 == 1 && *val % 2 == 0 {\n          \
    \  return acc + *val;\n        }\n        return acc;\n    });\n    return sum;\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823169
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, e) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && e % 2 == 0 {\n            sum += e;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823168
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for i in 1..lst.len() {\n        if lst[i] % 2 == 0 {\n\
    \            sum += lst[i];\n        }\n    }\n    sum\n}\n\nfn main() {\n   \
    \ let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `130`,\n right: `122`', /tmp/tmpx0gwxmf6.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823167
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut result = 0;\n    for i in 0..lst.len() {\n        if (i % 2 == 1) &&\
    \ (lst[i] % 2 == 0) {\n            result += lst[i];\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823169
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().fold(0, |mut sum, (idx, val)| {\n        if idx % 2\
    \ == 1 && val % 2 == 0 {\n            sum += val;\n        }\n        sum\n  \
    \  })\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823169
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().filter(|&(i, _)| i % 2 == 1).map(|(_, x)| x).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmpmqiqqxwn.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823168
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut odd_total = 0;\n    let mut total = 0;\n    for i in 0..lst.len() {\n\
    \        if i % 2 == 0 {\n            total += lst[i];\n        } else {\n   \
    \         odd_total += lst[i];\n        }\n    }\n    total + odd_total\n}\n\n\
    fn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `92`,\n right: `88`', /tmp/tmpv8cskmim.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823169
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let even = |x: &isize| x % 2 == 0;\n    let mut odd = false;\n    let mut sum\
    \ = 0;\n    for x in lst {\n        if odd {\n            if even(&x) {\n    \
    \            sum += x;\n            }\n        }\n        odd = !odd;\n    }\n\
    \    sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823169
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut total = 0;\n    for (i, num) in lst.iter().enumerate() {\n        if\
    \ i % 2 == 1 && num % 2 == 0 {\n            total += num;\n        }\n    }\n\
    \    total\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823169
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823168
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut result = 0;\n    for i in 1..lst.len() {\n        if lst[i] % 2 ==\
    \ 0 {\n            result += lst[i];\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `130`,\n right: `122`', /tmp/tmp287wsx1m.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823169
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut result = 0;\n    for (index, item) in lst.iter().enumerate() {\n  \
    \      if index % 2 == 1 && item % 2 == 0 {\n            result += item;\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823169
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  let\
    \ mut result = 0;\n  for i in 0..lst.len() {\n    if (i % 2 == 1) && (lst[i] %\
    \ 2 == 0) {\n      result += lst[i];\n    }\n  }\n  result\n}\n\nfn main() {\n\
    \    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823169
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut result = 0;\n    for (index, item) in lst.iter().enumerate() {\n  \
    \      if index % 2 == 1 && item % 2 == 0 {\n            result += item;\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823169
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().filter(|(i, _)| i % 2 == 1).map(|(_, v)| v).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmpkkwb3ku4.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823169
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  return lst.iter().enumerate().fold(0, |x, (i, y)| if i % 2 == 1 { x + y } else\
    \ { x });\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmp_0kuxloy.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823169
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().filter(|&(i, _)| i % 2 == 1).map(|(_, x)| x).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmpmqiqqxwn.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823168
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, n) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && n % 2 == 0 {\n            sum += n;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823167
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut result = 0;\n    for (i, v) in lst.iter().enumerate() {\n        if\
    \ i % 2 == 1 && v % 2 == 0 {\n            result += v;\n        }\n    }\n   \
    \ result\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823169
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823168
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  unimplemented!()\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp4k2c7_0q.rs:4:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823169
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().fold(0, |acc, (i, x)| {\n        if i % 2 == 1 && x\
    \ % 2 == 0 {\n            acc + x\n        } else {\n            acc\n       \
    \ }\n    })\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823167
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  lst.iter().enumerate().fold(0,\
    \ |acc, (idx, x)| acc + if idx % 2 == 1 { *x } else { 0 })\n}\n\nfn main() {\n\
    \    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmpwdrazlly.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823169
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().filter(|&(i, _)| i % 2 == 1).fold(0, |x, (_, &y)| x\
    \ + y)\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmpr_ya8rug.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823169
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for i in 0..lst.len() {\n        if i % 2 == 1 && lst[i]\
    \ % 2 == 0 {\n            sum += lst[i];\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823167
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().fold(0, |acc, (i, x)| if i % 2 == 1 {acc + x} else {acc})\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmpn3ubefsy.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823170
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if (i\
    \ + 1) % 2 == 0 && *x % 2 == 0 {\n            sum += *x;\n        }\n    }\n \
    \   sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823170
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().filter(|&(i, _)| i % 2 == 1).map(|(_, &x)| x).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmp20ru3kdf.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823167
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut result = 0;\n    for (index, value) in lst.iter().enumerate() {\n \
    \       if index % 2 == 1 && value % 2 == 0 {\n            result += value;\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = add;\n  \
    \  assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4, 5,\
    \ 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n   \
    \ assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823168
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for i in 0..lst.len() {\n        if i % 2 == 1 && lst[i]\
    \ % 2 == 0 {\n            sum += lst[i];\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823167
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut total = 0;\n    for (i, val) in lst.iter().enumerate() {\n        if\
    \ i % 2 == 1 && val % 2 == 0 {\n            total += val;\n        }\n    }\n\
    \    total\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823170
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  lst.iter().enumerate().filter(|&(i,_)|\
    \ i % 2 == 1).filter(|&(_,x)| x % 2 == 0).map(|(_,x)| *x).sum()\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823170
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().fold(0, |mut acc, (index, num)| {\n        if index\
    \ % 2 == 1 && num % 2 == 0 {\n            acc += num;\n        }\n        acc\n\
    \    })\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823170
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for i in 0..lst.len() {\n        if lst[i] % 2 == 0 &&\
    \ i % 2 != 0 {\n            sum += lst[i];\n        }\n    }\n    sum\n}\n\nfn\
    \ main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n\
    \    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823170
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  // Add the even integers that are at odd indices.\n    unimplemented!()\n}\n\
    \nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpnmg3mfjy.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823170
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().filter(|&(i, _)| i % 2 == 1).map(|(_, &x)| x).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmp20ru3kdf.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823167
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  //lst.iter().enumerate().filter(|&(x,y)| x % 2 == 1).map(|(x,y)| *y).fold(0,\
    \ |sum, x| sum + x)\n    lst.iter().enumerate().filter(|&(x,_)| x % 2 == 1).map(|(_,y)|\
    \ *y).sum()\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmpahzw_ov9.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823170
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().fold(0, |a, (i,&v)| if (i & 1) == 1 { a + v } else {\
    \ a })\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmp1lntcm9x.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823170
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  // TODO replace this\n    0\n}\n\nfn main() {\n    let candidate = add;\n \
    \   assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `88`', /tmp/tmphwfj0w_u.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823170
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  // TODO...\n    -1\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `88`', /tmp/tmp_991ehph.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823170
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && *x % 2 == 0 {\n            sum += *x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823170
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut result = 0;\n    for (index, number) in lst.iter().enumerate() {\n\
    \        if index % 2 == 1 && number % 2 == 0 {\n            result += number;\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = add;\n  \
    \  assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4, 5,\
    \ 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n   \
    \ assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823170
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().filter(|(i, _)| i % 2 == 1).map(|(_, x)| x).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmpirueghet.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823168
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut total = 0;\n    for (index, val) in lst.iter().enumerate() {\n    \
    \    if index % 2 == 1 && val % 2 == 0 {\n            total += val;\n        }\n\
    \    }\n    total\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823170
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().fold(0, |acc, (i, v)| {\n        if i % 2 == 1 && v\
    \ % 2 == 0 {\n            acc + v\n        } else {\n            acc\n       \
    \ }\n    })\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823170
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  // (previous_value, true = previous index even)\n    lst.iter().fold((0, true),\
    \ |(acc, prev_index_even), &x| {\n        let result = if prev_index_even && x\
    \ % 2 == 0 {\n            acc + x\n        } else {\n            acc\n       \
    \ };\n        (result, !prev_index_even)\n    }).0\n}\n\nfn main() {\n    let\
    \ candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `88`', /tmp/tmpg2ru8znj.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823170
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  // sum(filter(zip(lst, range(0, len(lst), 2), lambda t: t[0] if t[1] % 2 ==\
    \ 1 else 0))\n    let mut sum = 0;\n    for i in 0..lst.len() {\n        if i\
    \ % 2 == 1 {\n            sum += lst[i];\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmp8oxgx0sn.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823170
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for i in 0..lst.len() {\n        if i % 2 == 1 && lst[i]\
    \ % 2 == 0 {\n            sum += lst[i];\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823167
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut res = 0;\n    for i in 0..lst.len() {\n        if i % 2 == 1 {\n  \
    \          res += lst[i];\n        }\n    }\n    res\n}\n\nfn main() {\n    let\
    \ candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmpmm11oa2o.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823170
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().filter(|(i, _)| i % 2 == 1).map(|(_, x)| x).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmpirueghet.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823168
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().filter(|x| x.trailing_zeros() % 2 == 1).sum()\n}\n\nfn main() {\n\
    \    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n    assert_eq!(candidate(vec![4,\
    \ 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4, 0, 6, 7]), 0);\n\
    \    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `130`,\n right: `122`', /tmp/tmplnig3buz.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823170
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, value) in lst.iter().enumerate() {\n        if\
    \ i % 2 == 1 && value % 2 == 0 {\n            sum += value;\n        }\n    }\n\
    \    sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823170
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().filter(|(i, _)| i % 2 == 1).map(|(_, v)| v).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmpkkwb3ku4.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823169
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (index, &x) in lst.iter().enumerate() {\n       \
    \ if index % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n\
    \    sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823170
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut i = 0;\n    let mut j = 0;\n    while i < lst.len() {\n        if lst[i]\
    \ % 2 == 0 {\n            j += lst[i];\n        }\n        i += 2;\n    }\n  \
    \  j\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `88`', /tmp/tmp2cdmj2on.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823170
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (idx, elem) in lst.iter().enumerate() {\n       \
    \ if (idx % 2 == 1) && (elem % 2 == 0) {\n            sum += elem;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823170
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().filter(|&(i, _)| i % 2 == 1).map(|(_, x)| x).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmpmqiqqxwn.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823168
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut res = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && x % 2 == 0 {\n            res += x;\n        }\n    }\n    res\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823170
