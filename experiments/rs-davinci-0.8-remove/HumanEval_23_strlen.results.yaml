language: rs
name: HumanEval_23_strlen
results:
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.chars().count() as isize\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    unsafe {\n        let bytes = ffi::CString::new(string).unwrap();\n \
    \       let len = ffi::strlen(bytes.as_ptr()) as isize;\n        mem::forget(bytes);\n\
    \        len\n    }\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `ffi`\n\
    \ --> /tmp/tmpm1inmtah.rs:5:19\n  |\n5 |         let len = ffi::strlen(bytes.as_ptr())\
    \ as isize;\n  |                   ^^^ use of undeclared crate or module `ffi`\n\
    \nerror[E0433]: failed to resolve: use of undeclared crate or module `mem`\n -->\
    \ /tmp/tmpm1inmtah.rs:6:9\n  |\n6 |         mem::forget(bytes);\n  |         ^^^\
    \ use of undeclared crate or module `mem`\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared crate or module `ffi`\n --> /tmp/tmpm1inmtah.rs:4:26\n  |\n\
    4 |         let bytes = ffi::CString::new(string).unwrap();\n  |             \
    \             ^^^^^^^ not found in `ffi`\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::ffi::CString;\n  |\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659822362
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let count = 0;\n    let ptr = string.as_ptr();\n    while (*ptr as u8)\
    \ != 0 {\n        count += 1;\n        ptr = ptr.offset(1);\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign twice to immutable variable `count`\n --> /tmp/tmptqzzi11r.rs:6:9\n\
    \  |\n3 |     let count = 0;\n  |         -----\n  |         |\n  |         first\
    \ assignment to `count`\n  |         help: consider making this binding mutable:\
    \ `mut count`\n...\n6 |         count += 1;\n  |         ^^^^^^^^^^ cannot assign\
    \ twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable\
    \ variable `ptr`\n --> /tmp/tmptqzzi11r.rs:7:9\n  |\n4 |     let ptr = string.as_ptr();\n\
    \  |         ---\n  |         |\n  |         first assignment to `ptr`\n  |  \
    \       help: consider making this binding mutable: `mut ptr`\n...\n7 |      \
    \   ptr = ptr.offset(1);\n  |         ^^^^^^^^^^^^^^^^^^^ cannot assign twice\
    \ to immutable variable\n\nerror[E0133]: dereference of raw pointer is unsafe\
    \ and requires unsafe function or block\n --> /tmp/tmptqzzi11r.rs:5:12\n  |\n\
    5 |     while (*ptr as u8) != 0 {\n  |            ^^^^ dereference of raw pointer\n\
    \  |\n  = note: raw pointers may be null, dangling or unaligned; they can violate\
    \ aliasing rules and cause data races: all of these are undefined behavior\n\n\
    error[E0133]: call to unsafe function is unsafe and requires unsafe function or\
    \ block\n --> /tmp/tmptqzzi11r.rs:7:15\n  |\n7 |         ptr = ptr.offset(1);\n\
    \  |               ^^^^^^^^^^^^^ call to unsafe function\n  |\n  = note: consult\
    \ the function's documentation for information on how to avoid undefined behavior\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0133, E0384.\nFor more information about an error, try `rustc --explain E0133`.\n"
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut str_length = 0;\n    for _ in string.chars() {\n        str_length\
    \ += 1;\n    }\n    str_length\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _i in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n\tstring.len() as isize\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n\tlet slice = CString::new(string).unwrap();\n\tlet c_str = slice.as_ptr();\n\
    \tunsafe { c_strlen(c_str) }\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `CString`\n   -->\
    \ /tmp/tmpni5zgk5h.rs:3:14\n    |\n3   |       let slice = CString::new(string).unwrap();\n\
    \    |                   ^^^^^^^\n    |\nhelp: a struct with a similar name exists\n\
    \    |\n3   |     let slice = String::new(string).unwrap();\n    |           \
    \      ~~~~~~\nhelp: consider importing this struct\n    |\n1   | use std::ffi::CString;\n\
    \    |\n\nerror[E0425]: cannot find function `c_strlen` in this scope\n --> /tmp/tmpni5zgk5h.rs:5:11\n\
    \  |\n5 |     unsafe { c_strlen(c_str) }\n  |              ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0425, E0433.\nFor more information about an error, try\
    \ `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for c in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 101
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let str_copy = string.clone();\n    let string_length = str_copy.as_ptr()\
    \ as isize;\n    string_length\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpnf1g6lqr.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut len = 0;\n    for _c in string.chars() {\n        len += 1;\n\
    \    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    let mut iter = string.chars();\n    while let\
    \ Some(_) = iter.next() {\n        length += 1;\n    }\n    length\n}\n\nfn main()\
    \ {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for c in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 101
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let bytes = string.as_bytes();\n    let mut len = 0;\n    while bytes[len\
    \ as usize] != 0 {\n        len += 1;\n    }\n    len\n}\n\nfn main() {\n    let\
    \ candidate = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n   \
    \ assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmp3al3b08w.rs:5:11

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut len = 0;\n    for i in string.chars() {\n        len += 1;\n\
    \    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let bytes = string.as_bytes();\n    bytes.len() as isize\n}\n\nfn main()\
    \ {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut len = 0;\n    for _ in string.chars() {\n        len += 1;\n\
    \    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut len = 0;\n    for _ in string.chars() {\n        len += 1;\n\
    \    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut len = 0;\n    for _ in string.chars() {\n        len += 1;\n\
    \    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 101
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut i = 0;\n    while string.chars().nth(i as usize).unwrap() !=\
    \ '\\0' {\n        i += 1;\n    }\n    i\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpeib_bdjq.rs:4:42

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.chars().count() as isize\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: -11
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    unsafe {\n        let mut end = string.as_ptr();\n        while *end\
    \ != 0 {\n            end = end.offset(1);\n        }\n        (end as isize)\
    \ - (string.as_ptr() as isize)\n    }\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut i = 0;\n    let mut len = 0;\n    while i < string.len() {\n\
    \        let c = string.char_at(i);\n        if c < '\\u{0080}' {\n          \
    \  len += 1;\n        } else if c < '\\u{0800}' {\n            len += 2;\n   \
    \     } else {\n            len += 3;\n        }\n        i += 1;\n    }\n   \
    \ len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `char_at` found for struct `String` in the\
    \ current scope\n --> /tmp/tmp6zzt3jfx.rs:6:24\n  |\n6 |         let c = string.char_at(i);\n\
    \  |                        ^^^^^^^ method not found in `String`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659822362
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    while length < string.len() {\n        length\
    \ += 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n  \
    \  assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpmb6png3p.rs:7:5\n  |\n2 |\
    \ fn strlen(string: String) -> isize {\n  |                              -----\
    \ expected `isize` because of return type\n...\n7 |     length\n  |     ^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n7 |     length.try_into().unwrap()\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    unsafe {\n        let ptr = string.as_ptr();\n        for i in 0..string.len()\
    \ {\n            if *ptr.offset(i as isize) == 0 {\n                return i as\
    \ isize;\n            }\n        }\n        string.len() as isize\n    }\n}\n\n\
    fn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut size = 0;\n    for _ in string.chars() {\n        size += 1;\n\
    \    }\n    size\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let cstring = string.as_ptr();\n    let mut length = 0;\n    while *cstring.offset(length)\
    \ != 0 {\n        length += 1;\n    }\n    length as isize\n}\n\nfn main() {\n\
    \    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n\
    \    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0133]: call to unsafe function is unsafe and requires unsafe function\
    \ or block\n --> /tmp/tmp_pd1dqzl.rs:5:12\n  |\n5 |     while *cstring.offset(length)\
    \ != 0 {\n  |            ^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n  |\n\
    \  = note: consult the function's documentation for information on how to avoid\
    \ undefined behavior\n\nerror[E0133]: dereference of raw pointer is unsafe and\
    \ requires unsafe function or block\n --> /tmp/tmp_pd1dqzl.rs:5:11\n  |\n5 | \
    \    while *cstring.offset(length) != 0 {\n  |           ^^^^^^^^^^^^^^^^^^^^^^^\
    \ dereference of raw pointer\n  |\n  = note: raw pointers may be null, dangling\
    \ or unaligned; they can violate aliasing rules and cause data races: all of these\
    \ are undefined behavior\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0133`.\n"
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    return string.chars().count() as isize;\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.chars().count() as isize\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 101
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for c in string.chars() {\n        if c == '1'\
    \ {\n            length += 1;\n        }\n    }\n    length\n}\n\nfn main() {\n\
    \    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n\
    \    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpw37r8crb.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let bytes = string.as_bytes();\n    return bytes.len() as isize;\n}\n\
    \nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let length = string.len() as isize;\n    length\n}\n\nfn main() {\n \
    \   let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n\
    \    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.chars().count() as isize\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 101
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut i = 0;\n    while string.as_bytes()[i as usize] != 0 {\n    \
    \    i += 1;\n    }\n    i\n}\n\nfn main() {\n    let candidate = strlen;\n  \
    \  assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpjcegaxd1.rs:4:11

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut len = 0;\n    for _ in string.chars() {\n        len += 1;\n\
    \    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut count = 0;\n    for c in string.chars() {\n        count += 1;\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    let mut chars = string.chars();\n    while let\
    \ Some(_) = chars.next() {\n        length += 1;\n    }\n    length\n}\n\nfn main()\
    \ {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: -11
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let cstr = string.as_ptr();\n    let mut len = 0;\n    unsafe {\n   \
    \     while *cstr.offset(len) != 0 {\n            len += 1;\n        }\n    }\n\
    \    len as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    return string.len() as isize;\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for c in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut count = 0;\n    for c in string.chars() {\n        if c == '\\\
    u{0}' {\n            break;\n        }\n        count += 1;\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let bytes = string.as_bytes();\n    return bytes.len() as isize;\n}\n\
    \nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.chars().count() as isize\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n\tstring.len() as isize\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut count = 0;\n    for _i in string.chars() {\n        count +=\
    \ 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut bytes = string.into_bytes();\n    bytes.push(0);\n\n    unsafe\
    \ {\n        libc::strlen(bytes.as_ptr() as *const i8) as isize\n    }\n}\n\n\
    fn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `libc`\n\
    \ --> /tmp/tmpuktkspo9.rs:7:9\n  |\n7 |         libc::strlen(bytes.as_ptr() as\
    \ *const i8) as isize\n  |         ^^^^ use of undeclared crate or module `libc`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659822362
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    unsafe {\n        return libc::strlen(string.as_ptr() as *const i8) as\
    \ isize;\n    }\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `libc`\n\
    \ --> /tmp/tmpt6dqs3mg.rs:4:16\n  |\n4 |         return libc::strlen(string.as_ptr()\
    \ as *const i8) as isize;\n  |                ^^^^ use of undeclared crate or\
    \ module `libc`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut idx = 0;\n    for _ in string.as_bytes() {\n        idx += 1;\n\
    \    }\n    idx\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    // go to end of string\n    let mut count = 0;\n    for _ in string.as_bytes()\
    \ {\n        count += 1;\n    }\n    return count;\n}\n\nfn main() {\n    let\
    \ candidate = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n   \
    \ assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    unsafe {\n        ll::strlen(string.as_ptr() as *const i8) as isize\n\
    \    }\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `ll`\n\
    \ --> /tmp/tmpv3fw3yf8.rs:4:9\n  |\n4 |         ll::strlen(string.as_ptr() as\
    \ *const i8) as isize\n  |         ^^ use of undeclared crate or module `ll`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    unsafe {\n        strlen_cstr(string.as_ptr() as *const c_char)\n   \
    \ }\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `strlen_cstr` in this scope\n --> /tmp/tmpp971eu28.rs:4:9\n\
    \  |\n4 |         strlen_cstr(string.as_ptr() as *const c_char)\n  |         ^^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0412]: cannot find type `c_char` in this scope\n\
    \ --> /tmp/tmpp971eu28.rs:4:47\n  |\n4 |         strlen_cstr(string.as_ptr() as\
    \ *const c_char)\n  |                                               ^^^^^^\n \
    \ |\nhelp: a builtin type with a similar name exists\n  |\n4 |         strlen_cstr(string.as_ptr()\
    \ as *const char)\n  |                                               ~~~~\nhelp:\
    \ consider importing this type alias\n  |\n1 | use std::os::raw::c_char;\n  |\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0412, E0425.\nFor more information about an error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let bytes = string.as_bytes();\n    let mut len = 0;\n    for _ in bytes\
    \ {\n        len += 1;\n    }\n    len\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 101
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut i = 0;\n    while string.chars().nth(i as usize).unwrap() !=\
    \ '\\0' {\n        i += 1;\n    }\n    i\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpeib_bdjq.rs:4:42

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut count = 0;\n    for _ in string.as_bytes() {\n        count +=\
    \ 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    // the usize type is for indexing, it is a machine size integer\n   \
    \ // the isize is for indexing and for math, it is a machine sized integer\n \
    \   // that is sign extended to the size of a pointer\n    let mut length: isize\
    \ = 0;\n    let mut ch: u8;\n\n    // loop through bytes of string\n    for i\
    \ in 0..string.len() {\n        ch = string.as_bytes()[i];\n\n        // if the\
    \ current char is NULL, break out of loop\n        if ch == 0 {\n            break;\n\
    \        }\n\n        length += 1;\n    }\n\n    length\n}\n\nfn main() {\n  \
    \  let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n\
    \    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n\treturn string.chars().count() as isize;\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut len = 0;\n    let mut ptr = string.as_ptr();\n    while *ptr\
    \ != 0 {\n        len += 1;\n        ptr = ptr.offset(1);\n    }\n    len\n}\n\
    \nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0133]: dereference of raw pointer is unsafe and requires unsafe\
    \ function or block\n --> /tmp/tmpidz_glkd.rs:5:11\n  |\n5 |     while *ptr !=\
    \ 0 {\n  |           ^^^^ dereference of raw pointer\n  |\n  = note: raw pointers\
    \ may be null, dangling or unaligned; they can violate aliasing rules and cause\
    \ data races: all of these are undefined behavior\n\nerror[E0133]: call to unsafe\
    \ function is unsafe and requires unsafe function or block\n --> /tmp/tmpidz_glkd.rs:7:15\n\
    \  |\n7 |         ptr = ptr.offset(1);\n  |               ^^^^^^^^^^^^^ call to\
    \ unsafe function\n  |\n  = note: consult the function's documentation for information\
    \ on how to avoid undefined behavior\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0133`.\n"
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.chars().count() as isize\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut res = 0;\n    for _ in string.chars() {\n        res += 1;\n\
    \    }\n    res\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822363
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.chars().count() as isize\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n\tstring.len() as isize\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for i in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822363
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.chars().count() as isize\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    let chars = string.chars();\n    for _char in\
    \ chars {\n        length += 1;\n    }\n    length\n}\n\nfn main() {\n    let\
    \ candidate = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n   \
    \ assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822363
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut res = 0;\n    for _ in string.chars() {\n        res += 1;\n\
    \    }\n    res\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822363
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 101
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n\tlet mut i = 0;\n\tlet mut out = 0;\n\twhile string.as_bytes()[i] != 0 {\n\
    \t\tout += 1;\n\t\ti += 1;\n\t}\n\tout\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmp6u0v1rit.rs:5:11

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822363
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n\treturn string.len() as isize;\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822363
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut len = 0;\n    for _ in string.chars() {\n        len += 1;\n\
    \    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut count = 0;\n    let mut it = string.chars();\n    loop {\n  \
    \      if let Some(_) = it.next() {\n            count += 1;\n        } else {\n\
    \            break;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822363
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.chars().count() as isize\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n\tstring.len() as isize\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    let chars = string.chars();\n    for c in chars\
    \ {\n        length += 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822363
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut i = 0;\n    for c in string.chars() {\n        if c == '\\0'\
    \ {\n            break;\n        }\n        i += 1;\n    }\n    i\n}\n\nfn main()\
    \ {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822363
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    unsafe {\n        return libc::strlen(string.as_ptr() as *const i8) as\
    \ isize;\n    }\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `libc`\n\
    \ --> /tmp/tmpt6dqs3mg.rs:4:16\n  |\n4 |         return libc::strlen(string.as_ptr()\
    \ as *const i8) as isize;\n  |                ^^^^ use of undeclared crate or\
    \ module `libc`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n\tstring.len() as isize\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for c in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut len = 0;\n    for _ in string.chars() {\n        len += 1;\n\
    \    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut len = 0;\n    for _ in string.chars() {\n        len += 1;\n\
    \    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.chars().count() as isize\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut i = 0;\n    for _c in string.chars() {\n        i += 1;\n   \
    \ }\n    i\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822363
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    if string.len() == 0 {\n        return 0;\n    }\n\n    return strlen(string[1..].to_string())\
    \ + 1;\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822363
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut len = 0;\n    for _ in string.chars() {\n        len += 1;\n\
    \    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 101
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut bytes = string.as_bytes();\n    let mut count = 0;\n    while\
    \ bytes[count] != 0 {\n        count += 1;\n    }\n    count as isize\n}\n\nfn\
    \ main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpj5fr4n6j.rs:5:11

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822363
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    return string.len() as isize;\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut len = 0;\n    for _ in string.chars() {\n        len += 1;\n\
    \    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut count = 0;\n    for _ in string.as_bytes() {\n        count +=\
    \ 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    // string is the type &str, which is the literal form of String\n   \
    \ string.len() as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822363
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut i = 0;\n    for ch in string.chars() {\n        i += 1;\n   \
    \ }\n    i\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822363
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    if string.is_empty() {\n        return 0;\n    }\n    1 + strlen(String::from(&string[1..]))\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822363
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 101
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let byte_string = string.into_bytes();\n    let mut result = byte_string.len()\
    \ as isize;\n    result -= 1;\n    result\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `0`', /tmp/tmp30qj8v09.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822363
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let len = string.len() as isize;\n    len\n}\n\nfn main() {\n    let\
    \ candidate = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n   \
    \ assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822363
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    return string.len() as isize;\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    return string.len() as isize;\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let string_ptr = string.as_ptr();\n    let len = strlen_unsafe(string_ptr);\n\
    \    //make sure to deallocate the memory associated with the string\n    unsafe\
    \ {\n        let _ = String::from_raw_parts(string_ptr, len as usize, len as usize);\n\
    \    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `strlen_unsafe` in this scope\n -->\
    \ /tmp/tmpe1nt1amz.rs:4:15\n  |\n4 |     let len = strlen_unsafe(string_ptr);\n\
    \  |               ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpe1nt1amz.rs:7:40\n  |\n7 |         let _ = String::from_raw_parts(string_ptr,\
    \ len as usize, len as usize);\n  |                                        ^^^^^^^^^^\
    \ types differ in mutability\n  |\n  = note: expected raw pointer `*mut u8`\n\
    \             found raw pointer `*const u8`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822363
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut count = 0;\n    for _ in string.chars() {\n        count += 1;\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822363
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    return string.len() as isize;\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut len = 0;\n    for _ in string.chars() {\n        len += 1;\n\
    \    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut count = 0;\n    for _ in string.chars() {\n        count += 1;\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822363
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    return string.len() as isize;\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 101
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    // TODO: Implement this\n    0\n}\n\nfn main() {\n    let candidate =\
    \ strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpsrvcqiz5.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822363
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.chars().count() as isize\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut count = 0;\n    for c in string.chars() {\n        count += 1;\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 101
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut len = 0;\n    for character in string.chars() {\n        match\
    \ character {\n            'R' => len += 1,\n            'L' => len -= 1,\n  \
    \          _ => (),\n        }\n    }\n    len\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpaj22luza.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822363
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut len = 0;\n    for c in string.chars() {\n        len += 1;\n\
    \    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822363
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    // this won't compile because we can't get the size of a generic type\
    \ T\n    // return string.len() as isize;\n\n    // this compiles, but will fail\
    \ to compile if a string of length > isize::MAX\n    // string.len() as isize\n\
    \n    // this will compile, but because we're casting to isize we lose the precision\n\
    \    // needed to index into the string with the index operator\n    string.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822363
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: -11
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    unsafe {\n        let mut len = 0;\n        while (*string.as_ptr().offset(len))\
    \ != 0 {\n            len += 1;\n        }\n        len\n    }\n}\n\nfn main()\
    \ {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659822363
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for c in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut count = 0;\n    let mut string = string;\n    while let Some(char)\
    \ = string.chars().next() {\n        if char != '\\0' {\n            count +=\
    \ 1;\n        }\n        string = string.chars().skip(1).collect();\n    }\n \
    \   count\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822363
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut len = 0;\n    for c in string.chars() {\n        len += 1;\n\
    \    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822363
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut i = 0;\n    for _ in string.chars() {\n        i += 1;\n    }\n\
    \    i\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822363
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for i in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822363
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut len = 0;\n    for _ in string.chars() {\n        len += 1;\n\
    \    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let bytes = string.as_bytes();\n    let mut length = 0;\n    while length\
    \ < bytes.len() && bytes[length] != 0 {\n        length += 1;\n    }\n    length\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822363
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut i = 0;\n    for _ in string.chars() {\n        i += 1;\n    }\n\
    \    i\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822363
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _char in string.chars() {\n        length\
    \ += 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n  \
    \  assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822363
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut result = 0;\n    let mut i = 0;\n    while i < string.len() {\n\
    \        if string.char_at(i) == '*' {\n            break;\n        } else {\n\
    \            result += 1;\n        }\n        i += 1;\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `char_at` found for struct `String` in the\
    \ current scope\n --> /tmp/tmpkbgwy6id.rs:6:19\n  |\n6 |         if string.char_at(i)\
    \ == '*' {\n  |                   ^^^^^^^ method not found in `String`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659822363
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.chars().count() as isize\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let bytes = string.as_bytes();\n    let mut len = 0;\n    for b in bytes\
    \ {\n        if *b == 0 {\n            break;\n        }\n        len += 1;\n\
    \    }\n    len as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822363
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut i = 0;\n    for c in string.chars() {\n        i += 1;\n    }\n\
    \    i\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822363
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut len = 0;\n    for c in string.chars() {\n        if c == '\\\
    x00' {\n            break;\n        }\n        len += 1;\n    }\n    len\n}\n\n\
    fn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822363
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.chars().count() as isize\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 101
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut i = 0;\n    while string.as_bytes()[i as usize] != 0 {\n    \
    \    i += 1;\n    }\n    i\n}\n\nfn main() {\n    let candidate = strlen;\n  \
    \  assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpjcegaxd1.rs:4:11

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut i = 0;\n    for ch in string.chars() {\n        i += 1;\n   \
    \ }\n    i\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822363
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut c = 0;\n    for _ in string.as_bytes() {\n        c += 1;\n \
    \   }\n    c\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822363
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for c in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut strlen = 0;\n    for _ in string.chars() {\n        strlen +=\
    \ 1;\n    }\n    strlen\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822363
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.chars().count() as isize\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut counter = 0;\n    for _ in string.chars() {\n        counter\
    \ += 1;\n    }\n    counter\n}\n\nfn main() {\n    let candidate = strlen;\n \
    \   assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822363
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    let mut chars = string.chars();\n    while let\
    \ Some(_) = chars.next() {\n        length += 1;\n    }\n    length\n}\n\nfn main()\
    \ {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: -11
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    unsafe {\n        let mut i = 0;\n        while *string.as_ptr().offset(i)\
    \ != 0 {\n            i += 1;\n        }\n        i\n    }\n}\n\nfn main() {\n\
    \    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n\
    \    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659822363
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let bytes = string.as_bytes();\n    let mut i = 0;\n    for j in 0..bytes.len()\
    \ {\n        if bytes[j] == b'\\0' {\n            break;\n        }\n        i\
    \ += 1;\n    }\n    i as isize\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822363
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut c: isize = 0;\n    for _ in string.chars() {\n        c += 1;\n\
    \    }\n    c\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822363
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let bytes = string.as_bytes();\n    bytes.len() as isize\n}\n\nfn main()\
    \ {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n\tlet mut length = 0;\n\tfor _char in string.chars() {\n\t\tlength += 1;\n\
    \t}\n\tlength\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822363
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let chars: Vec<char> = string.chars().collect();\n    chars.len() as\
    \ isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822363
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut len = 0;\n    for _ in string.chars() {\n        len += 1;\n\
    \    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _byte in string.as_bytes() {\n        length\
    \ += 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n  \
    \  assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822363
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut count = 0;\n    for _ in string.chars() {\n        count += 1;\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822363
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    // TODO: write this function\n    string.len() as isize\n}\n\nfn main()\
    \ {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822363
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.chars().count() as isize\n}\n\nfn main() {\n    let candidate\
    \ = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 1
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let strptr = CString::new(string).unwrap();\n    unsafe { libc::strlen(strptr.as_ptr())\
    \ as isize }\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `libc`\n\
    \ --> /tmp/tmp3g6v70ql.rs:4:14\n  |\n4 |     unsafe { libc::strlen(strptr.as_ptr())\
    \ as isize }\n  |              ^^^^ use of undeclared crate or module `libc`\n\
    \nerror[E0433]: failed to resolve: use of undeclared type `CString`\n   --> /tmp/tmp3g6v70ql.rs:3:18\n\
    \    |\n3   |       let strptr = CString::new(string).unwrap();\n    |       \
    \             ^^^^^^^\n    |\nhelp: a struct with a similar name exists\n    |\n\
    3   |     let strptr = String::new(string).unwrap();\n    |                  ~~~~~~\n\
    help: consider importing this struct\n    |\n1   | use std::ffi::CString;\n  \
    \  |\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659822363
- exit_code: 101
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let string = string + \"\\x00\";\n    let len = string.len();\n    len\
    \ as isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpnmfu2tg4.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822364
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    // TODO: needs to be called with a string literal as an argument,\n \
    \   // not a variable that contains a string literal\n    // (unless the given\
    \ variable is a String reference)\n    string.len() as isize\n}\n\nfn main() {\n\
    \    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\")), 0);\n\
    \    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822364
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut count = 0;\n    for _char in string.chars() {\n        count\
    \ += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = strlen;\n   \
    \ assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822364
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut len = 0;\n    for _ in string.chars() {\n        len += 1;\n\
    \    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut len = 0;\n    for b in string.as_bytes() {\n        len += 1;\n\
    \    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822364
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 101
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let string_length = 0;\n    for (i, _c) in string.chars().enumerate()\
    \ {\n        let string_length = i;\n    }\n    return string_length as isize;\n\
    }\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpdj4ulyuk.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822364
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    // remove '\\0'\n    string.chars().filter(|&c| c != '\\0').count() as\
    \ isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822364
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    // string.len() returns usize, but we need isize\n    string.len() as\
    \ isize\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822364
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822362
