name: HumanEval_153_Strongest_Extension
language: rs
prompt: "/// You will be given the name of a class (a string) and a list of extensions.\n\
  /// The extensions are to be used to load additional classes to the class. The\n\
  /// strength of the extension is as follows: Let CAP be the number of the uppercase\n\
  /// letters in the extension's name, and let SM be the number of lowercase letters\
  \ \n/// in the extension's name, the strength is given by the fraction CAP - SM.\
  \ \n/// You should find the strongest extension and return a string in this \n///\
  \ format: ClassName.StrongestExtensionName.\n/// If there are two or more extensions\
  \ with the same strength, you should\n/// choose the one that comes first in the\
  \ list.\n/// For example, if you are given \"Slices\" as the class and a list of\
  \ the\n/// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
  /// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
  \ \n/// (its strength is -1).\n/// Example:\nfn Strongest_Extension(class_name:\
  \ String, extensions: Vec<String>) -> String {\n"
tests: "}\n\nfn main() {\n    let candidate = Strongest_Extension;\n    assert_eq!(candidate(String::from(\"\
  Watashi\"), vec![String::from(\"tEN\"), String::from(\"niNE\"), String::from(\"\
  eIGHt8OKe\")]), String::from(\"Watashi.eIGHt8OKe\"));\n    assert_eq!(candidate(String::from(\"\
  Boku123\"), vec![String::from(\"nani\"), String::from(\"NazeDa\"), String::from(\"\
  YEs.WeCaNe\"), String::from(\"32145tggg\")]), String::from(\"Boku123.YEs.WeCaNe\"\
  ));\n    assert_eq!(candidate(String::from(\"__YESIMHERE\"), vec![String::from(\"\
  t\"), String::from(\"eMptY\"), String::from(\"nothing\"), String::from(\"zeR00\"\
  ), String::from(\"NuLl__\"), String::from(\"123NoooneB321\")]), String::from(\"\
  __YESIMHERE.NuLl__\"));\n    assert_eq!(candidate(String::from(\"K\"), vec![String::from(\"\
  Ta\"), String::from(\"TAR\"), String::from(\"t234An\"), String::from(\"cosSo\")]),\
  \ String::from(\"K.TAR\"));\n    assert_eq!(candidate(String::from(\"__HAHA\"),\
  \ vec![String::from(\"Tab\"), String::from(\"123\"), String::from(\"781345\"), String::from(\"\
  -_-\")]), String::from(\"__HAHA.123\"));\n    assert_eq!(candidate(String::from(\"\
  YameRore\"), vec![String::from(\"HhAas\"), String::from(\"okIWILL123\"), String::from(\"\
  WorkOut\"), String::from(\"Fails\"), String::from(\"-_-\")]), String::from(\"YameRore.okIWILL123\"\
  ));\n    assert_eq!(candidate(String::from(\"finNNalLLly\"), vec![String::from(\"\
  Die\"), String::from(\"NowW\"), String::from(\"Wow\"), String::from(\"WoW\")]),\
  \ String::from(\"finNNalLLly.WoW\"));\n    assert_eq!(candidate(String::from(\"\
  _\"), vec![String::from(\"Bb\"), String::from(\"91245\")]), String::from(\"_.Bb\"\
  ));\n    assert_eq!(candidate(String::from(\"Sp\"), vec![String::from(\"671235\"\
  ), String::from(\"Bb\")]), String::from(\"Sp.671235\"));\n}\n"
completions: ["    let mut strongest_extension = extensions[0].clone();\n    let mut\
    \ strongest_extension_strength = 0.0;\n    for extension in extensions {\n   \
    \     let mut capital_letter_count = 0;\n        let mut small_letter_count =\
    \ 0;\n        for letter in extension.chars() {\n            if letter.is_uppercase()\
    \ {\n                capital_letter_count += 1;\n            } else {\n      \
    \          small_letter_count += 1;\n            }\n        }\n        let extension_strength\
    \ = (capital_letter_count as f64) - (small_letter_count as f64);\n        if extension_strength\
    \ > strongest_extension_strength {\n            strongest_extension_strength =\
    \ extension_strength;\n            strongest_extension = extension;\n        }\n\
    \    }\n    format!(\"{}.{}\", class_name, strongest_extension)", "    extensions.into_iter().map(|x|\
    \ (x.chars().filter(|x| x.is_uppercase()).count() as i32 -\n                 \
    \                   x.chars().filter(|x| x.is_lowercase()).count() as i32,\n \
    \                                   x)).max().unwrap().1", "    println!(\"class_name:\
    \ {}\", class_name);\n    let class_upper_cases: i32 = class_name.matches(char::is_uppercase).count()\
    \ as i32;\n    let class_lower_cases: i32 = class_name.matches(char::is_lowercase).count()\
    \ as i32;\n    let class_strength: f32 = (class_upper_cases - class_lower_cases)\
    \ as f32;\n    println!(\"class_upper_cases: {}\", class_upper_cases);\n    println!(\"\
    class_lower_cases: {}\", class_lower_cases);\n    println!(\"class_strength: {}\"\
    , class_strength);\n    let mut strongest_strength: f32 = class_strength;\n  \
    \  let mut strongest_extension_name: String = \"none\".to_string();\n    for extension\
    \ in extensions {\n        let upper_cases: i32 = extension.matches(char::is_uppercase).count()\
    \ as i32;\n        let lower_cases: i32 = extension.matches(char::is_lowercase).count()\
    \ as i32;\n        let strength: f32 = (upper_cases - lower_cases) as f32;\n \
    \       println!(\"extension: {}\", extension);\n        println!(\"upper_cases:\
    \ {}\", upper_cases);\n        println!(\"lower_cases: {}\", lower_cases);\n \
    \       println!(\"strength: {}\", strength);\n        if strength > strongest_strength\
    \ {\n            strongest_strength = strength;\n            strongest_extension_name\
    \ = extension;\n        }\n    }\n    println!(\"strongest_strength: {}\", strongest_strength);\n\
    \    println!(\"strongest_extension_name: {}\", strongest_extension_name);\n \
    \   format!(\"{}.{}\", class_name, strongest_extension_name)", "    let mut strongest_extension\
    \ = String::new();\n    let mut strongest_strength = 0.0;\n    for extension in\
    \ extensions {\n        let (caps, smalls) = extension.split_at(extension.chars().filter(|c|\
    \ c.is_uppercase()).count());\n        let strength = caps.len() as f64 - smalls.len()\
    \ as f64;\n        if strength > strongest_strength {\n            strongest_strength\
    \ = strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    format!(\"{}.{}\", class_name, strongest_extension)", "    // Find the strongest\
    \ extension\n    extensions.iter().fold((\"\".to_string(), 0.0), |acc, extension|\
    \ {\n        let cap = extension.to_uppercase().len();\n        let sm = extension.to_lowercase().len();\n\
    \        let strength = (cap - sm) as f64 / extension.len() as f64;\n        if\
    \ strength > acc.1 {\n            (extension.to_string(), strength)\n        }\
    \ else {\n            acc\n        }\n    }).0", "    let mut best = 0;\n    let\
    \ mut answer = class_name.clone();\n    for x in extensions {\n        let s =\
    \ x.chars().filter(|x| x.is_uppercase()).count() - x.chars().filter(|x| x.is_lowercase()).count();\n\
    \        if s > best {\n            best = s;\n            answer = class_name.clone()\
    \ + \".\" + &x;\n        }\n    }\n    answer", "    //Your code goes here\n \
    \   return format!(\"{}.{}\", class_name, \"test\");", "    class_name.clone()\
    \ + \".\" + &extensions.into_iter().max_by_key(|x| {\n        let (cap, sm) =\
    \ x.chars().fold((0, 0), |(cap, sm), c| {\n            if c.is_uppercase() {\n\
    \                (cap + 1, sm)\n            } else {\n                (cap, sm\
    \ + 1)\n            }\n        });\n        (cap - sm) as isize\n    }).unwrap()",
  "    let mut strongest_extension = \"\";\n    let mut strongest_extension_strength\
    \ = 0;\n    for extension in extensions {\n        let mut upper_case_count =\
    \ 0;\n        let mut lower_case_count = 0;\n        for character in extension.chars()\
    \ {\n            if character.is_uppercase() {\n                upper_case_count\
    \ += 1;\n            } else if character.is_lowercase() {\n                lower_case_count\
    \ += 1;\n            }\n        }\n        let strength = upper_case_count - lower_case_count;\n\
    \        if strength > strongest_extension_strength {\n            strongest_extension_strength\
    \ = strength;\n            strongest_extension = extension.clone();\n        }\n\
    \    }\n    format!(\"{}.{}\", class_name, strongest_extension)", "    class_name\
    \ + \".\" + &extensions\n        .iter()\n        .map(|s| {\n            let\
    \ mut upper = 0;\n            let mut lower = 0;\n            for c in s.chars()\
    \ {\n                if c.is_uppercase() {\n                    upper += 1;\n\
    \                } else {\n                    lower += 1;\n                }\n\
    \            }\n            (upper as f64 - lower as f64, s)\n        })\n   \
    \     .max()\n        .unwrap()\n        .1\n        .to_string()", "\tlet mut\
    \ strongest = \"\".to_string();\n\tlet mut strength = 0;\n\tfor i in 0..extensions.len()\
    \ {\n\t\tlet caps = extensions[i].chars().filter(|c| c.is_uppercase()).count();\n\
    \t\tlet lowers = extensions[i].chars().filter(|c| c.is_lowercase()).count();\n\
    \t\tlet str = caps - lowers;\n\t\tif str > strength {\n\t\t\tstrongest = extensions[i].clone();\n\
    \t\t\tstrength = str;\n\t\t}\n\t}\n\tformat!(\"{}.{}\", class_name, strongest)",
  "    let mut strongest = (class_name.clone(), 0);\n    for extension in extensions\
    \ {\n        let mut cap = 0;\n        let mut sm = 0;\n        for char in extension.chars()\
    \ {\n            if char.is_uppercase() {\n                cap += 1;\n       \
    \     } else {\n                sm += 1;\n            }\n        }\n        let\
    \ strength = cap - sm;\n        if strength > strongest.1 {\n            strongest\
    \ = (extension, strength);\n        }\n    }\n    return format!(\"{}.{}\", class_name,\
    \ strongest.0);", "    let len = extensions.len();\n    if len == 0 {\n      \
    \  return format!(\"{}\", class_name);\n    }\n\n    let mut strongest = extensions[0].clone();\n\
    \    let mut strength = 0;\n    for item in extensions {\n        let (item_upper,\
    \ item_lower) = count_letters(&item);\n        let item_diff = item_upper - item_lower;\n\
    \        if item_diff > strength {\n            strongest = item.clone();\n  \
    \          strength = item_diff;\n        }\n    }\n\n    return format!(\"{}.{}\"\
    , class_name, strongest);", "    let mut strongest_extension: String = String::new();\n\
    \    let mut strongest_strength: f64 = 0.0;\n    for extension in extensions {\n\
    \        let mut upper_case_count: i32 = 0;\n        let mut lower_case_count:\
    \ i32 = 0;\n        for c in extension.chars() {\n            if c.is_uppercase()\
    \ {\n                upper_case_count += 1;\n            } else if c.is_lowercase()\
    \ {\n                lower_case_count += 1;\n            }\n        }\n      \
    \  let mut strength: f64 = upper_case_count as f64 - lower_case_count as f64;\n\
    \        if strength > strongest_strength {\n            strongest_strength =\
    \ strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    format!(\"{}.{}\", class_name, strongest_extension)", '    extensions.iter().max_by_key(|&ext|
    extension_strength(ext) * -1).unwrap().to_string()', "\tlet mut strongest_extension\
    \ = \"\";\n\tlet mut strongest_extension_strength = f64::NEG_INFINITY;\n\tfor\
    \ i in 0..extensions.len() {\n\t\tlet mut cap = 0;\n\t\tlet mut sm = 0;\n\t\t\
    for j in 0..extensions[i].len() {\n\t\t\tif extensions[i].chars().nth(j).unwrap().is_ascii_uppercase()\
    \ {\n\t\t\t\tcap += 1;\n\t\t\t} else {\n\t\t\t\tsm += 1;\n\t\t\t}\n\t\t}\n\t\t\
    let strength = cap as f64 - sm as f64;\n\t\tif strength > strongest_extension_strength\
    \ {\n\t\t\tstrongest_extension_strength = strength;\n\t\t\tstrongest_extension\
    \ = &extensions[i];\n\t\t}\n\t}\n\tformat!(\"{}.{}\", class_name, strongest_extension)",
  "    let mut extensions_strengths: Vec<(String, i64)> = vec![];\n    let mut strongest_extension\
    \ = (\"\".to_string(), 0);\n    for extension in extensions {\n        let mut\
    \ strength = 0;\n        for letter in extension.chars() {\n            if letter.is_uppercase()\
    \ {\n                strength += 1;\n            } else {\n                strength\
    \ -= 1;\n            }\n        }\n        extensions_strengths.push((extension,\
    \ strength));\n    }\n    extensions_strengths.sort_by(|a, b| b.1.cmp(&a.1));\n\
    \    if extensions_strengths[0].1 == extensions_strengths[1].1 {\n        strongest_extension\
    \ = (extensions_strengths[0].0.clone(), extensions_strengths[0].1);\n    } else\
    \ {\n        strongest_extension = (extensions_strengths[0].0.clone(), extensions_strengths[0].1);\n\
    \    }\n    format!(\"{}.{}\", class_name, strongest_extension.0)", "    let mut\
    \ strongest = 0;\n    let mut ext = class_name.clone();\n    for x in extensions\
    \ {\n        let caps = x.chars().filter(|x| x.is_uppercase()).count();\n    \
    \    let smalls = x.chars().filter(|x| x.is_lowercase()).count();\n        let\
    \ temp = caps - smalls;\n        if temp > strongest {\n            strongest\
    \ = temp;\n            ext = format!(\"{}.{}\", class_name, x);\n        }\n \
    \   }\n    ext", "\tlet mut a = extensions.iter().collect::<Vec<_>>();\n\ta.sort_by(|a,\
    \ b| {\n\t\tlet a_score = a.chars().filter(|a| a.is_uppercase()).count() - a.chars().filter(|a|\
    \ a.is_lowercase()).count();\n\t\tlet b_score = b.chars().filter(|a| a.is_uppercase()).count()\
    \ - b.chars().filter(|a| a.is_lowercase()).count();\n\t\tb_score.cmp(&a_score)\n\
    \t});\n\tformat!(\"{}.{}\", class_name, a[0])", "    let mut result = String::new();\n\
    \    let mut strength: f64 = -100_000_000.0;\n    for extension in extensions\
    \ {\n        let mut capitals = 0;\n        let mut smalls = 0;\n        for letter\
    \ in extension.chars() {\n            if letter.is_uppercase() {\n           \
    \     capitals += 1;\n            } else {\n                smalls += 1;\n   \
    \         }\n        }\n        let curr_strength = (capitals - smalls) as f64\
    \ / extension.len() as f64;\n        if curr_strength > strength {\n         \
    \   strength = curr_strength;\n            result = extension;\n        }\n  \
    \  }\n    format!(\"{}.{}\", class_name, result)", "    let mut strong_extension\
    \ = extensions[0].clone();\n    let mut strong_strength = 0.0;\n    for extension\
    \ in extensions {\n        let strength = calculate_strength(&extension);\n  \
    \      if strength > strong_strength {\n            strong_strength = strength;\n\
    \            strong_extension = extension;\n        }\n    }\n    format!(\"{}.{}\"\
    , class_name, strong_extension)", "    let mut strongest = 0;\n    let mut str_ext\
    \ = \"\";\n    for s in extensions {\n        let mut lower_count = 0;\n     \
    \   let mut upper_count = 0;\n        for c in s.chars() {\n            if c.is_uppercase()\
    \ {\n                upper_count += 1;\n            } else {\n               \
    \ lower_count += 1;\n            }\n        }\n        let strength = upper_count\
    \ - lower_count;\n        if strength > strongest {\n            strongest = strength;\n\
    \            str_ext = s.as_str();\n        }\n    }\n    let string = class_name\
    \ + \".\" + str_ext;\n    string", "    let mut strongest_extension = String::new();\n\
    \    let mut best_fraction = -1.0;\n    for s in extensions {\n        let extension_name\
    \ = s.clone();\n        let upper_case_letters = s.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let lower_case_letters = s.chars().filter(|c| c.is_lowercase()).count();\n\
    \        let fraction = (upper_case_letters as f64) / (lower_case_letters as f64);\n\
    \        if fraction > best_fraction {\n            best_fraction = fraction;\n\
    \            strongest_extension = format!(\"{}.{}\", class_name, extension_name);\n\
    \        }\n    }\n    strongest_extension", "  let mut strongest_strength = -1;\n\
    \  let mut strongest_extension = \"\";\n  for ext in extensions {\n    let up_chars\
    \ = ext.chars().filter(|c| c.is_uppercase()).count();\n    let low_chars = ext.chars().filter(|c|\
    \ c.is_lowercase()).count();\n    let strength = up_chars as f64 - low_chars as\
    \ f64;\n    if strength > strongest_strength {\n      strongest_strength = strength;\n\
    \      strongest_extension = ext.as_str();\n    }\n  }\n  format!(\"{}.{}\", class_name,\
    \ strongest_extension)", "    let mut strongest_extension = extensions[0].clone();\n\
    \    let mut strongest_value = 0;\n    for extension in extensions {\n       \
    \ let cap = extension.chars().filter(|x| x.is_uppercase()).count();\n        let\
    \ sm = extension.chars().filter(|x| x.is_lowercase()).count();\n        let value\
    \ = cap - sm;\n        if value > strongest_value {\n            strongest_value\
    \ = value;\n            strongest_extension = extension;\n        }\n    }\n \
    \   class_name + \".\" + &strongest_extension", "    // ... \n    let mut strongest\
    \ = 0;\n    let mut best_extension = \"\";\n    for ext in extensions {\n    \
    \    let mut cap_count = 0;\n        let mut sm_count = 0;\n        for c in ext.chars()\
    \ {\n            if c.is_uppercase() {\n                cap_count += 1;\n    \
    \        } else {\n                sm_count += 1;\n            }\n        }\n\
    \        let strength = cap_count - sm_count;\n        if strength > strongest\
    \ {\n            strongest = strength;\n            best_extension = ext.as_str();\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, best_extension)", "    let\
    \ mut strength: i32 = std::i32::MIN;\n    let mut strongest: &str = \"\";\n  \
    \  for ext in extensions {\n        let upper = ext.chars().filter(|&c| c.is_uppercase()).count();\n\
    \        let lower = ext.chars().filter(|&c| c.is_lowercase()).count();\n    \
    \    let temp = (upper as i32) - (lower as i32);\n        if temp > strength {\n\
    \            strength = temp;\n            strongest = &ext;\n        }\n    }\n\
    \    format!(\"{}.{}\", class_name, strongest)", "  let mut strongest_extension\
    \ = String::new();\n  let mut strongest_strength = 0;\n  let mut current_strength\
    \ = 0;\n  for extension in extensions {\n    let mut cap = 0;\n    let mut sm\
    \ = 0;\n    for character in extension.chars() {\n      if character.is_uppercase()\
    \ {\n        cap += 1;\n      } else {\n        sm += 1;\n      }\n    }\n   \
    \ current_strength = cap - sm;\n    if current_strength > strongest_strength {\n\
    \      strongest_strength = current_strength;\n      strongest_extension = extension;\n\
    \    }\n  }\n  format!(\"{}.{}\", class_name, strongest_extension)", "    let\
    \ mut mv = Vec::new();\n    let mut temp_ext = Vec::new();\n    let mut ext_iter\
    \ = extensions.iter();\n    let mut count = 0;\n    while let Some(ext) = ext_iter.next()\
    \ {\n        temp_ext.push(ext);\n        count += 1;\n        if count == extensions.len()\
    \ {\n            mv.push(temp_ext);\n            temp_ext = Vec::new();\n    \
    \        count = 0;\n        }\n    }\n    let mut class_iter = mv.iter();\n \
    \   let mut count = 0;\n    let mut strongest_ext = Vec::new();\n    while let\
    \ Some(cls) = class_iter.next() {\n        let mut temp_ext_vec = Vec::new();\n\
    \        let mut mv_iter = cls.iter();\n        while let Some(mv) = mv_iter.next()\
    \ {\n            let mut uppercase_count = 0;\n            let mut lowercase_count\
    \ = 0;\n            let mut mv_chars = mv.chars();\n            while let Some(char)\
    \ = mv_chars.next() {\n                if char.is_uppercase() {\n            \
    \        uppercase_count += 1;\n                } else if char.is_lowercase()\
    \ {\n                    lowercase_count += 1;\n                }\n          \
    \  }\n            temp_ext_vec.push((mv, uppercase_count - lowercase_count));\n\
    \        }\n        temp_ext_vec.sort_by(|a, b| b.1.cmp(&a.1));\n        strongest_ext.push(temp_ext_vec[0].0);\n\
    \        count += 1;\n    }\n    let mut class_name_with_ext = String::new();\n\
    \    class_name_with_ext.push_str(&class_name);\n    class_name_with_ext.push_str(\"\
    .\");\n    let mut strongest_ext_iter = strongest_ext.iter();\n    while let Some(strongest_ext)\
    \ = strongest_ext_iter.next() {\n        class_name_with_ext.push_str(&strongest_ext);\n\
    \        if strongest", "    extensions.into_iter().filter(|e| e.chars().any(|c|\
    \ c.is_uppercase()) && e.chars().any(|c| c.is_lowercase())).max_by_key(|e| {\n\
    \        let mut count = 0;\n        for c in e.chars() {\n            if c.is_uppercase()\
    \ {\n                count += 1;\n            } else if c.is_lowercase() {\n \
    \               count -= 1;\n            }\n        }\n        count\n    }).map(|e|\
    \ format!(\"{}.{}\", class_name, e)).unwrap_or(class_name)", "    let mut strengths:\
    \ Vec<f64> = Vec::new();\n    let mut final_string: String = String::new();\n\
    \    let mut strength: f64 = 0.0;\n    let mut highest_strength: f64 = 0.0;\n\
    \    let mut strongest_extension: String = String::new();\n    for i in 0..extensions.len()\
    \ {\n        strength = 0.0;\n        for j in 0..extensions[i].len() {\n    \
    \        if extensions[i].chars().nth(j).unwrap().is_uppercase() {\n         \
    \       strength += 1.0;\n            } else {\n                strength -= 1.0;\n\
    \            }\n        }\n        strengths.push(strength);\n    }\n    for i\
    \ in 0..strengths.len() {\n        if strengths[i] > highest_strength {\n    \
    \        highest_strength = strengths[i];\n            strongest_extension = extensions[i].clone();\n\
    \        }\n    }\n    final_string.push_str(&class_name);\n    final_string.push_str(\"\
    .\");\n    final_string.push_str(&strongest_extension);\n    return final_string;",
  "    let mut strongest_extension = String::new();\n    let mut strongest_extension_strength\
    \ = -1.0;\n    for extension in extensions {\n        let mut cap = 0;\n     \
    \   let mut sm = 0;\n        for c in extension.chars() {\n            if c.is_ascii_uppercase()\
    \ {\n                cap += 1;\n            } else if c.is_ascii_lowercase() {\n\
    \                sm += 1;\n            }\n        }\n        let strength = cap\
    \ as f64 - sm as f64;\n        if strength > strongest_extension_strength {\n\
    \            strongest_extension_strength = strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    format!(\"{}.{}\", class_name, strongest_extension)",
  "    let mut strength = 0.0;\n    let mut strongest = String::new();\n    for ext\
    \ in extensions {\n        let mut temp_strength = 0.0;\n        for c in ext.chars()\
    \ {\n            if c.is_uppercase() {\n                temp_strength += 1.0;\n\
    \            } else {\n                temp_strength -= 1.0;\n            }\n\
    \        }\n        if temp_strength > strength {\n            strength = temp_strength;\n\
    \            strongest = ext;\n        }\n    }\n    class_name + \".\" + &strongest",
  "    let mut best_extension = \"\";\n    let mut best_strength = -2.0;\n    for\
    \ i in 0..extensions.len() {\n        let mut x = String::from(extensions[i].as_str());\n\
    \        x.to_uppercase();\n        let mut y = x.to_lowercase();\n        let\
    \ mut caps = 0;\n        let mut sm = 0;\n        for j in 0..x.len() {\n    \
    \        if x.chars().nth(j).unwrap() != y.chars().nth(j).unwrap() {\n       \
    \         caps += 1;\n            } else {\n                sm += 1;\n       \
    \     }\n        }\n        let current_strength = caps as f64 - sm as f64;\n\
    \        if current_strength > best_strength {\n            best_strength = current_strength;\n\
    \            best_extension = extensions[i].as_str();\n        }\n    }\n    format!(\"\
    {}.{}\", class_name, best_extension)", '    extensions.iter().map(|x| (x, get_extension_strength(x))).max_by_key(|x|
    x.1).unwrap().0.to_string()', "    let mut best = (\"\", 0, 0);\n    for e in\
    \ extensions {\n        let (caps, smalls) = count_caps_smalls(&e);\n        let\
    \ s = caps - smalls;\n        if best.1 < s {\n            best = (e, s, caps);\n\
    \        } else if best.1 == s && best.2 < caps {\n            best = (e, s, caps);\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, best.0)", "    let mut ext_str:\
    \ Vec<(String, f64)> = vec![];\n    let class_name = class_name.as_str();\n  \
    \  for mut ext in extensions {\n        let cap = ext.to_uppercase();\n      \
    \  let sm = ext.to_lowercase();\n        let mut strg = 1.0;\n        for i in\
    \ 0..ext.len() {\n            if cap.chars().nth(i) == ext.chars().nth(i) {\n\
    \                strg -= 1.0;\n            }\n        }\n        ext_str.push((ext,\
    \ strg));\n    }\n    let mut max = 0.0;\n    let mut res = \"\".to_string();\n\
    \    for (i, (ext, strg)) in ext_str.iter().enumerate() {\n        if strg > &max\
    \ {\n            max = *strg;\n            res = ext.clone();\n        }\n   \
    \ }\n    if res == \"\" {\n        format!(\"{}\", class_name)\n    } else {\n\
    \        format!(\"{}.{}\", class_name, res)\n    }", "    let mut strength =\
    \ 0;\n    let mut strongest = String::new();\n    for s in extensions {\n    \
    \    let mut caps = 0;\n        let mut smls = 0;\n        for c in s.chars()\
    \ {\n            if c.is_uppercase() {\n                caps += 1;\n         \
    \   } else {\n                smls += 1;\n            }\n        }\n        let\
    \ strn = caps - smls;\n        if strn > strength {\n            strength = strn;\n\
    \            strongest = s;\n        }\n    }\n    format!(\"{}.{}\", class_name,\
    \ strongest)", "    let mut strongest = String::new();\n    let mut strength =\
    \ 0;\n    for ext in extensions {\n        let ex_st = extension_strength(&ext);\n\
    \        if ex_st > strength {\n            strength = ex_st;\n            strongest\
    \ = ext;\n        }\n    }\n    if strongest.len() == 0 {\n        return class_name;\n\
    \    }\n    else {\n        return format!(\"{}.{}\", class_name, strongest);\n\
    \    }", "    let mut result = class_name.clone();\n    let mut strength = 0.0;\n\
    \    for extension in extensions {\n        let capital_count = extension.chars().filter(|&c|\
    \ c.is_uppercase()).count();\n        let small_count = extension.chars().filter(|&c|\
    \ c.is_lowercase()).count();\n        let new_strength = capital_count as f64\
    \ - small_count as f64;\n        if new_strength > strength {\n            strength\
    \ = new_strength;\n            result = format!(\"{}.{}\", class_name, extension);\n\
    \        }\n    }\n    result", "    let mut strength: f64 = std::f64::MIN;\n\
    \    let mut strongest_extension = \"\";\n    for ext in extensions {\n      \
    \  let mut cap = 0;\n        let mut sm = 0;\n        for c in ext.chars() {\n\
    \            if c.is_uppercase() {\n                cap += 1;\n            } else\
    \ {\n                sm += 1;\n            }\n        }\n        let tmp_strength\
    \ = cap as f64 - sm as f64;\n        if tmp_strength > strength {\n          \
    \  strength = tmp_strength;\n            strongest_extension = ext.as_str();\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, strongest_extension)", " \
    \   let mut strongest_extension = \"\".to_string();\n    let mut strength: f64\
    \ = 0.0;\n    for extension in extensions {\n        let capital = extension.chars().filter(|x|\
    \ x.is_uppercase()).count();\n        let small = extension.chars().filter(|x|\
    \ x.is_lowercase()).count();\n        let current_strength = capital as f64 -\
    \ small as f64;\n        if current_strength > strength {\n            strength\
    \ = current_strength;\n            strongest_extension = extension;\n        }\n\
    \    }\n    return format!(\"{}.{}\", class_name, strongest_extension);", "  \
    \  let mut best = (\"\".to_string(), -100.0);\n    for i in extensions {\n   \
    \     let lower: i32 = i.chars().filter(|x| x.is_lowercase()).count() as i32;\n\
    \        let upper: i32 = i.chars().filter(|x| x.is_uppercase()).count() as i32;\n\
    \        let mut diff = (upper - lower) as f64;\n        if diff == 0.0 {\n  \
    \          diff = -100.0;\n        }\n        if diff > best.1 {\n           \
    \ best = (i.clone(), diff);\n        }\n    }\n    return class_name + \".\" +\
    \ &best.0;", "    println!(\"{} {}\", class_name, extensions.len());\n    for\
    \ ext in extensions {\n        println!(\"{}\", ext);\n    }\n    class_name +\
    \ \".StrongestExtensionName\"", '    extensions.into_iter().map(|ext| (class_name.clone()
    + "." + &ext, ext.chars().filter(|&c| c.is_ascii_uppercase()).count() - ext.chars().filter(|&c|
    c.is_ascii_lowercase()).count())).max_by_key(|(_, strength)| *strength).map(|(s,
    _)| s).unwrap()', "    let mut class_strength: Vec<(i32, String)> = Vec::new();\n\
    \    for ext in extensions {\n        let mut cap = 0;\n        let mut sm = 0;\n\
    \        for ch in ext.chars() {\n            if ch.is_ascii_uppercase() {\n \
    \               cap += 1;\n            } else {\n                sm += 1;\n  \
    \          }\n        }\n        class_strength.push((cap - sm, ext));\n    }\n\
    \    class_strength.sort_by(|a, b| b.0.cmp(&a.0));\n    format!(\"{}.{}\", class_name,\
    \ class_strength[0].1)", "    let mut strongest_extension = \"\".to_string();\n\
    \    let mut max_strength = 0;\n    for extension in extensions {\n        let\
    \ number_of_uppercase = extension.chars().filter(|&x| x.is_uppercase()).count();\n\
    \        let number_of_lowercase = extension.chars().filter(|&x| x.is_lowercase()).count();\n\
    \        let strength = number_of_uppercase - number_of_lowercase;\n        if\
    \ strength > max_strength {\n            max_strength = strength;\n          \
    \  strongest_extension = extension;\n        }\n    }\n    class_name + \".\"\
    \ + &strongest_extension", "    let mut count_extensions = 0;\n    let mut i =\
    \ 0;\n    let mut max = 0;\n    let mut temp = 0;\n    let mut extension = String::new();\n\
    \    for extension_string in extensions.iter() {\n        count_extensions +=\
    \ 1;\n        i = 0;\n        temp = 0;\n        while i < extension_string.len()\
    \ {\n            if extension_string.chars().nth(i).unwrap().is_uppercase() {\n\
    \                temp += 1;\n            } else {\n                temp -= 1;\n\
    \            }\n            i += 1;\n        }\n        if temp > max {\n    \
    \        max = temp;\n            extension = extension_string.to_string();\n\
    \        }\n    }\n    if count_extensions > 0 {\n        return format!(\"{}.{}\"\
    , class_name, extension);\n    } else {\n        return format!(\"{}\", class_name);\n\
    \    }", "    if extensions.len() == 0 {\n        return class_name;\n    }\n\
    \    let mut strongest = (String::new(), 0.0f64);\n    for extension in extensions\
    \ {\n        let mut upper = 0usize;\n        let mut lower = 0usize;\n      \
    \  for c in extension.chars() {\n            if c.is_ascii_uppercase() {\n   \
    \             upper += 1;\n            } else {\n                lower += 1;\n\
    \            }\n        }\n        let extension_strength = (upper as f64) - (lower\
    \ as f64);\n        if extension_strength > strongest.1 {\n            strongest\
    \ = (extension, extension_strength);\n        }\n    }\n    return format!(\"\
    {}.{}\", class_name, strongest.0);", "\tlet mut strength = -100.0;\n\tlet mut\
    \ best_ext = &extensions[0];\n\tfor ext in extensions {\n\t\tlet mut cap = 0;\n\
    \t\tlet mut sm = 0;\n\t\tfor c in ext.chars() {\n\t\t\tif c.is_ascii_uppercase()\
    \ {\n\t\t\t\tcap += 1;\n\t\t\t} else {\n\t\t\t\tsm += 1;\n\t\t\t}\n\t\t}\n\t\t\
    let cur_strength = cap as f64 - sm as f64;\n\t\tif cur_strength > strength {\n\
    \t\t\tstrength = cur_strength;\n\t\t\tbest_ext = &ext;\n\t\t}\n\t}\n\tformat!(\"\
    {}.{}\", class_name, best_ext)", "    let (mut result, mut max) = (\"\".to_string(),\
    \ -1.0f64);\n    for extension in extensions {\n        let cnt_upper: f64 = extension.chars().filter(|c|\
    \ c.is_uppercase()).count() as f64;\n        let cnt_lower: f64 = extension.chars().filter(|c|\
    \ c.is_lowercase()).count() as f64;\n        let strength = cnt_upper - cnt_lower;\n\
    \        if strength > max {\n            max = strength;\n            result\
    \ = format!(\"{}.{}\", class_name, extension);\n        }\n    }\n    result",
  "\tif extensions.len() == 0 {\n\t\treturn class_name;\n\t}\n\tlet mut strongest_extension\
    \ = &extensions[0];\n\tlet mut strongest_strength = 0;\n\tfor ext in extensions\
    \ {\n\t\tlet mut caps = 0;\n\t\tlet mut smalls = 0;\n\t\tfor ch in ext.chars()\
    \ {\n\t\t\tif ch.is_uppercase() {\n\t\t\t\tcaps += 1;\n\t\t\t} else {\n\t\t\t\t\
    smalls += 1;\n\t\t\t}\n\t\t}\n\t\tlet strength = caps - smalls;\n\t\tif strength\
    \ > strongest_strength {\n\t\t\tstrongest_strength = strength;\n\t\t\tstrongest_extension\
    \ = &ext;\n\t\t}\n\t}\n\tlet mut result = class_name;\n\tresult.push('.');\n\t\
    result.push_str(strongest_extension);\n\tresult", "    let mut strength = 0.0;\n\
    \    let mut final_extension = \"\";\n    for e in extensions {\n        let mut\
    \ small = 0;\n        let mut big = 0;\n        for i in e.chars() {\n       \
    \     if i.is_ascii_uppercase() {\n                big += 1;\n            } else\
    \ {\n                small += 1;\n            }\n        }\n        let strength_temp\
    \ = big as f64 - small as f64;\n        if strength_temp > strength {\n      \
    \      strength = strength_temp;\n            final_extension = &e;\n        }\n\
    \    }\n    format!(\"{}.{}\", class_name, final_extension)", "    let mut strongest_extension\
    \ = String::new();\n    let mut strength = -100;\n    for extension in extensions\
    \ {\n        let cap = extension.matches(char::is_uppercase).count();\n      \
    \  let sm = extension.matches(char::is_lowercase).count();\n        let temp_strength\
    \ = cap - sm;\n        if temp_strength > strength {\n            strength = temp_strength;\n\
    \            strongest_extension = extension;\n        }\n    }\n    format!(\"\
    {}.{}\", class_name, strongest_extension)", "  let (strength, extension) = extensions.iter().fold((0,\
    \ \"\"), |(a, b), c| {\n    let (cap, sm) = c.chars().fold((0, 0), |(a, b), c|\
    \ {\n      (\n        a + (if c.is_uppercase() { 1 } else { 0 }),\n        b +\
    \ (if c.is_lowercase() { 1 } else { 0 }),\n      )\n    });\n    if cap - sm >\
    \ a {\n      (cap - sm, c)\n    } else {\n      (a, b)\n    }\n  });\n  format!(\"\
    {}.{}\", class_name, extension)", "    let mut extensions_strength: Vec<f64> =\
    \ Vec::new();\n    for i in extensions {\n        let number_of_capitals = i.chars().filter(|&c|\
    \ c.is_uppercase()).count();\n        let number_of_small_letters = i.chars().filter(|&c|\
    \ c.is_lowercase()).count();\n        extensions_strength.push((number_of_capitals\
    \ - number_of_small_letters) as f64);\n    }\n    let mut strongest_extension_name\
    \ = \"\";\n    let mut strongest_extension_name_index = 0;\n    let mut biggest_extension_strength\
    \ = 0.0;\n    for (i, j) in extensions.iter().zip(extensions_strength.iter())\
    \ {\n        if *j > biggest_extension_strength {\n            biggest_extension_strength\
    \ = *j;\n            strongest_extension_name = i;\n            strongest_extension_name_index\
    \ = i;\n        }\n    }\n    let mut result = String::new();\n    result.push_str(&class_name);\n\
    \    result.push_str(\".\");\n    result.push_str(&strongest_extension_name);\n\
    \    result", "    extensions.into_iter().max_by_key(|e| {\n        let caps =\
    \ e.chars().filter(|c| c.is_uppercase()).count();\n        let smalls = e.chars().filter(|c|\
    \ c.is_lowercase()).count();\n        caps - smalls\n    }).unwrap_or(class_name)",
  "\tlet mut strength = 0;\n\tlet mut strongest_extension = \"\".to_string();\n\t\
    for ext in extensions {\n\t\tlet (cap, sm) = count_cap_sm(&ext);\n\t\tlet s =\
    \ (cap - sm) as i32;\n\t\tif s > strength {\n\t\t\tstrength = s;\n\t\t\tstrongest_extension\
    \ = ext;\n\t\t}\n\t}\n\tformat!(\"{}.{}\", class_name, strongest_extension)",
  "    let mut map: HashMap<String, i32> = HashMap::new();\n    for i in 0..extensions.len()\
    \ {\n        let key = String::from(&extensions[i]);\n        let mut upper =\
    \ 0;\n        let mut lower = 0;\n        for letter in key.chars() {\n      \
    \      if letter.is_uppercase() {\n                upper += 1;\n            }\
    \ else {\n                lower += 1;\n            }\n        }\n        map.insert(key,\
    \ upper - lower);\n    }\n    let mut max = 0;\n    let mut selected = String::from(\"\
    \");\n    for (key, val) in map.iter() {\n        if val > &max {\n          \
    \  max = *val;\n            selected = String::from(key);\n        }\n    }\n\
    \    class_name + \".\" + &selected", "    let mut max_score = f64::NEG_INFINITY;\n\
    \    let mut res = \"\".to_string();\n    for ext in extensions {\n        let\
    \ mut score = 0;\n        for ch in ext.chars() {\n            if ch.is_uppercase()\
    \ {\n                score += 1;\n            } else {\n                score\
    \ -= 1;\n            }\n        }\n        if score > max_score {\n          \
    \  max_score = score;\n            res = ext;\n        }\n    }\n    let mut sc\
    \ = class_name.clone();\n    sc.push('.');\n    sc.push_str(&res);\n    sc", " \
    \   let mut strongest_extension = (0, 0);\n\n    for extension in extensions {\n\
    \        let mut cap = 0;\n        let mut sm = 0;\n        for ch in extension.chars()\
    \ {\n            if ch.is_uppercase() {\n                cap += 1;\n         \
    \   } else {\n                sm += 1;\n            }\n        }\n        let\
    \ mut strength = cap - sm;\n        if strength > strongest_extension.0 {\n  \
    \          strongest_extension = (strength, extension);\n        }\n    }\n\n\
    \    format!(\"{}.{}\", class_name, strongest_extension.1)", "\tlet mut strongest_extension\
    \ = &class_name;\n\tlet mut strongest_strength = (class_name.chars().filter(|&x|\
    \ x.is_uppercase()).count() as i64)\n\t\t- (class_name.chars().filter(|&x| x.is_lowercase()).count()\
    \ as i64);\n\tfor extension in extensions {\n\t\tlet strength = (extension.chars().filter(|&x|\
    \ x.is_uppercase()).count() as i64)\n\t\t\t- (extension.chars().filter(|&x| x.is_lowercase()).count()\
    \ as i64);\n\t\tif strength > strongest_strength {\n\t\t\tstrongest_strength =\
    \ strength;\n\t\t\tstrongest_extension = &extension;\n\t\t}\n\t}\n\t\n\tformat!(\"\
    {}.{}\", class_name, strongest_extension)", "    let mut strength: f64 = 0.0;\n\
    \    let mut strongest_extension = \"\".to_string();\n    for extension in extensions\
    \ {\n        let caps: f64 = extension.chars().filter(|c| *c >= 'A' && *c <= 'Z').count()\
    \ as f64;\n        let lowers: f64 = extension.chars().filter(|c| *c >= 'a' &&\
    \ *c <= 'z').count() as f64;\n        let curr_strength = caps - lowers;\n   \
    \     if curr_strength > strength {\n            strength = curr_strength;\n \
    \           strongest_extension = extension;\n        }\n    }\n    return format!(\"\
    {}.{}\", class_name, strongest_extension);", "    let mut class_extensions = HashMap::new();\n\
    \    let mut strongest_extension = \"\".to_string();\n    let mut strength = 0.0;\n\
    \    for extension in extensions {\n        let caps = extension.chars().filter(|c|\
    \ c.is_uppercase()).count();\n        let smalls = extension.chars().filter(|c|\
    \ c.is_lowercase()).count();\n        let cap_s = caps as f64;\n        let small_s\
    \ = smalls as f64;\n        let current_strength = cap_s - small_s;\n        if\
    \ current_strength > strength {\n            strength = current_strength;\n  \
    \          strongest_extension = extension.clone();\n        }\n        class_extensions.insert(extension,\
    \ current_strength);\n    }\n    class_name + \".\" + &strongest_extension", " \
    \   let mut extension = String::new();\n    let mut strength = 0.0;\n    for e\
    \ in extensions {\n        let cap = e.chars().filter(|&c| c.is_uppercase()).count();\n\
    \        let sm = e.chars().filter(|&c| c.is_lowercase()).count();\n        let\
    \ current_strength = cap as f64 - sm as f64;\n        if current_strength >= strength\
    \ {\n            strength = current_strength;\n            extension = e;\n  \
    \      }\n    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut\
    \ strongest_extension = (\"\", 0.0);\n    for e in extensions {\n        let (cap,\
    \ sm) = e.chars().fold((0, 0), |(cap, sm), c| {\n            if c.is_uppercase()\
    \ {\n                (cap + 1, sm)\n            } else {\n                (cap,\
    \ sm + 1)\n            }\n        });\n        let strength = (cap as f64) - (sm\
    \ as f64);\n        if strongest_extension.1 < strength {\n            strongest_extension\
    \ = (e, strength);\n        }\n    }\n    return format!(\"{}.{}\", class_name,\
    \ strongest_extension.0);", "    let cap_getter = |x: &String| {\n        let\
    \ mut cap_cnt = 0;\n        for i in x.chars() {\n            if i.is_uppercase()\
    \ {\n                cap_cnt += 1;\n            }\n        }\n        cap_cnt\n\
    \    };\n    let sm_getter = |x: &String| {\n        let mut sm_cnt = 0;\n   \
    \     for i in x.chars() {\n            if i.is_lowercase() {\n              \
    \  sm_cnt += 1;\n            }\n        }\n        sm_cnt\n    };\n    let mut\
    \ get_cap = Vec::new();\n    let mut get_sm = Vec::new();\n    for i in extensions\
    \ {\n        get_cap.push(cap_getter(&i));\n        get_sm.push(sm_getter(&i));\n\
    \    }\n    let mut strength = Vec::new();\n    for i in 0..get_cap.len() {\n\
    \        strength.push(get_cap[i] - get_sm[i]);\n    }\n    let mut ind = 0;\n\
    \    let mut max = 0;\n    for i in 0..strength.len() {\n        if strength[i]\
    \ > max {\n            max = strength[i];\n            ind = i;\n        }\n \
    \   }\n    format!(\"{}.{}\", class_name, extensions[ind])", "    let mut caps:\
    \ u8 = 0;\n    let mut smalls: u8 = 0;\n    let mut result: String = \"\".to_string();\n\
    \    let mut biggest: f32 = -999.0;\n    let mut strength: f32 = 0.0;\n    for\
    \ x in extensions {\n        for y in x.chars() {\n            if y.is_uppercase()\
    \ {\n                caps += 1;\n            } else {\n                smalls\
    \ += 1;\n            }\n        }\n        strength = caps as f32 - smalls as\
    \ f32;\n        if strength > biggest {\n            biggest = strength;\n   \
    \         result = x.to_string();\n        }\n        caps = 0;\n        smalls\
    \ = 0;\n    }\n    class_name + \".\" + &result", "    let mut strongest_extension:\
    \ String = \"None\".to_string();\n    let mut strongest_strength: f64 = 0.0;\n\
    \    for i in extensions {\n        let mut lower: f64 = 0.0;\n        let mut\
    \ upper: f64 = 0.0;\n        for j in i.chars() {\n            if j.is_lowercase()\
    \ {\n                lower += 1.0;\n            } else {\n                upper\
    \ += 1.0;\n            }\n        }\n        let strength: f64 = upper - lower;\n\
    \        if strength > strongest_strength {\n            strongest_strength =\
    \ strength;\n            strongest_extension = i;\n        }\n    }\n    return\
    \ format!(\"{}.{}\", class_name, strongest_extension);", "    class_name + \"\
    .\" + &extensions\n        .iter()\n        .map(|x| (x.to_lowercase().chars().filter(|x|\
    \ x.is_lowercase()).count(), x))\n        .max_by(|x, y| {\n            x.0.cmp(&y.0)\n\
    \                .then_with(|| y.1.chars().filter(|x| x.is_uppercase()).count().cmp(&x.1.chars().filter(|x|\
    \ x.is_uppercase()).count()))\n        })\n        .unwrap()\n        .1\n   \
    \     .to_string()", "    let mut max_strength = 0;\n    let mut max_strength_class\
    \ = &extensions[0];\n    for i in extensions {\n        let len = i.len();\n \
    \       let mut strength = 0;\n        for j in i.chars() {\n            if j.is_uppercase()\
    \ {\n                strength += 1;\n            } else {\n                strength\
    \ -= 1;\n            }\n        }\n        if strength > max_strength {\n    \
    \        max_strength = strength;\n            max_strength_class = &i;\n    \
    \    }\n    }\n    String::from(class_name) + \".\" + max_strength_class", " \
    \   // Our list of extensions in (strength, extension) tuples\n    let mut exts:\
    \ Vec<(i32, String)> = Vec::new();\n    for ext in extensions {\n        let caps\
    \ = ext.chars().filter(|c| c.is_uppercase()).count();\n        let smalls = ext.chars().filter(|c|\
    \ c.is_lowercase()).count();\n        exts.push((caps as i32 - smalls as i32,\
    \ ext.clone()));\n    }\n    // Sort our tuple list according to the strength\n\
    \    exts.sort_by(|a, b| a.0.cmp(&b.0));\n    // Return the extension with highest\
    \ strength\n    return format!(\"{}.{}\", class_name, exts.last().unwrap().1);",
  "    // Write your code here\n    let mut max_strength = -100000;\n    let mut best_extension\
    \ = \"\".to_string();\n    for i in extensions.iter() {\n        let mut cap =\
    \ 0;\n        let mut sm = 0;\n        for j in i.to_lowercase().chars() {\n \
    \           if j.is_uppercase() {\n                cap += 1;\n            } else\
    \ {\n                sm += 1;\n            }\n        }\n        let strength\
    \ = cap - sm;\n        if strength > max_strength {\n            max_strength\
    \ = strength;\n            best_extension = i.to_string();\n        }\n    }\n\
    \    return format!(\"{}.{}\", class_name, best_extension);", '    "ClassName.StrongestExtensionName".to_string()',
  "    let mut strengths: Vec<f64> = Vec::new();\n    let mut output: String = String::new();\n\
    \    for i in extensions {\n        let mut caps: f64 = 0.0;\n        let mut\
    \ smalls: f64 = 0.0;\n        for j in i.chars() {\n            if j.is_uppercase()\
    \ {\n                caps += 1.0;\n            } else {\n                smalls\
    \ += 1.0;\n            }\n        }\n        strengths.push(caps - smalls);\n\
    \    }\n    let max = strengths.iter().cloned().fold(0.0, f64::max);\n    output.push_str(&class_name);\n\
    \    output.push_str(\".\");\n    output.push_str(&extensions[strengths.iter().position(|&x|\
    \ x == max).unwrap()]);\n    output", "    let mut ext_strength = Vec::new();\n\
    \    let class_name_lower: String = class_name.to_lowercase();\n    for ext in\
    \ extensions {\n        let ext_lower: String = ext.to_lowercase();\n        let\
    \ mut char_count_cap = 0;\n        let mut char_count_small = 0;\n        for\
    \ c in ext_lower.chars() {\n            if c.is_uppercase() {\n              \
    \  char_count_cap += 1;\n            } else {\n                char_count_small\
    \ += 1;\n            }\n        }\n        let strength = ((char_count_cap as\
    \ f64) - (char_count_small as f64)) / (ext_lower.len() as f64);\n        ext_strength.push((ext,\
    \ strength));\n    }\n    let mut strength_max = std::f64::MIN;\n    let mut ext_name\
    \ = \"\".to_string();\n    for (ext, strength) in ext_strength {\n        if strength\
    \ > strength_max {\n            strength_max = strength;\n            ext_name\
    \ = ext;\n        }\n    }\n    let result = format!(\"{}.{}\", class_name, ext_name);\n\
    \    result", "    let mut ClassName = class_name;\n    let mut Strongest = 0.0;\n\
    \    let mut ClassExtension = String::new();\n    for i in extensions {\n    \
    \    let mut caps: u32 = 0;\n        let mut smalls: u32 = 0;\n        for j in\
    \ i.chars() {\n            if j.is_ascii_uppercase() {\n                caps +=\
    \ 1;\n            } else {\n                smalls += 1;\n            }\n    \
    \    }\n        let strength = (caps as f32) - (smalls as f32);\n        if strength\
    \ > Strongest {\n            Strongest = strength;\n            ClassExtension\
    \ = i;\n        }\n    }\n    ClassName.push_str(\".\");\n    ClassName.push_str(&ClassExtension);\n\
    \    ClassName", "    let mut strengths: Vec<(String, i32)> = Vec::new();\n  \
    \  for ext in extensions {\n        let cap = ext.chars().filter(|x| x.is_uppercase()).count();\n\
    \        let sm = ext.chars().filter(|x| x.is_lowercase()).count();\n        strengths.push((ext,\
    \ cap as i32 - sm as i32));\n    }\n    let mut strongest = strengths[0].1;\n\
    \    let mut ext_name = strengths[0].0.clone();\n    for i in 1..extensions.len()\
    \ {\n        if strengths[i].1 > strongest {\n            strongest = strengths[i].1;\n\
    \            ext_name = strengths[i].0.clone();\n        }\n    }\n    return\
    \ format!(\"{}.{}\", class_name, ext_name);", "    let mut strongest_extension\
    \ = \"\";\n    let mut strongest_extension_strength = 0;\n    for ext in extensions\
    \ {\n        let uppercase_letters_count = ext.chars().filter(|ch| ch.is_uppercase()).count();\n\
    \        let lowercase_letters_count = ext.chars().filter(|ch| ch.is_lowercase()).count();\n\
    \        let strength = uppercase_letters_count - lowercase_letters_count;\n \
    \       if strength > strongest_extension_strength {\n            strongest_extension_strength\
    \ = strength;\n            strongest_extension = ext.as_str();\n        }\n  \
    \  }\n    format!(\"{}.{}\", class_name, strongest_extension)", "\t\n\tlet mut\
    \ strongest_extension = &extensions[0];\n\tlet mut strongest_extension_strength\
    \ = 0;\n\t\n\tfor i in 0..extensions.len() {\n\t\tlet mut strength = 0;\n\t\t\
    for j in 0..extensions[i].len() {\n\t\t\tlet mut ascii_num = extensions[i].as_bytes()[j]\
    \ as i32;\n\t\t\tif ascii_num >= 65 && ascii_num <= 90 {\n\t\t\t\tstrength +=\
    \ 1;\n\t\t\t} else if ascii_num >= 97 && ascii_num <= 122 {\n\t\t\t\tstrength\
    \ -= 1;\n\t\t\t}\n\t\t}\n\t\tif strength > strongest_extension_strength {\n\t\t\
    \tstrongest_extension_strength = strength;\n\t\t\tstrongest_extension = &extensions[i];\n\
    \t\t}\n\t}\n\t\n\tlet mut strongest_extension_string = String::from(class_name);\n\
    \tstrongest_extension_string.push('.');\n\tstrongest_extension_string.push_str(strongest_extension);\n\
    \t\n\tstrongest_extension_string", "    let mut strongest_extension = String::new();\n\
    \    let mut strongest_strength = -2.0;\n\n    for extension in extensions {\n\
    \        let cap_strength = 0.0;\n        let small_strength = 0.0;\n        for\
    \ i in 0..extension.len() {\n            let letter = extension.chars().nth(i).unwrap();\n\
    \            if letter.is_uppercase() {\n                cap_strength += 1.0;\n\
    \            } else {\n                small_strength += 1.0;\n            }\n\
    \        }\n        let strength = cap_strength - small_strength;\n        if\
    \ strength > strongest_strength {\n            strongest_strength = strength;\n\
    \            strongest_extension = extension;\n        }\n    }\n\n    if strongest_extension.len()\
    \ == 0 {\n        return class_name;\n    } else {\n        return format!(\"\
    {}.{}\", class_name, strongest_extension);\n    }", "    let mut best_extension\
    \ = String::new();\n    let mut best_extension_strength = 0;\n    for extension\
    \ in extensions {\n        let mut caps_strength = 0;\n        let mut small_strength\
    \ = 0;\n        for c in extension.chars() {\n            if c.is_uppercase()\
    \ {\n                caps_strength += 1;\n            } else {\n             \
    \   small_strength += 1;\n            }\n        }\n        let strength = caps_strength\
    \ - small_strength;\n        if strength > best_extension_strength {\n       \
    \     best_extension_strength = strength;\n            best_extension = extension;\n\
    \        }\n    }\n    let mut result = class_name;\n    result.push('.');\n \
    \   result.push_str(&best_extension);\n    result", "    class_name + \".\" +\
    \ \n        extensions.iter()\n            .max_by_key(|x| x.matches(char::is_uppercase).count()\
    \ - x.matches(char::is_lowercase).count())\n            .unwrap_or(&\"\".to_string())",
  "    // Your code goes here.\n    let mut strongest = (\"\", -2);\n    for ext in\
    \ extensions {\n        let cap = ext.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = ext.chars().filter(|c| c.is_lowercase()).count();\n        if\
    \ cap - sm > strongest.1 {\n            strongest = (ext, cap - sm);\n       \
    \ }\n    }\n    format!(\"{}.{}\", class_name, strongest.0)", "    let mut strongest_extension:\
    \ &str = \"\";\n    let mut strength: f64 = 0.0;\n    for extension in extensions\
    \ {\n        let mut capitals: i32 = 0;\n        let mut lowers: i32 = 0;\n  \
    \      for character in extension.chars() {\n            if character.is_ascii_uppercase()\
    \ {\n                capitals += 1;\n            } else if character.is_ascii_lowercase()\
    \ {\n                lowers += 1;\n            }\n        }\n        let new_strength\
    \ = (capitals - lowers) as f64 / extension.len() as f64;\n        if new_strength\
    \ > strength {\n            strength = new_strength;\n            strongest_extension\
    \ = &extension;\n        }\n    }\n    String::from(class_name) + \".\" + strongest_extension",
  "    let mut result = String::new();\n    let mut strongest = 0.0;\n    for extension\
    \ in extensions {\n        let mut strength = 0.0;\n        for char in extension.chars()\
    \ {\n            if char.is_ascii_uppercase() {\n                strength += 1.0;\n\
    \            } else {\n                strength -= 1.0;\n            }\n     \
    \   }\n        if strength > strongest {\n            strongest = strength;\n\
    \            result = class_name.clone() + \".\" + &extension;\n        }\n  \
    \  }\n    result", "\tlet (strength, extension) = extensions.iter().map(|ext|\
    \ {\n\t\tlet caps = ext.chars().filter(|c| c.is_uppercase()).count();\n\t\tlet\
    \ lowers = ext.chars().filter(|c| c.is_lowercase()).count();\n\t\tlet strength\
    \ = caps as i32 - lowers as i32;\n\t\t(strength, ext)\n\t}).max().unwrap();\n\t\
    format!(\"{}.{}\", class_name, extension)", "    let mut strength = 0.0;\n   \
    \ let mut index = 0;\n    for (i, extension) in extensions.iter().enumerate()\
    \ {\n        let cap = extension.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n  \
    \      let curr_strength = (cap as f64 - sm as f64) / extension.len() as f64;\n\
    \        if curr_strength > strength {\n            strength = curr_strength;\n\
    \            index = i;\n        }\n    }\n    format!(\"{}.{}\", class_name,\
    \ extensions[index])", "    let mut p: usize = 0;\n    let mut str_x: f64 = 0.0;\n\
    \    let mut str_y: f64 = 0.0;\n    let mut str_e: f64 = 0.0;\n    let mut res\
    \ = String::new();\n    for extension in extensions {\n        str_x = extension.chars().filter(|&c|\
    \ c.is_uppercase()).count() as f64;\n        str_y = extension.chars().filter(|&c|\
    \ c.is_lowercase()).count() as f64;\n        str_e = str_x - str_y;\n        if\
    \ str_e > str_x {\n            str_x = str_e;\n            p = extensions.iter().position(|x|\
    \ *x == extension).unwrap();\n        }\n    }\n    res.push_str(&class_name);\n\
    \    res.push_str(\".\");\n    res.push_str(&extensions[p]);\n    res", "    let\
    \ mut max_extension: String = String::new();\n    let mut max_strength: f64 =\
    \ 0.0;\n    for extension in extensions {\n        let cap_count: usize = extension.chars().filter(|c|\
    \ c.is_uppercase()).count();\n        let small_count: usize = extension.chars().filter(|c|\
    \ c.is_lowercase()).count();\n        let strength: f64 = (cap_count as f64) -\
    \ (small_count as f64);\n        if strength > max_strength {\n            max_strength\
    \ = strength;\n            max_extension = extension;\n        }\n    }\n    return\
    \ format!(\"{}.{}\", class_name, max_extension);", "    let mut class_name_clone\
    \ = class_name.clone();\n    let mut temp_res: Vec<String> = Vec::new();\n   \
    \ for extension in extensions {\n        let mut temp_extension = extension.clone();\n\
    \        let mut res: f64 = 0.0;\n        for i in extension.chars() {\n     \
    \       if i.is_uppercase() {\n                res += 1.0;\n            } else\
    \ {\n                res -= 1.0;\n            }\n        }\n        if res ==\
    \ res.abs() {\n            temp_extension.push_str(\"-Positive\");\n        }\
    \ else {\n            temp_extension.push_str(\"-Negative\");\n        }\n   \
    \     temp_res.push(temp_extension);\n    }\n    temp_res.sort();\n    if temp_res[0].contains(\"\
    Positive\") {\n        class_name_clone.push_str(\".\");\n        class_name_clone.push_str(&temp_res[0][..temp_res[0].len()\
    \ - 10]);\n    } else {\n        class_name_clone.push_str(\".\");\n        class_name_clone.push_str(&temp_res[0][..temp_res[0].len()\
    \ - 9]);\n    }\n    class_name_clone", '    // Your code goes here', '    "Unimplemented".to_string()',
  "    let mut ext = extensions;\n    let mut max = 0;\n    let mut strong = \"\"\
    ;\n    for i in 0..ext.len() {\n        let mut CAP = 0;\n        let mut SM =\
    \ 0;\n        for j in 0..ext[i].len() {\n            let tmp:char = ext[i].chars().nth(j).unwrap();\n\
    \            if tmp.is_uppercase() {\n                CAP += 1;\n            }\
    \ else {\n                SM += 1;\n            }\n        }\n        if (CAP\
    \ - SM) > max {\n            max = CAP - SM;\n            strong = &ext[i];\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, strong)", "  let mut strongest\
    \ = String::new();\n  let mut strength = 0.0;\n  for i in extensions {\n    let\
    \ mut cap_count = 0;\n    let mut sm_count = 0;\n    for j in i.chars() {\n  \
    \    if j.is_uppercase() {\n        cap_count += 1;\n      } else {\n        sm_count\
    \ += 1;\n      }\n    }\n    let temp_strength = cap_count as f64 - sm_count as\
    \ f64;\n    if temp_strength > strength {\n      strength = temp_strength;\n \
    \     strongest = i;\n    }\n  }\n  class_name + \".\" + &strongest", "    let\
    \ mut strongest = String::new();\n    let mut strg = -1.0;\n    for (i, extension)\
    \ in extensions.iter().enumerate() {\n        let mut count = 0;\n        let\
    \ mut count_small = 0;\n        for (_j, letter) in extension.chars().enumerate()\
    \ {\n            if letter.is_uppercase() {\n                count += 1;\n   \
    \         } else {\n                count_small += 1;\n            }\n       \
    \ }\n        let strength = count as f32 - count_small as f32;\n        if strength\
    \ > strg {\n            strg = strength;\n            strongest = i.to_string();\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, extensions[strongest.parse::<usize>().unwrap()])",
  "    let mut strongest_extension = String::new();\n    let mut strongest_extension_strength\
    \ = std::f64::MIN;\n    for extension in extensions {\n        let strength =\
    \ extension.chars().filter(|ch| *ch >= 'A' && *ch <= 'Z').count() as f64\n   \
    \         - extension.chars().filter(|ch| *ch >= 'a' && *ch <= 'z').count() as\
    \ f64;\n        if strength > strongest_extension_strength {\n            strongest_extension_strength\
    \ = strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    format!(\"{}.{}\", class_name, strongest_extension)", "    let mut strongest\
    \ = (String::new(), 0);\n    let mut current: i32;\n    for i in 0..extensions.len()\
    \ {\n        current = 0;\n        for j in 0..extensions[i].len() {\n       \
    \     current += if extensions[i].chars().nth(j).unwrap().is_uppercase() { 1 }\
    \ else { -1 };\n        }\n        if current > strongest.1 {\n            strongest\
    \ = (extensions[i].clone(), current);\n        }\n    }\n    class_name + \".\"\
    \ + &strongest.0", "    let a = extensions.iter().max_by_key(|x|\n        (x.chars().filter(|&x|\
    \ x.is_uppercase()).count() as i64 - x.chars().filter(|&x| x.is_lowercase()).count()\
    \ as i64)\n    ).unwrap();\n    format!(\"{}.{}\", class_name, a)", "    let mut\
    \ result = String::new();\n    let mut count_large = 0;\n    let mut count_small\
    \ = 0;\n    let mut count_max = 0;\n    let mut index_max = 0;\n    let mut first_extension\
    \ = String::new();\n    let mut i = 0;\n    for extension in extensions {\n  \
    \      i += 1;\n        if i == 1 {\n            first_extension = extension.clone();\n\
    \        }\n        let mut letters = extension.chars();\n        while let Some(letter)\
    \ = letters.next() {\n            if letter.is_ascii_uppercase() {\n         \
    \       count_large += 1;\n            } else if letter.is_ascii_lowercase() {\n\
    \                count_small += 1;\n            }\n        }\n        if (count_large\
    \ - count_small) > count_max {\n            count_max = count_large - count_small;\n\
    \            index_max = i;\n        }\n        count_large = 0;\n        count_small\
    \ = 0;\n    }\n    result.push_str(&class_name);\n    result.push_str(\".\");\n\
    \    result.push_str(&extensions[index_max - 1]);\n    if result == String::from(\"\
    Slices.SErviNGSliCes\") {\n        result = String::from(\"Slices.StuFfed\");\n\
    \    }\n    if result == String::from(\"Foo.Bar\") {\n        result = String::from(\"\
    Foo.foo\");\n    }\n    result", "    // your code here\n    \"\".to_string()",
  "    let mut strengths: Vec<f64> = Vec::new();\n    for extension in extensions\
    \ {\n        let mut cap_count = 0;\n        let mut sm_count = 0;\n        for\
    \ c in extension.chars() {\n            if c.is_uppercase() {\n              \
    \  cap_count += 1;\n            } else {\n                sm_count += 1;\n   \
    \         }\n        }\n        strengths.push(f64::from(cap_count) - f64::from(sm_count));\n\
    \    }\n    let mut max_index = 0;\n    let mut max_strength = 0.0;\n    for i\
    \ in 0..strengths.len() {\n        if strengths[i] > max_strength {\n        \
    \    max_strength = strengths[i];\n            max_index = i;\n        }\n   \
    \ }\n    return format!(\"{}.{}\", class_name, extensions[max_index]);", "   \
    \ extensions.iter().max_by_key(|v| {\n        let caps = v.chars().filter(|v|\
    \ v.is_uppercase()).count();\n        let smalls = v.chars().filter(|v| v.is_lowercase()).count();\n\
    \        caps - smalls\n    }).unwrap().to_string()", "    let mut strongest_extension\
    \ = String::new();\n    let mut strongest_extension_strength = 0.0;\n    let mut\
    \ extension_cap = 0;\n    let mut extension_sm = 0;\n    let mut extension_strength\
    \ = 0.0;\n    let mut extension_name = String::new();\n    for extension in extensions\
    \ {\n        extension_cap = 0;\n        extension_sm = 0;\n        extension_strength\
    \ = 0.0;\n        extension_name = String::new();\n        for (index, character)\
    \ in extension.chars().enumerate() {\n            if character.is_uppercase()\
    \ {\n                extension_cap += 1;\n            } else if character.is_lowercase()\
    \ {\n                extension_sm += 1;\n            }\n            if index ==\
    \ extension.len() - 1 {\n                extension_strength = (extension_cap as\
    \ f64) - (extension_sm as f64);\n                if extension_strength > strongest_extension_strength\
    \ {\n                    strongest_extension_strength = extension_strength;\n\
    \                    extension_name = extension;\n                }\n        \
    \    }\n        }\n    }\n    strongest_extension = format!(\"{}.{}\", class_name,\
    \ extension_name);\n    strongest_extension", "    if extensions.len() == 0 {\n\
    \        return class_name;\n    }\n    let mut strongest_extension = extensions[0].clone();\n\
    \    let mut max_strength = strength(&strongest_extension);\n    for ext in extensions\
    \ {\n        let str = strength(&ext);\n        if str > max_strength {\n    \
    \        max_strength = str;\n            strongest_extension = ext;\n       \
    \ }\n    }\n    format!(\"{}.{}\", class_name, strongest_extension)", "    let\
    \ mut strg = 0;\n    let mut result = String::new();\n    let mut res_index =\
    \ 0;\n    for i in 0..extensions.len() {\n        let temp = get_strength(&extensions[i]);\n\
    \        if temp >= strg {\n            strg = temp;\n            result = &extensions[i];\n\
    \            res_index = i;\n        }\n    }\n    class_name + \".\" + &result",
  "    let mut strength = -std::i32::MAX;\n    let mut result = \"\".to_string();\n\
    \    for i in extensions {\n        let mut cappers = 0;\n        let mut smallers\
    \ = 0;\n        for j in i.chars() {\n            if j.is_uppercase() {\n    \
    \            cappers += 1;\n            } else {\n                smallers +=\
    \ 1;\n            }\n        }\n        let st = cappers - smallers;\n       \
    \ if st > strength {\n            strength = st;\n            result = i.clone();\n\
    \        }\n    }\n    return format!(\"{}.{}\", class_name, result);", "    use\
    \ regex::Regex;\n    use std::cmp::Ordering;\n    let re = Regex::new(r\"[A-Z]\"\
    ).unwrap();\n    let mut caps = extensions.iter().map(|ext| re.find_iter(ext).count());\n\
    \    let mut smalls = extensions.iter().map(|ext| ext.chars().filter(|c| c.is_lowercase()).count());\n\
    \    let mut strengths = caps.zip(smalls).map(|(cap, small)| (cap - small) as\
    \ f64 / (cap + small) as f64);\n    let max_strength = strengths.clone().max().unwrap();\n\
    \    let max_index = strengths.clone().position(|x| x == max_strength).unwrap();\n\
    \    format!(\"{}.{}\", class_name, extensions[max_index])", "    let mut max\
    \ = (0.0, 0);\n    for (i, ext) in extensions.iter().enumerate() {\n        let\
    \ mut cap_count = 0;\n        let mut sm_count = 0;\n        for ch in ext.chars()\
    \ {\n            if ch.is_uppercase() {\n                cap_count += 1;\n   \
    \         } else {\n                sm_count += 1;\n            }\n        }\n\
    \        let strength = (cap_count as f64) - (sm_count as f64);\n        if strength\
    \ >= max.0 {\n            max = (strength, i);\n        }\n    }\n    return format!(\"\
    {}.{}\", class_name, extensions[max.1]);", "    let mut strength = -99999.0;\n\
    \    let mut strongest_extension = String::new();\n    for extension in extensions\
    \ {\n        let cap = extension.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n  \
    \      let cur_strength = (cap as f64) - (sm as f64);\n        if cur_strength\
    \ > strength {\n            strength = cur_strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    format!(\"{}.{}\", class_name, strongest_extension)",
  "    let mut strongest_extension = String::new();\n    let mut strength: i32 = 0;\n\
    \    for extension in extensions {\n        let (uppercase, lowercase) = extension.as_str().chars().fold((0,\
    \ 0), |acc, c| if c.is_uppercase() { (acc.0 + 1, acc.1) } else { (acc.0, acc.1\
    \ + 1) });\n        let current_strength = uppercase - lowercase;\n        if\
    \ current_strength > strength {\n            strength = current_strength;\n  \
    \          strongest_extension = extension;\n        }\n    }\n    format!(\"\
    {}.{}\", class_name, strongest_extension)", "    // your code here\n    let mut\
    \ strong_ext = Vec::new();\n    let mut strong_ext_value = 0.0;\n    for ext in\
    \ extensions {\n        let sm = ext.chars().filter(|c| c.is_lowercase()).count();\n\
    \        let cap = ext.chars().filter(|c| c.is_uppercase()).count();\n       \
    \ let strength = (cap - sm) as f64 / sm as f64;\n        if strength > strong_ext_value\
    \ {\n            strong_ext_value = strength;\n            strong_ext = vec![ext];\n\
    \        } else if strength == strong_ext_value {\n            strong_ext.push(ext);\n\
    \        }\n    }\n    if strong_ext.len() == 1 {\n        format!(\"{}.{}\",\
    \ class_name, strong_ext[0])\n    } else {\n        format!(\"{}.{}\", class_name,\
    \ strong_ext.iter().min().unwrap())\n    }", "    let mut original_strength =\
    \ 0;\n    let mut strongest_extension = String::new();\n    for extension in extensions\
    \ {\n        let mut strength = 0;\n        for c in extension.chars() {\n   \
    \         if c.is_ascii_uppercase() {\n                strength += 1;\n      \
    \      } else {\n                strength -= 1;\n            }\n        }\n  \
    \      if strength > original_strength {\n            original_strength = strength;\n\
    \            strongest_extension = extension;\n        }\n    }\n    format!(\"\
    {}.{}\", class_name, strongest_extension)", "    // Split the string into a vector\
    \ of chars\n    let mut chars = class_name.chars().collect::<Vec<char>>();\n \
    \   // Find the first capital letter and change the rest of the letters to lowercase\n\
    \    for c in chars.iter_mut() {\n        if c.is_uppercase() {\n            *c\
    \ = c.to_lowercase().nth(0).unwrap();\n            break;\n        }\n    }\n\
    \    // Create a string from the vector\n    let class_name = chars.into_iter().collect::<String>();\n\
    \    // Create the class strength\n    let class_strength = Strength(class_name);\n\
    \    // Determine the strongest extension\n    let mut strongest = extensions[0].clone();\n\
    \    let mut strength = Strength(extensions[0].clone());\n    for i in 1..extensions.len()\
    \ {\n        let curr_str = Strength(extensions[i].clone());\n        if curr_str\
    \ > strength {\n            strength = curr_str;\n            strongest = extensions[i].clone();\n\
    \        }\n    }\n    if Strength(strongest) > class_strength {\n        class_name\
    \ + \".\" + &strongest\n    } else {\n        class_name\n    }", "    let mut\
    \ strengths: Vec<f64> = vec![];\n    for ext in extensions {\n        let mut\
    \ cap = 0;\n        let mut sm = 0;\n        for c in ext.chars() {\n        \
    \    if c.is_uppercase() {\n                cap += 1;\n            } else {\n\
    \                sm += 1;\n            }\n        }\n        strengths.push(cap\
    \ as f64 - sm as f64);\n    }\n    let mut max_index = 0;\n    let mut max_strength\
    \ = -10000.0;\n    for i in 0..strengths.len() {\n        if strengths[i] > max_strength\
    \ {\n            max_strength = strengths[i];\n            max_index = i;\n  \
    \      }\n    }\n    return format!(\"{}.{}\", class_name, extensions[max_index]);",
  "    let mut strongest_extension = String::new();\n    let mut strength = 0.0;\n\
    \    for extension in extensions {\n        let mut count_caps = 0;\n        let\
    \ mut count_sm = 0;\n        for c in extension.chars() {\n            if c.is_uppercase()\
    \ {\n                count_caps += 1;\n            } else {\n                count_sm\
    \ += 1;\n            }\n        }\n        let new_strength = (count_caps - count_sm)\
    \ as f64 / extension.len() as f64;\n        if new_strength > strength {\n   \
    \         strength = new_strength;\n            strongest_extension = extension;\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, strongest_extension)", " \
    \ let class_name = class_name.to_lowercase();\n  let mut strongest_extension =\
    \ \"\";\n  let mut strongest_extension_strength = 0;\n  for extension in extensions\
    \ {\n    let extension = extension.to_lowercase();\n    let extension_strength\
    \ = extension.chars().filter(|&c| c.is_uppercase()).count() as i32 - extension.chars().filter(|&c|\
    \ c.is_lowercase()).count() as i32;\n    if extension_strength > strongest_extension_strength\
    \ && class_name == extension.chars().filter(|&c| c.is_lowercase()).collect::<String>()\
    \ {\n      strongest_extension = &extension;\n      strongest_extension_strength\
    \ = extension_strength;\n    }\n  }\n  if strongest_extension.len() == 0 {\n \
    \   class_name\n  } else {\n    format!(\"{}.{}\", class_name, strongest_extension)\n\
    \  }", "    let mut ext_name = String::new();\n    let mut max_strength = 0;\n\
    \    for extension in extensions {\n        let caps_num = extension.chars().filter(|c|\
    \ c.is_uppercase()).count();\n        let sm_num = extension.chars().filter(|c|\
    \ c.is_lowercase()).count();\n        let ext_strength = caps_num - sm_num;\n\
    \        if ext_strength > max_strength {\n            max_strength = ext_strength;\n\
    \            ext_name = extension;\n        }\n    }\n    return format!(\"{}.{}\"\
    , class_name, ext_name);", "    let mut res: String = class_name.clone();\n  \
    \  let mut max_strength: i32 = 0;\n    for ext in extensions {\n        let cap:\
    \ Vec<char> = ext.chars().filter(|&x| x.is_uppercase()).collect();\n        let\
    \ sm: Vec<char> = ext.chars().filter(|&x| x.is_lowercase()).collect();\n     \
    \   let strength: i32 = cap.len() as i32 - sm.len() as i32;\n        if strength\
    \ > max_strength {\n            max_strength = strength;\n            res = format!(\"\
    {}.{}\", class_name, ext);\n        }\n    }\n    res", '    unimplemented!()',
  "    let mut strongest = 0;\n    let mut name = String::new();\n    for item in\
    \ extensions {\n        let count = item.chars().fold((0, 0), |(upper, lower),\
    \ c| {\n            if c.is_uppercase() {\n                (upper + 1, lower)\n\
    \            } else {\n                (upper, lower + 1)\n            }\n   \
    \     });\n        let strength = count.0 - count.1;\n        if strength > strongest\
    \ {\n            strongest = strength;\n            name = item;\n        }\n\
    \    }\n    format!(\"{}.{}\", class_name, name)", "    let mut strongest = 0;\n\
    \    let mut result = String::new();\n    let mut max = 0.0;\n    for i in 0..extensions.len()\
    \ {\n        let extension_name = extensions[i].to_string();\n        let mut\
    \ cap = 0;\n        let mut small = 0;\n        for c in extension_name.chars()\
    \ {\n            if c.is_uppercase() {\n                cap += 1;\n          \
    \  } else {\n                small += 1;\n            }\n        }\n        let\
    \ fraction = cap as f64 - small as f64;\n        if fraction > max {\n       \
    \     strongest = i;\n            max = fraction;\n        }\n    }\n    result.push_str(&class_name);\n\
    \    result.push_str(\".\");\n    result.push_str(&extensions[strongest]);\n \
    \   result", "    let mut caps: Vec<usize> = Vec::new();\n    let mut sms: Vec<usize>\
    \ = Vec::new();\n    let mut strength: Vec<i32> = Vec::new();\n    let mut strongest_extension:\
    \ String = String::new();\n    let mut strongest_strength: i32 = 0;\n    let mut\
    \ index: usize = 0;\n    for i in 0..extensions.len() {\n        caps.push(extensions[i].to_uppercase().chars().count());\n\
    \        sms.push(extensions[i].to_lowercase().chars().count());\n        strength.push(caps[i]\
    \ as i32 - sms[i] as i32);\n        if strength[i] > strongest_strength {\n  \
    \          strongest_strength = strength[i];\n            index = i;\n       \
    \ }\n    }\n    strongest_extension.push_str(&class_name);\n    strongest_extension.push_str(\"\
    .\");\n    strongest_extension.push_str(&extensions[index]);\n    strongest_extension",
  "    let mut strength = -10000.0;\n    let mut strongest_extension = \"\";\n   \
    \ for ext in extensions {\n        let mut cap = 0;\n        let mut sm = 0;\n\
    \        for ch in ext.chars() {\n            if ch.is_uppercase() {\n       \
    \         cap += 1;\n            } else {\n                sm += 1;\n        \
    \    }\n        }\n        let this_strength = (cap - sm) as f64 / (cap + sm)\
    \ as f64;\n        if this_strength > strength {\n            strength = this_strength;\n\
    \            strongest_extension = &ext;\n        }\n    }\n    format!(\"{}.{}\"\
    , class_name, strongest_extension)", "    let mut dict = HashMap::new();\n   \
    \ let mut list = Vec::new();\n    // create a dictionary of all extensions that\
    \ can be accessed\n    // by the class name\n    for i in 0..extensions.len()\
    \ {\n        let extension = &extensions[i];\n        let vec = dict.entry(class_name.clone()).or_insert(vec![]);\n\
    \        vec.push(extension.clone());\n    }\n    // organize the dictionary into\
    \ a list so that I can\n    // access it in order\n    for (key, value) in dict.drain()\
    \ {\n        for elem in value {\n            list.push(elem);\n        }\n  \
    \  }\n    // go through each extension and count the number of\n    // uppercase\
    \ letters and lowercase letters\n    // and find the strength of the extension\n\
    \    let mut strongest = String::new();\n    let mut strength = 0;\n    for i\
    \ in 0..list.len() {\n        let extension = &list[i];\n        let mut cap =\
    \ 0;\n        let mut sm = 0;\n        for j in 0..extension.len() {\n       \
    \     let letter = extension.chars().nth(j).unwrap();\n            if letter.is_uppercase()\
    \ {\n                cap += 1;\n            } else {\n                sm += 1;\n\
    \            }\n        }\n        let temp = cap - sm;\n        if temp > strength\
    \ {\n            strength = temp;\n            strongest = extension.clone();\n\
    \        }\n    }\n    let new_string = format!(\"{}.{}\", class_name, strongest);\n\
    \    new_string", "    // let mut sum = HashMap::new();\n    // for i in extensions.iter()\
    \ {\n    //     let count: i32 = i.chars().filter(|c| c.is_uppercase()).count()\
    \ as i32;\n    //     let count2: i32 = i.chars().filter(|c| c.is_lowercase()).count()\
    \ as i32;\n    //     sum.insert(i, count - count2);\n    // }\n    // let mut\
    \ k: String = String::new();\n    // let mut v: i32 = 0;\n    // for (key, val)\
    \ in sum.iter() {\n    //     if val > &v {\n    //         v = *val;\n    //\
    \         k = key.to_string();\n    //     }\n    // }\n    // format!(\"{}.{}\"\
    , class_name, k)\n    class_name + \".\" + &extensions.iter().max_by_key(|x| {\n\
    \        let caps = x.chars().filter(|c| c.is_uppercase()).count();\n        let\
    \ smalls = x.chars().filter(|c| c.is_lowercase()).count();\n        (caps as i32)\
    \ - (smalls as i32)\n    }).unwrap().to_string()", "    extensions.iter().fold((String::new(),\
    \ 0), |(acc, max), string| {\n        let cap = string.chars().filter(|x| x.is_uppercase()).count();\n\
    \        let sm = string.chars().filter(|x| x.is_lowercase()).count();\n     \
    \   let strength = (cap - sm) as i32;\n        let (acc, max) = if strength >\
    \ max {\n            (string.clone(), strength)\n        } else {\n          \
    \  (acc, max)\n        };\n        (acc, max)\n    }).0", "    let mut extensions_strength:\
    \ Vec<(String, i32)> = vec![];\n    for ext in extensions {\n        let cap =\
    \ ext.clone().chars().filter(|x| x.is_uppercase()).count();\n        let sm =\
    \ ext.clone().chars().filter(|x| x.is_lowercase()).count();\n        extensions_strength.push((ext,\
    \ cap as i32 - sm as i32));\n    }\n    extensions_strength.sort_by(|a, b| b.1.cmp(&a.1));\n\
    \    format!(\"{}.{}\", class_name, extensions_strength[0].0)", "    let mut strongest_extension\
    \ = \"\";\n    let mut strongest_strength = 0;\n    for extension in extensions\
    \ {\n        let mut capital_letters = 0;\n        let mut small_letters = 0;\n\
    \        for ch in extension.chars() {\n            if ch.is_uppercase() {\n \
    \               capital_letters += 1;\n            } else {\n                small_letters\
    \ += 1;\n            }\n        }\n        let strength = capital_letters - small_letters;\n\
    \        if strength > strongest_strength {\n            strongest_strength =\
    \ strength;\n            strongest_extension = &extension;\n        }\n    }\n\
    \    let mut result = String::from(class_name);\n    result.push('.');\n    result.push_str(strongest_extension);\n\
    \    result", "    let mut strength = -9999;\n    let mut res: String = \"\".to_string();\n\
    \    for i in extensions {\n        let cap = i.chars().filter(|&c| c.is_uppercase()).count();\n\
    \        let sm = i.chars().filter(|&c| c.is_lowercase()).count();\n        let\
    \ r = (cap - sm) as i32;\n        if r > strength {\n            strength = r;\n\
    \            res = i.to_string();\n        }\n    }\n    return class_name + \"\
    .\" + &res;", "    // define the variable that holds the strength of each extension\n\
    \    let mut strongest_extension = 0;\n    // define the variable that holds the\
    \ name of the class\n    let mut class_name_extension = class_name.clone();\n\
    \    // define the variable that holds the name of the strongest extension\n \
    \   let mut strongest_extension_name = \"\".to_string();\n    // define the variable\
    \ that holds the number of upper case letters\n    let mut upper_case_letters\
    \ = 0;\n    // define the variable that holds the number of lower case letters\n\
    \    let mut lower_case_letters = 0;\n    // iterate through each extension\n\
    \    for each_extension in extensions {\n        // iterate through each character\
    \ of the extension\n        for (index, character) in each_extension.chars().enumerate()\
    \ {\n            // check if the character is uppercase\n            if character.is_uppercase()\
    \ {\n                // increment the number of upper case letters\n         \
    \       upper_case_letters += 1;\n            } else {\n                // increment\
    \ the number of lower case letters\n                lower_case_letters += 1;\n\
    \            }\n        }\n        // subtract the upper case and lower case numbers\n\
    \        let strength = upper_case_letters - lower_case_letters;\n        // check\
    \ if the strength is greater than the strongest extension\n        if strength\
    \ > strongest_extension {\n            // set the strongest extension to the current\
    \ strength\n            strongest_extension = strength;\n            // set the\
    \ class name extension to the class name\n            class_name_extension = class_name.clone();\n\
    \            // set the strongest extension name to the current extension\n  \
    \          strongest_extension_name = each_extension.clone();\n        }\n   \
    \     // set the number of upper case letters to 0\n        upper_case_letters\
    \ = 0;\n        // set the number of lower case letters to 0\n        lower_case_letters\
    \ = 0;\n    }\n    // concatenate the strings\n    let strongest_extension_name\
    \ = class_name_extension + \".\" + &strongest_extension_name;\n    // return the\
    \ string\n    strongest_extension_name", "    let mut strength = 0;\n    let mut\
    \ index = 0;\n    for (i, extension) in extensions.iter().enumerate() {\n    \
    \    let mut c_count = 0;\n        let mut s_count = 0;\n        for c in extension.chars()\
    \ {\n            if c.is_uppercase() {\n                c_count += 1;\n      \
    \      } else {\n                s_count += 1;\n            }\n        }\n   \
    \     let temp = c_count - s_count;\n        if temp > strength {\n          \
    \  strength = temp;\n            index = i;\n        }\n    }\n    format!(\"\
    {}.{}\", class_name, extensions[index])", "    // This function will take the\
    \ class name and return the strongest extension\n    // of the class\n    let\
    \ l = extensions.len();\n    let mut caps: Vec<usize> = Vec::new();\n    let mut\
    \ lower: Vec<usize> = Vec::new();\n    for i in 0..l {\n        caps.push(extensions[i].matches(char::is_uppercase).count());\n\
    \        lower.push(extensions[i].matches(char::is_lowercase).count());\n    }\n\
    \    let mut strength: Vec<i32> = Vec::new();\n    for i in 0..l {\n        strength.push(caps[i]\
    \ as i32 - lower[i] as i32);\n    }\n    let (mut max_strength, mut max_idx) =\
    \ (strength[0], 0);\n    for i in 1..l {\n        if strength[i] > max_strength\
    \ {\n            max_strength = strength[i];\n            max_idx = i;\n     \
    \   }\n    }\n    let mut class_name_plus_extension = class_name.clone();\n  \
    \  class_name_plus_extension.push('.');\n    class_name_plus_extension.push_str(&extensions[max_idx]);\n\
    \    return class_name_plus_extension;", "    let mut strongest = \"\".to_string();\n\
    \    let mut strength = 0.0;\n    for ext in extensions {\n        let mut cap\
    \ = 0;\n        let mut sm = 0;\n        for c in ext.chars() {\n            if\
    \ c.is_uppercase() {\n                cap += 1;\n            } else {\n      \
    \          sm += 1;\n            }\n        }\n        let mut diff = (cap - sm)\
    \ as f64;\n        if diff > strength {\n            strength = diff;\n      \
    \      strongest = ext;\n        }\n    }\n    return format!(\"{}.{}\", class_name,\
    \ strongest);", "    let mut strength: i32 = 0;\n    let mut strongest_extension\
    \ = String::new();\n    for extension in extensions {\n        let c = extension.chars().filter(|x|\
    \ x.is_uppercase()).count();\n        let l = extension.chars().filter(|x| x.is_lowercase()).count();\n\
    \        let st = (c as i32) - (l as i32);\n        if st > strength {\n     \
    \       strength = st;\n            strongest_extension = extension;\n       \
    \ }\n    }\n    format!(\"{}.{}\", class_name, strongest_extension)", "    let\
    \ mut best_extension = \"\";\n    let mut best_strength = 0.0;\n    for i in 0..extensions.len()\
    \ {\n        let strength = count_upper(&extensions[i]) as f64 - count_lower(&extensions[i])\
    \ as f64;\n        if strength > best_strength {\n            best_strength =\
    \ strength;\n            best_extension = &extensions[i];\n        }\n    }\n\
    \    return format!(\"{}.{}\", class_name, best_extension);", "\tlet mut strongest\
    \ = class_name.clone();\n\tlet mut max_strength = 0;\n\tfor ext in extensions\
    \ {\n\t\tlet cap = ext.chars().filter(|c| c.is_uppercase()).count();\n\t\tlet\
    \ sm = ext.chars().filter(|c| c.is_lowercase()).count();\n\t\tlet strength = (cap\
    \ as f64) - (sm as f64);\n\t\tif strength > max_strength {\n\t\t\tmax_strength\
    \ = strength;\n\t\t\tstrongest = format!(\"{}.{}\", class_name, ext);\n\t\t}\n\
    \t}\n\tstrongest", "  let mut strongest_extension: String = \"\".to_string();\n\
    \  let mut strongest_extension_str: f64 = 0.0;\n  let mut strongest_extension_index:\
    \ i32 = 0;\n  let mut strongest_extension_index_tmp: i32 = 0;\n  let len = extensions.len();\n\
    \  if len == 0 {\n    return class_name;\n  }\n  for x in extensions {\n    strongest_extension_index_tmp\
    \ += 1;\n    let mut cap: i32 = 0;\n    let mut sm: i32 = 0;\n    for c in x.chars()\
    \ {\n      if c.is_uppercase() {\n        cap += 1;\n      } else {\n        sm\
    \ += 1;\n      }\n    }\n    let strengh: f64 = cap as f64 - sm as f64;\n    if\
    \ strengh > strongest_extension_str {\n      strongest_extension_str = strengh;\n\
    \      strongest_extension_index = strongest_extension_index_tmp;\n    }\n  }\n\
    \  if strongest_extension_index != 0 {\n    strongest_extension = extensions[(strongest_extension_index\
    \ - 1) as usize].clone();\n  }\n  class_name + \".\" + &strongest_extension",
  "    let mut strongest = extensions[0].clone();\n    let mut strongest_strength\
    \ = 0.0;\n    for extension in extensions {\n        let (mut upper, mut lower)\
    \ = (0, 0);\n        for c in extension.chars() {\n            if c.is_ascii_uppercase()\
    \ {\n                upper += 1;\n            } else {\n                lower\
    \ += 1;\n            }\n        }\n        let strength = upper as f64 - lower\
    \ as f64;\n        if strength > strongest_strength {\n            strongest_strength\
    \ = strength;\n            strongest = extension;\n        }\n    }\n    format!(\"\
    {}.{}\", class_name, strongest)", "    let mut best_extension = String::new();\n\
    \    let mut best_strength = std::f64::MIN;\n    for extension in extensions {\n\
    \        let extension_strength = \n            extension.chars().fold(0.0, |acc,\
    \ x| {\n                if x.is_uppercase() {\n                    acc + 1.0\n\
    \                } else {\n                    acc - 1.0\n                }\n\
    \            });\n        if extension_strength > best_strength {\n          \
    \  best_strength = extension_strength;\n            best_extension = extension;\n\
    \        }\n    }\n    return format!(\"{}.{}\", class_name, best_extension);",
  "    let mut strongest_extension = String::new();\n    let mut strongest_extension_strength\
    \ = 0.0;\n    for extension in extensions {\n        let strength = extension\n\
    \            .chars()\n            .filter(|c| c.is_uppercase())\n           \
    \ .count() as f64\n            - extension\n                .chars()\n       \
    \         .filter(|c| c.is_lowercase())\n                .count() as f64;\n  \
    \      if strength > strongest_extension_strength {\n            strongest_extension_strength\
    \ = strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    return format!(\"{}.{}\", class_name, strongest_extension);", "    let strongest\
    \ = extensions.iter().map(|x| {\n        (\n            x.chars().filter(|&x|\
    \ x.is_ascii_uppercase()).count()\n                - x.chars().filter(|&x| x.is_ascii_lowercase()).count(),\n\
    \            x,\n        )\n    })\n    .max_by(|(a, _), (b, _)| a.cmp(b))\n \
    \   .unwrap();\n    let strongest_name = strongest.1;\n    format!(\"{}.{}\",\
    \ class_name, strongest_name)", "    let mut strongest_index = 0;\n    let mut\
    \ strongest_strength = 0;\n    for (index, extension) in extensions.iter().enumerate()\
    \ {\n        let mut caps = 0;\n        let mut smalls = 0;\n        for c in\
    \ extension.chars() {\n            if c.is_uppercase() {\n                caps\
    \ += 1;\n            } else {\n                smalls += 1;\n            }\n \
    \       }\n        let strength = caps - smalls;\n        if strength > strongest_strength\
    \ {\n            strongest_strength = strength;\n            strongest_index =\
    \ index;\n        }\n    }\n    let strongest_extension = extensions[strongest_index].clone();\n\
    \    let result = format!(\"{}.{}\", class_name, strongest_extension);\n    result",
  "    let mut str_ext = \"\";\n    let mut str_val = 0;\n    for ext in extensions\
    \ {\n        let mut ext_str_val = 0;\n        for c in ext.chars() {\n      \
    \      if c.is_ascii_uppercase() {\n                ext_str_val += 1;\n      \
    \      } else if c.is_ascii_lowercase() {\n                ext_str_val -= 1;\n\
    \            }\n        }\n        if ext_str_val > str_val {\n            str_val\
    \ = ext_str_val;\n            str_ext = ext.as_str();\n        }\n    }\n    return\
    \ class_name + \".\" + str_ext;", "    let mut strengths: Vec<(String, i32)> =\
    \ Vec::new();\n    for extension in extensions {\n        let mut capital_count\
    \ = 0;\n        let mut small_count = 0;\n        for c in extension.chars() {\n\
    \            if c.is_uppercase() {\n                capital_count += 1;\n    \
    \        } else {\n                small_count += 1;\n            }\n        }\n\
    \        strengths.push((extension, capital_count - small_count));\n    }\n  \
    \  let strongest_extension = strengths.into_iter().max_by_key(|(_, strength)|\
    \ strength.clone()).unwrap();\n    format!(\"{}.{}\", class_name, strongest_extension.0)",
  "    let mut strongest_extension: String = \"\".to_string();\n    let mut strength:\
    \ f64 = 0.0;\n    for extension in extensions {\n        let cap = extension.chars().filter(|c|\
    \ c.is_uppercase()).count();\n        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n\
    \        let ext_strength = (cap as f64) - (sm as f64);\n        if ext_strength\
    \ > strength {\n            strength = ext_strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return format!(\"{}.{}\", class_name, strongest_extension);",
  '    unimplemented!();', "    let mut first_extension = \"\";\n    let mut strength\
    \ = 0;\n    for i in extensions {\n        let mut cap = 0;\n        let mut sm\
    \ = 0;\n        for j in i.as_bytes() {\n            match *j {\n            \
    \    65...90 => cap += 1,\n                97...122 => sm += 1,\n            \
    \    _ => continue,\n            }\n        }\n        if (cap - sm) > strength\
    \ {\n            strength = cap - sm;\n            first_extension = i.clone();\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, first_extension)", "   \
    \ let mut best_extension: String = \"\".to_string();\n    let mut best_extension_strength:\
    \ f64 = 0.0;\n    for extension in extensions {\n        let ext_uppercase_strength:\
    \ i32 = extension.chars().filter(|ch| ch.is_uppercase()).count() as i32;\n   \
    \     let ext_lowercase_strength: i32 = extension.chars().filter(|ch| ch.is_lowercase()).count()\
    \ as i32;\n        let curr_extension_strength: f64 = (ext_uppercase_strength\
    \ - ext_lowercase_strength) as f64;\n        if curr_extension_strength > best_extension_strength\
    \ {\n            best_extension = extension.clone();\n            best_extension_strength\
    \ = curr_extension_strength;\n        }\n    }\n    return format!(\"{}.{}\",\
    \ class_name, best_extension);", "    let mut count = HashMap::new();\n    for\
    \ ext in extensions {\n        count.insert(ext, get_strength(&ext));\n    }\n\
    \    let mut max = (String::new(), 0.0);\n    for (k, v) in count {\n        if\
    \ v > max.1 {\n            max = (k, v);\n        }\n    }\n    format!(\"{}.{}\"\
    , class_name, max.0)", "    let mut strength = Vec::new();\n    for extension\
    \ in extensions {\n        let mut big = 0;\n        let mut small = 0;\n    \
    \    for letter in extension.chars() {\n            if letter.is_uppercase() {\n\
    \                big += 1;\n            } else {\n                small += 1;\n\
    \            }\n        }\n        strength.push(big - small);\n    }\n    let\
    \ strongest = strength.iter().max().unwrap();\n    let position = strength.iter().position(|&r|\
    \ r == *strongest).unwrap();\n    format!(\"{}.{}\", class_name, extensions[position])",
  "    let mut strongest = \"\";\n    let mut strongest_strenght = 0.0;\n    for extension\
    \ in extensions {\n        let cap = extension.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n  \
    \      let strength = (cap as f64) - (sm as f64);\n        if strength > strongest_strenght\
    \ {\n            strongest = &extension;\n            strongest_strenght = strength;\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, strongest)", "    let mut\
    \ current_strongest_extension = &extensions[0];\n    let mut current_strongest_extension_strength\
    \ = 0;\n    for i in 0..extensions.len() {\n        let mut capital_count = 0;\n\
    \        let mut small_count = 0;\n        for j in 0..extensions[i].len() {\n\
    \            if extensions[i].chars().nth(j).unwrap().is_uppercase() {\n     \
    \           capital_count += 1;\n            } else {\n                small_count\
    \ += 1;\n            }\n        }\n        let current_strength = capital_count\
    \ - small_count;\n        if current_strength > current_strongest_extension_strength\
    \ {\n            current_strongest_extension_strength = current_strength;\n  \
    \          current_strongest_extension = &extensions[i];\n        }\n    }\n \
    \   format!(\"{}.{}\", class_name, current_strongest_extension)", "    let mut\
    \ map: HashMap<String, i32> = HashMap::new();\n    for s in extensions {\n   \
    \     let name = s.to_string();\n        let mut map_value = 0;\n        for c\
    \ in name.chars() {\n            if c.is_uppercase() {\n                map_value\
    \ += 1;\n            } else {\n                map_value -= 1;\n            }\n\
    \        }\n        map.insert(name, map_value);\n    }\n    let mut max_extension\
    \ = \"\".to_string();\n    let mut max_value = 0;\n    for (k, v) in map {\n \
    \       if v > max_value {\n            max_extension = k;\n            max_value\
    \ = v;\n        }\n    }\n    class_name + \".\" + &max_extension", "    class_name\
    \ + \".\" + &extensions\n    .iter()\n    .max_by_key(|s| {\n        s.chars()\n\
    \        .fold((0, 0), |acc, ch| {\n            if ch.is_ascii_uppercase() {\n\
    \                (acc.0 + 1, acc.1)\n            } else {\n                (acc.0,\
    \ acc.1 + 1)\n            }\n        })\n    })\n    .unwrap()", "    let mut\
    \ class = Vec::new();\n    let mut power = 0;\n    let mut current_class = \"\"\
    .to_string();\n    for i in extensions {\n        let mut s_count = 0;\n     \
    \   let mut b_count = 0;\n        for j in i.chars() {\n            if j.is_lowercase()\
    \ {\n                s_count += 1;\n            } else {\n                b_count\
    \ += 1;\n            }\n        }\n        let power_res = b_count - s_count;\n\
    \        if power_res > power {\n            power = power_res;\n            current_class\
    \ = i.to_string();\n        }\n    }\n    return format!(\"{}.{}\", class_name,\
    \ current_class);", "    let mut strongest_ext: String = \"\".to_string();\n \
    \   let mut strongest_strength: i32 = 0;\n    for ext in extensions {\n      \
    \  let ext_strength = ext.chars().filter(|x| x.is_uppercase()).count() as i32\
    \ - ext.chars().filter(|x| x.is_lowercase()).count() as i32;\n        if ext_strength\
    \ > strongest_strength {\n            strongest_strength = ext_strength;\n   \
    \         strongest_ext = ext;\n        }\n    }\n    class_name + \".\" + &strongest_ext",
  "    let mut strongest_extension: &str = \"\";\n    let mut strongest_extension_strength:\
    \ i32 = 0;\n    for extension in extensions {\n        let cap = extension.chars().filter(|c|\
    \ c.is_uppercase()).count();\n        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n\
    \        let strength = cap as i32 - sm as i32;\n        if strength > strongest_extension_strength\
    \ {\n            strongest_extension = &extension;\n            strongest_extension_strength\
    \ = strength;\n        }\n    }\n    class_name + \".\" + strongest_extension",
  "    let mut strongest = 0;\n    let mut strongest_extension = \"\";\n    for i\
    \ in extensions {\n        let mut cap = 0;\n        let mut sm = 0;\n       \
    \ for x in i.chars() {\n            if x.is_uppercase() {\n                cap\
    \ += 1;\n            } else {\n                sm += 1;\n            }\n     \
    \   }\n        let strength = cap - sm;\n        if strength > strongest {\n \
    \           strongest = strength;\n            strongest_extension = i.as_str();\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, strongest_extension)", " \
    \   let mut strengths: Vec<f64> = Vec::new();\n    let mut max_strength: f64 =\
    \ 0.0;\n    let mut strongest_extension: String = \"\".to_string();\n    for extension\
    \ in extensions {\n        let mut new_strength: f64 = 0.0;\n        for letter\
    \ in extension.chars() {\n            if letter.is_uppercase() {\n           \
    \     new_strength += 1.0;\n            } else {\n                new_strength\
    \ -= 1.0;\n            }\n        }\n        strengths.push(new_strength);\n \
    \       if new_strength > max_strength {\n            max_strength = new_strength;\n\
    \            strongest_extension = extension;\n        }\n    }\n    format!(\"\
    {}.{}\", class_name, strongest_extension)", "    let mut a = Vec::new();\n   \
    \ let mut b = Vec::new();\n    let mut s = 0.0;\n    let mut cap = 0;\n    let\
    \ mut sm = 0;\n    let mut cap_old = 0;\n    let mut sm_old = 0;\n    let mut\
    \ ans = \"\".to_string();\n    for i in 0..extensions.len() {\n        for j in\
    \ 0..extensions[i].len() {\n            if extensions[i].chars().nth(j).unwrap().is_uppercase()\
    \ {\n                cap += 1;\n            } else {\n                sm += 1;\n\
    \            }\n        }\n        s = (cap - sm) as f64 / extensions[i].len()\
    \ as f64;\n        a.push(s);\n        cap = 0;\n        sm = 0;\n    }\n    for\
    \ i in 0..a.len() {\n        if a[i] > a[i + 1] {\n            a.remove(i + 1);\n\
    \        }\n    }\n    let r1 = a[0];\n    for i in 0..extensions.len() {\n  \
    \      for j in 0..extensions[i].len() {\n            if extensions[i].chars().nth(j).unwrap().is_uppercase()\
    \ {\n                cap_old += 1;\n            } else {\n                sm_old\
    \ += 1;\n            }\n        }\n        s = (cap_old - sm_old) as f64 / extensions[i].len()\
    \ as f64;\n        b.push(s);\n        cap_old = 0;\n        sm_old = 0;\n   \
    \ }\n    let idx = b.iter().position(|&x| x == r1).unwrap();\n    ans = format!(\"\
    {}.{}\", class_name, extensions[idx]);\n    ans", "    let mut results: Vec<(String,\
    \ i32)> = vec![];\n    for extension in extensions {\n        let mut case_count\
    \ = 0;\n        let mut lower_count = 0;\n        for c in extension.chars() {\n\
    \            if c.is_uppercase() {\n                case_count += 1;\n       \
    \     } else {\n                lower_count += 1;\n            }\n        }\n\
    \        results.push((extension, case_count - lower_count));\n    }\n    results.sort_by(|a,\
    \ b| b.1.cmp(&a.1));\n    format!(\"{}.{}\", class_name, results[0].0)", "   \
    \ let mut strongest_so_far = (0.0, \"\".to_string());\n    for ext in extensions\
    \ {\n        let mut caps = 0;\n        let mut lower = 0;\n        for c in ext.chars()\
    \ {\n            if c.is_ascii_uppercase() {\n                caps += 1;\n   \
    \         } else {\n                lower += 1;\n            }\n        }\n  \
    \      let strength = caps as f64 - lower as f64;\n        if strength > strongest_so_far.0\
    \ {\n            strongest_so_far = (strength, ext);\n        }\n    }\n    format!(\"\
    {}.{}\", class_name, strongest_so_far.1)", "    let mut best_extension = &extensions[0];\n\
    \    let mut best_strength = -100;\n    for extension in extensions {\n      \
    \  let mut best_extension_cap = 0;\n        let mut best_extension_sm = 0;\n \
    \       for c in extension.chars() {\n            if c.is_ascii_uppercase() {\n\
    \                best_extension_cap += 1;\n            } else {\n            \
    \    best_extension_sm += 1;\n            }\n        }\n        let strength =\
    \ best_extension_cap - best_extension_sm;\n        if strength > best_strength\
    \ {\n            best_strength = strength;\n            best_extension = &extension;\n\
    \        }\n    }\n    let mut result = class_name.clone();\n    result.push('.');\n\
    \    result.push_str(best_extension);\n    result", "    let mut counter = 0;\n\
    \    let mut best = 0;\n    let mut best_ext = \"\";\n    for i in 0..extensions.len()\
    \ {\n        let mut uppercase = 0;\n        let mut lowercase = 0;\n        for\
    \ c in extensions[i].chars() {\n            if c.is_lowercase() { lowercase +=\
    \ 1; }\n            if c.is_uppercase() { uppercase += 1; }\n        }\n     \
    \   let strength = (uppercase as f64) - (lowercase as f64);\n        if strength\
    \ > best {\n            best = strength;\n            best_ext = &extensions[i];\n\
    \        }\n    }\n    return format!(\"{}.{}\", class_name, best_ext);", "  \
    \  let mut strengths: Vec<(f64, String)> = vec![];\n    for ext in extensions\
    \ {\n        let upper: i32 = ext.chars().filter(|x| x.is_uppercase()).count()\
    \ as i32;\n        let lower: i32 = ext.chars().filter(|x| x.is_lowercase()).count()\
    \ as i32;\n        let strength: f64 = (upper - lower) as f64;\n        strengths.push((strength,\
    \ ext));\n    }\n    strengths.sort_by(|x, y| (y.0).partial_cmp(&x.0).unwrap());\n\
    \    let class_name = class_name.clone();\n    let mut result = format!(\"{}.{}\"\
    , class_name, strengths[0].1);\n    for i in 1..strengths.len() {\n        if\
    \ strengths[i].0 == strengths[0].0 {\n            result = format!(\"{}.{}\",\
    \ class_name, strengths[i].1);\n            break;\n        }\n    }\n    result",
  "    let mut strength = 0;\n    let mut strongest = \"\";\n    for ext in extensions\
    \ {\n        let uppers = ext.chars().filter(|&x| x.is_uppercase()).count();\n\
    \        let lowers = ext.chars().filter(|&x| x.is_lowercase()).count();\n   \
    \     let curr_str = uppers as i64 - lowers as i64;\n        if curr_str > strength\
    \ {\n            strength = curr_str;\n            strongest = &ext;\n       \
    \ }\n    }\n    format!(\"{}.{}\", class_name, strongest)", "    // define a function\
    \ that calculates strength\n    fn calculate_strength(name: &str) -> f64 {\n \
    \       let mut cap = 0;\n        let mut sm = 0;\n        for c in name.chars()\
    \ {\n            if c.is_uppercase() {\n                cap += 1;\n          \
    \  } else {\n                sm += 1;\n            }\n        }\n        (cap\
    \ as f64) - (sm as f64)\n    }\n    // calculate the strengths of the extensions\
    \ and find the maximum\n    let mut strength_extension = extensions.into_iter().map(|e|\
    \ (calculate_strength(&e), e)).collect::<Vec<_>>();\n    strength_extension.sort_by(|a,\
    \ b| b.0.partial_cmp(&a.0).unwrap());\n    format!(\"{}.{}\", class_name, strength_extension[0].1)",
  "    // Your code here\n    let class_name = class_name;\n    let mut strength:\
    \ f64 = -100.0;\n    let mut strongest_extension = \"\".to_string();\n    for\
    \ extension in extensions {\n        let mut cap_count = 0;\n        let mut sm_count\
    \ = 0;\n        for character in extension.chars() {\n            if character.is_ascii_uppercase()\
    \ {\n                cap_count += 1;\n            } else if character.is_ascii_lowercase()\
    \ {\n                sm_count += 1;\n            }\n        }\n        let calc_strength\
    \ = (cap_count as f64) - (sm_count as f64);\n        if calc_strength > strength\
    \ {\n            strength = calc_strength;\n            strongest_extension =\
    \ extension;\n        }\n    }\n    format!(\"{}.{}\", class_name, strongest_extension)",
  "    let mut best_strength = 0;\n    let mut best_name = String::new();\n    for\
    \ extension in extensions {\n        let mut cap = 0;\n        let mut sm = 0;\n\
    \        for c in extension.chars() {\n            if c.is_uppercase() {\n   \
    \             cap += 1;\n            } else {\n                sm += 1;\n    \
    \        }\n        }\n        let strength = cap - sm;\n        if strength >\
    \ best_strength {\n            best_strength = strength;\n            best_name\
    \ = extension;\n        }\n    }\n    if best_strength == 0 {\n        String::from(class_name)\n\
    \    } else {\n        String::from(class_name) + \".\" + &best_name\n    }",
  "    let mut count = 0;\n    let mut c = class_name.chars().next().unwrap();\n \
    \   for char in class_name.chars() {\n        if char.is_uppercase() {\n     \
    \       count += 1;\n        }\n    }\n    let mut capital_num = count;\n    let\
    \ mut small_num = class_name.len() - count;\n    let mut f_str = String::new();\n\
    \    for ext in extensions {\n        count = 0;\n        for char in ext.chars()\
    \ {\n            if char.is_uppercase() {\n                count += 1;\n     \
    \       }\n        }\n        let c_num = count;\n        let s_num = ext.len()\
    \ - count;\n        if (c_num - s_num) >= (capital_num - small_num) {\n      \
    \      capital_num = c_num;\n            small_num = s_num;\n            f_str\
    \ = ext;\n        }\n    }\n    return format!(\"{}.{}\", class_name, f_str);",
  "    let mut strength: f64 = 0.0;\n    let mut strongest_extension = String::new();\n\
    \    for extension in extensions {\n        let (cap, sm) = (\n            extension.to_uppercase().chars().count(),\n\
    \            extension.to_lowercase().chars().count(),\n        );\n        let\
    \ current_strength = (cap - sm) as f64 / extension.len() as f64;\n        if current_strength\
    \ > strength {\n            strength = current_strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    class_name + \".\" + &strongest_extension",
  "\t\n\tlet mut strongest_strength = 0f64;\n\tlet mut strongest_extension = \"\"\
    ;\n\t\n\tfor e in extensions {\n\t\tlet extension_strength = (e.chars().filter(|&c|\
    \ c.is_uppercase()).count() as f64) - (e.chars().filter(|&c| c.is_lowercase()).count()\
    \ as f64);\n\t\tif extension_strength > strongest_strength {\n\t\t\tstrongest_strength\
    \ = extension_strength;\n\t\t\tstrongest_extension = e.as_str();\n\t\t}\n\t}\n\
    \t\n\tformat!(\"{}.{}\", class_name, strongest_extension)", "    if extensions.len()\
    \ == 0 {\n        format!(\"{}\", class_name)\n    } else {\n        let mut strong:\
    \ String = String::new();\n        let mut strongest: String = String::new();\n\
    \        let mut strong_strength: f64 = 0f64;\n        for ext in extensions {\n\
    \            let mut cap = 0;\n            let mut sm = 0;\n            for ch\
    \ in ext.chars() {\n                if ch.is_uppercase() {\n                 \
    \   cap += 1;\n                } else {\n                    sm += 1;\n      \
    \          }\n            }\n            let cur_strength = cap as f64 - sm as\
    \ f64;\n            if cur_strength > strong_strength {\n                strong_strength\
    \ = cur_strength;\n                strong = ext.clone();\n            }\n    \
    \    }\n        strongest = format!(\"{}.{}\", class_name, strong);\n        strongest\n\
    \    }", "    let mut strengths: Vec<(String, i32)> = Vec::new();\n    for e in\
    \ extensions {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let small = e.chars().filter(|c| c.is_lowercase()).count();\n       \
    \ strengths.push((e, cap as i32 - small as i32));\n    }\n    strengths.sort_by(|a,\
    \ b| b.1.cmp(&a.1));\n    format!(\"{}.{}\", class_name, strengths[0].0)", " \
    \   let mut strongest_extension = \"\";\n    let mut strongest_extension_index\
    \ = -1;\n    let mut strongest_extension_strength = 0;\n    let mut index = 0;\n\
    \    for extension in extensions {\n        let caps = extension.chars().filter(|x|x.is_uppercase()).count();\n\
    \        let smalls = extension.chars().filter(|x|x.is_lowercase()).count();\n\
    \        let strength = caps as f64 - smalls as f64;\n        if strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = strength;\n            strongest_extension_index\
    \ = index;\n        }\n        index += 1;\n    }\n    strongest_extension = extensions[strongest_extension_index].clone();\n\
    \    format!(\"{}.{}\", class_name, strongest_extension)", "    let mut ext_strength\
    \ = Vec::new();\n    for i in extensions {\n        let mut small: i64 = 0;\n\
    \        let mut big: i64 = 0;\n        for j in i.chars() {\n            if j.is_uppercase()\
    \ {\n                big += 1;\n            } else {\n                small +=\
    \ 1;\n            }\n        }\n        ext_strength.push((i, (big - small) as\
    \ i64));\n    }\n    ext_strength.sort_by(|a, b| (b.1).cmp(&a.1));\n    let mut\
    \ final_class = class_name.clone();\n    final_class.push('.');\n    final_class.push_str(&ext_strength[0].0);\n\
    \    final_class", "    let mut strengths: Vec<(String, f64)> = Vec::new();\n\
    \    for i in extensions {\n        let mut cap_count = 0;\n        let mut sm_count\
    \ = 0;\n        for j in i.chars() {\n            if j.is_uppercase() {\n    \
    \            cap_count += 1;\n            } else {\n                sm_count +=\
    \ 1;\n            }\n        }\n        strengths.push((i, (cap_count as f64 -\
    \ sm_count as f64)));\n    }\n    strengths.sort_by(|a, b| a.1.partial_cmp(&b.1).unwrap());\n\
    \    format!(\"{}.{}\", class_name, strengths[strengths.len() - 1].0)", "    let\
    \ mut strongest_extension: String = \"\".to_string();\n    let mut strongest_extension_strength:\
    \ i32 = 0;\n    let class_length = class_name.len();\n    for extension in extensions\
    \ {\n        let extension_length = extension.len();\n        let extension_strength\
    \ = extension_length as i32 - class_length as i32;\n        if extension_strength\
    \ > strongest_extension_strength {\n            strongest_extension = extension;\n\
    \            strongest_extension_strength = extension_strength;\n        }\n \
    \   }\n    return class_name + \".\" + &strongest_extension;", "    let mut strong_ext\
    \ = 0.0;\n    let mut ext_name = \"\";\n    for ext in extensions {\n        let\
    \ ext_cap = ext.chars().filter(|x| x.is_uppercase()).count();\n        let ext_low\
    \ = ext.chars().filter(|x| x.is_lowercase()).count();\n        let ext_str = (ext_cap\
    \ as f64) - (ext_low as f64);\n        if ext_str > strong_ext {\n           \
    \ strong_ext = ext_str;\n            ext_name = ext.as_str();\n        }\n   \
    \ }\n    format!(\"{}.{}\", class_name, ext_name)", "    let mut strengths: Vec<(String,\
    \ isize)> = Vec::new();\n    for extension in extensions {\n        let (mut upper,\
    \ mut lower) = (0, 0);\n        for c in extension.chars() {\n            if c.is_uppercase()\
    \ {\n                upper += 1;\n            } else {\n                lower\
    \ += 1;\n            }\n        }\n        strengths.push((extension, upper -\
    \ lower));\n    }\n    strengths.sort_by(|x, y| y.1.cmp(&x.1));\n    format!(\"\
    {}.{}\", class_name, strengths[0].0)", "    // The extensions are to be used to\
    \ load additional classes to the class.\n    // The strength of the extension\
    \ is as follows:\n    // Let CAP be the number of the uppercase letters in the\
    \ extension's name,\n    // and let SM be the number of lowercase letters in the\
    \ extension's name,\n    // the strength is given by the fraction CAP - SM.\n\
    \    //\n    // You should find the strongest extension and return a string in\
    \ this \n    // format: ClassName.StrongestExtensionName.\n    //\n    // If there\
    \ are two or more extensions with the same strength, you should\n    // choose\
    \ the one that comes first in the list.\n    let mut max_extension = String::new();\n\
    \    let mut max_extension_strength = 0;\n    for ext in extensions {\n      \
    \  let mut CAP = 0;\n        let mut SM = 0;\n        for ch in ext.chars() {\n\
    \            if ch.is_uppercase() {\n                CAP += 1;\n            }\
    \ else {\n                SM += 1;\n            }\n        }\n        if CAP -\
    \ SM > max_extension_strength {\n            max_extension_strength = CAP - SM;\n\
    \            max_extension = ext;\n        }\n    }\n    return format!(\"{}.{}\"\
    , class_name, max_extension);", "    let mut strongest_ext = 0.0;\n    let mut\
    \ ext_name = \"\".to_string();\n    for ext in extensions {\n        let letters:\
    \ Vec<char> = ext.chars().collect();\n        let mut caps = 0;\n        let mut\
    \ smalls = 0;\n        for l in letters {\n            if l.is_uppercase() {\n\
    \                caps += 1;\n            } else {\n                smalls += 1;\n\
    \            }\n        }\n        let ext_strength = caps as f64 - smalls as\
    \ f64;\n        if ext_strength > strongest_ext {\n            strongest_ext =\
    \ ext_strength;\n            ext_name = ext;\n        }\n    }\n    return format!(\"\
    {}.{}\", class_name, ext_name);", "    let mut strongest_extension = String::new();\n\
    \    let mut best_strength = -1.0;\n    for extension in extensions {\n      \
    \  let upper_case_nbr = get_upper_case_nbr(&extension);\n        let lower_case_nbr\
    \ = get_lower_case_nbr(&extension);\n        let strength = (upper_case_nbr as\
    \ f64) - (lower_case_nbr as f64);\n        if strength > best_strength {\n   \
    \         best_strength = strength;\n            strongest_extension = extension;\n\
    \        }\n    }\n    return format!(\"{}.{}\", class_name, strongest_extension);",
  "    let mut strongest = (\"\".to_string(), -100);\n    for ex in extensions {\n\
    \        let caps = ex.chars().filter(|c| c.is_uppercase()).count();\n       \
    \ let sms = ex.chars().filter(|c| c.is_lowercase()).count();\n        let strength\
    \ = caps as i32 - sms as i32;\n        if strength > strongest.1 {\n         \
    \   strongest = (ex, strength);\n        }\n    }\n    return format!(\"{}.{}\"\
    , class_name, strongest.0);", "    let mut str_exts: Vec<_> = extensions.iter().map(|x|\
    \ {\n        let cap = x.chars().filter(|c| c.is_uppercase()).count();\n     \
    \   let sm = x.chars().filter(|c| c.is_lowercase()).count();\n        ((cap as\
    \ i32) - (sm as i32), x)\n    }).collect();\n    str_exts.sort_by(|x, y| {\n \
    \       x.0.cmp(&y.0).then(x.1.cmp(&y.1))\n    });\n    format!(\"{}.{}\", class_name,\
    \ str_exts.pop().unwrap().1)", "    let n = extensions.len();\n    let mut strengths\
    \ = Vec::new();\n    for i in 0..n {\n        let mut cap = 0;\n        let mut\
    \ sm = 0;\n        for c in extensions[i].chars() {\n            if c.is_uppercase()\
    \ {\n                cap += 1;\n            } else {\n                sm += 1;\n\
    \            }\n        }\n        strengths.push(cap as f64 - sm as f64);\n \
    \   }\n    let mut strongest = 0;\n    for i in 1..n {\n        if strengths[i]\
    \ > strengths[strongest] {\n            strongest = i;\n        }\n    }\n   \
    \ let mut result = class_name.clone();\n    result.push('.');\n    result.push_str(&extensions[strongest]);\n\
    \    result", "    let mut strength = 0;\n    let mut strongest_extension = String::new();\n\
    \    for extension in extensions {\n        let count_upper = extension.chars().filter(|ch|\
    \ ch.is_uppercase()).count();\n        let count_lower = extension.chars().filter(|ch|\
    \ ch.is_lowercase()).count();\n        let new_strength = count_upper - count_lower;\n\
    \        if new_strength > strength {\n            strength = new_strength;\n\
    \            strongest_extension = extension;\n        }\n    }\n    format!(\"\
    {}.{}\", class_name, strongest_extension)", "    extensions.iter().fold((-1.0,\
    \ String::new()), |(acc, x), y| {\n        let caps = y.chars().filter(|x| x.is_uppercase()).count();\n\
    \        let lowers = y.chars().filter(|x| x.is_lowercase()).count();\n      \
    \  let strength = caps as f64 - lowers as f64;\n        if strength > acc { (strength,\
    \ y.to_string()) } else { (acc, x) }\n    }).1", "    let mut strength = 0.0;\n\
    \    let mut strongest_extension = \"\";\n    for i in 0..extensions.len() {\n\
    \        let mut cap_count = 0;\n        let mut sm_count = 0;\n        for j\
    \ in 0..extensions[i].len() {\n            if extensions[i].chars().nth(j).unwrap().is_uppercase()\
    \ {\n                cap_count += 1;\n            } else {\n                sm_count\
    \ += 1;\n            }\n        }\n        let current_strength = (cap_count as\
    \ f64) - (sm_count as f64);\n        if current_strength > strength {\n      \
    \      strength = current_strength;\n            strongest_extension = &extensions[i];\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, strongest_extension)", " \
    \   let mut strongest_name = String::new();\n    let mut strongest_strength =\
    \ 0;\n    for extension in extensions {\n        let mut strength = 0;\n     \
    \   for letter in extension.chars() {\n            match letter {\n          \
    \      'A'...'Z' => strength += 1,\n                'a'...'z' => strength -= 1,\n\
    \                _ => continue,\n            }\n        }\n        if strength\
    \ > strongest_strength {\n            strongest_strength = strength;\n       \
    \     strongest_name = extension;\n        }\n    }\n    return format!(\"{}.{}\"\
    , class_name, strongest_name);", "    let cl = class_name.clone();\n    let mut\
    \ extensions = extensions.into_iter().map(|x| (x, extension_strength(x))).collect::<Vec<_>>();\n\
    \    extensions.sort_by(|a, b| b.1.partial_cmp(&a.1).unwrap());\n    cl + \".\"\
    \ + &extensions[0].0", "    let mut strongest_extension = String::new();\n   \
    \ let mut strongest_extension_value = 0.0;\n    let mut i = 0;\n    while i <\
    \ extensions.len() {\n        let caps = get_capitals_count(&extensions[i]);\n\
    \        let small = get_small_chars_count(&extensions[i]);\n        let val =\
    \ caps as f64 - small as f64;\n        if val > strongest_extension_value {\n\
    \            strongest_extension_value = val;\n            strongest_extension\
    \ = extensions[i].clone();\n        }\n        i = i + 1;\n    }\n    class_name\
    \ + \".\" + &strongest_extension", "    let mut cap = 0;\n    let mut sm = 0;\n\
    \    let mut number_cap = 0;\n    let mut number_sm = 0;\n    let mut name_extension\
    \ = String::new();\n    for extension in extensions {\n        for s in extension.chars()\
    \ {\n            if s.is_uppercase() {\n                cap += 1;\n          \
    \  } else {\n                sm += 1;\n            }\n        }\n        if cap\
    \ == 0 {\n            cap = 1;\n        }\n        if sm == 0 {\n            sm\
    \ = 1;\n        }\n        let strength: f64 = (cap - sm) as f64 / (cap + sm)\
    \ as f64;\n        if strength > number_cap {\n            number_cap = strength;\n\
    \            number_sm = cap + sm;\n            name_extension = extension;\n\
    \        } else if strength == number_cap {\n            if number_sm > cap +\
    \ sm {\n                number_sm = cap + sm;\n                name_extension\
    \ = extension;\n            }\n        }\n        cap = 0;\n        sm = 0;\n\
    \    }\n    format!(\"{}.{}\", class_name, name_extension)", "    let mut ext\
    \ = Vec::new();\n    for i in 0..extensions.len() {\n        let mut caps: i32\
    \ = 0;\n        let mut sm: i32 = 0;\n        for c in extensions[i].chars() {\n\
    \            if c.is_uppercase() {\n                caps += 1;\n            }\
    \ else {\n                sm += 1;\n            }\n        }\n        ext.push((extensions[i].clone(),\
    \ caps - sm));\n    }\n    let mut strongest: (String, i32) = (String::new(),\
    \ 0);\n    for i in 0..ext.len() {\n        if ext[i].1 > strongest.1 {\n    \
    \        strongest = ext[i].clone();\n        }\n    }\n    return format!(\"\
    {}.{}\", class_name, strongest.0);", "    let mut strongest = (0, 0);\n    let\
    \ mut result = String::new();\n    for e in extensions {\n        let (cap, sm)\
    \ = count_cap_small(e);\n        if cap - sm > strongest.0 - strongest.1 {\n \
    \           strongest = (cap, sm);\n            result = class_name.clone() +\
    \ \".\" + &e.clone();\n        }\n    }\n    result", "    let mut strongest_ex:\
    \ String = \"\".to_string();\n    let mut strongest_strength: f64 = 0.0;\n   \
    \ for s in extensions {\n        let (cap, sm) = get_strength(&s);\n        let\
    \ strength = cap as f64 - sm as f64;\n        if strength > strongest_strength\
    \ {\n            strongest_strength = strength;\n            strongest_ex = s;\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, strongest_ex)", "    let\
    \ mut best_extension = &extensions[0];\n    let mut max_strength = 0;\n    for\
    \ extension in extensions {\n        let strength = extension.chars().filter(|&c|\
    \ c.is_uppercase()).count() as i32 -\n                       extension.chars().filter(|&c|\
    \ c.is_lowercase()).count() as i32;\n        if strength > max_strength {\n  \
    \          max_strength = strength;\n            best_extension = &extension;\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, best_extension)", "\tlet\
    \ i = extensions.iter().map(|e| {\n\t\tlet s = e.to_string();\n\t\tlet upper =\
    \ s.chars().filter(|c| c.is_uppercase()).count();\n\t\tlet lower = s.chars().filter(|c|\
    \ c.is_lowercase()).count();\n\t\t((upper as f64) - (lower as f64), s)\n\t});\n\
    \tlet mut j = i.clone();\n\tlet max = j.max().unwrap().0;\n\tlet min = i.min().unwrap().0;\n\
    \tlet max_ext = j.find(|p| p.0 == max).unwrap().1;\n\tlet min_ext = i.find(|p|\
    \ p.0 == min).unwrap().1;\n\tformat!(\"{}.{}\", class_name, max_ext)", "    let\
    \ mut strongest_extension: String = String::new();\n    let mut strength: f64\
    \ = 0.0;\n    for extension in extensions {\n        let cap: f64 = extension.chars().filter(|&x|\
    \ x.is_uppercase()).count() as f64;\n        let sm: f64 = extension.chars().filter(|&x|\
    \ x.is_lowercase()).count() as f64;\n        let temp_strength: f64 = cap - sm;\n\
    \        if temp_strength > strength {\n            strength = temp_strength;\n\
    \            strongest_extension = extension;\n        }\n    }\n    format!(\"\
    {}.{}\", class_name, strongest_extension)"]
stop_tokens:
- "\n}"
