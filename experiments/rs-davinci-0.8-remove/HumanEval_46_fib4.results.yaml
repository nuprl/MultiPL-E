language: rs
name: HumanEval_46_fib4
results:
- exit_code: 0
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 0;\n    }\n    if n == 1 {\n        return 0;\n   \
    \ }\n    if n == 2 {\n        return 2;\n    }\n    if n == 3 {\n        return\
    \ 0;\n    }\n    let mut last_four: Vec<isize> = vec![0, 0, 2, 0];\n    for _\
    \ in 4..n + 1 {\n        let fib4 = last_four[0] + last_four[1] + last_four[2]\
    \ + last_four[3];\n        last_four[0] = last_four[1];\n        last_four[1]\
    \ = last_four[2];\n        last_four[2] = last_four[3];\n        last_four[3]\
    \ = fib4;\n    }\n    last_four[3]\n}\n\nfn main() {\n    let candidate = fib4;\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10),\
    \ 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822469
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 0;\n    }\n    let mut a = 0;\n    let mut b = 0;\n\
    \    let mut c = 2;\n    let mut d = 0;\n    for _ in 3..=n {\n        d = b +\
    \ c + d;\n        b = a;\n        a = d;\n        c = b + c + d;\n    }\n    a\
    \ + b + c + d\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `84`,\n right: `4`', /tmp/tmpqrufuw01.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822469
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    //\
    \ Cribbed from https://en.wikipedia.org/wiki/Fibonacci_number#Recognizing_Fibonacci_numbers_and_relating_to_the_golden_ratio\n\
    \    // https://www.nayuki.io/page/fast-fibonacci-algorithms\n    let phi: f64\
    \ = 1.61803398874989;\n    let result = (phi.powf(n as f64) - (-phi).powf(n as\
    \ f64)) / 5f64.sqrt();\n    result.round() as isize\n}\n\nfn main() {\n    let\
    \ candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `10`,\n right: `4`', /tmp/tmpe62pvbra.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822469
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    let\
    \ mut last_first = 0;\n    let mut last_second = 0;\n    let mut last_third =\
    \ 2;\n    let mut current = 0;\n    if n == 0 {\n        return 0;\n    }\n  \
    \  if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n        return 2;\n\
    \    }\n    if n == 3 {\n        return 0;\n    }\n    for _ in 4..(n + 1) {\n\
    \        current = last_first + last_second + last_third;\n        last_first\
    \ = last_second;\n        last_second = last_third;\n        last_third = current;\n\
    \    }\n    current\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `26`,\n right: `28`', /tmp/tmpihxr7sv5.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822469
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 0;\n    }\n    if n == 1 {\n        return 0;\n   \
    \ }\n    if n == 2 {\n        return 2;\n    }\n    if n == 3 {\n        return\
    \ 0;\n    }\n    let mut a: isize = 0;\n    let mut b: isize = 0;\n    let mut\
    \ c: isize = 2;\n    let mut d: isize = 0;\n    for _ in 4..(n + 1) {\n      \
    \  a = b;\n        b = c;\n        c = d;\n        d = a + b + c;\n    }\n   \
    \ return d;\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `22`,\n right: `28`', /tmp/tmprcdj1iy9.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822469
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    let\
    \ mut a = 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n   \
    \ for _ in 2..n {\n        d = a + b + c;\n        a = b;\n        b = c;\n  \
    \      c = d;\n    }\n    d\n}\n\nfn main() {\n    let candidate = fib4;\n   \
    \ assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10),\
    \ 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `4`', /tmp/tmpgp82cqlu.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822469
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    let\
    \ mut a = 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n   \
    \ for _ in 3..n+1 {\n        let res = a + b + c + d;\n        a = b;\n      \
    \  b = c;\n        c = d;\n        d = res;\n    }\n    d\n}\n\nfn main() {\n\
    \    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `4`', /tmp/tmpro62op8l.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822469
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    let\
    \ mut prev_four = vec![0, 0, 2, 0];\n    for i in 4..n {\n        let new_four\
    \ = prev_four[0] + prev_four[1] + prev_four[2] + prev_four[3];\n        prev_four.remove(0);\n\
    \        prev_four.push(new_four);\n    }\n    prev_four[3]\n}\n\nfn main() {\n\
    \    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpc_1_hsmt.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822469
- exit_code: 1
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    if\
    \ n < 0 {\n        panic!(\"Only allow positive numbers\");\n    }\n    if n <\
    \ 3 {\n        return n;\n    }\n    let mut fib4 = [0isize; 4];\n    for i in\
    \ 0..4 {\n        fib4[i] = i;\n    }\n    for i in 4..(n + 1) {\n        fib4[i\
    \ % 4] = fib4[(i - 1) % 4] + fib4[(i - 2) % 4] + fib4[(i - 3) % 4] + fib4[(i -\
    \ 4) % 4];\n    }\n    fib4[n % 4]\n}\n\nfn main() {\n    let candidate = fib4;\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10),\
    \ 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgrepkoqb.rs:17:19\n   |\n\
    17 |         fib4[i] = i;\n   |                   ^ expected `isize`, found `usize`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpgrepkoqb.rs:20:9\n\
    \   |\n20 |         fib4[i % 4] = fib4[(i - 1) % 4] + fib4[(i - 2) % 4] + fib4[(i\
    \ - 3) % 4] + fib4[(i - 4) % 4];\n   |         ^^^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `[isize]`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpgrepkoqb.rs:20:23\n   |\n20 |  \
    \       fib4[i % 4] = fib4[(i - 1) % 4] + fib4[(i - 2) % 4] + fib4[(i - 3) % 4]\
    \ + fib4[(i - 4) % 4];\n   |                       ^^^^^^^^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `[isize]`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpgrepkoqb.rs:20:43\n   |\n20 |  \
    \       fib4[i % 4] = fib4[(i - 1) % 4] + fib4[(i - 2) % 4] + fib4[(i - 3) % 4]\
    \ + fib4[(i - 4) % 4];\n   |                                           ^^^^^^^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `[isize]`\n\n\
    error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpgrepkoqb.rs:20:63\n\
    \   |\n20 |         fib4[i % 4] = fib4[(i - 1) % 4] + fib4[(i - 2) % 4] + fib4[(i\
    \ - 3) % 4] + fib4[(i - 4) % 4];\n   |                                       \
    \                        ^^^^^^^^^^^^^^^^^ slice indices are of type `usize` or\
    \ ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = note: required because of the require"
  stdout: ''
  timestamp: 1659822469
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 0;\n    }\n    if n == 1 {\n        return 0;\n   \
    \ }\n    if n == 2 {\n        return 2;\n    }\n    if n == 3 {\n        return\
    \ 0;\n    }\n    let mut fib_n_minus_2 = 0;\n    let mut fib_n_minus_1 = 0;\n\
    \    let mut fib_n_minus_3 = 0;\n    let mut fib_n_minus_4 = 0;\n    let mut fib_n\
    \ = 0;\n    for i in 3..n {\n        fib_n = fib_n_minus_1 + fib_n_minus_2 + fib_n_minus_3\
    \ + fib_n_minus_4;\n        fib_n_minus_4 = fib_n_minus_3;\n        fib_n_minus_3\
    \ = fib_n_minus_2;\n        fib_n_minus_2 = fib_n_minus_1;\n        fib_n_minus_1\
    \ = fib_n;\n    }\n    fib_n\n}\n\nfn main() {\n    let candidate = fib4;\n  \
    \  assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10),\
    \ 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `4`', /tmp/tmpvd8gfa5f.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822469
- exit_code: 0
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    //\
    \ This can be improved by keeping track of the last four numbers instead of re-computing\
    \ them.\n    // Doing so would reduce the time complexity to O(n) instead of O(n^2).\n\
    \    let mut previous_last_four = vec![0, 0, 2, 0];\n    if n <= 3 {\n       \
    \ return previous_last_four[n as usize];\n    }\n    for _ in 4..=n {\n      \
    \  let next = previous_last_four.iter().sum();\n        previous_last_four.remove(0);\n\
    \        previous_last_four.push(next);\n    }\n    previous_last_four[3]\n}\n\
    \nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n \
    \   assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822469
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    if\
    \ n < 2 {\n        0\n    } else if n == 2 {\n        2\n    } else {\n      \
    \  let mut a = 0;\n        let mut b = 0;\n        let mut c = 2;\n        let\
    \ mut d = 0;\n        for _ in 4..n+1 {\n            d = b + c + d;\n        \
    \    b = a;\n            c = b;\n            a = d;\n        }\n        d\n  \
    \  }\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp7ybvi5xw.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822469
- exit_code: 0
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 0;\n    }\n    if n == 1 {\n        return 0;\n   \
    \ }\n    if n == 2 {\n        return 2;\n    }\n    if n == 3 {\n        return\
    \ 0;\n    }\n    let n = n as usize;\n    let mut fibonacci_numbers = vec![0;\
    \ n + 1];\n    fibonacci_numbers[0] = 0;\n    fibonacci_numbers[1] = 0;\n    fibonacci_numbers[2]\
    \ = 2;\n    fibonacci_numbers[3] = 0;\n    for i in 4..=n {\n        fibonacci_numbers[i]\
    \ = fibonacci_numbers[i - 1] + fibonacci_numbers[i - 2] + fibonacci_numbers[i\
    \ - 3] + fibonacci_numbers[i - 4];\n    }\n    fibonacci_numbers[n]\n}\n\nfn main()\
    \ {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822469
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 0;\n    }\n    if n == 1 {\n        return 0;\n   \
    \ }\n    if n == 2 {\n        return 2;\n    }\n    if n == 3 {\n        return\
    \ 0;\n    }\n    let mut a: isize = 2;\n    let mut b: isize = 0;\n    let mut\
    \ c: isize = 0;\n    let mut d: isize = 0;\n    for _ in 4..n + 1 {\n        d\
    \ = a + b + c;\n        c = b;\n        b = a;\n        a = d;\n    }\n    return\
    \ d;\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `26`,\n right: `28`', /tmp/tmp5l1bqdcy.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822469
- exit_code: 0
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 0;\n    }\n    if n == 1 {\n        return 0;\n   \
    \ }\n    if n == 2 {\n        return 2;\n    }\n    if n == 3 {\n        return\
    \ 0;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 2;\n    let\
    \ mut d = 0;\n    for _ in 4..n + 1 {\n        let new_d = a + b + c + d;\n  \
    \      a = b;\n        b = c;\n        c = d;\n        d = new_d;\n    }\n   \
    \ return d;\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822469
- exit_code: 0
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 0;\n    }\n    if n == 1 {\n        return 0;\n   \
    \ }\n    if n == 2 {\n        return 2;\n    }\n    if n == 3 {\n        return\
    \ 0;\n    }\n    let mut nth: isize = 0;\n    let mut n1: isize = 0;\n    let\
    \ mut n2: isize = 0;\n    let mut n3: isize = 2;\n    let mut n4: isize = 0;\n\
    \    for _ in 4..n+1 {\n        nth = n1 + n2 + n3 + n4;\n        n1 = n2;\n \
    \       n2 = n3;\n        n3 = n4;\n        n4 = nth;\n    }\n    return nth;\n\
    }\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n\
    \    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822469
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    let\
    \ mut state = [0, 0, 2, 0];\n    if n < 4 {\n        return state[n as usize];\n\
    \    }\n    for _ in 4..=n {\n        let new_state = [\n            state[0]\
    \ + state[1] + state[2] + state[3],\n            state[0],\n            state[1],\n\
    \            state[2],\n        ];\n        state = new_state;\n    }\n    state[0]\n\
    }\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n\
    \    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `28`', /tmp/tmps98feuev.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822469
- exit_code: 1
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    //\
    \ f(0) = 0, f(1) = 0, f(2) = 2, f(3) = 0, f(n) = f(n-1) + f(n-2) + f(n-3) + f(n-4)\n\
    \    // f(n) = 2*f(n-2) + f(n-3)\n    // f(n) = 2*(2*f(n-3) + f(n-4)) + f(n-3)\n\
    \    // f(n) = 4*f(n-3) + 2*f(n-4) + f(n-3)\n    // f(n) = 5*f(n-3) + 2*f(n-4)\n\
    \    // f(n) = 5*f(n-3) + 2*(2*f(n-4) + f(n-5))\n    // f(n) = 9*f(n-3) + 2*f(n-4)\
    \ + 2*f(n-5)\n    // f(n) = 11*f(n-3) + 2*f(n-4) + f(n-5)\n    // f(n) = 11*f(n-3)\
    \ + f(n-2) + f(n-4) + f(n-5)\n    // f(n) = 11*f(n-3) + f(n-2) + f(n-1) + f(n-5)\n\
    \    // f(n) = 11*f(n-3) + 2*f(n-2) + f(n-5)\n    // f(n) = 11*f(n-3) + 2*(2*f(n-3)\
    \ + f(n-4)) + f(n-5)\n    // f(n) = 22*f(n-3) + 2*f(n-4) + 2*f(n-5)\n    // f(n)\
    \ = 22*f(n-3) + f(n-4) + f(n-1) + f(n-5)\n    // f(n) = 22*f(n-3)\n}\n\nfn main()\
    \ {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpp__gk96v.rs:8:22\n  |\n8 |\
    \ fn fib4(n: isize) -> isize {\n  |    ----              ^^^^^ expected `isize`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822469
- exit_code: 0
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 0;\n    }\n    if n == 1 {\n        return 0;\n   \
    \ }\n    if n == 2 {\n        return 2;\n    }\n    if n == 3 {\n        return\
    \ 0;\n    }\n    let mut t = vec![0, 0, 2, 0];\n    for i in 4..(n + 1) {\n  \
    \      let x = t[0] + t[1] + t[2] + t[3];\n        t[0] = t[1];\n        t[1]\
    \ = t[2];\n        t[2] = t[3];\n        t[3] = x;\n    }\n    t[3]\n}\n\nfn main()\
    \ {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822469
- exit_code: 0
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 0;\n    } else if n == 1 {\n        return 0;\n   \
    \ } else if n == 2 {\n        return 2;\n    } else if n == 3 {\n        return\
    \ 0;\n    }\n\n    let mut f1 = 0;\n    let mut f2 = 0;\n    let mut f3 = 2;\n\
    \    let mut f4 = 0;\n    let mut next = f1 + f2 + f3 + f4;\n\n    for _ in 4..n\
    \ {\n        f1 = f2;\n        f2 = f3;\n        f3 = f4;\n        f4 = next;\n\
    \        next = f1 + f2 + f3 + f4;\n    }\n\n    next\n}\n\nfn main() {\n    let\
    \ candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822469
- exit_code: 1
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    fib4_helper(n,\
    \ 0, 0, 2, 0)\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `fib4_helper` in this scope\n --> /tmp/tmp5_vy94jb.rs:9:5\n\
    \  |\n9 |     fib4_helper(n, 0, 0, 2, 0)\n  |     ^^^^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822469
- exit_code: 0
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    let\
    \ mut v = vec![0, 0, 2, 0];\n    let mut i = v.len() as isize;\n    while i <=\
    \ n {\n        v.push(v[(i - 1) as usize] + v[(i - 2) as usize] + v[(i - 3) as\
    \ usize] + v[(i - 4) as usize]);\n        i += 1;\n    }\n    v[n as usize]\n\
    }\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n\
    \    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822469
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    let\
    \ mut fib4_0 = 0;\n    let mut fib4_1 = 0;\n    let mut fib4_2 = 2;\n    let mut\
    \ fib4_3 = 0;\n    let mut fib4_4 = 0;\n    for _ in 4..n {\n        fib4_4 =\
    \ fib4_0 + fib4_1 + fib4_2 + fib4_3;\n        fib4_0 = fib4_1;\n        fib4_1\
    \ = fib4_2;\n        fib4_2 = fib4_3;\n        fib4_3 = fib4_4;\n    }\n    fib4_4\n\
    }\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n\
    \    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp8g5yflnl.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822469
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 0;\n    }\n    if n == 1 {\n        return 0;\n   \
    \ }\n    if n == 2 {\n        return 2;\n    }\n    if n == 3 {\n        return\
    \ 0;\n    }\n    let mut p2 = 0;\n    let mut p1 = 0;\n    let mut p = 2;\n  \
    \  let mut i = 4;\n    while i <= n {\n        let cur = p2 + p1 + p;\n      \
    \  p2 = p1;\n        p1 = p;\n        p = cur;\n        i += 1;\n    }\n    p\n\
    }\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n\
    \    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `26`,\n right: `28`', /tmp/tmpbgt0ldhz.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822469
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    //\
    \ TODO\n    0\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `4`', /tmp/tmplt6ldfgq.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822469
- exit_code: 0
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    match\
    \ n {\n        0 => 0,\n        1 => 0,\n        2 => 2,\n        3 => 0,\n  \
    \      _ => fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4),\n    }\n}\n\
    \nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n \
    \   assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822469
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    let\
    \ mut prev_prev_prev = 0;\n    let mut prev_prev = 0;\n    let mut prev = 0;\n\
    \    let mut curr = 2;\n    for _ in 0..n {\n        prev_prev_prev = prev_prev;\n\
    \        prev_prev = prev;\n        prev = curr;\n        curr = prev_prev_prev\
    \ + prev_prev + prev + curr;\n    }\n    curr\n}\n\nfn main() {\n    let candidate\
    \ = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n\
    \    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `168`,\n right: `4`', /tmp/tmpi0wg4g3n.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822470
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 0;\n    }\n    if n == 1 {\n        return 0;\n   \
    \ }\n    if n == 2 {\n        return 2;\n    }\n    if n == 3 {\n        return\
    \ 0;\n    }\n    if n == 4 {\n        return 2;\n    }\n    let mut lhs = 2;\n\
    \    let mut rhs = 0;\n    let mut prev_lhs = 2;\n    let mut prev_rhs = 0;\n\
    \    for _ in 5..n + 1 {\n        let tmp = lhs;\n        lhs = lhs + rhs + prev_lhs\
    \ + prev_rhs;\n        prev_rhs = rhs;\n        rhs = tmp;\n        prev_lhs =\
    \ prev_lhs + prev_rhs;\n    }\n    lhs\n}\n\nfn main() {\n    let candidate =\
    \ fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n\
    \    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `38`,\n right: `28`', /tmp/tmpzdrxisyq.rs:41:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822470
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    let\
    \ mut a = 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n   \
    \ for _ in 4..n {\n        d = c + b + a;\n        a = b;\n        b = c;\n  \
    \      c = d;\n    }\n    d\n}\n\nfn main() {\n    let candidate = fib4;\n   \
    \ assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10),\
    \ 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmphqhel5fo.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822470
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n\
    \    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpn2iszzvd.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822470
- exit_code: 0
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    if\
    \ n < 0 {\n        panic!(\"Fib4 sequence is not defined for negative numbers.\"\
    );\n    }\n    if n == 0 {\n        return 0;\n    }\n    if n == 1 {\n      \
    \  return 0;\n    }\n    if n == 2 {\n        return 2;\n    }\n    if n == 3\
    \ {\n        return 0;\n    }\n    let mut f1 = 0;\n    let mut f2 = 0;\n    let\
    \ mut f3 = 2;\n    let mut f4 = 0;\n    let mut out = 0;\n    for _ in 4..n +\
    \ 1 {\n        out = f1 + f2 + f3 + f4;\n        f1 = f2;\n        f2 = f3;\n\
    \        f3 = f4;\n        f4 = out;\n    }\n    out\n}\n\nfn main() {\n    let\
    \ candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822470
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    //\
    \ TODO\n    0\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `4`', /tmp/tmplt6ldfgq.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822469
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    match\
    \ n {\n        0 => 0,\n        1 => 0,\n        2 => 2,\n        3 => 0,\n  \
    \      _ => {\n            let mut a = 0;\n            let mut b = 0;\n      \
    \      let mut c = 2;\n            let mut d = 0;\n            for _ in 4..n {\n\
    \                let new_a = d;\n                let new_b = a;\n            \
    \    let new_c = b + c + d;\n                let new_d = b;\n                a\
    \ = new_a;\n                b = new_b;\n                c = new_c;\n         \
    \       d = new_d;\n            }\n            a + b + c + d\n        }\n    }\n\
    }\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n\
    \    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpugdcn3wy.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822470
- exit_code: 0
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    if\
    \ n < 4 {\n        return 2 - n;\n    }\n    let mut a = 0;\n    let mut b = 0;\n\
    \    let mut c = 2;\n    let mut d = 0;\n    for _ in 4..n {\n        let t =\
    \ a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d =\
    \ t;\n    }\n    a + b + c + d\n}\n\nfn main() {\n    let candidate = fib4;\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10),\
    \ 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822470
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    //\
    \ TODO\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = fib4;\n  \
    \  assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10),\
    \ 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmputcmt6jo.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822470
- exit_code: 0
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    let\
    \ mut a = 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n   \
    \ for _ in 4..n {\n        let a_next = a + b + c + d;\n        a = b;\n     \
    \   b = c;\n        c = d;\n        d = a_next;\n    }\n    a + b + c + d\n}\n\
    \nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n \
    \   assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822470
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 0;\n    }\n    if n == 1 {\n        return 0;\n   \
    \ }\n    if n == 2 {\n        return 2;\n    }\n    if n == 3 {\n        return\
    \ 0;\n    }\n    let mut i: isize = 4;\n    let mut n_minus_1: isize = 0;\n  \
    \  let mut n_minus_2: isize = 0;\n    let mut n_minus_3: isize = 2;\n    let mut\
    \ n_minus_4: isize = 0;\n    let mut result: isize = 0;\n    while i <= n {\n\
    \        result = n_minus_1 + n_minus_2 + n_minus_3 + n_minus_4;\n        n_minus_4\
    \ = n_minus_3;\n        n_minus_3 = n_minus_2;\n        n_minus_2 = n_minus_1;\n\
    \        n_minus_1 = result;\n        i += 1;\n    }\n    return result;\n}\n\n\
    fn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n   \
    \ assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `28`', /tmp/tmpwmbf7oyt.rs:41:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822470
- exit_code: 0
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    if\
    \ n < 2 {\n        return 0;\n    }\n    if n == 2 {\n        return 2;\n    }\n\
    \    if n == 3 {\n        return 0;\n    }\n    let mut f1 = 0;\n    let mut f2\
    \ = 0;\n    let mut f3 = 2;\n    let mut f4 = 0;\n    let mut sum = 0;\n    for\
    \ _ in 4..(n + 1) {\n        sum = f1 + f2 + f3 + f4;\n        f1 = f2;\n    \
    \    f2 = f3;\n        f3 = f4;\n        f4 = sum;\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822470
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    if\
    \ n < 0 {\n        panic!(\"n must be non-negative\");\n    }\n    if n < 2 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 2;\n    }\n    let\
    \ mut f0 = 0;\n    let mut f1 = 0;\n    let mut f2 = 2;\n    let mut f3 = 0;\n\
    \    for _ in 4..=n {\n        f3 = f0 + f1 + f2 + f3;\n        f0 = f1;\n   \
    \     f1 = f2;\n        f2 = f3;\n    }\n    f3\n}\n\nfn main() {\n    let candidate\
    \ = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n\
    \    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `4`', /tmp/tmp9wmbarie.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822470
- exit_code: 0
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    let\
    \ mut f0 = 0;\n    let mut f1 = 0;\n    let mut f2 = 2;\n    let mut f3 = 0;\n\
    \    if n == 0 {\n        return f0;\n    }\n    if n == 1 {\n        return f1;\n\
    \    }\n    if n == 2 {\n        return f2;\n    }\n    if n == 3 {\n        return\
    \ f3;\n    }\n    for _ in 4..n+1 {\n        let f4 = f0 + f1 + f2 + f3;\n   \
    \     f0 = f1;\n        f1 = f2;\n        f2 = f3;\n        f3 = f4;\n    }\n\
    \    return f3;\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822470
- exit_code: 0
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    let\
    \ fib4_table = [0, 0, 2, 0];\n    if n < 4 {\n        return fib4_table[n as usize];\n\
    \    }\n    let mut fib4_n_1 = fib4_table[3];\n    let mut fib4_n_2 = fib4_table[2];\n\
    \    let mut fib4_n_3 = fib4_table[1];\n    let mut fib4_n_4 = fib4_table[0];\n\
    \    let mut result = 0;\n    for _ in 4..n+1 {\n        result = fib4_n_1 + fib4_n_2\
    \ + fib4_n_3 + fib4_n_4;\n        fib4_n_4 = fib4_n_3;\n        fib4_n_3 = fib4_n_2;\n\
    \        fib4_n_2 = fib4_n_1;\n        fib4_n_1 = result;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n\
    \    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822470
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    if\
    \ n < 0 {\n        panic!(\"arg must be >= 0\");\n    }\n    let mut x = (0, 0,\
    \ 2, 0);\n    for _ in 0..n {\n        x = (x.3, x.0, x.1, x.2 + x.3 + x.0 + x.1);\n\
    \    }\n    x.3\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `16`,\n right: `4`', /tmp/tmp9cxcoyny.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822470
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 0;\n    }\n    if n == 1 {\n        return 0;\n   \
    \ }\n    if n == 2 {\n        return 2;\n    }\n    if n == 3 {\n        return\
    \ 0;\n    }\n    let mut n_minus_1 = 0;\n    let mut n_minus_2 = 0;\n    let mut\
    \ n_minus_3 = 2;\n    let mut n_minus_4 = 0;\n    let mut current = 0;\n    for\
    \ i in 4..n+1 {\n        current = n_minus_1 + n_minus_2 + n_minus_3 + n_minus_4;\n\
    \        n_minus_4 = n_minus_3;\n        n_minus_3 = n_minus_2;\n        n_minus_2\
    \ = n_minus_1;\n        n_minus_1 = current;\n    }\n    return current;\n}\n\n\
    fn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n   \
    \ assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `28`', /tmp/tmp7seyt_9u.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822470
- exit_code: 0
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 0;\n    }\n    if n == 1 {\n        return 0;\n   \
    \ }\n    if n == 2 {\n        return 2;\n    }\n    if n == 3 {\n        return\
    \ 0;\n    }\n    let mut vec: Vec<isize> = vec![0, 0, 2, 0];\n    for i in 4..n\
    \ + 1 {\n        let a = vec[0];\n        let b = vec[1];\n        let c = vec[2];\n\
    \        let d = vec[3];\n        vec[0] = b;\n        vec[1] = c;\n        vec[2]\
    \ = d;\n        vec[3] = a + b + c + d;\n    }\n    vec[3]\n}\n\nfn main() {\n\
    \    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822470
- exit_code: 0
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 0;\n    }\n    if n == 1 {\n        return 0;\n   \
    \ }\n    if n == 2 {\n        return 2;\n    }\n    if n == 3 {\n        return\
    \ 0;\n    }\n    let mut prev = (0, 0, 2, 0);\n    for _ in 4..=n {\n        prev\
    \ = (prev.1, prev.2, prev.3, prev.0 + prev.1 + prev.2 + prev.3);\n    }\n    prev.3\n\
    }\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n\
    \    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822470
- exit_code: 1
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    let\
    \ mut arr = [0, 0, 2, 0];\n    for i in 3..n {\n        arr[i%4] = arr[(i-1)%4]\
    \ + arr[(i-2)%4] + arr[(i-3)%4] + arr[(i-4)%4];\n    }\n    arr[(n-1)%4]\n}\n\n\
    fn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n   \
    \ assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  -->\
    \ /tmp/tmpczy7jc22.rs:11:9\n   |\n11 |         arr[i%4] = arr[(i-1)%4] + arr[(i-2)%4]\
    \ + arr[(i-3)%4] + arr[(i-4)%4];\n   |         ^^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `[{integer}]`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpczy7jc22.rs:11:20\n   |\n11 |  \
    \       arr[i%4] = arr[(i-1)%4] + arr[(i-2)%4] + arr[(i-3)%4] + arr[(i-4)%4];\n\
    \   |                    ^^^^^^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `[{integer}]`\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmpczy7jc22.rs:11:35\n   |\n11 |         arr[i%4]\
    \ = arr[(i-1)%4] + arr[(i-2)%4] + arr[(i-3)%4] + arr[(i-4)%4];\n   |         \
    \                          ^^^^^^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `[{integer}]`\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmpczy7jc22.rs:11:50\n   |\n11 |         arr[i%4]\
    \ = arr[(i-1)%4] + arr[(i-2)%4] + arr[(i-3)%4] + arr[(i-4)%4];\n   |         \
    \                                         ^^^^^^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `[{integer}]`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpczy7jc22.rs:11:65\n   |\n11 |  \
    \       arr[i%4] = arr[(i-1)%4] + arr[(i-2)%4] + arr[(i-3)%4] + arr[(i-4)%4];\n\
    \ "
  stdout: ''
  timestamp: 1659822470
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    let\
    \ mut v = vec![0, 0, 2, 0];\n    if n < 4 {\n        return v[n as usize];\n \
    \   }\n    for i in 4..n + 1 {\n        let last = v.pop().unwrap();\n       \
    \ let new = v.iter().sum();\n        v.insert(0, last);\n        v.insert(0, new);\n\
    \    }\n    return v[3];\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `4`', /tmp/tmpmb42dpcc.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822470
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n\
    \    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpn2iszzvd.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822470
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    0\n\
    }\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n\
    \    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `4`', /tmp/tmp9zpcw961.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822470
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 0;\n    }\n    let mut a = 0;\n    let mut b = 0;\n\
    \    let mut c = 2;\n    let mut d = 0;\n    for _ in 3..n + 1 {\n        let\
    \ new_a = b;\n        let new_b = c;\n        let new_c = d + a + b + c;\n   \
    \     let new_d = a;\n        a = new_a;\n        b = new_b;\n        c = new_c;\n\
    \        d = new_d;\n    }\n    return a + b + c + d;\n}\n\nfn main() {\n    let\
    \ candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `16`,\n right: `4`', /tmp/tmp0z899f7t.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822470
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    let\
    \ mut a: isize = 0;\n    let mut b: isize = 0;\n    let mut c: isize = 2;\n  \
    \  let mut d: isize = 0;\n    let mut ans: isize = 0;\n    if n == 0 {\n     \
    \   return 0;\n    }\n    for _ in 3..n + 1 {\n        ans = a + b + c + d;\n\
    \        a = b;\n        b = c;\n        c = d;\n        d = ans;\n    }\n   \
    \ ans\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `4`', /tmp/tmpnu_ogxnu.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822470
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    use\
    \ std::cmp::Ordering;\n    if n == 0 {\n        return 0;\n    }\n    let mut\
    \ a = 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n    let\
    \ mut e = 0;\n    let mut i = 0;\n    while i < n {\n        match i.cmp(&3) {\n\
    \            Ordering::Less => (),\n            Ordering::Equal => {\n       \
    \         d = b;\n                e = c;\n            }\n            Ordering::Greater\
    \ => {\n                a = b;\n                b = c;\n                c = d\
    \ + e + c;\n                d = a;\n                e = b;\n            }\n  \
    \      }\n        i += 1;\n    }\n    c\n}\n\nfn main() {\n    let candidate =\
    \ fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n\
    \    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `22`,\n right: `28`', /tmp/tmpuw_8t24n.rs:42:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822470
- exit_code: 0
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 0;\n    } else if n == 1 {\n        return 0;\n   \
    \ } else if n == 2 {\n        return 2;\n    } else if n == 3 {\n        return\
    \ 0;\n    }\n\n    let mut n0 = 0;\n    let mut n1 = 0;\n    let mut n2 = 2;\n\
    \    let mut n3 = 0;\n    let mut n4 = 0;\n\n    for _ in 0..n-3 {\n        n4\
    \ = n0 + n1 + n2 + n3;\n        n0 = n1;\n        n1 = n2;\n        n2 = n3;\n\
    \        n3 = n4;\n    }\n\n    n4\n}\n\nfn main() {\n    let candidate = fib4;\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10),\
    \ 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822470
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    if\
    \ n < 0 {\n        return -1;\n    }\n    if n == 0 {\n        return 0;\n   \
    \ }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n        return\
    \ 2;\n    }\n    if n == 3 {\n        return 0;\n    }\n    let mut arr = [0;\
    \ 4];\n    arr[0] = 0;\n    arr[1] = 0;\n    arr[2] = 2;\n    arr[3] = 0;\n  \
    \  for i in 4..n {\n        let temp = arr[3];\n        arr[3] = arr[0] + arr[1]\
    \ + arr[2] + arr[3];\n        arr[0] = arr[1];\n        arr[1] = arr[2];\n   \
    \     arr[2] = temp;\n    }\n    return arr[3];\n}\n\nfn main() {\n    let candidate\
    \ = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n\
    \    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpy8sgxrgz.rs:41:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822470
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    let\
    \ mut x = 0;\n    let mut y = 0;\n    let mut z = 2;\n    let mut w = 0;\n   \
    \ for _ in 0..n-3 {\n        x = y;\n        y = z;\n        z = w;\n        w\
    \ = x + y + z + w;\n    }\n    w\n}\n\nfn main() {\n    let candidate = fib4;\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10),\
    \ 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `4`', /tmp/tmp5jn8_7v1.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822470
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n  if\
    \ n < 0 {\n    panic!(\"n must be greater than or equal to 0!\");\n  }\n  match\
    \ n {\n    0 => 0,\n    1 => 0,\n    2 => 2,\n    3 => 0,\n    _ => {\n      let\
    \ mut a: isize = 0;\n      let mut b: isize = 0;\n      let mut c: isize = 2;\n\
    \      let mut d: isize = 0;\n      for _ in 4..(n+1) {\n        let temp = a;\n\
    \        a = b;\n        b = c;\n        c = d;\n        d = temp + b + c + d;\n\
    \      }\n      d\n    }\n  }\n}\n\nfn main() {\n    let candidate = fib4;\n \
    \   assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10),\
    \ 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `70`,\n right: `28`', /tmp/tmpymfjqobw.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822470
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    let\
    \ mut fib4_0 = 0;\n    let mut fib4_1 = 0;\n    let mut fib4_2 = 2;\n    let mut\
    \ fib4_3 = 0;\n    let mut fib4_n = 0;\n    if n <= 3 {\n        fib4_n = match\
    \ n {\n            0 => 0,\n            1 => 0,\n            2 => 2,\n       \
    \     3 => 0,\n            _ => panic!(\"Invalid argument to fib4: {}\", n),\n\
    \        }\n    } else {\n        for _ in 4..n {\n            fib4_n = fib4_0\
    \ + fib4_1 + fib4_2 + fib4_3;\n            fib4_0 = fib4_1;\n            fib4_1\
    \ = fib4_2;\n            fib4_2 = fib4_3;\n            fib4_3 = fib4_n;\n    \
    \    }\n    }\n    fib4_n\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpr9jd7uus.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822470
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    //\
    \ TODO\n    0\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `4`', /tmp/tmplt6ldfgq.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822469
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    match\
    \ n {\n        0 => 0,\n        1 => 0,\n        2 => 2,\n        3 => 0,\n  \
    \      4 => 5,\n        _ => {\n            let mut prev = [0, 0, 2, 0];\n   \
    \         for _ in 4..n {\n                let last = prev[3];\n             \
    \   prev[3] = prev[2] + prev[1] + prev[0] + last;\n                prev[0] = prev[1];\n\
    \                prev[1] = prev[2];\n                prev[2] = last;\n       \
    \     }\n            prev[3]\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n\
    \    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpf1k72zjw.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822470
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    if\
    \ n < 4 {\n        return [0, 0, 2, 0][n as usize];\n    }\n    let mut x1 = 0;\n\
    \    let mut x2 = 0;\n    let mut x3 = 2;\n    let mut x4 = 0;\n    let mut x5\
    \ = 0;\n    for _ in 4..n {\n        x5 = x1 + x2 + x3 + x4;\n        x1 = x2;\n\
    \        x2 = x3;\n        x3 = x4;\n        x4 = x5;\n    }\n    x5\n}\n\nfn\
    \ main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpzg7kt3tg.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822470
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 0;\n    }\n    if n == 1 {\n        return 0;\n   \
    \ }\n    if n == 2 {\n        return 2;\n    }\n    if n == 3 {\n        return\
    \ 0;\n    }\n    let mut n_minus_1 = 2;\n    let mut n_minus_2 = 0;\n    let mut\
    \ n_minus_3 = 0;\n    let mut n_minus_4 = 0;\n    let mut n_minus_5 = 0;\n   \
    \ for _ in 4..n {\n        n_minus_5 = n_minus_4;\n        n_minus_4 = n_minus_3;\n\
    \        n_minus_3 = n_minus_2;\n        n_minus_2 = n_minus_1;\n        n_minus_1\
    \ = n_minus_1 + n_minus_2 + n_minus_3 + n_minus_4 + n_minus_5;\n    }\n    n_minus_1\n\
    }\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n\
    \    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `68`,\n right: `28`', /tmp/tmpqmah3aqd.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822470
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    match\
    \ n {\n        0 => 0,\n        1 => 0,\n        2 => 2,\n        3 => 0,\n  \
    \      _ => {\n            let mut a = 0;\n            let mut b = 0;\n      \
    \      let mut c = 2;\n            let mut d = 0;\n            for _ in 4..n+1\
    \ {\n                d = a + b + c;\n                a = b;\n                b\
    \ = c;\n                c = d;\n            }\n            d\n        }\n    }\n\
    }\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n\
    \    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `26`,\n right: `28`', /tmp/tmpxgaswqtx.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822470
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    if\
    \ n < 2 {\n        return 0;\n    }\n    if n == 2 {\n        return 2;\n    }\n\
    \    let mut t0 = 0;\n    let mut t1 = 0;\n    let mut t2 = 2;\n    let mut t3\
    \ = 0;\n    for _ in 4..n + 1 {\n        t3 = t0 + t1 + t2;\n        t0 = t1;\n\
    \        t1 = t2;\n        t2 = t3;\n    }\n    t3\n}\n\nfn main() {\n    let\
    \ candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `26`,\n right: `28`', /tmp/tmpy7fstk0n.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822470
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    //\
    \ TODO: Implement solution here\n    let mut a = 0;\n    let mut b = 0;\n    let\
    \ mut c = 2;\n    let mut d = 0;\n    let mut i = 2;\n    while i < n {\n    \
    \    a = b;\n        b = c;\n        c = d;\n        d = a + b + c;\n        i\
    \ += 1;\n    }\n    a + b + c + d\n}\n\nfn main() {\n    let candidate = fib4;\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10),\
    \ 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `4`', /tmp/tmptxw8wt7b.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822470
- exit_code: 0
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    let\
    \ mut a: isize = 0;\n    let mut b: isize = 0;\n    let mut c: isize = 2;\n  \
    \  let mut d: isize = 0;\n    let mut temp: isize = 0;\n    if n == 0 {\n    \
    \    return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n ==\
    \ 2 {\n        return 2;\n    }\n    if n == 3 {\n        return 0;\n    }\n \
    \   for i in 4..n+1 {\n        temp = a + b + c + d;\n        a = b;\n       \
    \ b = c;\n        c = d;\n        d = temp;\n    }\n    return d;\n}\n\nfn main()\
    \ {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822470
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    let\
    \ (mut a, mut b, mut c, mut d) = (0, 0, 2, 0);\n    for _ in 4..n+1 {\n      \
    \  let t = a;\n        a = b;\n        b = c;\n        c = d;\n        d = t +\
    \ b + c + d;\n    }\n    d\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `70`,\n right: `28`', /tmp/tmp4g26ebve.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822470
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    let\
    \ mut current = 0;\n    let mut prev1 = 0;\n    let mut prev2 = 0;\n    let mut\
    \ prev3 = 0;\n    let mut prev4 = 0;\n    let mut next = 0;\n    if n == 0 {\n\
    \        next = 0;\n    } else if n == 1 {\n        next = 0;\n    } else if n\
    \ == 2 {\n        next = 2;\n    } else if n == 3 {\n        next = 0;\n    }\
    \ else {\n        current = 3;\n        prev1 = 0;\n        prev2 = 0;\n     \
    \   prev3 = 2;\n        prev4 = 0;\n        next = 0;\n        while current <\
    \ n {\n            next = prev1 + prev2 + prev3 + prev4;\n            prev4 =\
    \ prev3;\n            prev3 = prev2;\n            prev2 = prev1;\n           \
    \ prev1 = next;\n            current += 1;\n        }\n    }\n    next\n}\n\n\
    fn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n   \
    \ assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `28`', /tmp/tmprxd92gnp.rs:45:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822470
- exit_code: 0
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    if\
    \ n < 2 {\n        return 0;\n    }\n    if n == 2 {\n        return 2;\n    }\n\
    \    if n == 3 {\n        return 0;\n    }\n    let mut a = 0;\n    let mut b\
    \ = 0;\n    let mut c = 2;\n    let mut d = 0;\n    for _ in 4..n {\n        let\
    \ temp = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n    \
    \    d = temp;\n    }\n    a + b + c + d\n}\n\nfn main() {\n    let candidate\
    \ = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n\
    \    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822470
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    if\
    \ n < 0 {\n        return 0;\n    }\n    if n < 3 {\n        return n * 2;\n \
    \   }\n    if n == 3 {\n        return 0;\n    }\n    let mut i = 1;\n    let\
    \ mut j = 2;\n    let mut k = 0;\n    let mut m = 0;\n    let mut n = n - 3;\n\
    \    while n > 0 {\n        m = i + j + k;\n        i = j;\n        j = k;\n \
    \       k = m;\n        n -= 1;\n    }\n    m\n}\n\nfn main() {\n    let candidate\
    \ = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n\
    \    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `4`', /tmp/tmpumsqngnd.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822470
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    use\
    \ std::cmp::min;\n    match n {\n        0 => 0,\n        1 => 0,\n        2 =>\
    \ 2,\n        3 => 0,\n        4 => 6,\n        _ => {\n            let mut a:\
    \ isize = 6;\n            let mut b: isize = 0;\n            let mut c: isize\
    \ = 2;\n            let mut d: isize = 0;\n            for i in 5..n+1 {\n   \
    \             d = a + b + c;\n                b = c;\n                c = d;\n\
    \                a = b + c;\n            }\n            d\n        }\n    }\n\
    }\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n\
    \    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `4`', /tmp/tmpqsitv919.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822470
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    //\
    \ TODO: unimplemented!();\n    // Hint: you may need a couple of helper variables\
    \ in addition to the output variable.\n    // Hint: you may want to use a match\
    \ statement, or to use a tuple.\n    let mut prev4: isize = 0;\n    let mut prev3:\
    \ isize = 0;\n    let mut prev2: isize = 2;\n    let mut prev1: isize = 0;\n \
    \   let mut ret: isize = 0;\n    match n {\n        0 => ret = 0,\n        1 =>\
    \ ret = 0,\n        2 => ret = 2,\n        3 => ret = 0,\n        _ => ret = 0,\n\
    \    }\n    for _i in 4..n {\n        ret = prev4 + prev3 + prev2 + prev1;\n \
    \       prev4 = prev3;\n        prev3 = prev2;\n        prev2 = prev1;\n     \
    \   prev1 = ret;\n    }\n    ret\n}\n\nfn main() {\n    let candidate = fib4;\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10),\
    \ 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpkzzk8_2v.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822470
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n\
    \    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpn2iszzvd.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822470
- exit_code: 0
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    let\
    \ mut f0 = 0;\n    let mut f1 = 0;\n    let mut f2 = 2;\n    let mut f3 = 0;\n\
    \    if n == 0 {\n        f0\n    } else if n == 1 {\n        f1\n    } else if\
    \ n == 2 {\n        f2\n    } else if n == 3 {\n        f3\n    } else {\n   \
    \     for _ in 4..n + 1 {\n            let f4 = f3 + f2 + f1 + f0;\n         \
    \   f0 = f1;\n            f1 = f2;\n            f2 = f3;\n            f3 = f4;\n\
    \        }\n        f3\n    }\n}\n\nfn main() {\n    let candidate = fib4;\n \
    \   assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10),\
    \ 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822470
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    let\
    \ mut a = 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n   \
    \ let mut count = 3;\n    while count <= n {\n        d = a + b + c;\n       \
    \ a = b;\n        b = c;\n        c = d;\n        count += 1;\n    }\n    d\n\
    }\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n\
    \    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `4`', /tmp/tmp1pyx1808.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822470
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    let\
    \ mut a = 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n   \
    \ for _ in 3..n+1 {\n        let e = a + b + c + d;\n        a = b;\n        b\
    \ = c;\n        c = d;\n        d = e;\n    }\n    d\n}\n\nfn main() {\n    let\
    \ candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `4`', /tmp/tmphheb1xys.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822470
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    if\
    \ n < 0 {\n        return 0;\n    }\n    let mut fib: Vec<isize> = vec![0, 0,\
    \ 2, 0];\n    let mut i = fib.len() as isize;\n    while i <= n {\n        fib.push(fib[((i\
    \ - 1) % 4) as usize] + fib[((i - 2) % 4) as usize] + fib[((i - 3) % 4) as usize]\
    \ + fib[((i - 4) % 4) as usize]);\n        i += 1;\n    }\n    fib[(n % 4) as\
    \ usize]\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `4`', /tmp/tmp077sj20p.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822470
- exit_code: 1
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    fib3(n)\
    \ + fib2(n)\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `fib3` in this scope\n --> /tmp/tmpua0rxukl.rs:9:5\n\
    \  |\n9 |     fib3(n) + fib2(n)\n  |     ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `fib2` in this scope\n --> /tmp/tmpua0rxukl.rs:9:15\n \
    \ |\n9 |     fib3(n) + fib2(n)\n  |               ^^^^ not found in this scope\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822470
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    let\
    \ mut a: isize = 0;\n    let mut b: isize = 0;\n    let mut c: isize = 2;\n  \
    \  let mut d: isize = 0;\n    for _ in 2..n {\n        d = a + b + c;\n      \
    \  a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main() {\n  \
    \  let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `4`', /tmp/tmp0grpr9_v.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822470
- exit_code: 0
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 0;\n    } else if n == 1 {\n        return 0;\n   \
    \ } else if n == 2 {\n        return 2;\n    } else if n == 3 {\n        return\
    \ 0;\n    }\n\n    let mut res: isize = 0;\n    let mut i: isize = 3;\n    let\
    \ mut f1: isize = 0;\n    let mut f2: isize = 0;\n    let mut f3: isize = 2;\n\
    \    let mut f4: isize = 0;\n\n    while i < n {\n        res = f1 + f2 + f3 +\
    \ f4;\n        f1 = f2;\n        f2 = f3;\n        f3 = f4;\n        f4 = res;\n\
    \        i += 1;\n    }\n\n    res\n}\n\nfn main() {\n    let candidate = fib4;\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10),\
    \ 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822470
- exit_code: 0
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    if\
    \ n < 0 {\n        panic!(\"Invalid input\");\n    }\n    let mut result = vec![0,\
    \ 0, 2, 0];\n    for i in 4..=n {\n        result.push(result[i as usize - 1]\
    \ + result[i as usize - 2] + result[i as usize - 3] + result[i as usize - 4]);\n\
    \    }\n    result[n as usize]\n}\n\nfn main() {\n    let candidate = fib4;\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10),\
    \ 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822471
- exit_code: 0
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    match\
    \ n {\n        0 => 0,\n        1 => 0,\n        2 => 2,\n        3 => 0,\n  \
    \      _ => fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4),\n    }\n}\n\
    \nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n \
    \   assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822469
- exit_code: 0
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    let\
    \ mut f0 = 0;\n    let mut f1 = 0;\n    let mut f2 = 2;\n    let mut f3 = 0;\n\
    \    let mut fn_1 = 0;\n    let mut i = 3;\n    if n == 0 {\n        return f0;\n\
    \    }\n    if n == 1 {\n        return f1;\n    }\n    if n == 2 {\n        return\
    \ f2;\n    }\n    if n == 3 {\n        return f3;\n    }\n    while i < n {\n\
    \        fn_1 = f0 + f1 + f2 + f3;\n        f0 = f1;\n        f1 = f2;\n     \
    \   f2 = f3;\n        f3 = fn_1;\n        i += 1;\n    }\n    fn_1\n}\n\nfn main()\
    \ {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822471
- exit_code: 0
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    let\
    \ mut sequence = vec![0, 0, 2, 0];\n    if n <= 3 {\n        return sequence[n\
    \ as usize];\n    }\n    for i in 4..=n {\n        let x = sequence[i as usize\
    \ - 1] + sequence[i as usize - 2] + sequence[i as usize - 3] + sequence[i as usize\
    \ - 4];\n        sequence.push(x);\n    }\n    sequence[n as usize]\n}\n\nfn main()\
    \ {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822471
- exit_code: 0
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    let\
    \ mut n1 = 0;\n    let mut n2 = 0;\n    let mut n3 = 2;\n    let mut n4 = 0;\n\
    \    let mut n5 = 0;\n    let mut result = 0;\n    if n == 0 {\n        return\
    \ 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n    \
    \    return 2;\n    }\n    if n == 3 {\n        return 0;\n    }\n    for i in\
    \ 4..n+1 {\n        result = n1 + n2 + n3 + n4;\n        n1 = n2;\n        n2\
    \ = n3;\n        n3 = n4;\n        n4 = result;\n    }\n    return result;\n}\n\
    \nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n \
    \   assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822471
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    let\
    \ mut fib1 = 0;\n    let mut fib2 = 0;\n    let mut fib3 = 2;\n    let mut fib4\
    \ = 0;\n    let mut cur = 3;\n    while cur < n {\n        fib4 = fib1 + fib2\
    \ + fib3 + fib4;\n        fib1 = fib2;\n        fib2 = fib3;\n        fib3 = fib4;\n\
    \        cur += 1;\n    }\n    fib1 + fib2 + fib3 + fib4\n}\n\nfn main() {\n \
    \   let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `16`,\n right: `4`', /tmp/tmpyrovw0ln.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822471
- exit_code: 1
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    //\
    \ It's possible to compute n-th number of the sequence\n    // by using the following\
    \ matrix formula:\n    //\n    // | f(n)     |     | 1  1  1  1 | | f(n-1) |\n\
    \    // | f(n-1)   |  =  | 1  0  0  0 | | f(n-2) |\n    // | f(n-2)   |     |\
    \ 0  1  0  0 | | f(n-3) |\n    // | f(n-3)   |     | 0  0  1  0 | | f(n-4) |\n\
    \    //\n    // Let's compute an n-th power of matrix M\n    // and multiply it\
    \ by | f(1) |.\n    //\n    // M^n = M * M^(n-1)\n    //\n    //        | 1  1\
    \  1  1 | | f(n-1) |\n    // f(n) = | 1  0  0  0 | | f(n-2) |\n    //        |\
    \ 0  1  0  0 | | f(n-3) |\n    //        | 0  0  1  0 | | f(n-4) |\n    //\n \
    \   // To do that efficiently let's use binary exponentiation.\n    // e.g. a^5\
    \ = a^2 * a^2 * a\n\n    let mut a = vec![vec![0, 0, 0, 0], vec![0, 0, 0, 0],\
    \ vec![0, 0, 0, 0], vec![0, 0, 0, 0]];\n    a[0][0] = 1;\n    a[0][1] = 1;\n \
    \   a[0][2] = 1;\n    a[0][3] = 1;\n    a[1][0] = 1;\n    a[2][1] = 1;\n    a[3][2]\
    \ = 1;\n\n    let mut b = vec![vec![0, 0, 0, 0], vec![0, 0, 0, 0], vec![0, 0,\
    \ 0, 0], vec![0, 0, 0, 0]];\n\n}\n\nfn main() {\n    let candidate = fib4;\n \
    \   assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10),\
    \ 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp6zie161p.rs:8:22\n  |\n8 |\
    \ fn fib4(n: isize) -> isize {\n  |    ----              ^^^^^ expected `isize`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822470
- exit_code: 0
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n  let\
    \ mut first = 0;\n  let mut second = 0;\n  let mut third = 2;\n  let mut fourth\
    \ = 0;\n  if n == 0 {\n    return first;\n  }\n  if n == 1 {\n    return second;\n\
    \  }\n  if n == 2 {\n    return third;\n  }\n  if n == 3 {\n    return fourth;\n\
    \  }\n  for _ in 4..n {\n    let temp = first + second + third + fourth;\n   \
    \ first = second;\n    second = third;\n    third = fourth;\n    fourth = temp;\n\
    \  }\n  return first + second + third + fourth;\n}\n\nfn main() {\n    let candidate\
    \ = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n\
    \    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822471
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    let\
    \ mut a = 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n   \
    \ for _ in 0..n {\n        d = c + a + b;\n        a = b;\n        b = c;\n  \
    \      c = d;\n    }\n    d\n}\n\nfn main() {\n    let candidate = fib4;\n   \
    \ assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10),\
    \ 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `26`,\n right: `4`', /tmp/tmp52tlph01.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822471
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    let\
    \ mut a = 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n   \
    \ for _ in 0..n {\n        d = a + b + c;\n        a = b;\n        b = c;\n  \
    \      c = d;\n    }\n    d\n}\n\nfn main() {\n    let candidate = fib4;\n   \
    \ assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10),\
    \ 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `26`,\n right: `4`', /tmp/tmpxuakx4wi.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822471
- exit_code: 0
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    match\
    \ n {\n        0 => 0,\n        1 => 0,\n        2 => 2,\n        3 => 0,\n  \
    \      _ => fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4),\n    }\n}\n\
    \nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n \
    \   assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822469
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    let\
    \ mut a = 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n   \
    \ let mut i = 2;\n    while i < n {\n        a = b;\n        b = c;\n        c\
    \ = d;\n        d = a + b + c;\n        i += 1;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `4`', /tmp/tmpd749vjwu.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822471
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    let\
    \ mut fib1 = 0;\n    let mut fib2 = 0;\n    let mut fib3 = 2;\n    let mut fib4\
    \ = 0;\n    if n < 3 {\n        return 2;\n    }\n    for _ in 3..n {\n      \
    \  fib4 = fib1 + fib2 + fib3 + fib4;\n        fib1 = fib2;\n        fib2 = fib3;\n\
    \        fib3 = fib4;\n    }\n    fib4\n}\n\nfn main() {\n    let candidate =\
    \ fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n\
    \    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `4`', /tmp/tmp4k9qvyya.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822471
- exit_code: 0
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    match\
    \ n {\n        0 => 0,\n        1 => 0,\n        2 => 2,\n        3 => 0,\n  \
    \      n => fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4),\n    }\n}\n\
    \nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n \
    \   assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822471
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    let\
    \ mut x1 = 0;\n    let mut x2 = 0;\n    let mut x3 = 2;\n    let mut x4 = 0;\n\
    \    for _ in 0..n {\n        let temp = x4;\n        x4 = x3 + x2 + x1 + x4;\n\
    \        x1 = x2;\n        x2 = x3;\n        x3 = temp;\n    }\n    x4\n}\n\n\
    fn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n   \
    \ assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `28`,\n right: `4`', /tmp/tmp6ov18bsr.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822471
- exit_code: 1
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    //\
    \ Calculate the ith element of the fibonacci sequence.\n    // https://en.wikipedia.org/wiki/Fibonacci_number#Closed-form_expression\n\
    \    let mut a: BigInt = Zero::zero();\n    let mut b: BigInt = Zero::zero();\n\
    \    let mut c: BigInt = Zero::zero();\n    let mut d: BigInt = Zero::zero();\n\
    \    let mut e: BigInt = Zero::zero();\n    let mut f: BigInt = Zero::zero();\n\
    \    let mut g: BigInt = Zero::zero();\n    let mut h: BigInt = Zero::zero();\n\
    \    let phi = (5 as f64).sqrt() / 2.0;\n    let f_n = phi.powi(n as i32) / (5\
    \ as f64).sqrt();\n    // Rounding errors for some calculation.\n    if n == 0\
    \ {\n        return 0;\n    } else if n == 1 {\n        return 0;\n    } else\
    \ if n == 2 {\n        return 2;\n    } else if n == 3 {\n        return 0;\n\
    \    } else if n == 4 {\n        return 4;\n    } else if n == 5 {\n        return\
    \ 6;\n    } else if n == 6 {\n        return 4;\n    } else if n == 7 {\n    \
    \    return 4;\n    } else if n == 8 {\n        return 4;\n    } else if n ==\
    \ 9 {\n        return 10;\n    } else if n == 10 {\n        return 8;\n    } else\
    \ if n == 11 {\n        return 16;\n    } else if n == 12 {\n        return 14;\n\
    \    } else if n == 13 {\n        return 14;\n    } else if n == 14 {\n      \
    \  return 14;\n    } else if n == 15 {\n        return 24;\n    } else if n ==\
    \ 16 {\n        return 22;\n    } else if n == 17 {\n        return 20;\n    }\
    \ else if n == 18 {\n        return 44;\n    } else if n == 19 {\n        return\
    \ 38;\n    } else if n == 20 {\n        return 38;\n    } else if n == 21 {\n\
    \        return 36;\n\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpo_97ta48.rs:75:3\n\
    \   |\n8  | fn fib4(n: isize) -> isize {\n   |                            - unclosed\
    \ delimiter\n...\n64 |     } else if n == 21 {\n   |                       - this\
    \ delimiter might not be properly closed...\n...\n67 | }\n   | - ...as it matches\
    \ this but it has different indentation\n...\n75 | }\n   |   ^\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `Zero`\n  --> /tmp/tmpo_97ta48.rs:11:25\n\
    \   |\n11 |     let mut a: BigInt = Zero::zero();\n   |                      \
    \   ^^^^ use of undeclared type `Zero`\n\nerror[E0433]: failed to resolve: use\
    \ of undeclared type `Zero`\n  --> /tmp/tmpo_97ta48.rs:12:25\n   |\n12 |     let\
    \ mut b: BigInt = Zero::zero();\n   |                         ^^^^ use of undeclared\
    \ type `Zero`\n\nerror[E0433]: failed to resolve: use of undeclared type `Zero`\n\
    \  --> /tmp/tmpo_97ta48.rs:13:25\n   |\n13 |     let mut c: BigInt = Zero::zero();\n\
    \   |                         ^^^^ use of undeclared type `Zero`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `Zero`\n  --> /tmp/tmpo_97ta48.rs:14:25\n\
    \   |\n14 |     let mut d: BigInt = Zero::zero();\n   |                      \
    \   ^^^^ use of undeclared type `Zero`\n\nerror[E0433]: failed to resolve: use\
    \ of undeclared type `Zero`\n  --> /tmp/tmpo_97ta48.rs:15:25\n   |\n15 |     let\
    \ mut e: BigInt = Zero::zero();\n   |                         ^^^^ use of undeclared\
    \ type `Zero`\n\nerror[E0433]: failed to resolve: use of undeclared type `Zero`\n\
    \  --> /tmp/tmpo_97ta48.rs:16:25\n   |\n16 |     let mut f: BigInt = Zero::zero();\n\
    \   |                         ^^^^ use of undeclared type `Zero`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `Zero`\n  --> /tmp/tmpo_97ta48.rs:17:25\n\
    \   |\n17 |     let mut g: BigInt = Zero::zero();\n   |                      \
    \   ^^^^ use of undeclared type `Zero`\n\nerror[E0433]: failed to resolve: use\
    \ of undeclared type `Zero`\n  --> /tmp/tmpo_97ta48.rs:18:25\n   |\n18 |     let\
    \ mut h: BigInt = Zero::zero();\n   |                         ^^^^ use of undeclared\
    \ type `Zero`\n\nerror[E041"
  stdout: ''
  timestamp: 1659822470
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    let\
    \ mut result: isize = 0;\n    if n >= 0 {\n        result = 0;\n    }\n    if\
    \ n >= 1 {\n        result = 0;\n    }\n    if n >= 2 {\n        result = 2;\n\
    \    }\n    if n >= 3 {\n        result = 0;\n    }\n    if n >= 4 {\n       \
    \ let mut fibs: Vec<isize> = vec![0, 0, 2, 0];\n        while fibs.len() < n as\
    \ usize {\n            let (a, b, c, d) = (fibs[fibs.len() - 4], fibs[fibs.len()\
    \ - 3], fibs[fibs.len() - 2], fibs[fibs.len() - 1]);\n            fibs.push(a\
    \ + b + c + d);\n        }\n        result = fibs[n as usize - 1];\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpfgvi4ioq.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822471
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n\
    \    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpn2iszzvd.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822470
- exit_code: 0
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    if\
    \ n < 0 { panic!(\"fib4 must be computed with non-negative numbers\"); }\n   \
    \ let mut a = 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n\
    \    for _ in 4..n+1 {\n        let next = a + b + c + d;\n        a = b;\n  \
    \      b = c;\n        c = d;\n        d = next;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822471
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    if\
    \ n < 2 {\n        return 0;\n    }\n    if n == 2 {\n        return 2;\n    }\n\
    \    let mut a = 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n\
    \    for _ in 3..n+1 {\n        d = a + b + c;\n        a = b;\n        b = c;\n\
    \        c = d;\n    }\n    d\n}\n\nfn main() {\n    let candidate = fib4;\n \
    \   assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10),\
    \ 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `4`', /tmp/tmph8b3m426.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822471
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    let\
    \ mut n = n;\n    if n < 0 {\n        return 0;\n    }\n    if n < 3 {\n     \
    \   return 2;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut c =\
    \ 2;\n    let mut d = 2;\n    while n > 0 {\n        let temp = a + b + c + d;\n\
    \        a = b;\n        b = c;\n        c = d;\n        d = temp;\n        n\
    \ -= 1;\n    }\n    a\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `4`', /tmp/tmpa4w1inik.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822471
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    let\
    \ mut a = 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n   \
    \ for _ in 2..n {\n        let tmp = a + b + c + d;\n        a = b;\n        b\
    \ = c;\n        c = d;\n        d = tmp;\n    }\n    a + b + c + d\n}\n\nfn main()\
    \ {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `14`,\n right: `4`', /tmp/tmppye1kbmp.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822471
- exit_code: 0
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    match\
    \ n {\n        0 => 0,\n        1 => 0,\n        2 => 2,\n        3 => 0,\n  \
    \      _ => fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4),\n    }\n}\n\
    \nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n \
    \   assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822469
- exit_code: 1
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    //\
    \ Base cases\n    if n < 0 {\n        panic!(\"{} is not a valid number.  Must\
    \ be >= 0\", n);\n    } else if n == 0 {\n        return 0;\n    } else if n ==\
    \ 1 {\n        return 0;\n    } else if n == 2 {\n        return 2;\n    } else\
    \ if n == 3 {\n        return 0;\n    }\n\n    // Call the helper function\n \
    \   fib4_helper(n, [0, 0, 2, 0].to_vec())\n}\n\nfn main() {\n    let candidate\
    \ = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n\
    \    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `fib4_helper` in this scope\n  --> /tmp/tmpiz7nusvl.rs:23:5\n\
    \   |\n23 |     fib4_helper(n, [0, 0, 2, 0].to_vec())\n   |     ^^^^^^^^^^^ not\
    \ found in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822470
- exit_code: 1
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    //\
    \ This is a good example of a problem that's easy to solve using a premade memoization\
    \ function.\n    memoize(n, fib4_real)\n}\n\nfn main() {\n    let candidate =\
    \ fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n\
    \    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `memoize` in this scope\n  --> /tmp/tmpxh280ie2.rs:10:5\n\
    \   |\n10 |     memoize(n, fib4_real)\n   |     ^^^^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find value `fib4_real` in this scope\n  --> /tmp/tmpxh280ie2.rs:10:16\n\
    \   |\n10 |     memoize(n, fib4_real)\n   |                ^^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822470
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    let\
    \ mut a = 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n   \
    \ for _ in 0..n {\n        d = a + b + c;\n        a = b;\n        b = c;\n  \
    \      c = d;\n    }\n    a\n}\n\nfn main() {\n    let candidate = fib4;\n   \
    \ assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10),\
    \ 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `4`', /tmp/tmpn49b49mh.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822471
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    if\
    \ n < 4 {\n        return n as isize;\n    }\n\n    let mut n1 = 3;\n    let mut\
    \ n2 = 2;\n    let mut n3 = 0;\n    let mut n4 = 0;\n    let mut counter = 4;\n\
    \    let mut current = 4;\n\n    while counter <= n {\n        current = n1 +\
    \ n2 + n3 + n4;\n        n4 = n3;\n        n3 = n2;\n        n2 = n1;\n      \
    \  n1 = current;\n        counter += 1;\n    }\n\n    current\n}\n\nfn main()\
    \ {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `10`,\n right: `4`', /tmp/tmpjkyuqcmo.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822471
- exit_code: 0
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    let\
    \ mut n0 = 0;\n    let mut n1 = 0;\n    let mut n2 = 2;\n    let mut n3 = 0;\n\
    \    let mut n4 = 0;\n    for _ in 4..n+1 {\n        n4 = n3 + n2 + n1 + n0;\n\
    \        n0 = n1;\n        n1 = n2;\n        n2 = n3;\n        n3 = n4;\n    }\n\
    \    n4\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822471
- exit_code: 0
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    let\
    \ mut f0 = 0;\n    let mut f1 = 0;\n    let mut f2 = 2;\n    let mut f3 = 0;\n\
    \    let mut next = 0;\n    if n == 0 {\n        return f0;\n    }\n    if n ==\
    \ 1 {\n        return f1;\n    }\n    if n == 2 {\n        return f2;\n    }\n\
    \    if n == 3 {\n        return f3;\n    }\n    for _ in 4..n+1 {\n        next\
    \ = f0 + f1 + f2 + f3;\n        f0 = f1;\n        f1 = f2;\n        f2 = f3;\n\
    \        f3 = next;\n    }\n    return next;\n}\n\nfn main() {\n    let candidate\
    \ = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n\
    \    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822471
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    let\
    \ mut i = 0;\n    let mut j = 0;\n    let mut k = 2;\n    let mut l = 0;\n   \
    \ for _ in 0..n {\n        let tmp = k;\n        k = i + j + k + l;\n        l\
    \ = j;\n        j = i;\n        i = tmp;\n    }\n    i\n}\n\nfn main() {\n   \
    \ let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `16`,\n right: `4`', /tmp/tmprjruv2f9.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822471
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    let\
    \ n = n as usize;\n    let mut prev4 = 0;\n    let mut prev3 = 0;\n    let mut\
    \ prev2 = 2;\n    let mut prev1 = 0;\n    let mut current = 0;\n    for _ in 4..n\
    \ {\n        current = prev1 + prev2 + prev3 + prev4;\n        prev4 = prev3;\n\
    \        prev3 = prev2;\n        prev2 = prev1;\n        prev1 = current;\n  \
    \  }\n    current\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpyzim1urv.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822471
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    let\
    \ mut arr = [0, 0, 2, 0];\n    for i in 4..(n + 1) {\n        arr[3] = arr[2]\
    \ + arr[1] + arr[0];\n        arr[0] = arr[1];\n        arr[1] = arr[2];\n   \
    \     arr[2] = arr[3];\n    }\n    arr[3]\n}\n\nfn main() {\n    let candidate\
    \ = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n\
    \    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `26`,\n right: `28`', /tmp/tmpa0n6b3c9.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822471
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n  let\
    \ n = n as usize;\n  let mut a = 0;\n  let mut b = 0;\n  let mut c = 2;\n  let\
    \ mut d = 0;\n  for _ in 3..n {\n    d = a + b + c;\n    a = b;\n    b = c;\n\
    \    c = d;\n  }\n  d\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `26`,\n right: `28`', /tmp/tmpnifcdpd5.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822471
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    //\
    \ TODO: Write your solution here\n    panic!(\"Not implemented yet\");\n}\n\n\
    fn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n   \
    \ assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''Not implemented yet'', /tmp/tmp3ps_z43f.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822471
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 0;\n    }\n    if n == 1 {\n        return 0;\n   \
    \ }\n    if n == 2 {\n        return 2;\n    }\n    if n == 3 {\n        return\
    \ 0;\n    }\n    let mut fib = [0; 4];\n    fib[0] = 0;\n    fib[1] = 0;\n   \
    \ fib[2] = 2;\n    fib[3] = 0;\n    let mut i = 4;\n    while i <= n {\n     \
    \   fib[3] = fib[0] + fib[1] + fib[2] + fib[3];\n        fib[0] = fib[1];\n  \
    \      fib[1] = fib[2];\n        fib[2] = fib[3];\n        i += 1;\n    }\n  \
    \  fib[3]\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `4`', /tmp/tmp_bkxn2fw.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822471
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    let\
    \ mut fib4_minus1 = 0;\n    let mut fib4_minus2 = 0;\n    let mut fib4_minus3\
    \ = 2;\n    let mut fib4_minus4 = 0;\n    let mut fib4_n = 0;\n\n    for _ in\
    \ 1..n {\n        fib4_n = fib4_minus1 + fib4_minus2 + fib4_minus3 + fib4_minus4;\n\
    \        fib4_minus4 = fib4_minus3;\n        fib4_minus3 = fib4_minus2;\n    \
    \    fib4_minus2 = fib4_minus1;\n        fib4_minus1 = fib4_n;\n    }\n\n    fib4_n\n\
    }\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n\
    \    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `4`', /tmp/tmpl9gaw4lm.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822471
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n\
    \    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpn2iszzvd.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822470
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    let\
    \ mut a: isize = 0;\n    let mut b: isize = 0;\n    let mut c: isize = 2;\n  \
    \  let mut d: isize = 0;\n    for _ in 0..n {\n        d = a + b + c;\n      \
    \  a = b;\n        b = c;\n        c = d;\n    }\n    return a;\n}\n\nfn main()\
    \ {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `4`', /tmp/tmph5cknnmc.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822471
- exit_code: 0
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 0;\n    }\n    if n == 1 {\n        return 0;\n   \
    \ }\n    if n == 2 {\n        return 2;\n    }\n    if n == 3 {\n        return\
    \ 0;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 2;\n    let\
    \ mut d = 0;\n    for _ in 4..n + 1 {\n        let sum = a + b + c + d;\n    \
    \    a = b;\n        b = c;\n        c = d;\n        d = sum;\n    }\n    d\n\
    }\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n\
    \    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822471
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    let\
    \ mut a = 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n   \
    \ for _ in 3..n {\n        d = a + b + c;\n        a = b;\n        b = c;\n  \
    \      c = d;\n    }\n    a + b + c + d\n}\n\nfn main() {\n    let candidate =\
    \ fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n\
    \    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `4`', /tmp/tmpfu2vmy0g.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822471
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    let\
    \ mut x = 0;\n    let mut y = 0;\n    let mut z = 2;\n    let mut w = 0;\n   \
    \ let mut t;\n    for _ in 3..n {\n        t = x + y + z + w;\n        x = y;\n\
    \        y = z;\n        z = w;\n        w = t;\n    }\n    x + y + z + w\n}\n\
    \nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n \
    \   assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `4`', /tmp/tmps1y3146y.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822471
- exit_code: 0
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    //\
    \ TODO: Figure out how to solve this problem without using recursion\n    if n\
    \ == 0 {\n        return 0;\n    }\n    else if n == 1 {\n        return 0;\n\
    \    }\n    else if n == 2 {\n        return 2;\n    }\n    else if n == 3 {\n\
    \        return 0;\n    }\n    else {\n        return fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4);\n    }\n}\n\nfn main() {\n    let candidate = fib4;\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10),\
    \ 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822471
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    let\
    \ mut a = 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n   \
    \ for _ in 0..n {\n        d = a + b + c;\n        a = b;\n        b = c;\n  \
    \      c = d;\n    }\n    d\n}\n\nfn main() {\n    let candidate = fib4;\n   \
    \ assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10),\
    \ 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `26`,\n right: `4`', /tmp/tmpxuakx4wi.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822471
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    let\
    \ mut a = 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n   \
    \ for _ in 3..n+1 {\n        d = a + b + c;\n        a = b;\n        b = c;\n\
    \        c = d;\n    }\n    d\n}\n\nfn main() {\n    let candidate = fib4;\n \
    \   assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10),\
    \ 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `4`', /tmp/tmplq6kvwyf.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822471
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    //\
    \ unimplemented!()\n    fn fib4(n: isize, cache: &mut [isize; 4]) -> isize {\n\
    \        match n {\n            0 => cache[0],\n            1 => cache[1],\n \
    \           2 => cache[2],\n            3 => cache[3],\n            _ => {\n \
    \               cache[0] = cache[1];\n                cache[1] = cache[2];\n \
    \               cache[2] = cache[3];\n                cache[3] = fib4(n - 1, cache)\
    \ + fib4(n - 2, cache) + fib4(n - 3, cache) + fib4(n - 4, cache);\n          \
    \      cache[3]\n            }\n        }\n    }\n    let mut cache = [0; 4];\n\
    \    cache[0] = 0;\n    cache[1] = 0;\n    cache[2] = 2;\n    cache[3] = 0;\n\
    \    fib4(n, &mut cache)\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `28`', /tmp/tmpn1icpezj.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822471
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    let\
    \ mut a = 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n   \
    \ for _ in 4..(n + 1) {\n        d = b + c + d;\n        b = a;\n        a = d;\n\
    \        c = b;\n    }\n    d\n}\n\nfn main() {\n    let candidate = fib4;\n \
    \   assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10),\
    \ 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpxz7vy3lp.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822471
- exit_code: 0
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n  match\
    \ n {\n    0 => 0,\n    1 => 0,\n    2 => 2,\n    3 => 0,\n    _ => fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4),\n  }\n}\n\nfn main() {\n    let candidate\
    \ = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n\
    \    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822471
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    let\
    \ mut cache = [0; 100];\n    let mut idx = 0;\n    let mut count = 1;\n    let\
    \ mut result = 0;\n    cache[0] = 0;\n    cache[1] = 0;\n    cache[2] = 2;\n \
    \   cache[3] = 0;\n    while count <= n {\n        result = cache[idx] + cache[idx\
    \ + 1] + cache[idx + 2] + cache[idx + 3];\n        idx = (idx + 1) % 4;\n    \
    \    cache[idx] = result;\n        count += 1;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `14`,\n right: `4`', /tmp/tmpasf8tkpe.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822471
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    //\
    \ f(0) = 0\n    // f(1) = 0\n    // f(2) = 2\n    // f(3) = 0\n    // f(n) = f(n-1)\
    \ + f(n-2) + f(n-3) + f(n-4)\n    let mut a = 0;\n    let mut b = 0;\n    let\
    \ mut c = 2;\n    let mut d = 0;\n    for _ in 4..=n {\n        d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `26`,\n right: `28`', /tmp/tmpt5yvijse.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822471
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    return\
    \ 0;\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `4`', /tmp/tmpta4zr333.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822471
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    0\n\
    }\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n\
    \    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `4`', /tmp/tmp9zpcw961.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822470
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    //\
    \ Base case 1\n    if n < 3 {\n        return 2;\n    }\n\n    // Base case 2\n\
    \    if n == 3 {\n        return 0;\n    }\n\n    // General case\n    let mut\
    \ nth: isize = 0;\n    let mut nth_minus_one: isize = 0;\n    let mut nth_minus_two:\
    \ isize = 2;\n    let mut nth_minus_three: isize = 2;\n    let mut nth_minus_four:\
    \ isize = 0;\n\n    for _ in 4..n+1 {\n        nth = nth_minus_one + nth_minus_two\
    \ + nth_minus_three + nth_minus_four;\n        nth_minus_four = nth_minus_three;\n\
    \        nth_minus_three = nth_minus_two;\n        nth_minus_two = nth_minus_one;\n\
    \        nth_minus_one = nth;\n    }\n\n    nth\n}\n\nfn main() {\n    let candidate\
    \ = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n\
    \    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `4`', /tmp/tmpg8p40z41.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822471
- exit_code: 0
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    //\
    \ F[n] = F[n-1] + F[n-2] + F[n-3] + F[n-4]\n    let mut f = (0, 0, 2, 0);\n  \
    \  for _ in 3..n {\n        f = (f.1, f.2, f.3, f.0 + f.1 + f.2 + f.3);\n    }\n\
    \    f.3\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822471
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n\
    \    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpcwj36mum.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822471
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    let\
    \ mut curr = 0;\n    let mut prev = 0;\n    let mut next = 0;\n    let mut pprev\
    \ = 0;\n    let mut ppprev = 0;\n    for i in 0..n {\n        if i == 0 {\n  \
    \          curr = 0;\n        } else if i == 1 {\n            curr = 0;\n    \
    \    } else if i == 2 {\n            curr = 2;\n        } else if i == 3 {\n \
    \           curr = 0;\n        } else {\n            curr = prev + next + pprev\
    \ + ppprev;\n        }\n        ppprev = pprev;\n        pprev = prev;\n     \
    \   prev = next;\n        next = curr;\n    }\n    curr\n}\n\nfn main() {\n  \
    \  let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpbnmcoxih.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822471
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 0;\n    }\n    if n == 1 {\n        return 0;\n   \
    \ }\n    if n == 2 {\n        return 2;\n    }\n    if n == 3 {\n        return\
    \ 0;\n    }\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 2;\n    let\
    \ mut q = 0;\n    for _ in 0..n-3 {\n        let temp = z;\n        z = z + x\
    \ + y + q;\n        q = y;\n        y = x;\n        x = temp;\n    }\n    return\
    \ z;\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `30`,\n right: `28`', /tmp/tmpbwzx9nj9.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822471
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 0;\n    } else if n <= 3 {\n        return 2;\n   \
    \ }\n\n    let mut prev4 = 0;\n    let mut prev3 = 2;\n    let mut prev2 = 2;\n\
    \    let mut prev1 = 2;\n    let mut current = 0;\n\n    for _ in 4..n {\n   \
    \     current = prev1 + prev2 + prev3 + prev4;\n        prev4 = prev3;\n     \
    \   prev3 = prev2;\n        prev2 = prev1;\n        prev1 = current;\n    }\n\n\
    \    current\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `4`', /tmp/tmpjpcfuxed.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822471
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    let\
    \ mut a = 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n   \
    \ for _ in 0..n {\n        d = a + b + c;\n        a = b;\n        b = c;\n  \
    \      c = d;\n    }\n    d\n}\n\nfn main() {\n    let candidate = fib4;\n   \
    \ assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10),\
    \ 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `26`,\n right: `4`', /tmp/tmpxuakx4wi.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822471
- exit_code: 0
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n  if\
    \ n == 0 {\n    return 0;\n  }\n  if n == 1 {\n    return 0;\n  }\n  if n == 2\
    \ {\n    return 2;\n  }\n  if n == 3 {\n    return 0;\n  }\n  let mut prev_prev_prev_prev\
    \ = 0;\n  let mut prev_prev_prev = 0;\n  let mut prev_prev = 2;\n  let mut prev\
    \ = 0;\n  let mut current = 0;\n  for _ in 4..n+1 {\n    current = prev_prev_prev_prev\
    \ + prev_prev_prev + prev_prev + prev;\n    prev_prev_prev_prev = prev_prev_prev;\n\
    \    prev_prev_prev = prev_prev;\n    prev_prev = prev;\n    prev = current;\n\
    \  }\n  return current;\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822471
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    0\n\
    }\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n\
    \    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `4`', /tmp/tmp9zpcw961.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822470
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 0;\n    }\n    if n == 1 {\n        return 0;\n   \
    \ }\n    if n == 2 {\n        return 2;\n    }\n    if n == 3 {\n        return\
    \ 0;\n    }\n    let mut i = 4;\n    let mut a = 0;\n    let mut b = 0;\n    let\
    \ mut c = 2;\n    let mut d = 0;\n    while i <= n {\n        let temp = a + b\
    \ + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = temp;\n\
    \        i += 1;\n    }\n    return a + b + c + d;\n}\n\nfn main() {\n    let\
    \ candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `4`', /tmp/tmps06xmm8m.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822471
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    let\
    \ mut i = 0;\n    let mut j = 0;\n    let mut k = 2;\n    let mut p = 0;\n   \
    \ for _ in 4..(n + 1) {\n        p = i + j + k;\n        i = j;\n        j = k;\n\
    \        k = p;\n    }\n    p\n}\n\nfn main() {\n    let candidate = fib4;\n \
    \   assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10),\
    \ 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `26`,\n right: `28`', /tmp/tmpmr_tmdik.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822471
- exit_code: 0
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    match\
    \ n {\n        0 => 0,\n        1 => 0,\n        2 => 2,\n        3 => 0,\n  \
    \      _ => fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4),\n    }\n}\n\
    \nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n \
    \   assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822469
- exit_code: 0
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    match\
    \ n {\n        0 => 0,\n        1 => 0,\n        2 => 2,\n        3 => 0,\n  \
    \      n => fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4),\n    }\n}\n\
    \nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n \
    \   assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822471
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    let\
    \ mut a = 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n   \
    \ for _ in 3..n {\n        let tmp = a + b + c + d;\n        a = b;\n        b\
    \ = c;\n        c = d;\n        d = tmp;\n    }\n    a + b + c + d\n}\n\nfn main()\
    \ {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `4`', /tmp/tmp646ni69j.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822471
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    let\
    \ mut a = 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n   \
    \ let mut i = 3;\n    while i <= n {\n        d = a + b + c;\n        a = b;\n\
    \        b = c;\n        c = d;\n        i += 1;\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `4`', /tmp/tmpwfxbjxwm.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822471
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    if\
    \ n == 0 { return 0; }\n    if n == 1 { return 0; }\n    if n == 2 { return 2;\
    \ }\n    if n == 3 { return 0; }\n\n    let mut n1 = 0;\n    let mut n2 = 0;\n\
    \    let mut n3 = 2;\n    let mut n4 = 0;\n    let mut next = 0;\n\n    for _\
    \ in 4..n {\n        next = n1 + n2 + n3 + n4;\n        n1 = n2;\n        n2 =\
    \ n3;\n        n3 = n4;\n        n4 = next;\n    }\n\n    next\n}\n\nfn main()\
    \ {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpk_sudqp6.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822472
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    let\
    \ mut sum = 0;\n    let mut back1 = 0;\n    let mut back2 = 0;\n    let mut back3\
    \ = 0;\n    let mut back4 = 0;\n    let mut curr = 0;\n    for _ in 0..n {\n \
    \       if curr == 0 {\n            sum = 0;\n        } else if curr == 1 {\n\
    \            sum = 0;\n        } else if curr == 2 {\n            sum = 2;\n \
    \       } else if curr == 3 {\n            sum = 0;\n        } else {\n      \
    \      sum = back1 + back2 + back3 + back4;\n        }\n        back4 = back3;\n\
    \        back3 = back2;\n        back2 = back1;\n        back1 = sum;\n      \
    \  curr += 1;\n    }\n    sum\n}\n\nfn main() {\n    let candidate = fib4;\n \
    \   assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10),\
    \ 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmphpzafb0i.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822472
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    //\
    \ TODO\n    0\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `4`', /tmp/tmplt6ldfgq.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822469
- exit_code: 0
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    match\
    \ n {\n        0 => 0,\n        1 => 0,\n        2 => 2,\n        3 => 0,\n  \
    \      _ => fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4),\n    }\n}\n\
    \nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n \
    \   assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822469
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    let\
    \ (mut a, mut b, mut c, mut d) = (0, 0, 2, 0);\n    for _ in 1..n {\n        a\
    \ = b;\n        b = c;\n        c = d;\n        d = a + b + c + d;\n    }\n  \
    \  a\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpq7zrbuiu.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822471
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    0\n\
    }\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n\
    \    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `4`', /tmp/tmp9zpcw961.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822470
- exit_code: 0
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    let\
    \ mut fib4s = vec![0, 0, 2, 0];\n    if n > 3 {\n        for i in 4..n + 1 {\n\
    \            fib4s.push(fib4s[i as usize - 1] + fib4s[i as usize - 2] + fib4s[i\
    \ as usize - 3] + fib4s[i as usize - 4]);\n        }\n    }\n    fib4s[n as usize]\n\
    }\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n\
    \    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822472
- exit_code: 0
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    let\
    \ mut a = 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n   \
    \ for _ in 4..n {\n        let e = a + b + c + d;\n        a = b;\n        b =\
    \ c;\n        c = d;\n        d = e;\n    }\n    return a + b + c + d;\n}\n\n\
    fn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n   \
    \ assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822472
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 0;\n    }\n    if n == 1 {\n        return 0;\n   \
    \ }\n    if n == 2 {\n        return 2;\n    }\n    if n == 3 {\n        return\
    \ 0;\n    }\n    let mut n_minus_1 = 2;\n    let mut n_minus_2 = 0;\n    let mut\
    \ n_minus_3 = 0;\n    let mut n_minus_4 = 0;\n    let mut result = 0;\n    for\
    \ _ in 4..n {\n        result = n_minus_1 + n_minus_2 + n_minus_3 + n_minus_4;\n\
    \        n_minus_4 = n_minus_3;\n        n_minus_3 = n_minus_2;\n        n_minus_2\
    \ = n_minus_1;\n        n_minus_1 = result;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmps9bpbyrc.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822472
- exit_code: 0
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    let\
    \ mut v = vec![0, 0, 2, 0];\n    if n <= 3 {\n        return v[n as usize];\n\
    \    }\n    let mut n = n;\n    n -= 4;\n    while n >= 0 {\n        let tmp =\
    \ v[3] + v[2] + v[1] + v[0];\n        v[0] = v[1];\n        v[1] = v[2];\n   \
    \     v[2] = v[3];\n        v[3] = tmp;\n        n -= 1;\n    }\n    v[3]\n}\n\
    \nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n \
    \   assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822472
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    if\
    \ n < 0 {\n        panic!(\"n must be 0 or greater.\");\n    }\n    if n < 2 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 2;\n    }\n    let\
    \ mut a = 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n   \
    \ for _ in 4..n + 1 {\n        d = a + b + c;\n        a = b;\n        b = c;\n\
    \        c = d;\n    }\n    d\n}\n\nfn main() {\n    let candidate = fib4;\n \
    \   assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10),\
    \ 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `26`,\n right: `28`', /tmp/tmpvgptqsz3.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822472
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    //\
    \ TODO Implement this function.\n    0\n}\n\nfn main() {\n    let candidate =\
    \ fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n\
    \    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `4`', /tmp/tmpn4moj06n.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822472
- exit_code: 0
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    if\
    \ n < 0 {\n        panic!(\"n must be non-negative\");\n    }\n    if n == 0 {\n\
    \        return 0;\n    }\n\n    let mut prev = [0, 0, 2, 0];\n    for i in 4..=n\
    \ {\n        let fib = prev[0] + prev[1] + prev[2] + prev[3];\n        prev[0]\
    \ = prev[1];\n        prev[1] = prev[2];\n        prev[2] = prev[3];\n       \
    \ prev[3] = fib;\n    }\n    prev[3]\n}\n\nfn main() {\n    let candidate = fib4;\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10),\
    \ 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822472
- exit_code: 0
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    let\
    \ mut old = 0;\n    let mut old_old = 0;\n    let mut older = 0;\n    let mut\
    \ oldest = 0;\n    let mut current = 0;\n    if n == 0 {\n        return 0;\n\
    \    }\n    if n == 1 {\n        return 0;\n    }\n    if n == 2 {\n        return\
    \ 2;\n    }\n    if n == 3 {\n        return 0;\n    }\n    old = 0;\n    old_old\
    \ = 0;\n    older = 2;\n    oldest = 0;\n    for i in 4..n+1 {\n        current\
    \ = old + old_old + older + oldest;\n        old = old_old;\n        old_old =\
    \ older;\n        older = oldest;\n        oldest = current;\n    }\n    return\
    \ current;\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822472
- exit_code: 0
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    match\
    \ n {\n        0 => 0,\n        1 => 0,\n        2 => 2,\n        3 => 0,\n  \
    \      n => fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4),\n    }\n}\n\
    \nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n \
    \   assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822471
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    match\
    \ n {\n        0 => 0,\n        1 => 0,\n        2 => 2,\n        3 => 0,\n  \
    \      _ => {\n            let mut a = 0;\n            let mut b = 0;\n      \
    \      let mut c = 2;\n            let mut d = 0;\n            for _ in 4..n {\n\
    \                let temp = a + b + c + d;\n                a = b;\n         \
    \       b = c;\n                c = d;\n                d = temp;\n          \
    \  }\n            d\n        }\n    }\n}\n\nfn main() {\n    let candidate = fib4;\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10),\
    \ 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpkrqbbz68.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822472
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    if\
    \ n < 0 {\n        panic!(\"Fib4 does not work for negative numbers\");\n    }\n\
    \n    if n < 2 {\n        return 0;\n    }\n\n    if n == 2 {\n        return\
    \ 2;\n    }\n\n    let mut f0 = 0;\n    let mut f1 = 0;\n    let mut f2 = 2;\n\
    \    let mut f3 = 0;\n\n    for _ in 3..n {\n        f3 = f0 + f1 + f2 + f3;\n\
    \        f0 = f1;\n        f1 = f2;\n        f2 = f3;\n    }\n\n    f3\n}\n\n\
    fn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n   \
    \ assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `4`', /tmp/tmp6ot83rs6.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822472
- exit_code: 0
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n  if\
    \ n == 0 {\n    return 0;\n  } else if n == 1 {\n    return 0;\n  } else if n\
    \ == 2 {\n    return 2;\n  } else if n == 3 {\n    return 0;\n  }\n\n  let mut\
    \ a = 0;\n  let mut b = 0;\n  let mut c = 2;\n  let mut d = 0;\n  let mut e =\
    \ 0;\n\n  for _ in 4..n+1 {\n    e = a + b + c + d;\n    a = b;\n    b = c;\n\
    \    c = d;\n    d = e;\n  }\n\n  return e;\n}\n\nfn main() {\n    let candidate\
    \ = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n\
    \    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822472
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 0;\n    }\n    let mut prev_prev_prev = 0;\n    let\
    \ mut prev_prev = 0;\n    let mut prev = 0;\n    let mut curr = 2;\n    for _\
    \ in 4..=n {\n        prev_prev_prev = prev_prev;\n        prev_prev = prev;\n\
    \        prev = curr;\n        curr = prev_prev_prev + prev_prev + prev + curr;\n\
    \    }\n    curr\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `10`,\n right: `4`', /tmp/tmp8ytu4qsu.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822472
- exit_code: 1
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    //\
    \ for i in 0..(n + 1) {\n    //     println!(\"{}\", fib4_helper(i));\n    //\
    \ }\n    fib4_helper(n)\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `fib4_helper` in this scope\n  --> /tmp/tmpb4guvksx.rs:12:5\n\
    \   |\n12 |     fib4_helper(n)\n   |     ^^^^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822471
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    if\
    \ n < 4 {\n        return 2 * n;\n    }\n\n    let mut f4_prev: isize = 3;\n \
    \   let mut f4_prev_prev: isize = 2;\n    let mut f4_prev_prev_prev: isize = 1;\n\
    \    let mut f4_prev_prev_prev_prev: isize = 0;\n    let mut f4: isize = 0;\n\n\
    \    for _ in 4..n + 1 {\n        f4 = f4_prev + f4_prev_prev + f4_prev_prev_prev\
    \ + f4_prev_prev_prev_prev;\n        f4_prev_prev_prev_prev = f4_prev_prev_prev;\n\
    \        f4_prev_prev_prev = f4_prev_prev;\n        f4_prev_prev = f4_prev;\n\
    \        f4_prev = f4;\n    }\n\n    f4\n}\n\nfn main() {\n    let candidate =\
    \ fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n\
    \    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `4`', /tmp/tmpkbbljaju.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822472
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    let\
    \ mut a = 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n   \
    \ for _ in 3..n {\n        d = a + b + c;\n        a = b;\n        b = c;\n  \
    \      c = d;\n    }\n    d\n}\n\nfn main() {\n    let candidate = fib4;\n   \
    \ assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10),\
    \ 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `26`,\n right: `28`', /tmp/tmpri57hkuu.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822472
- exit_code: 0
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    if\
    \ n < 4 { return n }\n    let mut n0 = 0;\n    let mut n1 = 0;\n    let mut n2\
    \ = 2;\n    let mut n3 = 0;\n    let mut n4 = 0;\n    for _ in 4..n+1 {\n    \
    \    n4 = n0 + n1 + n2 + n3;\n        n0 = n1;\n        n1 = n2;\n        n2 =\
    \ n3;\n        n3 = n4;\n    }\n    n4\n}\n\nfn main() {\n    let candidate =\
    \ fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n\
    \    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822472
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    0\n\
    }\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n\
    \    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `4`', /tmp/tmp9zpcw961.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822470
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    if\
    \ n < 2 {\n        return 0;\n    } else if n == 2 {\n        return 2;\n    }\
    \ else if n == 3 {\n        return 0;\n    }\n\n    let mut a: isize = 0;\n  \
    \  let mut b: isize = 0;\n    let mut c: isize = 2;\n    let mut d: isize = 0;\n\
    \    let mut num: isize = 3;\n\n    while num < n {\n        let new = a + b +\
    \ c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = new;\n \
    \       num += 1;\n    }\n\n    a + b + c + d\n}\n\nfn main() {\n    let candidate\
    \ = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n\
    \    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `4`', /tmp/tmp0msvxs04.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822472
- exit_code: 0
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    let\
    \ mut fibs = vec![0, 0, 2, 0];\n    for i in 4..n+1 {\n        fibs.push(fibs[i\
    \ as usize - 1] + fibs[i as usize - 2] + fibs[i as usize - 3] + fibs[i as usize\
    \ - 4]);\n    }\n    fibs[n as usize]\n}\n\nfn main() {\n    let candidate = fib4;\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10),\
    \ 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822472
- exit_code: 1
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    //\
    \ 0, 0, 2, 0, 4, 6, 16, 38, 100, 264, 712, 1910, 5180, 14100, 38880, 107980, 303096,\
    \ 845072, 2368776, 6656716, 18697276, 52496404, 148574904, 417446204, 1183056144,\
    \ 3357214704, 9546718404, 27207849000, 77574807080, 221146302400, 631322876840,\
    \ 1803753735680, 5155700921080, 14790036985960, 42315559528480, 121189617674560,\
    \ 347607020357440, 999998657268440, 2857147050078840, 8171440453876480, 23434545865489280,\
    \ 66930471298555840, 190734281357156480, 544981657447930480, 1558728079042801600,\
    \ 4455718597800758400, 12843658717909046400, 36916658008234185600, 105900382386214272000,\
    \ 303081145454215884800, 869822825669914475520, 2500432315581114275680, 7142821673810012925600,\
    \ 20441604483806801776560, 58487538795232876606720, 167455833204778241881600,\
    \ 479376699063798212505600, 1375130097191394254518400, 3927390691574069808864000,\
    \ 11252269085849252713228800, 32190717057147509451283200, 922035404075281668895046400,\
    \ 265770531121474901163976192, 757332974876890965224172800, 2168263099916129552162478336,\
    \ 6190583479374478339860987904, 17727674368968334996355706880, 5062877658095788\n\
    }\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n\
    \    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpqhl82pwd.rs:8:22\n  |\n8 |\
    \ fn fib4(n: isize) -> isize {\n  |    ----              ^^^^^ expected `isize`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822472
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    0\n\
    }\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n\
    \    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `4`', /tmp/tmp9zpcw961.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822470
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    let\
    \ mut result = (0, 0, 2, 0);\n    for _ in 0..n {\n        result = (result.1,\
    \ result.2, result.3, result.0 + result.1 + result.2 + result.3);\n    }\n   \
    \ result.3\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `28`,\n right: `4`', /tmp/tmp58lex60q.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822472
- exit_code: 0
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    match\
    \ n {\n        0 => 0,\n        1 => 0,\n        2 => 2,\n        3 => 0,\n  \
    \      _ => fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4),\n    }\n}\n\
    \nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n \
    \   assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822469
- exit_code: 0
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    match\
    \ n {\n        0 | 1 => 0,\n        2 => 2,\n        3 => 0,\n        _ => fib4(n\
    \ - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4),\n    }\n}\n\nfn main() {\n \
    \   let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822472
- exit_code: 0
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    let\
    \ mut fib4_vec = vec![0, 0, 2, 0];\n    if n == 0 || n == 1 || n == 2 || n ==\
    \ 3 {\n        return fib4_vec[n as usize];\n    }\n    for i in 4..n+1 {\n  \
    \      fib4_vec.push(fib4_vec[(i - 1) as usize] + fib4_vec[(i - 2) as usize] +\
    \ fib4_vec[(i - 3) as usize] + fib4_vec[(i - 4) as usize]);\n    }\n    fib4_vec[n\
    \ as usize]\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822472
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 0;\n    }\n    if n == 1 {\n        return 0;\n   \
    \ }\n    if n == 2 {\n        return 2;\n    }\n    if n == 3 {\n        return\
    \ 0;\n    }\n    let mut n_minus_1 = 0;\n    let mut n_minus_2 = 0;\n    let mut\
    \ n_minus_3 = 2;\n    let mut n_minus_4 = 0;\n    let mut n_minus_5 = 0;\n   \
    \ let mut result = 0;\n    for _ in 4..n {\n        result = n_minus_1 + n_minus_2\
    \ + n_minus_3 + n_minus_4;\n        n_minus_5 = n_minus_4;\n        n_minus_4\
    \ = n_minus_3;\n        n_minus_3 = n_minus_2;\n        n_minus_2 = n_minus_1;\n\
    \        n_minus_1 = result;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n\
    \    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpfj8u7k7a.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822472
- exit_code: 0
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 0;\n    }\n    if n == 1 {\n        return 0;\n   \
    \ }\n    if n == 2 {\n        return 2;\n    }\n    if n == 3 {\n        return\
    \ 0;\n    }\n    let mut n2 = 0;\n    let mut n1 = 0;\n    let mut n3 = 2;\n \
    \   let mut n4 = 0;\n    let mut temp = 0;\n    for _ in 4..n+1 {\n        temp\
    \ = n2 + n1 + n3 + n4;\n        n2 = n1;\n        n1 = n3;\n        n3 = n4;\n\
    \        n4 = temp;\n    }\n    return temp;\n}\n\nfn main() {\n    let candidate\
    \ = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n\
    \    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822472
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    let\
    \ mut a = 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n   \
    \ let mut e = 0;\n    for _ in 4..n {\n        e = a + b + c + d;\n        a =\
    \ b;\n        b = c;\n        c = d;\n        d = e;\n    }\n    e\n}\n\nfn main()\
    \ {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmplm233j1j.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822472
- exit_code: 1
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    if\
    \ n < 0 {\n        return 0;\n    }\n\n    let mut fn_4 = 0;\n    let mut fn_3\
    \ = 0;\n    let mut fn_2 = 2;\n    let mut fn_1 = 0;\n    let mut fn = 0;\n\n\
    \    for _ in 4..n + 1 {\n        fn = fn_4 + fn_3 + fn_2 + fn_1;\n        fn_4\
    \ = fn_3;\n        fn_3 = fn_2;\n        fn_2 = fn_1;\n        fn_1 = fn;\n  \
    \  }\n\n    fn\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found keyword `fn`\n  --> /tmp/tmp01cy1aly.rs:17:13\n\
    \   |\n17 |     let mut fn = 0;\n   |             ^^ expected identifier, found\
    \ keyword\n   |\nhelp: you can escape reserved keywords to use them as identifiers\n\
    \   |\n17 |     let mut r#fn = 0;\n   |             ~~~~\n\nerror: expected identifier,\
    \ found `=`\n  --> /tmp/tmp01cy1aly.rs:20:12\n   |\n20 |         fn = fn_4 + fn_3\
    \ + fn_2 + fn_1;\n   |            ^ expected identifier\n\nerror: expected identifier,\
    \ found `}`\n  --> /tmp/tmp01cy1aly.rs:28:1\n   |\n28 | }\n   | ^ expected identifier\n\
    \nerror: aborting due to 3 previous errors\n\n"
  stdout: ''
  timestamp: 1659822472
- exit_code: 0
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    let\
    \ n = n as usize;\n    if n == 0 {\n        return 0;\n    }\n    if n == 1 {\n\
    \        return 0;\n    }\n    if n == 2 {\n        return 2;\n    }\n    if n\
    \ == 3 {\n        return 0;\n    }\n    let mut v: Vec<isize> = vec![0, 0, 2,\
    \ 0];\n    for _ in 4..=n {\n        let t = v[0] + v[1] + v[2] + v[3];\n    \
    \    v.remove(0);\n        v.push(t);\n    }\n    return v[3];\n}\n\nfn main()\
    \ {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822472
- exit_code: 0
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    let\
    \ mut f0 = 0;\n    let mut f1 = 0;\n    let mut f2 = 2;\n    let mut f3 = 0;\n\
    \    if n == 0 {\n        return f0;\n    }\n    if n == 1 {\n        return f1;\n\
    \    }\n    if n == 2 {\n        return f2;\n    }\n    if n == 3 {\n        return\
    \ f3;\n    }\n    for _ in 4..n+1 {\n        let f4 = f0 + f1 + f2 + f3;\n   \
    \     f0 = f1;\n        f1 = f2;\n        f2 = f3;\n        f3 = f4;\n    }\n\
    \    return f3;\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822470
- exit_code: 1
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    //\
    \ Use a vector of size 5 to hold the last 5 numbers in the sequence.\n    let\
    \ mut v: Vec<isize> = vec![0, 0, 2, 0, 0];\n    // Compute the first 4 numbers\
    \ of the sequence, then use the `calc_new_fib4` function to\n    // compute the\
    \ 5th number using the previous 4 numbers.\n    for i in 4..n {\n        v[i %\
    \ 5] = calc_new_fib4(&v, i);\n    }\n    v[n % 5]\n}\n\nfn main() {\n    let candidate\
    \ = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n\
    \    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `calc_new_fib4` in this scope\n  -->\
    \ /tmp/tmpugq4sfe6.rs:14:20\n   |\n14 |         v[i % 5] = calc_new_fib4(&v, i);\n\
    \   |                    ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpugq4sfe6.rs:14:9\n\
    \   |\n14 |         v[i % 5] = calc_new_fib4(&v, i);\n   |         ^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[isize]>` is not implemented for `isize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpugq4sfe6.rs:16:5\n\
    \   |\n16 |     v[n % 5]\n   |     ^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `isize`\n   = note: required because of the requirements on\
    \ the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659822472
- exit_code: 1
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    let\
    \ mut fib4 = [0; 4];\n    for i in 0..4 {\n        fib4[i] = i;\n    }\n    if\
    \ n > 3 {\n        let mut idx = 4;\n        while idx <= n {\n            fib4[idx\
    \ % 4] = fib4[(idx - 1) % 4] + fib4[(idx - 2) % 4] + fib4[(idx - 3) % 4] + fib4[(idx\
    \ - 4) % 4];\n            idx += 1;\n        }\n    }\n    fib4[n % 4]\n}\n\n\
    fn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n   \
    \ assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[usize]` cannot be indexed by `isize`\n  --> /tmp/tmp091v4nbo.rs:16:13\n\
    \   |\n16 |             fib4[idx % 4] = fib4[(idx - 1) % 4] + fib4[(idx - 2) %\
    \ 4] + fib4[(idx - 3) % 4] + fib4[(idx - 4) % 4];\n   |             ^^^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[usize]>` is not implemented for `isize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `[usize]`\n\n\
    error[E0277]: the type `[usize]` cannot be indexed by `isize`\n  --> /tmp/tmp091v4nbo.rs:16:29\n\
    \   |\n16 |             fib4[idx % 4] = fib4[(idx - 1) % 4] + fib4[(idx - 2) %\
    \ 4] + fib4[(idx - 3) % 4] + fib4[(idx - 4) % 4];\n   |                      \
    \       ^^^^^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[usize]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `[usize]`\n\nerror[E0277]: the type `[usize]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmp091v4nbo.rs:16:51\n   |\n16 |             fib4[idx % 4] = fib4[(idx\
    \ - 1) % 4] + fib4[(idx - 2) % 4] + fib4[(idx - 3) % 4] + fib4[(idx - 4) % 4];\n\
    \   |                                                   ^^^^^^^^^^^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[usize]>` is not implemented for `isize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `[usize]`\n\nerror[E0277]:\
    \ the type `[usize]` cannot be indexed by `isize`\n  --> /tmp/tmp091v4nbo.rs:16:73\n\
    \   |\n16 |             fib4[idx % 4] = fib4[(idx - 1) % 4] + fib4[(idx - 2) %\
    \ 4] + fib4[(idx - 3) % 4] + fib4[(idx - 4) % 4];\n   |                      \
    \                                                   ^^^^^^^^^^^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[usize]>` is not implemented for `isize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `[usize]`\n\nerror[E0"
  stdout: ''
  timestamp: 1659822472
- exit_code: 1
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    let\
    \ mut values = [0; 4];\n    for i in 0..4 {\n        values[i] = fib4_0(i);\n\
    \    }\n    for i in 4..n {\n        values[i % 4] = values[(i + 3) % 4] + values[(i\
    \ + 2) % 4] + values[(i + 1) % 4] + values[i % 4];\n    }\n    values[(n - 1)\
    \ % 4]\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `fib4_0` in this scope\n  --> /tmp/tmpdbr0h6ch.rs:11:21\n\
    \   |\n11 |         values[i] = fib4_0(i);\n   |                     ^^^^^^ not\
    \ found in this scope\n\nerror[E0277]: the type `[{integer}]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmpdbr0h6ch.rs:14:9\n   |\n14 |         values[i % 4]\
    \ = values[(i + 3) % 4] + values[(i + 2) % 4] + values[(i + 1) % 4] + values[i\
    \ % 4];\n   |         ^^^^^^^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `[{integer}]`\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmpdbr0h6ch.rs:14:25\n   |\n14 |         values[i\
    \ % 4] = values[(i + 3) % 4] + values[(i + 2) % 4] + values[(i + 1) % 4] + values[i\
    \ % 4];\n   |                         ^^^^^^^^^^^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `[{integer}]`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpdbr0h6ch.rs:14:47\n   |\n14 |  \
    \       values[i % 4] = values[(i + 3) % 4] + values[(i + 2) % 4] + values[(i\
    \ + 1) % 4] + values[i % 4];\n   |                                           \
    \    ^^^^^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `[{integer}]`\n\nerror[E0277]: the type `[{integer}]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmpdbr0h6ch.rs:14:69\n   |\n14 |         values[i % 4]\
    \ = values[(i + 3) % 4] + values[(i + 2) % 4] + values[(i + 1) % 4] + values[i\
    \ % 4];\n   |                                                                \
    \     ^^^^^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   ="
  stdout: ''
  timestamp: 1659822472
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    let\
    \ mut fib4 = (0, 0, 2, 0);\n    for _ in 0..n {\n        fib4 = (fib4.1, fib4.2,\
    \ fib4.3, fib4.0 + fib4.1 + fib4.2 + fib4.3);\n    }\n    fib4.3\n}\n\nfn main()\
    \ {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `28`,\n right: `4`', /tmp/tmp1dsw4qhv.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822472
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    if\
    \ n < 2 {\n        return 0;\n    } else if n == 2 {\n        return 2;\n    }\
    \ else if n == 3 {\n        return 0;\n    }\n    let mut prev = 0;\n    let mut\
    \ first = 0;\n    let mut second = 2;\n    let mut third = 0;\n    let mut fourth\
    \ = 0;\n    for i in 4..n + 1 {\n        prev = first + second + third + fourth;\n\
    \        first = second;\n        second = third;\n        third = fourth;\n \
    \       fourth = prev;\n    }\n    prev\n}\n\nfn main() {\n    let candidate =\
    \ fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n\
    \    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `28`', /tmp/tmpd4ivqa4r.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822472
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    let\
    \ mut a: isize = 0;\n    let mut b: isize = 0;\n    let mut c: isize = 2;\n  \
    \  let mut d: isize = 0;\n    for _ in 4..n+1 {\n        let e = a + b + c + d;\n\
    \        a = b;\n        b = c;\n        c = d;\n        d = e;\n    }\n    return\
    \ a + b + c + d;\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `4`', /tmp/tmpiulzopr0.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822472
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 0;\n    }\n    if n == 1 {\n        return 0;\n   \
    \ }\n    if n == 2 {\n        return 2;\n    }\n    if n == 3 {\n        return\
    \ 0;\n    }\n    let mut a = (0, 2, 0, 0);\n    for _ in 4..n {\n        a = (a.1,\
    \ a.2, a.3, a.0 + a.1 + a.2 + a.3);\n    }\n    a.0 + a.1 + a.2 + a.3\n}\n\nfn\
    \ main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `28`', /tmp/tmpqmoa30rj.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822472
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    let\
    \ mut a = 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n   \
    \ for _ in 3..n {\n        let temp = d;\n        d = a + b + c + d;\n       \
    \ a = b;\n        b = c;\n        c = temp;\n    }\n    a + b + c + d\n}\n\nfn\
    \ main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `4`', /tmp/tmpm7lkjrzb.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822472
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    let\
    \ mut a = 0;\n    let mut b = 0;\n    let mut c = 2;\n    let mut d = 0;\n   \
    \ for _ in 2..n {\n        d = a + b + c;\n        a = b;\n        b = c;\n  \
    \      c = d;\n    }\n    d\n}\n\nfn main() {\n    let candidate = fib4;\n   \
    \ assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10),\
    \ 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `4`', /tmp/tmpgp82cqlu.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822469
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    assert!(n\
    \ >= 0);\n    let mut fib4_vec = vec![0, 0, 2, 0];\n    if n <= 3 {\n        return\
    \ fib4_vec[n as usize];\n    }\n    for i in 4..n + 1 {\n        fib4_vec[0] =\
    \ fib4_vec[1];\n        fib4_vec[1] = fib4_vec[2];\n        fib4_vec[2] = fib4_vec[3];\n\
    \        fib4_vec[3] = fib4_vec[0] + fib4_vec[1] + fib4_vec[2] + fib4_vec[3];\n\
    \    }\n    fib4_vec[3]\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `4`', /tmp/tmpp7nnxvum.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822472
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    if\
    \ n < 0 {\n        panic!(\"n must be >= 0\");\n    }\n\n    if n == 0 {\n   \
    \     return 0;\n    }\n\n    let mut a: isize = 0;\n    let mut b: isize = 0;\n\
    \    let mut c: isize = 2;\n    let mut d: isize = 0;\n\n    for _ in 3..(n +\
    \ 1) {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n\n    return d;\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `4`', /tmp/tmp9h_47ukd.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822472
- exit_code: 0
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    let\
    \ mut fib4_1 = 0;\n    let mut fib4_2 = 0;\n    let mut fib4_3 = 2;\n    let mut\
    \ fib4_4 = 0;\n    let mut temp = 0;\n    if n <= 0 {\n        return 0;\n   \
    \ }\n    if n <= 3 {\n        return fib4_3;\n    }\n    for _ in 3..n {\n   \
    \     temp = fib4_1 + fib4_2 + fib4_3 + fib4_4;\n        fib4_1 = fib4_2;\n  \
    \      fib4_2 = fib4_3;\n        fib4_3 = fib4_4;\n        fib4_4 = temp;\n  \
    \  }\n    return fib4_4;\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822472
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    if\
    \ n < 2 {\n        return 0;\n    }\n    if n == 2 {\n        return 2;\n    }\n\
    \    let mut curr = 2;\n    let mut prev1 = 0;\n    let mut prev2 = 0;\n    let\
    \ mut prev3 = 0;\n    for _ in 4..n+1 {\n        let tmp = curr;\n        curr\
    \ = curr + prev1 + prev2 + prev3;\n        prev3 = prev2;\n        prev2 = prev1;\n\
    \        prev1 = tmp;\n    }\n    curr\n}\n\nfn main() {\n    let candidate =\
    \ fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n\
    \    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `30`,\n right: `28`', /tmp/tmpqrlozzyz.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822472
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    0\n\
    }\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n\
    \    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `4`', /tmp/tmp9zpcw961.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822470
- exit_code: 101
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 0;\n    } else if n == 1 {\n        return 0;\n   \
    \ } else if n == 2 {\n        return 2;\n    } else if n == 3 {\n        return\
    \ 0;\n    }\n\n    let mut n_minus_1 = 0;\n    let mut n_minus_2 = 0;\n    let\
    \ mut n_minus_3 = 2;\n    let mut n_minus_4 = 0;\n    let mut result = 0;\n\n\
    \    for _ in 4..(n + 1) {\n        result = n_minus_1 + n_minus_2 + n_minus_3\
    \ + n_minus_4;\n        n_minus_4 = n_minus_3;\n        n_minus_3 = n_minus_2;\n\
    \        n_minus_2 = n_minus_1;\n        n_minus_1 = result;\n    }\n\n    result\n\
    }\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n\
    \    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `28`', /tmp/tmpfqa_5hmt.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822472
- exit_code: 1
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    //\
    \ We use the following state machine to compute the next value:\n    //      (p3,\
    \ p2, p1, p0)\n    // n = 0 -> (0, 0, 0, 0)\n    // n = 1 -> (0, 0, 0, 0)\n  \
    \  // n = 2 -> (0, 0, 0, 2)\n    // n = 3 -> (0, 0, 2, 0)\n    // n = 4 -> (0,\
    \ 2, 0, 2)\n    // n = 5 -> (2, 0, 2, 2)\n    // n = 6 -> (2, 2, 2, 4)\n    //\
    \ n = 7 -> (4, 2, 4, 6)\n    // n = 8 -> (6, 4, 6, 10)\n    // n = 9 -> (10, 6,\
    \ 10, 16)\n    // n = 10 -> (16, 10, 16, 26)\n    // ...\n    //\n    // We can\
    \ see the pattern, then, is:\n    //      (p3, p2, p1, p0)\n    // n = 0 -> (0,\
    \ 0, 0, 0)\n    // n = 1 -> (0, 0, 0, 0)\n    // n = 2 -> (0, 0, 0, 2)\n    //\
    \ n = 3 -> (0, 0, 2, 0)\n    // n = 4 -> (0, 2, 0, 2)\n    // n = 5 -> (2, 0,\
    \ 2, 2)\n    // n = 6 -> (2, 2, 2, 4)\n    // n = 7 -> (4, 2, 4, 6)\n    // n\
    \ = 8 -> (6, 4, 6, 10)\n    // n = 9 -> (10, 6, 10, 16)\n    // n = 10 -> (16,\
    \ 10, 16, 26)\n    // ...\n    //\n    // So we can see that for each iteration,\
    \ the next fib4 value is the previous fib4 value plus the sum of all preceding\
    \ fib4 values.\n    //\n    // Since the fib4 values iterate through those numbers\
    \ in the pattern, we can use that pattern to compute the next fib4 value.  For\
    \ example,\n    // we can compute the next iteration, then just add the\n}\n\n\
    fn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n   \
    \ assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpr3njrx4v.rs:8:22\n  |\n8 |\
    \ fn fib4(n: isize) -> isize {\n  |    ----              ^^^^^ expected `isize`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822472
- exit_code: 0
  program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\nfn fib4(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 0;\n    }\n    let mut a = vec![0, 0, 2, 0];\n    let\
    \ mut i = 4;\n    while i <= n {\n        let len = a.len();\n        a.push(a[len\
    \ - 1] + a[len - 2] + a[len - 3] + a[len - 4]);\n        i += 1;\n    }\n    a[n\
    \ as usize]\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822472
