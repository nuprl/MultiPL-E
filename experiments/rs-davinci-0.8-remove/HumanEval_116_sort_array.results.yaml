language: rs
name: HumanEval_116_sort_array
results:
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut h =\
    \ HashMap::new();\n    let mut z: Vec<isize> = vec![];\n    for i in arr {\n \
    \       let y = format!(\"{:b}\", i);\n        let count = y.matches(\"1\").count();\n\
    \        h.insert(i, count);\n        z.push(i);\n    }\n    z.sort_by(|a, b|\
    \ {\n        let l = h.get(a).unwrap();\n        let r = h.get(b).unwrap();\n\
    \        match l.cmp(r) {\n            Ordering::Equal => a.cmp(b),\n        \
    \    _ => l.cmp(r),\n        }\n    });\n    z\n}\n\nfn main() {\n    let candidate\
    \ = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4,\
    \ 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4, -2, -6,\
    \ -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n\
    \    assert_eq!(candidate(vec![3, 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n\
    \    assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n  \
    \  assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Ordering`\n  -->\
    \ /tmp/tmpn_dbensu.rs:18:13\n   |\n18 |             Ordering::Equal => a.cmp(b),\n\
    \   |             ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpn_dbensu.rs:6:17\n\
    \  |\n6 |     let mut h = HashMap::new();\n  |                 ^^^^^^^ not found\
    \ in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n\
    \  |\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659822460
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut arr\
    \ = arr;\n    arr.sort_by(|a, b| {\n        let a_ones = ones(*a);\n        let\
    \ b_ones = ones(*b);\n        if a_ones == b_ones {\n            a.cmp(b)\n  \
    \      } else {\n            a_ones.cmp(&b_ones)\n        }\n    });\n    arr\n\
    }\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `ones` in this scope\n --> /tmp/tmp5_8sfo1t.rs:8:22\n\
    \  |\n8 |         let a_ones = ones(*a);\n  |                      ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find function `ones` in this scope\n -->\
    \ /tmp/tmp5_8sfo1t.rs:9:22\n  |\n9 |         let b_ones = ones(*b);\n  |     \
    \                 ^^^^ not found in this scope\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822460
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    arr.into_iter()\n\
    \        .map(|x| (x, format!(\"{:b}\", x).chars().filter(|&c| c == '1').count()))\n\
    \        .sorted_by(|&(_, a), &(_, b)| {\n            if a == b {\n          \
    \      Ord::cmp(&a, &b)\n            } else {\n                Ord::cmp(&a, &b)\n\
    \            }\n        })\n        .map(|(x, _)| x)\n        .collect()\n}\n\n\
    fn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted_by` found for struct `Map` in the\
    \ current scope\n --> /tmp/tmpo32cf6nb.rs:8:10\n  |\n8 |         .sorted_by(|&(_,\
    \ a), &(_, b)| {\n  |          ^^^^^^^^^ method not found in `Map<std::vec::IntoIter<isize>,\
    \ [closure@/tmp/tmpo32cf6nb.rs:7:14: 7:79]>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659822460
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut arr:\
    \ Vec<isize> = arr;\n    arr.sort_by(|a, b| {\n        let a_ones = ones_in_binary(a);\n\
    \        let b_ones = ones_in_binary(b);\n        match a_ones.cmp(&b_ones) {\n\
    \            Equal => a.cmp(&b),\n            cmp => cmp,\n        }\n    });\n\
    \    arr\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `ones_in_binary` in this scope\n -->\
    \ /tmp/tmpvez_rn1x.rs:8:22\n  |\n8 |         let a_ones = ones_in_binary(a);\n\
    \  |                      ^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `ones_in_binary` in this scope\n --> /tmp/tmpvez_rn1x.rs:9:22\n\
    \  |\n9 |         let b_ones = ones_in_binary(b);\n  |                      ^^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822460
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut arr\
    \ = arr;\n    arr.sort_by(|a, b| {\n        let len_a = a.count_ones();\n    \
    \    let len_b = b.count_ones();\n        if len_a != len_b {\n            len_a.cmp(&len_b)\n\
    \        } else {\n            a.cmp(b)\n        }\n    });\n    arr\n}\n\nfn\
    \ main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpuydt5l_6.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822460
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    arr.into_iter()\n\
    \        .map(|x| (x, x.count_ones()))\n        .sorted_by(|a, b| {\n        \
    \    if a.1 == b.1 {\n                a.0.cmp(&b.0)\n            } else {\n  \
    \              a.1.cmp(&b.1)\n            }\n        })\n        .map(|x| x.0)\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted_by` found for struct `Map` in the\
    \ current scope\n --> /tmp/tmpolnqyk63.rs:8:10\n  |\n8 |         .sorted_by(|a,\
    \ b| {\n  |          ^^^^^^^^^ method not found in `Map<std::vec::IntoIter<isize>,\
    \ [closure@/tmp/tmpolnqyk63.rs:7:14: 7:37]>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659822460
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    arr.into_iter()\n\
    \        .map(|x| (count_ones(x), x))\n        .sorted()\n        .into_iter()\n\
    \        .map(|(_, x)| x)\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4,\
    \ 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4, -2, -6,\
    \ -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n\
    \    assert_eq!(candidate(vec![3, 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n\
    \    assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n  \
    \  assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `count_ones` in this scope\n --> /tmp/tmph_psx6nc.rs:7:19\n\
    \  |\n7 |         .map(|x| (count_ones(x), x))\n  |                   ^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0599]: no method named `sorted` found for\
    \ struct `Map` in the current scope\n --> /tmp/tmph_psx6nc.rs:8:10\n  |\n8 | \
    \        .sorted()\n  |          ^^^^^^ method not found in `Map<std::vec::IntoIter<isize>,\
    \ _>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0425, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822460
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = arr.clone();\n    result.sort_by(|a, b| {\n        let val = format!(\"{:b}\"\
    , a)\n            .chars()\n            .fold(0, |sum, x| sum + (x == '1') as\
    \ isize);\n        let val2 = format!(\"{:b}\", b)\n            .chars()\n   \
    \         .fold(0, |sum, x| sum + (x == '1') as isize);\n        val.cmp(&val2).then(a.cmp(&b))\n\
    \    });\n    result\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmph2iuc2fa.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822460
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut sorted:\
    \ Vec<isize> = arr.iter().map(|&v| v).collect();\n    sorted.sort_by(|a, b| count_ones(a).cmp(&count_ones(b)).then(a.cmp(b)));\n\
    \    sorted\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `count_ones` in this scope\n --> /tmp/tmpp6g58dqc.rs:7:27\n\
    \  |\n7 |     sorted.sort_by(|a, b| count_ones(a).cmp(&count_ones(b)).then(a.cmp(b)));\n\
    \  |                           ^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `count_ones` in this scope\n --> /tmp/tmpp6g58dqc.rs:7:46\n\
    \  |\n7 |     sorted.sort_by(|a, b| count_ones(a).cmp(&count_ones(b)).then(a.cmp(b)));\n\
    \  |                                              ^^^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822460
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    // \u041C\u0430\
    \u0441\u0441\u0438\u0432 \u0440\u0430\u0437\u043C\u0435\u0440\u043E\u043C \u0432\
    \ \u043C\u0430\u043A\u0441\u0438\u043C\u0430\u043B\u044C\u043D\u043E\u0435 \u0447\
    \u0438\u0441\u043B\u043E \u0432 \u0432\u0435\u043A\u0442\u043E\u0440\u0435\n \
    \   let mut ones_count = vec![0; *arr.iter().max().unwrap() as usize + 1];\n \
    \   // \u0421\u0447\u0438\u0442\u0430\u0435\u043C \u043A\u043E\u043B\u0438\u0447\
    \u0435\u0441\u0442\u0432\u043E \u0435\u0434\u0438\u043D\u0438\u0446\n    for x\
    \ in arr.iter() {\n        let mut n = *x;\n        while n > 0 {\n          \
    \  ones_count[n as usize] += 1;\n            n /= 2;\n        }\n    }\n    //\
    \ \u0421\u043E\u0440\u0442\u0438\u0440\u0443\u0435\u043C\n    arr.iter().copied().sorted_by(|a,\
    \ b| {\n        if ones_count[*a as usize] == ones_count[*b as usize] {\n    \
    \        a.cmp(b)\n        } else {\n            ones_count[*a as usize].cmp(&ones_count[*b\
    \ as usize])\n        }\n    })\n    .collect()\n}\n\nfn main() {\n    let candidate\
    \ = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4,\
    \ 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4, -2, -6,\
    \ -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n\
    \    assert_eq!(candidate(vec![3, 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n\
    \    assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n  \
    \  assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted_by` found for struct `Copied` in\
    \ the current scope\n  --> /tmp/tmpg3bvystt.rs:17:25\n   |\n17 |     arr.iter().copied().sorted_by(|a,\
    \ b| {\n   |                         ^^^^^^^^^ method not found in `Copied<std::slice::Iter<'_,\
    \ isize>>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659822460
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    // let mut arr\
    \ = arr;\n    // println!(\"{:?}\", arr);\n    let mut arr = arr.into_iter().collect::<Vec<_>>();\n\
    \    let mut ones = vec![];\n    let mut c = 0;\n    while c < arr.len() {\n \
    \       let mut tmp = 0;\n        let mut n = arr[c];\n        let mut i = 0;\n\
    \        while n > 0 {\n            if n % 2 == 1 {\n                tmp += 1;\n\
    \            }\n            n /= 2;\n            i += 1;\n        }\n        ones.push((tmp,\
    \ i));\n        c += 1;\n    }\n    // println!(\"{:?}\", ones);\n    arr.sort_by(|a,\
    \ b| {\n        let a = ones[*a as usize];\n        let b = ones[*b as usize];\n\
    \        a.0.cmp(&b.0).then(a.1.cmp(&b.1))\n    });\n    arr\n}\n\nfn main() {\n\
    \    let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 5 but the
    index is 5'', /tmp/tmpd9lg2k0a.rs:28:17

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822460
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut nums\
    \ = arr;\n    nums.sort_by(|x, y| {\n        let ones_x = x.count_ones();\n  \
    \      let ones_y = y.count_ones();\n        if ones_x == ones_y {\n         \
    \   x.cmp(y)\n        } else {\n            ones_x.cmp(&ones_y)\n        }\n \
    \   });\n    nums\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmp4p2u700q.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822460
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut v: Vec<(usize,\
    \ isize)> = arr.iter().map(|x| (*x, x.count_ones())).collect();\n    v.sort_by(|a,\
    \ b| (a.1, a.0).cmp(&(b.1, b.0)));\n    v.iter().map(|(_, a)| *a).collect()\n\
    }\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<(usize, isize)>` cannot be built from\
    \ an iterator over elements of type `(isize, u32)`\n --> /tmp/tmpsgbq21x9.rs:6:79\n\
    \  |\n6 |     let mut v: Vec<(usize, isize)> = arr.iter().map(|x| (*x, x.count_ones())).collect();\n\
    \  |                                                                         \
    \      ^^^^^^^ value of type `Vec<(usize, isize)>` cannot be built from `std::iter::Iterator<Item=(isize,\
    \ u32)>`\n  |\n  = help: the trait `FromIterator<(isize, u32)>` is not implemented\
    \ for `Vec<(usize, isize)>`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659822460
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut sort_vec:\
    \ Vec<(isize, usize)> = Vec::new();\n    for i in arr {\n        let ones = i.count_ones();\n\
    \        sort_vec.push((i, ones));\n    }\n    sort_vec.sort_by(|a, b| {\n   \
    \     if a.1 == b.1 {\n            return a.0.cmp(&b.0);\n        }\n        a.1.cmp(&b.1)\n\
    \    });\n    sort_vec.iter().map(|x| x.0).collect()\n}\n\nfn main() {\n    let\
    \ candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1,\
    \ 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpk_qm_5_r.rs:9:27\n  |\n9 |\
    \         sort_vec.push((i, ones));\n  |                           ^^^^ expected\
    \ `usize`, found `u32`\n  |\nhelp: you can convert a `u32` to a `usize` and panic\
    \ if the converted value doesn't fit\n  |\n9 |         sort_vec.push((i, ones.try_into().unwrap()));\n\
    \  |                           ~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659822460
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    arr.into_iter()\n\
    \        .enumerate()\n        .map(|(i, x)| (x, i))\n        .collect::<Vec<(isize,\
    \ usize)>>()\n        .sort_by(|(x, _), (y, _)| {\n            let x = x.count_ones();\n\
    \            let y = y.count_ones();\n            if x != y {\n              \
    \  x.cmp(&y)\n            } else {\n                x.cmp(&y)\n            }\n\
    \        })\n        .iter()\n        .map(|(x, _)| *x)\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `iter` found for unit type `()` in the current\
    \ scope\n  --> /tmp/tmpsdn7t9oa.rs:19:10\n   |\n19 |         .iter()\n   |   \
    \       ^^^^ method not found in `()`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659822460
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    arr.into_iter()\n\
    \        .map(|n| (n, n.count_ones()))\n        .sorted_by(|a, b| a.1.cmp(&b.1).then(a.0.cmp(&b.0)))\n\
    \        .map(|(n, _)| n)\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4,\
    \ 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4, -2, -6,\
    \ -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n\
    \    assert_eq!(candidate(vec![3, 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n\
    \    assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n  \
    \  assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted_by` found for struct `Map` in the\
    \ current scope\n --> /tmp/tmpkypvk3ec.rs:8:10\n  |\n8 |         .sorted_by(|a,\
    \ b| a.1.cmp(&b.1).then(a.0.cmp(&b.0)))\n  |          ^^^^^^^^^ method not found\
    \ in `Map<std::vec::IntoIter<isize>, [closure@/tmp/tmpkypvk3ec.rs:7:14: 7:37]>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659822460
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    // your code\
    \ here\n    let mut result = arr.clone();\n    result.sort_by(|a, b|\n    {\n\
    \        let a_bin = format!(\"{:b}\", a);\n        let b_bin = format!(\"{:b}\"\
    , b);\n        match a_bin.len().cmp(&b_bin.len()) {\n            Ordering::Equal\
    \ => a.cmp(&b),\n            other => other,\n        }\n    });\n    result\n\
    }\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Ordering`\n  -->\
    \ /tmp/tmpgglj5eb5.rs:13:13\n   |\n13 |             Ordering::Equal => a.cmp(&b),\n\
    \   |             ^^^^^^^^ use of undeclared type `Ordering`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659822460
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut arr\
    \ = arr;\n    arr.sort_by(|a, b| {\n        let c = format!(\"{:b}\", a).len().cmp(&format!(\"\
    {:b}\", b).len());\n        if c == Ordering::Equal {\n            a.cmp(b)\n\
    \        } else {\n            c\n        }\n    });\n    arr\n}\n\nfn main()\
    \ {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3,\
    \ 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]),\
    \ vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0,\
    \ 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Ordering`\n -->\
    \ /tmp/tmp5ay3176x.rs:9:17\n  |\n9 |         if c == Ordering::Equal {\n  |  \
    \               ^^^^^^^^ use of undeclared type `Ordering`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659822460
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    arr.into_iter()\n\
    \        .map(|v| (count_one(v), v))\n        .sorted()\n        .into_iter()\n\
    \        .map(|(_, v)| v)\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4,\
    \ 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4, -2, -6,\
    \ -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n\
    \    assert_eq!(candidate(vec![3, 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n\
    \    assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n  \
    \  assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `count_one` in this scope\n --> /tmp/tmpwfyg8fhs.rs:7:19\n\
    \  |\n7 |         .map(|v| (count_one(v), v))\n  |                   ^^^^^^^^^\
    \ not found in this scope\n\nerror[E0599]: no method named `sorted` found for\
    \ struct `Map` in the current scope\n --> /tmp/tmpwfyg8fhs.rs:8:10\n  |\n8 | \
    \        .sorted()\n  |          ^^^^^^ method not found in `Map<std::vec::IntoIter<isize>,\
    \ _>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0425, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822460
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    arr.into_iter()\n\
    \        .map(|i| (i, i.count_ones()))\n        .sorted_by(|a, b| match a.1.cmp(&b.1)\
    \ {\n            std::cmp::Ordering::Equal => a.0.cmp(&b.0),\n            o =>\
    \ o,\n        })\n        .map(|(i, _)| i)\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3,\
    \ 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]),\
    \ vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0,\
    \ 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted_by` found for struct `Map` in the\
    \ current scope\n --> /tmp/tmpa362rwbq.rs:8:10\n  |\n8 |         .sorted_by(|a,\
    \ b| match a.1.cmp(&b.1) {\n  |          ^^^^^^^^^ method not found in `Map<std::vec::IntoIter<isize>,\
    \ [closure@/tmp/tmpa362rwbq.rs:7:14: 7:37]>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659822460
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    arr.into_iter()\n\
    \        .map(|i| (i, format!(\"{:b}\", i)))\n        .map(|(i, b)| (i, b.chars().filter(|c|\
    \ *c == '1').count()))\n        .sorted_by(|a, b| a.1.cmp(&b.1).then(a.0.cmp(&b.0)))\n\
    \        .map(|(i, _)| i)\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4,\
    \ 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4, -2, -6,\
    \ -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n\
    \    assert_eq!(candidate(vec![3, 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n\
    \    assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n  \
    \  assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted_by` found for struct `Map` in the\
    \ current scope\n --> /tmp/tmpedh7vll1.rs:9:10\n  |\n9 |         .sorted_by(|a,\
    \ b| a.1.cmp(&b.1).then(a.0.cmp(&b.0)))\n  |          ^^^^^^^^^ method not found\
    \ in `Map<Map<std::vec::IntoIter<isize>, [closure@/tmp/tmpedh7vll1.rs:7:14: 7:41]>,\
    \ [closure@/tmp/tmpedh7vll1.rs:8:14: 8:67]>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659822460
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    arr.iter()\n\
    \        .cloned()\n        .map(|x| {\n            let ones = x.count_ones();\n\
    \            (x, ones)\n        })\n        .sorted_by(|a, b| {\n            a.1.cmp(&b.1).then(a.0.cmp(&b.0))\n\
    \        })\n        .map(|t| t.0)\n        .collect()\n}\n\nfn main() {\n   \
    \ let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted_by` found for struct `Map` in the\
    \ current scope\n  --> /tmp/tmpfl88y_il.rs:12:10\n   |\n12 |         .sorted_by(|a,\
    \ b| {\n   |          ^^^^^^^^^ method not found in `Map<Cloned<std::slice::Iter<'_,\
    \ isize>>, [closure@/tmp/tmpfl88y_il.rs:8:14: 11:10]>`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659822460
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut arr\
    \ = arr;\n    arr.sort_by(|a, b| {\n        a.count_ones().cmp(&b.count_ones()).then(a.cmp(b))\n\
    \    });\n    arr\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpnm4b0uuf.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822460
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut new_arr\
    \ = arr.clone();\n    new_arr.sort_by(|x, y| {\n        (\n            count_ones(x.clone()),\n\
    \            x.clone(),\n        )\n            .cmp(&(count_ones(y.clone()),\
    \ y.clone()))\n    });\n    new_arr\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `count_ones` in this scope\n --> /tmp/tmpsh1ck_c6.rs:9:13\n\
    \  |\n9 |             count_ones(x.clone()),\n  |             ^^^^^^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find function `count_ones` in this scope\n\
    \  --> /tmp/tmpsh1ck_c6.rs:12:20\n   |\n12 |             .cmp(&(count_ones(y.clone()),\
    \ y.clone()))\n   |                    ^^^^^^^^^^ not found in this scope\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822460
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut arr\
    \ = arr;\n    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n   \
    \     let b_ones = b.count_ones();\n        if a_ones == b_ones {\n          \
    \  *a.cmp(b)\n        } else {\n            a_ones.cmp(&b_ones)\n        }\n \
    \   });\n    arr\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `std::cmp::Ordering` cannot be dereferenced\n  --> /tmp/tmpk6rw2qnw.rs:11:13\n\
    \   |\n11 |             *a.cmp(b)\n   |             ^^^^^^^^^\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0614`.\n"
  stdout: ''
  timestamp: 1659822460
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    arr.into_iter()\n\
    \        .map(|x| (x, x.count_ones()))\n        .collect::<Vec<_>>()\n       \
    \ .sort_by(|x, y| (x.1, x.0).cmp(&(y.1, y.0)));\n    let mut ret = Vec::new();\n\
    \    for (x, _) in arr {\n        ret.push(x);\n    }\n    ret\n}\n\nfn main()\
    \ {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3,\
    \ 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]),\
    \ vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0,\
    \ 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpoilkr3uk.rs:11:9\n   |\n\
    11 |     for (x, _) in arr {\n   |         ^^^^^^    --- this expression has type\
    \ `isize`\n   |         |\n   |         expected `isize`, found tuple\n   |\n\
    \   = note: expected type `isize`\n             found tuple `(_, _)`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822460
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    arr.iter()\n\
    \        .map(|n| (n, n.count_ones()))\n        .sorted_by(|&(a, ca), &(b, cb)|\
    \ if ca == cb { a.cmp(b) } else { ca.cmp(&cb) })\n        .into_iter()\n     \
    \   .map(|(n, _)| n)\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4,\
    \ 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4, -2, -6,\
    \ -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n\
    \    assert_eq!(candidate(vec![3, 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n\
    \    assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n  \
    \  assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted_by` found for struct `Map` in the\
    \ current scope\n --> /tmp/tmp_q3ey32s.rs:8:10\n  |\n8 |         .sorted_by(|&(a,\
    \ ca), &(b, cb)| if ca == cb { a.cmp(b) } else { ca.cmp(&cb) })\n  |         \
    \ ^^^^^^^^^ method not found in `Map<std::slice::Iter<'_, isize>, [closure@/tmp/tmp_q3ey32s.rs:7:14:\
    \ 7:37]>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659822460
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut v =\
    \ arr;\n    v.sort_by(|a, b| {\n        count_ones(a)\n            .cmp(&count_ones(b))\n\
    \            .then(a.cmp(b))\n    });\n    v\n}\n\nfn main() {\n    let candidate\
    \ = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4,\
    \ 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4, -2, -6,\
    \ -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n\
    \    assert_eq!(candidate(vec![3, 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n\
    \    assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n  \
    \  assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `count_ones` in this scope\n --> /tmp/tmp2wzgaqok.rs:8:9\n\
    \  |\n8 |         count_ones(a)\n  |         ^^^^^^^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find function `count_ones` in this scope\n --> /tmp/tmp2wzgaqok.rs:9:19\n\
    \  |\n9 |             .cmp(&count_ones(b))\n  |                   ^^^^^^^^^^ not\
    \ found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822460
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    use std::fmt::Write;\n\
    \    let mut temp = arr.iter().map(|&i| (i, count_ones(i))).collect::<Vec<_>>();\n\
    \    temp.sort_by(|a, b| match a.1.cmp(&b.1) {\n        std::cmp::Ordering::Equal\
    \ => a.0.cmp(&b.0),\n        r => r,\n    });\n    temp.iter().map(|&(i, _)| i).collect()\n\
    }\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `count_ones` in this scope\n --> /tmp/tmpwx4i7wrb.rs:7:44\n\
    \  |\n7 |     let mut temp = arr.iter().map(|&i| (i, count_ones(i))).collect::<Vec<_>>();\n\
    \  |                                            ^^^^^^^^^^ not found in this scope\n\
    \nwarning: unused import: `std::fmt::Write`\n --> /tmp/tmpwx4i7wrb.rs:6:9\n  |\n\
    6 |     use std::fmt::Write;\n  |         ^^^^^^^^^^^^^^^\n  |\n  = note: `#[warn(unused_imports)]`\
    \ on by default\n\nerror[E0609]: no field `1` on type `&_`\n --> /tmp/tmpwx4i7wrb.rs:8:33\n\
    \  |\n8 |     temp.sort_by(|a, b| match a.1.cmp(&b.1) {\n  |                 \
    \                ^\n\nerror: aborting due to 2 previous errors; 1 warning emitted\n\
    \nSome errors have detailed explanations: E0425, E0609.\nFor more information\
    \ about an error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822460
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    arr.into_iter()\n\
    \        .sorted_by(|a, b| {\n            let ones_a = a.count_ones();\n     \
    \       let ones_b = b.count_ones();\n            if ones_a == ones_b {\n    \
    \            a.cmp(b)\n            } else {\n                ones_a.cmp(&ones_b)\n\
    \            }\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4,\
    \ 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4, -2, -6,\
    \ -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n\
    \    assert_eq!(candidate(vec![3, 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n\
    \    assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n  \
    \  assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted_by` found for struct `std::vec::IntoIter`\
    \ in the current scope\n --> /tmp/tmpprd_w2o7.rs:7:10\n  |\n7 |         .sorted_by(|a,\
    \ b| {\n  |          ^^^^^^^^^ method not found in `std::vec::IntoIter<isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659822460
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut res\
    \ = arr.clone();\n    res.sort_by(|a, b| count_ones(*a).cmp(&count_ones(*b)));\n\
    \    res\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `count_ones` in this scope\n --> /tmp/tmp4b1g20yy.rs:7:24\n\
    \  |\n7 |     res.sort_by(|a, b| count_ones(*a).cmp(&count_ones(*b)));\n  |  \
    \                      ^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find function `count_ones` in this scope\n --> /tmp/tmp4b1g20yy.rs:7:44\n  |\n\
    7 |     res.sort_by(|a, b| count_ones(*a).cmp(&count_ones(*b)));\n  |        \
    \                                    ^^^^^^^^^^ not found in this scope\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822460
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    arr.into_iter()\n\
    \        .map(|n| {\n            let mut n = n as usize;\n            let mut\
    \ i = 0;\n            while n > 0 {\n                i += n & 1;\n           \
    \     n >>= 1;\n            }\n            (i, n)\n        })\n        .sorted_by(|a,\
    \ b| {\n            if a.0 == b.0 {\n                a.1.cmp(&b.1)\n         \
    \   } else {\n                a.0.cmp(&b.0)\n            }\n        })\n     \
    \   .map(|(_, n)| n as isize)\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4,\
    \ 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4, -2, -6,\
    \ -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n\
    \    assert_eq!(candidate(vec![3, 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n\
    \    assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n  \
    \  assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted_by` found for struct `Map` in the\
    \ current scope\n  --> /tmp/tmpf5o80yfx.rs:16:10\n   |\n16 |         .sorted_by(|a,\
    \ b| {\n   |          ^^^^^^^^^ method not found in `Map<std::vec::IntoIter<isize>,\
    \ [closure@/tmp/tmpf5o80yfx.rs:7:14: 15:10]>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659822460
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    use std::cmp::Ordering;\n\
    \    use std::collections::HashMap;\n\n    if arr.is_empty() {\n        return\
    \ vec![];\n    }\n\n    let mut map = HashMap::new();\n    let mut max_count =\
    \ 0;\n\n    for num in arr.iter() {\n        let mut count = 0;\n        let mut\
    \ n = *num;\n        while n > 0 {\n            count += 1;\n            n = n\
    \ & (n - 1);\n        }\n        if count > max_count {\n            max_count\
    \ = count;\n        }\n        map.entry(count).or_insert(vec![]).push(*num);\n\
    \    }\n\n    let mut result = vec![];\n    for count in 0..max_count {\n    \
    \    if let Some(nums) = map.get(&count) {\n            result.extend(nums.iter().cloned().sorted());\n\
    \        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused import: `std::cmp::Ordering`\n --> /tmp/tmpfg5sybyy.rs:6:9\n\
    \  |\n6 |     use std::cmp::Ordering;\n  |         ^^^^^^^^^^^^^^^^^^\n  |\n \
    \ = note: `#[warn(unused_imports)]` on by default\n\nerror[E0599]: no method named\
    \ `sorted` found for struct `Cloned` in the current scope\n  --> /tmp/tmpfg5sybyy.rs:32:48\n\
    \   |\n32 |             result.extend(nums.iter().cloned().sorted());\n   |  \
    \                                              ^^^^^^ method not found in `Cloned<std::slice::Iter<'_,\
    \ isize>>`\n\nerror: aborting due to previous error; 1 warning emitted\n\nFor\
    \ more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659822460
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    // We sort the\
    \ vector of data (arr) based on the number of bits\n    // in the binary representation\
    \ of the number.\n    // The same idea is used as in the solution to the last\
    \ kata,\n    // but slightly more complicated.\n    // The basic idea is to generate\
    \ a vector of the required tuples\n    // and then sort it.\n    //\n    // We\
    \ start by returning the vector containing the tuples for the\n    // current\
    \ vector of data.\n    let mut data = zip_sort_data(arr);\n    // Now we sort\
    \ it and return the sorted vector.\n    data.sort();\n    return data.iter().map(|x|\
    \ x.1).collect();\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `zip_sort_data` in this scope\n  -->\
    \ /tmp/tmp6xgs7b1y.rs:15:20\n   |\n15 |     let mut data = zip_sort_data(arr);\n\
    \   |                    ^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659822460
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    if arr.is_empty()\
    \ {\n        return arr;\n    }\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        if bits_of(*a) == bits_of(*b) {\n            a.cmp(b)\n        }\
    \ else {\n            bits_of(*a).cmp(&bits_of(*b))\n        }\n    });\n    arr\n\
    }\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `bits_of` in this scope\n  --> /tmp/tmpcy55mfww.rs:11:12\n\
    \   |\n11 |         if bits_of(*a) == bits_of(*b) {\n   |            ^^^^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find function `bits_of` in this\
    \ scope\n  --> /tmp/tmpcy55mfww.rs:11:27\n   |\n11 |         if bits_of(*a) ==\
    \ bits_of(*b) {\n   |                           ^^^^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find function `bits_of` in this scope\n  --> /tmp/tmpcy55mfww.rs:14:13\n\
    \   |\n14 |             bits_of(*a).cmp(&bits_of(*b))\n   |             ^^^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find function `bits_of` in this\
    \ scope\n  --> /tmp/tmpcy55mfww.rs:14:30\n   |\n14 |             bits_of(*a).cmp(&bits_of(*b))\n\
    \   |                              ^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to 4 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822460
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut arr:\
    \ Vec<(isize, isize)> = arr.into_iter().map(|x| (x, x.count_ones())).collect();\n\
    \    arr.sort_by(|a, b| a.1.cmp(&b.1).then(a.0.cmp(&b.0)));\n    arr.into_iter().map(|(x,\
    \ _)| x).collect()\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<(isize, isize)>` cannot be built from\
    \ an iterator over elements of type `(isize, u32)`\n --> /tmp/tmp7qz7iaqj.rs:6:85\n\
    \  |\n6 |     let mut arr: Vec<(isize, isize)> = arr.into_iter().map(|x| (x, x.count_ones())).collect();\n\
    \  |                                                                         \
    \            ^^^^^^^ value of type `Vec<(isize, isize)>` cannot be built from\
    \ `std::iter::Iterator<Item=(isize, u32)>`\n  |\n  = help: the trait `FromIterator<(isize,\
    \ u32)>` is not implemented for `Vec<(isize, isize)>`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659822460
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut map\
    \ = HashMap::new();\n    let mut mut_arr = arr.clone();\n    mut_arr.sort();\n\
    \    for elem in &mut_arr {\n        let count = elem.count_ones();\n        map.entry(count).or_insert(Vec::new()).push(*elem);\n\
    \    }\n    let mut sorted_vec = Vec::new();\n    for i in 0..32 {\n        if\
    \ let Some(v) = map.get(&i) {\n            for n in v {\n                sorted_vec.push(n);\n\
    \            }\n        }\n    }\n    sorted_vec\n}\n\nfn main() {\n    let candidate\
    \ = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4,\
    \ 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4, -2, -6,\
    \ -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n\
    \    assert_eq!(candidate(vec![3, 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n\
    \    assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n  \
    \  assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmpiqhnykrw.rs:6:19\n  |\n6 |     let mut map = HashMap::new();\n  |  \
    \                 ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659822460
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    arr.into_iter()\n\
    \        .sorted_by(|a, b| {\n            let count_a = a.count_ones();\n    \
    \        let count_b = b.count_ones();\n            match count_a.cmp(&count_b)\
    \ {\n                Ordering::Equal => a.cmp(b),\n                other => other,\n\
    \            }\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4,\
    \ 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4, -2, -6,\
    \ -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n\
    \    assert_eq!(candidate(vec![3, 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n\
    \    assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n  \
    \  assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Ordering`\n  -->\
    \ /tmp/tmpvwk1wlyn.rs:11:17\n   |\n11 |                 Ordering::Equal => a.cmp(b),\n\
    \   |                 ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0599]:\
    \ no method named `sorted_by` found for struct `std::vec::IntoIter` in the current\
    \ scope\n --> /tmp/tmpvwk1wlyn.rs:7:10\n  |\n7 |         .sorted_by(|a, b| {\n\
    \  |          ^^^^^^^^^ method not found in `std::vec::IntoIter<isize>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0433, E0599.\nFor more information about an error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659822460
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut arr\
    \ = arr;\n    arr.sort_by(|a, b| {\n        let a1 = std::cmp::Reverse(a.count_ones());\n\
    \        let b1 = std::cmp::Reverse(b.count_ones());\n        let a2 = std::cmp::Reverse(*a);\n\
    \        let b2 = std::cmp::Reverse(*b);\n        a1.cmp(&b1).then(a2.cmp(&b2))\n\
    \    });\n    arr\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, 4, 2, 1]`,\n right: `[1, 2, 4, 3, 5]`', /tmp/tmpmjc5ypt2.rs:19:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822460
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut max\
    \ = 0;\n    let mut ones = vec![0; arr.len()];\n    for (i, n) in arr.iter().enumerate()\
    \ {\n        let mut n = *n;\n        let mut c = 0;\n        while n > 0 {\n\
    \            if n % 2 == 1 {\n                c += 1;\n            }\n       \
    \     n /= 2;\n        }\n        if c > max {\n            max = c;\n       \
    \ }\n        ones[i] = c;\n    }\n    let mut res = vec![vec![]; max as usize\
    \ + 1];\n    for (i, n) in arr.iter().enumerate() {\n        res[ones[i] as usize].push(*n);\n\
    \    }\n    let mut r = vec![];\n    for v in res {\n        let mut vv = v.clone();\n\
    \        vv.sort();\n        r.extend(vv);\n    }\n    r\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -5, -4, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpn19ivvrg.rs:38:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822460
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut arr\
    \ = arr;\n    arr.sort_by(|a, b| {\n        let a_bin = format!(\"{:b}\", a);\n\
    \        let b_bin = format!(\"{:b}\", b);\n        let a_ones = a_bin.matches('1').count();\n\
    \        let b_ones = b_bin.matches('1').count();\n        if a_ones != b_ones\
    \ {\n            a_ones.cmp(&b_ones)\n        } else {\n            a.cmp(&b)\n\
    \        }\n    });\n    arr\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpi2dxuzrv.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822460
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = vec![];\n    let mut sorted = arr.clone();\n    sorted.sort_by(|a, b| a.count_ones().cmp(&b.count_ones()));\n\
    \    let mut ones = 0;\n    while sorted.len() > 0 {\n        let value = sorted.pop().unwrap();\n\
    \        if value.count_ones() > ones {\n            ones = value.count_ones();\n\
    \            result.push(value);\n        } else {\n            result.insert(0,\
    \ value);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate =\
    \ sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3,\
    \ 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4, -2, -6, -5,\
    \ -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n\
    \    assert_eq!(candidate(vec![3, 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n\
    \    assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n  \
    \  assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 4, 5, 3]`,\n right: `[1, 2, 4, 3, 5]`', /tmp/tmpgunfrokg.rs:24:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822460
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut bits:\
    \ Vec<_> = arr.iter().map(|a| (a, bit_count(*a))).collect();\n    bits.sort_by(|a,\
    \ b| match a.1.cmp(&b.1) {\n        Ordering::Equal => a.0.cmp(&b.0),\n      \
    \  o => o,\n    });\n    bits.into_iter().map(|b| b.0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3,\
    \ 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]),\
    \ vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0,\
    \ 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Ordering`\n -->\
    \ /tmp/tmp83ge685v.rs:8:9\n  |\n8 |         Ordering::Equal => a.0.cmp(&b.0),\n\
    \  |         ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0425]: cannot\
    \ find function `bit_count` in this scope\n --> /tmp/tmp83ge685v.rs:6:51\n  |\n\
    6 |     let mut bits: Vec<_> = arr.iter().map(|a| (a, bit_count(*a))).collect();\n\
    \  |                                                   ^^^^^^^^^ not found in\
    \ this scope\n\nerror[E0609]: no field `1` on type `&_`\n --> /tmp/tmp83ge685v.rs:7:33\n\
    \  |\n7 |     bits.sort_by(|a, b| match a.1.cmp(&b.1) {\n  |                 \
    \                ^\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0425, E0433, E0609.\nFor more information about\
    \ an error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822460
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut arr\
    \ = arr;\n    arr.sort_by(|a, b| count_ones(*a).cmp(&count_ones(*b)).then(a.cmp(b)));\n\
    \    arr\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `count_ones` in this scope\n --> /tmp/tmp_09j5w_d.rs:7:24\n\
    \  |\n7 |     arr.sort_by(|a, b| count_ones(*a).cmp(&count_ones(*b)).then(a.cmp(b)));\n\
    \  |                        ^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `count_ones` in this scope\n --> /tmp/tmp_09j5w_d.rs:7:44\n\
    \  |\n7 |     arr.sort_by(|a, b| count_ones(*a).cmp(&count_ones(*b)).then(a.cmp(b)));\n\
    \  |                                            ^^^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822460
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    arr.into_iter()\n\
    \        .map(|n| (n, num_of_ones(n as u64)))\n        .collect::<Vec<_>>()\n\
    \        .sort_by(|a, b| a.1.cmp(&b.1).then(a.0.cmp(&b.0)))\n        .into_iter()\n\
    \        .map(|(n, _)| n)\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4,\
    \ 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4, -2, -6,\
    \ -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n\
    \    assert_eq!(candidate(vec![3, 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n\
    \    assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n  \
    \  assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `num_of_ones` in this scope\n --> /tmp/tmp179gt685.rs:7:22\n\
    \  |\n7 |         .map(|n| (n, num_of_ones(n as u64)))\n  |                  \
    \    ^^^^^^^^^^^ not found in this scope\n\nerror[E0609]: no field `1` on type\
    \ `&_`\n --> /tmp/tmp179gt685.rs:9:27\n  |\n9 |         .sort_by(|a, b| a.1.cmp(&b.1).then(a.0.cmp(&b.0)))\n\
    \  |                           ^\n\nerror[E0599]: the method `into_iter` exists\
    \ for unit type `()`, but its trait bounds were not satisfied\n  --> /tmp/tmp179gt685.rs:10:10\n\
    \   |\n10 |         .into_iter()\n   |          ^^^^^^^^^ method cannot be called\
    \ on `()` due to unsatisfied trait bounds\n   |\n   = note: the following trait\
    \ bounds were not satisfied:\n           `(): Iterator`\n           which is required\
    \ by `(): IntoIterator`\n           `&(): Iterator`\n           which is required\
    \ by `&(): IntoIterator`\n           `&mut (): Iterator`\n           which is\
    \ required by `&mut (): IntoIterator`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0425, E0599, E0609.\nFor more information\
    \ about an error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822460
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = vec![];\n    for i in 0..arr.len() {\n        let mut m = 0;\n        let\
    \ mut n = arr[i];\n        while n > 0 {\n            m += n % 2;\n          \
    \  n /= 2;\n        }\n        result.push((m, arr[i]));\n    }\n    result.sort();\n\
    \    result.iter().map(|&(_, n)| n).collect()\n}\n\nfn main() {\n    let candidate\
    \ = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4,\
    \ 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4, -2, -6,\
    \ -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n\
    \    assert_eq!(candidate(vec![3, 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n\
    \    assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n  \
    \  assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -5, -4, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpeftf4_sf.rs:23:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822460
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    arr.into_iter()\n\
    \        .map(|x| (x, x.count_ones()))\n        .collect::<Vec<_>>()\n       \
    \ .sort_by(|a, b| match a.1.cmp(&b.1) {\n            Ordering::Equal => a.0.cmp(&b.0),\n\
    \            ord => ord,\n        });\n    arr\n}\n\nfn main() {\n    let candidate\
    \ = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4,\
    \ 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4, -2, -6,\
    \ -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n\
    \    assert_eq!(candidate(vec![3, 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n\
    \    assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n  \
    \  assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Ordering`\n  -->\
    \ /tmp/tmprx9r1u_g.rs:10:13\n   |\n10 |             Ordering::Equal => a.0.cmp(&b.0),\n\
    \   |             ^^^^^^^^ use of undeclared type `Ordering`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659822460
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut sorted\
    \ = arr.to_vec();\n    sorted.sort_by(|a, b| {\n        let ones_a = a.count_ones();\n\
    \        let ones_b = b.count_ones();\n        ones_a.cmp(&ones_b).then(a.cmp(b))\n\
    \    });\n    sorted\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmptlwmwkpc.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822460
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut arr\
    \ = arr;\n    arr.sort_by(|a, b| {\n        let a_bin = format!(\"{:b}\", a);\n\
    \        let b_bin = format!(\"{:b}\", b);\n        let mut ones_a = 0;\n    \
    \    let mut ones_b = 0;\n        for c in a_bin.chars() {\n            if c ==\
    \ '1' {\n                ones_a += 1;\n            }\n        }\n        for c\
    \ in b_bin.chars() {\n            if c == '1' {\n                ones_b += 1;\n\
    \            }\n        }\n        if ones_a == ones_b {\n            a.cmp(b)\n\
    \        } else {\n            ones_a.cmp(&ones_b)\n        }\n    });\n    arr\n\
    }\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmp2w_bw0fd.rs:34:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = arr.clone();\n    result.sort_by(|a, b| {\n        let ones_a = ones_in_binary(*a);\n\
    \        let ones_b = ones_in_binary(*b);\n        if ones_a != ones_b {\n   \
    \         ones_a.cmp(&ones_b)\n        } else {\n            a.cmp(b)\n      \
    \  }\n    });\n    result\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `ones_in_binary` in this scope\n -->\
    \ /tmp/tmpsvt1xyf6.rs:8:22\n  |\n8 |         let ones_a = ones_in_binary(*a);\n\
    \  |                      ^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `ones_in_binary` in this scope\n --> /tmp/tmpsvt1xyf6.rs:9:22\n\
    \  |\n9 |         let ones_b = ones_in_binary(*b);\n  |                      ^^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822460
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut arr\
    \ = arr;\n    arr.sort_by(|a, b| a.count_ones().cmp(&b.count_ones()).then(a.cmp(b)));\n\
    \    arr\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpqtx7kx0n.rs:14:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822460
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    use std::cmp::Ordering;\n\
    \    use std::fmt::Write;\n\n    arr.iter()\n        .map(|&num| {\n         \
    \   let mut num_ones = 0;\n            let mut num_ones_str = String::new();\n\
    \            write!(&mut num_ones_str, \"{:b}\", num).unwrap();\n            num_ones\
    \ = num_ones_str.chars().filter(|&c| c == '1').count();\n            (num, num_ones,\
    \ num_ones_str)\n        })\n        .sorted_by(|a, b| match a.1.cmp(&b.1) {\n\
    \            Ordering::Equal => a.2.cmp(&b.2),\n            Ordering::Less =>\
    \ Ordering::Less,\n            Ordering::Greater => Ordering::Greater,\n     \
    \   })\n        .map(|(num, _, _)| num)\n        .collect()\n}\n\nfn main() {\n\
    \    let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted_by` found for struct `Map` in the\
    \ current scope\n  --> /tmp/tmp5sm0z_w2.rs:17:10\n   |\n17 |         .sorted_by(|a,\
    \ b| match a.1.cmp(&b.1) {\n   |          ^^^^^^^^^ method not found in `Map<std::slice::Iter<'_,\
    \ isize>, [closure@/tmp/tmp5sm0z_w2.rs:10:14: 16:10]>`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659822460
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut new_arr\
    \ = arr.clone();\n    new_arr.sort_by(|a, b| {\n        let a_b = format!(\"{:b}\"\
    , a);\n        let b_b = format!(\"{:b}\", b);\n        a_b.chars().filter(|&x|\
    \ x == '1').count().cmp(&b_b.chars().filter(|&x| x == '1').count())\n    });\n\
    \    new_arr\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 4, 5, 3]`,\n right: `[1, 2, 4, 3, 5]`', /tmp/tmpf7g9e_pe.rs:17:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822460
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let ones = |x:\
    \ isize| x.count_ones();\n    arr.iter().cloned().collect::<Vec<_>>().sort_by(|a,\
    \ b| {\n        (ones(*a), *a).cmp(&(ones(*b), *b))\n    })\n}\n\nfn main() {\n\
    \    let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp8h9y7lmm.rs:7:5\n  |\n5 |\
    \   fn sort_array(arr: Vec<isize>) -> Vec<isize> {\n  |                      \
    \               ---------- expected `Vec<isize>` because of return type\n6 | \
    \      let ones = |x: isize| x.count_ones();\n7 | /     arr.iter().cloned().collect::<Vec<_>>().sort_by(|a,\
    \ b| {\n8 | |         (ones(*a), *a).cmp(&(ones(*b), *b))\n9 | |     })\n  | |______^\
    \ expected struct `Vec`, found `()`\n  |\n  = note: expected struct `Vec<isize>`\n\
    \          found unit type `()`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822460
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut arr\
    \ = arr;\n    arr.sort_by(|a, b| count_ones(*a).cmp(&count_ones(*b)).then(a.cmp(b)));\n\
    \    arr\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `count_ones` in this scope\n --> /tmp/tmp_09j5w_d.rs:7:24\n\
    \  |\n7 |     arr.sort_by(|a, b| count_ones(*a).cmp(&count_ones(*b)).then(a.cmp(b)));\n\
    \  |                        ^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `count_ones` in this scope\n --> /tmp/tmp_09j5w_d.rs:7:44\n\
    \  |\n7 |     arr.sort_by(|a, b| count_ones(*a).cmp(&count_ones(*b)).then(a.cmp(b)));\n\
    \  |                                            ^^^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822460
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut v: Vec<isize>\
    \ = arr.into_iter().map(|n| (n, n.count_ones() as usize)).collect();\n    v.sort_by(|a,\
    \ b| a.1.cmp(&b.1).then(a.0.cmp(&b.0)));\n    v.into_iter().map(|n| n.0).collect()\n\
    }\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<isize>` cannot be built from an iterator\
    \ over elements of type `(isize, usize)`\n --> /tmp/tmpw97s2r96.rs:6:83\n  |\n\
    6 |     let mut v: Vec<isize> = arr.into_iter().map(|n| (n, n.count_ones() as\
    \ usize)).collect();\n  |                                                    \
    \                               ^^^^^^^ value of type `Vec<isize>` cannot be built\
    \ from `std::iter::Iterator<Item=(isize, usize)>`\n  |\n  = help: the trait `FromIterator<(isize,\
    \ usize)>` is not implemented for `Vec<isize>`\n\nerror[E0609]: no field `1` on\
    \ type `&isize`\n --> /tmp/tmpw97s2r96.rs:7:24\n  |\n7 |     v.sort_by(|a, b|\
    \ a.1.cmp(&b.1).then(a.0.cmp(&b.0)));\n  |                        ^\n\nerror[E0609]:\
    \ no field `1` on type `&isize`\n --> /tmp/tmpw97s2r96.rs:7:33\n  |\n7 |     v.sort_by(|a,\
    \ b| a.1.cmp(&b.1).then(a.0.cmp(&b.0)));\n  |                                \
    \ ^\n\nerror[E0609]: no field `0` on type `&isize`\n --> /tmp/tmpw97s2r96.rs:7:43\n\
    \  |\n7 |     v.sort_by(|a, b| a.1.cmp(&b.1).then(a.0.cmp(&b.0)));\n  |      \
    \                                     ^\n\nerror[E0609]: no field `0` on type\
    \ `&isize`\n --> /tmp/tmpw97s2r96.rs:7:52\n  |\n7 |     v.sort_by(|a, b| a.1.cmp(&b.1).then(a.0.cmp(&b.0)));\n\
    \  |                                                    ^\n\nerror[E0610]: `isize`\
    \ is a primitive type and therefore doesn't have fields\n --> /tmp/tmpw97s2r96.rs:8:29\n\
    \  |\n8 |     v.into_iter().map(|n| n.0).collect()\n  |                      \
    \       ^\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0609, E0610.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659822460
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut arr\
    \ = arr;\n    arr.sort_by(|a, b| {\n        let (a_ones, a_dec) = ones_and_dec(*a);\n\
    \        let (b_ones, b_dec) = ones_and_dec(*b);\n        a_ones.cmp(&b_ones).then(a_dec.cmp(&b_dec))\n\
    \    });\n    arr\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `ones_and_dec` in this scope\n --> /tmp/tmplk_qxfn2.rs:8:31\n\
    \  |\n8 |         let (a_ones, a_dec) = ones_and_dec(*a);\n  |               \
    \                ^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find function `ones_and_dec` in this scope\n --> /tmp/tmplk_qxfn2.rs:9:31\n\
    \  |\n9 |         let (b_ones, b_dec) = ones_and_dec(*b);\n  |               \
    \                ^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659822460
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    arr.iter()\n\
    \        .map(|x| (*x, x.count_ones()))\n        .sorted_by(|x, y| {\n       \
    \     if x.1 == y.1 {\n                x.0.cmp(&y.0)\n            } else {\n \
    \               x.1.cmp(&y.1)\n            }\n        })\n        .map(|x| x.0)\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted_by` found for struct `Map` in the\
    \ current scope\n --> /tmp/tmp6rz7ndey.rs:8:10\n  |\n8 |         .sorted_by(|x,\
    \ y| {\n  |          ^^^^^^^^^ method not found in `Map<std::slice::Iter<'_, isize>,\
    \ [closure@/tmp/tmp6rz7ndey.rs:7:14: 7:38]>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659822460
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut r =\
    \ arr.clone();\n    r.sort_by(|a, b| {\n        let ones_a = a.count_ones();\n\
    \        let ones_b = b.count_ones();\n        if ones_a == ones_b {\n       \
    \     a.cmp(b)\n        } else {\n            ones_a.cmp(&ones_b)\n        }\n\
    \    });\n    r\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmp39algkx4.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    // Size of arr.\n\
    \    let arr_size = arr.len();\n    // Initialise a bit_arr with same size as\
    \ arr, fill with 0's.\n    let mut bit_arr: Vec<usize> = vec![0; arr_size];\n\
    \    for i in 0..arr_size {\n        // Get the binary representation of arr[i].\n\
    \        let mut binary_rep = arr[i].to_string();\n        // If it is negative,\
    \ remove the sign.\n        binary_rep = binary_rep.trim_start_matches('-').to_string();\n\
    \        // Convert binary_rep to integer.\n        let binary_rep = usize::from_str_radix(&binary_rep,\
    \ 2).unwrap();\n        // Count the number of 1's.\n        bit_arr[i] = binary_rep.count_ones();\n\
    \    }\n    // Sort bit_arr using the closures.\n    let mut bit_arr = bit_arr.iter().enumerate().collect::<Vec<(usize,\
    \ &usize)>>();\n    bit_arr.sort_by(|(_, x), (_, y)| x.cmp(y));\n    // Sort arr\
    \ based on bit_arr.\n    for j in 0..arr_size {\n        for k in j..arr_size\
    \ {\n            // If the indices of arr and bit_arr are the same,\n        \
    \    // then swap the elements.\n            if bit_arr[j].0 == k {\n        \
    \        let temp = arr[j];\n                arr[j] = arr[k];\n              \
    \  arr[k] = temp;\n            }\n        }\n    }\n    arr\n}\n\nfn main() {\n\
    \    let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpyk2g1rb9.rs:18:22\n   |\n\
    18 |         bit_arr[i] = binary_rep.count_ones();\n   |                     \
    \ ^^^^^^^^^^^^^^^^^^^^^^^ expected `usize`, found `u32`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659822460
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut count\
    \ = vec![0; arr.len()];\n    for (i, x) in arr.iter().enumerate() {\n        count[i]\
    \ = x.count_ones();\n    }\n    arr.into_iter()\n        .zip(count.into_iter())\n\
    \        .sorted_by(|x, y| {\n            x.1.cmp(&y.1).then(x.0.cmp(&y.0))\n\
    \        })\n        .map(|x| x.0)\n        .collect()\n}\n\nfn main() {\n   \
    \ let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted_by` found for struct `Zip` in the\
    \ current scope\n  --> /tmp/tmp8vvu76un.rs:12:10\n   |\n12 |         .sorted_by(|x,\
    \ y| {\n   |          ^^^^^^^^^ method not found in `Zip<std::vec::IntoIter<isize>,\
    \ std::vec::IntoIter<u32>>`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659822460
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut vec\
    \ = arr.clone();\n    vec.sort_by(|a, b| bit_count(a).cmp(&bit_count(b)).then(a.cmp(b)));\n\
    \    vec\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `bit_count` in this scope\n --> /tmp/tmp9r5_l2dr.rs:7:24\n\
    \  |\n7 |     vec.sort_by(|a, b| bit_count(a).cmp(&bit_count(b)).then(a.cmp(b)));\n\
    \  |                        ^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `bit_count` in this scope\n --> /tmp/tmp9r5_l2dr.rs:7:42\n\
    \  |\n7 |     vec.sort_by(|a, b| bit_count(a).cmp(&bit_count(b)).then(a.cmp(b)));\n\
    \  |                                          ^^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822460
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    use std::collections::HashMap;\n\
    \    let mut ones_map: HashMap<usize, Vec<isize>> = HashMap::new();\n    let mut\
    \ result: Vec<isize> = vec![];\n    let mut max_ones = 0;\n    for num in arr\
    \ {\n        let ones = count_ones(num);\n        max_ones = std::cmp::max(max_ones,\
    \ ones);\n        let mut bucket = ones_map.entry(ones).or_insert(vec![]);\n \
    \       bucket.push(num);\n    }\n    for i in 0..=max_ones {\n        if let\
    \ Some(bucket) = ones_map.get_mut(&i) {\n            bucket.sort();\n        \
    \    result.append(bucket);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `count_ones` in this scope\n  --> /tmp/tmp5gd4uplf.rs:11:20\n\
    \   |\n11 |         let ones = count_ones(num);\n   |                    ^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822460
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut arr\
    \ = arr;\n    arr.sort_by(|x, y| {\n        let mut x_ones = 0;\n        let mut\
    \ y_ones = 0;\n        let mut x_value = *x;\n        let mut y_value = *y;\n\
    \        while x_value > 0 {\n            x_ones += (x_value & 1) as usize;\n\
    \            x_value >>= 1;\n        }\n        while y_value > 0 {\n        \
    \    y_ones += (y_value & 1) as usize;\n            y_value >>= 1;\n        }\n\
    \        if x_ones == y_ones {\n            return x.cmp(y);\n        }\n    \
    \    x_ones.cmp(&y_ones)\n    });\n    arr\n}\n\nfn main() {\n    let candidate\
    \ = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4,\
    \ 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4, -2, -6,\
    \ -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n\
    \    assert_eq!(candidate(vec![3, 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n\
    \    assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n  \
    \  assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -5, -4, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpdlqqe4pk.rs:31:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut arr\
    \ = arr;\n    arr.sort_by(|a, b| a.count_ones().cmp(&b.count_ones()).then(a.cmp(b)));\n\
    \    arr\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpqtx7kx0n.rs:14:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822460
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    arr.iter()\n\
    \        .map(|&x| (x, x.count_ones()))\n        .collect::<Vec<_>>()\n      \
    \  .sort_by(|x, y| x.1.cmp(&y.1).then(x.0.cmp(&y.0)))\n        .iter()\n     \
    \   .map(|x| x.0)\n        .collect()\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `iter` found for unit type `()` in the current\
    \ scope\n  --> /tmp/tmpicttoem8.rs:10:10\n   |\n10 |         .iter()\n   |   \
    \       ^^^^ method not found in `()`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659822460
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut x =\
    \ arr.into_iter().collect::<Vec<_>>();\n    x.sort_by(|a, b| {\n        let a\
    \ = a.count_ones();\n        let b = b.count_ones();\n        if a < b {\n   \
    \         return std::cmp::Ordering::Less;\n        }\n        if a > b {\n  \
    \          return std::cmp::Ordering::Greater;\n        }\n        return a.cmp(b);\n\
    \    });\n    x\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp97rvvprs.rs:16:22\n   |\n\
    16 |         return a.cmp(b);\n   |                      ^\n   |             \
    \         |\n   |                      expected `&u32`, found `u32`\n   |    \
    \                  help: consider borrowing here: `&b`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659822460
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut arr\
    \ = arr;\n    let mut result = vec![];\n    while arr.len() > 0 {\n        let\
    \ mut ones = vec![];\n        let mut twos = vec![];\n        for i in arr.iter()\
    \ {\n            if is_one(i) {\n                ones.push(*i);\n            }\
    \ else {\n                twos.push(*i);\n            }\n        }\n        ones.sort();\n\
    \        twos.sort();\n        result.append(&mut ones);\n        result.append(&mut\
    \ twos);\n        arr = result.clone();\n        result = vec![];\n    }\n   \
    \ arr\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_one` in this scope\n  --> /tmp/tmpm7yxi3u0.rs:12:16\n\
    \   |\n12 |             if is_one(i) {\n   |                ^^^^^^ not found in\
    \ this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822460
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut ret\
    \ = arr.clone();\n    ret.sort_by(|a, b| {\n        let a_ones = ones(*a);\n \
    \       let b_ones = ones(*b);\n        if a_ones != b_ones {\n            a_ones.cmp(&b_ones)\n\
    \        } else {\n            a.cmp(b)\n        }\n    });\n    ret\n}\n\nfn\
    \ main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `ones` in this scope\n --> /tmp/tmp0q_mq_09.rs:8:22\n\
    \  |\n8 |         let a_ones = ones(*a);\n  |                      ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find function `ones` in this scope\n -->\
    \ /tmp/tmp0q_mq_09.rs:9:22\n  |\n9 |         let b_ones = ones(*b);\n  |     \
    \                 ^^^^ not found in this scope\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822460
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut arr\
    \ = arr;\n    arr.sort_by(|a, b| {\n        let (x, y) = (ones_in_binary(*a),\
    \ ones_in_binary(*b));\n        if x == y {\n            a.cmp(b)\n        } else\
    \ {\n            x.cmp(&y)\n        }\n    });\n    arr\n}\n\nfn main() {\n  \
    \  let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `ones_in_binary` in this scope\n -->\
    \ /tmp/tmpv4179zql.rs:8:23\n  |\n8 |         let (x, y) = (ones_in_binary(*a),\
    \ ones_in_binary(*b));\n  |                       ^^^^^^^^^^^^^^ not found in\
    \ this scope\n\nerror[E0425]: cannot find function `ones_in_binary` in this scope\n\
    \ --> /tmp/tmpv4179zql.rs:8:43\n  |\n8 |         let (x, y) = (ones_in_binary(*a),\
    \ ones_in_binary(*b));\n  |                                           ^^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822460
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut v =\
    \ arr.into_iter().map(|x| (x, x.count_ones())).collect::<Vec<_>>();\n    v.sort_by(|a,\
    \ b| a.1.cmp(&b.1).then(a.0.cmp(&b.0)));\n    v.into_iter().map(|x| x.0).collect()\n\
    }\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmps5i5tgtr.rs:14:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut arr:\
    \ Vec<(usize, isize)> = arr.into_iter().map(|n| (n.count_ones(), n)).collect();\n\
    \    arr.sort();\n    arr.into_iter().map(|(_, v)| v).collect()\n}\n\nfn main()\
    \ {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3,\
    \ 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]),\
    \ vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0,\
    \ 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<(usize, isize)>` cannot be built from\
    \ an iterator over elements of type `(u32, isize)`\n --> /tmp/tmpg72mybgo.rs:6:85\n\
    \  |\n6 |     let mut arr: Vec<(usize, isize)> = arr.into_iter().map(|n| (n.count_ones(),\
    \ n)).collect();\n  |                                                        \
    \                             ^^^^^^^ value of type `Vec<(usize, isize)>` cannot\
    \ be built from `std::iter::Iterator<Item=(u32, isize)>`\n  |\n  = help: the trait\
    \ `FromIterator<(u32, isize)>` is not implemented for `Vec<(usize, isize)>`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    arr.into_iter()\n\
    \        .map(|x| (x, format!(\"{:b}\", x)))\n        .map(|(x, y)| (x, y.chars().filter(|&x|\
    \ x == '1').count()))\n        .sorted_by(|&(_, a), &(_, b)| if a == b {\n   \
    \         Ord::cmp(&a, &b)\n        } else {\n            Ord::cmp(&a, &b)\n \
    \       })\n        .map(|(x, _)| x)\n        .collect()\n}\n\nfn main() {\n \
    \   let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted_by` found for struct `Map` in the\
    \ current scope\n --> /tmp/tmpy_7khmlg.rs:9:10\n  |\n9 |         .sorted_by(|&(_,\
    \ a), &(_, b)| if a == b {\n  |          ^^^^^^^^^ method not found in `Map<Map<std::vec::IntoIter<isize>,\
    \ [closure@/tmp/tmpy_7khmlg.rs:7:14: 7:41]>, [closure@/tmp/tmpy_7khmlg.rs:8:14:\
    \ 8:67]>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut output\
    \ = vec![];\n    let mut zeros: Vec<isize> = vec![];\n    let mut ones: Vec<isize>\
    \ = vec![];\n    for i in 0..arr.len() {\n        let binary = format!(\"{:b}\"\
    , arr[i]);\n        if binary.contains(\"1\") {\n            ones.push(arr[i]);\n\
    \        } else {\n            zeros.push(arr[i]);\n        }\n    }\n    ones.sort();\n\
    \    zeros.sort();\n    output.append(&mut zeros);\n    output.append(&mut ones);\n\
    \    output\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 2, 4, 3, 5]`', /tmp/tmp93rtbgip.rs:26:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut arr:\
    \ Vec<(usize, isize)> = arr.into_iter().map(|x| (x.count_ones(), x)).collect();\n\
    \    arr.sort();\n    arr.into_iter().map(|(_, x)| x).collect()\n}\n\nfn main()\
    \ {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3,\
    \ 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]),\
    \ vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0,\
    \ 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<(usize, isize)>` cannot be built from\
    \ an iterator over elements of type `(u32, isize)`\n --> /tmp/tmpwe0jpluj.rs:6:85\n\
    \  |\n6 |     let mut arr: Vec<(usize, isize)> = arr.into_iter().map(|x| (x.count_ones(),\
    \ x)).collect();\n  |                                                        \
    \                             ^^^^^^^ value of type `Vec<(usize, isize)>` cannot\
    \ be built from `std::iter::Iterator<Item=(u32, isize)>`\n  |\n  = help: the trait\
    \ `FromIterator<(u32, isize)>` is not implemented for `Vec<(usize, isize)>`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut arr\
    \ = arr;\n    arr.sort_by(|a, b| {\n        match a.count_ones().cmp(&b.count_ones())\
    \ {\n            std::cmp::Ordering::Equal => a.cmp(b),\n            std::cmp::Ordering::Less\
    \ => std::cmp::Ordering::Less,\n            std::cmp::Ordering::Greater => std::cmp::Ordering::Greater,\n\
    \        }\n    });\n    arr\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpalmhugyt.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut arr\
    \ = arr;\n    arr.sort_by(|a, b| {\n        let mut c = a.count_ones() - b.count_ones();\n\
    \        if c == 0 {\n            c = a.cmp(b);\n        }\n        c\n    });\n\
    \    arr\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp64tbb3qp.rs:10:17\n   |\n\
    10 |             c = a.cmp(b);\n   |                 ^^^^^^^^ expected `u32`,\
    \ found enum `std::cmp::Ordering`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp64tbb3qp.rs:12:9\n\
    \   |\n12 |         c\n   |         ^ expected enum `std::cmp::Ordering`, found\
    \ `u32`\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut ones\
    \ = arr.clone();\n    ones.sort_by(|a, b| {\n        let aa = a.count_ones();\n\
    \        let bb = b.count_ones();\n        if aa != bb {\n            aa.cmp(&bb)\n\
    \        } else {\n            a.cmp(&b)\n        }\n    });\n    ones\n}\n\n\
    fn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpqznw1v1e.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut arr\
    \ = arr;\n    arr.sort_by(|a, b| {\n        let a_ones = ones_in_binary(*a);\n\
    \        let b_ones = ones_in_binary(*b);\n        if a_ones == b_ones {\n   \
    \         *a.cmp(b)\n        } else {\n            a_ones.cmp(&b_ones)\n     \
    \   }\n    });\n    arr\n}\n\nfn main() {\n    let candidate = sort_array;\n \
    \   assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `ones_in_binary` in this scope\n -->\
    \ /tmp/tmpttlube_2.rs:8:22\n  |\n8 |         let a_ones = ones_in_binary(*a);\n\
    \  |                      ^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `ones_in_binary` in this scope\n --> /tmp/tmpttlube_2.rs:9:22\n\
    \  |\n9 |         let b_ones = ones_in_binary(*b);\n  |                      ^^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0614]: type `std::cmp::Ordering` cannot be\
    \ dereferenced\n  --> /tmp/tmpttlube_2.rs:11:13\n   |\n11 |             *a.cmp(b)\n\
    \   |             ^^^^^^^^^\n\nerror: aborting due to 3 previous errors\n\nSome\
    \ errors have detailed explanations: E0425, E0614.\nFor more information about\
    \ an error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut temp\
    \ = arr.clone();\n    temp.sort_by(|a, b| compare_two_numbers(a, b));\n    temp\n\
    }\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `compare_two_numbers` in this scope\n\
    \ --> /tmp/tmpvipna2mr.rs:7:25\n  |\n7 |     temp.sort_by(|a, b| compare_two_numbers(a,\
    \ b));\n  |                         ^^^^^^^^^^^^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut arr\
    \ = arr;\n    arr.sort_by(|a, b| count_ones(*a).cmp(&count_ones(*b)).then(a.cmp(b)));\n\
    \    arr\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `count_ones` in this scope\n --> /tmp/tmp_09j5w_d.rs:7:24\n\
    \  |\n7 |     arr.sort_by(|a, b| count_ones(*a).cmp(&count_ones(*b)).then(a.cmp(b)));\n\
    \  |                        ^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `count_ones` in this scope\n --> /tmp/tmp_09j5w_d.rs:7:44\n\
    \  |\n7 |     arr.sort_by(|a, b| count_ones(*a).cmp(&count_ones(*b)).then(a.cmp(b)));\n\
    \  |                                            ^^^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822460
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut a: Vec<(usize,\
    \ isize)> = arr.iter().map(|n| (n.count_ones(), *n)).collect();\n    a.sort();\n\
    \    a.iter().map(|&(_, n)| n).collect()\n}\n\nfn main() {\n    let candidate\
    \ = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4,\
    \ 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4, -2, -6,\
    \ -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n\
    \    assert_eq!(candidate(vec![3, 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n\
    \    assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n  \
    \  assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<(usize, isize)>` cannot be built from\
    \ an iterator over elements of type `(u32, isize)`\n --> /tmp/tmpc1b7qvak.rs:6:79\n\
    \  |\n6 |     let mut a: Vec<(usize, isize)> = arr.iter().map(|n| (n.count_ones(),\
    \ *n)).collect();\n  |                                                       \
    \                        ^^^^^^^ value of type `Vec<(usize, isize)>` cannot be\
    \ built from `std::iter::Iterator<Item=(u32, isize)>`\n  |\n  = help: the trait\
    \ `FromIterator<(u32, isize)>` is not implemented for `Vec<(usize, isize)>`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    arr.into_iter()\n\
    \        .map(|x| x.count_ones())\n        .enumerate()\n        .collect::<Vec<_>>()\n\
    \        .sort_by(|a, b| {\n            if a.1 < b.1 {\n                std::cmp::Ordering::Less\n\
    \            } else if a.1 > b.1 {\n                std::cmp::Ordering::Greater\n\
    \            } else {\n                a.0.cmp(&b.0)\n            }\n        })\n\
    \        .into_iter()\n        .map(|(i, _)| arr[i])\n        .collect()\n}\n\n\
    fn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `into_iter` exists for unit type `()`, but its\
    \ trait bounds were not satisfied\n  --> /tmp/tmpm_um2r7b.rs:19:10\n   |\n19 |\
    \         .into_iter()\n   |          ^^^^^^^^^ method cannot be called on `()`\
    \ due to unsatisfied trait bounds\n   |\n   = note: the following trait bounds\
    \ were not satisfied:\n           `(): Iterator`\n           which is required\
    \ by `(): IntoIterator`\n           `&(): Iterator`\n           which is required\
    \ by `&(): IntoIterator`\n           `&mut (): Iterator`\n           which is\
    \ required by `&mut (): IntoIterator`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = arr.clone();\n    result.sort_by(|a, b| {\n        let a_ones = number_of_ones(a);\n\
    \        let b_ones = number_of_ones(b);\n        a_ones.cmp(&b_ones).then(a.cmp(&b))\n\
    \    });\n    result\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `number_of_ones` in this scope\n -->\
    \ /tmp/tmp0lzdnad5.rs:8:22\n  |\n8 |         let a_ones = number_of_ones(a);\n\
    \  |                      ^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `number_of_ones` in this scope\n --> /tmp/tmp0lzdnad5.rs:9:22\n\
    \  |\n9 |         let b_ones = number_of_ones(b);\n  |                      ^^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    // Compute a\
    \ vector of tuples, where each element is\n    // (count_ones(x), x)\n    let\
    \ n = arr.len();\n    let mut data: Vec<(usize, isize)> = Vec::with_capacity(n);\n\
    \    for i in 0..n {\n        data.push((count_ones(arr[i]), arr[i]));\n    }\n\
    \    // Sort the vector data\n    data.sort();\n    // Return the second component\
    \ of each tuple\n    data.iter().map(|x| x.1).collect()\n}\n\nfn main() {\n  \
    \  let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `count_ones` in this scope\n  --> /tmp/tmp2rio780w.rs:11:20\n\
    \   |\n11 |         data.push((count_ones(arr[i]), arr[i]));\n   |           \
    \         ^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut arr:\
    \ Vec<_> = arr.into_iter().map(|n| (n, n.count_ones())).collect();\n    arr.sort_by_key(|&(n,\
    \ c)| (c, n));\n    arr.into_iter().map(|(n, _)| n).collect()\n}\n\nfn main()\
    \ {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3,\
    \ 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]),\
    \ vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0,\
    \ 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpz10l2k9v.rs:14:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut arr\
    \ = arr;\n    arr.sort_by(|a, b| {\n        match (count_ones(*a), count_ones(*b))\
    \ {\n            (a, b) if a == b => a.cmp(b),\n            (a, b) => a.cmp(&b),\n\
    \        }\n    });\n    arr\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `count_ones` in this scope\n --> /tmp/tmphwl67o3z.rs:8:16\n\
    \  |\n8 |         match (count_ones(*a), count_ones(*b)) {\n  |              \
    \  ^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `count_ones`\
    \ in this scope\n --> /tmp/tmphwl67o3z.rs:8:32\n  |\n8 |         match (count_ones(*a),\
    \ count_ones(*b)) {\n  |                                ^^^^^^^^^^ not found in\
    \ this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    arr.into_iter()\n\
    \        .map(|x| {\n            let ones = (0..32).fold(0, |acc, i| if x & (1\
    \ << i) != 0 { acc + 1 } else { acc });\n            (ones, x)\n        })\n \
    \       .sorted_by(|a, b| (a.0, a.1).cmp(&(b.0, b.1)))\n        .map(|(_, x)|\
    \ x)\n        .collect()\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted_by` found for struct `Map` in the\
    \ current scope\n  --> /tmp/tmpx6vwaqaa.rs:11:10\n   |\n11 |         .sorted_by(|a,\
    \ b| (a.0, a.1).cmp(&(b.0, b.1)))\n   |          ^^^^^^^^^ method not found in\
    \ `Map<std::vec::IntoIter<isize>, [closure@/tmp/tmpx6vwaqaa.rs:7:14: 10:10]>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    arr.into_iter()\n\
    \        .map(|x| (x, x.count_ones()))\n        .collect::<Vec<_>>()\n       \
    \ .sort_by(|&(_, x), &(_, y)| x.cmp(&y));\n    arr\n}\n\nfn main() {\n    let\
    \ candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1,\
    \ 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `arr`\n   --> /tmp/tmpkyrggnjn.rs:10:5\n\
    \    |\n5   | fn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    |          \
    \     --- move occurs because `arr` has type `Vec<isize>`, which does not implement\
    \ the `Copy` trait\n6   |     arr.into_iter()\n    |         ----------- `arr`\
    \ moved due to this method call\n...\n10  |     arr\n    |     ^^^ value used\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `arr`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    arr.iter()\n\
    \        .map(|x| (bits_set(*x), *x))\n        .collect::<Vec<(usize, isize)>>()\n\
    \        .sort()\n        .into_iter()\n        .map(|(_, x)| x)\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `bits_set` in this scope\n --> /tmp/tmpx8j4x5jj.rs:7:19\n\
    \  |\n7 |         .map(|x| (bits_set(*x), *x))\n  |                   ^^^^^^^^\
    \ not found in this scope\n\nerror[E0599]: the method `into_iter` exists for unit\
    \ type `()`, but its trait bounds were not satisfied\n  --> /tmp/tmpx8j4x5jj.rs:10:10\n\
    \   |\n10 |         .into_iter()\n   |          ^^^^^^^^^ method cannot be called\
    \ on `()` due to unsatisfied trait bounds\n   |\n   = note: the following trait\
    \ bounds were not satisfied:\n           `(): Iterator`\n           which is required\
    \ by `(): IntoIterator`\n           `&(): Iterator`\n           which is required\
    \ by `&(): IntoIterator`\n           `&mut (): Iterator`\n           which is\
    \ required by `&mut (): IntoIterator`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0425, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut arr\
    \ = arr;\n    arr.sort_by(|a, b| {\n        let a = a.count_ones();\n        let\
    \ b = b.count_ones();\n        if a != b {\n            a.cmp(&b)\n        } else\
    \ {\n            a.cmp(&b)\n        }\n    });\n    arr\n}\n\nfn main() {\n  \
    \  let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 4, 5, 3]`,\n right: `[1, 2, 4, 3, 5]`', /tmp/tmpwpl293d4.rs:21:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut v =\
    \ arr;\n    v.sort_by(|a, b| -> Ordering {\n        let a_ones = a.count_ones();\n\
    \        let b_ones = b.count_ones();\n        if a_ones == b_ones {\n       \
    \     a.cmp(b)\n        } else {\n            a_ones.cmp(&b_ones)\n        }\n\
    \    });\n    v\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `Ordering` in this scope\n --> /tmp/tmpq71hmliq.rs:7:25\n\
    \  |\n7 |     v.sort_by(|a, b| -> Ordering {\n  |                         ^^^^^^^^\
    \ not found in this scope\n  |\nhelp: consider importing one of these items\n\
    \  |\n1 | use std::cmp::Ordering;\n  |\n1 | use std::sync::atomic::Ordering;\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut arr_copy\
    \ = arr.clone();\n    arr_copy.sort_by(|a, b| {\n        let a_ones = count_ones(*a);\n\
    \        let b_ones = count_ones(*b);\n        if a_ones != b_ones {\n       \
    \     a_ones.cmp(&b_ones)\n        } else {\n            a.cmp(b)\n        }\n\
    \    });\n    arr_copy\n}\n\nfn main() {\n    let candidate = sort_array;\n  \
    \  assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `count_ones` in this scope\n --> /tmp/tmpi6hg_di0.rs:8:22\n\
    \  |\n8 |         let a_ones = count_ones(*a);\n  |                      ^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find function `count_ones` in\
    \ this scope\n --> /tmp/tmpi6hg_di0.rs:9:22\n  |\n9 |         let b_ones = count_ones(*b);\n\
    \  |                      ^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    if arr.is_empty()\
    \ {\n        return vec![];\n    }\n    let mut arr_with_ones = arr\n        .iter()\n\
    \        .map(|n| (n, count_ones(*n)))\n        .collect::<Vec<(isize, usize)>>();\n\
    \    arr_with_ones.sort_by(|x, y| x.1.cmp(&y.1).then(x.0.cmp(&y.0)));\n    arr_with_ones.iter().map(|x|\
    \ *x.0).collect()\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `count_ones` in this scope\n  --> /tmp/tmp78861m6c.rs:11:22\n\
    \   |\n11 |         .map(|n| (n, count_ones(*n)))\n   |                      ^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0614]: type `isize` cannot be dereferenced\n\
    \  --> /tmp/tmp78861m6c.rs:14:34\n   |\n14 |     arr_with_ones.iter().map(|x|\
    \ *x.0).collect()\n   |                                  ^^^^\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0614.\n\
    For more information about an error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut t =\
    \ arr.clone();\n    let mut t2 = arr.clone();\n    t.sort_by(|a, b| {\n      \
    \  let ones_a = a.count_ones();\n        let ones_b = b.count_ones();\n      \
    \  if ones_a == ones_b {\n            a.cmp(b)\n        } else {\n           \
    \ ones_a.cmp(&ones_b)\n        }\n    });\n    t2.sort_by(|a, b| {\n        let\
    \ ones_a = a.count_ones();\n        let ones_b = b.count_ones();\n        if ones_a\
    \ == ones_b {\n            a.cmp(b)\n        } else {\n            ones_a.cmp(&ones_b)\n\
    \        }\n    });\n    t\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmp3tvqyf0q.rs:32:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    arr.into_iter()\n\
    \        .map(|n| (n, binary_ones(n)))\n        .collect::<Vec<_>>()\n       \
    \ .sort_by(|&(_, n_ones_a), &(_, n_ones_b)| {\n            n_ones_a.cmp(&n_ones_b).then(n_ones_a.cmp(&n_ones_b))\n\
    \        })\n        .into_iter()\n        .map(|(n, _)| n)\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `binary_ones` in this scope\n --> /tmp/tmp9gzmioz2.rs:7:22\n\
    \  |\n7 |         .map(|n| (n, binary_ones(n)))\n  |                      ^^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0599]: the method `into_iter` exists for unit\
    \ type `()`, but its trait bounds were not satisfied\n  --> /tmp/tmp9gzmioz2.rs:12:10\n\
    \   |\n12 |         .into_iter()\n   |          ^^^^^^^^^ method cannot be called\
    \ on `()` due to unsatisfied trait bounds\n   |\n   = note: the following trait\
    \ bounds were not satisfied:\n           `(): Iterator`\n           which is required\
    \ by `(): IntoIterator`\n           `&(): Iterator`\n           which is required\
    \ by `&(): IntoIterator`\n           `&mut (): Iterator`\n           which is\
    \ required by `&mut (): IntoIterator`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0425, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut ones\
    \ = arr.iter().map(|num| {\n        let mut n = *num;\n        let mut count =\
    \ 0;\n        while n > 0 {\n            if n % 2 == 1 {\n                count\
    \ += 1;\n            }\n            n /= 2;\n        }\n        (count, *num)\n\
    \    }).collect::<Vec<(usize, isize)>>();\n    ones.sort();\n    ones.iter().map(|tuple|\
    \ tuple.1).collect()\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -5, -4, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpjfvs2gtx.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut xs =\
    \ arr.clone();\n    xs.sort_by(|a, b| {\n        let ones_a = a.count_ones();\n\
    \        let ones_b = b.count_ones();\n        ones_a.cmp(&ones_b).then(a.cmp(b))\n\
    \    });\n    xs\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpugh59msx.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut v: Vec<(isize,\
    \ usize)> = arr.iter().map(|x| (*x, x.count_ones())).collect();\n    v.sort_by(|&(_,\
    \ a), &(_, b)| a.cmp(&b));\n    v.into_iter().map(|(val, _)| val).collect()\n\
    }\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<(isize, usize)>` cannot be built from\
    \ an iterator over elements of type `(isize, u32)`\n --> /tmp/tmpt0wgjbvm.rs:6:79\n\
    \  |\n6 |     let mut v: Vec<(isize, usize)> = arr.iter().map(|x| (*x, x.count_ones())).collect();\n\
    \  |                                                                         \
    \      ^^^^^^^ value of type `Vec<(isize, usize)>` cannot be built from `std::iter::Iterator<Item=(isize,\
    \ u32)>`\n  |\n  = help: the trait `FromIterator<(isize, u32)>` is not implemented\
    \ for `Vec<(isize, usize)>`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut ones\
    \ = arr.iter().map(|x| x.count_ones()).collect::<Vec<_>>();\n    let mut zipped\
    \ = arr.iter().zip(ones.iter()).collect::<Vec<_>>();\n    zipped.sort_by(|a, b|\
    \ a.1.cmp(b.1).then(a.0.cmp(b.0)));\n    zipped.iter().map(|&x| *x).collect()\n\
    }\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `(&isize, &u32)` cannot be dereferenced\n --> /tmp/tmpz1lyigvd.rs:9:28\n\
    \  |\n9 |     zipped.iter().map(|&x| *x).collect()\n  |                      \
    \      ^^\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0614`.\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let ones = arr.iter().map(|x|\
    \ format!(\"{:b}\", x).chars().filter(|c| *c == '1').count()).collect::<Vec<usize>>();\n\
    \    let mut numbers: Vec<(usize, isize)> = ones.iter().zip(arr.iter()).collect();\n\
    \    numbers.sort_by(|(ones1, num1), (ones2, num2)| {\n        if ones1 == ones2\
    \ {\n            num1.cmp(num2)\n        } else {\n            ones1.cmp(ones2)\n\
    \        }\n    });\n    numbers.iter().map(|(_, num)| *num).collect()\n}\n\n\
    fn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<(usize, isize)>` cannot be built from\
    \ an iterator over elements of type `(&usize, &isize)`\n --> /tmp/tmp28g8d_b3.rs:7:72\n\
    \  |\n7 |     let mut numbers: Vec<(usize, isize)> = ones.iter().zip(arr.iter()).collect();\n\
    \  |                                                                        ^^^^^^^\
    \ value of type `Vec<(usize, isize)>` cannot be built from `std::iter::Iterator<Item=(&usize,\
    \ &isize)>`\n  |\n  = help: the trait `FromIterator<(&usize, &isize)>` is not\
    \ implemented for `Vec<(usize, isize)>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut arr\
    \ = arr;\n    arr.sort_by(|a, b| {\n        let num_ones_a = a.count_ones();\n\
    \        let num_ones_b = b.count_ones();\n        num_ones_a.cmp(&num_ones_b).then(a.cmp(b))\n\
    \    });\n    arr\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmp44xpxpzr.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut sorted\
    \ = arr.clone();\n    sorted.sort_by(|a, b| {\n        let bin_a = format!(\"\
    {:b}\", a);\n        let bin_b = format!(\"{:b}\", b);\n        if bin_a.matches('1').count()\
    \ < bin_b.matches('1').count() {\n            Ordering::Less\n        } else if\
    \ bin_a.matches('1').count() > bin_b.matches('1').count() {\n            Ordering::Greater\n\
    \        } else {\n            a.cmp(b)\n        }\n    });\n    sorted\n}\n\n\
    fn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Ordering`\n  -->\
    \ /tmp/tmplk48sqcr.rs:11:13\n   |\n11 |             Ordering::Less\n   |     \
    \        ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0433]: failed to\
    \ resolve: use of undeclared type `Ordering`\n  --> /tmp/tmplk48sqcr.rs:13:13\n\
    \   |\n13 |             Ordering::Greater\n   |             ^^^^^^^^ use of undeclared\
    \ type `Ordering`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    arr.iter()\n\
    \        .map(|&n| (n, n.count_ones()))\n        .sorted_by(|a, b| (a.1, a.0).cmp(&(b.1,\
    \ b.0)))\n        .map(|(n, _)| n)\n        .collect()\n}\n\nfn main() {\n   \
    \ let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted_by` found for struct `Map` in the\
    \ current scope\n --> /tmp/tmpi7t9eu8b.rs:8:10\n  |\n8 |         .sorted_by(|a,\
    \ b| (a.1, a.0).cmp(&(b.1, b.0)))\n  |          ^^^^^^^^^ method not found in\
    \ `Map<std::slice::Iter<'_, isize>, [closure@/tmp/tmpi7t9eu8b.rs:7:14: 7:38]>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut v =\
    \ arr.clone();\n    v.sort_by(|a, b| count_ones(a)\n        .cmp(&count_ones(b))\n\
    \        .then(a.cmp(b)));\n    v\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `count_ones` in this scope\n --> /tmp/tmp0ovs3ejs.rs:7:22\n\
    \  |\n7 |     v.sort_by(|a, b| count_ones(a)\n  |                      ^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find function `count_ones` in\
    \ this scope\n --> /tmp/tmp0ovs3ejs.rs:8:15\n  |\n8 |         .cmp(&count_ones(b))\n\
    \  |               ^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut arr\
    \ = arr;\n    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n   \
    \     let b_ones = b.count_ones();\n        match a_ones.cmp(&b_ones) {\n    \
    \        Ordering::Equal => a.cmp(b),\n            Ordering::Less => Ordering::Less,\n\
    \            Ordering::Greater => Ordering::Greater,\n        }\n    });\n   \
    \ arr\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Ordering`\n  -->\
    \ /tmp/tmp5cb51lhh.rs:11:13\n   |\n11 |             Ordering::Equal => a.cmp(b),\n\
    \   |             ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `Ordering`\n  --> /tmp/tmp5cb51lhh.rs:12:13\n\
    \   |\n12 |             Ordering::Less => Ordering::Less,\n   |             ^^^^^^^^\
    \ use of undeclared type `Ordering`\n\nerror[E0433]: failed to resolve: use of\
    \ undeclared type `Ordering`\n  --> /tmp/tmp5cb51lhh.rs:12:31\n   |\n12 |    \
    \         Ordering::Less => Ordering::Less,\n   |                            \
    \   ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `Ordering`\n  --> /tmp/tmp5cb51lhh.rs:13:13\n   |\n13\
    \ |             Ordering::Greater => Ordering::Greater,\n   |             ^^^^^^^^\
    \ use of undeclared type `Ordering`\n\nerror[E0433]: failed to resolve: use of\
    \ undeclared type `Ordering`\n  --> /tmp/tmp5cb51lhh.rs:13:34\n   |\n13 |    \
    \         Ordering::Greater => Ordering::Greater,\n   |                      \
    \            ^^^^^^^^ use of undeclared type `Ordering`\n\nerror: aborting due\
    \ to 5 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    arr.iter()\n\
    \        .map(|x| {\n            let mut n = x;\n            let mut c = 0;\n\
    \            while n > 0 {\n                c += n % 2;\n                n /=\
    \ 2;\n            }\n            (*x, c)\n        })\n        .sorted_by(|a, b|\
    \ {\n            if a.1 == b.1 {\n                a.0.cmp(&b.0)\n            }\
    \ else {\n                a.1.cmp(&b.1)\n            }\n        })\n        .map(|x|\
    \ x.0)\n        .collect()\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5d1we2ne.rs:10:23\n   |\n\
    10 |             while n > 0 {\n   |                       ^\n   |           \
    \            |\n   |                       expected `&isize`, found integer\n\
    \   |                       help: consider borrowing here: `&0`\n\nerror[E0368]:\
    \ binary assignment operation `/=` cannot be applied to type `&isize`\n  --> /tmp/tmp5d1we2ne.rs:12:17\n\
    \   |\n12 |                 n /= 2;\n   |                 -^^^^^\n   |       \
    \          |\n   |                 cannot use `/=` on type `&isize`\n   |\nhelp:\
    \ `/=` can be used on `isize`, you can dereference `n`\n   |\n12 |           \
    \      *n /= 2;\n   |                 +\n\nerror[E0599]: no method named `sorted_by`\
    \ found for struct `Map` in the current scope\n  --> /tmp/tmp5d1we2ne.rs:16:10\n\
    \   |\n16 |         .sorted_by(|a, b| {\n   |          ^^^^^^^^^ method not found\
    \ in `Map<std::slice::Iter<'_, isize>, [closure@/tmp/tmp5d1we2ne.rs:7:14: 15:10]>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0368, E0599.\nFor more information about an error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut sorted:\
    \ Vec<isize> = arr.clone();\n    sorted.sort_by(|a, b| {\n        let a_str =\
    \ format!(\"{:b}\", a);\n        let b_str = format!(\"{:b}\", b);\n        if\
    \ a_str.matches('1').count() == b_str.matches('1').count() {\n            a.cmp(b)\n\
    \        } else {\n            a_str.matches('1').count().cmp(&b_str.matches('1').count())\n\
    \        }\n    });\n    sorted\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmptqx1su5h.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    arr.into_iter()\n\
    \        .map(|x| (x, x.count_ones()))\n        .collect::<Vec<_>>()\n       \
    \ .sort_by(|a, b| {\n            a.1.cmp(&b.1).then(a.0.cmp(&b.0))\n        })\n\
    \        .into_iter()\n        .map(|x| x.0)\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3,\
    \ 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]),\
    \ vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0,\
    \ 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `into_iter` exists for unit type `()`, but its\
    \ trait bounds were not satisfied\n  --> /tmp/tmpjyil660n.rs:12:10\n   |\n12 |\
    \         .into_iter()\n   |          ^^^^^^^^^ method cannot be called on `()`\
    \ due to unsatisfied trait bounds\n   |\n   = note: the following trait bounds\
    \ were not satisfied:\n           `(): Iterator`\n           which is required\
    \ by `(): IntoIterator`\n           `&(): Iterator`\n           which is required\
    \ by `&(): IntoIterator`\n           `&mut (): Iterator`\n           which is\
    \ required by `&mut (): IntoIterator`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    arr.iter()\n\
    \        .cloned()\n        .map(|x| (x, ones_in_binary(x)))\n        .sorted_by(|&(x,\
    \ _), &(y, _)| {\n            if x == y {\n                Ord::cmp(&x, &y)\n\
    \            } else {\n                Ord::cmp(&x, &y)\n            }\n     \
    \   })\n        .map(|(x, _)| x)\n        .collect()\n}\n\nfn main() {\n    let\
    \ candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1,\
    \ 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `ones_in_binary` in this scope\n -->\
    \ /tmp/tmpku6que4i.rs:8:22\n  |\n8 |         .map(|x| (x, ones_in_binary(x)))\n\
    \  |                      ^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0599]:\
    \ no method named `sorted_by` found for struct `Map` in the current scope\n -->\
    \ /tmp/tmpku6que4i.rs:9:10\n  |\n9 |         .sorted_by(|&(x, _), &(y, _)| {\n\
    \  |          ^^^^^^^^^ method not found in `Map<Cloned<std::slice::Iter<'_, isize>>,\
    \ _>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0425, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut arr_cloned\
    \ = arr.clone();\n    arr_cloned.sort_by(|x, y| {\n        let x_str = format!(\"\
    {:b}\", x);\n        let y_str = format!(\"{:b}\", y);\n        let x_ones = x_str.matches('1').count();\n\
    \        let y_ones = y_str.matches('1').count();\n        if x_ones != y_ones\
    \ {\n            x_ones.cmp(&y_ones)\n        } else {\n            x.cmp(&y)\n\
    \        }\n    });\n    arr_cloned\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmphzqimwxy.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut v =\
    \ arr.iter().map(|&x| (x, bits(x))).collect::<Vec<_>>();\n    v.sort_by(|&(x,\
    \ a), &(y, b)| match a.cmp(&b) {\n        std::cmp::Ordering::Equal => x.cmp(&y),\n\
    \        x => x,\n    });\n    v.iter().map(|&(x, _)| x).collect()\n}\n\nfn main()\
    \ {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3,\
    \ 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]),\
    \ vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0,\
    \ 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `bits` in this scope\n --> /tmp/tmp0cag_j17.rs:6:41\n\
    \  |\n6 |     let mut v = arr.iter().map(|&x| (x, bits(x))).collect::<Vec<_>>();\n\
    \  |                                         ^^^^ not found in this scope\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = arr.clone();\n    result.sort_by(|a, b| {\n        let on_a = a.count_ones();\n\
    \        let on_b = b.count_ones();\n        match on_a.cmp(&on_b) {\n       \
    \     Ordering::Equal => a.cmp(b),\n            ordering => ordering,\n      \
    \  }\n    });\n    result\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Ordering`\n  -->\
    \ /tmp/tmp7f9v7ulk.rs:11:13\n   |\n11 |             Ordering::Equal => a.cmp(b),\n\
    \   |             ^^^^^^^^ use of undeclared type `Ordering`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    // your code\
    \ here\n    arr.into_iter().map(|i| (i.count_ones(), i)).sorted().into_iter().map(|(a,\
    \ b)| b).collect()\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted` found for struct `Map` in the current\
    \ scope\n --> /tmp/tmpfsa8fzui.rs:7:50\n  |\n7 |     arr.into_iter().map(|i| (i.count_ones(),\
    \ i)).sorted().into_iter().map(|(a, b)| b).collect()\n  |                    \
    \                              ^^^^^^ method not found in `Map<std::vec::IntoIter<isize>,\
    \ [closure@/tmp/tmpfsa8fzui.rs:7:25: 7:48]>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    arr.into_iter()\n\
    \        .map(|x| (x, x.count_ones()))\n        .collect::<Vec<_>>()\n       \
    \ .sort_by(|a, b| {\n            a.1.cmp(&b.1).then(a.0.cmp(&b.0))\n        })\n\
    \        .into_iter()\n        .map(|x| x.0)\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3,\
    \ 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]),\
    \ vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0,\
    \ 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `into_iter` exists for unit type `()`, but its\
    \ trait bounds were not satisfied\n  --> /tmp/tmpjyil660n.rs:12:10\n   |\n12 |\
    \         .into_iter()\n   |          ^^^^^^^^^ method cannot be called on `()`\
    \ due to unsatisfied trait bounds\n   |\n   = note: the following trait bounds\
    \ were not satisfied:\n           `(): Iterator`\n           which is required\
    \ by `(): IntoIterator`\n           `&(): Iterator`\n           which is required\
    \ by `&(): IntoIterator`\n           `&mut (): Iterator`\n           which is\
    \ required by `&mut (): IntoIterator`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut v: Vec<_>\
    \ = arr.into_iter().enumerate().collect();\n    v.sort_by(|a, b| {\n        if\
    \ count_ones(a.1) == count_ones(b.1) {\n            a.1.cmp(&b.1)\n        } else\
    \ {\n            count_ones(a.1).cmp(&count_ones(b.1))\n        }\n    });\n \
    \   v.into_iter().map(|(_, x)| x).collect()\n}\n\nfn main() {\n    let candidate\
    \ = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4,\
    \ 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4, -2, -6,\
    \ -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n\
    \    assert_eq!(candidate(vec![3, 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n\
    \    assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n  \
    \  assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `count_ones` in this scope\n --> /tmp/tmp3tq6p64k.rs:8:12\n\
    \  |\n8 |         if count_ones(a.1) == count_ones(b.1) {\n  |            ^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find function `count_ones` in\
    \ this scope\n --> /tmp/tmp3tq6p64k.rs:8:31\n  |\n8 |         if count_ones(a.1)\
    \ == count_ones(b.1) {\n  |                               ^^^^^^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find function `count_ones` in this scope\n\
    \  --> /tmp/tmp3tq6p64k.rs:11:13\n   |\n11 |             count_ones(a.1).cmp(&count_ones(b.1))\n\
    \   |             ^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ function `count_ones` in this scope\n  --> /tmp/tmp3tq6p64k.rs:11:34\n   |\n\
    11 |             count_ones(a.1).cmp(&count_ones(b.1))\n   |                 \
    \                 ^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ 4 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut v =\
    \ arr;\n    v.sort_by(|a, b| {\n        if a.count_ones() == b.count_ones() {\n\
    \            a.cmp(b)\n        } else {\n            a.count_ones().cmp(&b.count_ones())\n\
    \        }\n    });\n    v\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpwt7mndok.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = arr.clone();\n    let num_ones = |n: isize| n.count_ones();\n    result.sort_by(|x,\
    \ y| {\n        let ones_x = num_ones(*x);\n        let ones_y = num_ones(*y);\n\
    \        match ones_x.cmp(&ones_y) {\n            Ordering::Equal => x.cmp(&y),\n\
    \            Ordering::Less => Ordering::Less,\n            Ordering::Greater\
    \ => Ordering::Greater,\n        }\n    });\n    result\n}\n\nfn main() {\n  \
    \  let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Ordering`\n  -->\
    \ /tmp/tmp2albkjlq.rs:12:13\n   |\n12 |             Ordering::Equal => x.cmp(&y),\n\
    \   |             ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `Ordering`\n  --> /tmp/tmp2albkjlq.rs:13:13\n\
    \   |\n13 |             Ordering::Less => Ordering::Less,\n   |             ^^^^^^^^\
    \ use of undeclared type `Ordering`\n\nerror[E0433]: failed to resolve: use of\
    \ undeclared type `Ordering`\n  --> /tmp/tmp2albkjlq.rs:13:31\n   |\n13 |    \
    \         Ordering::Less => Ordering::Less,\n   |                            \
    \   ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `Ordering`\n  --> /tmp/tmp2albkjlq.rs:14:13\n   |\n14\
    \ |             Ordering::Greater => Ordering::Greater,\n   |             ^^^^^^^^\
    \ use of undeclared type `Ordering`\n\nerror[E0433]: failed to resolve: use of\
    \ undeclared type `Ordering`\n  --> /tmp/tmp2albkjlq.rs:14:34\n   |\n14 |    \
    \         Ordering::Greater => Ordering::Greater,\n   |                      \
    \            ^^^^^^^^ use of undeclared type `Ordering`\n\nerror: aborting due\
    \ to 5 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    if arr.is_empty()\
    \ {\n        return arr;\n    }\n    let mut vec = vec![vec![]; 33];\n    for\
    \ i in arr {\n        let ones = binary_ones(i);\n        vec[ones as usize].push(i);\n\
    \    }\n    vec.iter()\n        .flat_map(|x| x.iter())\n        .cloned()\n \
    \       .collect()\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `binary_ones` in this scope\n  --> /tmp/tmpr6vzt85z.rs:11:20\n\
    \   |\n11 |         let ones = binary_ones(i);\n   |                    ^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    use std::cmp::Ordering;\n\
    \    let mut result = arr.clone();\n    result.sort_by(|a, b| {\n        match\
    \ bit_count(*a).cmp(&bit_count(*b)) {\n            Ordering::Equal => a.cmp(b),\n\
    \            other => other,\n        }\n    });\n    result\n}\n\nfn main() {\n\
    \    let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `bit_count` in this scope\n --> /tmp/tmpr9wrvjtz.rs:9:15\n\
    \  |\n9 |         match bit_count(*a).cmp(&bit_count(*b)) {\n  |             \
    \  ^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `bit_count`\
    \ in this scope\n --> /tmp/tmpr9wrvjtz.rs:9:34\n  |\n9 |         match bit_count(*a).cmp(&bit_count(*b))\
    \ {\n  |                                  ^^^^^^^^^ not found in this scope\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    // your code\
    \ here!\n    let mut arr = arr;\n    let mut tmp = vec![];\n    for i in 0..arr.len()\
    \ {\n        let mut s = format!(\"{:b}\", arr[i]);\n        let count = s.matches(\"\
    1\").count();\n        tmp.push((count, arr[i]));\n    }\n    tmp.sort();\n  \
    \  tmp.iter().map(|i| i.1).collect()\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmp1b122evg.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut vec\
    \ = arr.clone();\n    vec.sort_by(|a, b| {\n        let a = a.count_ones();\n\
    \        let b = b.count_ones();\n        a.cmp(&b).then(a.cmp(&b))\n    });\n\
    \    vec\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 4, 5, 3]`,\n right: `[1, 2, 4, 3, 5]`', /tmp/tmp6s10e10k.rs:17:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    arr.into_iter()\n\
    \        .map(|num| (num, num.count_ones()))\n        .collect::<Vec<_>>()\n \
    \       .sort_by(|a, b| match a.1.cmp(&b.1) {\n            std::cmp::Ordering::Equal\
    \ => a.0.cmp(&b.0),\n            x => x,\n        })\n        .into_iter()\n \
    \       .map(|t| t.0)\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4,\
    \ 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4, -2, -6,\
    \ -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n\
    \    assert_eq!(candidate(vec![3, 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n\
    \    assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n  \
    \  assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `into_iter` exists for unit type `()`, but its\
    \ trait bounds were not satisfied\n  --> /tmp/tmprkhahb9i.rs:13:10\n   |\n13 |\
    \         .into_iter()\n   |          ^^^^^^^^^ method cannot be called on `()`\
    \ due to unsatisfied trait bounds\n   |\n   = note: the following trait bounds\
    \ were not satisfied:\n           `(): Iterator`\n           which is required\
    \ by `(): IntoIterator`\n           `&(): Iterator`\n           which is required\
    \ by `&(): IntoIterator`\n           `&mut (): Iterator`\n           which is\
    \ required by `&mut (): IntoIterator`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut data\
    \ = arr.clone();\n    data.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n\
    \        let b_ones = b.count_ones();\n        match a_ones.cmp(&b_ones) {\n \
    \           Ordering::Equal => b.cmp(a),\n            c => c,\n        }\n   \
    \ });\n    data\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Ordering`\n  -->\
    \ /tmp/tmpf4b9tj_u.rs:11:13\n   |\n11 |             Ordering::Equal => b.cmp(a),\n\
    \   |             ^^^^^^^^ use of undeclared type `Ordering`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut arr:\
    \ Vec<_> = arr.into_iter().map(|x| (x, Integer::from(x).count_ones() as isize)).collect();\n\
    \    arr.sort_by(|x, y| if x.1 == y.1 { x.0.cmp(&y.0) } else { x.1.cmp(&y.1) });\n\
    \    arr.into_iter().map(|x| x.0).collect()\n}\n\nfn main() {\n    let candidate\
    \ = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4,\
    \ 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4, -2, -6,\
    \ -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n\
    \    assert_eq!(candidate(vec![3, 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n\
    \    assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n  \
    \  assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Integer`\n -->\
    \ /tmp/tmpz05cc4cq.rs:6:55\n  |\n6 |     let mut arr: Vec<_> = arr.into_iter().map(|x|\
    \ (x, Integer::from(x).count_ones() as isize)).collect();\n  |               \
    \                                        ^^^^^^^ use of undeclared type `Integer`\n\
    \nerror[E0609]: no field `1` on type `&_`\n --> /tmp/tmpz05cc4cq.rs:7:29\n  |\n\
    7 |     arr.sort_by(|x, y| if x.1 == y.1 { x.0.cmp(&y.0) } else { x.1.cmp(&y.1)\
    \ });\n  |                             ^\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0433, E0609.\nFor more information\
    \ about an error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut v: Vec<(usize,\
    \ isize)> = arr.iter().map(|&n| (count_ones(n), n)).collect();\n    v.sort();\n\
    \    v.iter().map(|&(_, n)| n).collect()\n}\n\nfn main() {\n    let candidate\
    \ = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4,\
    \ 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4, -2, -6,\
    \ -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n\
    \    assert_eq!(candidate(vec![3, 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n\
    \    assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n  \
    \  assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `count_ones` in this scope\n --> /tmp/tmpail2zdnw.rs:6:59\n\
    \  |\n6 |     let mut v: Vec<(usize, isize)> = arr.iter().map(|&n| (count_ones(n),\
    \ n)).collect();\n  |                                                        \
    \   ^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut v =\
    \ arr.clone();\n    v.sort_by(|a, b| {\n        println!(\"{:b} {:b}\", a, b);\n\
    \        match a.count_ones().cmp(&b.count_ones()) {\n            Ordering::Equal\
    \ => a.cmp(b),\n            o => o,\n        }\n    });\n    v\n}\n\nfn main()\
    \ {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3,\
    \ 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]),\
    \ vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0,\
    \ 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Ordering`\n  -->\
    \ /tmp/tmpb09o7gc4.rs:10:13\n   |\n10 |             Ordering::Equal => a.cmp(b),\n\
    \   |             ^^^^^^^^ use of undeclared type `Ordering`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut ones\
    \ = vec![];\n    let mut multiples = vec![];\n    let mut sorted = arr.to_vec();\n\
    \    sorted.sort();\n    let mut non_sorted = vec![];\n    for i in &sorted {\n\
    \        let mut i = *i;\n        let mut one_count = 0;\n        while i > 0\
    \ {\n            if i % 2 == 1 {\n                one_count += 1;\n          \
    \  }\n            i /= 2;\n        }\n        let tup = (one_count, *i);\n   \
    \     if ones.contains(&tup) {\n            multiples.push(tup);\n        } else\
    \ {\n            ones.push(tup);\n        }\n    }\n    for i in sorted {\n  \
    \      if multiples.contains(&(1, i)) {\n            non_sorted.push(i);\n   \
    \     }\n    }\n    for i in sorted {\n        if multiples.contains(&(2, i))\
    \ {\n            non_sorted.push(i);\n        }\n    }\n    for i in sorted {\n\
    \        if multiples.contains(&(3, i)) {\n            non_sorted.push(i);\n \
    \       }\n    }\n    non_sorted\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmp0ip02ajw.rs:20:31\n\
    \   |\n20 |         let tup = (one_count, *i);\n   |                         \
    \      ^^\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0614`.\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut arr:\
    \ Vec<isize> = arr.into_iter().filter(|&x| x > 0).collect();\n    arr.sort_by(|a,\
    \ b| format!(\"{:08b}\", a).replace(\"0\", \"\").len().cmp(&format!(\"{:08b}\"\
    , b).replace(\"0\", \"\").len()).then(a.cmp(b)));\n    arr\n}\n\nfn main() {\n\
    \    let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpt4d3luuj.rs:14:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822462
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut arr\
    \ = arr;\n    arr.sort_by(|a, b| {\n        let a = format!(\"{:b}\", a);\n  \
    \      let b = format!(\"{:b}\", b);\n        let a = a.chars().filter(|&c| c\
    \ == '1').count();\n        let b = b.chars().filter(|&c| c == '1').count();\n\
    \        if a != b {\n            a.cmp(&b)\n        } else {\n            a.cmp(&b)\n\
    \        }\n    });\n    arr\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 4, 5, 3]`,\n right: `[1, 2, 4, 3, 5]`', /tmp/tmpjn2yvq2o.rs:23:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut numbers:\
    \ Vec<(isize, usize)> = arr.iter().map(|x| (x.clone(), x.count_ones())).collect();\n\
    \    numbers.sort_by(|a, b| {\n        if a.1 == b.1 {\n            a.0.cmp(&b.0)\n\
    \        } else {\n            a.1.cmp(&b.1)\n        }\n    });\n    numbers.iter().map(|x|\
    \ x.0).collect()\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<(isize, usize)>` cannot be built from\
    \ an iterator over elements of type `(isize, u32)`\n --> /tmp/tmpeizfmqjk.rs:6:92\n\
    \  |\n6 |     let mut numbers: Vec<(isize, usize)> = arr.iter().map(|x| (x.clone(),\
    \ x.count_ones())).collect();\n  |                                           \
    \                                                 ^^^^^^^ value of type `Vec<(isize,\
    \ usize)>` cannot be built from `std::iter::Iterator<Item=(isize, u32)>`\n  |\n\
    \  = help: the trait `FromIterator<(isize, u32)>` is not implemented for `Vec<(isize,\
    \ usize)>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut sorted:\
    \ Vec<isize> = vec![];\n    for i in arr {\n        if sorted.len() == 0 {\n \
    \           sorted.push(i);\n        } else {\n            let mut tmp: Vec<isize>\
    \ = vec![];\n            let mut found = false;\n            for y in &sorted\
    \ {\n                if y.clone() < i {\n                    tmp.push(y.clone());\n\
    \                } else {\n                    tmp.push(i);\n                \
    \    tmp.extend(sorted.clone());\n                    found = true;\n        \
    \            break;\n                }\n            }\n            if !found {\n\
    \                tmp.push(i);\n            }\n            sorted = tmp;\n    \
    \    }\n    }\n    sorted\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 1, 3, 1, 2, 1, 4, 1, 2, 1, 3, 1, 2, 1, 5]`,\n right: `[1, 2, 4, 3, 5]`',\
    \ /tmp/tmpa2phap92.rs:34:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut sorted\
    \ = arr.clone();\n    sorted.sort_by(|a, b| {\n        let a_ones = count_ones(*a);\n\
    \        let b_ones = count_ones(*b);\n        let order = a_ones.cmp(&b_ones);\n\
    \        if order == Ordering::Equal {\n            a.cmp(b)\n        } else {\n\
    \            order\n        }\n    });\n    sorted\n}\n\nfn main() {\n    let\
    \ candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1,\
    \ 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Ordering`\n  -->\
    \ /tmp/tmppiynhdn6.rs:11:21\n   |\n11 |         if order == Ordering::Equal {\n\
    \   |                     ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0425]:\
    \ cannot find function `count_ones` in this scope\n --> /tmp/tmppiynhdn6.rs:8:22\n\
    \  |\n8 |         let a_ones = count_ones(*a);\n  |                      ^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find function `count_ones` in\
    \ this scope\n --> /tmp/tmppiynhdn6.rs:9:22\n  |\n9 |         let b_ones = count_ones(*b);\n\
    \  |                      ^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\n\
    For more information about an error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    arr.iter()\n\
    \        .sorted_by(|x, y| format!(\"{:b}\", x).len().cmp(&format!(\"{:b}\", y).len()))\n\
    \        .cloned()\n        .collect()\n}\n\nfn main() {\n    let candidate =\
    \ sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3,\
    \ 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4, -2, -6, -5,\
    \ -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n\
    \    assert_eq!(candidate(vec![3, 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n\
    \    assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n  \
    \  assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted_by` found for struct `std::slice::Iter`\
    \ in the current scope\n --> /tmp/tmpc6zg5ptc.rs:7:10\n  |\n7 |         .sorted_by(|x,\
    \ y| format!(\"{:b}\", x).len().cmp(&format!(\"{:b}\", y).len()))\n  |       \
    \   ^^^^^^^^^ method not found in `std::slice::Iter<'_, isize>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let max_size\
    \ = *arr.iter().max().unwrap();\n    let max_size_bit = max_size.count_ones();\n\
    \    let mut ans = vec![0; arr.len()];\n    let mut current_bit = 0;\n    while\
    \ current_bit <= max_size_bit {\n        for a in arr.iter() {\n            if\
    \ a.count_ones() == current_bit {\n                ans[a as usize] = *a;\n   \
    \         }\n        }\n        current_bit += 1;\n    }\n    ans\n}\n\nfn main()\
    \ {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3,\
    \ 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]),\
    \ vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0,\
    \ 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0606]: casting `&isize` as `usize` is invalid\n  --> /tmp/tmpinlo5yn7.rs:13:21\n\
    \   |\n13 |                 ans[a as usize] = *a;\n   |                     -^^^^^^^^^\n\
    \   |                     |\n   |                     cannot cast `&isize` as\
    \ `usize`\n   |                     help: dereference the expression: `*a`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0606`.\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    arr.into_iter()\n\
    \        .map(|x| (x, x.count_ones()))\n        .collect::<Vec<_>>()\n       \
    \ .sort_by(|a, b| {\n            if a.1 < b.1 {\n                Ordering::Less\n\
    \            } else if a.1 > b.1 {\n                Ordering::Greater\n      \
    \      } else {\n                a.0.cmp(&b.0)\n            }\n        })\n  \
    \      .into_iter()\n        .map(|x| x.0)\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3,\
    \ 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]),\
    \ vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0,\
    \ 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Ordering`\n  -->\
    \ /tmp/tmpqtf4mm9m.rs:11:17\n   |\n11 |                 Ordering::Less\n   | \
    \                ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `Ordering`\n  --> /tmp/tmpqtf4mm9m.rs:13:17\n\
    \   |\n13 |                 Ordering::Greater\n   |                 ^^^^^^^^ use\
    \ of undeclared type `Ordering`\n\nerror[E0599]: the method `into_iter` exists\
    \ for unit type `()`, but its trait bounds were not satisfied\n  --> /tmp/tmpqtf4mm9m.rs:18:10\n\
    \   |\n18 |         .into_iter()\n   |          ^^^^^^^^^ method cannot be called\
    \ on `()` due to unsatisfied trait bounds\n   |\n   = note: the following trait\
    \ bounds were not satisfied:\n           `(): Iterator`\n           which is required\
    \ by `(): IntoIterator`\n           `&(): Iterator`\n           which is required\
    \ by `&(): IntoIterator`\n           `&mut (): Iterator`\n           which is\
    \ required by `&mut (): IntoIterator`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0433, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut sorted\
    \ = arr.clone();\n    sorted.sort_by(|a, b| {\n        let ones_a = a.count_ones();\n\
    \        let ones_b = b.count_ones();\n        ones_a.cmp(&ones_b).then(a.cmp(b))\n\
    \    });\n    sorted\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmppejytjbv.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822462
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut sorted:\
    \ Vec<isize> = arr.clone();\n    sorted.sort_by(|a, b| count_ones(*a).cmp(&count_ones(*b)));\n\
    \    sorted\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `count_ones` in this scope\n --> /tmp/tmp8ap626jh.rs:7:27\n\
    \  |\n7 |     sorted.sort_by(|a, b| count_ones(*a).cmp(&count_ones(*b)));\n  |\
    \                           ^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `count_ones` in this scope\n --> /tmp/tmp8ap626jh.rs:7:47\n\
    \  |\n7 |     sorted.sort_by(|a, b| count_ones(*a).cmp(&count_ones(*b)));\n  |\
    \                                               ^^^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut arr_clone\
    \ = arr.clone();\n    arr_clone.sort_by(|a, b| {\n        let a = a.count_ones();\n\
    \        let b = b.count_ones();\n        if a == b {\n            a.cmp(b)\n\
    \        } else {\n            a.cmp(&b)\n        }\n    });\n    arr_clone\n\
    }\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpl_inox2r.rs:11:19\n   |\n\
    11 |             a.cmp(b)\n   |                   ^\n   |                   |\n\
    \   |                   expected `&u32`, found `u32`\n   |                   help:\
    \ consider borrowing here: `&b`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut output\
    \ = arr.clone();\n    output.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n\
    \        let b_ones = b.count_ones();\n        match a_ones.cmp(&b_ones) {\n \
    \           Ordering::Equal => a.cmp(b),\n            Ordering::Less => Ordering::Less,\n\
    \            Ordering::Greater => Ordering::Greater,\n        }\n    });\n   \
    \ output\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Ordering`\n  -->\
    \ /tmp/tmpp1f4isxd.rs:11:13\n   |\n11 |             Ordering::Equal => a.cmp(b),\n\
    \   |             ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `Ordering`\n  --> /tmp/tmpp1f4isxd.rs:12:13\n\
    \   |\n12 |             Ordering::Less => Ordering::Less,\n   |             ^^^^^^^^\
    \ use of undeclared type `Ordering`\n\nerror[E0433]: failed to resolve: use of\
    \ undeclared type `Ordering`\n  --> /tmp/tmpp1f4isxd.rs:12:31\n   |\n12 |    \
    \         Ordering::Less => Ordering::Less,\n   |                            \
    \   ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `Ordering`\n  --> /tmp/tmpp1f4isxd.rs:13:13\n   |\n13\
    \ |             Ordering::Greater => Ordering::Greater,\n   |             ^^^^^^^^\
    \ use of undeclared type `Ordering`\n\nerror[E0433]: failed to resolve: use of\
    \ undeclared type `Ordering`\n  --> /tmp/tmpp1f4isxd.rs:13:34\n   |\n13 |    \
    \         Ordering::Greater => Ordering::Greater,\n   |                      \
    \            ^^^^^^^^ use of undeclared type `Ordering`\n\nerror: aborting due\
    \ to 5 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = arr.clone();\n    result.sort_by(|a, b| {\n        let bin_a = format!(\"\
    {:b}\", a);\n        let bin_b = format!(\"{:b}\", b);\n        let ones_a = bin_a.chars().filter(|&c|\
    \ c == '1').count();\n        let ones_b = bin_b.chars().filter(|&c| c == '1').count();\n\
    \        ones_a.cmp(&ones_b).then(a.cmp(&b))\n    });\n    result\n}\n\nfn main()\
    \ {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3,\
    \ 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]),\
    \ vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0,\
    \ 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpjwns_k2m.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822462
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut arr\
    \ = arr;\n    arr.sort_by(|a, b| a.count_ones().cmp(&b.count_ones()).then(a.cmp(b)));\n\
    \    arr\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpqtx7kx0n.rs:14:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822460
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut arr:\
    \ Vec<(usize, isize)> = arr.into_iter().map(|v| (v.count_ones(), v)).collect();\n\
    \    arr.sort_by(|a, b| {\n        if a.0 == b.0 {\n            a.1.cmp(&b.1)\n\
    \        } else {\n            a.0.cmp(&b.0)\n        }\n    });\n    arr.into_iter().map(|(k,\
    \ v)| v).collect()\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<(usize, isize)>` cannot be built from\
    \ an iterator over elements of type `(u32, isize)`\n --> /tmp/tmpucit7sbq.rs:6:85\n\
    \  |\n6 |     let mut arr: Vec<(usize, isize)> = arr.into_iter().map(|v| (v.count_ones(),\
    \ v)).collect();\n  |                                                        \
    \                             ^^^^^^^ value of type `Vec<(usize, isize)>` cannot\
    \ be built from `std::iter::Iterator<Item=(u32, isize)>`\n  |\n  = help: the trait\
    \ `FromIterator<(u32, isize)>` is not implemented for `Vec<(usize, isize)>`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut arr\
    \ = arr;\n    arr.sort_by(|a, b| count_ones(*a).cmp(&count_ones(*b)).then(a.cmp(b)));\n\
    \    arr\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `count_ones` in this scope\n --> /tmp/tmp_09j5w_d.rs:7:24\n\
    \  |\n7 |     arr.sort_by(|a, b| count_ones(*a).cmp(&count_ones(*b)).then(a.cmp(b)));\n\
    \  |                        ^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `count_ones` in this scope\n --> /tmp/tmp_09j5w_d.rs:7:44\n\
    \  |\n7 |     arr.sort_by(|a, b| count_ones(*a).cmp(&count_ones(*b)).then(a.cmp(b)));\n\
    \  |                                            ^^^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822460
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    arr.into_iter()\n\
    \        .map(|x| (x, x.count_ones()))\n        .collect::<Vec<_>>()\n       \
    \ .sort_by(|a, b| match a.1.cmp(&b.1) {\n            Ordering::Equal => a.0.cmp(&b.0),\n\
    \            Ordering::Less => Ordering::Less,\n            Ordering::Greater\
    \ => Ordering::Greater,\n        });\n    arr.iter().map(|x| x.0).collect()\n\
    }\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Ordering`\n  -->\
    \ /tmp/tmpj53fyw0n.rs:10:13\n   |\n10 |             Ordering::Equal => a.0.cmp(&b.0),\n\
    \   |             ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `Ordering`\n  --> /tmp/tmpj53fyw0n.rs:11:13\n\
    \   |\n11 |             Ordering::Less => Ordering::Less,\n   |             ^^^^^^^^\
    \ use of undeclared type `Ordering`\n\nerror[E0433]: failed to resolve: use of\
    \ undeclared type `Ordering`\n  --> /tmp/tmpj53fyw0n.rs:11:31\n   |\n11 |    \
    \         Ordering::Less => Ordering::Less,\n   |                            \
    \   ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `Ordering`\n  --> /tmp/tmpj53fyw0n.rs:12:13\n   |\n12\
    \ |             Ordering::Greater => Ordering::Greater,\n   |             ^^^^^^^^\
    \ use of undeclared type `Ordering`\n\nerror[E0433]: failed to resolve: use of\
    \ undeclared type `Ordering`\n  --> /tmp/tmpj53fyw0n.rs:12:34\n   |\n12 |    \
    \         Ordering::Greater => Ordering::Greater,\n   |                      \
    \            ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0609]: no field\
    \ `0` on type `&isize`\n  --> /tmp/tmpj53fyw0n.rs:14:26\n   |\n14 |     arr.iter().map(|x|\
    \ x.0).collect()\n   |                          ^\n\nerror: aborting due to 6\
    \ previous errors\n\nSome errors have detailed explanations: E0433, E0609.\nFor\
    \ more information about an error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut vec\
    \ = arr.clone();\n    vec.sort_by(|a, b| {\n        let ones = |n: isize| n.count_ones();\n\
    \        if ones(*a) != ones(*b) {\n            ones(*a).cmp(&ones(*b))\n    \
    \    } else {\n            a.cmp(b)\n        }\n    });\n    vec\n}\n\nfn main()\
    \ {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3,\
    \ 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]),\
    \ vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0,\
    \ 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpnoymuohh.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822462
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    arr.iter()\n\
    \        .sorted_by(|&a, &b| format!(\"{:b}\", a).len().cmp(&format!(\"{:b}\"\
    , b).len()).then(a.cmp(b)))\n        .cloned()\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3,\
    \ 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]),\
    \ vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0,\
    \ 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted_by` found for struct `std::slice::Iter`\
    \ in the current scope\n --> /tmp/tmp1zusobl8.rs:7:10\n  |\n7 |         .sorted_by(|&a,\
    \ &b| format!(\"{:b}\", a).len().cmp(&format!(\"{:b}\", b).len()).then(a.cmp(b)))\n\
    \  |          ^^^^^^^^^ method not found in `std::slice::Iter<'_, isize>`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let len = arr.len();\n\
    \    if len == 0 {\n        return arr;\n    }\n    let mut result = vec![0; len];\n\
    \    let mut vec: Vec<_> = arr.iter().map(|x| x.count_ones()).collect();\n   \
    \ vec.sort();\n    let mut counter = 0;\n    let mut n = 1;\n    while counter\
    \ < len {\n        for i in 0..len {\n            if arr[i].count_ones() == n\
    \ {\n                result[counter] = arr[i];\n                counter += 1;\n\
    \            }\n        }\n        n += 1;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3,\
    \ 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]),\
    \ vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0,\
    \ 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 4, 5, 3]`,\n right: `[1, 2, 4, 3, 5]`', /tmp/tmp67rkp6bx.rs:29:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822462
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut v =\
    \ arr;\n    v.sort_by(|x, y| {\n        format!(\"{:b}\", x).chars().filter(|&c|\
    \ c == '1').count().cmp(\n            &format!(\"{:b}\", y).chars().filter(|&c|\
    \ c == '1').count())\n            .then(x.cmp(y))\n    });\n    v\n}\n\nfn main()\
    \ {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3,\
    \ 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]),\
    \ vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0,\
    \ 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmp1y1dpp46.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822462
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut arr\
    \ = arr;\n    arr.sort_by(|a, b|\n        a.count_ones().cmp(&b.count_ones())\n\
    \        .then(a.cmp(b))\n    );\n    arr\n}\n\nfn main() {\n    let candidate\
    \ = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4,\
    \ 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4, -2, -6,\
    \ -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n\
    \    assert_eq!(candidate(vec![3, 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n\
    \    assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n  \
    \  assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmphbktlwpw.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822462
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut clone\
    \ = arr.clone();\n    clone.sort_by(|x, y| {\n        let num_ones_x = x.count_ones();\n\
    \        let num_ones_y = y.count_ones();\n        match num_ones_x.cmp(&num_ones_y)\
    \ {\n            Ordering::Equal => x.cmp(y),\n            _ => num_ones_x.cmp(&num_ones_y),\n\
    \        }\n    });\n    clone\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Ordering`\n  -->\
    \ /tmp/tmpmhbvq__v.rs:11:13\n   |\n11 |             Ordering::Equal => x.cmp(y),\n\
    \   |             ^^^^^^^^ use of undeclared type `Ordering`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    use std::collections::HashMap;\n\
    \    use std::collections::BinaryHeap;\n    use std::cmp::Reverse;\n\n    let\
    \ mut map = HashMap::new();\n    let mut heap = BinaryHeap::new();\n\n    for\
    \ num in arr {\n        let mut bin = num;\n        let mut ones = 0;\n      \
    \  while bin > 0 {\n            let val = bin % 2;\n            if val == 1 {\n\
    \                ones += 1;\n            }\n            bin /= 2;\n        }\n\
    \        if !map.contains_key(&ones) {\n            map.insert(ones, vec![num]);\n\
    \        } else {\n            let mut list = map.get_mut(&ones).unwrap();\n \
    \           list.push(num);\n        }\n        heap.push(Reverse(ones));\n  \
    \  }\n\n    let mut result = vec![];\n    while !heap.is_empty() {\n        let\
    \ ones = heap.pop().unwrap().0;\n        let mut list = map.get_mut(&ones).unwrap();\n\
    \        list.sort();\n        while !list.is_empty() {\n            result.push(list.remove(0));\n\
    \        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -5, -4, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpz2ohdufz.rs:48:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822462
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    arr.iter()\n\
    \        .map(|&n| (n, n.count_ones()))\n        .sorted_by(|a, b| {\n       \
    \     if a.1 == b.1 {\n                a.0.cmp(&b.0)\n            } else {\n \
    \               a.1.cmp(&b.1)\n            }\n        })\n        .map(|p| p.0)\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted_by` found for struct `Map` in the\
    \ current scope\n --> /tmp/tmp8p2529ov.rs:8:10\n  |\n8 |         .sorted_by(|a,\
    \ b| {\n  |          ^^^^^^^^^ method not found in `Map<std::slice::Iter<'_, isize>,\
    \ [closure@/tmp/tmp8p2529ov.rs:7:14: 7:38]>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut arr\
    \ = arr;\n    arr.sort_by(|a, b| {\n        let (a, b) = (a.to_string(2), b.to_string(2));\n\
    \        let (a, b) = (a.chars().filter(|&c| c == '1').count(), b.chars().filter(|&c|\
    \ c == '1').count());\n        let (a, b) = (a as isize, b as isize);\n      \
    \  if a == b {\n            a.cmp(&b)\n        } else {\n            a.cmp(&b)\n\
    \        }\n    });\n    arr\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n\
    \    --> /tmp/tmpp1nv00cl.rs:8:25\n     |\n8    |         let (a, b) = (a.to_string(2),\
    \ b.to_string(2));\n     |                         ^^^^^^^^^ - supplied 1 argument\n\
    \     |                         |\n     |                         expected 0 arguments\n\
    \     |\nnote: associated function defined here\n\nerror[E0061]: this function\
    \ takes 0 arguments but 1 argument was supplied\n    --> /tmp/tmpp1nv00cl.rs:8:41\n\
    \     |\n8    |         let (a, b) = (a.to_string(2), b.to_string(2));\n     |\
    \                                         ^^^^^^^^^ - supplied 1 argument\n  \
    \   |                                         |\n     |                      \
    \                   expected 0 arguments\n     |\nnote: associated function defined\
    \ here\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut t =\
    \ arr.clone();\n    t.sort_by(|a, b| {\n        format!(\"{:b}\", a).chars().filter(|&c|\
    \ c == '1').count().cmp(\n            &format!(\"{:b}\", b).chars().filter(|&c|\
    \ c == '1').count())\n            .then(a.cmp(b))\n    });\n    t\n}\n\nfn main()\
    \ {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3,\
    \ 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]),\
    \ vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0,\
    \ 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpkvkfnyub.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822462
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    arr.into_iter()\n\
    \        .map(|i| (i, i.count_ones()))\n        .sorted_by(|a, b| a.1.cmp(&b.1).then(a.0.cmp(&b.0)))\n\
    \        .map(|(a, _)| a)\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4,\
    \ 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4, -2, -6,\
    \ -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n\
    \    assert_eq!(candidate(vec![3, 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n\
    \    assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n  \
    \  assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted_by` found for struct `Map` in the\
    \ current scope\n --> /tmp/tmp8hri2tat.rs:8:10\n  |\n8 |         .sorted_by(|a,\
    \ b| a.1.cmp(&b.1).then(a.0.cmp(&b.0)))\n  |          ^^^^^^^^^ method not found\
    \ in `Map<std::vec::IntoIter<isize>, [closure@/tmp/tmp8hri2tat.rs:7:14: 7:37]>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659822462
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut arr:\
    \ Vec<(isize, usize)> = arr.into_iter().map(|x| (x, x.count_ones())).collect();\n\
    \    arr.sort_by(|x, y| x.1.cmp(&y.1).then(x.0.cmp(&y.0)));\n    arr.into_iter().map(|x|\
    \ x.0).collect()\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<(isize, usize)>` cannot be built from\
    \ an iterator over elements of type `(isize, u32)`\n --> /tmp/tmpy6f50czt.rs:6:85\n\
    \  |\n6 |     let mut arr: Vec<(isize, usize)> = arr.into_iter().map(|x| (x, x.count_ones())).collect();\n\
    \  |                                                                         \
    \            ^^^^^^^ value of type `Vec<(isize, usize)>` cannot be built from\
    \ `std::iter::Iterator<Item=(isize, u32)>`\n  |\n  = help: the trait `FromIterator<(isize,\
    \ u32)>` is not implemented for `Vec<(isize, usize)>`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659822462
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let bin_ones:\
    \ Vec<(usize, usize)> = arr.iter().map(|x| {\n        (\n            x.clone()\
    \ as usize,\n            format!(\"{:b}\", x).chars().filter(|c| *c == '1').count(),\n\
    \        )\n    }).collect();\n    bin_ones.iter().sorted_by(|&x, &y| {\n    \
    \    if x.1 == y.1 {\n            x.0.cmp(&y.0)\n        } else {\n          \
    \  x.1.cmp(&y.1)\n        }\n    }).map(|x| x.0 as isize).collect()\n}\n\nfn main()\
    \ {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3,\
    \ 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]),\
    \ vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0,\
    \ 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted_by` found for struct `std::slice::Iter`\
    \ in the current scope\n  --> /tmp/tmp4n4o744c.rs:12:21\n   |\n12 |     bin_ones.iter().sorted_by(|&x,\
    \ &y| {\n   |                     ^^^^^^^^^ method not found in `std::slice::Iter<'_,\
    \ (usize, usize)>`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659822462
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = arr.clone();\n    result.sort_by(|a, b| {\n        let a = format!(\"{:b}\"\
    , a);\n        let b = format!(\"{:b}\", b);\n        a.chars().filter(|&x| x\
    \ == '1').count().cmp(&b.chars().filter(|&x| x == '1').count())\n            .then(a.cmp(&b))\n\
    \    });\n    result\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 4, 5, 3]`,\n right: `[1, 2, 4, 3, 5]`', /tmp/tmp0218e33n.rs:18:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822462
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut a: Vec<(usize,\
    \ isize)> = arr.iter().map(|x| (x.count_ones(), *x)).collect();\n    a.sort();\n\
    \    a.iter().map(|x| x.1).collect()\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<(usize, isize)>` cannot be built from\
    \ an iterator over elements of type `(u32, isize)`\n --> /tmp/tmpx9qgridm.rs:6:79\n\
    \  |\n6 |     let mut a: Vec<(usize, isize)> = arr.iter().map(|x| (x.count_ones(),\
    \ *x)).collect();\n  |                                                       \
    \                        ^^^^^^^ value of type `Vec<(usize, isize)>` cannot be\
    \ built from `std::iter::Iterator<Item=(u32, isize)>`\n  |\n  = help: the trait\
    \ `FromIterator<(u32, isize)>` is not implemented for `Vec<(usize, isize)>`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659822462
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    // TODO: Implement\
    \ the function here\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4,\
    \ 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4, -2, -6,\
    \ -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n\
    \    assert_eq!(candidate(vec![3, 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n\
    \    assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n  \
    \  assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpto_iqaek.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822462
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    fn count_ones(mut\
    \ number: isize) -> isize {\n        let mut count = 0;\n        while number\
    \ > 0 {\n            count += number % 2;\n            number /= 2;\n        }\n\
    \        count\n    }\n\n    arr.into_iter()\n        .map(|number| (count_ones(number),\
    \ number))\n        .sorted()\n        .into_iter()\n        .map(|tuple| tuple.1)\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted` found for struct `Map` in the current\
    \ scope\n  --> /tmp/tmpfq2j59a4.rs:17:10\n   |\n17 |         .sorted()\n   | \
    \         ^^^^^^ method not found in `Map<std::vec::IntoIter<isize>, [closure@/tmp/tmpfq2j59a4.rs:16:14:\
    \ 16:51]>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659822462
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    arr.iter()\n\
    \        .map(|n| (n, binary_ones(*n)))\n        .collect::<Vec<_>>()\n      \
    \  .sort_by(|a, b| match a.1.cmp(&b.1) {\n            std::cmp::Ordering::Equal\
    \ => a.0.cmp(&b.0),\n            std::cmp::Ordering::Less => std::cmp::Ordering::Less,\n\
    \            std::cmp::Ordering::Greater => std::cmp::Ordering::Greater,\n   \
    \     })\n        .iter()\n        .map(|n| *n.0)\n        .collect()\n}\n\nfn\
    \ main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `binary_ones` in this scope\n --> /tmp/tmpxhaeg5k3.rs:7:22\n\
    \  |\n7 |         .map(|n| (n, binary_ones(*n)))\n  |                      ^^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0609]: no field `1` on type `&_`\n --> /tmp/tmpxhaeg5k3.rs:9:33\n\
    \  |\n9 |         .sort_by(|a, b| match a.1.cmp(&b.1) {\n  |                 \
    \                ^\n\nerror[E0599]: no method named `iter` found for unit type\
    \ `()` in the current scope\n  --> /tmp/tmpxhaeg5k3.rs:14:10\n   |\n14 |     \
    \    .iter()\n   |          ^^^^ method not found in `()`\n\nerror: aborting due\
    \ to 3 previous errors\n\nSome errors have detailed explanations: E0425, E0599,\
    \ E0609.\nFor more information about an error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822462
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut sorted\
    \ = arr;\n    sorted.sort_by(|a, b| format!(\"{:b}\", a).len().cmp(&format!(\"\
    {:b}\", b).len()));\n    sorted\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 5, 4]`,\n right: `[1, 2, 4, 3, 5]`', /tmp/tmpzn5wv6q3.rs:13:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822462
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut v: Vec<isize>\
    \ = Vec::new();\n    let mut m: HashMap<usize, Vec<isize>> = HashMap::new();\n\
    \    for a in arr {\n        let mut b = a;\n        let mut n = 0;\n        while\
    \ b > 0 {\n            if b % 2 == 1 {\n                n += 1;\n            }\n\
    \            b /= 2;\n        }\n        match m.get_mut(&n) {\n            Some(x)\
    \ => x.push(a),\n            None => {\n                let mut v2: Vec<isize>\
    \ = Vec::new();\n                v2.push(a);\n                m.insert(n, v2);\n\
    \            }\n        }\n    }\n    let mut k: Vec<usize> = m.keys().map(|x|\
    \ *x).collect();\n    k.sort();\n    for x in k {\n        let mut v3 = m.get(&x).unwrap().clone();\n\
    \        v3.sort();\n        v.append(&mut v3);\n    }\n    v\n}\n\nfn main()\
    \ {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3,\
    \ 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]),\
    \ vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0,\
    \ 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashMap` in this scope\n --> /tmp/tmpbarxdn4y.rs:7:16\n\
    \  |\n7 |     let mut m: HashMap<usize, Vec<isize>> = HashMap::new();\n  |   \
    \             ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this\
    \ struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpbarxdn4y.rs:7:45\n\
    \  |\n7 |     let mut m: HashMap<usize, Vec<isize>> = HashMap::new();\n  |   \
    \                                          ^^^^^^^ not found in this scope\n \
    \ |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n\
    \  |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0412, E0433.\nFor more information about an error, try `rustc\
    \ --explain E0412`.\n"
  stdout: ''
  timestamp: 1659822462
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    // get a string\
    \ of binary representation\n    // of each number, in order of the array\n   \
    \ let binary_strings: Vec<_> = arr.iter().map(|x| format!(\"{:b}\", x)).collect();\n\
    \    // split these strings by the character '1'\n    let split_strings: Vec<_>\
    \ = binary_strings.iter().map(|x| x.split('1').collect::<Vec<_>>()).collect();\n\
    \    // get the number of ones from the binary representation\n    let ones_count:\
    \ Vec<_> = split_strings.iter().map(|x| x.len()-1).collect();\n    // get the\
    \ indices of the original array, in ascending order of the number of ones\n  \
    \  let mut indices: Vec<_> = (0..arr.len()).collect();\n    indices.sort_by_key(|x|\
    \ ones_count[*x]);\n    // use the indices to sort the original array\n    let\
    \ sorted_array: Vec<_> = indices.iter().map(|x| arr[*x]).collect();\n    sorted_array\n\
    }\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 4, 5, 3]`,\n right: `[1, 2, 4, 3, 5]`', /tmp/tmprq_c7r91.rs:23:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822462
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut ones:\
    \ Vec<(isize, isize)> = arr.iter().map(|x| (*x, x.count_ones())).collect();\n\
    \    ones.sort_by(|a, b| a.1.cmp(&b.1).then(a.0.cmp(&b.0)));\n    ones.iter().map(|x|\
    \ x.0).collect()\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<(isize, isize)>` cannot be built from\
    \ an iterator over elements of type `(isize, u32)`\n --> /tmp/tmpwqdxn4sy.rs:6:82\n\
    \  |\n6 |     let mut ones: Vec<(isize, isize)> = arr.iter().map(|x| (*x, x.count_ones())).collect();\n\
    \  |                                                                         \
    \         ^^^^^^^ value of type `Vec<(isize, isize)>` cannot be built from `std::iter::Iterator<Item=(isize,\
    \ u32)>`\n  |\n  = help: the trait `FromIterator<(isize, u32)>` is not implemented\
    \ for `Vec<(isize, isize)>`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659822462
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    arr.into_iter()\n\
    \        .sorted_by(|a, b| {\n            let ones_a = a.count_ones();\n     \
    \       let ones_b = b.count_ones();\n            if ones_a != ones_b {\n    \
    \            ones_a.cmp(&ones_b)\n            } else {\n                a.cmp(&b)\n\
    \            }\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4,\
    \ 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4, -2, -6,\
    \ -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n\
    \    assert_eq!(candidate(vec![3, 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n\
    \    assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n  \
    \  assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted_by` found for struct `std::vec::IntoIter`\
    \ in the current scope\n --> /tmp/tmpw1yqpgvv.rs:7:10\n  |\n7 |         .sorted_by(|a,\
    \ b| {\n  |          ^^^^^^^^^ method not found in `std::vec::IntoIter<isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659822462
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut z =\
    \ arr.clone();\n    z.sort_by(|x, y| num_ones(*x).cmp(&num_ones(*y)));\n    z\n\
    }\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `num_ones` in this scope\n --> /tmp/tmpj_9drwfr.rs:7:22\n\
    \  |\n7 |     z.sort_by(|x, y| num_ones(*x).cmp(&num_ones(*y)));\n  |        \
    \              ^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function\
    \ `num_ones` in this scope\n --> /tmp/tmpj_9drwfr.rs:7:40\n  |\n7 |     z.sort_by(|x,\
    \ y| num_ones(*x).cmp(&num_ones(*y)));\n  |                                  \
    \      ^^^^^^^^ not found in this scope\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822462
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut to_sort:\
    \ Vec<(usize, isize)> = arr.iter().map(|&x| (x.count_ones(), x)).collect();\n\
    \    to_sort.sort_by(|a, b| (a.0, a.1).cmp(&(b.0, b.1)));\n    to_sort.iter().map(|x|\
    \ x.1).collect()\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<(usize, isize)>` cannot be built from\
    \ an iterator over elements of type `(u32, isize)`\n --> /tmp/tmppabvlpza.rs:6:85\n\
    \  |\n6 |     let mut to_sort: Vec<(usize, isize)> = arr.iter().map(|&x| (x.count_ones(),\
    \ x)).collect();\n  |                                                        \
    \                             ^^^^^^^ value of type `Vec<(usize, isize)>` cannot\
    \ be built from `std::iter::Iterator<Item=(u32, isize)>`\n  |\n  = help: the trait\
    \ `FromIterator<(u32, isize)>` is not implemented for `Vec<(usize, isize)>`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659822462
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut arr\
    \ = arr;\n    arr.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n   \
    \     let b_ones = b.count_ones();\n        if a_ones == b_ones {\n          \
    \  a.cmp(b)\n        } else {\n            a_ones.cmp(&b_ones)\n        }\n  \
    \  });\n    arr\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmp8cssqdb5.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822462
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut arr\
    \ = arr;\n    arr.sort_by(|a, b| {\n        let a_ones = format!(\"{:b}\", a).split('1').count()\
    \ - 1;\n        let b_ones = format!(\"{:b}\", b).split('1').count() - 1;\n  \
    \      if a_ones != b_ones {\n            a_ones.cmp(&b_ones)\n        } else\
    \ {\n            a.cmp(&b)\n        }\n    });\n    arr\n}\n\nfn main() {\n  \
    \  let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmprm6aqtl7.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822462
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut arr\
    \ = arr;\n    arr.sort_by(|a, b| {\n        let ab = a.count_ones();\n       \
    \ let bb = b.count_ones();\n        if ab == bb {\n            a.cmp(b)\n    \
    \    } else {\n            ab.cmp(&bb)\n        }\n    });\n    arr\n}\n\nfn main()\
    \ {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3,\
    \ 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]),\
    \ vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0,\
    \ 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpbrrkcpqa.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822462
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut vec\
    \ = arr.clone();\n    vec.sort_by(|x, y| {\n        let x_ones = x.count_ones();\n\
    \        let y_ones = y.count_ones();\n        if x_ones == y_ones {\n       \
    \     x.cmp(y)\n        } else {\n            x_ones.cmp(&y_ones)\n        }\n\
    \    });\n    vec\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmp0qex66sl.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822462
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    arr.iter()\n\
    \        .sorted_by(|a, b| a.count_ones().cmp(&b.count_ones()).then(a.cmp(b)))\n\
    \        .cloned()\n        .collect()\n}\n\nfn main() {\n    let candidate =\
    \ sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3,\
    \ 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4, -2, -6, -5,\
    \ -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n\
    \    assert_eq!(candidate(vec![3, 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n\
    \    assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n  \
    \  assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted_by` found for struct `std::slice::Iter`\
    \ in the current scope\n --> /tmp/tmpo648ieb6.rs:7:10\n  |\n7 |         .sorted_by(|a,\
    \ b| a.count_ones().cmp(&b.count_ones()).then(a.cmp(b)))\n  |          ^^^^^^^^^\
    \ method not found in `std::slice::Iter<'_, isize>`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659822462
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    if arr.is_empty()\
    \ {\n        return arr;\n    }\n    let mut arr = arr;\n    arr.sort_by(|a, b|\
    \ {\n        if count_ones(*a) == count_ones(*b) {\n            a.cmp(b)\n   \
    \     } else {\n            count_ones(*a).cmp(&count_ones(*b))\n        }\n \
    \   });\n    arr\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `count_ones` in this scope\n  --> /tmp/tmps42l9dwo.rs:11:12\n\
    \   |\n11 |         if count_ones(*a) == count_ones(*b) {\n   |            ^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find function `count_ones` in\
    \ this scope\n  --> /tmp/tmps42l9dwo.rs:11:30\n   |\n11 |         if count_ones(*a)\
    \ == count_ones(*b) {\n   |                              ^^^^^^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find function `count_ones` in this scope\n\
    \  --> /tmp/tmps42l9dwo.rs:14:13\n   |\n14 |             count_ones(*a).cmp(&count_ones(*b))\n\
    \   |             ^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ function `count_ones` in this scope\n  --> /tmp/tmps42l9dwo.rs:14:33\n   |\n\
    14 |             count_ones(*a).cmp(&count_ones(*b))\n   |                   \
    \              ^^^^^^^^^^ not found in this scope\n\nerror: aborting due to 4\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659822462
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut ones\
    \ = arr.clone();\n    ones.sort_by(|a, b| {\n        let mut a_ones = 0;\n   \
    \     let mut b_ones = 0;\n        let mut a_current = *a;\n        let mut b_current\
    \ = *b;\n        while a_current > 0 {\n            a_ones += a_current % 2;\n\
    \            a_current /= 2;\n        }\n        while b_current > 0 {\n     \
    \       b_ones += b_current % 2;\n            b_current /= 2;\n        }\n   \
    \     if a_ones == b_ones {\n            a.cmp(b)\n        } else {\n        \
    \    a_ones.cmp(&b_ones)\n        }\n    });\n    ones\n}\n\nfn main() {\n   \
    \ let candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]),\
    \ vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -5, -4, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpyuqu869s.rs:32:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822462
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut one_count:\
    \ Vec<(usize, isize)> = vec![];\n    let mut copy = arr.clone();\n    copy.sort();\n\
    \    for elem in copy {\n        let bin_elem = elem.to_string();\n        let\
    \ mut ones = 0;\n        for c in bin_elem.chars() {\n            if c == '1'\
    \ {\n                ones += 1;\n            }\n        }\n        one_count.push((ones,\
    \ elem));\n    }\n    one_count.sort();\n    one_count.iter().map(|x| x.1).collect()\n\
    }\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 3, 4, 5, 1]`,\n right: `[1, 2, 4, 3, 5]`', /tmp/tmp3kn2q4_g.rs:25:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822462
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut s: Vec<isize>\
    \ = arr.clone();\n    s.sort_by(|a, b| match (a.count_ones(), b.count_ones())\
    \ {\n        (a, b) if a == b => a.cmp(b),\n        (a, b) => a.cmp(&b),\n   \
    \ });\n    s\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp_458vsy7.rs:8:35\n  |\n8 |\
    \         (a, b) if a == b => a.cmp(b),\n  |                                 \
    \  ^\n  |                                   |\n  |                           \
    \        expected `&u32`, found `u32`\n  |                                   help:\
    \ consider borrowing here: `&b`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822462
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut ar =\
    \ arr.clone();\n    ar.sort_by(|a, b| {\n        let mut counter_a = 0;\n    \
    \    let mut counter_b = 0;\n        let mut tmp_a = *a;\n        let mut tmp_b\
    \ = *b;\n        while tmp_a > 0 {\n            if tmp_a % 2 == 1 {\n        \
    \        counter_a += 1;\n            }\n            tmp_a /= 2;\n        }\n\
    \        while tmp_b > 0 {\n            if tmp_b % 2 == 1 {\n                counter_b\
    \ += 1;\n            }\n            tmp_b /= 2;\n        }\n        counter_a.cmp(&counter_b).then(a.cmp(&b))\n\
    \    });\n    ar\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -5, -4, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpijmgr33z.rs:32:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822462
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut list\
    \ = arr.into_iter().map(|x| (x, x.count_ones())).collect::<Vec<_>>();\n    list.sort_by(|a,\
    \ b| {\n        let cmp = a.1.cmp(&b.1);\n        if cmp == std::cmp::Ordering::Equal\
    \ {\n            a.0.cmp(&b.0)\n        } else {\n            cmp\n        }\n\
    \    });\n    list.into_iter().map(|t| t.0).collect()\n}\n\nfn main() {\n    let\
    \ candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1,\
    \ 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmp4sh1rt60.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822462
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    arr.into_iter()\n\
    \        .map(|x| (x, x.count_ones()))\n        .collect::<Vec<_>>()\n       \
    \ .sort_by(|a, b| match a.1.cmp(&b.1) {\n            Ordering::Equal => a.0.cmp(&b.0),\n\
    \            other => other,\n        });\n    arr\n}\n\nfn main() {\n    let\
    \ candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1,\
    \ 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Ordering`\n  -->\
    \ /tmp/tmp3z2km6rz.rs:10:13\n   |\n10 |             Ordering::Equal => a.0.cmp(&b.0),\n\
    \   |             ^^^^^^^^ use of undeclared type `Ordering`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659822462
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut map\
    \ = HashMap::new();\n    let mut cnt = 0;\n    let mut arr = arr;\n    arr.sort();\n\
    \    for &i in &arr {\n        let ones = i.count_ones();\n        map.entry(ones).or_insert(Vec::new()).push(i);\n\
    \        cnt = std::cmp::max(cnt, ones);\n    }\n    let mut res = Vec::new();\n\
    \    for i in 0..=cnt {\n        if let Some(m) = map.get(&i) {\n            res.extend(m);\n\
    \        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmpo8bm_wma.rs:6:19\n  |\n6 |     let mut map = HashMap::new();\n  |  \
    \                 ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659822462
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut v =\
    \ arr;\n    v.sort_by(|a, b| {\n        let a_bin = format!(\"{:b}\", a);\n  \
    \      let b_bin = format!(\"{:b}\", b);\n        a_bin.chars().filter(|&c| c\
    \ == '1').count().cmp(&b_bin.chars().filter(|&c| c == '1').count())\n    });\n\
    \    v\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 4, 5, 3]`,\n right: `[1, 2, 4, 3, 5]`', /tmp/tmppe8jxz10.rs:17:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822462
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    arr.iter()\n\
    \        .map(|n| (n, n.count_ones()))\n        .sorted_by(|(a, ac), (b, bc)|\
    \ {\n            if ac < bc {\n                return Ordering::Less;\n      \
    \      }\n            if ac > bc {\n                return Ordering::Greater;\n\
    \            }\n            a.cmp(b)\n        })\n        .map(|(n, _)| *n)\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Ordering`\n  -->\
    \ /tmp/tmpq5xmsb30.rs:10:24\n   |\n10 |                 return Ordering::Less;\n\
    \   |                        ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `Ordering`\n  --> /tmp/tmpq5xmsb30.rs:13:24\n\
    \   |\n13 |                 return Ordering::Greater;\n   |                  \
    \      ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0599]: no method named\
    \ `sorted_by` found for struct `Map` in the current scope\n --> /tmp/tmpq5xmsb30.rs:8:10\n\
    \  |\n8 |         .sorted_by(|(a, ac), (b, bc)| {\n  |          ^^^^^^^^^ method\
    \ not found in `Map<std::slice::Iter<'_, isize>, [closure@/tmp/tmpq5xmsb30.rs:7:14:\
    \ 7:37]>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0433, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0433`.\n"
  stdout: ''
  timestamp: 1659822462
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut arr\
    \ = arr;\n    arr.sort_by(|a, b| a.count_ones().cmp(&b.count_ones()).then(a.cmp(b)));\n\
    \    arr\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmpqtx7kx0n.rs:14:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822460
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut out:\
    \ Vec<isize> = arr.clone();\n    out.sort_by(|a, b| {\n        if (a & 1) == (b\
    \ & 1) {\n            a.cmp(b)\n        } else {\n            (a & 1).cmp(&(b\
    \ & 1))\n        }\n    });\n    out\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 4, 1, 3, 5]`,\n right: `[1, 2, 4, 3, 5]`', /tmp/tmp95e8cco2.rs:19:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822462
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    arr.into_iter()\n\
    \        .map(|x| (x, bitset::Bitset::from(x as u64)))\n        .sorted_by(|a,\
    \ b| {\n            if a.1.count() != b.1.count() {\n                a.1.count().cmp(&b.1.count())\n\
    \            } else {\n                a.0.cmp(&b.0)\n            }\n        })\n\
    \        .map(|(x, _)| x)\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4,\
    \ 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4, -2, -6,\
    \ -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n\
    \    assert_eq!(candidate(vec![3, 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n\
    \    assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n  \
    \  assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `bitset`\n\
    \ --> /tmp/tmpmhqxbhg9.rs:7:22\n  |\n7 |         .map(|x| (x, bitset::Bitset::from(x\
    \ as u64)))\n  |                      ^^^^^^ use of undeclared crate or module\
    \ `bitset`\n\nerror[E0599]: no method named `sorted_by` found for struct `Map`\
    \ in the current scope\n --> /tmp/tmpmhqxbhg9.rs:8:10\n  |\n8 |         .sorted_by(|a,\
    \ b| {\n  |          ^^^^^^^^^ method not found in `Map<std::vec::IntoIter<isize>,\
    \ _>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0433, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0433`.\n"
  stdout: ''
  timestamp: 1659822462
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    arr.into_iter()\n\
    \        .sorted_by(|a, b| {\n            let (a_ones, a_dec) = count_ones_and_dec(*a);\n\
    \            let (b_ones, b_dec) = count_ones_and_dec(*b);\n            a_ones.cmp(&b_ones).then(a_dec.cmp(&b_dec))\n\
    \        })\n        .collect()\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `count_ones_and_dec` in this scope\n\
    \ --> /tmp/tmp2nro3a5n.rs:8:35\n  |\n8 |             let (a_ones, a_dec) = count_ones_and_dec(*a);\n\
    \  |                                   ^^^^^^^^^^^^^^^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find function `count_ones_and_dec` in this scope\n -->\
    \ /tmp/tmp2nro3a5n.rs:9:35\n  |\n9 |             let (b_ones, b_dec) = count_ones_and_dec(*b);\n\
    \  |                                   ^^^^^^^^^^^^^^^^^^ not found in this scope\n\
    \nerror[E0599]: no method named `sorted_by` found for struct `std::vec::IntoIter`\
    \ in the current scope\n --> /tmp/tmp2nro3a5n.rs:7:10\n  |\n7 |         .sorted_by(|a,\
    \ b| {\n  |          ^^^^^^^^^ method not found in `std::vec::IntoIter<isize>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822462
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    arr.iter()\n\
    \        .cloned()\n        .sorted_by(|a, b| format!(\"{:b}\", a).len().cmp(&format!(\"\
    {:b}\", b).len()).then(a.cmp(b)))\n        .collect()\n}\n\nfn main() {\n    let\
    \ candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1,\
    \ 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted_by` found for struct `Cloned` in\
    \ the current scope\n --> /tmp/tmp1zm8xojf.rs:8:10\n  |\n8 |         .sorted_by(|a,\
    \ b| format!(\"{:b}\", a).len().cmp(&format!(\"{:b}\", b).len()).then(a.cmp(b)))\n\
    \  |          ^^^^^^^^^ method not found in `Cloned<std::slice::Iter<'_, isize>>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659822462
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut res\
    \ = arr.clone();\n    res.sort_by(|a, b| {\n        let a = format!(\"{:b}\",\
    \ a);\n        let b = format!(\"{:b}\", b);\n        a.matches('1').count().cmp(&b.matches('1').count()).then(a.cmp(&b))\n\
    \    });\n    res\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 4, 5, 3]`,\n right: `[1, 2, 4, 3, 5]`', /tmp/tmpclbh3zwn.rs:17:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822462
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut sorted:\
    \ Vec<isize> = arr.clone();\n    sorted.sort_by(|a, b| format!(\"{:b}\", a).len().cmp(&format!(\"\
    {:b}\", b).len()));\n    sorted\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 5, 4]`,\n right: `[1, 2, 4, 3, 5]`', /tmp/tmppcmlc63g.rs:13:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822462
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut result\
    \ = arr.clone();\n    result.sort_by(|a, b| {\n        let ones_a = (a as f64).log2().ceil()\
    \ as u32;\n        let ones_b = (b as f64).log2().ceil() as u32;\n        ones_a.cmp(&ones_b).then(a.cmp(b))\n\
    \    });\n    result\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0606]: casting `&isize` as `f64` is invalid\n --> /tmp/tmpzniiaps7.rs:8:22\n\
    \  |\n8 |         let ones_a = (a as f64).log2().ceil() as u32;\n  |         \
    \             ^-^^^^^^^^\n  |                      ||\n  |                   \
    \   |help: dereference the expression: `*a`\n  |                      cannot cast\
    \ `&isize` as `f64`\n\nerror[E0606]: casting `&isize` as `f64` is invalid\n -->\
    \ /tmp/tmpzniiaps7.rs:9:22\n  |\n9 |         let ones_b = (b as f64).log2().ceil()\
    \ as u32;\n  |                      ^-^^^^^^^^\n  |                      ||\n\
    \  |                      |help: dereference the expression: `*b`\n  |       \
    \               cannot cast `&isize` as `f64`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0606`.\n"
  stdout: ''
  timestamp: 1659822462
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut arr\
    \ = arr;\n    arr.sort_by(|x, y| {\n        let x_ones = x.count_ones();\n   \
    \     let y_ones = y.count_ones();\n        match x_ones.cmp(&y_ones) {\n    \
    \        Equal => x.cmp(y),\n            x => x,\n        }\n    });\n    arr\n\
    }\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4, 5]`,\n right: `[1, 2, 4, 3, 5]`', /tmp/tmptw7282sa.rs:20:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822462
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut arr\
    \ = arr;\n    arr.sort_by(|a, b| {\n        let a = a.count_ones();\n        let\
    \ b = b.count_ones();\n        a.cmp(&b).then(a.cmp(&b))\n    });\n    arr\n}\n\
    \nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 4, 5, 3]`,\n right: `[1, 2, 4, 3, 5]`', /tmp/tmpdqdx9gvt.rs:17:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822462
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut sol\
    \ = vec![];\n    for x in arr {\n        if x > 0 {\n            sol.push(x);\n\
    \        }\n    }\n    sol.sort_by(|a, b| {\n        let a_ones = a.count_ones();\n\
    \        let b_ones = b.count_ones();\n        if a_ones < b_ones {\n        \
    \    return Ordering::Less;\n        } else if a_ones > b_ones {\n           \
    \ return Ordering::Greater;\n        } else {\n            return a.cmp(b);\n\
    \        }\n    });\n    return sol;\n}\n\nfn main() {\n    let candidate = sort_array;\n\
    \    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2,\
    \ -3, -4, -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1,\
    \ 0, 2, 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Ordering`\n  -->\
    \ /tmp/tmpr7irnuiu.rs:16:20\n   |\n16 |             return Ordering::Less;\n \
    \  |                    ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `Ordering`\n  --> /tmp/tmpr7irnuiu.rs:18:20\n\
    \   |\n18 |             return Ordering::Greater;\n   |                    ^^^^^^^^\
    \ use of undeclared type `Ordering`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659822462
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    arr.iter()\n\
    \        .map(|x| (x, format!(\"{:b}\", x)))\n        .map(|(x, s)| (x, s.chars().filter(|&x|\
    \ x == '1').count()))\n        .sorted_by(|&(_, a), &(_, b)| a.cmp(&b).then(a.cmp(&b)))\n\
    \        .into_iter()\n        .map(|(x, _)| *x)\n        .collect()\n}\n\nfn\
    \ main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted_by` found for struct `Map` in the\
    \ current scope\n --> /tmp/tmpgken7vkv.rs:9:10\n  |\n9 |         .sorted_by(|&(_,\
    \ a), &(_, b)| a.cmp(&b).then(a.cmp(&b)))\n  |          ^^^^^^^^^ method not found\
    \ in `Map<Map<std::slice::Iter<'_, isize>, [closure@/tmp/tmpgken7vkv.rs:7:14:\
    \ 7:41]>, [closure@/tmp/tmpgken7vkv.rs:8:14: 8:67]>`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659822462
- exit_code: 1
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut arr\
    \ = arr;\n    arr.sort_by(|a, b| count_ones(*a).cmp(&count_ones(*b)).then(a.cmp(b)));\n\
    \    arr\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `count_ones` in this scope\n --> /tmp/tmp_09j5w_d.rs:7:24\n\
    \  |\n7 |     arr.sort_by(|a, b| count_ones(*a).cmp(&count_ones(*b)).then(a.cmp(b)));\n\
    \  |                        ^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `count_ones` in this scope\n --> /tmp/tmp_09j5w_d.rs:7:44\n\
    \  |\n7 |     arr.sort_by(|a, b| count_ones(*a).cmp(&count_ones(*b)).then(a.cmp(b)));\n\
    \  |                                            ^^^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822460
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let mut temp\
    \ = arr.clone();\n    temp.sort_by(|a, b| {\n        a.count_ones().cmp(&b.count_ones()).then(a.cmp(b))\n\
    \    });\n    temp\n}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
    \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
    \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2,\
    \ 3, 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7,\
    \ 2, 3, 4]), vec![2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3,\
    \ 6, 44, 12, 32, 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8, 16, 32]), vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-6, -4, -5, -3, -2]`,\n right: `[-4, -2, -6, -5, -3]`', /tmp/tmp8x2e8kxq.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822463
- exit_code: 101
  program: "/// In this Kata, you have to sort an array of non-negative integers according\
    \ to\n/// number of ones in their binary representation in ascending order.\n\
    /// For similar number of ones, sort based on decimal value.\n/// It must be implemented\
    \ like this:\nfn sort_array(arr: Vec<isize>) -> Vec<isize> {\n    let (mut ones,\
    \ mut zeros): (Vec<isize>, Vec<isize>) =\n        arr.into_iter().partition(|&x|\
    \ x.count_ones() & 1 == 1);\n    ones.sort_by_key(|&x| x.count_ones());\n    zeros.sort_by_key(|&x|\
    \ x.count_ones());\n    ones.extend(zeros);\n    ones\n}\n\nfn main() {\n    let\
    \ candidate = sort_array;\n    assert_eq!(candidate(vec![1, 5, 2, 3, 4]), vec![1,\
    \ 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4, -5, -6]), vec![-4,\
    \ -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3, 4]), vec![0, 1,\
    \ 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32,\
    \ 5]), vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16,\
    \ 32]), vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
    \ vec![2, 4, 8, 16, 32]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 4, 5, 3]`,\n right: `[1, 2, 4, 3, 5]`', /tmp/tmpzcgq_pxg.rs:16:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822463
