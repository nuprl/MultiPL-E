language: rs
name: HumanEval_131_digits
results:
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    n.to_string().chars().filter(|x|\
    \ x.to_digit(10).unwrap() % 2 == 1).map(|x| x.to_digit(10).unwrap() as isize).product()\n\
    }\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmprb6dwwih.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822486
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    if n == 0\
    \ {\n        return 0;\n    }\n\n    let mut sum = 1;\n    let mut rem = n;\n\
    \    while rem > 0 {\n        let digit = rem % 10;\n        if digit % 2 != 0\
    \ {\n            sum *= digit;\n        }\n        rem /= 10;\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp0xdqv119.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822486
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut tmp\
    \ = n;\n    let mut res = 1;\n    while tmp > 0 {\n        let remain = tmp %\
    \ 10;\n        if remain % 2 != 0 {\n            res *= remain;\n        }\n \
    \       tmp /= 10;\n    }\n    return res;\n}\n\nfn main() {\n    let candidate\
    \ = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n\
    \    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n   \
    \ assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmplznw9qv5.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822486
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    n.to_string().chars().filter(|&c|\
    \ c.is_digit(10) && c.to_digit(10).unwrap() % 2 == 1).map(|c| c.to_digit(10).unwrap()\
    \ as isize).product()\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpfxxagque.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822486
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut num\
    \ = n;\n    let mut result = 1;\n    while num > 0 {\n        let digit = num\
    \ % 10;\n        if digit % 2 != 0 {\n            result *= digit;\n        }\n\
    \        num /= 10;\n    }\n    result\n}\n\nfn main() {\n    let candidate =\
    \ digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n\
    \    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n   \
    \ assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp6dza1bon.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822486
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut result\
    \ = 1;\n    for c in n.to_string().chars() {\n        let digit = c.to_digit(10).unwrap();\n\
    \        if digit % 2 == 1 {\n            result *= digit as isize;\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpjcy_rftr.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822486
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut odd_prod\
    \ = 1;\n    let mut nn = n;\n    while nn > 0 {\n        let d = nn % 10;\n  \
    \      if d % 2 == 1 {\n            odd_prod *= d;\n        }\n        nn /= 10;\n\
    \    }\n    odd_prod\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp6gbj9k7d.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822486
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut prod\
    \ = 1;\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n \
    \       if digit % 2 == 1 {\n            prod *= digit;\n        }\n        n\
    \ /= 10;\n    }\n    prod\n}\n\nfn main() {\n    let candidate = digits;\n   \
    \ assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120),\
    \ 1);\n    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpbwq5bjvc.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822486
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    n.to_string().chars().map(|d|\
    \ d.to_digit(10).unwrap() as isize).filter(|d| d % 2 == 1).product()\n}\n\nfn\
    \ main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n  \
    \  assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp4j7irpuw.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822486
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut total\
    \ = 1;\n    for c in n.to_string().chars() {\n        let d = c.to_digit(10).unwrap();\n\
    \        if d % 2 == 1 {\n            total *= d as isize;\n        }\n    }\n\
    \    return total;\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpqyd40s2c.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822486
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut rem\
    \ = n;\n    let mut prod = 1;\n    while rem > 0 {\n        let digit = rem %\
    \ 10;\n        if digit % 2 == 1 {\n            prod *= digit;\n        }\n  \
    \      rem /= 10;\n    }\n    prod\n}\n\nfn main() {\n    let candidate = digits;\n\
    \    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120),\
    \ 1);\n    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpmfa3shdf.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822486
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    n.to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap() as isize).filter(|x| x % 2 == 1).product()\n}\n\nfn\
    \ main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n  \
    \  assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp1hdg523i.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822486
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut digits\
    \ = n.to_string().chars().collect::<Vec<char>>();\n    let mut product = 1;\n\
    \    for i in 0..digits.len() {\n        let c = digits[i].to_string().parse::<isize>().unwrap();\n\
    \        if c % 2 == 1 {\n            product *= c;\n        }\n    }\n    product\n\
    }\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpqdc5k9tb.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822486
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    n.to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap() as isize).fold(1, |acc, cur| {\n        if cur % 2 ==\
    \ 0 {\n            acc\n        } else {\n            acc * cur\n        }\n \
    \   })\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpgp4uz9ai.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822486
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    // Your code\
    \ here\n    let s: String = n.to_string();\n    let mut product: isize = 1;\n\
    \    for c in s.chars() {\n        let d: isize = c.to_digit(10).unwrap() as isize;\n\
    \        if d % 2 == 1 {\n            product *= d;\n        }\n    }\n    product\n\
    }\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpmewqi_pu.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822486
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut result\
    \ = 1;\n    let mut i = n;\n    while i > 0 {\n        let digit = i % 10;\n \
    \       if digit % 2 == 1 {\n            result *= digit;\n        }\n       \
    \ i /= 10;\n    }\n    result\n}\n\nfn main() {\n    let candidate = digits;\n\
    \    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120),\
    \ 1);\n    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp9oaat5qn.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822486
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut odd\
    \ = 1;\n    let mut even = 0;\n    let mut x = n;\n    while x > 0 {\n       \
    \ let y = x % 10;\n        if y % 2 == 0 {\n            even += 1;\n        }\
    \ else {\n            odd *= y;\n        }\n        x /= 10;\n    }\n    if even\
    \ == 0 {\n        odd\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let\
    \ candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmp_1la21mp.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822486
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut digits\
    \ = Vec::new();\n    let mut n = n;\n    while n > 0 {\n        digits.push(n\
    \ % 10);\n        n /= 10;\n    }\n    digits.iter().fold(1, |acc, x| match x\
    \ % 2 {\n        0 => acc,\n        _ => acc * x,\n    })\n}\n\nfn main() {\n\
    \    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpbypwzw9t.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822486
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut s\
    \ = String::new();\n    s.push_str(&n.to_string());\n    s.chars().map(|c| c.to_digit(10).unwrap()\
    \ as isize).filter(|x| *x % 2 != 0).product()\n}\n\nfn main() {\n    let candidate\
    \ = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n\
    \    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n   \
    \ assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp9f3cr4vr.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822486
- exit_code: 0
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    if n < 10\
    \ {\n        if n % 2 == 1 {\n            return n;\n        } else {\n      \
    \      return 0;\n        }\n    } else {\n        let last_digit = n % 10;\n\
    \        if last_digit % 2 == 1 {\n            return last_digit * digits(n /\
    \ 10);\n        } else {\n            return digits(n / 10);\n        }\n    }\n\
    }\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822486
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut product\
    \ = 1;\n    for c in n.to_string().chars() {\n        let n = c.to_digit(10).unwrap()\
    \ as isize;\n        if n % 2 == 1 {\n            product *= n;\n        }\n \
    \   }\n    product\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpgpjx2llr.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822486
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut n\
    \ = n;\n    let mut total = 1;\n    while n > 0 {\n        let digit = n % 10;\n\
    \        if digit % 2 == 1 {\n            total *= digit;\n        }\n       \
    \ n /= 10;\n    }\n    return total;\n}\n\nfn main() {\n    let candidate = digits;\n\
    \    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120),\
    \ 1);\n    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp9dwqeyeu.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822486
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    // Iterate\
    \ through all digits of `n` and find the product\n    let mut product = 1;\n \
    \   let mut rem = n;\n    while rem > 0 {\n        // Find the current digit by\
    \ dividing `rem` by 10,\n        // and then multiplying it by 10 to get rid of\
    \ the\n        // remainder\n        let digit = rem % 10;\n        rem = rem\
    \ / 10;\n        // Check if `digit` is even, and if it is,\n        // return\
    \ 0\n        if digit % 2 == 0 {\n            return 0;\n        }\n        //\
    \ If `digit` is odd, multiply it by\n        // `product`\n        product *=\
    \ digit;\n    }\n    // Return the product\n    product\n}\n\nfn main() {\n  \
    \  let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmpig_cjb65.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822486
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    match n {\n\
    \        0 => 0,\n        x => {\n            let (m, r) = (x / 10, x % 10);\n\
    \            match r {\n                0 => digits(m),\n                x =>\
    \ x * digits(m),\n            }\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n\
    \    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n   \
    \ assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmpspwo6rks.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822487
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut res\
    \ = 1;\n    let n = n.abs();\n    for c in n.to_string().chars() {\n        let\
    \ digit = c.to_digit(10).unwrap() as isize;\n        if digit % 2 == 1 {\n   \
    \         res *= digit;\n        }\n    }\n    res\n}\n\nfn main() {\n    let\
    \ candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpa8j5rgoi.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822487
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    if n == 0\
    \ {\n        return 0;\n    }\n    let digit = n % 10;\n    if digit % 2 == 0\
    \ {\n        return digits(n / 10);\n    }\n    return digit * digits(n / 10);\n\
    }\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmpypui7v6j.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822487
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut s\
    \ = n.to_string();\n    let mut i = 0;\n    for digit in s.chars() {\n       \
    \ if digit.to_digit(10).unwrap() % 2 == 0 {\n            s.remove(i);\n      \
    \  }\n        i += 1;\n    }\n    if s.len() == 0 {\n        return 0;\n    }\n\
    \    let mut int = s.parse::<isize>().unwrap();\n    let mut prod = 1;\n    while\
    \ int > 0 {\n        prod *= int % 10;\n        int /= 10;\n    }\n    prod\n\
    }\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0502]: cannot borrow `s` as mutable because it is also borrowed\
    \ as immutable\n  --> /tmp/tmp6hsvd57y.rs:13:13\n   |\n11 |     for digit in s.chars()\
    \ {\n   |                  ---------\n   |                  |\n   |          \
    \        immutable borrow occurs here\n   |                  immutable borrow\
    \ later used here\n12 |         if digit.to_digit(10).unwrap() % 2 == 0 {\n13\
    \ |             s.remove(i);\n   |             ^^^^^^^^^^^ mutable borrow occurs\
    \ here\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1659822486
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut ans\
    \ = 1;\n    let mut m = n;\n    while m > 0 {\n        let d = m % 10;\n     \
    \   if d % 2 == 1 {\n            ans *= d;\n        }\n        m /= 10;\n    }\n\
    \    ans\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp0jdja1h4.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822487
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n  let mut count\
    \ = 1;\n  let mut y = n;\n  while y != 0 {\n    if y % 2 != 0 {\n      count *=\
    \ y % 10;\n    }\n    y /= 10;\n  }\n  count\n}\n\nfn main() {\n    let candidate\
    \ = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n\
    \    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n   \
    \ assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmprbkpy5xe.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822487
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut odd_product\
    \ = 1;\n    let mut digit = 0;\n    let mut temp = n;\n    while temp > 0 {\n\
    \        digit = temp % 10;\n        if digit % 2 != 0 {\n            odd_product\
    \ *= digit;\n        }\n        temp /= 10;\n    }\n    odd_product\n}\n\nfn main()\
    \ {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpcok_woqt.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822487
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    n.to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap() as isize).filter(|&c| c % 2 == 1).product()\n}\n\nfn\
    \ main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n  \
    \  assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp66bdsxab.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822487
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    n.to_string().chars().map(|d|\
    \ d.to_digit(10).unwrap() as isize).filter(|&n| n % 2 == 1).product()\n}\n\nfn\
    \ main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n  \
    \  assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpgkhv6n_7.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822487
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    n.to_string().chars().map(|x|\
    \ x.to_digit(10).unwrap() as isize).filter(|x| x % 2 != 0).product()\n}\n\nfn\
    \ main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n  \
    \  assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpfs5fwzg8.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822487
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut odd\
    \ = 1;\n    let mut num = n;\n    while num > 0 {\n        let cur = num % 10;\n\
    \        if cur % 2 == 1 {\n            odd *= cur;\n        }\n        num /=\
    \ 10;\n    }\n    odd\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpvszxx9q4.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822487
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut product\
    \ = 1;\n    let mut num = n;\n    while num > 0 {\n        let digit = num % 10;\n\
    \        if digit % 2 == 1 {\n            product *= digit;\n        }\n     \
    \   num /= 10;\n    }\n    product\n}\n\nfn main() {\n    let candidate = digits;\n\
    \    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120),\
    \ 1);\n    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmph3px0vrq.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822487
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    n.to_string().chars().filter(|c|\
    \ c.to_digit(10).unwrap() % 2 == 1).fold(1, |acc, val| acc * val.to_digit(10).unwrap()\
    \ as isize)\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpcwuwbbe_.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822487
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut n\
    \ = n;\n    let mut ans = 1;\n    while n > 0 {\n        let d = n % 10;\n   \
    \     if d % 2 == 1 {\n            ans *= d;\n        }\n        n /= 10;\n  \
    \  }\n    ans\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp5pz80ysw.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822487
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    // your code\
    \ goes here\n    return 0;\n}\n\nfn main() {\n    let candidate = digits;\n  \
    \  assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120),\
    \ 1);\n    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmpbk27twol.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822487
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut product\
    \ = 1;\n    for digit in n.to_string().chars() {\n        let digit = digit.to_digit(10).unwrap()\
    \ as isize;\n        if digit % 2 == 1 {\n            product *= digit;\n    \
    \    }\n    }\n    return product;\n}\n\nfn main() {\n    let candidate = digits;\n\
    \    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120),\
    \ 1);\n    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpy7i4nk1l.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822487
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut result\
    \ = 1;\n    let mut m = n;\n    while m > 0 {\n        let r = m % 10;\n     \
    \   if r % 2 == 1 {\n            result *= r;\n        }\n        m /= 10;\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp25v3o165.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822487
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    match n {\n\
    \        0 => return 0,\n        _ => {\n            let mut digits = Vec::new();\n\
    \            let mut n = n;\n            while n > 0 {\n                digits.push(n\
    \ % 10);\n                n /= 10;\n            }\n            digits.iter().fold(1,\
    \ |acc, x| {\n                if *x % 2 == 0 {\n                    acc\n    \
    \            } else {\n                    acc * x\n                }\n      \
    \      })\n        }\n    }\n}\n\nfn main() {\n    let candidate = digits;\n \
    \   assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120),\
    \ 1);\n    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpt0t_iafu.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822487
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    if n == 0\
    \ {\n        return 0;\n    }\n    let mut n = n;\n    let mut ret = 1;\n    while\
    \ n > 0 {\n        let digit = n % 10;\n        if digit % 2 == 1 {\n        \
    \    ret *= digit;\n        }\n        n /= 10;\n    }\n    ret\n}\n\nfn main()\
    \ {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpmckqi4f9.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822487
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut sum\
    \ = 1;\n    for i in n.to_string().split(\"\") {\n        if i.parse::<isize>().unwrap()\
    \ % 2 != 0 {\n            sum *= i.parse::<isize>().unwrap();\n        }\n   \
    \ }\n    sum\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Result::unwrap()` on an `Err` value:
    ParseIntError { kind: Empty }'', /tmp/tmp_ry6n6n0.rs:11:31

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822487
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    if n == 0\
    \ {\n        return 0;\n    }\n    let r = n % 10;\n    if r % 2 == 0 {\n    \
    \    return digits(n / 10);\n    }\n    return r * digits(n / 10);\n}\n\nfn main()\
    \ {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmpmisf1fwc.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822487
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut n\
    \ = n;\n    let mut product = 1;\n    while n > 0 {\n        let digit = n % 10;\n\
    \        if digit % 2 == 1 {\n            product *= digit;\n        }\n     \
    \   n /= 10;\n    }\n    product\n}\n\nfn main() {\n    let candidate = digits;\n\
    \    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120),\
    \ 1);\n    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp91la4cyi.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822487
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut n\
    \ = n;\n    let mut prod = 1;\n    while n > 0 {\n        let d = n % 10;\n  \
    \      if d % 2 == 1 {\n            prod *= d;\n        }\n        n /= 10;\n\
    \    }\n    prod\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpbcf94bqa.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822487
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    if n == 0\
    \ { return 0; }\n    let (d, m) = (n % 10, n / 10);\n    let ds = if d % 2 ==\
    \ 0 { 0 } else { d };\n    return ds * digits(m);\n}\n\nfn main() {\n    let candidate\
    \ = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n\
    \    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n   \
    \ assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmpik7hix6t.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822487
- exit_code: 0
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    if n < 10\
    \ {\n        if n % 2 == 1 {\n            return n;\n        } else {\n      \
    \      return 0;\n        }\n    }\n    let last_digit = n % 10;\n    if last_digit\
    \ % 2 == 1 {\n        return last_digit * digits(n / 10);\n    } else {\n    \
    \    return digits(n / 10);\n    }\n}\n\nfn main() {\n    let candidate = digits;\n\
    \    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120),\
    \ 1);\n    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822487
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut odd_digits\
    \ = Vec::new();\n    let mut mut_n = n;\n    while mut_n > 0 {\n        let digit\
    \ = mut_n % 10;\n        if digit % 2 != 0 {\n            odd_digits.push(digit);\n\
    \        }\n        mut_n /= 10;\n    }\n    let mut product = 1;\n    for &digit\
    \ in odd_digits.iter() {\n        product *= digit;\n    }\n    return product;\n\
    }\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpngoz_l0a.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822487
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    n.to_string().chars().filter(|x|\
    \ x.to_digit(10).unwrap() % 2 == 1).map(|x| x.to_digit(10).unwrap() as isize).product()\n\
    }\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmprb6dwwih.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822486
- exit_code: 0
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let digit\
    \ = n % 10;\n    let base = n / 10;\n    if base == 0 {\n        if digit % 2\
    \ == 1 {\n            digit\n        } else {\n            0\n        }\n    }\
    \ else {\n        let base_prod = digits(base);\n        if digit % 2 == 1 {\n\
    \            digit * base_prod\n        } else {\n            base_prod\n    \
    \    }\n    }\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822487
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut retval\
    \ = 1;\n    let mut n = n;\n    while n > 0 {\n        let d = n % 10;\n     \
    \   if d % 2 == 1 {\n            retval *= d;\n        }\n        n /= 10;\n \
    \   }\n    retval\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp7oa_xnh7.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822487
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut n\
    \ = n;\n    let mut result = 1;\n    while n > 0 {\n        let digit = n % 10;\n\
    \        if digit % 2 == 1 {\n            result *= digit;\n        }\n      \
    \  n /= 10;\n    }\n    result\n}\n\nfn main() {\n    let candidate = digits;\n\
    \    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120),\
    \ 1);\n    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp_0e7sl4u.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822487
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut result\
    \ = 1;\n    for c in n.to_string().chars() {\n        let digit = c.to_digit(10).unwrap()\
    \ as isize;\n        if digit % 2 == 1 {\n            result *= digit;\n     \
    \   }\n    }\n    result\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpu8oms9ro.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822487
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    if n < 0 {\n\
    \        return 0;\n    }\n    let mut product = 1;\n    let mut temp = n;\n \
    \   while temp > 0 {\n        let dig = temp % 10;\n        if dig % 2 != 0 {\n\
    \            product *= dig;\n        }\n        temp /= 10;\n    }\n    return\
    \ product;\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpes22q_hb.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822487
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut result\
    \ = 1;\n    let mut num = n;\n    while num > 0 {\n        let digit = num % 10;\n\
    \        if digit % 2 == 1 {\n            result *= digit;\n        }\n      \
    \  num /= 10;\n    }\n    result\n}\n\nfn main() {\n    let candidate = digits;\n\
    \    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120),\
    \ 1);\n    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp76v492gr.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822487
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    if n == 0\
    \ {\n        return 0;\n    }\n    let mut n = n;\n    let mut prod = 1;\n   \
    \ while n > 0 {\n        let digit = n % 10;\n        if digit % 2 == 1 {\n  \
    \          prod *= digit;\n        }\n        n /= 10;\n    }\n    prod\n}\n\n\
    fn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n \
    \   assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpwbj2anm8.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822487
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut product\
    \ = 1;\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n \
    \       if digit % 2 == 1 {\n            product *= digit;\n        }\n      \
    \  n /= 10;\n    }\n    product\n}\n\nfn main() {\n    let candidate = digits;\n\
    \    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120),\
    \ 1);\n    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmptiahacjo.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822487
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    n.to_string().chars().map(|x|\
    \ x.to_digit(10).unwrap() as isize).fold(1, |acc, x| {\n        if x % 2 == 0\
    \ {\n            acc\n        } else {\n            acc * x\n        }\n    })\n\
    }\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpxy95o9tk.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822487
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut m\
    \ = n;\n    let mut prod = 1;\n    while m > 0 {\n        let digit = m % 10;\n\
    \        if digit % 2 == 1 {\n            prod *= digit;\n        }\n        m\
    \ /= 10;\n    }\n    prod\n}\n\nfn main() {\n    let candidate = digits;\n   \
    \ assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120),\
    \ 1);\n    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp7ijx6_p8.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822487
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut prod\
    \ = 1;\n    for c in n.to_string().chars() {\n        let number = c.to_digit(10).unwrap()\
    \ as isize;\n        if number % 2 == 1 {\n            prod *= number;\n     \
    \   }\n    }\n    prod\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp6pies9a8.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822487
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut digits\
    \ = String::new();\n    let mut n = n;\n    while n > 0 {\n        digits.push(((n\
    \ % 10) as u8 + b'0') as char);\n        n /= 10;\n    }\n    // println!(\"{}\"\
    , digits);\n    let mut total = 1;\n    for d in digits.chars() {\n        if\
    \ d.to_digit(10).unwrap() % 2 == 1 {\n            total *= d.to_digit(10).unwrap();\n\
    \        }\n    }\n    return total;\n}\n\nfn main() {\n    let candidate = digits;\n\
    \    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120),\
    \ 1);\n    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4eenua34.rs:22:12\n   |\n\
    8  | fn digits(n: isize) -> isize {\n   |                        ----- expected\
    \ `isize` because of return type\n...\n22 |     return total;\n   |          \
    \  ^^^^^ expected `isize`, found `u32`\n   |\nhelp: you can convert a `u32` to\
    \ an `isize` and panic if the converted value doesn't fit\n   |\n22 |     return\
    \ total.try_into().unwrap();\n   |            ~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822487
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut digits\
    \ = n;\n    let mut product = 1;\n    while digits > 0 {\n        let last_digit\
    \ = digits % 10;\n        if last_digit % 2 != 0 {\n            product *= last_digit;\n\
    \        }\n        digits /= 10;\n    }\n    return product;\n}\n\nfn main()\
    \ {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpsjxk_062.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822487
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut product\
    \ = 1;\n    for digit in n.to_string().chars() {\n        let digit = digit.to_digit(10).unwrap()\
    \ as isize;\n        if digit % 2 == 1 {\n            product *= digit;\n    \
    \    }\n    }\n    product\n}\n\nfn main() {\n    let candidate = digits;\n  \
    \  assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120),\
    \ 1);\n    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpd_2ewq7c.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822487
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut product\
    \ = 1;\n    for c in n.to_string().chars() {\n        let d = c.to_digit(10).unwrap();\n\
    \        if d % 2 == 1 {\n            product *= d as isize;\n        }\n    }\n\
    \    product\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp8tblpp6j.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822487
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut result\
    \ = 1;\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n \
    \       if digit % 2 == 1 {\n            result *= digit;\n        }\n       \
    \ n /= 10;\n    }\n    result\n}\n\nfn main() {\n    let candidate = digits;\n\
    \    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120),\
    \ 1);\n    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp4prkh5rj.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822487
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    if n == 0\
    \ {\n        return 0;\n    }\n\n    let mut d = 0;\n    let mut m = 1;\n    let\
    \ mut n = n;\n    while n > 0 {\n        let d = n % 10;\n        if d % 2 ==\
    \ 1 {\n            m *= d;\n        }\n        n /= 10;\n    }\n    m\n}\n\nfn\
    \ main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n  \
    \  assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp9ns46ohc.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822487
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut prod\
    \ = 1;\n    for i in n.to_string().chars() {\n        let digit = i.to_digit(10).unwrap();\n\
    \        if digit % 2 == 1 {\n            prod *= digit as isize;\n        }\n\
    \    }\n    prod\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpy7w_jxpd.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822487
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmprjh3rxu9.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822487
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut odd_product\
    \ = 1;\n    for c in n.to_string().chars() {\n        let digit = c.to_digit(10).unwrap()\
    \ as isize;\n        if digit % 2 == 1 {\n            odd_product *= digit;\n\
    \        }\n    }\n    return odd_product;\n}\n\nfn main() {\n    let candidate\
    \ = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n\
    \    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n   \
    \ assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpzz_h5voz.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822487
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    if n == 0\
    \ {\n        return 0;\n    }\n    if n % 2 == 0 {\n        return digits(n /\
    \ 10);\n    }\n    (n % 10) * digits(n / 10)\n}\n\nfn main() {\n    let candidate\
    \ = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n\
    \    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n   \
    \ assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmpiqwkesh7.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822487
- exit_code: 0
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut n\
    \ = n;\n    let mut digits = vec![];\n    while n != 0 {\n        digits.push(n\
    \ % 10);\n        n /= 10;\n    }\n    if digits.iter().all(|&n| n % 2 == 0) {\n\
    \        return 0;\n    }\n    digits.iter().filter(|&n| n % 2 != 0).product()\n\
    }\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822487
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut digits:\
    \ Vec<isize> = Vec::new();\n    let mut n = n;\n    let mut product = 1;\n   \
    \ while n != 0 {\n        digits.push(n % 10);\n        n /= 10;\n    }\n    digits.reverse();\n\
    \    for digit in digits {\n        if digit % 2 != 0 {\n            product *=\
    \ digit;\n        }\n    }\n    product\n}\n\nfn main() {\n    let candidate =\
    \ digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n\
    \    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n   \
    \ assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpfmutymn1.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822487
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut m\
    \ = n;\n    let mut product = 1;\n    while m > 0 {\n        let digit = m % 10;\n\
    \        if digit % 2 == 1 {\n            product *= digit;\n        }\n     \
    \   m /= 10;\n    }\n    product\n}\n\nfn main() {\n    let candidate = digits;\n\
    \    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120),\
    \ 1);\n    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp_iwfsckp.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822487
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut total\
    \ = 1;\n    for digit in n.to_string().chars() {\n        let curr_digit = digit.to_digit(10).unwrap()\
    \ as isize;\n        if curr_digit % 2 == 1 {\n            total *= curr_digit;\n\
    \        }\n    }\n    return total;\n}\n\nfn main() {\n    let candidate = digits;\n\
    \    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120),\
    \ 1);\n    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp44i4vhw_.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822487
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    if n / 10\
    \ == 0 {\n        if n % 2 == 1 {\n            return n;\n        } else {\n \
    \           return 0;\n        }\n    } else {\n        if n % 2 == 1 {\n    \
    \        return digits(n / 10) * n;\n        } else {\n            return digits(n\
    \ / 10);\n        }\n    }\n}\n\nfn main() {\n    let candidate = digits;\n  \
    \  assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120),\
    \ 1);\n    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2505`,\n right: `5`', /tmp/tmphzmjvqdg.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822487
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    // let mut\
    \ prod = 1;\n    // let mut m = n;\n    // while m > 0 {\n    //     let digit\
    \ = m % 10;\n    //     if digit % 2 == 1 {\n    //         prod *= digit;\n \
    \   //     }\n    //     m /= 10;\n    // }\n    // prod\n    let mut prod = 1;\n\
    \    for digit in n.to_string().chars() {\n        let digit = digit.to_digit(10).unwrap()\
    \ as isize;\n        if digit % 2 == 1 {\n            prod *= digit;\n       \
    \ }\n    }\n    prod\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpkrdkau20.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822487
- exit_code: 0
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    if n < 10\
    \ {\n        if n % 2 == 1 {\n            return n;\n        } else {\n      \
    \      return 0;\n        }\n    }\n    else {\n        if n % 2 == 1 {\n    \
    \        return n % 10 * digits(n / 10);\n        } else {\n            return\
    \ digits(n / 10);\n        }\n    }\n}\n\nfn main() {\n    let candidate = digits;\n\
    \    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120),\
    \ 1);\n    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822487
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut product\
    \ = 1;\n    for i in n.to_string().chars() {\n        if i.to_digit(10).unwrap()\
    \ % 2 == 1 {\n            product *= i.to_digit(10).unwrap() as isize;\n     \
    \   }\n    }\n    product\n}\n\nfn main() {\n    let candidate = digits;\n   \
    \ assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120),\
    \ 1);\n    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpcf_ak4u6.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822487
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut res\
    \ = 1;\n    let mut n = n;\n    while n > 0 {\n        let dig = n % 10;\n   \
    \     if dig % 2 == 1 {\n            res *= dig;\n        }\n        n /= 10;\n\
    \    }\n    res\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp5n37c14u.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822487
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut product\
    \ = 1;\n    let mut number = n;\n    while number > 0 {\n        let digit = number\
    \ % 10;\n        if digit % 2 != 0 {\n            product *= digit;\n        }\n\
    \        number /= 10;\n    }\n    product\n}\n\nfn main() {\n    let candidate\
    \ = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n\
    \    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n   \
    \ assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpuz_6ng4o.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822487
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    n.to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap() as isize).filter(|d| d%2 == 1).product()\n}\n\nfn main()\
    \ {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpzbh03igu.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822487
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut answer\
    \ = 1;\n    let mut temp = n;\n    while temp > 0 {\n        let digit = temp\
    \ % 10;\n        if digit % 2 != 0 {\n            answer *= digit;\n        }\n\
    \        temp /= 10;\n    }\n    answer\n}\n\nfn main() {\n    let candidate =\
    \ digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n\
    \    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n   \
    \ assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmptg6z5fzl.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822487
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut digits:\
    \ Vec<isize> = Vec::new();\n    let mut n = n;\n    while n > 0 {\n        digits.push(n\
    \ % 10);\n        n /= 10;\n    }\n    digits.iter().fold(1, |acc, x| if *x %\
    \ 2 == 1 { acc * x } else { acc })\n}\n\nfn main() {\n    let candidate = digits;\n\
    \    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120),\
    \ 1);\n    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp6qmmh9np.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822488
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    // Your code\
    \ here!\n    n\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `5`', /tmp/tmpxc3o7h_h.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822488
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut prod\
    \ = 1;\n    for x in n.to_string().chars() {\n        let digit = x.to_digit(10).unwrap();\n\
    \        if digit % 2 == 1 {\n            prod *= digit as isize;\n        }\n\
    \    }\n    prod\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpxmlenk5w.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822488
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut sum\
    \ = 1;\n    for num in n.to_string().chars() {\n        match num.to_digit(10)\
    \ {\n            Some(x) => {\n                if x % 2 != 0 {\n             \
    \       sum *= x;\n                }\n            }\n            None => return\
    \ 0,\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = digits;\n\
    \    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120),\
    \ 1);\n    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptjvxy4hk.rs:20:5\n   |\n\
    8  | fn digits(n: isize) -> isize {\n   |                        ----- expected\
    \ `isize` because of return type\n...\n20 |     sum\n   |     ^^^ expected `isize`,\
    \ found `u32`\n   |\nhelp: you can convert a `u32` to an `isize` and panic if\
    \ the converted value doesn't fit\n   |\n20 |     sum.try_into().unwrap()\n  \
    \ |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822487
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut product\
    \ = 1;\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n \
    \       if digit % 2 == 1 {\n            product *= digit;\n        }\n      \
    \  n /= 10;\n    }\n    product\n}\n\nfn main() {\n    let candidate = digits;\n\
    \    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120),\
    \ 1);\n    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmptiahacjo.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822487
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut product\
    \ = 1;\n    for digit in n.to_string().chars() {\n        if digit.to_digit(10).unwrap()\
    \ % 2 == 1 {\n            product *= digit.to_digit(10).unwrap() as isize;\n \
    \       }\n    }\n    product\n}\n\nfn main() {\n    let candidate = digits;\n\
    \    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120),\
    \ 1);\n    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp4m5frd2b.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822488
- exit_code: 0
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut prod\
    \ = 1;\n    let mut prod_check = 0;\n    for digit in n.to_string().chars() {\n\
    \        let digit_to_int = digit.to_digit(10).unwrap() as isize;\n        if\
    \ digit_to_int % 2 == 1 {\n            prod *= digit_to_int;\n            prod_check\
    \ += 1;\n        }\n    }\n    if prod_check == 0 {\n        return 0;\n    }\n\
    \    prod\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822488
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut product\
    \ = 1;\n    for c in n.to_string().chars() {\n        let d = c.to_digit(10).unwrap();\n\
    \        if d % 2 == 1 {\n            product *= d as isize;\n        }\n    }\n\
    \    product\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp8tblpp6j.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822487
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    n.to_string().chars().filter(|x|\
    \ x.to_digit(10).unwrap() % 2 == 1).fold(1, |acc, x| acc * x.to_digit(10).unwrap()\
    \ as isize)\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpgkstmcxo.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822488
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut n\
    \ = n;\n    let mut result = 1;\n    while n > 0 {\n        let d = n % 10;\n\
    \        if d % 2 == 1 {\n            result *= d;\n        }\n        n /= 10;\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpq638w844.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822488
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    if n <= 0\
    \ { return 0 }\n    let mut curr = n;\n    let mut result = 1;\n    while curr\
    \ > 0 {\n        let digit = curr % 10;\n        if digit % 2 == 1 {\n       \
    \     result *= digit;\n        }\n        curr /= 10;\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmptzbeg6bh.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822488
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut sum\
    \ = 1;\n    let mut num = n;\n    while num > 0 {\n        let digit = num % 10;\n\
    \        if digit % 2 != 0 {\n            sum *= digit;\n        }\n        num\
    \ /= 10;\n    }\n    sum\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmppewgjyrt.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822488
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut result\
    \ = 1;\n    for i in n.to_string().chars() {\n        match i.to_digit(10) {\n\
    \            Some(x) => {\n                if x % 2 != 0 {\n                 \
    \   result *= x;\n                }\n            }\n            None => {}\n \
    \       }\n    }\n    result\n}\n\nfn main() {\n    let candidate = digits;\n\
    \    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120),\
    \ 1);\n    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpro67kdt0.rs:20:5\n   |\n\
    8  | fn digits(n: isize) -> isize {\n   |                        ----- expected\
    \ `isize` because of return type\n...\n20 |     result\n   |     ^^^^^^ expected\
    \ `isize`, found `u32`\n   |\nhelp: you can convert a `u32` to an `isize` and\
    \ panic if the converted value doesn't fit\n   |\n20 |     result.try_into().unwrap()\n\
    \   |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822487
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut prod\
    \ = 1;\n    for d in n.to_string().chars() {\n        if d.to_digit(10).unwrap()\
    \ % 2 == 1 {\n            prod *= d.to_digit(10).unwrap() as isize;\n        }\n\
    \    }\n    prod\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpw4uep3bu.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822488
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut product\
    \ = 1;\n    for c in n.to_string().chars() {\n        let num = c.to_digit(10).unwrap()\
    \ as isize;\n        if num % 2 == 1 {\n            product *= num;\n        }\n\
    \    }\n    product\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp__ny0zaj.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822488
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    if n == 0\
    \ {\n        return 0;\n    }\n    let dig = n % 10;\n    if dig % 2 == 0 {\n\
    \        digits(n / 10)\n    } else {\n        dig * digits(n / 10)\n    }\n}\n\
    \nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmp7d_d7gdv.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822488
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    // convert\
    \ to string and get the digits\n    let mut d: Vec<char> = n.to_string().chars().collect();\n\
    \    let mut product: isize = 1;\n    for c in d {\n        let i: isize = c.to_digit(10).unwrap()\
    \ as isize;\n        if i % 2 != 0 {\n            product *= i;\n        }\n \
    \   }\n    product\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpue1lgv3o.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822488
- exit_code: 0
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    if n == 0\
    \ {\n        return 0;\n    }\n    if n % 2 == 0 {\n        return digits(n /\
    \ 10);\n    }\n    let mut prod = 1;\n    let mut n2 = n;\n    while n2 > 0 {\n\
    \        if n2 % 2 == 1 {\n            prod *= n2 % 10;\n        }\n        n2\
    \ /= 10;\n    }\n    prod\n}\n\nfn main() {\n    let candidate = digits;\n   \
    \ assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120),\
    \ 1);\n    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822488
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut product\
    \ = 1;\n    let mut divisor = 10;\n    let mut quotient = n;\n    while quotient\
    \ > 0 {\n        let mut remainder = quotient % divisor;\n        quotient = quotient\
    \ / divisor;\n        if remainder % 2 != 0 {\n            product *= remainder;\n\
    \        }\n    }\n    product\n}\n\nfn main() {\n    let candidate = digits;\n\
    \    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120),\
    \ 1);\n    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpu1od_3eq.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822488
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    if n == 0\
    \ {\n        return 0;\n    }\n\n    let mut n = n;\n    let mut product = 1;\n\
    \    while n > 0 {\n        let digit = n % 10;\n        if digit % 2 == 1 {\n\
    \            product *= digit;\n        }\n        n /= 10;\n    }\n    product\n\
    }\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpjztvofzp.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822488
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    if n == 0\
    \ {\n        return 0;\n    }\n\n    let mut sum = 1;\n    let mut n = n;\n  \
    \  while n > 0 {\n        let digit = n % 10;\n        if digit % 2 == 1 {\n \
    \           sum *= digit;\n        }\n        n /= 10;\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n \
    \   assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpvfcnrfq8.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822488
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut number\
    \ = n;\n    let mut res = 1;\n    while number > 0 {\n        let digit = number\
    \ % 10;\n        if digit % 2 != 0 {\n            res *= digit;\n        }\n \
    \       number /= 10;\n    }\n    return res;\n}\n\nfn main() {\n    let candidate\
    \ = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n\
    \    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n   \
    \ assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp124ut96i.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822488
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    // TODO\n\
    \    0\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmp9ra_9w4s.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822488
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut prod\
    \ = 1;\n    let mut to_check = n;\n    while to_check > 0 {\n        let digit\
    \ = to_check % 10;\n        if digit % 2 == 1 {\n            prod *= digit;\n\
    \        }\n        to_check /= 10;\n    }\n    prod\n}\n\nfn main() {\n    let\
    \ candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpghrxzzi9.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822488
- exit_code: 0
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    // Base case\n\
    \    if n < 10 {\n        if n % 2 == 1 {\n            return n;\n        } else\
    \ {\n            return 0;\n        }\n    }\n\n    // Recursive case\n    let\
    \ d = n % 10;\n    if d % 2 == 1 {\n        return d * digits(n / 10);\n    }\
    \ else {\n        return digits(n / 10);\n    }\n}\n\nfn main() {\n    let candidate\
    \ = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n\
    \    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n   \
    \ assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822488
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut product\
    \ = 1;\n    for c in n.to_string().chars() {\n        let mut d = c.to_digit(10).unwrap()\
    \ as isize;\n        if d % 2 == 1 {\n            product *= d;\n        }\n \
    \   }\n    product\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpw5wyesfc.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822488
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut result\
    \ = 1;\n    let mut x = n;\n    while x > 0 {\n        let d = x % 10;\n     \
    \   if d % 2 == 1 {\n            result *= d;\n        }\n        x /= 10;\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpmd63sje4.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822488
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut x\
    \ = n;\n    let mut product = 1;\n    while x > 0 {\n        let digit = x % 10;\n\
    \        if digit % 2 == 1 {\n            product *= digit;\n        }\n     \
    \   x /= 10;\n    }\n    product\n}\n\nfn main() {\n    let candidate = digits;\n\
    \    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120),\
    \ 1);\n    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp_8rjxfjx.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822488
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let s = n.to_string();\n\
    \    let mut sum = 1;\n    for i in s.chars() {\n        let d = i.to_digit(10).unwrap();\n\
    \        if d % 2 == 1 {\n            sum *= d as isize;\n        }\n    }\n \
    \   sum\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmptn1dmq_k.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822488
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut num:\
    \ isize = 1;\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n\
    \        if digit % 2 != 0 {\n            num *= digit;\n        }\n        n\
    \ /= 10;\n    }\n    return num;\n}\n\nfn main() {\n    let candidate = digits;\n\
    \    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120),\
    \ 1);\n    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpluby58v0.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822488
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut n\
    \ = n;\n    let mut result = 1;\n    while n > 0 {\n        let digit = n % 10;\n\
    \        if digit % 2 == 1 {\n            result *= digit;\n        }\n      \
    \  n /= 10;\n    }\n    result\n}\n\nfn main() {\n    let candidate = digits;\n\
    \    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120),\
    \ 1);\n    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp_0e7sl4u.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822487
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n  let mut digits\
    \ = Vec::new();\n  let mut n = n;\n  while n > 0 {\n    digits.push(n % 10);\n\
    \    n /= 10;\n  }\n  digits.iter().fold(1, |acc, x| if *x % 2 == 1 { acc * x\
    \ } else { acc })\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpiuqqiix_.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822488
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut rv\
    \ = 1;\n    for c in n.to_string().chars() {\n        let d = c.to_digit(10).unwrap()\
    \ as isize;\n        if d % 2 == 1 {\n            rv *= d;\n        }\n    }\n\
    \    rv\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpd3lwrluq.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822488
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut prod\
    \ = 1;\n    let mut m = n;\n    while m > 0 {\n        let digit = m % 10;\n \
    \       if digit % 2 == 1 {\n            prod *= digit;\n        }\n        m\
    \ /= 10;\n    }\n    prod\n}\n\nfn main() {\n    let candidate = digits;\n   \
    \ assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120),\
    \ 1);\n    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp4mkcs622.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822488
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    n.to_string().chars().filter(|c|\
    \ c.to_digit(10).unwrap() % 2 == 1).fold(1, |p, d| p * d.to_digit(10).unwrap()\
    \ as isize)\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp08h_54dc.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822488
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    if n == 0\
    \ { return 0; }\n    let mut stack = Vec::new();\n    let mut n = n;\n    while\
    \ n > 0 {\n        stack.push(n % 10);\n        n /= 10;\n    }\n    stack.into_iter().map(|x|\
    \ x as isize).filter(|x| x % 2 == 1).product()\n}\n\nfn main() {\n    let candidate\
    \ = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n\
    \    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n   \
    \ assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpabo2_4v8.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822488
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut total\
    \ = 1;\n    for i in 0..n {\n        if i % 2 != 0 {\n            total *= i;\n\
    \        }\n    }\n    total\n}\n\nfn main() {\n    let candidate = digits;\n\
    \    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120),\
    \ 1);\n    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `5`', /tmp/tmpku4ib8es.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822488
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    // This works,\
    \ but is not the most efficient way to do this.\n    let mut odds = Vec::new();\n\
    \    let mut tmp = n;\n    while tmp > 0 {\n        let digit = tmp % 10;\n  \
    \      if digit % 2 != 0 {\n            odds.push(digit);\n        }\n       \
    \ tmp /= 10;\n    }\n    odds.iter().fold(1, |acc, n| acc * n)\n}\n\nfn main()\
    \ {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpbpelp9ny.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822488
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut n\
    \ = n;\n    let mut res = 1;\n    while n > 0 {\n        let m = n % 10;\n   \
    \     if m % 2 == 1 {\n            res *= m;\n        }\n        n /= 10;\n  \
    \  }\n    res\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpgxz9q5ty.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822488
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    // the number\
    \ of digits in n\n    let mut n_digits = 1;\n    // n_digits to the power of 10\n\
    \    let mut n_digits_power_of_10 = 10;\n    // the product of the odd digits\
    \ in n\n    let mut product_of_odd_digits = 1;\n    // the remainder of n when\
    \ divided by 10\n    let mut n_remainder = n;\n    // the digit being analysed\n\
    \    let mut digit;\n    // the number of odd digits in n\n    let mut number_of_odd_digits\
    \ = 0;\n\n    // find out how many digits there are in n\n    // (this is used\
    \ for the product later on)\n    while n_remainder > n_digits_power_of_10 {\n\
    \        n_digits += 1;\n        n_digits_power_of_10 *= 10;\n    }\n\n    //\
    \ set n_remainder to be the remainder of n divided by 10\n    n_remainder = n\
    \ % 10;\n\n    // split n into its individual digits and\n    // multiply the\
    \ product_of_odd_digits by the odd digits\n    while n_digits > 0 {\n        digit\
    \ = n / n_digits_power_of_10;\n        if digit % 2 != 0 {\n            product_of_odd_digits\
    \ *= digit;\n            number_of_odd_digits += 1;\n        }\n        n_digits\
    \ -= 1;\n        n_digits_power_of_10 /= 10;\n    }\n\n    // if there are no\
    \ odd digits, return 0\n    if number_of_odd_digits == 0 {\n        return 0;\n\
    \    }\n\n    // otherwise, return the product of the odd digits\n    return product_of_odd_digits;\n\
    }\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmp9k08a2c8.rs:55:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822488
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n  let mut num\
    \ = n;\n  let mut product = 1;\n  while num > 0 {\n    let d = num % 10;\n   \
    \ if d % 2 == 1 {\n      product *= d;\n    }\n    num /= 10;\n  }\n  product\n\
    }\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpcuzw3dq4.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822488
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut sum\
    \ = 1;\n    let mut x = n;\n    while x > 0 {\n        let y = x % 10;\n     \
    \   if y % 2 == 1 {\n            sum *= y;\n        }\n        x /= 10;\n    }\n\
    \    sum\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpm20unecy.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822488
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut total\
    \ = 1;\n    for i in n.to_string().chars() {\n        let y = i.to_digit(10).unwrap();\n\
    \        if y % 2 != 0 {\n            total *= y as isize;\n        }\n    }\n\
    \    total\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpj4ob3meb.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822488
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut result\
    \ = 1;\n    for c in n.to_string().chars() {\n        let num = c.to_digit(10).unwrap();\n\
    \        if num % 2 == 1 {\n            result *= num as isize;\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpxb5_a2w_.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822488
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut res\
    \ = 1;\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n \
    \       if digit % 2 == 1 {\n            res *= digit;\n        }\n        n /=\
    \ 10;\n    }\n    res\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpx64ubl2b.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822488
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut result\
    \ = 1;\n    for ch in n.to_string().chars() {\n        let digit = ch.to_digit(10).unwrap()\
    \ as isize;\n        if digit % 2 == 1 {\n            result *= digit;\n     \
    \   }\n    }\n    result\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpk3ltj33b.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822488
- exit_code: 0
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let s = n.to_string();\n\
    \    let mut v = Vec::new();\n    for c in s.chars() {\n        let num = c.to_digit(10).unwrap();\n\
    \        if num % 2 == 1 {\n            v.push(num as isize);\n        }\n   \
    \ }\n    if v.len() == 0 {\n        return 0;\n    }\n    let mut p = 1;\n   \
    \ for i in v {\n        p *= i;\n    }\n    p\n}\n\nfn main() {\n    let candidate\
    \ = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n\
    \    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n   \
    \ assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822488
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    if n == 0\
    \ {\n        return 0;\n    }\n    let mut m = n;\n    let mut p = 1;\n    while\
    \ m > 0 {\n        let d = m % 10;\n        if d % 2 == 1 {\n            p *=\
    \ d;\n        }\n        m /= 10;\n    }\n    p\n}\n\nfn main() {\n    let candidate\
    \ = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n\
    \    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n   \
    \ assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpalzcp538.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822488
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let s = n.to_string();\n\
    \    let mut ret = 1;\n    for c in s.chars() {\n        let n = c.to_digit(10).unwrap();\n\
    \        if n % 2 == 1 {\n            ret *= n as isize;\n        }\n    }\n \
    \   return ret;\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmppa21xxss.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822488
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut digits\
    \ = Vec::new();\n    let mut current = n;\n    let mut result = 1;\n    while\
    \ current > 0 {\n        digits.push(current % 10);\n        current /= 10;\n\
    \    }\n    for digit in digits {\n        if digit % 2 == 1 {\n            result\
    \ *= digit;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n\
    \    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n   \
    \ assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp4x9ken_p.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822488
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut result\
    \ = 1;\n    for c in n.to_string().chars() {\n        if c.to_digit(10).unwrap()\
    \ % 2 == 1 {\n            result *= c.to_digit(10).unwrap() as isize;\n      \
    \  }\n    }\n    result\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpp6rdm9w2.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822488
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut answer\
    \ = 1;\n    for digit in format!(\"{}\", n).chars() {\n        let d = digit.to_digit(10).unwrap();\n\
    \        if d % 2 == 1 {\n            answer *= d as isize;\n        }\n    }\n\
    \    return answer;\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp7_6y9wnn.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822488
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut result\
    \ = 1;\n    for i in n.to_string().chars() {\n        match i.to_digit(10) {\n\
    \            Some(odd) if odd % 2 != 0 => result *= odd as isize,\n          \
    \  _ => result *= 1,\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp4eb3mtlt.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822488
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n  let mut product\
    \ = 1;\n  let mut n = n;\n  while n > 0 {\n    let digit = n % 10;\n    if digit\
    \ % 2 == 1 {\n      product *= digit;\n    }\n    n /= 10;\n  }\n  product\n}\n\
    \nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpgl26xr1v.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822488
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut res\
    \ = 1;\n    for c in n.to_string().chars() {\n        let i = c.to_digit(10).unwrap()\
    \ as isize;\n        if i % 2 == 1 {\n            res *= i;\n        }\n    }\n\
    \    res\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpezsdxot5.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822489
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    n.to_string().chars().filter(|&x|\
    \ x != '0').map(|x| x.to_digit(10).unwrap() as isize).filter(|&x| x % 2 == 1).product()\n\
    }\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpaqfziux8.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822489
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut digit_arr\
    \ = Vec::new();\n    let mut temp = n;\n    let mut sum = 1;\n    let mut check\
    \ = true;\n    while temp > 0 {\n        digit_arr.push(temp % 10);\n        temp\
    \ = temp / 10;\n    }\n    for num in digit_arr {\n        if num % 2 != 0 {\n\
    \            sum *= num;\n        } else {\n            check = false;\n     \
    \   }\n    }\n    if check {\n        sum\n    } else {\n        0\n    }\n}\n\
    \nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmpkn9lbj0g.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822488
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut n\
    \ = n;\n    let mut result = 1;\n    while n > 0 {\n        let curr = n % 10;\n\
    \        if curr % 2 == 1 {\n            result *= curr;\n        }\n        n\
    \ /= 10;\n    }\n    result\n}\n\nfn main() {\n    let candidate = digits;\n \
    \   assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120),\
    \ 1);\n    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp_qsqm2ad.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822488
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut product\
    \ = 1;\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n \
    \       if digit % 2 == 1 {\n            product *= digit;\n        }\n      \
    \  n /= 10;\n    }\n    product\n}\n\nfn main() {\n    let candidate = digits;\n\
    \    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120),\
    \ 1);\n    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmptiahacjo.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822487
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut r\
    \ = 0;\n    let mut m = 1;\n    let mut n = n;\n    while n > 0 {\n        let\
    \ d = n % 10;\n        if d % 2 == 1 {\n            r += m * d;\n            m\
    \ *= 10;\n        }\n        n /= 10;\n    }\n    r\n}\n\nfn main() {\n    let\
    \ candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `51`,\n right: `5`', /tmp/tmpy87_yxch.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822488
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut pro\
    \ = 1;\n    let mut z = n;\n    while z > 0 {\n        let d = z % 10;\n     \
    \   if d % 2 == 1 {\n            pro *= d;\n        }\n        z /= 10;\n    }\n\
    \    pro\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp6sway9bv.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822488
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut r\
    \ = 1;\n    for c in n.to_string().chars() {\n        let d = c.to_digit(10).unwrap()\
    \ as isize;\n        if d % 2 == 1 {\n            r *= d;\n        }\n    }\n\
    \    r\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpymg03dor.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822489
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut digits:\
    \ Vec<isize> = Vec::new();\n    let mut tmp: isize = n;\n    loop {\n        if\
    \ tmp == 0 {\n            break;\n        }\n        digits.push(tmp % 10);\n\
    \        tmp /= 10;\n    }\n    digits.iter().fold(1, |a, b| a * b)\n}\n\nfn main()\
    \ {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `20`,\n right: `5`', /tmp/tmpqsiwijt8.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822489
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut digits:\
    \ Vec<char> = n.to_string().chars().collect();\n    let mut product: isize = 1;\n\
    \    for i in digits {\n        let digit: isize = i.to_string().parse().unwrap();\n\
    \        if digit % 2 != 0 {\n            product *= digit;\n        }\n    }\n\
    \    return product;\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp7i6ltt88.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822489
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut x\
    \ = n;\n    let mut result = 1;\n    while x > 0 {\n        let last_digit = x\
    \ % 10;\n        if last_digit % 2 == 1 {\n            result *= last_digit;\n\
    \        }\n        x /= 10;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n\
    \    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n   \
    \ assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp3b6cemuv.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822489
- exit_code: 0
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    if n < 10\
    \ {\n        if n % 2 == 1 {\n            return n;\n        } else {\n      \
    \      return 0;\n        }\n    }\n    let last_digit = n % 10;\n    let mut\
    \ new_n = n / 10;\n    if last_digit % 2 == 1 {\n        last_digit * digits(new_n)\n\
    \    } else {\n        digits(new_n)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n\
    \    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n   \
    \ assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822489
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut n_str\
    \ = n.to_string();\n    let mut result = 1;\n    let mut temp = n_str.pop();\n\
    \    while temp != None {\n        let char = temp.unwrap();\n        if char.is_digit(10)\
    \ {\n            let num = char.to_digit(10).unwrap();\n            if num % 2\
    \ != 0 {\n                result *= num as isize;\n            }\n        }\n\
    \        temp = n_str.pop();\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n\
    \    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n   \
    \ assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpaui8p6ew.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822489
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut product\
    \ = 1;\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n \
    \       if digit % 2 == 1 {\n            product *= digit;\n        }\n      \
    \  n /= 10;\n    }\n    product\n}\n\nfn main() {\n    let candidate = digits;\n\
    \    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120),\
    \ 1);\n    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmptiahacjo.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822487
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut string\
    \ = n.to_string();\n    let mut product = 1;\n    for c in string.chars() {\n\
    \        let num = c.to_digit(10).unwrap();\n        if num % 2 == 1 {\n     \
    \       product *= num as isize;\n        }\n    }\n    product\n}\n\nfn main()\
    \ {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp9_5x2bk7.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822489
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut product\
    \ = 1;\n    let mut x = n;\n    while x > 0 {\n        let last_digit = x % 10;\n\
    \        if last_digit % 2 == 1 {\n            product *= last_digit;\n      \
    \  }\n        x /= 10;\n    }\n    product\n}\n\nfn main() {\n    let candidate\
    \ = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n\
    \    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n   \
    \ assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpaiwbrfra.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822489
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut sum\
    \ = 1;\n    for c in n.to_string().chars() {\n        if c.to_digit(10).unwrap()\
    \ % 2 == 1 {\n            sum *= c.to_digit(10).unwrap() as isize;\n        }\n\
    \    }\n    return sum;\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpmbe2oq2j.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822489
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    // If only\
    \ one digit\n    if n < 10 {\n        if n % 2 == 1 {\n            return n;\n\
    \        } else {\n            return 0;\n        }\n    }\n    let mut product\
    \ = 1;\n    let mut num = n;\n    while num > 0 {\n        let digit = num % 10;\n\
    \        if digit % 2 == 1 {\n            product *= digit;\n        }\n     \
    \   num /= 10;\n    }\n    product\n}\n\nfn main() {\n    let candidate = digits;\n\
    \    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120),\
    \ 1);\n    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpsajxcm8u.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822489
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let n: String\
    \ = n.to_string();\n    let mut n: Vec<char> = n.chars().collect();\n    let mut\
    \ i: usize = 0;\n    let mut result: isize = 1;\n    while i < n.len() {\n   \
    \     if (n[i] as isize - 48) % 2 == 1 {\n            result *= n[i] as isize\
    \ - 48;\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n   \
    \ let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpxz7r_pjr.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822489
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut total\
    \ = 1;\n    let mut m = n;\n    while m > 0 {\n        let digit = m % 10;\n \
    \       if digit % 2 == 1 {\n            total *= digit;\n        }\n        m\
    \ /= 10;\n    }\n    total\n}\n\nfn main() {\n    let candidate = digits;\n  \
    \  assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120),\
    \ 1);\n    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp5eud_q5v.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822489
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut prod\
    \ = 1;\n    for c in n.to_string().chars() {\n        let digit = c.to_digit(10).unwrap()\
    \ as isize;\n        if digit % 2 == 1 {\n            prod *= digit;\n       \
    \ }\n    }\n    prod\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpaqm0mq0f.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822489
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut n\
    \ = n;\n    let mut product = 1;\n    while n > 0 {\n        let temp = n % 10;\n\
    \        if temp % 2 != 0 {\n            product *= temp;\n        }\n       \
    \ n /= 10;\n    }\n    product\n}\n\nfn main() {\n    let candidate = digits;\n\
    \    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120),\
    \ 1);\n    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpad3b9mkc.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822489
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    if n <= 0\
    \ {\n        0\n    } else {\n        let (d, m) = (n % 10, n / 10);\n       \
    \ if d % 2 == 0 {\n            digits(m)\n        } else {\n            d * digits(m)\n\
    \        }\n    }\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmp1bibnyo6.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822489
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut n\
    \ = n;\n    let mut mult = 1;\n    while n > 0 {\n        let digit = n % 10;\n\
    \        if digit % 2 == 1 {\n            mult *= digit;\n        }\n        n\
    \ /= 10;\n    }\n    mult\n}\n\nfn main() {\n    let candidate = digits;\n   \
    \ assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120),\
    \ 1);\n    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpwg29lf1k.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822489
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut product\
    \ = 1;\n    for c in n.to_string().chars() {\n        let digit = c.to_digit(10).unwrap()\
    \ as isize;\n        if digit % 2 == 1 {\n            product *= digit;\n    \
    \    }\n    }\n    product\n}\n\nfn main() {\n    let candidate = digits;\n  \
    \  assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120),\
    \ 1);\n    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp0fos0tp9.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822489
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut odd_digits\
    \ = 1;\n    let mut n = n;\n    while n > 0 {\n        let last_digit = n % 10;\n\
    \        if last_digit % 2 == 1 {\n            odd_digits *= last_digit;\n   \
    \     }\n        n /= 10;\n    }\n    odd_digits\n}\n\nfn main() {\n    let candidate\
    \ = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n\
    \    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n   \
    \ assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpk82lua1y.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822489
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut total\
    \ = 1;\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n \
    \       if digit % 2 == 1 {\n            total *= digit;\n        }\n        n\
    \ /= 10;\n    }\n    total\n}\n\nfn main() {\n    let candidate = digits;\n  \
    \  assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120),\
    \ 1);\n    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp9iv2wdam.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822489
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n  return 0;\n\
    }\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmpvkkgd7og.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822489
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    if n == 0\
    \ {\n        return 0;\n    }\n    let x = digits(n / 10);\n    let d = n % 10;\n\
    \    if d % 2 == 0 {\n        return x;\n    }\n    return x * d;\n}\n\nfn main()\
    \ {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmpsz1qryyx.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822489
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut total\
    \ = 1;\n    for i in 0..n.to_string().len() {\n        let x = n.to_string().chars().nth(i).unwrap().to_digit(10).unwrap()\
    \ as isize;\n        if x % 2 != 0 {\n            total *= x;\n        }\n   \
    \ }\n    return total;\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpm2naor8h.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822489
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut total\
    \ = 1;\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n \
    \       if digit % 2 == 1 {\n            total *= digit;\n        }\n        n\
    \ /= 10;\n    }\n    total\n}\n\nfn main() {\n    let candidate = digits;\n  \
    \  assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120),\
    \ 1);\n    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp9iv2wdam.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822489
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    n.to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap() as isize).filter(|c| c % 2 == 1).product()\n}\n\nfn\
    \ main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n  \
    \  assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp_20dlmk5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822489
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut n\
    \ = n;\n    let mut product = 1;\n    while n > 0 {\n        let digit = n % 10;\n\
    \        if digit % 2 == 1 {\n            product *= digit;\n        }\n     \
    \   n /= 10;\n    }\n    product\n}\n\nfn main() {\n    let candidate = digits;\n\
    \    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120),\
    \ 1);\n    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp91la4cyi.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822487
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut result\
    \ = 1;\n    for c in n.to_string().chars() {\n        let digit = c.to_digit(10).unwrap();\n\
    \        if digit % 2 == 1 {\n            result *= digit as isize;\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpjcy_rftr.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822486
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    n.to_string().chars().map(|x|\
    \ x.to_digit(10).unwrap() as isize).filter(|x| x%2 != 0).product()\n}\n\nfn main()\
    \ {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpbxing1tz.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822489
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut sum\
    \ = 1;\n    for i in n.to_string().chars() {\n        if i.to_digit(10).unwrap()\
    \ % 2 == 1 {\n            sum *= i.to_digit(10).unwrap() as isize;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpfo5wk3n9.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822489
- exit_code: 1
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut x\
    \ = 0;\n    for i in n.to_string().chars() {\n        let digit = i.to_digit(10).unwrap();\n\
    \        if digit % 2 == 1 {\n            x *= digit;\n        }\n    }\n    x\n\
    }\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9to6z2_r.rs:16:5\n   |\n\
    8  | fn digits(n: isize) -> isize {\n   |                        ----- expected\
    \ `isize` because of return type\n...\n16 |     x\n   |     ^ expected `isize`,\
    \ found `u32`\n   |\nhelp: you can convert a `u32` to an `isize` and panic if\
    \ the converted value doesn't fit\n   |\n16 |     x.try_into().unwrap()\n   |\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822489
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut p\
    \ = 1;\n    for i in n.to_string().chars() {\n        if i.to_digit(10).unwrap()\
    \ & 1 == 1 {\n            p *= i.to_digit(10).unwrap() as isize;\n        }\n\
    \    }\n    p\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpfimkrfnr.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822489
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    // TODO\n\
    \    0\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmp9ra_9w4s.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822488
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    if n <= 0\
    \ {\n        return 0;\n    }\n    let d = n % 10;\n    if d % 2 == 0 {\n    \
    \    return digits(n / 10);\n    }\n    return d * digits(n / 10);\n}\n\nfn main()\
    \ {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmpy370b9gr.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822489
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    n.to_string().chars().filter(|c|\
    \ c.to_digit(10).unwrap() % 2 == 1).fold(1, |acc, d| acc * d.to_digit(10).unwrap()\
    \ as isize)\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpylm5gp7y.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822489
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut total\
    \ = 1;\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n \
    \       if digit % 2 == 1 {\n            total *= digit;\n        }\n        n\
    \ /= 10;\n    }\n    total\n}\n\nfn main() {\n    let candidate = digits;\n  \
    \  assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120),\
    \ 1);\n    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp9iv2wdam.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822489
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let num =\
    \ n.to_string();\n    let mut product = 1;\n    for c in num.chars() {\n     \
    \   let d = c.to_digit(10).unwrap();\n        if d % 2 == 1 {\n            product\
    \ *= d as isize;\n        }\n    }\n    product\n}\n\nfn main() {\n    let candidate\
    \ = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n\
    \    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n   \
    \ assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpv61we8ui.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822489
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut n\
    \ = n;\n    let mut total = 1;\n    while n > 0 {\n        let digit = n % 10;\n\
    \        if digit % 2 == 1 {\n            total *= digit;\n        }\n       \
    \ n /= 10;\n    }\n    total\n}\n\nfn main() {\n    let candidate = digits;\n\
    \    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120),\
    \ 1);\n    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp7egra85t.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822489
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut res\
    \ = 1;\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n \
    \       if digit % 2 == 1 {\n            res *= digit;\n        }\n        n /=\
    \ 10;\n    }\n    res\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpx64ubl2b.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822488
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut n\
    \ = n;\n    let mut product = 1;\n    loop {\n        if n == 0 {\n          \
    \  break;\n        }\n        let r = n % 10;\n        if r % 2 == 1 {\n     \
    \       product *= r;\n        }\n        n /= 10;\n    }\n    product\n}\n\n\
    fn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n \
    \   assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpsbuta10v.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822489
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut x\
    \ = n;\n    let mut acc = 1;\n    while x > 0 {\n        let digit = x % 10;\n\
    \        if digit % 2 == 1 {\n            acc *= digit;\n        }\n        x\
    \ /= 10;\n    }\n    acc\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpv2b3xwjf.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822489
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut product\
    \ = 1;\n    let mut current = n;\n    while current > 0 {\n        let digit =\
    \ current % 10;\n        if digit % 2 == 1 {\n            product *= digit;\n\
    \        }\n        current /= 10;\n    }\n    product\n}\n\nfn main() {\n   \
    \ let candidate = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54),\
    \ 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n\
    \    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmphxbs4550.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822489
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut new_n\
    \ = n;\n    let mut product = 1;\n    while new_n > 0 {\n        let digit = new_n\
    \ % 10;\n        if digit % 2 != 0 {\n            product *= digit;\n        }\n\
    \        new_n /= 10;\n    }\n    product\n}\n\nfn main() {\n    let candidate\
    \ = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n\
    \    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n   \
    \ assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmps3elx6hb.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822489
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    // We implement\
    \ a recursive solution\n    // Base case: n is 0\n    if n == 0 {\n        return\
    \ 0;\n    }\n\n    // Recursive case:\n    let r = n % 10;\n    let q = n / 10;\n\
    \    if r % 2 == 0 {\n        return digits(q);\n    }\n    return r * digits(q);\n\
    }\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n\
    \    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmp1p7my9w6.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822489
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    if n == 0\
    \ {\n        return 0;\n    }\n    let mut sum = 1;\n    let mut d = n;\n    while\
    \ d > 0 {\n        let c = d % 10;\n        if c % 2 == 1 {\n            sum *=\
    \ c;\n        }\n        d /= 10;\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n\
    \    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n   \
    \ assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmph6_fu6g8.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822489
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut odd_product\
    \ = 1;\n    for n in n.to_string().chars() {\n        if n.to_digit(10).unwrap()\
    \ % 2 == 1 {\n            odd_product *= n.to_digit(10).unwrap() as isize;\n \
    \       }\n    }\n    odd_product\n}\n\nfn main() {\n    let candidate = digits;\n\
    \    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120),\
    \ 1);\n    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp8br6cowo.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822489
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut r\
    \ = 0;\n    for i in n.to_string().chars() {\n        let i = i.to_digit(10).unwrap()\
    \ as isize;\n        if i % 2 == 1 {\n            r = r * i;\n        }\n    }\n\
    \    r\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `5`', /tmp/tmpr0po1soc.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822489
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut result\
    \ = 1;\n    for c in n.to_string().chars() {\n        if c.to_digit(10).unwrap()\
    \ % 2 == 1 {\n            result *= c.to_digit(10).unwrap() as isize;\n      \
    \  }\n    }\n    result\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpp6rdm9w2.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822488
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut num\
    \ = n;\n    let mut product = 1;\n    while num > 0 {\n        let digit = num\
    \ % 10;\n        if digit % 2 != 0 {\n            product *= digit;\n        }\n\
    \        num /= 10;\n    }\n    product\n}\n\nfn main() {\n    let candidate =\
    \ digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n\
    \    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n   \
    \ assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp3ruyo212.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822489
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut prod\
    \ = 1;\n    let mut n = n;\n    while n > 0 {\n        let dig = n % 10;\n   \
    \     if dig % 2 == 1 {\n            prod *= dig;\n        }\n        n /= 10;\n\
    \    }\n    prod\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpft9lpuvo.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822489
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut prod\
    \ = 1;\n    for i in n.to_string().chars() {\n        let digit = i.to_digit(10).unwrap();\n\
    \        if digit % 2 == 1 {\n            prod *= digit as isize;\n        }\n\
    \    }\n    prod\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpy7w_jxpd.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822487
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut result\
    \ = 1;\n    let mut c_n = n;\n    while c_n > 0 {\n        let digit = c_n % 10;\n\
    \        if digit % 2 == 1 {\n            result *= digit;\n        }\n      \
    \  c_n /= 10;\n    }\n    result\n}\n\nfn main() {\n    let candidate = digits;\n\
    \    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120),\
    \ 1);\n    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpe0m94k39.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822489
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    // unimplemented!();\n\
    \    let mut product = 1;\n    let mut digits = vec![];\n    let mut num = n;\n\
    \    while num > 0 {\n        digits.push(num % 10);\n        num /= 10;\n   \
    \ }\n    for digit in digits {\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n    }\n    product\n}\n\nfn main() {\n    let candidate\
    \ = digits;\n    assert_eq!(candidate(5), 5);\n    assert_eq!(candidate(54), 5);\n\
    \    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014), 5);\n   \
    \ assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543), 2625);\n\
    \    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpdq_cryab.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822489
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut product\
    \ = 1;\n    for i in n.to_string().chars() {\n        let num = i.to_digit(10).unwrap();\n\
    \        if num % 2 != 0 {\n            product *= num as isize;\n        }\n\
    \    }\n    product\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpftloeo70.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822489
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut product\
    \ = 1;\n    let mut m = n;\n    while m > 0 {\n        let d = m % 10;\n     \
    \   if d % 2 == 1 {\n            product *= d;\n        }\n        m /= 10;\n\
    \    }\n    product\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpp9ghvo4i.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822489
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut result\
    \ = 1;\n    for d in n.to_string().chars() {\n        let i = d.to_digit(10).unwrap()\
    \ as isize;\n        if i % 2 == 1 {\n            result *= i;\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
    \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n\
    \    assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n\
    \    assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpznipgy97.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822489
- exit_code: 101
  program: "/// Given a positive integer n, return the product of the odd digits.\n\
    /// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n///\
    \ 1\n/// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n    let mut nums\
    \ = Vec::new();\n    for x in n.to_string().chars() {\n        nums.push(x.to_digit(10).unwrap()\
    \ as isize);\n    }\n    nums.iter().filter(|&x| *x % 2 != 0).product()\n}\n\n\
    fn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5), 5);\n \
    \   assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n    assert_eq!(candidate(5014),\
    \ 5);\n    assert_eq!(candidate(98765), 315);\n    assert_eq!(candidate(5576543),\
    \ 2625);\n    assert_eq!(candidate(2468), 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp0zjrq245.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822489
