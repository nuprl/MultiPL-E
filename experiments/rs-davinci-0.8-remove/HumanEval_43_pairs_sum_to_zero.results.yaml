language: rs
name: HumanEval_43_pairs_sum_to_zero
results:
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    // compute\
    \ the set from the input vector\n    let s: HashSet<isize> = l.into_iter().collect();\n\
    \n    // try each element in the set\n    for x in s.iter() {\n        // see\
    \ if the opposite of x is in the set\n        if s.contains(&(-x)) {\n       \
    \     // yes, so return true\n            return true;\n        }\n    }\n\n \
    \   // if we make it through the for loop without returning,\n    // then we haven't\
    \ found any opposite pairs, so return false\n    false\n}\n\nfn main() {\n   \
    \ let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpphz6nc_1.rs:6:12\n\
    \  |\n6 |     let s: HashSet<isize> = l.into_iter().collect();\n  |          \
    \  ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    for element\
    \ in l.iter() {\n        for another_element in l.iter() {\n            if element\
    \ + another_element == 0 {\n                return true;\n            }\n    \
    \    }\n    }\n    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp0933i1sk.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    let n =\
    \ l.len();\n    if n <= 1 {\n        return false;\n    }\n    if n <= 2 {\n \
    \       return l[0] + l[1] == 0;\n    }\n    let (smaller, bigger) = l.split_at(n\
    \ / 2);\n    let smaller_sum_to_zero = pairs_sum_to_zero(smaller.to_vec());\n\
    \    let bigger_sum_to_zero = pairs_sum_to_zero(bigger.to_vec());\n    let mut\
    \ smaller_index = 0;\n    let mut bigger_index = 0;\n    let mut cross_sum_to_zero\
    \ = false;\n    let mut smaller_count = 0;\n    let mut bigger_count = 0;\n  \
    \  while smaller_index < smaller.len() && bigger_index < bigger.len() {\n    \
    \    let smaller_current = smaller[smaller_index];\n        let bigger_current\
    \ = bigger[bigger_index];\n        if smaller_current + bigger_current == 0 {\n\
    \            cross_sum_to_zero = true;\n            break;\n        } else if\
    \ smaller_current + bigger_current < 0 {\n            smaller_index += 1;\n  \
    \          smaller_count += 1;\n        } else {\n            bigger_index +=\
    \ 1;\n            bigger_count += 1;\n        }\n    }\n    if !cross_sum_to_zero\
    \ && smaller_count == smaller.len() && bigger_count == bigger.len() {\n      \
    \  return false;\n    }\n    smaller_sum_to_zero || bigger_sum_to_zero || cross_sum_to_zero\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp11szrj13.rs:45:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    // This\
    \ is your job.\n    // You can modify the function header as you wish.\n    //\
    \ You can use any other functions you need.\n    // You are not allowed to use\
    \ `return` in your implementation.\n    unimplemented!()\n}\n\nfn main() {\n \
    \   let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5,\
    \ 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp9wbn8l2o.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822497
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    // store\
    \ the numbers in a HashSet so we can easily check if numbers\n    // are already\
    \ in the set when we iterate over the list\n\n    let mut s = HashSet::new();\n\
    \n    for n in l {\n        if s.contains(&(-n)) {\n            return true;\n\
    \        } else {\n            s.insert(n);\n        }\n    }\n\n    false\n}\n\
    \nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmprav_q2mq.rs:8:17\n  |\n8 |     let mut s = HashSet::new();\n  |    \
    \             ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this\
    \ struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    // let\
    \ mut output = false;\n    // let mut tmp = 0;\n    // let mut vec: Vec<isize>\
    \ = vec![];\n    // for x in l {\n    //     tmp = 0;\n    //     for y in l {\n\
    \    //         if x + y == 0 {\n    //             tmp += 1;\n    //        \
    \ }\n    //     }\n    //     vec.push(tmp);\n    // }\n    // for z in vec {\n\
    \    //     if z > 1 {\n    //         output = true;\n    //     }\n    // }\n\
    \    // output\n    let mut hash_map: HashMap<i32, i32> = HashMap::new();\n  \
    \  for i in l {\n        let count = hash_map.entry(i).or_insert(0);\n       \
    \ *count += 1;\n    }\n    for (k, v) in hash_map {\n        if k == 0 && v >\
    \ 1 {\n            return true;\n        }\n        if hash_map.contains_key(&(-k))\
    \ {\n            return true;\n        }\n    }\n    false\n}\n\nfn main() {\n\
    \    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5,\
    \ 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashMap` in this scope\n  --> /tmp/tmpe9beezbn.rs:23:23\n\
    \   |\n23 |     let mut hash_map: HashMap<i32, i32> = HashMap::new();\n   |  \
    \                     ^^^^^^^ not found in this scope\n   |\nhelp: consider importing\
    \ this struct\n   |\n1  | use std::collections::HashMap;\n   |\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `HashMap`\n  --> /tmp/tmpe9beezbn.rs:23:43\n\
    \   |\n23 |     let mut hash_map: HashMap<i32, i32> = HashMap::new();\n   |  \
    \                                         ^^^^^^^ not found in this scope\n  \
    \ |\nhelp: consider importing this struct\n   |\n1  | use std::collections::HashMap;\n\
    \   |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0412, E0433.\nFor more information about an error, try `rustc\
    \ --explain E0412`.\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    let mut\
    \ zs = HashSet::new();\n    let mut rs = HashSet::new();\n    for elem in l {\n\
    \        if zs.contains(&elem) {\n            return true;\n        }\n      \
    \  if rs.contains(&elem) {\n            return true;\n        }\n        zs.insert(-elem);\n\
    \        rs.insert(elem);\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpu4wk4ivw.rs:5:18\n  |\n5 |     let mut zs = HashSet::new();\n  |   \
    \               ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashSet`\n --> /tmp/tmpu4wk4ivw.rs:6:18\n\
    \  |\n6 |     let mut rs = HashSet::new();\n  |                  ^^^^^^^ not found\
    \ in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n\
    \  |\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    // we'll\
    \ use a set to keep track of elements we've seen before\n    let mut s = HashSet::new();\n\
    \n    // loop over all the elements\n    for el in l {\n        // if we haven't\
    \ seen the negative of this element before,\n        // add it to the set\n  \
    \      if !s.contains(&(-el)) {\n            s.insert(el);\n        } else {\n\
    \            // otherwise, we have seen the negative of this element\n       \
    \     // before, so we've found a pair that sums to zero!\n            return\
    \ true;\n        }\n    }\n\n    // we've searched the whole list and haven't\
    \ found a pair\n    // that sums to zero\n    false\n}\n\nfn main() {\n    let\
    \ candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpp8dnkjqt.rs:6:17\n  |\n6 |     let mut s = HashSet::new();\n  |    \
    \             ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this\
    \ struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 0
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    // the\
    \ number of elements needed for a pair to sum to zero is at least 2\n    if l.len()\
    \ < 2 {\n        return false;\n    }\n\n    // iterate over all pairs of distinct\
    \ elements\n    for i in 0..l.len() - 1 {\n        for j in i + 1..l.len() {\n\
    \            // if the sum of the elements is 0, we are done\n            if l[i]\
    \ + l[j] == 0 {\n                return true;\n            }\n        }\n    }\n\
    \n    // we only get here if there is no pair that sums to zero\n    false\n}\n\
    \nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822497
- exit_code: 0
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    let size\
    \ = l.len();\n    for i in 0..size {\n        for j in (i + 1)..size {\n     \
    \       if l[i] + l[j] == 0 {\n                return true;\n            }\n \
    \       }\n    }\n    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822497
- exit_code: 0
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    if l.len()\
    \ < 2 {\n        return false;\n    }\n    let mut indices = Vec::new();\n   \
    \ for i in 0..l.len() {\n        if l[i] == 0 {\n            indices.push(i);\n\
    \        }\n    }\n    if indices.len() >= 2 {\n        return true;\n    }\n\
    \    indices.clear();\n    for i in 0..l.len() {\n        for j in 0..l.len()\
    \ {\n            if l[i] == -l[j] && i != j {\n                indices.push(i);\n\
    \                indices.push(j);\n            }\n        }\n    }\n    if indices.len()\
    \ >= 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822497
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    let mut\
    \ s: HashSet<isize> = HashSet::new();\n    let mut found = false;\n    for x in\
    \ l {\n        if s.contains(&(-x)) {\n            found = true;\n           \
    \ break;\n        }\n        s.insert(x);\n    }\n    found\n}\n\nfn main() {\n\
    \    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5,\
    \ 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpdhyudw9b.rs:5:16\n\
    \  |\n5 |     let mut s: HashSet<isize> = HashSet::new();\n  |               \
    \ ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n --> /tmp/tmpdhyudw9b.rs:5:33\n  |\n5 |  \
    \   let mut s: HashSet<isize> = HashSet::new();\n  |                         \
    \        ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0412, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 0
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    for i in\
    \ 0..l.len() {\n        for j in i+1..l.len() {\n            if l[i] + l[j] ==\
    \ 0 {\n                return true;\n            }\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822497
- exit_code: 0
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    for i in\
    \ 0..l.len() {\n        for j in i+1..l.len() {\n            if l[i] + l[j] ==\
    \ 0 {\n                return true;\n            }\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822497
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    let mut\
    \ hm = HashMap::new();\n    for n in l {\n        let tmp = hm.entry(n).or_insert(0);\n\
    \        *tmp += 1;\n    }\n    for (n, c) in hm {\n        if n == 0 && c > 1\
    \ {\n            return true;\n        }\n        if c > 0 && hm.contains_key(&(-n))\
    \ {\n            return true;\n        }\n    }\n    false\n}\n\nfn main() {\n\
    \    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5,\
    \ 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmpcb9iehrd.rs:5:18\n  |\n5 |     let mut hm = HashMap::new();\n  |   \
    \               ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpnwn0mm46.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822497
- exit_code: 0
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    for i in\
    \ l.iter() {\n        for j in l.iter() {\n            if i == j {\n         \
    \       continue;\n            }\n            if i + j == 0 {\n              \
    \  return true;\n            }\n        }\n    }\n    false\n}\n\nfn main() {\n\
    \    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5,\
    \ 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822497
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    let mut\
    \ x = 0;\n    let mut y = 0;\n    while x < l.len() {\n        while y < l.len()\
    \ {\n            if l[x] + l[y] == 0 && x != y {\n                return true;\n\
    \            }\n            y += 1;\n        }\n        x += 1;\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpspqmvr2e.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 0
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    for i in\
    \ 0..l.len() {\n        for j in i + 1..l.len() {\n            if l[i] + l[j]\
    \ == 0 {\n                return true;\n            }\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822497
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    let mut\
    \ s: HashSet<isize> = HashSet::new();\n    for i in l {\n        if s.contains(&-i)\
    \ {\n            return true;\n        }\n        s.insert(i);\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmp9ullg1ir.rs:5:16\n\
    \  |\n5 |     let mut s: HashSet<isize> = HashSet::new();\n  |               \
    \ ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n --> /tmp/tmp9ullg1ir.rs:5:33\n  |\n5 |  \
    \   let mut s: HashSet<isize> = HashSet::new();\n  |                         \
    \        ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0412, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 0
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    for x in\
    \ l.iter() {\n        for y in l.iter() {\n            if *x != *y && *x + *y\
    \ == 0 {\n                return true;\n            }\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822497
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    let mut\
    \ values = l.clone();\n    let mut count = 0;\n    for (i, num) in l.iter().enumerate()\
    \ {\n        values.remove(i);\n        count += 1;\n        for num2 in values.iter()\
    \ {\n            if num + num2 == 0 {\n                return true;\n        \
    \    }\n        }\n    }\n    return false;\n}\n\nfn main() {\n    let candidate\
    \ = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''removal index (is 2) should be < len (is
    2)'', /tmp/tmpng73co56.rs:8:16

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822497
- exit_code: 0
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    // Empty\
    \ list, 0 elements, and 1 element cases\n    if l.len() <= 1 {\n        return\
    \ false;\n    }\n\n    // Make sure the list is sorted.\n    let mut l = l;\n\
    \    l.sort();\n\n    // Start i at 0, and j at the second to last element.\n\
    \    // Keep track of the last element and the next to last element.\n    let\
    \ (mut last, mut next_to_last) = (l[l.len() - 1], l[l.len() - 2]);\n    let mut\
    \ i = 0;\n    let mut j = l.len() - 2;\n\n    while i < j {\n        // If the\
    \ next-to-last element is the same as the last,\n        // we can skip both of\
    \ them, because they are the same\n        // value, and won't be interesting\
    \ for adding to 0.\n        if next_to_last == last {\n            // Skip the\
    \ last and next-to-last elements.\n            i += 1;\n            j -= 1;\n\
    \            // If we can, also update the values of last and next_to_last.\n\
    \            if j > 0 {\n                last = l[j];\n                next_to_last\
    \ = l[j - 1];\n            }\n        } else {\n            // Continue the normal\
    \ process.\n            let sum = l[i] + l[j];\n            if sum == 0 {\n  \
    \              return true;\n            } else if sum < 0 {\n               \
    \ i += 1;\n            } else {\n                j -= 1;\n            }\n    \
    \    }\n    }\n    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822497
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    // FIXME:\
    \ complete this function!\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp74h5m9k1.rs:6:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822497
- exit_code: 0
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    for i in\
    \ 0..l.len() {\n        for j in (i + 1)..l.len() {\n            if l[i] + l[j]\
    \ == 0 {\n                return true;\n            }\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822497
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    // TODO:\
    \ write this!\n    if l.len() < 2 {\n        return false;\n    }\n\n    let mut\
    \ first_it = l.iter();\n    let mut first = first_it.next().unwrap();\n    let\
    \ mut second_it = first_it;\n\n    for second in second_it {\n        if second\
    \ == first {\n            continue;\n        }\n\n        if second + first ==\
    \ 0 {\n            return true;\n        }\n    }\n\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6t5tw1qk.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    // Count\
    \ the number of occurrences of each number in the list.\n    let mut count = HashMap::new();\n\
    \    for number in l {\n        let count = count.entry(number).or_insert(0);\n\
    \        *count += 1;\n    }\n\n    // Check to see if there are any pairs that\
    \ sum to zero.\n    for (number, cnt) in count.iter() {\n        if *number ==\
    \ 0 && *cnt >= 2 {\n            return true;\n        }\n        if count.contains_key(&(-number))\
    \ {\n            return true;\n        }\n    }\n\n    // If there are no pairs,\
    \ return false.\n    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmp9qch97hq.rs:6:21\n  |\n6 |     let mut count = HashMap::new();\n  |\
    \                     ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    let mut\
    \ values: HashSet<isize> = HashSet::new();\n    for i in l {\n        if values.contains(&(-i))\
    \ {\n            return true;\n        }\n        values.insert(i);\n    }\n \
    \   false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpgw_d7rk8.rs:5:21\n\
    \  |\n5 |     let mut values: HashSet<isize> = HashSet::new();\n  |          \
    \           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this\
    \ struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashSet`\n --> /tmp/tmpgw_d7rk8.rs:5:38\n\
    \  |\n5 |     let mut values: HashSet<isize> = HashSet::new();\n  |          \
    \                            ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0412, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 0
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n  let len =\
    \ l.len();\n  for i in 0..len {\n    for j in (i + 1)..len {\n      if l[i] +\
    \ l[j] == 0 {\n        return true;\n      }\n    }\n  }\n  false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822497
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    let mut\
    \ h = HashSet::new();\n    for a in l {\n        if h.contains(&(-a)) {\n    \
    \        return true;\n        }\n        h.insert(a);\n    }\n    false\n}\n\n\
    fn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpiou29pcp.rs:5:17\n  |\n5 |     let mut h = HashSet::new();\n  |    \
    \             ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this\
    \ struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    true\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp17klwz4r.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpk6ncwff_.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822497
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpk6ncwff_.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822497
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    // use\
    \ a hashset to record seen numbers\n    let mut seen = HashSet::new();\n    for\
    \ x in l {\n        // for each number, check if its opposite has been seen.\n\
    \        // in this case, opposite is simply the negative of x.\n        if seen.contains(&(-x))\
    \ {\n            return true;\n        }\n        // otherwise, add the number\
    \ to the set.\n        seen.insert(x);\n    }\n    // if we have seen every number\
    \ in the input vector and haven't\n    // found any that sum to zero, then we\
    \ return false.\n    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp3a7mi0zv.rs:6:20\n  |\n6 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    // WRITE\
    \ YOUR SOLUTION HERE\n    return false;\n}\n\nfn main() {\n    let candidate =\
    \ pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n  \
    \  assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp86j0i6ur.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    // We use\
    \ a HashSet to keep track of which values we've seen.\n    let mut seen: HashSet<isize>\
    \ = HashSet::new();\n\n    // We'll iterate over each value in the list, checking\
    \ if we've seen\n    // the negative of the current value.\n    for i in l {\n\
    \        if seen.contains(&(-i)) {\n            return true;\n        }\n    \
    \    seen.insert(i);\n    }\n\n    // If we haven't seen a pair that sum to zero,\
    \ we return false.\n    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpnt2itx2d.rs:6:19\n\
    \  |\n6 |     let mut seen: HashSet<isize> = HashSet::new();\n  |            \
    \       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n --> /tmp/tmpnt2itx2d.rs:6:36\n  |\n6 |  \
    \   let mut seen: HashSet<isize> = HashSet::new();\n  |                      \
    \              ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\n\
    For more information about an error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 0
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    for i in\
    \ 0..l.len() {\n        for j in i + 1..l.len() {\n            if l[i] + l[j]\
    \ == 0 {\n                return true;\n            }\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822497
- exit_code: 0
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    for i in\
    \ 0..l.len() {\n        for j in (i + 1)..l.len() {\n            if l[i] + l[j]\
    \ == 0 {\n                return true;\n            }\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822497
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    let mut\
    \ a: HashSet<isize> = HashSet::new();\n    for elem in l {\n        if a.contains(&(-elem))\
    \ {\n            return true;\n        }\n        a.insert(elem);\n    }\n   \
    \ false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmp4zkrpjsi.rs:5:16\n\
    \  |\n5 |     let mut a: HashSet<isize> = HashSet::new();\n  |               \
    \ ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n --> /tmp/tmp4zkrpjsi.rs:5:33\n  |\n5 |  \
    \   let mut a: HashSet<isize> = HashSet::new();\n  |                         \
    \        ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0412, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 0
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    for (idx,\
    \ _) in l.iter().enumerate() {\n        for (idy, _) in l.iter().enumerate() {\n\
    \            if idx != idy {\n                if l[idx] + l[idy] == 0 {\n    \
    \                return true;\n                }\n            }\n        }\n \
    \   }\n    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n \
    \   assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822497
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    for &x\
    \ in &l {\n        for &y in &l {\n            if x + y == 0 {\n             \
    \   return true;\n            }\n        }\n    }\n    false\n}\n\nfn main() {\n\
    \    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5,\
    \ 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmplhj79ly8.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 0
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    // TODO\n\
    \    // Write your code here\n    for x in l.iter() {\n        for y in l.iter()\
    \ {\n            if x != y && x + y == 0 {\n                return true;\n   \
    \         }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822497
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    // Initialize\
    \ a vector of length l.len() to 0's.\n    let mut already_seen: Vec<usize> = vec![0;\
    \ l.len()];\n\n    // For each element in l, if -x has already been seen,\n  \
    \  // return true, otherwise, mark x as seen.\n    for x in l {\n        if already_seen[-x\
    \ as usize] == 1 {\n            return true;\n        }\n        already_seen[x\
    \ as usize] = 1;\n    }\n\n    // If there was no pair, return false.\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 4 but the
    index is 18446744073709551615'', /tmp/tmpbpzoppy_.rs:11:12

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822497
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpnwn0mm46.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822497
- exit_code: 0
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    for i in\
    \ 0..l.len() {\n        for j in i+1..l.len() {\n            if l[i] + l[j] ==\
    \ 0 {\n                return true;\n            }\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822497
- exit_code: 0
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    // Iterate\
    \ over all pairs of numbers in the list\n    for (i, &x) in l.iter().enumerate()\
    \ {\n        for &y in l.iter().skip(i + 1) {\n            if x + y == 0 {\n \
    \               return true;\n            }\n        }\n    }\n    return false;\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822497
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    let mut\
    \ seen: HashSet<isize> = HashSet::new();\n    for n in l {\n        if seen.contains(&(-n))\
    \ {\n            return true;\n        }\n        seen.insert(n);\n    }\n   \
    \ false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmp3d6f116d.rs:5:19\n\
    \  |\n5 |     let mut seen: HashSet<isize> = HashSet::new();\n  |            \
    \       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n --> /tmp/tmp3d6f116d.rs:5:36\n  |\n5 |  \
    \   let mut seen: HashSet<isize> = HashSet::new();\n  |                      \
    \              ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\n\
    For more information about an error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 0
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    let mut\
    \ s = l.clone();\n    let mut i = 0;\n    let mut j = 0;\n    s.sort();\n    let\
    \ len = s.len();\n    while i < len {\n        if s[i] > 0 {\n            return\
    \ false;\n        }\n        j = i + 1;\n        while j < len {\n           \
    \ if s[i] + s[j] == 0 {\n                return true;\n            }\n       \
    \     j += 1;\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main() {\n\
    \    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5,\
    \ 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822497
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmprau0yrwe.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 0
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    for i in\
    \ l.iter() {\n        for j in l.iter() {\n            if i != j && i + j == 0\
    \ {\n                return true;\n            }\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822497
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    // if the\
    \ list is empty, it trivially has no pairs of numbers\n    // that sum to zero\n\
    \    if l.len() == 0 {\n        return false;\n    }\n\n    // there is a clever\
    \ algorithm to solve this problem in O(n^2).\n    // we iterate over the list,\
    \ and for each element we iterate again\n    // over the list.  If we find another\
    \ element which is the negative\n    // of the first, we return true.\n    for\
    \ first in l.iter() {\n        for second in l.iter() {\n            if first\
    \ + second == 0 {\n                return true;\n            }\n        }\n  \
    \  }\n\n    // if we didn't find any pairs of elements that sum to zero, we\n\
    \    // return false\n    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpzj_5vztl.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    let mut\
    \ hash_map = HashMap::new();\n    for x in l {\n        if hash_map.contains_key(&-x)\
    \ {\n            return true;\n        }\n        hash_map.insert(x, true);\n\
    \    }\n    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmp5tq5m6yw.rs:5:24\n  |\n5 |     let mut hash_map = HashMap::new();\n\
    \  |                        ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpnwn0mm46.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822497
- exit_code: 0
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    for i in\
    \ 0..l.len() {\n        for j in (i + 1)..l.len() {\n            if l[i] + l[j]\
    \ == 0 {\n                return true;\n            }\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822497
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    let mut\
    \ res = false;\n    let mut l2 = l.clone();\n    l2.sort();\n    let mut i = 0;\n\
    \    while !res && i < l2.len() {\n        res = binary_search(&l2, l2[i], i +\
    \ 1);\n        i += 1;\n    }\n    res\n}\n\nfn main() {\n    let candidate =\
    \ pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n  \
    \  assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `binary_search` in this scope\n  -->\
    \ /tmp/tmp5hylq0aj.rs:10:15\n   |\n10 |         res = binary_search(&l2, l2[i],\
    \ i + 1);\n   |               ^^^^^^^^^^^^^ not found in this scope\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    // assume\
    \ true\n    let mut res = true;\n    // assume it is sorted\n    let mut sorted_l\
    \ = l.clone();\n    sorted_l.sort();\n    // use a sliding window\n    let mut\
    \ left_ptr = 0;\n    let mut right_ptr = sorted_l.len() - 1;\n    while left_ptr\
    \ < right_ptr {\n        if sorted_l[left_ptr] + sorted_l[right_ptr] == 0 {\n\
    \            // set result\n            res = true;\n            break;\n    \
    \    } else if sorted_l[left_ptr] + sorted_l[right_ptr] < 0 {\n            left_ptr\
    \ += 1;\n        } else {\n            right_ptr -= 1;\n        }\n    }\n   \
    \ res\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp5duf44mg.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    let mut\
    \ record = HashSet::new();\n    for i in l {\n        if record.contains(&(-i))\
    \ {\n            return true;\n        }\n        record.insert(i);\n    }\n \
    \   false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpf7_ht3ey.rs:5:22\n  |\n5 |     let mut record = HashSet::new();\n  |\
    \                      ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    // First,\
    \ we create a HashSet\n    let mut s = HashSet::new();\n\n    // For each element\
    \ of `l`, we check if its opposite is in the set.\n    // If it is, then return\
    \ true, otherwise insert the element in the set.\n    for i in l {\n        if\
    \ s.contains(&(-i)) {\n            return true;\n        }\n        s.insert(i);\n\
    \    }\n\n    // If the end of the list is reached and no match is found, return\
    \ false.\n    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpb8b7v7c1.rs:6:17\n  |\n6 |     let mut s = HashSet::new();\n  |    \
    \             ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this\
    \ struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    let mut\
    \ set: HashSet<isize> = HashSet::new();\n    for elem in l {\n        if set.contains(&-elem)\
    \ {\n            return true;\n        }\n        set.insert(elem);\n    }\n \
    \   false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpvkh6flmb.rs:5:18\n\
    \  |\n5 |     let mut set: HashSet<isize> = HashSet::new();\n  |             \
    \     ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n --> /tmp/tmpvkh6flmb.rs:5:35\n  |\n5 |  \
    \   let mut set: HashSet<isize> = HashSet::new();\n  |                       \
    \            ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this\
    \ struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\n\
    For more information about an error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 0
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    for (idx,\
    \ elem) in l.iter().enumerate() {\n        for (idy, _) in l.iter().enumerate()\
    \ {\n            if idx != idy && elem + l[idy] == 0 {\n                return\
    \ true;\n            }\n        }\n    }\n    false\n}\n\nfn main() {\n    let\
    \ candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822497
- exit_code: 0
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    for x in\
    \ &l {\n        for y in &l {\n            if x != y && x + y == 0 {\n       \
    \         return true;\n            }\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822498
- exit_code: 0
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    for i in\
    \ 0..l.len() {\n        for j in i+1..l.len() {\n            if l[i] + l[j] ==\
    \ 0 {\n                return true;\n            }\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822497
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    // check\
    \ if the empty list sums to zero\n    if l.len() == 0 {\n        return false;\n\
    \    }\n    // check if the list sums to zero by traversing the list\n    // and\
    \ checking if we have already seen the negative of the current\n    // element\n\
    \    let mut s: HashSet<isize> = HashSet::new();\n    for element in l {\n   \
    \     if s.contains(&(-element)) {\n            return true;\n        }\n    \
    \    s.insert(element);\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n  --> /tmp/tmpp0c7y9z8.rs:12:16\n\
    \   |\n12 |     let mut s: HashSet<isize> = HashSet::new();\n   |            \
    \    ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this struct\n\
    \   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmpp0c7y9z8.rs:12:33\n   |\n12\
    \ |     let mut s: HashSet<isize> = HashSet::new();\n   |                    \
    \             ^^^^^^^ not found in this scope\n   |\nhelp: consider importing\
    \ this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\n\
    For more information about an error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    // create\
    \ an empty hashmap to hold the numbers that we've seen\n    let mut seen: HashMap<isize,\
    \ bool> = HashMap::new();\n\n    // iterate over the list\n    for x in l {\n\
    \        // try to find the element (-x) in the hashmap\n        // if it's there,\
    \ then we've found a pair that sums to zero\n        if seen.contains_key(&(-x))\
    \ {\n            return true;\n        }\n\n        // otherwise, insert x into\
    \ the hashmap\n        seen.insert(x, true);\n    }\n\n    // we didn't find any\
    \ pairs that sum to zero\n    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashMap` in this scope\n --> /tmp/tmpqg9x3_sy.rs:6:19\n\
    \  |\n6 |     let mut seen: HashMap<isize, bool> = HashMap::new();\n  |      \
    \             ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this\
    \ struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpqg9x3_sy.rs:6:42\n\
    \  |\n6 |     let mut seen: HashMap<isize, bool> = HashMap::new();\n  |      \
    \                                    ^^^^^^^ not found in this scope\n  |\nhelp:\
    \ consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0412, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    let mut\
    \ set: HashSet<isize> = HashSet::new();\n    for i in l {\n        let n = -i;\n\
    \        if set.contains(&n) {\n            return true;\n        }\n        set.insert(i);\n\
    \    }\n    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpwvgsvsrs.rs:5:18\n\
    \  |\n5 |     let mut set: HashSet<isize> = HashSet::new();\n  |             \
    \     ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n --> /tmp/tmpwvgsvsrs.rs:5:35\n  |\n5 |  \
    \   let mut set: HashSet<isize> = HashSet::new();\n  |                       \
    \            ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this\
    \ struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\n\
    For more information about an error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    // your\
    \ code here\n\n    //get index of first zero\n    let mut index = 0;\n    for\
    \ i in 0..l.len() {\n        if l[i] == 0 {\n            index = i;\n        \
    \    break;\n        }\n    }\n\n    //make sure index is not the last index\n\
    \    if index == l.len() - 1 {\n        return false;\n    }\n\n    //check the\
    \ next index to see if 0\n    if l[index + 1] == 0 {\n        return true;\n \
    \   } else {\n        return false;\n    }\n}\n\nfn main() {\n    let candidate\
    \ = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpe37bb7lr.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822498
- exit_code: 0
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    for i in\
    \ 0..l.len() {\n        for j in i + 1..l.len() {\n            if l[i] + l[j]\
    \ == 0 {\n                return true;\n            }\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822497
- exit_code: 0
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    //panic!(\"\
    Not yet implemented\");\n    for x in l.iter() {\n        for y in l.iter() {\n\
    \            if x != y && x + y == 0 {\n                return true;\n       \
    \     }\n        }\n    }\n    return false;\n}\n\nfn main() {\n    let candidate\
    \ = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822498
- exit_code: 0
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    for i in\
    \ 0..l.len() {\n        for j in i + 1..l.len() {\n            if l[i] + l[j]\
    \ == 0 {\n                return true;\n            }\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822497
- exit_code: 0
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    for i in\
    \ 0..l.len() {\n        for j in (i + 1)..l.len() {\n            if l[i] + l[j]\
    \ == 0 {\n                return true;\n            }\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822497
- exit_code: 0
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    for i in\
    \ 0..l.len() {\n        for j in i+1..l.len() {\n            if l[i] + l[j] ==\
    \ 0 {\n                return true;\n            }\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822497
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n  let mut seen\
    \ = HashSet::new();\n  for i in l {\n    if seen.contains(&(-i)) {\n      return\
    \ true;\n    }\n    seen.insert(i);\n  }\n  false\n}\n\nfn main() {\n    let candidate\
    \ = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmplj2p28uq.rs:5:18\n  |\n5 |   let mut seen = HashSet::new();\n  |   \
    \               ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 0
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    // The\
    \ list is empty, and the empty list does not contain any pair that\n    // sums\
    \ to zero.\n    if l.len() == 0 {\n        return false;\n    }\n\n    // The\
    \ list has only one element, there is no pair of elements,\n    // so there cannot\
    \ be a pair that sums to zero.\n    if l.len() == 1 {\n        return false;\n\
    \    }\n\n    // The list has two elements, so check if they sum to zero.\n  \
    \  if l.len() == 2 {\n        return l[0] + l[1] == 0;\n    }\n\n    // There\
    \ are at least 3 elements in the list.\n    // Process the first one, and check\
    \ if it pairs with any of the other\n    // elements to sum to zero.\n    let\
    \ first = l[0];\n    for i in 1..l.len() {\n        if first + l[i] == 0 {\n \
    \           return true;\n        }\n    }\n\n    // None of the elements paired\
    \ with the first element to sum to zero.\n    // Process the rest of the list\
    \ and recursively check if any of the\n    // elements in it pair with any of\
    \ the other elements to sum to zero.\n    pairs_sum_to_zero(l[1..].to_vec())\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822498
- exit_code: 0
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    let mut\
    \ l = l;\n    l.sort();\n    let mut left = 0;\n    let mut right = l.len() -\
    \ 1;\n    while left < right {\n        let sum = l[left] + l[right];\n      \
    \  if sum == 0 {\n            return true;\n        } else if sum < 0 {\n    \
    \        left += 1;\n        } else {\n            right -= 1;\n        }\n  \
    \  }\n    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n  \
    \  assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822498
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    let mut\
    \ hash = HashSet::new();\n    for i in l {\n        if hash.contains(&(-i)) {\n\
    \            return true;\n        }\n        hash.insert(i);\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpgs4226u6.rs:5:20\n  |\n5 |     let mut hash = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    let mut\
    \ my_dict = HashMap::new();\n    for i in l {\n        if my_dict.contains_key(&(-i))\
    \ {\n            return true;\n        }\n        my_dict.insert(i, 1);\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmph949_1lc.rs:5:23\n  |\n5 |     let mut my_dict = HashMap::new();\n \
    \ |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpk6ncwff_.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822497
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    let mut\
    \ m: HashMap<isize, isize> = HashMap::new();\n    for num in l {\n        if m.contains_key(&-num)\
    \ {\n            return true;\n        }\n        *m.entry(num).or_insert(0) +=\
    \ 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashMap` in this scope\n --> /tmp/tmpxl8e5uvp.rs:5:16\n\
    \  |\n5 |     let mut m: HashMap<isize, isize> = HashMap::new();\n  |        \
    \        ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashMap`\n --> /tmp/tmpxl8e5uvp.rs:5:40\n  |\n5 |  \
    \   let mut m: HashMap<isize, isize> = HashMap::new();\n  |                  \
    \                      ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\n\
    For more information about an error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 0
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    for (a,\
    \ b) in l.iter().enumerate() {\n        for c in l.iter().skip(a + 1) {\n    \
    \        if *b + *c == 0 {\n                return true;\n            }\n    \
    \    }\n    }\n    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822498
- exit_code: 0
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    for i in\
    \ 0..l.len() {\n        for j in (i + 1)..l.len() {\n            if l[i] + l[j]\
    \ == 0 {\n                return true;\n            }\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822497
- exit_code: 0
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    if l.len()\
    \ < 2 {\n        return false;\n    }\n\n    for i in 1..l.len() {\n        for\
    \ j in 0..i {\n            if l[i] + l[j] == 0 {\n                return true;\n\
    \            }\n        }\n    }\n\n    false\n}\n\nfn main() {\n    let candidate\
    \ = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822498
- exit_code: 0
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    for i in\
    \ l.iter() {\n        for j in l.iter() {\n            if *i + *j == 0 && i !=\
    \ j {\n                return true;\n            }\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822498
- exit_code: 0
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    // your\
    \ code here\n    //---------------------------------------\n    // let mut s:\
    \ HashSet<isize> = HashSet::new();\n    // for i in l.iter() {\n    //     if\
    \ s.contains(&-i) {\n    //         return true;\n    //     }\n    //     s.insert(*i);\n\
    \    // }\n    // return false;\n    //---------------------------------------\n\
    \    let mut v = l.clone();\n    v.sort();\n    let mut i = 0;\n    let mut j\
    \ = v.len() - 1;\n    while i < j {\n        let sum = v[i] + v[j];\n        if\
    \ sum == 0 {\n            return true;\n        } else if sum < 0 {\n        \
    \    i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    return\
    \ false;\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822498
- exit_code: 0
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    for x in\
    \ &l {\n        for y in &l {\n            if x != y && x + y == 0 {\n       \
    \         return true;\n            }\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822498
- exit_code: 0
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    for i in\
    \ l.iter() {\n        for j in l.iter() {\n            if i != j && i + j == 0\
    \ {\n                return true;\n            }\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822497
- exit_code: 0
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    for i in\
    \ 0..l.len() {\n        for j in (i + 1)..l.len() {\n            if l[i] + l[j]\
    \ == 0 {\n                return true;\n            }\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822497
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpk6ncwff_.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822497
- exit_code: 0
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    let mut\
    \ l_plus: Vec<isize> = Vec::new();\n    let mut l_minus: Vec<isize> = Vec::new();\n\
    \    for x in l {\n        if x > 0 {\n            l_plus.push(x);\n        }\
    \ else {\n            l_minus.push(x);\n        }\n    }\n    l_plus.sort();\n\
    \    l_minus.sort();\n    let mut i: usize = 0;\n    let mut j: usize = 0;\n \
    \   while i < l_plus.len() && j < l_minus.len() {\n        if l_plus[i] + l_minus[j]\
    \ == 0 {\n            return true;\n        } else if l_plus[i] + l_minus[j] <\
    \ 0 {\n            i += 1;\n        } else {\n            j += 1;\n        }\n\
    \    }\n    return false;\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822498
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpk6ncwff_.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822497
- exit_code: 0
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    // we return\
    \ false if the vector is empty.\n    if l.len() == 0 {\n        return false;\n\
    \    }\n\n    // in the remaining cases we compare each element of the vector\
    \ with\n    // every other element of the vector.  if there are two distinct\n\
    \    // elements that sum to zero, return true.  else return false.\n    for i\
    \ in 0..l.len()-1 {\n        for j in i+1..l.len() {\n            if l[i] + l[j]\
    \ == 0 {\n                return true;\n            }\n        }\n    }\n    return\
    \ false;\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822498
- exit_code: 0
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    for i in\
    \ 0..l.len() {\n        for j in i + 1..l.len() {\n            if l[i] + l[j]\
    \ == 0 {\n                return true;\n            }\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822497
- exit_code: 0
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    // Write\
    \ your code here\n    // ----------------------------------------\n\n    // Iterate\
    \ through each item\n    for (index, item) in l.iter().enumerate() {\n       \
    \ // Other items\n        for item2 in l.iter().skip(index + 1) {\n          \
    \  // If the items sum to zero,\n            if item + item2 == 0 {\n        \
    \        // Return true\n                return true;\n            }\n       \
    \ }\n    }\n\n    // Return false\n    false\n\n    // ----------------------------------------\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822498
- exit_code: 0
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    let mut\
    \ l = l;\n    l.sort();\n    let mut i = 0;\n    let mut j = l.len() - 1;\n  \
    \  while i < j {\n        let sum = l[i] + l[j];\n        if sum < 0 {\n     \
    \       i += 1;\n        } else if sum > 0 {\n            j -= 1;\n        } else\
    \ {\n            return true;\n        }\n    }\n    false\n}\n\nfn main() {\n\
    \    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5,\
    \ 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822498
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpk6ncwff_.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822497
- exit_code: 0
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    for i in\
    \ 0..l.len() {\n        for j in i + 1..l.len() {\n            if l[i] + l[j]\
    \ == 0 {\n                return true;\n            }\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822497
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    // Fill\
    \ in the code here\n    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpb7nqyuiw.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822498
- exit_code: 0
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    let mut\
    \ result = false;\n    let mut i = 0;\n    let l_len = l.len();\n    while i <\
    \ l_len && !result {\n        let mut j = i + 1;\n        while j < l_len && !result\
    \ {\n            result = l[i] + l[j] == 0;\n            j += 1;\n        }\n\
    \        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822498
- exit_code: 0
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    let mut\
    \ found = false;\n    let mut integers = l.clone();\n    integers.sort();\n  \
    \  for i in 0..integers.len() - 1 {\n        for j in i + 1..integers.len() {\n\
    \            if integers[i] + integers[j] == 0 {\n                found = true;\n\
    \            }\n        }\n    }\n    found\n}\n\nfn main() {\n    let candidate\
    \ = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822498
- exit_code: 0
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    for i in\
    \ 0..l.len() {\n        for j in i+1..l.len() {\n            if l[i] + l[j] ==\
    \ 0 {\n                return true;\n            }\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822497
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    // The\
    \ faster solution is iterating over the list with two pointers.\n    //\n    //\
    \ For example, consider the list: [0, -3, -3, 0, -1, -1, 1, 2, 3]\n    //\n  \
    \  // The first pointer points to the first element, 0, and the second\n    //\
    \ pointer points to the second element, -3.\n    //\n    // The two pointers'\
    \ values sum to -3, so we move the second pointer\n    // to the right by one,\
    \ until the sum of their values is 0.\n    //\n    // When the sum of the two\
    \ values is 0, we found the solution.\n    //\n    // Since there are duplicate\
    \ elements in the list, we can optimise the\n    // solution by skipping elements\
    \ that have the same value as the element\n    // on the right of the second pointer.\n\
    \    //\n    // This happens when the first pointer is at index 0, and the second\n\
    \    // pointer is at index 2, since the elements at those indices have the\n\
    \    // same value, -3.\n    //\n    // As soon as the two pointers reach the\
    \ end of the list, if no\n    // solution was found, we can stop the iteration\
    \ and return False.\n    let mut first = 0;\n    let mut second = 1;\n    let\
    \ mut len = l.len();\n\n    while first < len && second < len {\n        if l[first]\
    \ + l[second] == 0 {\n            return true;\n        }\n\n        if second\
    \ < len - 1 && l[second] == l[second + 1] {\n            second += 1;\n      \
    \  } else {\n            first += 1;\n            second = first + 1;\n      \
    \  }\n    }\n\n    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp5him9tb5.rs:52:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822498
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    let mut\
    \ seen: HashSet<isize> = HashSet::new();\n    for elem in l {\n        if seen.contains(&(-elem))\
    \ {\n            return true;\n        }\n        seen.insert(elem);\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpjato35vx.rs:5:19\n\
    \  |\n5 |     let mut seen: HashSet<isize> = HashSet::new();\n  |            \
    \       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n --> /tmp/tmpjato35vx.rs:5:36\n  |\n5 |  \
    \   let mut seen: HashSet<isize> = HashSet::new();\n  |                      \
    \              ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\n\
    For more information about an error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659822498
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpnwn0mm46.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822497
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpk6ncwff_.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822497
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    let mut\
    \ hash_table = HashSet::new();\n    for element in l {\n        if hash_table.contains(&(-element))\
    \ {\n            return true;\n        }\n        hash_table.insert(element);\n\
    \    }\n    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpn4cflyhm.rs:5:26\n  |\n5 |     let mut hash_table = HashSet::new();\n\
    \  |                          ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659822498
- exit_code: 0
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    if l.len()\
    \ < 2 {\n        return false;\n    }\n    let mut l = l;\n    l.sort();\n   \
    \ let mut i = 0;\n    let mut j = l.len() - 1;\n    while i < j {\n        if\
    \ l[i] + l[j] == 0 {\n            return true;\n        } else if l[i] + l[j]\
    \ < 0 {\n            i += 1;\n        } else {\n            j -= 1;\n        }\n\
    \    }\n    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822498
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    l.len()\
    \ < 2\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp435_39wd.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822498
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    // TODO:\
    \ Complete this function\n    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp7_r5k7e8.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822498
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    // A list\
    \ with one element can never have a pair summing to zero\n    if l.len() < 2 {\n\
    \        return false;\n    }\n\n    // For each element in the list, check if\
    \ the number's\n    // negative is in the list. If so, return true.\n    for num\
    \ in l {\n        if l.contains(&(-num)) {\n            return true;\n       \
    \ }\n    }\n\n    // If none of the elements in the list has a negative that is\
    \ also\n    // in the list, return false.\n    false\n}\n\nfn main() {\n    let\
    \ candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `l`\n    --> /tmp/tmphhrrugpt.rs:13:12\n\
    \     |\n4    | fn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n     |        \
    \              - move occurs because `l` has type `Vec<isize>`, which does not\
    \ implement the `Copy` trait\n...\n12   |     for num in l {\n     |         \
    \       -\n     |                |\n     |                `l` moved due to this\
    \ implicit call to `.into_iter()`\n     |                help: consider borrowing\
    \ to avoid moving into the for loop: `&l`\n13   |         if l.contains(&(-num))\
    \ {\n     |            ^^^^^^^^^^^^^^^^^^^ value borrowed here after move\n  \
    \   |\nnote: this function takes ownership of the receiver `self`, which moves\
    \ `l`\n     = note: borrow occurs due to deref coercion to `[isize]`\nnote: deref\
    \ defined here\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659822498
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    // This\
    \ is a hint. Given the structure of `is_distinct_nums_sum_to_zero`\n    // below,\
    \ this is a useful helper function.\n    fn contains_zero(l: &Vec<isize>) -> bool\
    \ {\n        l.contains(&0)\n    }\n\n    // This function takes a list of integers\
    \ as an input.\n    // It returns true if there are two distinct integers that\
    \ sum to zero,\n    // and false otherwise.\n    fn is_distinct_nums_sum_to_zero(l:\
    \ &Vec<isize>) -> bool {\n        if l.len() < 2 {\n            return false;\n\
    \        }\n\n        let rest = l.iter().skip(1).cloned().collect();\n      \
    \  let first = l[0];\n\n        if contains_zero(&rest) {\n            return\
    \ true;\n        } else {\n            return is_distinct_nums_sum_to_zero(&rest)\
    \ ||\n                   is_distinct_nums_sum_to_zero(&rest.iter().map(|x| first\
    \ + x).collect());\n        }\n    }\n\n    is_distinct_nums_sum_to_zero(&l)\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmptm6k_ebf.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822498
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    let mut\
    \ negatives = Vec::new();\n    let mut positives = Vec::new();\n    for i in l\
    \ {\n        if i < 0 {\n            negatives.push(i);\n        } else {\n  \
    \          positives.push(i);\n        }\n    }\n    negatives.sort();\n    positives.sort();\n\
    \    let mut neg_idx = 0;\n    let mut pos_idx = 0;\n    while neg_idx < negatives.len()\
    \ && pos_idx < positives.len() {\n        if negatives[neg_idx] + positives[pos_idx]\
    \ == 0 {\n            return true;\n        } else if negatives[neg_idx] + positives[pos_idx]\
    \ < 0 {\n            neg_idx += 1;\n        } else {\n            pos_idx += 1;\n\
    \        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp9mxtwgr1.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822498
- exit_code: 0
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    let mut\
    \ v: Vec<isize> = l.clone();\n    v.sort();\n    v.dedup();\n    let n = v.len();\n\
    \    for i in 0..n {\n        for j in i + 1..n {\n            if v[i] + v[j]\
    \ == 0 {\n                return true;\n            }\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822498
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    // I defined\
    \ this function using two `for` loops.\n    // Please rewrite this function using\
    \ `iterators` instead.\n    // Also, make sure the function gets rid of duplicates\n\
    \    // and return True only if there are TWO distinct elements in the list that\
    \ sum to zero\n    let (zero, one) = l.iter().cloned().partition(|&x| x == 0);\n\
    \    let (positive, negative) = one.into_iter().partition(|&x| x > 0);\n    //\
    \ make use of set\n    let set: HashSet<_> = negative.into_iter().collect();\n\
    \    // here we use the map() method to apply our closure to every element of\
    \ the list\n    // also, using filter() method we filter every element based on\
    \ our logic of checking if\n    // we have a negative counterpart in the set\n\
    \    positive.into_iter().map(|x| -x).filter(|x| set.contains(x)).count() >= 2\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n  --> /tmp/tmp1v08xklk.rs:12:14\n\
    \   |\n12 |     let set: HashSet<_> = negative.into_iter().collect();\n   |  \
    \            ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this\
    \ struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0412`.\n"
  stdout: ''
  timestamp: 1659822498
- exit_code: 0
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    for x in\
    \ l.iter() {\n        for y in l.iter() {\n            if *x + *y == 0 && x !=\
    \ y {\n                return true;\n            }\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822498
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    let mut\
    \ hash_map = HashMap::new();\n    for num in l {\n        hash_map.insert(num,\
    \ num);\n    }\n    for num in l {\n        if hash_map.contains_key(&(-num))\
    \ {\n            return true;\n        }\n    }\n    false\n}\n\nfn main() {\n\
    \    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5,\
    \ 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmpf2gbh85o.rs:5:24\n  |\n5 |     let mut hash_map = HashMap::new();\n\
    \  |                        ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659822498
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    // Check\
    \ the input before we allocate the hashmap.\n    if l.len() < 2 {\n        return\
    \ false;\n    }\n\n    // Initialize the hashmap\n    let mut h: HashMap<isize,\
    \ bool> = HashMap::new();\n\n    // Insert the negatives of all the elements into\
    \ the hashmap\n    for e in l {\n        let n = -e;\n        h.insert(n, true);\n\
    \    }\n\n    // Check if the hashmap contains the element itself\n    for e in\
    \ l {\n        if h.contains_key(&e) {\n            return true;\n        }\n\
    \    }\n\n    // None of the elements sum to zero with the negatives of themselves.\n\
    \    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashMap` in this scope\n  --> /tmp/tmpuhn8wzzj.rs:11:16\n\
    \   |\n11 |     let mut h: HashMap<isize, bool> = HashMap::new();\n   |      \
    \          ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this\
    \ struct\n   |\n1  | use std::collections::HashMap;\n   |\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashMap`\n  --> /tmp/tmpuhn8wzzj.rs:11:39\n\
    \   |\n11 |     let mut h: HashMap<isize, bool> = HashMap::new();\n   |      \
    \                                 ^^^^^^^ not found in this scope\n   |\nhelp:\
    \ consider importing this struct\n   |\n1  | use std::collections::HashMap;\n\
    \   |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0412, E0433.\nFor more information about an error, try `rustc\
    \ --explain E0412`.\n"
  stdout: ''
  timestamp: 1659822498
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    let mut\
    \ s: HashSet<isize> = HashSet::new();\n    for x in l {\n        if x == 0 {\n\
    \            if s.contains(&0) {\n                return true;\n            }\
    \ else {\n                s.insert(0);\n            }\n        } else {\n    \
    \        if s.contains(&(-x)) {\n                return true;\n            } else\
    \ {\n                s.insert(x);\n            }\n        }\n    }\n    return\
    \ false;\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpsmjttxlv.rs:5:16\n\
    \  |\n5 |     let mut s: HashSet<isize> = HashSet::new();\n  |               \
    \ ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n --> /tmp/tmpsmjttxlv.rs:5:33\n  |\n5 |  \
    \   let mut s: HashSet<isize> = HashSet::new();\n  |                         \
    \        ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0412, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659822498
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    if l.len()\
    \ < 2 {\n        return false;\n    }\n    let mut found = false;\n    let sorted_list\
    \ = l.clone();\n    let mut l_iter = sorted_list.iter();\n    l_iter.sort();\n\
    \    let mut high = l_iter.last().unwrap();\n    let mut low = l_iter.first().unwrap();\n\
    \    let mut low_index = 0;\n    let mut high_index = l.len() - 1;\n    while\
    \ low_index < high_index {\n        if low_index == high_index {\n           \
    \ break;\n        }\n        if low_index + 1 == high_index {\n            low_index\
    \ += 1;\n            low = &l[low_index];\n            continue;\n        }\n\
    \        if high_index - 1 == low_index {\n            high_index -= 1;\n    \
    \        high = &l[high_index];\n            continue;\n        }\n        if\
    \ low + high == &0 {\n            found = true;\n            break;\n        }\
    \ else if low + high > &0 {\n            high_index -= 1;\n            high =\
    \ &l[high_index];\n        } else {\n            low_index += 1;\n           \
    \ low = &l[low_index];\n        }\n    }\n    found\n}\n\nfn main() {\n    let\
    \ candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort` found for struct `std::slice::Iter`\
    \ in the current scope\n  --> /tmp/tmp1p_us7ip.rs:11:12\n   |\n11 |     l_iter.sort();\n\
    \   |            ^^^^ method not found in `std::slice::Iter<'_, isize>`\n\nerror[E0599]:\
    \ no method named `first` found for struct `std::slice::Iter` in the current scope\n\
    \  --> /tmp/tmp1p_us7ip.rs:13:26\n   |\n13 |     let mut low = l_iter.first().unwrap();\n\
    \   |                          ^^^^^ method not found in `std::slice::Iter<'_,\
    \ isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1p_us7ip.rs:30:26\n\
    \   |\n30 |         if low + high == &0 {\n   |                          ^^ expected\
    \ `isize`, found `&{integer}`\n   |\nhelp: consider removing the borrow\n   |\n\
    30 -         if low + high == &0 {\n30 +         if low + high == 0 {\n   | \n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp1p_us7ip.rs:33:32\n   |\n33 |\
    \         } else if low + high > &0 {\n   |                                ^^\
    \ expected `isize`, found `&{integer}`\n   |\nhelp: consider removing the borrow\n\
    \   |\n33 -         } else if low + high > &0 {\n33 +         } else if low +\
    \ high > 0 {\n   | \n\nerror: aborting due to 4 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822498
- exit_code: 0
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    for i in\
    \ 0..l.len() {\n        for j in i + 1..l.len() {\n            if l[i] + l[j]\
    \ == 0 {\n                return true;\n            }\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822497
- exit_code: 0
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    // If the\
    \ length of the vector is less than 2,\n    // then the vector cannot contain\
    \ two distinct elements that sum to zero.\n    if l.len() < 2 {\n        return\
    \ false;\n    }\n\n    // We'll need an empty vector that we can add numbers to.\n\
    \    let mut nums = Vec::new();\n\n    // We'll need to check each number in the\
    \ input vector to see if it\n    // sums to zero with another number in the vector.\n\
    \    for &n in &l {\n        // If a number in the input vector is already in\
    \ the `nums` vector,\n        // then we've found two numbers in the input vector\
    \ that sum to zero.\n        if nums.contains(&n) {\n            return true;\n\
    \        }\n\n        // Otherwise, we need to add the current number to the `nums`\
    \ vector\n        // so that we can check future numbers in the input vector for\
    \ a sum\n        // of zero.\n        nums.push(-n);\n    }\n\n    // If none\
    \ of the numbers in the input vector can be summed to zero with\n    // another\
    \ number in the input vector, then we should return false.\n    false\n}\n\nfn\
    \ main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822498
- exit_code: 0
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    let mut\
    \ v = Vec::new();\n    for (a, b) in l.iter().enumerate() {\n        for &c in\
    \ v.iter() {\n            if c + b == 0 {\n                return true;\n    \
    \        }\n        }\n        v.push(*b);\n    }\n    false\n}\n\nfn main() {\n\
    \    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5,\
    \ 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822498
- exit_code: 0
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    let n =\
    \ l.len();\n    for i in 0..n-1 {\n        for j in i+1..n {\n            if l[i]\
    \ + l[j] == 0 {\n                return true;\n            }\n        }\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822498
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    // The\
    \ list is empty.\n    if l.len() == 0 {\n        return false;\n    }\n\n    //\
    \ Define a new set that contains the elements in the input list.\n    let mut\
    \ set = HashSet::new();\n    for &x in &l {\n        set.insert(x);\n    }\n\n\
    \    // Check whether -x is in the set.\n    for &x in &l {\n        if set.contains(&(-x))\
    \ {\n            return true;\n        }\n    }\n\n    false\n}\n\nfn main() {\n\
    \    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5,\
    \ 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmphb3f9uiy.rs:11:19\n   |\n11 |     let mut set = HashSet::new();\n  \
    \ |                   ^^^^^^^ not found in this scope\n   |\nhelp: consider importing\
    \ this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659822498
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    // YOUR\
    \ CODE HERE\n    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp02n0efso.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822498
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    // TODO:\
    \ First, write the solution below this comment.\n    //\n    // Hint: You can\
    \ create a new empty list like this:\n    // let mut new_list: Vec<isize> = Vec::new();\n\
    \    //\n    // You can append elements to an existing list like this:\n    //\
    \ new_list.push(1);\n    // new_list.push(2);\n    //\n    // Remember to use\
    \ early return statements!\n    //\n    // TODO: Replace the \"false\" below with\
    \ your solution.\n    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp_mbme76b.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822498
- exit_code: 0
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    for i in\
    \ 0..l.len() {\n        for j in (i + 1)..l.len() {\n            if l[i] + l[j]\
    \ == 0 {\n                return true;\n            }\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822497
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    // Declare\
    \ the used variables.\n    let mut v1: Vec<isize> = Vec::new();\n    let mut v2:\
    \ Vec<isize> = Vec::new();\n    let mut v3: Vec<isize> = Vec::new();\n    let\
    \ mut v4: Vec<isize> = Vec::new();\n    let mut itr: usize = 0;\n    let mut is_neg:\
    \ bool = false;\n    let mut is_pos: bool = false;\n    let mut is_zero: bool\
    \ = false;\n    let mut is_neg_zero: bool = false;\n    let mut is_pos_zero: bool\
    \ = false;\n    let mut is_pair: bool = false;\n\n    for i in l {\n        //\
    \ Check for positive and negative numbers.\n        if i < 0 {\n            is_neg\
    \ = true;\n            v1.push(i);\n        } else if i > 0 {\n            is_pos\
    \ = true;\n            v2.push(i);\n        } else {\n            // Check for\
    \ Zero if any.\n            is_zero = true;\n        }\n    }\n\n    // Check\
    \ for Pairs.\n    if is_neg && is_pos {\n        for i in v1 {\n            for\
    \ j in v2.iter() {\n                if i + j == 0 {\n                    is_pair\
    \ = true;\n                }\n            }\n        }\n    }\n\n    // Check\
    \ for Zero if any and Pairs with zero.\n    if is_zero {\n        while itr <\
    \ l.len() {\n            if l[itr] < 0 {\n                is_neg_zero = true;\n\
    \                v3.push(l[itr]);\n            } else if l[itr] > 0 {\n      \
    \          is_pos_zero = true;\n                v4.push(l[itr]);\n           \
    \ }\n            itr += 1;\n        }\n        if is_neg_zero && is_pos_zero {\n\
    \            for i in v3 {\n                for j in v4.iter() {\n           \
    \         if i + j == 0 {\n                        is_pair = true;\n         \
    \           }\n                }\n            }\n        }\n    }\n\n    // Return\
    \ the result\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpznygeqiw.rs:56:13\n   |\n\
    4  |   fn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n   |                   \
    \                       ---- expected `bool` because of return type\n...\n56 |\
    \ /             for i in v3 {\n57 | |                 for j in v4.iter() {\n58\
    \ | |                     if i + j == 0 {\n59 | |                         is_pair\
    \ = true;\n60 | |                     }\n61 | |                 }\n62 | |    \
    \         }\n   | |_____________^ expected `bool`, found `()`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659822498
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    let mut\
    \ l1 = l.clone();\n    let mut l2 = l.clone();\n    l1.pop();\n    l2.remove(0);\n\
    \    match (l1.len(), l2.len()) {\n        (0, _) => false,\n        (_, 0) =>\
    \ false,\n        _ => {\n            let sum1 = l1.iter().sum();\n          \
    \  let sum2 = l2.iter().sum();\n            if sum1 == 0 || sum2 == 0 {\n    \
    \            true\n            } else {\n                pairs_sum_to_zero(l1)\
    \ || pairs_sum_to_zero(l2)\n            }\n        }\n    }\n}\n\nfn main() {\n\
    \    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5,\
    \ 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmpbcszxlgb.rs:13:17\n\
    \   |\n13 |             let sum1 = l1.iter().sum();\n   |                 ^^^^\
    \ consider giving `sum1` a type\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659822498
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    // Phase\
    \ 1: Error handling\n    // Check that l is not empty.\n    if l.len() == 0 {\n\
    \        panic!(\"pairs_sum_to_zero: empty list\");\n    }\n\n    // Phase 2:\
    \ Initialize the hashmap\n    // Initialize an empty hashmap.\n    let mut h:\
    \ HashMap<isize, bool> = HashMap::new();\n\n    // Phase 3: Loop over the list\n\
    \    // Loop over each element in the list,\n    for i in l {\n        // and\
    \ for each element, check to see if the element's\n        // additive inverse\
    \ is in the hashmap.\n        if h.contains_key(&(-i)) {\n            // If so,\
    \ then return True.\n            return true;\n        }\n        // If the element's\
    \ additive inverse is not in the hashmap,\n        // then add it to the hashmap.\n\
    \        h.insert(i, true);\n    }\n\n    // If we get this far, that means that\
    \ there are no pairs of elements\n    // in the list that sum to zero, so return\
    \ False.\n    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashMap` in this scope\n  --> /tmp/tmpnk7ei1gy.rs:13:16\n\
    \   |\n13 |     let mut h: HashMap<isize, bool> = HashMap::new();\n   |      \
    \          ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this\
    \ struct\n   |\n1  | use std::collections::HashMap;\n   |\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashMap`\n  --> /tmp/tmpnk7ei1gy.rs:13:39\n\
    \   |\n13 |     let mut h: HashMap<isize, bool> = HashMap::new();\n   |      \
    \                                 ^^^^^^^ not found in this scope\n   |\nhelp:\
    \ consider importing this struct\n   |\n1  | use std::collections::HashMap;\n\
    \   |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0412, E0433.\nFor more information about an error, try `rustc\
    \ --explain E0412`.\n"
  stdout: ''
  timestamp: 1659822498
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    let mut\
    \ seen = HashSet::new();\n    for x in l {\n        if seen.contains(&(-x)) {\n\
    \            return true;\n        }\n        seen.insert(x);\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpxrkuk6fu.rs:5:20\n  |\n5 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659822498
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    let mut\
    \ n: usize = l.len();\n    let mut start: usize = 0;\n    let mut end: usize =\
    \ n - 1;\n    while start < end {\n        if l[start] + l[end] == 0 {\n     \
    \       return true;\n        } else if l[start] + l[end] < 0 {\n            start\
    \ += 1;\n        } else {\n            end -= 1;\n        }\n    }\n    return\
    \ false;\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpedqfuwog.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822498
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    let mut\
    \ s = HashSet::new();\n    for n in l {\n        if s.contains(&-n) {\n      \
    \      return true;\n        }\n        s.insert(n);\n    }\n    false\n}\n\n\
    fn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp5g_k2vro.rs:5:17\n  |\n5 |     let mut s = HashSet::new();\n  |    \
    \             ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this\
    \ struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659822498
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    let mut\
    \ h: HashSet<isize> = HashSet::new();\n    for n in l {\n        if h.contains(&(-n))\
    \ {\n            return true;\n        }\n        h.insert(n);\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmp7vtri6c5.rs:5:16\n\
    \  |\n5 |     let mut h: HashSet<isize> = HashSet::new();\n  |               \
    \ ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n --> /tmp/tmp7vtri6c5.rs:5:33\n  |\n5 |  \
    \   let mut h: HashSet<isize> = HashSet::new();\n  |                         \
    \        ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0412, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659822498
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    // `set`\
    \ is a new HashSet.\n    let mut set = HashSet::new();\n\n    // For each integer\
    \ `i` in `l`, ...\n    for i in l {\n        // ... see if we can find `-i` in\
    \ the set.\n        // If so, return True.\n        if set.contains(&(-i)) {\n\
    \            return true;\n        }\n\n        // Otherwise, add `i` to the set.\n\
    \        set.insert(i);\n    }\n\n    // If we get to this point, there were no\
    \ pairs\n    // whose sum was zero.\n    false\n}\n\nfn main() {\n    let candidate\
    \ = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmprto6n_a4.rs:6:19\n  |\n6 |     let mut set = HashSet::new();\n  |  \
    \                 ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659822498
- exit_code: 0
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    for i in\
    \ l.iter() {\n        for j in l.iter() {\n            if i != j && i + j == 0\
    \ {\n                return true;\n            }\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822497
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    let l_len\
    \ = l.len();\n    let mut i: usize = 0;\n    let mut j: usize = 0;\n    let mut\
    \ diff: isize = 0;\n    let mut sum: isize = 0;\n    let mut dict: HashMap<isize,\
    \ isize> = HashMap::new();\n    let mut check: isize = 0;\n\n    while i < l_len\
    \ {\n        if dict.contains_key(&l[i]) {\n            let count = dict.get(&l[i]).unwrap();\n\
    \            dict.insert(l[i], count + 1);\n        } else {\n            dict.insert(l[i],\
    \ 1);\n        }\n        i += 1;\n    }\n\n    while j < l_len {\n        sum\
    \ = 0 - l[j];\n        diff = sum - l[j];\n        if dict.contains_key(&diff)\
    \ {\n            check = *dict.get(&diff).unwrap();\n            if check > 1\
    \ || l[j] != diff {\n                return true;\n            }\n        }\n\
    \        j += 1;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate\
    \ = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashMap` in this scope\n  --> /tmp/tmpz878bzfb.rs:10:19\n\
    \   |\n10 |     let mut dict: HashMap<isize, isize> = HashMap::new();\n   |  \
    \                 ^^^^^^^ not found in this scope\n   |\nhelp: consider importing\
    \ this struct\n   |\n1  | use std::collections::HashMap;\n   |\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `HashMap`\n  --> /tmp/tmpz878bzfb.rs:10:43\n\
    \   |\n10 |     let mut dict: HashMap<isize, isize> = HashMap::new();\n   |  \
    \                                         ^^^^^^^ not found in this scope\n  \
    \ |\nhelp: consider importing this struct\n   |\n1  | use std::collections::HashMap;\n\
    \   |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0412, E0433.\nFor more information about an error, try `rustc\
    \ --explain E0412`.\n"
  stdout: ''
  timestamp: 1659822498
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    let mut\
    \ left: usize = 0;\n    let mut right: usize = l.len() - 1;\n    while left <\
    \ right {\n        let sum = l[left] + l[right];\n        if sum == 0 {\n    \
    \        return true;\n        } else if sum < 0 {\n            left += 1;\n \
    \       } else {\n            right -= 1;\n        }\n    }\n    false\n}\n\n\
    fn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpy81hzm13.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822498
- exit_code: 0
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    for i in\
    \ 0..l.len() {\n        for j in (i + 1)..l.len() {\n            if l[i] + l[j]\
    \ == 0 {\n                return true;\n            }\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822497
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    let mut\
    \ v = l.clone();\n    v.sort();\n    for i in 0..v.len() - 1 {\n        if v[i]\
    \ + v[i + 1] == 0 {\n            return true;\n        }\n    }\n    false\n}\n\
    \nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpm5prh20m.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822498
- exit_code: 0
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    for i in\
    \ l.iter() {\n        for j in l.iter() {\n            if (i != j) && (i + j ==\
    \ 0) {\n                return true;\n            }\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822498
- exit_code: 0
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    for i in\
    \ 0..l.len() {\n        for j in (i + 1)..l.len() {\n            if l[i] + l[j]\
    \ == 0 {\n                return true;\n            }\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822497
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    return\
    \ false;\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmph6j033ci.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822498
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    // TODO:\
    \ return true if there are two distinct elements in the list\n    // that sum\
    \ to zero, and false otherwise.\n    // hint: use a hashtable\n\n    // create\
    \ a hashmap to store the distinct elements\n    let mut map = HashMap::new();\n\
    \n    // iterate over the list and check if there are\n    // two distinct elements\
    \ whose sum is zero\n    for i in l {\n        // check if the opposite of the\
    \ current element exists in the map\n        if map.contains_key(&(-i)) {\n  \
    \          return true;\n        }\n        // if the opposite of the current\
    \ element does not exist,\n        // insert the current element in the map\n\
    \        map.insert(i, 1);\n    }\n\n    false\n}\n\nfn main() {\n    let candidate\
    \ = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n  -->\
    \ /tmp/tmp_qddm2uu.rs:10:19\n   |\n10 |     let mut map = HashMap::new();\n  \
    \ |                   ^^^^^^^ not found in this scope\n   |\nhelp: consider importing\
    \ this struct\n   |\n1  | use std::collections::HashMap;\n   |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659822498
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    let len\
    \ = l.len();\n    if len < 2 {\n        return false;\n    }\n    let mut s =\
    \ HashSet::with_capacity(len);\n    for i in l {\n        let j = -i;\n      \
    \  if s.contains(&j) {\n            return true;\n        }\n        s.insert(i);\n\
    \    }\n    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp0_tflkbo.rs:9:17\n  |\n9 |     let mut s = HashSet::with_capacity(len);\n\
    \  |                 ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659822498
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n  unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpt_mqzyby.rs:5:3

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822498
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    // TODO:\
    \ implement this function, and change the return value\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp9dn051q0.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822498
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    // create\
    \ an empty hash table\n    let mut h: HashMap<isize, bool> = HashMap::new();\n\
    \n    // for each element in the list\n    for i in l {\n        // check if a\
    \ hash table contains the opposite of i\n        if h.contains_key(&-i) {\n  \
    \          // if it does, return true\n            return true;\n        }\n \
    \       // if not, insert i into the hash table\n        h.insert(i, true);\n\
    \    }\n    // if you exit the loop, you have checked all of the elements\n  \
    \  // and have not found any pairs that sum to zero.\n    // return false\n  \
    \  false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashMap` in this scope\n --> /tmp/tmpzoi1gk1a.rs:6:16\n\
    \  |\n6 |     let mut h: HashMap<isize, bool> = HashMap::new();\n  |         \
    \       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashMap`\n --> /tmp/tmpzoi1gk1a.rs:6:39\n  |\n6 |  \
    \   let mut h: HashMap<isize, bool> = HashMap::new();\n  |                   \
    \                    ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\n\
    For more information about an error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659822498
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpk6ncwff_.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822497
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    let mut\
    \ values = HashSet::new();\n    for &n in &l {\n        if values.contains(&-n)\
    \ {\n            return true;\n        }\n        values.insert(n);\n    }\n \
    \   false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmppwb05o3a.rs:5:22\n  |\n5 |     let mut values = HashSet::new();\n  |\
    \                      ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659822498
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    /* Implement\
    \ `pairs_sum_to_zero` here */\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmprk9_bohj.rs:4:40\n  |\n4 |\
    \ fn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n  |    -----------------    \
    \               ^^^^ expected `bool`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659822498
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    /* borrow_pairs_sum_to_zero(l)\
    \ */\n    /* slice_pairs_sum_to_zero(l) */\n    /* slice_iter_pairs_sum_to_zero(l)\
    \ */\n    /* mut_borrow_pairs_sum_to_zero(l) */\n    /* unsafe_pairs_sum_to_zero(l)\
    \ */\n    unsafe_iter_pairs_sum_to_zero(l)\n}\n\nfn main() {\n    let candidate\
    \ = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `unsafe_iter_pairs_sum_to_zero` in this\
    \ scope\n  --> /tmp/tmpoif0mm7f.rs:10:5\n   |\n10 |     unsafe_iter_pairs_sum_to_zero(l)\n\
    \   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659822498
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpk6ncwff_.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822497
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    // TODO:\
    \ Implement me!\n    return false;\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpoi2p8ofb.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822498
- exit_code: 0
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    for v in\
    \ l.iter() {\n        for w in l.iter() {\n            if v != w && v + w == 0\
    \ {\n                return true;\n            }\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822498
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpk6ncwff_.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822497
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpk6ncwff_.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822497
- exit_code: 0
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    for i in\
    \ 0..l.len() {\n        for j in i + 1..l.len() {\n            if l[i] + l[j]\
    \ == 0 {\n                return true;\n            }\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822497
- exit_code: 0
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    for i in\
    \ 0..l.len() {\n        for j in i + 1..l.len() {\n            if l[i] + l[j]\
    \ == 0 {\n                return true;\n            }\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822497
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    // borrow\
    \ input list\n    let bl = &l;\n    // consume the input list\n    let v: Vec<isize>\
    \ = l;\n    // compute maximum value and minimum value in the list\n    let min\
    \ = v.iter().min().unwrap();\n    let max = v.iter().max().unwrap();\n    // create\
    \ a hashset, to store the elements of the list in\n    let mut h: HashSet<isize>\
    \ = HashSet::new();\n    // for each element in the list,\n    for i in *bl {\n\
    \        // if the complement of the element (i.e. -i) is in the hashset,\n  \
    \      if h.contains(&(-i)) {\n            // then return true\n            return\
    \ true;\n        }\n        // if the element is between the minimum and maximum\
    \ values,\n        // or if the element is the minimum or maximum value,\n   \
    \     if (i >= min && i <= max) || i == min || i == max {\n            // then\
    \ add the element to the hashset\n            h.insert(i);\n        }\n    }\n\
    \    // return false, if no elements sum to zero\n    false\n}\n\nfn main() {\n\
    \    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5,\
    \ 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n  --> /tmp/tmpyed37i3n.rs:13:16\n\
    \   |\n13 |     let mut h: HashSet<isize> = HashSet::new();\n   |            \
    \    ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this struct\n\
    \   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n  --> /tmp/tmpyed37i3n.rs:13:33\n   |\n13\
    \ |     let mut h: HashSet<isize> = HashSet::new();\n   |                    \
    \             ^^^^^^^ not found in this scope\n   |\nhelp: consider importing\
    \ this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpyed37i3n.rs:23:18\n   |\n23 |         if (i\
    \ >= min && i <= max) || i == min || i == max {\n   |                  ^^^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    23 |         if (i >= *min && i <= max) || i == min || i == max {\n   |      \
    \            +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyed37i3n.rs:23:30\n\
    \   |\n23 |         if (i >= min && i <= max) || i == min || i == max {\n   |\
    \                              ^^^ expected `isize`, found `&isize`\n   |\nhelp:\
    \ consider dereferencing the borrow\n   |\n23 |         if (i >= min && i <= *max)\
    \ || i == min || i == max {\n   |                              +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpyed37i3n.rs:23:43\n   |\n23 |         if (i\
    \ >= min && i <= max) || i == min || i == max {\n   |                        \
    \                   ^^^ expected `isize`, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n23 |         if (i >= min && i <= max) || i\
    \ == *min || i == max {\n   |                                           +\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpyed37i3n.rs:23:55\n   |\n23 |  \
    \       if (i >= min && i <= max) || i == min || i == max {\n   |            \
    \                                           ^^^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n23 |         if (i >= min\
    \ && i <= max) || i == min || i == *max {\n   |                          "
  stdout: ''
  timestamp: 1659822498
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    let mut\
    \ has_zero = false;\n    let mut all_negs = HashSet::new();\n    let mut all_pos\
    \ = HashSet::new();\n    for elem in l {\n        if elem == 0 {\n           \
    \ has_zero = true;\n        } else if elem < 0 {\n            all_negs.insert(elem);\n\
    \        } else {\n            all_pos.insert(elem);\n        }\n    }\n    let\
    \ mut has_pairs = false;\n    for elem in all_negs {\n        if all_pos.contains(&(-elem))\
    \ {\n            has_pairs = true;\n        }\n    }\n    return has_zero && has_pairs;\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpjhamhe6v.rs:6:24\n  |\n6 |     let mut all_negs = HashSet::new();\n\
    \  |                        ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmpjhamhe6v.rs:7:23\n\
    \  |\n7 |     let mut all_pos = HashSet::new();\n  |                       ^^^^^^^\
    \ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 |\
    \ use std::collections::HashSet;\n  |\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659822498
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    let mut\
    \ l = l;\n    l.sort();\n    for i in l.iter() {\n        let neg_i = -i;\n  \
    \      if l.binary_search(&neg_i).is_ok() {\n            return true;\n      \
    \  }\n    }\n    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpit33mh7y.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822499
- exit_code: 0
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    for (i,\
    \ num) in l.iter().enumerate() {\n        for (j, num2) in l.iter().enumerate()\
    \ {\n            if i != j && num + num2 == 0 {\n                return true;\n\
    \            }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822499
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmprau0yrwe.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    //    if\
    \ l.len() == 0 {\n    //        return false;\n    //    }\n\n    //    let mut\
    \ l = l;\n    //    l.sort();\n    //    let mut i = 0;\n    //    let mut j =\
    \ l.len() - 1;\n    //    while i < j {\n    //        if l[i] + l[j] == 0 {\n\
    \    //            return true;\n    //        } else if l[i] + l[j] < 0 {\n \
    \   //            i += 1;\n    //        } else {\n    //            j -= 1;\n\
    \    //        }\n    //    }\n    //    false\n\n    if l.len() == 0 {\n    \
    \    return false;\n    }\n\n    let mut l = l;\n    l.sort();\n    l.windows(2).any(|x|\
    \ x[0] + x[1] == 0)\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpticiske2.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822499
- exit_code: 0
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    let mut\
    \ found = false;\n    for i in 0..l.len() {\n        for j in (i + 1)..l.len()\
    \ {\n            if l[i] + l[j] == 0 {\n                found = true;\n      \
    \      }\n        }\n    }\n    found\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822499
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    let mut\
    \ m = HashMap::new();\n    for i in l {\n        let d = m.entry(i).or_insert(0);\n\
    \        *d += 1;\n    }\n    for i in l {\n        let c = m.get(&i).unwrap();\n\
    \        if i == 0 && *c > 1 {\n            return true;\n        }\n        if\
    \ i != 0 && m.contains_key(&(-i)) {\n            return true;\n        }\n   \
    \ }\n    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n   \
    \ assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmp8pyz69v2.rs:5:17\n  |\n5 |     let mut m = HashMap::new();\n  |    \
    \             ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this\
    \ struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659822498
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    let mut\
    \ lset = l.iter().cloned().collect::<HashSet<isize>>();\n    for i in l {\n  \
    \      if lset.contains(&(-i)) {\n            return true;\n        }\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpd4mswkwd.rs:5:48\n\
    \  |\n5 |     let mut lset = l.iter().cloned().collect::<HashSet<isize>>();\n\
    \  |                                                ^^^^^^^ not found in this\
    \ scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659822498
- exit_code: 0
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    for &i\
    \ in &l {\n        for &j in &l {\n            if i == j {\n                continue;\n\
    \            }\n            if i + j == 0 {\n                return true;\n  \
    \          }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822499
- exit_code: 0
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    let mut\
    \ list = l;\n    for _i in 0..list.len() {\n        for _j in _i+1..list.len()\
    \ {\n            if list[_i] + list[_j] == 0 {\n                return true;\n\
    \            }\n        }\n    }\n    return false;\n}\n\nfn main() {\n    let\
    \ candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822499
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    let mut\
    \ map: HashMap<isize, isize> = HashMap::new();\n    for i in l {\n        if map.contains_key(&-i)\
    \ {\n            return true;\n        }\n        *map.entry(i).or_insert(0) +=\
    \ 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashMap` in this scope\n --> /tmp/tmp3ne4lped.rs:5:18\n\
    \  |\n5 |     let mut map: HashMap<isize, isize> = HashMap::new();\n  |      \
    \            ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this\
    \ struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashMap`\n --> /tmp/tmp3ne4lped.rs:5:42\n\
    \  |\n5 |     let mut map: HashMap<isize, isize> = HashMap::new();\n  |      \
    \                                    ^^^^^^^ not found in this scope\n  |\nhelp:\
    \ consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0412, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659822498
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    let mut\
    \ map = HashMap::new();\n    for elt in l {\n        let mut count = map.entry(elt).or_insert(0);\n\
    \        *count += 1;\n    }\n    for elt in l {\n        let count = map.entry(elt).or_insert(0);\n\
    \        if *count > 1 && elt == 0 {\n            return true;\n        }\n  \
    \      if map.contains_key(&(-elt)) {\n            return true;\n        }\n \
    \   }\n    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n \
    \   assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmp_pzw06wr.rs:5:19\n  |\n5 |     let mut map = HashMap::new();\n  |  \
    \                 ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659822498
- exit_code: 0
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    for x in\
    \ l.iter() {\n        for y in l.iter() {\n            if x != y && x + y == 0\
    \ {\n                return true;\n            }\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822499
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    // 0 is\
    \ not a valid element of l, as it is not distinct.\n    if l.len() == 0 {\n  \
    \      return false;\n    }\n\n    // We also need at least two elements of l\
    \ to sum to zero.\n    //\n    // l.len() == 1 is already checked for us by the\
    \ first if-statement,\n    // so we only need to handle the case of l.len() ==\
    \ 2 explicitly.\n    if l.len() == 2 {\n        if l[0] + l[1] == 0 {\n      \
    \      return true;\n        } else {\n            return false;\n        }\n\
    \    }\n\n    // l.len() is at least 3 by now.\n    //\n    // The array of elements\
    \ distinct to 0 can contain at most l.len() - 1\n    // elements, so we make it\
    \ a vector of the right size.\n    let mut distinct: Vec<isize> = Vec::with_capacity(l.len()\
    \ - 1);\n\n    // We collect all of the distinct elements, and put them in the\
    \ distinct\n    // vector. This vector should be sorted, so that we can perform\
    \ a binary\n    // search later.\n    for e in l {\n        if e != 0 {\n    \
    \        distinct.push(e);\n        }\n    }\n\n    // We sort the vector of distinct\
    \ elements. This is necessary for a binary\n    // search later.\n    distinct.sort();\n\
    \n    // A binary search finds the target value if it exists, or the position\n\
    \    // where it would be inserted otherwise.\n    //\n    // If a binary search\
    \ yields the target value, then we found a pair of\n    // elements that sum to\
    \ zero. If the binary search yields the position\n    // where the target value\
    \ would be inserted, then there is no such pair.\n    //\n    // We have to check\
    \ the position it would be inserted either way, so we\n    // use the binary search\
    \ to find the position, and then check whether\n    // that position contains\
    \ the target.\n    for e in distinct.iter() {\n        let pos = distinct.binary_search(e);\n\
    \        if pos.is_ok() {\n            return true;\n        }\n    }\n\n    //\
    \ At this point, we have found no pair that sums to zero.\n    return false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp4y36jd7k.rs:64:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822499
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    // use\
    \ a hashmap to store each element of the list as the key and a\n    // boolean\
    \ to mark if the complement to the element has been seen.\n    let mut nums =\
    \ HashMap::new();\n    for num in l {\n        match nums.get(&(-num)) {\n   \
    \         Some(&true) => return true,\n            _ => {\n                nums.insert(num,\
    \ false);\n            }\n        }\n    }\n    false\n}\n\nfn main() {\n    let\
    \ candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmp6e0djhgf.rs:7:20\n  |\n7 |     let mut nums = HashMap::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659822498
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    let mut\
    \ sum : isize = 0;\n    for num in l {\n        sum += num;\n    }\n    let mut\
    \ l2 = l;\n    let l_len = l.len();\n    let mut i = 0;\n    while i < l_len -\
    \ 1 {\n        let v = l[i];\n        let mut j = i + 1;\n        while j < l_len\
    \ {\n            let w = l[j];\n            if v + w == 0 {\n                return\
    \ true;\n            }\n            j += 1;\n        }\n        i += 1;\n    }\n\
    \    return false;\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "warning: variable `sum` is assigned to, but never used\n --> /tmp/tmpnubip9nk.rs:5:13\n\
    \  |\n5 |     let mut sum : isize = 0;\n  |             ^^^\n  |\n  = note: `#[warn(unused_variables)]`\
    \ on by default\n  = note: consider using `_sum` instead\n\nwarning: unused variable:\
    \ `l2`\n --> /tmp/tmpnubip9nk.rs:9:13\n  |\n9 |     let mut l2 = l;\n  |     \
    \        ^^ help: if this is intentional, prefix it with an underscore: `_l2`\n\
    \nwarning: variable does not need to be mutable\n --> /tmp/tmpnubip9nk.rs:9:9\n\
    \  |\n9 |     let mut l2 = l;\n  |         ----^^\n  |         |\n  |        \
    \ help: remove this `mut`\n  |\n  = note: `#[warn(unused_mut)]` on by default\n\
    \nerror[E0382]: use of moved value: `l`\n   --> /tmp/tmpnubip9nk.rs:9:18\n   \
    \ |\n4   | fn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    |              \
    \        - move occurs because `l` has type `Vec<isize>`, which does not implement\
    \ the `Copy` trait\n5   |     let mut sum : isize = 0;\n6   |     for num in l\
    \ {\n    |                -\n    |                |\n    |                `l`\
    \ moved due to this implicit call to `.into_iter()`\n    |                help:\
    \ consider borrowing to avoid moving into the for loop: `&l`\n...\n9   |     let\
    \ mut l2 = l;\n    |                  ^ value used here after move\n    |\nnote:\
    \ this function takes ownership of the receiver `self`, which moves `l`\n\nerror[E0382]:\
    \ borrow of moved value: `l`\n  --> /tmp/tmpnubip9nk.rs:10:17\n   |\n4  | fn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n   |                      - move occurs because `l` has\
    \ type `Vec<isize>`, which does not implement the `Copy` trait\n...\n9  |    \
    \ let mut l2 = l;\n   |                  - value moved here\n10 |     let l_len\
    \ = l.len();\n   |                 ^ value borrowed here after move\n\nerror:\
    \ aborting due to 2 previous errors; 3 warnings emitted\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659822498
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    return\
    \ false;\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmph6j033ci.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822498
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    // to avoid\
    \ double counting elements (e.g. (-1, 1) and (1, -1))\n    // we collect the elements\
    \ in a set, which discards repeated elements\n    let set = l.into_iter().collect::<HashSet<isize>>();\n\
    \n    // now we iterate over the set and check if there is an element in\n   \
    \ // the set equal to its negative\n    for x in set.iter() {\n        if set.contains(&-x)\
    \ {\n            return true;\n        }\n    }\n\n    // if we reach this point\
    \ we didn't find any pairs, so we return false\n    false\n}\n\nfn main() {\n\
    \    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5,\
    \ 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpov20_m_l.rs:7:39\n\
    \  |\n7 |     let set = l.into_iter().collect::<HashSet<isize>>();\n  |      \
    \                                 ^^^^^^^ not found in this scope\n  |\nhelp:\
    \ consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659822498
- exit_code: 0
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    let mut\
    \ items = l.clone();\n    items.sort();\n    let mut low = 0;\n    let mut high\
    \ = items.len() - 1;\n    while low < high {\n        let sum = items[low] + items[high];\n\
    \        if sum == 0 {\n            return true;\n        } else if sum < 0 {\n\
    \            low += 1;\n        } else {\n            high -= 1;\n        }\n\
    \    }\n    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822499
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    // TODO:\
    \ implement me\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmphv61u1f4.rs:6:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822499
- exit_code: 0
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    for i in\
    \ 0..l.len() {\n        for j in i+1..l.len() {\n            if l[i] + l[j] ==\
    \ 0 {\n                return true;\n            }\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822497
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    let mut\
    \ positives = HashSet::new();\n    let mut negatives = HashSet::new();\n    for\
    \ x in l {\n        if x > 0 {\n            positives.insert(x);\n        } else\
    \ if x < 0 {\n            negatives.insert(x);\n        } else {\n           \
    \ return true;\n        }\n    }\n    for x in positives {\n        if negatives.contains(&(-x))\
    \ {\n            return true;\n        }\n    }\n    false\n}\n\nfn main() {\n\
    \    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5,\
    \ 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp8h32j9b7.rs:5:25\n  |\n5 |     let mut positives = HashSet::new();\n\
    \  |                         ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp8h32j9b7.rs:6:25\n\
    \  |\n6 |     let mut negatives = HashSet::new();\n  |                       \
    \  ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659822499
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    // a place\
    \ to store pairs that we've seen\n    let mut seen = HashSet::new();\n\n    //\
    \ iterate through all the elements of the list\n    for num in l {\n        //\
    \ get the element that would make a zero-sum pair\n        let complement = -num;\n\
    \n        // we already saw the complement, we're done!\n        if seen.contains(&complement)\
    \ {\n            return true;\n        }\n\n        // haven't seen it yet? add\
    \ the number we just saw to the set\n        seen.insert(num);\n    }\n\n    //\
    \ if we got here, no pair sums to zero\n    false\n}\n\nfn main() {\n    let candidate\
    \ = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpamo2e6vf.rs:6:20\n  |\n6 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659822499
- exit_code: 0
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    // This\
    \ is a very ugly function!\n    // Can you write a better one?\n    let mut in_l\
    \ = l.clone();\n    in_l.sort();\n    let mut out = false;\n    let mut k = 0;\n\
    \    while k < in_l.len() {\n        let mut j = k + 1;\n        while j < in_l.len()\
    \ {\n            let sum = in_l[k] + in_l[j];\n            if sum == 0 {\n   \
    \             out = true;\n            }\n            j += 1;\n        }\n   \
    \     k += 1;\n    }\n    out\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822499
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    // Since\
    \ the list is sorted, we only need to check pairs that are next to each other\n\
    \    // At each iteration we check whether the first element and the last element\
    \ sum to 0.\n    // If they do, we have found a pair that sums to 0 and we can\
    \ return True.\n    // If not, the first element is too small, so we should increment\
    \ it.\n    // The last element is too large, so we should decrement it.\n    let\
    \ mut i = 0;\n    let mut j = l.len() - 1;\n    while i < j {\n        if l[i]\
    \ + l[j] == 0 {\n            return true;\n        } else if l[i] + l[j] < 0 {\n\
    \            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpw775qzjr.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822499
- exit_code: 0
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    for i in\
    \ 0..l.len()-1 {\n        for j in i+1..l.len() {\n            if l[i] + l[j]\
    \ == 0 {\n                return true;\n            }\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822499
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    true\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp17klwz4r.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 0
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    // todo!()\n\
    \    let mut l = l;\n    l.sort();\n    l.dedup();\n    let mut i = 0;\n    let\
    \ len = l.len();\n    while i < len {\n        let mut j = i + 1;\n        while\
    \ j < len {\n            if l[i] + l[j] == 0 {\n                return true;\n\
    \            }\n            j += 1;\n        }\n        i += 1;\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822499
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    let mut\
    \ numbers = HashSet::new();\n    for n in l {\n        if numbers.contains(&(-n))\
    \ {\n            return true;\n        }\n        numbers.insert(n);\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp4srh8gm7.rs:5:23\n  |\n5 |     let mut numbers = HashSet::new();\n \
    \ |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659822499
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    let mut\
    \ seen = HashSet::new();\n    for n in l {\n        if seen.contains(&(-n)) {\n\
    \            return true;\n        }\n        seen.insert(n);\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp6ay5g01_.rs:5:20\n  |\n5 |     let mut seen = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659822499
- exit_code: 0
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    // TODO\n\
    \    let mut fl = false;\n    for i in l.iter() {\n        for j in l.iter() {\n\
    \            if i + j == 0 && i != j {\n                fl = true;\n         \
    \   }\n        }\n    }\n    fl\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822499
- exit_code: 0
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    l.iter().enumerate().any(|(i,\
    \ &x)| l.iter().skip(i + 1).any(|&y| x + y == 0))\n}\n\nfn main() {\n    let candidate\
    \ = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822499
- exit_code: 0
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    for i in\
    \ 0..l.len() {\n        for j in (i + 1)..l.len() {\n            if l[i] + l[j]\
    \ == 0 {\n                return true;\n            }\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822497
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    let mut\
    \ result = false;\n    let mut set = HashSet::new();\n    for elem in l {\n  \
    \      if set.contains(&-elem) {\n            result = true;\n            break;\n\
    \        }\n        set.insert(elem);\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5,\
    \ 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpj6edzatk.rs:6:19\n  |\n6 |     let mut set = HashSet::new();\n  |  \
    \                 ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659822499
- exit_code: 0
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    let mut\
    \ l = l;\n    l.sort();\n    let mut lo = 0;\n    let mut hi = l.len() - 1;\n\
    \    while lo < hi {\n        let s = l[lo] + l[hi];\n        if s == 0 {\n  \
    \          return true;\n        } else if s < 0 {\n            lo += 1;\n   \
    \     } else {\n            hi -= 1;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822499
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpnwn0mm46.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822497
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    // Construct\
    \ a list of sublists for the first n integers.\n    let mut sublists = Vec::new();\n\
    \    let len = l.len();\n    for i in 0..len {\n        let mut sublist = Vec::new();\n\
    \        sublist.push(l[i]);\n        sublists.push(sublist);\n    }\n\n    //\
    \ For each integer n, we generate the list of all sublists\n    // of the first\
    \ n+1 integers, using the list of sublists of\n    // the first n integers.\n\
    \    for i in 1..len {\n        let mut new_sublists = Vec::new();\n        for\
    \ j in 0..i {\n            let mut added_sublist = sublists[j].clone();\n    \
    \        added_sublist.push(l[i]);\n            new_sublists.push(added_sublist);\n\
    \        }\n        sublists.push(l[i].clone());\n        sublists.append(&mut\
    \ new_sublists);\n    }\n\n    // Check the generated list for a sublist whose\
    \ sum is zero.\n    for sublist in sublists {\n        let mut sum = 0;\n    \
    \    for n in sublist {\n            sum += n;\n        }\n        if sum == 0\
    \ {\n            return true;\n        }\n    }\n    false\n}\n\nfn main() {\n\
    \    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5,\
    \ 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2398xxte.rs:24:23\n   |\n\
    24 |         sublists.push(l[i].clone());\n   |                       ^^^^^^^^^^^^\
    \ expected struct `Vec`, found `isize`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \                found type `isize`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822499
- exit_code: 0
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    // TODO:\
    \ write the code for this function.\n    // Suggestion: you can use a nested for\
    \ loop.\n    for i in 0..l.len() {\n        for j in i + 1..l.len() {\n      \
    \      if l[i] + l[j] == 0 {\n                return true;\n            }\n  \
    \      }\n    }\n    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822499
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpk6ncwff_.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822497
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    let mut\
    \ s: HashSet<isize> = HashSet::new();\n    for n in l {\n        if s.contains(&(-n))\
    \ {\n            return true;\n        }\n        s.insert(n);\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpodivygvk.rs:5:16\n\
    \  |\n5 |     let mut s: HashSet<isize> = HashSet::new();\n  |               \
    \ ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashSet`\n --> /tmp/tmpodivygvk.rs:5:33\n  |\n5 |  \
    \   let mut s: HashSet<isize> = HashSet::new();\n  |                         \
    \        ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0412, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659822499
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpk6ncwff_.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822497
- exit_code: 0
  program: "/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
    \ True if there are two distinct elements in the list that\n/// sum to zero, and\
    \ False otherwise.\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    // sum[i,\
    \ j] = l[i] + l[j] where i != j\n    let mut sum: Vec<isize> = Vec::new();\n \
    \   for (i, _) in l.iter().enumerate() {\n        for (j, _) in l.iter().enumerate()\
    \ {\n            if i != j {\n                sum.push(l[i] + l[j]);\n       \
    \     }\n        }\n    }\n    // check if sum has zero\n    for i in sum {\n\
    \        if i == 0 {\n            return true;\n        }\n    }\n    return false;\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822499
