language: rs
name: HumanEval_31_is_prime
results:
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    let sq = (n as f64).sqrt();\n    for i in 2..(sq as isize\
    \ + 1) {\n        if n % i == 0 {\n            return false;\n        }\n    }\n\
    \    true\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp_joekfaw.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822367
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    if n <= 1 {\n        return false;\n    }\n    for i in\
    \ 2..n {\n        if n % i == 0 {\n            return false;\n        }\n    }\n\
    \    true\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822367
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    for i in 2..n {\n        if n % i == 0 {\n           \
    \ return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpeaud3ork.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822367
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    // 1 is not prime.\n    if n == 1 {\n        return false;\n\
    \    }\n\n    // 2 is prime.\n    if n == 2 {\n        return true;\n    }\n\n\
    \    // All even numbers are not prime.\n    if n % 2 == 0 {\n        return false;\n\
    \    }\n\n    // Start at 3 and only check odd numbers.\n    let mut i = 3;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            return false;\n\
    \        }\n        i += 2;\n    }\n\n    return true;\n}\n\nfn main() {\n   \
    \ let candidate = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822367
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    if n <= 1 {\n        return false;\n    }\n\n    let mut\
    \ i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n            return\
    \ false;\n        }\n        i += 1;\n    }\n\n    true\n}\n\nfn main() {\n  \
    \  let candidate = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822367
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    if n <= 1 {\n        return false;\n    }\n\n    if n\
    \ == 2 {\n        return true;\n    }\n\n    for i in 2..(n / 2 + 1) {\n     \
    \   if n % i == 0 {\n            return false;\n        }\n    }\n\n    true\n\
    }\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822367
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    let max = (n as f64).sqrt() as isize;\n    (2..(max +\
    \ 1)).all(|p| n % p != 0)\n}\n\nfn main() {\n    let candidate = is_prime;\n \
    \   assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101), true);\n\
    \    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441), true);\n\
    \    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp636ob9bo.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822367
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    // The number 1 has no prime divisors, but is not prime.\n\
    \    if n == 1 {\n        return false;\n    }\n\n    // The number 2 is the only\
    \ even prime.\n    if n == 2 {\n        return true;\n    }\n\n    // The only\
    \ even prime is 2. So no even number can be prime.\n    if n % 2 == 0 {\n    \
    \    return false;\n    }\n\n    // Count the number of divisors of the given\
    \ number.\n    let mut count = 0;\n\n    // Check if the number is divisible by\
    \ k, for all k in the range [1, n].\n    for k in 1..n + 1 {\n        if n % k\
    \ == 0 {\n            count += 1;\n        }\n    }\n\n    // A prime number is\
    \ only divisible by 1 and itself.\n    count == 2\n}\n\nfn main() {\n    let candidate\
    \ = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822367
- exit_code: 1
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n+    // No number is divisible by 1.\n    if n == 1 {\n  \
    \      return false;\n    }\n    // No number is divisible by itself.\n    if\
    \ n == 2 {\n        return true;\n    }\n    // No number is divisible by a number\n\
    \    // greater than itself.\n    for i in 2..n {\n        if n % i == 0 {\n \
    \           return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let\
    \ candidate = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `+`\n --> /tmp/tmpq9njqb6j.rs:3:1\n \
    \ |\n3 | +    // No number is divisible by 1.\n  | ^ expected expression\n\nerror:\
    \ aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1659822367
- exit_code: 1
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    // Check if the number is even and not 2.\n    if n >\
    \ 2 && n % 2 == 0 {\n        return false;\n    }\n\n    // Check if the number\
    \ is divisible by a number less than the square root of n.\n    for i in 3..(1\
    \ + n as f64).sqrt() as isize {\n        if n % i == 0 {\n            return false;\n\
    \        }\n    }\n\n    // No divisors found, so n is prime.\n    true\n}\n\n\
    fn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6), false);\n\
    \    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11), true);\n\
    \    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61), true);\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add `f64` to `{integer}`\n --> /tmp/tmp0i0fualw.rs:9:20\n\
    \  |\n9 |     for i in 3..(1 + n as f64).sqrt() as isize {\n  |              \
    \      ^ no implementation for `{integer} + f64`\n  |\n  = help: the trait `Add<f64>`\
    \ is not implemented for `{integer}`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659822367
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    match n {\n        0 | 1 => false,\n        2 => true,\n\
    \        _ => {\n            // This algorithm will work for all numbers that\
    \ are not a multiple of any\n            // prime smaller than the square root\
    \ of the number.\n            let limit = (n as f64).sqrt() as isize;\n      \
    \      for i in 2..limit + 1 {\n                if n % i == 0 {\n            \
    \        return false;\n                }\n            }\n            true\n \
    \       }\n    }\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822367
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    if n < 2 {\n        return false;\n    }\n\n    let limit\
    \ = (n as f64).sqrt() as isize + 1;\n    (2..limit).all(|x| n % x != 0)\n}\n\n\
    fn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6), false);\n\
    \    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11), true);\n\
    \    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61), true);\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822367
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    if n <= 1 {\n        return false;\n    }\n\n    let limit\
    \ = (n as f64).sqrt() as isize + 1;\n    for p in 2..limit {\n        if n % p\
    \ == 0 {\n            return false;\n        }\n    }\n\n    true\n}\n\nfn main()\
    \ {\n    let candidate = is_prime;\n    assert_eq!(candidate(6), false);\n   \
    \ assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11), true);\n  \
    \  assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61), true);\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822367
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    if n < 2 {\n        return false;\n    }\n\n    let mut\
    \ i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n            return\
    \ false;\n        }\n        i += 1;\n    }\n\n    true\n}\n\nfn main() {\n  \
    \  let candidate = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822367
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    let last = (n as f64).sqrt() as isize;\n    for i in 2..(last\
    \ + 1) {\n        if n % i == 0 {\n            return false;\n        }\n    }\n\
    \    true\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp1gnzcaz3.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822367
- exit_code: 1
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n+ 1_isize\n+\n+   // if n is less than 2, return false\n \
    \  if n < 2 {\n+ 1_isize\n+ 1_isize\n+ 1_isize\n     return false;\n   }\n\n+\
    \ 1_isize\n+\n   // if n is 2, return true\n   if n == 2 {\n+ 1_isize\n+ 1_isize\n\
    + 1_isize\n     return true;\n   }\n\n+ 1_isize\n+\n   // if n is even, return\
    \ false\n   if n % 2 == 0 {\n+ 1_isize\n+ 1_isize\n+ 1_isize\n     return false;\n\
    \   }\n\n+ 1_isize\n+\n   // iterate from 3 to n/2, checking whether n is divisible\
    \ by i\n   for i in (3..n / 2 + 1).step_by(2) {\n+ 1_isize\n+ 1_isize\n+ 1_isize\n\
    + 1_isize\n+ 1_isize\n+ 1_isize\n+ 1_isize\n+ 1_isize\n+ 1_isize\n+ 1_isize\n\
    + 1_isize\n+ 1_isize\n+ 1_isize\n+ 1_isize\n+ 1_isize\n+ 1_isize\n+ 1_isize\n\
    + 1_isize\n+ 1_isize\n+ 1_isize\n+ 1_isize\n+ 1_isize\n+ 1_isize\n+ 1_isize\n\
    + 1_isize\n+ 1_isize\n+ 1_isize\n+ 1_isize\n+ 1_isize\n+ 1_isize\n+ 1_isize\n\
    + 1_isize\n+ 1_isize\n+ 1_isize\n+ 1_isize\n+ 1_isize\n+ 1_isize\n+ 1_isize\n\
    + 1_isize\n+ 1_isize\n+ 1_isize\n+ 1_isize\n+ 1_isize\n+ 1_isize\n+ 1_isize\n\
    + 1_isize\n+ 1_isize\n+ 1_isize\n+ 1_isize\n+ 1_isize\n+\n}\n\nfn main() {\n \
    \   let candidate = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpjsf3s_3p.rs:105:3\n\
    \    |\n2   | fn is_prime(n: isize) -> bool {\n    |                         \
    \      - unclosed delimiter\n...\n36  |    for i in (3..n / 2 + 1).step_by(2)\
    \ {\n    |                                       - this delimiter might not be\
    \ properly closed...\n...\n88  | }\n    | - ...as it matches this but it has different\
    \ indentation\n...\n105 | }\n    |   ^\n\nerror: expected expression, found `+`\n\
    \ --> /tmp/tmpjsf3s_3p.rs:3:1\n  |\n3 | + 1_isize\n  | ^ expected expression\n\
    \nerror: aborting due to 2 previous errors\n\n"
  stdout: ''
  timestamp: 1659822367
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    if n < 0 {\n        return false;\n    }\n\n    let sqrt_n\
    \ = (n as f64).sqrt() as isize;\n    for i in 2..(sqrt_n + 1) {\n        if n\
    \ % i == 0 {\n            return false;\n        }\n    }\n\n    true\n}\n\nfn\
    \ main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6), false);\n\
    \    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11), true);\n\
    \    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61), true);\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpvd6e6eul.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822367
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    if n < 2 {\n        return false;\n    }\n\n    let mut\
    \ d = 2;\n    while d * d <= n {\n        if n % d == 0 {\n            return\
    \ false;\n        }\n        d += 1;\n    }\n    true\n}\n\nfn main() {\n    let\
    \ candidate = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822367
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    if n <= 1 {\n        return false;\n    }\n    if n <=\
    \ 3 {\n        return true;\n    }\n    if n % 2 == 0 || n % 3 == 0 {\n      \
    \  return false;\n    }\n    let mut i = 5;\n    while i * i <= n {\n        if\
    \ n % i == 0 || n % (i + 2) == 0 {\n            return false;\n        }\n   \
    \     i += 6;\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_prime;\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101), true);\n\
    \    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441), true);\n\
    \    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822367
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    if n <= 1 {\n        return false;\n    }\n    let sq\
    \ = (n as f64).sqrt() as isize;\n    for i in 2..sq + 1 {\n        if n % i ==\
    \ 0 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822367
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    if n < 2 {\n        return false;\n    }\n    for i in\
    \ 2..n {\n        if n % i == 0 {\n            return false;\n        }\n    }\n\
    \    true\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822367
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    match n {\n        1 => false,\n        2 => true,\n \
    \       _ => {\n            for i in 2..n {\n                if n % i == 0 {\n\
    \                    return false;\n                }\n            }\n       \
    \     true\n        }\n    }\n}\n\nfn main() {\n    let candidate = is_prime;\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101), true);\n\
    \    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441), true);\n\
    \    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822367
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n  for i in 2..(n/2 + 1) {\n    if n % i == 0 {\n      return\
    \ false;\n    }\n  }\n  true\n}\n\nfn main() {\n    let candidate = is_prime;\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101), true);\n\
    \    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441), true);\n\
    \    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp_63zy6gc.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822367
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    let mut is_prime = true;\n    let root_n = (n as f64).sqrt()\
    \ as isize;\n    for i in 2..root_n + 1 {\n        if n % i == 0 {\n         \
    \   is_prime = false;\n            break;\n        }\n    }\n    is_prime\n}\n\
    \nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6), false);\n\
    \    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11), true);\n\
    \    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61), true);\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp1er_7iyn.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822367
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    if n <= 1 {\n        return false;\n    }\n    if n ==\
    \ 2 {\n        return true;\n    }\n    if n % 2 == 0 {\n        return false;\n\
    \    }\n    let mut p = 3;\n    while p <= (n as f64).sqrt() as isize {\n    \
    \    if n % p == 0 {\n            return false;\n        }\n        p += 2;\n\
    \    }\n    return true;\n}\n\nfn main() {\n    let candidate = is_prime;\n  \
    \  assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441), true);\n\
    \    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822367
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n  // A number is prime if its only divisors are 1 and itself.\n\
    \  // So, if we iterate through all numbers between 1 and itself, and\n  // see\
    \ whether or not any are divisors, we can test whether or not\n  // the number\
    \ is prime.\n\n  // We also know that a number is not prime if it is a multiple\
    \ of 2,\n  // so we only need to check the odd numbers.\n  for i in 3..n {\n \
    \   if i % 2 == 0 {\n      continue;\n    }\n\n    if n % i == 0 {\n      return\
    \ false;\n    }\n  }\n\n  return true;\n}\n\nfn main() {\n    let candidate =\
    \ is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpydgft194.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822367
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    for i in 2..n {\n        if n % i == 0 {\n           \
    \ return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpeaud3ork.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822367
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    // Must be greater than 1.\n    if n <= 1 {\n        return\
    \ false;\n    }\n\n    // Must be divisible by 1 and itself.\n    for factor in\
    \ 2..n {\n        if n % factor == 0 {\n            return false;\n        }\n\
    \    }\n\n    return true;\n}\n\nfn main() {\n    let candidate = is_prime;\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101), true);\n\
    \    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441), true);\n\
    \    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822367
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    let max = (n as f64).sqrt() as isize;\n    for i in 2..max\
    \ {\n        if n % i == 0 {\n            return false;\n        }\n    }\n  \
    \  true\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmph29w0b8q.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822367
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    if n <= 3 {\n        return n > 1;\n    } else if n %\
    \ 2 == 0 || n % 3 == 0 {\n        return false;\n    }\n\n    let mut i = 5;\n\
    \    while i * i <= n {\n        if n % i == 0 || n % (i + 2) == 0 {\n       \
    \     return false;\n        }\n        i += 6;\n    }\n\n    true\n}\n\nfn main()\
    \ {\n    let candidate = is_prime;\n    assert_eq!(candidate(6), false);\n   \
    \ assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11), true);\n  \
    \  assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61), true);\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822367
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    if n < 2 {\n        return false;\n    }\n    for d in\
    \ 2..n {\n        if n % d == 0 {\n            return false;\n        }\n    }\n\
    \    true\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822367
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    if n < 2 {\n        return false;\n    }\n\n    for i\
    \ in 2..n {\n        if n % i == 0 {\n            return false;\n        }\n \
    \   }\n\n    true\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822367
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    if n <= 3 {\n        return n > 1;\n    } else if n %\
    \ 2 == 0 || n % 3 == 0 {\n        return false;\n    }\n\n    let mut i = 5;\n\
    \    while i * i <= n {\n        if n % i == 0 || n % (i + 2) == 0 {\n       \
    \     return false;\n        }\n        i += 6;\n    }\n\n    true\n}\n\nfn main()\
    \ {\n    let candidate = is_prime;\n    assert_eq!(candidate(6), false);\n   \
    \ assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11), true);\n  \
    \  assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61), true);\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822367
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    for i in 2..n {\n        if n % i == 0 {\n           \
    \ return false;\n        }\n    }\n    return true;\n}\n\nfn main() {\n    let\
    \ candidate = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp0x6afaiq.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822367
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    // If n is less than 2, then it's not prime.\n    if n\
    \ < 2 {\n        return false;\n    }\n\n    // If n is 2, then it's prime.\n\
    \    if n == 2 {\n        return true;\n    }\n\n    // If n is divisible by 2,\
    \ then it's not prime.\n    if n % 2 == 0 {\n        return false;\n    }\n\n\
    \    // If n is 3, then it's prime.\n    if n == 3 {\n        return true;\n \
    \   }\n\n    // If n is divisible by 3, then it's not prime.\n    if n % 3 ==\
    \ 0 {\n        return false;\n    }\n\n    // If n is greater than 3, then check\
    \ the multiples of 6k +- 1.\n    let mut i = 5;\n    while i * i <= n {\n    \
    \    if n % i == 0 || n % (i + 2) == 0 {\n            return false;\n        }\n\
    \        i += 6;\n    }\n\n    // n is prime.\n    true\n}\n\nfn main() {\n  \
    \  let candidate = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822367
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    let max_divisor = (n as f64).sqrt() as isize;\n    for\
    \ i in 2..max_divisor + 1 {\n        if n % i == 0 {\n            return false;\n\
    \        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_prime;\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101), true);\n\
    \    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441), true);\n\
    \    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp7tixiap4.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822367
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    let mut f = 2;\n    while f * f <= n {\n        if n %\
    \ f == 0 {\n            return false;\n        }\n        f += 1;\n    }\n   \
    \ true\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpjx276p70.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822367
- exit_code: 1
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    let mut primes = 2..isize::sqrt(n);\n    primes.all(|x|\
    \ n % x != 0)\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no function or associated item named `sqrt` found for type\
    \ `isize` in the current scope\n --> /tmp/tmpgi1vjy8b.rs:3:32\n  |\n3 |     let\
    \ mut primes = 2..isize::sqrt(n);\n  |                                ^^^^ function\
    \ or associated item not found in `isize`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659822367
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    if n < 2 {\n        return false;\n    }\n    let mut\
    \ d = 2;\n    while d * d <= n {\n        if n % d == 0 {\n            return\
    \ false;\n        }\n        d += 1;\n    }\n    true\n}\n\nfn main() {\n    let\
    \ candidate = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822367
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    // Primes are greater than one.\n    if n <= 1 {\n   \
    \     return false;\n    }\n\n    // Primes can't be even, except for 2.\n   \
    \ if n > 2 && n % 2 == 0 {\n        return false;\n    }\n\n    // Primes can't\
    \ be divisible by odds up to their square root.\n    for i in (3..).step_by(2)\
    \ {\n        let i_squared = i * i;\n        if i_squared > n {\n            break;\n\
    \        }\n        if n % i == 0 {\n            return false;\n        }\n  \
    \  }\n\n    true\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822367
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    for d in 2..(n as f64).sqrt() as isize + 1 {\n       \
    \ if n % d == 0 {\n            return false;\n        }\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6), false);\n\
    \    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11), true);\n\
    \    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61), true);\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpx5yqxc3v.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822367
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    let sqrt_limit = (n as f64).sqrt() as isize;\n    for\
    \ m in 2..sqrt_limit {\n        if n % m == 0 {\n            return false;\n \
    \       }\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_prime;\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101), true);\n\
    \    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441), true);\n\
    \    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpgwm95sqd.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822367
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    if n < 2 {\n        return false;\n    }\n\n    if n %\
    \ 2 == 0 {\n        return n == 2;\n    }\n\n    for i in (3..).step_by(2) {\n\
    \        if n % i == 0 {\n            return false;\n        }\n    }\n\n    true\n\
    }\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpo64euy08.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822367
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    let n = n as usize;\n    if n == 2 {\n        return true;\n\
    \    }\n    if n < 2 || n % 2 == 0 {\n        return false;\n    }\n    let m\
    \ = (n as f64).sqrt() as usize;\n    let mut i = 3;\n    while i <= m {\n    \
    \    if n % i == 0 {\n            return false;\n        }\n        i += 2;\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822367
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    // A number is prime if it's not divisible by any of the\
    \ primes below it.\n    let largest_divisor = (n as f64).sqrt() as isize;\n  \
    \  let mut i = 2;\n    while i <= largest_divisor {\n        if n % i == 0 {\n\
    \            return false;\n        }\n        i += 1;\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6), false);\n\
    \    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11), true);\n\
    \    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61), true);\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp55y_jbzk.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822367
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    if n <= 1 {\n        return false;\n    }\n\n    let sqrt\
    \ = (n as f64).sqrt().floor() as isize;\n    (2..=sqrt).all(|x| n % x != 0)\n\
    }\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822367
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    // 1 is not a prime.\n    if n == 1 {\n        return\
    \ false;\n    }\n\n    // 2 is the only even prime.\n    if n == 2 {\n       \
    \ return true;\n    }\n\n    // All even numbers are not primes.\n    if n % 2\
    \ == 0 {\n        return false;\n    }\n\n    // Check odd divisors from 3 to\
    \ sqrt(n).\n    let m = (n as f64).sqrt() as isize;\n    for i in (3..(m + 1)).step_by(2)\
    \ {\n        if n % i == 0 {\n            return false;\n        }\n    }\n\n\
    \    true\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822367
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    if n < 2 {\n        return false;\n    }\n\n    for i\
    \ in 2..(n as f64).sqrt() as isize + 1 {\n        if n % i == 0 {\n          \
    \  return false;\n        }\n    }\n\n    true\n}\n\nfn main() {\n    let candidate\
    \ = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822367
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    if n <= 1 {\n        return false;\n    }\n\n    let mut\
    \ factor = 2;\n    while factor * factor <= n {\n        if n % factor == 0 {\n\
    \            return false;\n        }\n        factor += 1;\n    }\n    true\n\
    }\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822367
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    if n <= 1 {\n        return false;\n    }\n    let mut\
    \ i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n            return\
    \ false;\n        }\n        i += 1;\n    }\n    true\n}\n\nfn main() {\n    let\
    \ candidate = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822367
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    // 1 is not a prime number.\n    if n <= 1 {\n       \
    \ return false;\n    }\n\n    // Only need to check up to the square root of the\
    \ number.\n    let upper_bound = (n as f64).sqrt() as isize;\n\n    // For each\
    \ number from 2 up to the square root, check if they divide into n.\n    for i\
    \ in 2..upper_bound {\n        if n % i == 0 {\n            return false;\n  \
    \      }\n    }\n\n    // No divisors were found, so the number is prime.\n  \
    \  true\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp8nbhpxl9.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822367
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    if n <= 1 {\n        return false;\n    }\n\n    let mut\
    \ i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n            return\
    \ false;\n        }\n        i += 1;\n    }\n\n    true\n}\n\nfn main() {\n  \
    \  let candidate = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822367
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    if n < 2 {\n        return false;\n    }\n\n    let mut\
    \ d = 2;\n    while d * d <= n {\n        if n % d == 0 {\n            return\
    \ false;\n        }\n        d += 1;\n    }\n    true\n}\n\nfn main() {\n    let\
    \ candidate = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822367
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    for i in 2..((n as f64).sqrt() as isize + 1) {\n     \
    \   if n % i == 0 {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp3d0ruvtr.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822367
- exit_code: 1
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    // This function is just a wrapper to call the is_prime_in_interval\n\
    \    // function, with default arguments.\n    return is_prime_in_interval(n,\
    \ 2, n);\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime_in_interval` in this scope\n\
    \ --> /tmp/tmps0r4_dwi.rs:5:12\n  |\n5 |     return is_prime_in_interval(n, 2,\
    \ n);\n  |            ^^^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659822367
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    if n < 2 {\n        return false;\n    }\n    // Check\
    \ every possible factor up to sqrt(n).\n    for i in 2..((n as f64).sqrt() as\
    \ isize + 1) {\n        if n % i == 0 {\n            return false;\n        }\n\
    \    }\n    return true;\n}\n\nfn main() {\n    let candidate = is_prime;\n  \
    \  assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441), true);\n\
    \    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822368
- exit_code: 1
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n+// Implement your solution here\n+\n+    if n==0 || n==1{\n\
    +        return false;\n+    }\n+    for i in 2..n {\n+        if n%i==0{\n+ \
    \           return false;\n+        }\n+    }\n+    return true;\n+}\n+\n+\n+#[test]\n\
    +fn test_is_prime() {\n+    assert_eq!(is_prime(0), false);\n+    assert_eq!(is_prime(1),\
    \ false);\n+    assert_eq!(is_prime(17), true);\n+    assert_eq!(is_prime(10000000000000),\
    \ false);\n+}\n\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error: unexpected closing delimiter: `}`\n  --> /tmp/tmpeb2w5dlk.rs:25:1\n\
    \   |\n18 | +fn test_is_prime() {\n   |                     - this opening brace...\n\
    ...\n23 | +}\n   |  - ...matches this closing brace\n24 | \n25 | }\n   | ^ unexpected\
    \ closing delimiter\n\nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1659822367
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    let limit = n as f64;\n    let sqrt_limit = limit.sqrt()\
    \ as isize;\n    for i in 2..sqrt_limit {\n        if n % i == 0 {\n         \
    \   return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp781agqz7.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822368
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    for i in 2..=(n as f64).sqrt() as isize {\n        if\
    \ n % i == 0 {\n            return false;\n        }\n    }\n    true\n}\n\nfn\
    \ main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6), false);\n\
    \    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11), true);\n\
    \    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61), true);\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpsz70rzx3.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822368
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    let mut i = 3;\n    while i * i <= n {\n        if n %\
    \ i == 0 {\n            return false;\n        }\n        i += 2;\n    }\n   \
    \ true\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpyd04_ebi.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822368
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    if n < 2 {\n        return false;\n    }\n\n    let max\
    \ = (n as f64).sqrt() as isize + 1;\n    for i in 2..max {\n        if n % i ==\
    \ 0 {\n            return false;\n        }\n    }\n\n    true\n}\n\nfn main()\
    \ {\n    let candidate = is_prime;\n    assert_eq!(candidate(6), false);\n   \
    \ assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11), true);\n  \
    \  assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61), true);\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822368
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    let sqr = (n as f64).sqrt() as isize;\n    for i in 2..sqr+1\
    \ {\n        if n % i == 0 {\n            return false;\n        }\n    }\n  \
    \  true\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpoa3ylzf9.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822368
- exit_code: 1
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n+   if n <= 1 {\n+       return false;\n+   }\n+\n+   for\
    \ i in 2..n {\n+       if n % i == 0 {\n+           return false;\n+       }\n\
    +   }\n+\n+   return true;\n+}\n+\n+/// Return a vector containing the prime factorization\
    \ of a given number.\nfn prime_factorization(n: isize) -> Vec<isize> {\n+   let\
    \ mut result = Vec::new();\n+\n+   let mut x = n;\n+   while x > 1 {\n+      \
    \ for i in 2..(x + 1) {\n+           if is_prime(i) && x % i == 0 {\n+       \
    \        result.push(i);\n+               x /= i;\n+               break;\n+ \
    \          }\n+       }\n+   }\n+\n+   return result;\n+}\n+\n+\n+#[test]\n+fn\
    \ is_prime_should_return_true_if_n_is_prime() {\n+   assert_eq!(is_prime(3), true);\n\
    +   assert_eq!(is_prime(5), true);\n+   assert_eq!(is_prime(7), true);\n+   assert_eq!(is_prime(11),\
    \ true);\n+   assert_eq!(is_prime(13), true);\n+   assert_eq!(is_prime(17), true);\n\
    +   assert_eq!(is_prime(19), true);\n+   assert_eq!(is_prime(23), true);\n+  \
    \ assert_eq!(is_prime(29), true);\n+   assert_eq!(is_prime(31), true);\n+   assert_eq!(is_prime(37),\
    \ true);\n+   assert_eq!(is_prime(41), true);\n+   assert_eq!(is_prime(43), true);\n\
    +   assert_eq!(is_prime(47), true);\n+   assert_eq!(is_prime(53), true);\n+  \
    \ assert_eq!(is_prime(59), true);\n+   assert_eq!(is_prime(61), true);\n}\n\n\
    fn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6), false);\n\
    \    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11), true);\n\
    \    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61), true);\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected expression, found `+`\n --> /tmp/tmpnsl21r17.rs:3:1\n \
    \ |\n3 | +   if n <= 1 {\n  | ^ expected expression\n\nerror: expected item, found\
    \ `+`\n  --> /tmp/tmpnsl21r17.rs:15:1\n   |\n15 | +\n   | ^ expected item\n\n\
    error: aborting due to 2 previous errors\n\n"
  stdout: ''
  timestamp: 1659822367
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    // Can handle up to sqrt(isize::MAX).\n    //\n    //\
    \ If n is greater than that, we have to bail out and say 'false' because\n   \
    \ // we'll overflow.\n    if n > 46341 {\n        return false;\n    }\n\n   \
    \ // All even numbers greater than 2 are not prime.\n    if n > 2 && n % 2 ==\
    \ 0 {\n        return false;\n    }\n\n    // Since we've already excluded 2,\
    \ we can start with 3 and step by 2.\n    let mut i = 3;\n    while i <= (n as\
    \ f64).sqrt() as isize {\n        if n % i == 0 {\n            return false;\n\
    \        }\n        i += 2;\n    }\n\n    true\n}\n\nfn main() {\n    let candidate\
    \ = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp_q8rzlrh.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822368
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    if n <= 1 {\n        return false;\n    }\n\n    for i\
    \ in 2..(n/2 + 1) {\n        if n % i == 0 {\n            return false;\n    \
    \    }\n    }\n\n    true\n}\n\nfn main() {\n    let candidate = is_prime;\n \
    \   assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101), true);\n\
    \    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441), true);\n\
    \    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822368
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    if n < 2 {\n        return false;\n    }\n    for i in\
    \ 2..(n / 2 + 1) {\n        if n % i == 0 {\n            return false;\n     \
    \   }\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822368
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    // Corner case\n    if n <= 1 {\n        return false;\n\
    \    }\n\n    // Check from 2 to n-1\n    for i in 2..n {\n        if n % i ==\
    \ 0 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822368
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    if n <= 1 {\n        return false;\n    }\n    if n ==\
    \ 2 {\n        return true;\n    }\n    let limit = (n as f64).sqrt() as isize\
    \ + 1;\n    for i in 2..limit {\n        if n % i == 0 {\n            return false;\n\
    \        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_prime;\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101), true);\n\
    \    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441), true);\n\
    \    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822368
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    // The only even prime is 2, and we already know that\
    \ all of the primes\n    // we've found so far are all odd, so we can skip the\
    \ check on 2.\n    if n == 2 {\n        return true;\n    }\n\n    // We don't\
    \ need to check even numbers, since they can all be evenly\n    // divided by\
    \ 2.\n    if n % 2 == 0 {\n        return false;\n    }\n\n    // We're going\
    \ to use the Sieve of Eratosthenes to find all of the prime\n    // numbers up\
    \ to our target. The Sieve is a bit more complicated than just\n    // seeing\
    \ if the number is divisible by any smaller prime, but for our\n    // purposes,\
    \ it should work well enough.\n    //\n    // The basic premise is that we start\
    \ with all numbers being prime, and\n    // iterate over every number, starting\
    \ at 3, and incrementing by 2. At each\n    // step, we mark every multiple of\
    \ that number as non-prime. Once we've\n    // finished that step, we move on\
    \ to the next unmarked number.\n    //\n    // At the end, the only remaining\
    \ numbers are prime.\n    //\n    // We only need to check numbers up to the square\
    \ root of n. Why? Well,\n    // suppose n isn't prime, and n is divisible by x.\
    \ If x > sqrt(n), then\n    // n/x < sqrt(n), and therefore n is also divisible\
    \ by n/x. So, once we've\n    // checked up to sqrt(n), we've checked all possible\
    \ factors of n.\n    let mut i = 3;\n    let sqrt_n = (n as f64).sqrt() as isize;\n\
    \    while i <= sqrt_n {\n        if n % i == 0 {\n            return false;\n\
    \        }\n        i += 2;\n    }\n\n    true\n}\n\nfn main() {\n    let candidate\
    \ = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpkh85cnhx.rs:51:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822368
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    // If n is less than 2, return false\n    if n < 2 {\n\
    \        return false;\n    }\n\n    // Check if n is prime by trying to divide\
    \ it by every number\n    // between 2 and n - 1.\n    for i in 2..n {\n     \
    \   if n % i == 0 {\n            return false;\n        }\n    }\n\n    // If\
    \ we reach this point, then n is prime.\n    return true;\n}\n\nfn main() {\n\
    \    let candidate = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822368
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    let mut p = 2;\n    while p * p <= n {\n        if n %\
    \ p == 0 {\n            return false;\n        }\n        p += 1;\n    }\n   \
    \ return true;\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpnockw7wj.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822368
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    // An even number cannot be prime, other than 2.\n   \
    \ if n != 2 && n % 2 == 0 {\n        return false;\n    }\n\n    // Try each odd\
    \ number in the range [3, sqrt(n)] to see if n is\n    // divisible by any of\
    \ them.\n    let max = (n as f64).sqrt() as isize;\n    for i in (3..max + 1).step_by(2)\
    \ {\n        if n % i == 0 {\n            return false;\n        }\n    }\n\n\
    \    true\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp5zfut8ts.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822368
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    if n < 2 {\n        return false;\n    }\n\n    if n ==\
    \ 2 {\n        return true;\n    }\n\n    if n % 2 == 0 {\n        return false;\n\
    \    }\n\n    let max = (n as f64).sqrt() as isize + 1;\n    for i in (3..max).step_by(2)\
    \ {\n        if n % i == 0 {\n            return false;\n        }\n    }\n\n\
    \    true\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822368
- exit_code: 1
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n+//\tn = n.abs();\n\tif n <= 1 { return false; }\n\tif n ==\
    \ 2 { return true; }\n\tif n % 2 == 0 { return false; }\n+\tlet mut i = 3;\n+\t\
    while i <= (n as f64).sqrt() as isize {\n+\t\tif n % i == 0 { return false; }\n\
    +\t\ti += 2;\n+\t}\n\ttrue\n}\n\nfn main() {\n    let candidate = is_prime;\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101), true);\n\
    \    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441), true);\n\
    \    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `+`\n --> /tmp/tmpicefr4x3.rs:3:1\n \
    \ |\n3 | +//    n = n.abs();\n  | ^ expected expression\n\nerror: aborting due\
    \ to previous error\n\n"
  stdout: ''
  timestamp: 1659822368
- exit_code: 1
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n+    if n < 2 {\n+        return false;\n+    }\n+    for\
    \ i in 2..n {\n+        if n % i == 0 {\n+            return false;\n+       \
    \ }\n+    }\n+    true\n+}\n+\n+/// Return true if the given number has the\n\
    +/// given prime factor, and false otherwise.\n+fn has_factor(n: isize, p: isize)\
    \ -> bool {\n+    if n % p == 0 {\n+        return true;\n+    }\n+    false\n\
    +}\n+\n+/// Return true if all the factors of the given number\n+/// are prime,\
    \ and false otherwise.\n+fn prime_factors(n: isize) -> bool {\n+    let mut i\
    \ = 2;\n+    while i < n {\n+        if n % i == 0 {\n+            if !is_prime(i)\
    \ {\n+                return false;\n+            }\n+        }\n+        i +=\
    \ 1;\n+    }\n+    true\n+}\n+\n+/// Return true if the given number is perfect,\
    \ and false otherwise.\n+fn is_perfect(n: isize) -> bool {\n+    let mut i = 1;\n\
    +    let mut sum = 0;\n+    while i < n {\n+        if n % i == 0 {\n+       \
    \     sum += i;\n+        }\n+        i += 1;\n+    }\n+    if sum == n {\n+ \
    \       return true;\n+    }\n+    false\n+}\n+\n+/// Return true if the given\
    \ number is abundant, and false otherwise.\n+fn is_abundant(n: isize) -> bool\
    \ {\n+    let mut i = 1;\n+    let mut sum = 0;\n+    while i < n {\n+       \
    \ if n % i == 0 {\n+            sum += i;\n+        }\n+        i += 1;\n+   \
    \ }\n+    if sum > n {\n+        return true;\n+    }\n+    false\n+}\n+\n+///\
    \ Return true if the given number is deficient, and false otherwise.\n+fn is_deficient(n:\
    \ isize) -> bool {\n+\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected expression, found `+`\n --> /tmp/tmpbnk1a8ji.rs:3:1\n \
    \ |\n3 | +    if n < 2 {\n  | ^ expected expression\n\nerror: expected item, found\
    \ `+`\n  --> /tmp/tmpbnk1a8ji.rs:13:1\n   |\n13 | +\n   | ^ expected item\n\n\
    error: aborting due to 2 previous errors\n\n"
  stdout: ''
  timestamp: 1659822368
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    if n <= 1 {\n        return false;\n    }\n\n    for i\
    \ in 2..n {\n        if n % i == 0 {\n            return false;\n        }\n \
    \   }\n\n    true\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822368
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    let upper_bound = (n as f64).sqrt() as isize + 1;\n  \
    \  (2..upper_bound).all(|i| n % i != 0)\n}\n\nfn main() {\n    let candidate =\
    \ is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp8f2yc68x.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822368
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    if n < 2 {\n        return false;\n    }\n    if n < 4\
    \ {\n        return true;\n    }\n    if n % 2 == 0 {\n        return false;\n\
    \    }\n    let mut i = 3;\n    while i * i <= n {\n        if n % i == 0 {\n\
    \            return false;\n        }\n        i += 2;\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6), false);\n\
    \    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11), true);\n\
    \    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61), true);\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822368
- exit_code: 1
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n+    if n < 2 {\n+        return false;\n+    }\n+    for\
    \ i in 2..(n/2+1) {\n+        if n % i == 0 {\n+            return false;\n+ \
    \       }\n+    }\n+    return true;\n+}\n+```\n+\n+```\n+fn main() {\n+    let\
    \ x = 5;\n+    println!(\"{}\", is_prime(x));\n+}\n+```\n+\n+# \u5916\u90E8\u51FD\
    \u6570\n+\n+```\n+// this function is visible only within this module\n+fn function()\
    \ {\n+    println!(\"called `function()`\");\n+}\n+\n+mod my {\n+    // A public\
    \ function, function can be called from outside the module\n+    pub fn function()\
    \ {\n+        println!(\"called `my::function()`\");\n+    }\n+\n+    // A private\
    \ function, function can't be called from outside the module\n+    fn private_function()\
    \ {\n+        println!(\"called `my::private_function()`\");\n+    }\n+\n+   \
    \ // Functions declared using `pub(in path)` syntax are only visible an in `path`\n\
    +    // In this case the function is only visible in the current module\n+   \
    \ pub(in crate::my) fn public_function_in_my() {\n+        print!(\"called `my::public_function_in_my()`,\
    \ that\\n> \");\n+        public_function_in_super_mod();\n+    }\n+\n+    //\
    \ Functions declared using `pub(self)` syntax are only visible within the current\
    \ module,\n+    // which is the same as leaving them private\n+    pub(self) fn\
    \ public_function_in_super_mod() {\n+        println!(\"called `my::public_function_in_super_mod()`\"\
    );\n+    }\n+\n+    // Functions declared using `pub(super)` syntax are only visible\
    \ within the parent module\n+    pub(super) fn public_function_in_my_super_mod()\
    \ {\n+        println!(\"called `my::public_function_in_my_super_mod()`\n}\n\n\
    fn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6), false);\n\
    \    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11), true);\n\
    \    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61), true);\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error: unknown start of token: `\n  --> /tmp/tmpu101bp4f.rs:13:2\n   |\n\
    13 | +```\n   |  ^\n   |\nhelp: Unicode character '`' (Grave Accent) looks like\
    \ ''' (Single Quote), but it is not\n   |\n13 | +'``\n   |  ~\n\nerror: unknown\
    \ start of token: `\n  --> /tmp/tmpu101bp4f.rs:13:3\n   |\n13 | +```\n   |   ^\n\
    \   |\nhelp: Unicode character '`' (Grave Accent) looks like ''' (Single Quote),\
    \ but it is not\n   |\n13 | +`'`\n   |   ~\n\nerror: unknown start of token: `\n\
    \  --> /tmp/tmpu101bp4f.rs:13:4\n   |\n13 | +```\n   |    ^\n   |\nhelp: Unicode\
    \ character '`' (Grave Accent) looks like ''' (Single Quote), but it is not\n\
    \   |\n13 | +``'\n   |    ~\n\nerror: unknown start of token: `\n  --> /tmp/tmpu101bp4f.rs:15:2\n\
    \   |\n15 | +```\n   |  ^\n   |\nhelp: Unicode character '`' (Grave Accent) looks\
    \ like ''' (Single Quote), but it is not\n   |\n15 | +'``\n   |  ~\n\nerror: unknown\
    \ start of token: `\n  --> /tmp/tmpu101bp4f.rs:15:3\n   |\n15 | +```\n   |   ^\n\
    \   |\nhelp: Unicode character '`' (Grave Accent) looks like ''' (Single Quote),\
    \ but it is not\n   |\n15 | +`'`\n   |   ~\n\nerror: unknown start of token: `\n\
    \  --> /tmp/tmpu101bp4f.rs:15:4\n   |\n15 | +```\n   |    ^\n   |\nhelp: Unicode\
    \ character '`' (Grave Accent) looks like ''' (Single Quote), but it is not\n\
    \   |\n15 | +``'\n   |    ~\n\nerror: unknown start of token: `\n  --> /tmp/tmpu101bp4f.rs:20:2\n\
    \   |\n20 | +```\n   |  ^\n   |\nhelp: Unicode character '`' (Grave Accent) looks\
    \ like ''' (Single Quote), but it is not\n   |\n20 | +'``\n   |  ~\n\nerror: unknown\
    \ start of token: `\n  --> /tmp/tmpu101bp4f.rs:20:3\n   |\n20 | +```\n   |   ^\n\
    \   |\nhelp: Unicode character '`' (Grave Accent) looks like ''' (Single Quote),\
    \ but it is not\n   |\n20 | +`'`\n   |   ~\n\nerror: unknown start of token: `\n\
    \  --> /tmp/tmpu101bp4f.rs:20:4\n   |\n20 | +```\n   |    ^\n   |\nhelp: Unicode\
    \ character '`' (Grave Accent) looks like ''' (Single Quote), but it is not\n\
    \   |\n20 | +``'\n   |    ~\n\nerror: unknown start of token: `\n  --> /tmp/tmpu101bp4f.rs:24:2\n\
    \   |\n24 | +```\n   |  ^\n   |\nhelp: Unicode character '`' (Grave Accent) looks\
    \ like ''' (Single Quote), but it is not\n   |\n24 | +'``"
  stdout: ''
  timestamp: 1659822368
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    // We iterate up to sqrt(n) since if n is composite, it\
    \ has a factor less than or equal to sqrt(n).\n    // Also, if n is composite,\
    \ it has a factor greater than sqrt(n), but we won't get to that.\n    for i in\
    \ 2..(n as f64).sqrt() as isize + 1 {\n        if n % i == 0 {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n\nfn main() {\n    let candidate\
    \ = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpijq4nfjw.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822368
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    // O(1) if n is less than 2^64\n    if n.overflowing_abs().1\
    \ || n == 0 || n == 1 {\n        return false;\n    }\n    if n == 2 || n == 3\
    \ {\n        return true;\n    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return\
    \ false;\n    }\n    let mut i = 5;\n    while i * i <= n {\n        if n % i\
    \ == 0 || n % (i + 2) == 0 {\n            return false;\n        }\n        i\
    \ += 6;\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_prime;\n  \
    \  assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441), true);\n\
    \    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822368
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    // Small number edge cases\n    if n < 2 {\n        return\
    \ false;\n    }\n    if n < 4 {\n        return true;\n    }\n    if n % 2 ==\
    \ 0 {\n        return false;\n    }\n\n    // Iterate up to square root of n\n\
    \    let max = (n as f64).sqrt() as isize;\n    for i in 3..(max + 1) {\n    \
    \    if n % i == 0 {\n            return false;\n        }\n    }\n\n    true\n\
    }\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822368
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    let limit = (n as f64).sqrt() as isize + 1;\n    for i\
    \ in 2..limit {\n        if n % i == 0 {\n            return false;\n        }\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpdacmhnfg.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822368
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    if n < 2 {\n        return false;\n    }\n    if n ==\
    \ 2 {\n        return true;\n    }\n    if n % 2 == 0 {\n        return false;\n\
    \    }\n    for i in 3..((n as f64).sqrt() as isize + 1) {\n        if n % i ==\
    \ 0 {\n            return false;\n        }\n    }\n    return true;\n}\n\nfn\
    \ main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6), false);\n\
    \    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11), true);\n\
    \    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61), true);\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822368
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    if n < 2 {\n        return false;\n    }\n    if n ==\
    \ 2 {\n        return true;\n    }\n    if n % 2 == 0 {\n        return false;\n\
    \    }\n    let mut i = 3;\n    while i * i <= n {\n        if n % i == 0 {\n\
    \            return false;\n        }\n        i += 2;\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6), false);\n\
    \    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11), true);\n\
    \    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61), true);\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822368
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    if n <= 1 {\n        return false;\n    }\n\n    let upper_bound\
    \ = (n as f64).sqrt() as isize + 1;\n    for i in 2..upper_bound {\n        if\
    \ n % i == 0 {\n            return false;\n        }\n    }\n\n    true\n}\n\n\
    fn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6), false);\n\
    \    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11), true);\n\
    \    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61), true);\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822368
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    if n <= 1 {\n        return false;\n    }\n    if n <=\
    \ 3 {\n        return true;\n    }\n    if n % 2 == 0 || n % 3 == 0 {\n      \
    \  return false;\n    }\n    let mut i = 5;\n    while i * i <= n {\n        if\
    \ n % i == 0 || n % (i + 2) == 0 {\n            return false;\n        }\n   \
    \     i += 6;\n    }\n    return true;\n}\n\nfn main() {\n    let candidate =\
    \ is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822368
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    if n <= 3 {\n        return n > 1;\n    } else if n %\
    \ 2 == 0 || n % 3 == 0 {\n        return false;\n    }\n\n    let mut i = 5;\n\
    \    while i * i <= n {\n        if n % i == 0 || n % (i + 2) == 0 {\n       \
    \     return false;\n        }\n        i += 6;\n    }\n\n    true\n}\n\nfn main()\
    \ {\n    let candidate = is_prime;\n    assert_eq!(candidate(6), false);\n   \
    \ assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11), true);\n  \
    \  assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61), true);\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822367
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    if n < 2 {\n        return false;\n    }\n\n    if n ==\
    \ 2 {\n        return true;\n    }\n\n    let root = (n as f64).sqrt() as isize;\n\
    \    for i in 2..root + 1 {\n        if n % i == 0 {\n            return false;\n\
    \        }\n    }\n\n    true\n}\n\nfn main() {\n    let candidate = is_prime;\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101), true);\n\
    \    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441), true);\n\
    \    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822368
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    // TODO: Verify that the number is prime.\n    true\n\
    }\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpaw8ekbai.rs:9:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822368
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    let limit = (n as f64).sqrt() as isize + 1;\n    if n\
    \ <= 1 { return false }\n    if n <= 3 { return true }\n    if n % 2 == 0 || n\
    \ % 3 == 0 { return false }\n    let mut i = 5;\n    while i <= limit {\n    \
    \    if n % i == 0 || n % (i + 2) == 0 { return false }\n        i += 6;\n   \
    \ }\n    true\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822368
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    let sqrt = (n as f64).sqrt() as isize;\n    if n <= 1\
    \ {\n        return false;\n    }\n    if n == 2 {\n        return true;\n   \
    \ }\n    for i in 2..sqrt + 1 {\n        if n % i == 0 {\n            return false;\n\
    \        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_prime;\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101), true);\n\
    \    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441), true);\n\
    \    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822368
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    if n < 2 {\n        return false;\n    }\n    let max\
    \ = (n as f64).sqrt() as isize + 1;\n    for i in 2..max {\n        if n % i ==\
    \ 0 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822368
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    if n <= 3 {\n        n > 1\n    } else if n % 2 == 0 ||\
    \ n % 3 == 0 {\n        false\n    } else {\n        let mut i = 5;\n        while\
    \ i * i <= n {\n            if n % i == 0 || n % (i + 2) == 0 {\n            \
    \    return false;\n            }\n            i += 6;\n        }\n        true\n\
    \    }\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822368
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    match n {\n        1 => false,\n        _ => {\n     \
    \       let max = (n as f64).sqrt() as isize + 1;\n            let mut i = 2;\n\
    \            while i < max {\n                if n % i == 0 {\n              \
    \      return false;\n                }\n                i += 1;\n           \
    \ }\n            true\n        }\n    }\n}\n\nfn main() {\n    let candidate =\
    \ is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822368
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    if n <= 3 {\n        return n > 1;\n    } else if n %\
    \ 2 == 0 || n % 3 == 0 {\n        return false;\n    }\n\n    let mut i = 5;\n\
    \    while i * i <= n {\n        if n % i == 0 || n % (i + 2) == 0 {\n       \
    \     return false;\n        }\n        i += 6;\n    }\n\n    true\n}\n\nfn main()\
    \ {\n    let candidate = is_prime;\n    assert_eq!(candidate(6), false);\n   \
    \ assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11), true);\n  \
    \  assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61), true);\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822367
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    let sqrt = (n as f64).sqrt() as isize;\n    // Note that\
    \ we start at 2. We've already handled 0 and 1 above.\n    for i in 2..(sqrt +\
    \ 1) {\n        if n % i == 0 {\n            return false;\n        }\n    }\n\
    \    true\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpjd442rm5.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822368
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n  let n = n as usize;\n  if n == 2 {\n    return true;\n \
    \ }\n  if n % 2 == 0 {\n    return false;\n  }\n  let sqrt = (n as f64).sqrt().ceil()\
    \ as usize;\n  for i in 3..sqrt {\n    if n % i == 0 {\n      return false;\n\
    \    }\n  }\n  true\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp8x3oselg.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822368
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    for i in 2..(n / 2 + 1) {\n        if n % i == 0 {\n \
    \           return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let\
    \ candidate = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpq7w8xown.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822368
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    if n < 2 {\n        return false;\n    }\n    let sqrt_n\
    \ = (n as f64).sqrt() as isize;\n    for i in 2..sqrt_n + 1 {\n        if n %\
    \ i == 0 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main()\
    \ {\n    let candidate = is_prime;\n    assert_eq!(candidate(6), false);\n   \
    \ assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11), true);\n  \
    \  assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61), true);\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822368
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    if n < 2 {\n        return false;\n    }\n    let mut\
    \ i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n            return\
    \ false;\n        }\n        i += 1;\n    }\n    true\n}\n\nfn main() {\n    let\
    \ candidate = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822368
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    if n <= 1 {\n        return false;\n    }\n\n    let limit\
    \ = (n as f64).sqrt() as isize + 1;\n    for i in 2..limit {\n        if n % i\
    \ == 0 {\n            return false;\n        }\n    }\n\n    true\n}\n\nfn main()\
    \ {\n    let candidate = is_prime;\n    assert_eq!(candidate(6), false);\n   \
    \ assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11), true);\n  \
    \  assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61), true);\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822368
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    if n <= 1 {\n        return false;\n    }\n    let max\
    \ = (n as f64).sqrt() as isize + 1;\n    for i in 2..max {\n        if n % i ==\
    \ 0 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822368
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    if n < 0 {\n        return false;\n    }\n    if n < 2\
    \ {\n        return false;\n    }\n    if n == 2 {\n        return true;\n   \
    \ }\n    if n % 2 == 0 {\n        return false;\n    }\n    let mut k = 3;\n \
    \   while k*k <= n {\n        if n % k == 0 {\n            return false;\n   \
    \     }\n        k += 2;\n    }\n    return true;\n}\n\nfn main() {\n    let candidate\
    \ = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822368
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    // A number is prime iff it is not divisible by any number\
    \ less than it.\n    if n <= 1 {\n        false\n    } else {\n        !(2..n).any(|x|\
    \ n % x == 0)\n    }\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822368
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    let mut i = 2;\n    let mut flag = true;\n    while i\
    \ <= (n as f64).sqrt() as isize {\n        if n % i == 0 {\n            flag =\
    \ false;\n            break;\n        }\n        i += 1;\n    }\n    flag\n}\n\
    \nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6), false);\n\
    \    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11), true);\n\
    \    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61), true);\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp89xtmne9.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822368
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    let sq = (n as f64).sqrt() as isize;\n    (2..sq+1).all(|x|\
    \ n % x != 0)\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmptixdw3ia.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822368
- exit_code: 1
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n+   if n <= 1 {\n+       return false;\n+   }\n   \n   for\
    \ i in 2..n {\n+       if n % i == 0 {\n+           return false;\n+       }\n\
    \   }\n   \n   true\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected expression, found `+`\n --> /tmp/tmpmz6vjxvg.rs:3:1\n \
    \ |\n3 | +   if n <= 1 {\n  | ^ expected expression\n\nerror: aborting due to\
    \ previous error\n\n"
  stdout: ''
  timestamp: 1659822368
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    for i in 2..n {\n        if n % i == 0 {\n           \
    \ return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpeaud3ork.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822367
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    let mut m = n - 1;\n    while m > 1 {\n        if n %\
    \ m == 0 {\n            return false;\n        }\n        m -= 1;\n    }\n   \
    \ true\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp4o0g0lai.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822368
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    if n <= 1 {\n        return false;\n    }\n\n    if n\
    \ <= 3 {\n        return true;\n    }\n\n    if n % 2 == 0 || n % 3 == 0 {\n \
    \       return false;\n    }\n\n    let mut i = 5;\n    while i * i <= n {\n \
    \       if n % i == 0 || n % (i + 2) == 0 {\n            return false;\n     \
    \   }\n        i += 6;\n    }\n\n    true\n}\n\nfn main() {\n    let candidate\
    \ = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822368
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    let mut i = 3;\n    while i <= (n as f64).sqrt() as isize\
    \ {\n        if n % i == 0 {\n            return false;\n        }\n        i\
    \ += 2;\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_prime;\n  \
    \  assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441), true);\n\
    \    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpw2ze7qyg.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    if n <= 1 {\n        return false;\n    }\n\n    if n\
    \ <= 3 {\n        return true;\n    }\n\n    if n % 2 == 0 || n % 3 == 0 {\n \
    \       return false;\n    }\n\n    let mut i = 5;\n    while i * i <= n {\n \
    \       if n % i == 0 || n % (i + 2) == 0 {\n            return false;\n     \
    \   }\n        i += 6;\n    }\n\n    true\n}\n\nfn main() {\n    let candidate\
    \ = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822368
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    let sqrt = (n as f64).sqrt() as isize;\n    // We know\
    \ 2 is prime, and we can ignore 1\n    if n < 2 {\n        return false;\n   \
    \ } else if n == 2 {\n        return true;\n    }\n    // Check the numbers between\
    \ 2 and the square root of n\n    for i in 2..sqrt {\n        if n % i == 0 {\n\
    \            return false;\n        }\n    }\n    // If we've made it this far,\
    \ it's prime\n    true\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpl0wo5fo8.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822369
- exit_code: 1
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n+    let mut i = 2;\n+    while i <= (n / 2) {\n+        if\
    \ n % i == 0 {\n+            return false;\n+        }\n+        i += 1;\n+  \
    \  }\n+    return true;\n+}\n+\n+fn main() {\n+    let mut i = 1;\n+    let mut\
    \ counter = 0;\n+    while counter < 10001 {\n+        if is_prime(i) {\n+   \
    \         counter += 1;\n+        }\n+        i += 1;\n+    }\n+    println!(\"\
    {}\", i - 1);\n+}\n\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error: unexpected closing delimiter: `}`\n  --> /tmp/tmpzuixhsnp.rs:25:1\n\
    \   |\n13 | +fn main() {\n   |            - this opening brace...\n...\n23 | +}\n\
    \   |  - ...matches this closing brace\n24 | \n25 | }\n   | ^ unexpected closing\
    \ delimiter\n\nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1659822368
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    for x in 2..n {\n        if n % x == 0 {\n           \
    \ return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpeqqyrt9t.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822369
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    for i in 2..((n as f64).sqrt() as isize + 1) {\n     \
    \   if n % i == 0 {\n            return false;\n        }\n    }\n    true\n}\n\
    \nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6), false);\n\
    \    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11), true);\n\
    \    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61), true);\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpectlfa6q.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822369
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    for i in 2..(n/2 + 1) {\n        if n % i == 0 {\n   \
    \         return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let\
    \ candidate = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpllkke8tc.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    if n <= 1 {\n        return false;\n    }\n    let limit\
    \ = (n as f64).sqrt() as isize + 1;\n    for i in 2..limit {\n        if n % i\
    \ == 0 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main()\
    \ {\n    let candidate = is_prime;\n    assert_eq!(candidate(6), false);\n   \
    \ assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11), true);\n  \
    \  assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61), true);\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 1
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n+    if n < 2 {\n+        return false;\n+    }\n\n+    let\
    \ mut primes = vec![2];\n+    for i in 3..(n as f64).sqrt() as isize + 1 {\n+\
    \        if n % i == 0 {\n+            return false;\n+        }\n+        primes.push(i);\n\
    +    }\n\n+    let midpoint = n / 2;\n+    primes.iter().take_while(|x| x < &&midpoint).all(|p|\
    \ n % p != 0)\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected expression, found `+`\n --> /tmp/tmpuqf4mbof.rs:3:1\n \
    \ |\n3 | +    if n < 2 {\n  | ^ expected expression\n\nerror: aborting due to\
    \ previous error\n\n"
  stdout: ''
  timestamp: 1659822368
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    // If n is <= 1 it is not prime.\n    if n <= 1 {\n  \
    \      return false;\n    }\n\n    // If n is 2 or 3, it is prime.\n    if n <=\
    \ 3 {\n        return true;\n    }\n\n    // If n is a multiple of 2 or 3, it\
    \ is not prime.\n    if n % 2 == 0 || n % 3 == 0 {\n        return false;\n  \
    \  }\n\n    // If n is not a multiple of 2 or 3, start testing at 5 and go to\
    \ the\n    // sqrt of n.\n    let mut i = 5;\n    while i * i <= n {\n       \
    \ if n % i == 0 || n % (i + 2) == 0 {\n            return false;\n        }\n\
    \        i += 6;\n    }\n\n    true\n}\n\nfn main() {\n    let candidate = is_prime;\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101), true);\n\
    \    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441), true);\n\
    \    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    if n < 2 {\n        return false;\n    }\n    if n ==\
    \ 2 {\n        return true;\n    }\n    if n % 2 == 0 {\n        return false;\n\
    \    }\n    for i in (3..((n as f64).sqrt() as isize) + 1).step_by(2) {\n    \
    \    if n % i == 0 {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    if n <= 3 {\n        return n > 1;\n    } else if n %\
    \ 2 == 0 || n % 3 == 0 {\n        return false;\n    }\n\n    let mut i = 5;\n\
    \    while i * i <= n {\n        if n % i == 0 || n % (i + 2) == 0 {\n       \
    \     return false;\n        }\n        i += 6;\n    }\n\n    true\n}\n\nfn main()\
    \ {\n    let candidate = is_prime;\n    assert_eq!(candidate(6), false);\n   \
    \ assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11), true);\n  \
    \  assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61), true);\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822367
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    let sqrt = (n as f64).sqrt() as isize;\n    for i in 2..sqrt\
    \ + 1 {\n        if n % i == 0 {\n            return false;\n        }\n    }\n\
    \    true\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpp03mv6yr.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822369
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    (2..(n as f64).sqrt() as isize + 1).all(|x| n % x != 0)\n\
    }\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpwax_8cv0.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822369
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    let mut divisor = 2;\n    while divisor * divisor <= n\
    \ {\n        if n % divisor == 0 {\n            return false;\n        }\n   \
    \     divisor += 1;\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_prime;\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101), true);\n\
    \    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441), true);\n\
    \    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmprd1pw_oq.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822369
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    let mut factors = 0;\n    let mut i = 1;\n    while i\
    \ * i <= n {\n        if n % i == 0 {\n            factors += 1;\n        }\n\
    \        i += 1;\n    }\n    factors == 1\n}\n\nfn main() {\n    let candidate\
    \ = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp867nboai.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822369
- exit_code: 1
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n+\t// We only need to check up to the sqrt of n.\n+\tlet limit\
    \ = (n as f64).sqrt() as isize + 1;\n+\tfor i in 2..limit {\n+\t\tif n % i ==\
    \ 0 {\n+\t\t\treturn false;\n+\t\t}\n+\t}\n+\ttrue\n}\n\nfn main() {\n    let\
    \ candidate = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `+`\n --> /tmp/tmps4nn9i3a.rs:3:1\n \
    \ |\n3 | +    // We only need to check up to the sqrt of n.\n  | ^ expected expression\n\
    \nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1659822368
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    if n <= 1 {\n        return false;\n    }\n    if n <\
    \ 4 {\n        return true;\n    }\n    if n % 2 == 0 {\n        return false;\n\
    \    }\n    if n < 9 {\n        return true;\n    }\n    if n % 3 == 0 {\n   \
    \     return false;\n    }\n\n    // otherwise, start from 5, and look for divisors\
    \ all the way up to sqrt(n)\n    let mut candidate = 5;\n    while candidate *\
    \ candidate <= n {\n        if n % candidate == 0 {\n            return false;\n\
    \        }\n        if n % (candidate + 2) == 0 {\n            return false;\n\
    \        }\n        candidate += 6;\n    }\n    true\n}\n\nfn main() {\n    let\
    \ candidate = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    let mut i = 3;\n    let mut flag = true;\n    while i\
    \ <= (n as f64).sqrt() as isize {\n        if n % i == 0 {\n            flag =\
    \ false;\n            break;\n        }\n        i += 2;\n    }\n    flag\n}\n\
    \nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6), false);\n\
    \    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11), true);\n\
    \    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61), true);\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp8bwvgd42.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    if n <= 1 {\n        return false;\n    }\n    if n <=\
    \ 3 {\n        return true;\n    }\n    if n % 2 == 0 || n % 3 == 0 {\n      \
    \  return false;\n    }\n    let mut i = 5;\n    while i * i <= n {\n        if\
    \ n % i == 0 || n % (i + 2) == 0 {\n            return false;\n        }\n   \
    \     i += 6;\n    }\n    return true;\n}\n\nfn main() {\n    let candidate =\
    \ is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822368
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    if n <= 1 {\n        return false;\n    }\n    let mut\
    \ i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n            return\
    \ false;\n        }\n        i += 1;\n    }\n    true\n}\n\nfn main() {\n    let\
    \ candidate = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822367
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    if n < 2 {\n        return false;\n    }\n    for i in\
    \ 2..n {\n        if n % i == 0 {\n            return false;\n        }\n    }\n\
    \    true\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822367
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    let sqrt = (n as f64).sqrt().floor() as isize;\n    for\
    \ i in 2..sqrt + 1 {\n        if n % i == 0 {\n            return false;\n   \
    \     }\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_prime;\n  \
    \  assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441), true);\n\
    \    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpkyqdbx_t.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822369
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    let mut x = 3;\n    while x * x <= n {\n        if n %\
    \ x == 0 {\n            return false;\n        }\n        x += 2;\n    }\n   \
    \ true\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmprukuy73v.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822369
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    // We know 2 is prime.\n    if n == 2 {\n        return\
    \ true;\n    }\n\n    // All other even numbers are not prime.\n    if n % 2 ==\
    \ 0 {\n        return false;\n    }\n\n    // Check odd numbers up to the square\
    \ root of the given number.\n    for i in (3..(n as f64).sqrt() as isize + 1).step_by(2)\
    \ {\n        if n % i == 0 {\n            return false;\n        }\n    }\n\n\
    \    true\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpyw6i0e8b.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822369
- exit_code: 1
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n+    for i in 2..n {\n+        if n % i == 0 {\n+        \
    \    return false;\n+        }\n+    }\n+    true\n+}\n+\n+fn main() {\n+    let\
    \ mut i = 1;\n+    loop {\n+        i += 1;\n+        if is_prime(i) {\n+    \
    \        println!(\"{}\", i);\n+        }\n+    }\n+}\n+```\n+\n+### Extending\
    \ Pattern Syntax\n+\n+The `if` statement above is not very idiomatic Rust.  We\
    \ could simplify it and make it more general like this:\n+\n+```rust\n+if let\
    \ 0 = n % i {\n+    return false;\n+}\n+```\n+\n+This is more flexible because\
    \ the RHS could be more than just 0, and the LHS could be a more general pattern.\n\
    +\n+```rust\n+if let (0..=10) = n % i {\n+    return false;\n+}\n+```\n+\n+Even\
    \ better, this works as well:\n+\n+```rust\n+if let Some(0) = n % i {\n+    return\
    \ false;\n+}\n+```\n+\n+If we extend the pattern syntax in this way, the pattern\
    \ `Some(0)` will not just match `Some(0)`, but it will also match `0`, or `Some(Some(0))`,\
    \ or `Some(Some(Some(0)))`, and so on.\n+\n+### `is_prime` Implementation\n+\n\
    +```rust\n+fn is_prime(n: isize) -> bool {\n+    for i in 2..n {\n+        if\
    \ let Some(0) = n % i {\n+            return false;\n+        }\n+    }\n+   \
    \ true\n+}\n+```\n+\n+### Main Loop\n+\n+```rust\n+fn main() {\n+    let mut i\
    \ = 1;\n+    loop {\n+        i += 1;\n+        if is_prime(i) {\n+          \
    \  println!(\"{}\", i);\n+        }\n+    }\n+}\n+```\n\n}\n\nfn main() {\n  \
    \  let candidate = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: SyntaxError
  stderr: "error: unknown start of token: `\n  --> /tmp/tmp1x5t7q60.rs:20:2\n   |\n\
    20 | +```\n   |  ^\n   |\nhelp: Unicode character '`' (Grave Accent) looks like\
    \ ''' (Single Quote), but it is not\n   |\n20 | +'``\n   |  ~\n\nerror: unknown\
    \ start of token: `\n  --> /tmp/tmp1x5t7q60.rs:20:3\n   |\n20 | +```\n   |   ^\n\
    \   |\nhelp: Unicode character '`' (Grave Accent) looks like ''' (Single Quote),\
    \ but it is not\n   |\n20 | +`'`\n   |   ~\n\nerror: unknown start of token: `\n\
    \  --> /tmp/tmp1x5t7q60.rs:20:4\n   |\n20 | +```\n   |    ^\n   |\nhelp: Unicode\
    \ character '`' (Grave Accent) looks like ''' (Single Quote), but it is not\n\
    \   |\n20 | +``'\n   |    ~\n\nerror: unknown start of token: `\n  --> /tmp/tmp1x5t7q60.rs:24:6\n\
    \   |\n24 | +The `if` statement above is not very idiomatic Rust.  We could simplify\
    \ it and make it more general like this:\n   |      ^\n   |\nhelp: Unicode character\
    \ '`' (Grave Accent) looks like ''' (Single Quote), but it is not\n   |\n24 |\
    \ +The 'if` statement above is not very idiomatic Rust.  We could simplify it\
    \ and make it more general like this:\n   |      ~\n\nerror: unknown start of\
    \ token: `\n  --> /tmp/tmp1x5t7q60.rs:24:9\n   |\n24 | +The `if` statement above\
    \ is not very idiomatic Rust.  We could simplify it and make it more general like\
    \ this:\n   |         ^\n   |\nhelp: Unicode character '`' (Grave Accent) looks\
    \ like ''' (Single Quote), but it is not\n   |\n24 | +The `if' statement above\
    \ is not very idiomatic Rust.  We could simplify it and make it more general like\
    \ this:\n   |         ~\n\nerror: unknown start of token: `\n  --> /tmp/tmp1x5t7q60.rs:26:2\n\
    \   |\n26 | +```rust\n   |  ^\n   |\nhelp: Unicode character '`' (Grave Accent)\
    \ looks like ''' (Single Quote), but it is not\n   |\n26 | +'``rust\n   |  ~\n\
    \nerror: unknown start of token: `\n  --> /tmp/tmp1x5t7q60.rs:26:3\n   |\n26 |\
    \ +```rust\n   |   ^\n   |\nhelp: Unicode character '`' (Grave Accent) looks like\
    \ ''' (Single Quote), but it is not\n   |\n26 | +`'`rust\n   |   ~\n\nerror: unknown\
    \ start of token: `\n  --> /tmp/tmp1x5t7q60.rs:26:4\n   |\n26 | +```rust\n   |\
    \    ^\n   |\nhelp: Unicode character '`' (Grave Accent) looks"
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    // 1 is not prime.\n    if n == 1 {\n        return false;\n\
    \    }\n\n    // 2 is the only even prime.\n    if n == 2 {\n        return true;\n\
    \    }\n\n    // All other even numbers are not prime.\n    if n % 2 == 0 {\n\
    \        return false;\n    }\n\n    // Check odd divisors from 3 to the square\
    \ root of n.\n    let sqrt = (n as f64).sqrt() as isize;\n    for i in (3..sqrt\
    \ + 1).step_by(2) {\n        if n % i == 0 {\n            return false;\n    \
    \    }\n    }\n\n    return true;\n}\n\nfn main() {\n    let candidate = is_prime;\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101), true);\n\
    \    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441), true);\n\
    \    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    let mut i = 2;\n    while i * i <= n {\n        if n %\
    \ i == 0 {\n            return false;\n        }\n        i += 1;\n    }\n   \
    \ true\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp546lw_by.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822369
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    (2..= (n as f64).sqrt() as isize).all(|x| n % x != 0)\n\
    }\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpkh0cjjkp.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822369
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    for x in 2..n {\n        if n % x == 0 {\n           \
    \ return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpeqqyrt9t.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    if n < 2 {\n        return false;\n    }\n    if n ==\
    \ 2 {\n        return true;\n    }\n    if n % 2 == 0 {\n        return false;\n\
    \    }\n    for x in (3..).step_by(2) {\n        if x * x > n {\n            break;\n\
    \        }\n        if n % x == 0 {\n            return false;\n        }\n  \
    \  }\n    true\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    for d in (2..n).filter(|d| n % d == 0) {\n        return\
    \ false;\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_prime;\n \
    \   assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101), true);\n\
    \    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441), true);\n\
    \    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpnkykiaqg.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822369
- exit_code: 1
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    // the sqrt of a negative number is imaginary\n    //\
    \ (in this case, we don't have to worry about it)\n    let max = n.sqrt() as isize;\n\
    \    for i in 2..(max + 1) {\n        if n % i == 0 {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\nfn main() {\n    let candidate = is_prime;\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101), true);\n\
    \    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441), true);\n\
    \    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sqrt` found for type `isize` in the current\
    \ scope\n --> /tmp/tmp0mmkmhfk.rs:5:17\n  |\n5 |     let max = n.sqrt() as isize;\n\
    \  |                 ^^^^ method not found in `isize`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    if n < 2 {\n        return false;\n    }\n    if n ==\
    \ 2 {\n        return true;\n    }\n    if n % 2 == 0 {\n        return false;\n\
    \    }\n    for i in 3..(n as f64).sqrt() as isize + 1 {\n        if n % i ==\
    \ 0 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    if n <= 1 {\n        return false;\n    }\n    if n <=\
    \ 3 {\n        return true;\n    }\n    if n % 2 == 0 || n % 3 == 0 {\n      \
    \  return false;\n    }\n    let mut i = 5;\n    while i * i <= n {\n        if\
    \ n % i == 0 || n % (i + 2) == 0 {\n            return false;\n        }\n   \
    \     i += 6;\n    }\n    return true;\n}\n\nfn main() {\n    let candidate =\
    \ is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822368
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    match n {\n        2 | 3 => true,\n        n if n < 2\
    \ || n % 2 == 0 => false,\n        _ => {\n            let mut divisor = 3;\n\
    \            while divisor * divisor <= n {\n                if n % divisor ==\
    \ 0 {\n                    return false;\n                }\n                divisor\
    \ += 2;\n            }\n            true\n        }\n    }\n}\n\nfn main() {\n\
    \    let candidate = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    if n <= 1 {\n        return false;\n    }\n\n    if n\
    \ == 2 {\n        return true;\n    }\n\n    let max = (n as f64).sqrt() as isize\
    \ + 1;\n    for i in 2..max {\n        if n % i == 0 {\n            return false;\n\
    \        }\n    }\n\n    true\n}\n\nfn main() {\n    let candidate = is_prime;\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101), true);\n\
    \    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441), true);\n\
    \    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    let n = n as usize;\n    for i in 2..((n as f64).sqrt()\
    \ as usize + 1) {\n        if n % i == 0 {\n            return false;\n      \
    \  }\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpmh_z2f46.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822369
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    let sqrt = ((n as f64).sqrt() + 1.0) as isize;\n    (2..sqrt).all(|x|\
    \ n % x != 0)\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpvcxzhpw0.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    if n <= 1 {\n        return false;\n    }\n\n    let limit\
    \ = (n as f64).sqrt() as isize + 1;\n    for i in 2..limit {\n        if n % i\
    \ == 0 {\n            return false;\n        }\n    }\n\n    true\n}\n\nfn main()\
    \ {\n    let candidate = is_prime;\n    assert_eq!(candidate(6), false);\n   \
    \ assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11), true);\n  \
    \  assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61), true);\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822368
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    if n < 2 {\n        return false;\n    }\n    if n < 4\
    \ {\n        return true;\n    }\n    if n % 2 == 0 {\n        return false;\n\
    \    }\n    if n < 9 {\n        return true;\n    }\n    if n % 3 == 0 {\n   \
    \     return false;\n    }\n    if n < 25 {\n        return true;\n    }\n   \
    \ let sqrt_n = (n as f64).sqrt() as isize;\n    let mut f = 5;\n    while f <=\
    \ sqrt_n {\n        if n % f == 0 {\n            return false;\n        }\n  \
    \      if n % (f + 2) == 0 {\n            return false;\n        }\n        f\
    \ += 6;\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_prime;\n  \
    \  assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441), true);\n\
    \    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    if n <= 1 {\n        return false;\n    }\n\n    if n\
    \ <= 3 {\n        return true;\n    }\n\n    if n % 2 == 0 || n % 3 == 0 {\n \
    \       return false;\n    }\n\n    let mut i = 5;\n    while i * i <= n {\n \
    \       if n % i == 0 || n % (i + 2) == 0 {\n            return false;\n     \
    \   }\n        i += 6;\n    }\n\n    true\n}\n\nfn main() {\n    let candidate\
    \ = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822368
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    let divisors = 1 + (2..(n/2)).filter(|i| n % i == 0).count();\n\
    \    divisors == 1\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp96xv2e1d.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822369
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    let sqrt_n = (n as f64).sqrt().ceil() as isize;\n    for\
    \ factor in 2..sqrt_n + 1 {\n        if n % factor == 0 {\n            return\
    \ false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_prime;\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101), true);\n\
    \    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441), true);\n\
    \    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpnnvuzkjk.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    if n < 0 {\n        return false;\n    }\n    if n ==\
    \ 0 || n == 1 {\n        return false;\n    }\n    let mut k = 2;\n    while k\
    \ < n {\n        if n % k == 0 {\n            return false;\n        }\n     \
    \   k += 1;\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_prime;\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101), true);\n\
    \    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441), true);\n\
    \    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    // 1, -1, and 0 are not prime.\n    if n <= 1 {\n    \
    \    return false;\n    }\n\n    // All primes are of the form 6k +/- 1.\n   \
    \ //\n    // This optimization is due to \"A Note on Three Constructions of Prime\n\
    \    // Generating Polynomials of Degree Two\" by J. Brillhart, D.H. Lehmer, and\n\
    \    // J.L. Selfridge.\n    if n <= 3 {\n        return true;\n    } else if\
    \ n % 2 == 0 || n % 3 == 0 {\n        return false;\n    }\n\n    // Iterate over\
    \ the numbers we can factor by. The above two optimizations\n    // reduce the\
    \ number of iterations.\n    let mut i = 5;\n    while i * i <= n {\n        if\
    \ n % i == 0 || n % (i + 2) == 0 {\n            return false;\n        }\n   \
    \     i += 6;\n    }\n\n    // For all remaining numbers, n is prime.\n    true\n\
    }\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    match n {\n        2 => true,\n        3 => true,\n  \
    \      x if x < 2 => false,\n        x if x % 2 == 0 => false,\n        x if x\
    \ % 3 == 0 => false,\n        _ => {\n            let mut i: isize = 5;\n    \
    \        let mut w: isize = 2;\n            while i * i <= n {\n             \
    \   if n % i == 0 {\n                    return false;\n                }\n  \
    \              i += w;\n                w = 6 - w;\n            }\n          \
    \  true\n        }\n    }\n}\n\nfn main() {\n    let candidate = is_prime;\n \
    \   assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101), true);\n\
    \    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441), true);\n\
    \    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    if n < 2 {\n        return false;\n    }\n\n    if n ==\
    \ 2 {\n        return true;\n    }\n\n    let mut i = 2;\n    while i <= (n as\
    \ f64).sqrt() as isize {\n        if n % i == 0 {\n            return false;\n\
    \        }\n        i += 1;\n    }\n\n    true\n}\n\nfn main() {\n    let candidate\
    \ = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    for i in 2..(n as f64).sqrt() as isize + 1 {\n       \
    \ if n % i == 0 {\n            return false;\n        }\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6), false);\n\
    \    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11), true);\n\
    \    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61), true);\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmprzy1_gh7.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822369
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    let mut i = 2;\n    while i * i <= n {\n        if n %\
    \ i == 0 {\n            return false;\n        }\n        i += 1;\n    }\n   \
    \ true\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp546lw_by.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    if n <= 1 {\n        return false;\n    }\n    for i in\
    \ 2..n {\n        if n % i == 0 {\n            return false;\n        }\n    }\n\
    \    true\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822367
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    let mut i = 2;\n    while i <= (n as f64).sqrt() as isize\
    \ {\n        if n % i == 0 {\n            return false;\n        }\n        i\
    \ += 1;\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_prime;\n  \
    \  assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441), true);\n\
    \    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpx28de2s7.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    if n < 2 {\n        return false;\n    }\n    if n ==\
    \ 2 {\n        return true;\n    }\n    if n % 2 == 0 {\n        return false;\n\
    \    }\n    let upper_bound = (n as f64).sqrt() as isize + 1;\n    for i in 3..upper_bound\
    \ {\n        if n % i == 0 {\n            return false;\n        }\n    }\n  \
    \  true\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    let mut i = 2;\n    while i * i <= n {\n        if n %\
    \ i == 0 {\n            return false;\n        }\n        i += 1;\n    }\n   \
    \ return true;\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp2n4afk9m.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    if n < 2 {\n        return false;\n    }\n    if n ==\
    \ 2 {\n        return true;\n    }\n    if n % 2 == 0 {\n        return false;\n\
    \    }\n    if n < 9 {\n        return true;\n    }\n    if n % 3 == 0 {\n   \
    \     return false;\n    }\n    let mut f = 5;\n    while f * f <= n {\n     \
    \   if n % f == 0 {\n            return false;\n        }\n        if n % (f +\
    \ 2) == 0 {\n            return false;\n        }\n        f += 6;\n    }\n  \
    \  return true;\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    if n < 2 {\n        return false;\n    }\n    let mut\
    \ primes = vec![];\n    let mut i = 2;\n    while i * i <= n {\n        if is_prime(i)\
    \ {\n            primes.push(i);\n        }\n        i += 1;\n    }\n    for p\
    \ in primes {\n        if n % p == 0 {\n            return false;\n        }\n\
    \    }\n    true\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    if n <= 1 {\n        return false;\n    }\n    for i in\
    \ 2..(n as f64).sqrt() as isize + 1 {\n        if n % i == 0 {\n            return\
    \ false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_prime;\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101), true);\n\
    \    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441), true);\n\
    \    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    if n < 2 {\n        return false;\n    }\n    for i in\
    \ 2..(n as f64).sqrt() as isize + 1 {\n        if n % i == 0 {\n            return\
    \ false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_prime;\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101), true);\n\
    \    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441), true);\n\
    \    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    for i in 2..(n - 1) {\n        if n % i == 0 {\n     \
    \       return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpjj11s2uu.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    if n <= 1 {\n        return false;\n    }\n\n    let mut\
    \ i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n            return\
    \ false;\n        }\n        i += 1;\n    }\n\n    true\n}\n\nfn main() {\n  \
    \  let candidate = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822367
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    if n <= 1 {\n        return false;\n    }\n\n    let mut\
    \ d = 2;\n    while d * d <= n {\n        if n % d == 0 {\n            return\
    \ false;\n        }\n        d += 1;\n    }\n    true\n}\n\nfn main() {\n    let\
    \ candidate = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    if n < 2 {\n        return false;\n    }\n\n    let sqrt\
    \ = ((n as f64).sqrt() as isize) + 1;\n    for i in 2..sqrt {\n        if n %\
    \ i == 0 {\n            return false;\n        }\n    }\n\n    true\n}\n\nfn main()\
    \ {\n    let candidate = is_prime;\n    assert_eq!(candidate(6), false);\n   \
    \ assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11), true);\n  \
    \  assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61), true);\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    // Handle some special cases.\n    if n < 2 {\n      \
    \  return false;\n    }\n    if n == 2 {\n        return true;\n    }\n    if\
    \ n % 2 == 0 {\n        return false;\n    }\n\n    // Try to find a divisor between\
    \ 3 and the square root of n.\n    let sqrt = (n as f64).sqrt() as isize;\n  \
    \  for i in (3..sqrt + 1).step_by(2) {\n        if n % i == 0 {\n            return\
    \ false;\n        }\n    }\n\n    // No divisor was found, so n is prime.\n  \
    \  true\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n  // 1 is not prime.\n  if n == 1 {\n    return false;\n \
    \ }\n\n  let mut i = 2;\n  while i * i <= n {\n    if n % i == 0 {\n      return\
    \ false;\n    }\n    i += 1;\n  }\n  true\n}\n\nfn main() {\n    let candidate\
    \ = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    let mut f = 2;\n    while f * f <= n {\n        if n %\
    \ f == 0 {\n            return false;\n        }\n        f += 1;\n    }\n   \
    \ return true;\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpjq76pegk.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822369
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    for i in 2..(n/2 + 1) {\n        if n % i == 0 {\n   \
    \         return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let\
    \ candidate = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpllkke8tc.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822369
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    for i in 2..n {\n        if n % i == 0 {\n           \
    \ return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpeaud3ork.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822367
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n  // By definition, 1 is not prime.\n  if n == 1 {\n    return\
    \ false;\n  }\n\n  // All even numbers are not prime.\n  if n % 2 == 0 {\n   \
    \ return false;\n  }\n\n  // All other primes are odd numbers > 1.\n  for i in\
    \ (3..n).step_by(2) {\n    if n % i == 0 {\n      return false;\n    }\n  }\n\n\
    \  return true;\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    if n < 2 {\n        return false;\n    }\n    for i in\
    \ 2..n {\n        if n % i == 0 {\n            return false;\n        }\n    }\n\
    \    true\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822367
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    if n <= 1 {\n        return false;\n    }\n    if n <=\
    \ 3 {\n        return true;\n    }\n    if n % 2 == 0 || n % 3 == 0 {\n      \
    \  return false;\n    }\n    let mut i = 5;\n    while i * i <= n {\n        if\
    \ n % i == 0 || n % (i + 2) == 0 {\n            return false;\n        }\n   \
    \     i += 6;\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_prime;\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101), true);\n\
    \    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441), true);\n\
    \    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822367
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    if n < 2 {\n        return false;\n    }\n\n    if n ==\
    \ 2 {\n        return true;\n    }\n\n    if n % 2 == 0 {\n        return false;\n\
    \    }\n\n    let mut m = 3;\n    while m < n {\n        if n % m == 0 {\n   \
    \         return false;\n        }\n        m += 2;\n    }\n\n    true\n}\n\n\
    fn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6), false);\n\
    \    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11), true);\n\
    \    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61), true);\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822370
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    if n < 2 {\n        return false;\n    }\n    let upper\
    \ = (n as f64).sqrt() as isize + 1;\n    for i in 2..upper {\n        if n % i\
    \ == 0 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main()\
    \ {\n    let candidate = is_prime;\n    assert_eq!(candidate(6), false);\n   \
    \ assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11), true);\n  \
    \  assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61), true);\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822370
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    for i in 2..n {\n        if n % i == 0 {\n           \
    \ return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpeaud3ork.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822367
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    let mut m = n - 1;\n    while m > 1 {\n        if n %\
    \ m == 0 {\n            return false;\n        }\n        m -= 1;\n    }\n   \
    \ true\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp4o0g0lai.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822368
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    if n < 0 {\n        return false;\n    }\n\n    if n ==\
    \ 0 || n == 1 {\n        return false;\n    }\n\n    if n == 2 {\n        return\
    \ true;\n    }\n\n    if n % 2 == 0 {\n        return false;\n    }\n\n    for\
    \ i in 3..(n as f64).sqrt() as isize + 1 {\n        if n % i == 0 {\n        \
    \    return false;\n        }\n    }\n\n    true\n}\n\nfn main() {\n    let candidate\
    \ = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822370
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    let sqrt = (n as f64).sqrt() as isize;\n    // If a number\
    \ divides n, it must be <= sqrt(n).\n    (2..=sqrt).all(|i| n % i != 0)\n}\n\n\
    fn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6), false);\n\
    \    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11), true);\n\
    \    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61), true);\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp7iflqiwk.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822370
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    if n < 2 {\n        return false;\n    }\n    let max\
    \ = (n as f64).sqrt() as isize + 1;\n    for m in 2..max {\n        if n % m ==\
    \ 0 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822370
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    for i in 2..((n as f64).sqrt() as isize + 1) {\n     \
    \   if n % i == 0 {\n            return false;\n        }\n    }\n    true\n}\n\
    \nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6), false);\n\
    \    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11), true);\n\
    \    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61), true);\n\
    \    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpectlfa6q.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822369
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    for i in 2..n {\n        if n % i == 0 {\n           \
    \ return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpeaud3ork.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822367
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    match n {\n        0 | 1 => false,\n        2 => true,\n\
    \        _ => {\n            let mut i = 2;\n            while i < n {\n     \
    \           if n % i == 0 {\n                    return false;\n             \
    \   }\n                i += 1;\n            }\n            true\n        }\n \
    \   }\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822370
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    if n <= 1 {\n        return false;\n    }\n\n    let mut\
    \ d = 2;\n    while d * d <= n {\n        if n % d == 0 {\n            return\
    \ false;\n        }\n        d += 1;\n    }\n    true\n}\n\nfn main() {\n    let\
    \ candidate = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822369
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    if n <= 1 {\n        return false;\n    }\n    let sqrt\
    \ = (n as f64).sqrt().ceil() as isize;\n    let mut i = 2;\n    while i <= sqrt\
    \ {\n        if n % i == 0 {\n            return false;\n        }\n        i\
    \ += 1;\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_prime;\n  \
    \  assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441), true);\n\
    \    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822370
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    for i in 2..n {\n        if n % i == 0 {\n           \
    \ return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpeaud3ork.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822367
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    if n < 2 {\n        return false;\n    }\n    let mut\
    \ i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n            return\
    \ false;\n        }\n        i += 1;\n    }\n    true\n}\n\nfn main() {\n    let\
    \ candidate = is_prime;\n    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101),\
    \ true);\n    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441),\
    \ true);\n    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822368
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    // The number 1 is special.\n    if n == 1 {\n       \
    \ return false;\n    }\n\n    // 2 is prime.\n    if n == 2 {\n        return\
    \ true;\n    }\n\n    // If n is even, it's not prime.\n    if n % 2 == 0 {\n\
    \        return false;\n    }\n\n    // Check all odd factors up to the square\
    \ root of n.\n    let mut factor = 3;\n    while factor * factor <= n {\n    \
    \    if n % factor == 0 {\n            return false;\n        }\n        factor\
    \ += 2;\n    }\n\n    true\n}\n\nfn main() {\n    let candidate = is_prime;\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101), true);\n\
    \    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441), true);\n\
    \    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822370
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    // can't be even, and can't be divisible by 3, so only\
    \ test every 6th number\n    let mut i = 5;\n    while i * i <= n {\n        if\
    \ n % i == 0 || n % (i + 2) == 0 {\n            return false;\n        }\n   \
    \     i += 6;\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_prime;\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101), true);\n\
    \    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441), true);\n\
    \    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpgfpgvm66.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822370
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    let sqrt = (n as f64).sqrt().floor() as isize;\n    let\
    \ mut is_prime = true;\n    let mut i = 2;\n    while i <= sqrt {\n        if\
    \ n % i == 0 {\n            is_prime = false;\n            break;\n        }\n\
    \        i += 1;\n    }\n    is_prime\n}\n\nfn main() {\n    let candidate = is_prime;\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101), true);\n\
    \    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441), true);\n\
    \    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpe2_b_3bk.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822370
- exit_code: 0
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    if n < 0 {\n        return false;\n    }\n    match n\
    \ {\n        0 | 1 => false,\n        2 | 3 => true,\n        _ => {\n       \
    \     for i in 2..((n as f64).sqrt() as isize + 1) {\n                if n % i\
    \ == 0 {\n                    return false;\n                }\n            }\n\
    \            true\n        }\n    }\n}\n\nfn main() {\n    let candidate = is_prime;\n\
    \    assert_eq!(candidate(6), false);\n    assert_eq!(candidate(101), true);\n\
    \    assert_eq!(candidate(11), true);\n    assert_eq!(candidate(13441), true);\n\
    \    assert_eq!(candidate(61), true);\n    assert_eq!(candidate(4), false);\n\
    \    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(5), true);\n \
    \   assert_eq!(candidate(11), true);\n    assert_eq!(candidate(17), true);\n \
    \   assert_eq!(candidate(85), false);\n    assert_eq!(candidate(77), false);\n\
    \    assert_eq!(candidate(255379), false);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822370
- exit_code: 101
  program: "/// Return true if a given number is prime, and false otherwise.\nfn is_prime(n:\
    \ isize) -> bool {\n    let max = (n as f64).sqrt() as isize;\n    for i in 2..max\
    \ {\n        if n % i == 0 {\n            return false;\n        }\n    }\n  \
    \  true\n}\n\nfn main() {\n    let candidate = is_prime;\n    assert_eq!(candidate(6),\
    \ false);\n    assert_eq!(candidate(101), true);\n    assert_eq!(candidate(11),\
    \ true);\n    assert_eq!(candidate(13441), true);\n    assert_eq!(candidate(61),\
    \ true);\n    assert_eq!(candidate(4), false);\n    assert_eq!(candidate(1), false);\n\
    \    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(11), true);\n \
    \   assert_eq!(candidate(17), true);\n    assert_eq!(candidate(85), false);\n\
    \    assert_eq!(candidate(77), false);\n    assert_eq!(candidate(255379), false);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmph29w0b8q.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822367
