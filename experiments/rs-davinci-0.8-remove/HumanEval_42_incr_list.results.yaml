language: rs
name: HumanEval_42_incr_list
results:
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|x| x + 1).collect()\n}\n\nfn main() {\n \
    \   let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    // Pretty bad in terms of correctness, but demonstrates\
    \ the use of 'map'!\n    l.iter().map(|x| x + 1).collect()\n}\n\nfn main() {\n\
    \    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|&x| x + 1).collect()\n}\n\nfn main() {\n\
    \    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut new_list = Vec::with_capacity(l.len());\n    for\
    \ x in l {\n        new_list.push(x + 1);\n    }\n    new_list\n}\n\nfn main()\
    \ {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 101
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    vec![0; l.len()]\n}\n\nfn main() {\n    let candidate =\
    \ incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 0, 0]`,\n right: `[4, 3, 2]`', /tmp/tmp_n139p_i.rs:9:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|x| x + 1).collect()\n}\n\nfn main() {\n \
    \   let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|x| x + 1).collect()\n}\n\nfn main() {\n \
    \   let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut res = Vec::new();\n    for &x in l.iter() {\n \
    \       res.push(x + 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut incr_list = Vec::new();\n    for e in l {\n   \
    \     incr_list.push(e + 1);\n    }\n    incr_list\n}\n\nfn main() {\n    let\
    \ candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|&x| x + 1).collect()\n}\n\nfn main() {\n\
    \    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|x| x + 1).collect()\n}\n\nfn main() {\n \
    \   let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut res = Vec::new();\n    for i in l {\n        res.push(i\
    \ + 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = incr_list;\n  \
    \  assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut res = Vec::new();\n    for i in l {\n        res.push(i\
    \ + 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = incr_list;\n  \
    \  assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut r = Vec::new();\n    for elt in l {\n        r.push(elt\
    \ + 1);\n    }\n    r\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut res = Vec::new();\n    for x in l {\n        res.push(x\
    \ + 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = incr_list;\n  \
    \  assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut res = Vec::new();\n    for x in l {\n        res.push(x\
    \ + 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = incr_list;\n  \
    \  assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|x| x + 1).collect()\n}\n\nfn main() {\n \
    \   let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|i| i + 1).collect()\n}\n\nfn main() {\n \
    \   let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 1
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    map(l, incr)\n}\n\nfn main() {\n    let candidate = incr_list;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `map` in this scope\n --> /tmp/tmp_int85av.rs:3:5\n\
    \  |\n3 |     map(l, incr)\n  |     ^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `incr` in this scope\n --> /tmp/tmp_int85av.rs:3:12\n  |\n\
    3 |     map(l, incr)\n  |            ^^^^ not found in this scope\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut r = Vec::new();\n    for e in l {\n        r.push(e\
    \ + 1);\n    }\n    r\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    // TODO\n    l.iter().map(|x| x + 1).collect()\n}\n\nfn\
    \ main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut output = Vec::new();\n    for item in l {\n   \
    \     output.push(item + 1);\n    }\n    output\n}\n\nfn main() {\n    let candidate\
    \ = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|x| x + 1).collect()\n}\n\nfn main() {\n \
    \   let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|x| x + 1).collect()\n}\n\nfn main() {\n \
    \   let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|x| x + 1).collect()\n}\n\nfn main() {\n \
    \   let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|x| x + 1).collect()\n}\n\nfn main() {\n \
    \   let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|&x| x + 1).collect()\n}\n\nfn main() {\n\
    \    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::with_capacity(l.len());\n    for\
    \ e in l {\n        result.push(e + 1);\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut res = vec![];\n    for i in l {\n        res.push(i\
    \ + 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = incr_list;\n  \
    \  assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|i| i + 1).collect()\n}\n\nfn main() {\n \
    \   let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|x| x + 1).collect()\n}\n\nfn main() {\n \
    \   let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n  l.iter().map(|x| x + 1).collect()\n}\n\nfn main() {\n   \
    \ let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    return l.iter().map(|i| i + 1).collect();\n}\n\nfn main()\
    \ {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|x| x + 1).collect()\n}\n\nfn main() {\n \
    \   let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|x| x + 1).collect()\n}\n\nfn main() {\n \
    \   let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|&x| x + 1).collect()\n}\n\nfn main() {\n\
    \    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut l = l;\n    for v in l.iter_mut() {\n        *v\
    \ += 1;\n    }\n    l\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut newl = l.clone();\n    for mut x in newl.iter_mut()\
    \ {\n        *x += 1;\n    }\n    newl\n}\n\nfn main() {\n    let candidate =\
    \ incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|i| i + 1).collect()\n}\n\nfn main() {\n \
    \   let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|x| x + 1).collect()\n}\n\nfn main() {\n \
    \   let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut v: Vec<isize> = Vec::new();\n    for i in 0..l.len()\
    \ {\n        v.push(l[i] + 1);\n    }\n    v\n}\n\nfn main() {\n    let candidate\
    \ = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|x| x + 1).collect()\n}\n\nfn main() {\n \
    \   let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut l2 = l.clone();\n    for e in l2.iter_mut() {\n\
    \        *e += 1;\n    }\n    l2\n}\n\nfn main() {\n    let candidate = incr_list;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut r = Vec::new();\n    for i in l {\n        r.push(i\
    \ + 1);\n    }\n    r\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut out: Vec<isize> = Vec::new();\n    for x in l {\n\
    \        out.push(x + 1);\n    }\n    out\n}\n\nfn main() {\n    let candidate\
    \ = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|&x| x + 1).collect()\n}\n\nfn main() {\n\
    \    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 101
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    // TODO: Implement incr_list.\n    Vec::new()\n}\n\nfn\
    \ main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[4, 3, 2]`', /tmp/tmp8kvzjgi_.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|x| x + 1).collect()\n}\n\nfn main() {\n \
    \   let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut res = Vec::new();\n    for e in l {\n        res.push(e\
    \ + 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = incr_list;\n  \
    \  assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|x| x + 1).collect()\n}\n\nfn main() {\n \
    \   let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut l2 = Vec::new();\n    for e in l {\n        l2.push(e\
    \ + 1);\n    }\n    l2\n}\n\nfn main() {\n    let candidate = incr_list;\n   \
    \ assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut l_incr = Vec::new();\n    for num in l {\n    \
    \    l_incr.push(num + 1);\n    }\n    l_incr\n}\n\nfn main() {\n    let candidate\
    \ = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|x| x + 1).collect()\n}\n\nfn main() {\n \
    \   let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut out = Vec::new();\n    for e in l {\n        out.push(e\
    \ + 1);\n    }\n    out\n}\n\nfn main() {\n    let candidate = incr_list;\n  \
    \  assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut l1 = Vec::new();\n    for i in l {\n        l1.push(i\
    \ + 1);\n    }\n    l1\n}\n\nfn main() {\n    let candidate = incr_list;\n   \
    \ assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut l2 = Vec::new();\n    for elt in l {\n        l2.push(elt\
    \ + 1);\n    }\n    l2\n}\n\nfn main() {\n    let candidate = incr_list;\n   \
    \ assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|x| x + 1).collect()\n}\n\nfn main() {\n \
    \   let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|e| *e + 1).collect()\n}\n\nfn main() {\n\
    \    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut res = Vec::new();\n    for x in l {\n        res.push(x\
    \ + 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = incr_list;\n  \
    \  assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|x| x + 1).collect()\n}\n\nfn main() {\n \
    \   let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::with_capacity(l.len());\n    for\
    \ i in l {\n        result.push(i + 1);\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut res = Vec::new();\n    for x in l {\n        res.push(x\
    \ + 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = incr_list;\n  \
    \  assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for x in l {\n      \
    \  result.push(x + 1);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 1
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    map(l, |x| x + 1)\n}\n\nfn main() {\n    let candidate\
    \ = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `map` in this scope\n --> /tmp/tmpr8ywcl57.rs:3:5\n\
    \  |\n3 |     map(l, |x| x + 1)\n  |     ^^^ not found in this scope\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut res = Vec::new();\n    for i in l {\n        res.push(i\
    \ + 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = incr_list;\n  \
    \  assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|&x| x + 1).collect()\n}\n\nfn main() {\n\
    \    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|x| x + 1).collect()\n}\n\nfn main() {\n \
    \   let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut l_out = l.clone();\n    for x in &mut l_out {\n\
    \        *x += 1;\n    }\n    l_out\n}\n\nfn main() {\n    let candidate = incr_list;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|x| x + 1).collect()\n}\n\nfn main() {\n \
    \   let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n  l.iter().map(|i| *i + 1).collect()\n}\n\nfn main() {\n  \
    \  let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut m = l;\n    for i in 0..m.len() {\n        m[i]\
    \ += 1;\n    }\n    m\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|i| i + 1).collect()\n}\n\nfn main() {\n \
    \   let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 101
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    vec![l[0] + 1, l[1] + 1, l[2] + 1]\n}\n\nfn main() {\n\
    \    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmp173pj8_x.rs:3:10

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|x| x + 1).collect()\n}\n\nfn main() {\n \
    \   let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut res = Vec::new();\n    for x in l {\n        res.push(x\
    \ + 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = incr_list;\n  \
    \  assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|x| x + 1).collect()\n}\n\nfn main() {\n \
    \   let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut v = Vec::new();\n    for n in l {\n        v.push(n\
    \ + 1);\n    }\n    v\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    // Since we use `to_owned()` here instead of `clone()`,\
    \ we can use this\n    // function even if the list contains non-copyable elements.\n\
    \    l.iter().map(|&i| i + 1).collect()\n}\n\nfn main() {\n    let candidate =\
    \ incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|x| x + 1).collect()\n}\n\nfn main() {\n \
    \   let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|x| x + 1).collect()\n}\n\nfn main() {\n \
    \   let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|x| x + 1).collect()\n}\n\nfn main() {\n \
    \   let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|x| x + 1).collect()\n}\n\nfn main() {\n \
    \   let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|&n| n + 1).collect()\n}\n\nfn main() {\n\
    \    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|x| x + 1).collect()\n}\n\nfn main() {\n \
    \   let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut res = vec![];\n    for x in l {\n        res.push(x\
    \ + 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = incr_list;\n  \
    \  assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut v = vec![];\n    for elem in l {\n        v.push(elem\
    \ + 1);\n    }\n    v\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut res = vec![];\n    for el in l {\n        res.push(el\
    \ + 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = incr_list;\n  \
    \  assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|x| x + 1).collect()\n}\n\nfn main() {\n \
    \   let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|&x| x + 1).collect()\n}\n\nfn main() {\n\
    \    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|x| x + 1).collect()\n}\n\nfn main() {\n \
    \   let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut res = Vec::new();\n    for i in l {\n        res.push(i\
    \ + 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = incr_list;\n  \
    \  assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|&e| e + 1).collect()\n}\n\nfn main() {\n\
    \    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|i| i + 1).collect()\n}\n\nfn main() {\n \
    \   let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|e| e + 1).collect()\n}\n\nfn main() {\n \
    \   let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut res = Vec::with_capacity(l.len());\n    for i in\
    \ l {\n        res.push(i + 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|&x| x + 1).collect()\n}\n\nfn main() {\n\
    \    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|x| x + 1).collect()\n}\n\nfn main() {\n \
    \   let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|x| x + 1).collect()\n}\n\nfn main() {\n \
    \   let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|x| x + 1).collect()\n}\n\nfn main() {\n \
    \   let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut incr = Vec::new();\n    for i in l {\n        incr.push(i\
    \ + 1);\n    }\n    incr\n}\n\nfn main() {\n    let candidate = incr_list;\n \
    \   assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n  let mut out: Vec<isize> = Vec::new();\n  for x in l {\n \
    \   out.push(x + 1);\n  }\n  out\n}\n\nfn main() {\n    let candidate = incr_list;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n  l.iter().map(|x| *x + 1).collect()\n}\n\nfn main() {\n  \
    \  let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|n| n + 1).collect()\n}\n\nfn main() {\n \
    \   let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|&x| x + 1).collect()\n}\n\nfn main() {\n\
    \    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|&x| x + 1).collect()\n}\n\nfn main() {\n\
    \    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n  let mut new_l = l.clone();\n  for i in new_l.iter_mut() {\n\
    \    *i += 1;\n  }\n  new_l\n}\n\nfn main() {\n    let candidate = incr_list;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|x| x + 1).collect()\n}\n\nfn main() {\n \
    \   let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut res = Vec::with_capacity(l.len());\n    for &x\
    \ in l.iter() {\n        res.push(x + 1);\n    }\n    res\n}\n\nfn main() {\n\
    \    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut r = Vec::with_capacity(l.len());\n    for i in\
    \ l {\n        r.push(i + 1);\n    }\n    r\n}\n\nfn main() {\n    let candidate\
    \ = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut out = Vec::new();\n    for x in l {\n        out.push(x\
    \ + 1);\n    }\n    out\n}\n\nfn main() {\n    let candidate = incr_list;\n  \
    \  assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|x| x + 1).collect()\n}\n\nfn main() {\n \
    \   let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut r: Vec<isize> = Vec::new();\n    for n in l {\n\
    \        r.push(n + 1);\n    }\n    r\n}\n\nfn main() {\n    let candidate = incr_list;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    // To return an immutable vector, we use 'return' keyword\n\
    \    return l.iter().map(|x| x + 1).collect();\n}\n\nfn main() {\n    let candidate\
    \ = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    // TODO\n    l.iter().map(|x| x + 1).collect()\n}\n\nfn\
    \ main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|x| x + 1).collect()\n}\n\nfn main() {\n \
    \   let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|x| x + 1).collect()\n}\n\nfn main() {\n \
    \   let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut v = Vec::new();\n    for elem in l {\n        v.push(elem\
    \ + 1);\n    }\n    v\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|&x| x + 1).collect()\n}\n\nfn main() {\n\
    \    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|x| x + 1).collect()\n}\n\nfn main() {\n \
    \   let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|&x| x + 1).collect()\n}\n\nfn main() {\n\
    \    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|x| x + 1).collect()\n}\n\nfn main() {\n \
    \   let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut res = Vec::new();\n    for x in l {\n        res.push(x\
    \ + 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = incr_list;\n  \
    \  assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|x| x + 1).collect()\n}\n\nfn main() {\n \
    \   let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|x| x + 1).collect()\n}\n\nfn main() {\n \
    \   let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|x| x + 1).collect()\n}\n\nfn main() {\n \
    \   let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|x| x + 1).collect()\n}\n\nfn main() {\n \
    \   let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n  l.iter().map(|&x| x + 1).collect()\n}\n\nfn main() {\n  \
    \  let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut res = Vec::new();\n    for e in l {\n        res.push(e\
    \ + 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = incr_list;\n  \
    \  assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut incr_l = Vec::new();\n    for elem in l {\n   \
    \     incr_l.push(elem + 1);\n    }\n    incr_l\n}\n\nfn main() {\n    let candidate\
    \ = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|x| x + 1).collect()\n}\n\nfn main() {\n \
    \   let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut r = Vec::with_capacity(l.len());\n    for e in\
    \ l {\n        r.push(e + 1);\n    }\n    r\n}\n\nfn main() {\n    let candidate\
    \ = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut res = vec![];\n    for x in l {\n        res.push(x\
    \ + 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = incr_list;\n  \
    \  assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|&x| x + 1).collect()\n}\n\nfn main() {\n\
    \    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|x| x + 1).collect()\n}\n\nfn main() {\n \
    \   let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for e in l {\n      \
    \  result.push(e + 1);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|v| v + 1).collect()\n}\n\nfn main() {\n \
    \   let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|x| x + 1).collect()\n}\n\nfn main() {\n \
    \   let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|x| x + 1).collect()\n}\n\nfn main() {\n \
    \   let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|x| x + 1).collect()\n}\n\nfn main() {\n \
    \   let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 1
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    map(l, |e| { e + 1 })\n}\n\nfn main() {\n    let candidate\
    \ = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `map` in this scope\n --> /tmp/tmp2w5gmech.rs:3:5\n\
    \  |\n3 |     map(l, |e| { e + 1 })\n  |     ^^^ not found in this scope\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|x| x + 1).collect()\n}\n\nfn main() {\n \
    \   let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|x| x + 1).collect()\n}\n\nfn main() {\n \
    \   let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 1
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    map(l, |i| i + 1)\n}\n\nfn main() {\n    let candidate\
    \ = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `map` in this scope\n --> /tmp/tmpcjq1se7t.rs:3:5\n\
    \  |\n3 |     map(l, |i| i + 1)\n  |     ^^^ not found in this scope\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|x| x + 1).collect()\n}\n\nfn main() {\n \
    \   let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|&x| x + 1).collect()\n}\n\nfn main() {\n\
    \    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::with_capacity(l.len());\n    for\
    \ v in l {\n        result.push(v + 1);\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|n| n + 1).collect()\n}\n\nfn main() {\n \
    \   let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut res = Vec::with_capacity(l.len());\n    for x in\
    \ l {\n        res.push(x + 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|i| i + 1).collect()\n}\n\nfn main() {\n \
    \   let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|&x| x + 1).collect()\n}\n\nfn main() {\n\
    \    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut ret = Vec::new();\n    for e in l {\n        ret.push(e\
    \ + 1);\n    }\n    ret\n}\n\nfn main() {\n    let candidate = incr_list;\n  \
    \  assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n  l.iter().map(|v| v + 1).collect()\n}\n\nfn main() {\n   \
    \ let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|x| x + 1).collect()\n}\n\nfn main() {\n \
    \   let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut v = Vec::new();\n    for x in l {\n        v.push(x\
    \ + 1);\n    }\n    v\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n  let mut ret = Vec::new();\n  for i in l {\n    ret.push(i\
    \ + 1);\n  }\n  ret\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|i| i + 1).collect()\n}\n\nfn main() {\n \
    \   let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|x| x + 1).collect()\n}\n\nfn main() {\n \
    \   let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n  let mut l2 = l.clone();\n  for e in l2.iter_mut() {\n   \
    \ *e += 1;\n  }\n  l2\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut l2 = l.clone();\n    for i in l2.iter_mut() {\n\
    \        *i += 1;\n    }\n    l2\n}\n\nfn main() {\n    let candidate = incr_list;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|i| i + 1).collect()\n}\n\nfn main() {\n \
    \   let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|x| x + 1).collect()\n}\n\nfn main() {\n \
    \   let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|x| x + 1).collect()\n}\n\nfn main() {\n \
    \   let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut r = Vec::new();\n    for i in l {\n        r.push(i\
    \ + 1);\n    }\n    r\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut xs = Vec::new();\n    for x in l {\n        xs.push(x\
    \ + 1);\n    }\n    xs\n}\n\nfn main() {\n    let candidate = incr_list;\n   \
    \ assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|i| i + 1).collect()\n}\n\nfn main() {\n \
    \   let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut new_list = Vec::new();\n    for i in l {\n    \
    \    new_list.push(i + 1);\n    }\n    new_list\n}\n\nfn main() {\n    let candidate\
    \ = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut l = l;\n    for x in l.iter_mut() {\n        *x\
    \ += 1;\n    }\n    l\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut res = Vec::new();\n    for i in l {\n        res.push(i\
    \ + 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = incr_list;\n  \
    \  assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut new_l = l.clone();\n    for i in 0..new_l.len()\
    \ {\n        new_l[i] += 1;\n    }\n    new_l\n}\n\nfn main() {\n    let candidate\
    \ = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|x| x + 1).collect()\n}\n\nfn main() {\n \
    \   let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|x| x + 1).collect()\n}\n\nfn main() {\n \
    \   let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|i| i + 1).collect()\n}\n\nfn main() {\n \
    \   let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|i| i + 1).collect()\n}\n\nfn main() {\n \
    \   let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n  let mut res = Vec::new();\n  for x in l {\n    res.push(x\
    \ + 1);\n  }\n  res\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|x| x + 1).collect()\n}\n\nfn main() {\n \
    \   let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|x| x + 1).collect()\n}\n\nfn main() {\n \
    \   let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|x| x + 1).collect()\n}\n\nfn main() {\n \
    \   let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|x| x + 1).collect()\n}\n\nfn main() {\n \
    \   let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|&x| x + 1).collect()\n}\n\nfn main() {\n\
    \    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|x| x + 1).collect()\n}\n\nfn main() {\n \
    \   let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|e| e + 1).collect()\n}\n\nfn main() {\n \
    \   let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut res = Vec::new();\n    for i in l {\n        res.push(i\
    \ + 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = incr_list;\n  \
    \  assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut res = Vec::new();\n    for e in l {\n        res.push(e\
    \ + 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = incr_list;\n  \
    \  assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    // NB: you need to take ownership of l in this function.\
    \ You can't do\n    // something like `return l.iter().map(|x| x + 1)` because\
    \ the iterator\n    // returned by `l.iter()` holds a reference to l.\n    l.iter().map(|x|\
    \ x + 1).collect()\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|e| e + 1).collect()\n}\n\nfn main() {\n \
    \   let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|x| x + 1).collect()\n}\n\nfn main() {\n \
    \   let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|&e| e + 1).collect()\n}\n\nfn main() {\n\
    \    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|x| x + 1).collect()\n}\n\nfn main() {\n \
    \   let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|i| i + 1).collect()\n}\n\nfn main() {\n \
    \   let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut r = Vec::new();\n    for i in l {\n        r.push(i\
    \ + 1);\n    }\n    r\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|&x| x + 1).collect()\n}\n\nfn main() {\n\
    \    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|&x| x + 1).collect()\n}\n\nfn main() {\n\
    \    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|&x| x + 1).collect()\n}\n\nfn main() {\n\
    \    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut res = vec![];\n    for i in l {\n        res.push(i\
    \ + 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = incr_list;\n  \
    \  assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![3,\
    \ 2, 1]), vec![4, 3, 2]);\n    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9,\
    \ 0, 123]), vec![6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|x| x + 1).collect()\n}\n\nfn main() {\n \
    \   let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|&e| e + 1).collect()\n}\n\nfn main() {\n\
    \    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut l = l;\n    for i in 0..l.len() {\n        l[i]\
    \ += 1;\n    }\n    l\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut c = l.clone();\n    c.iter_mut().for_each(|x| *x\
    \ += 1);\n    c\n}\n\nfn main() {\n    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|&x| x + 1).collect()\n}\n\nfn main() {\n\
    \    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return list with elements incremented by 1.\nfn incr_list(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.iter().map(|&x| x + 1).collect()\n}\n\nfn main() {\n\
    \    let candidate = incr_list;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![3, 2, 1]), vec![4, 3, 2]);\n\
    \    assert_eq!(candidate(vec![5, 2, 5, 2, 3, 3, 9, 0, 123]), vec![6, 3, 6, 3,\
    \ 4, 4, 10, 1, 124]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
