language: rs
name: HumanEval_145_order_by_points
results:
- exit_code: 101
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut temp = nums.clone();\n    temp.sort_by(|a, b| {\n\
    \        let mut sum_a = 0;\n        let mut sum_b = 0;\n        for i in format!(\"\
    {}\", a).chars() {\n            sum_a += i.to_digit(10).unwrap() as isize;\n \
    \       }\n        for i in format!(\"{}\", b).chars() {\n            sum_b +=\
    \ i.to_digit(10).unwrap() as isize;\n        }\n        sum_a.cmp(&sum_b)\n  \
    \  });\n    temp\n}\n\nfn main() {\n    let candidate = order_by_points;\n   \
    \ assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpbndz0qjs.rs:12:37

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822471
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut tuples: Vec<(isize, isize)> = Vec::new();\n    for\
    \ (i, x) in nums.iter().enumerate() {\n        let sum: isize = x.to_string().chars().map(|y|\
    \ y.to_digit(10).unwrap() as isize).sum();\n        tuples.push((i, sum));\n \
    \   }\n    tuples.sort_by(|a, b| a.1.cmp(&b.1));\n    tuples.iter().map(|x| nums[x.0\
    \ as usize]).collect()\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpszk7kx0z.rs:10:22\n   |\n\
    10 |         tuples.push((i, sum));\n   |                      ^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n10 |         tuples.push((i.try_into().unwrap(),\
    \ sum));\n   |                      ~~~~~~~~~~~~~~~~~~~~~\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659822471
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    nums.iter()\n        .map(|x| (*x, digits(*x).iter().fold(0,\
    \ |a, x| a + x)))\n        .enumerate()\n        .sort_by(|(_, (a, b)), (_, (c,\
    \ d))| b.cmp(&d).then(a.cmp(&c)))\n        .map(|(i, (a, _))| (i, a))\n      \
    \  .enumerate()\n        .sort_by(|(i, _), (j, _)| i.cmp(&j))\n        .map(|(_,\
    \ (_, a))| a)\n        .collect()\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `digits` in this scope\n --> /tmp/tmp2e413gl1.rs:8:23\n\
    \  |\n8 |         .map(|x| (*x, digits(*x).iter().fold(0, |a, x| a + x)))\n  |\
    \                       ^^^^^^ not found in this scope\n\nerror[E0599]: no method\
    \ named `sort_by` found for struct `Enumerate` in the current scope\n  --> /tmp/tmp2e413gl1.rs:10:10\n\
    \   |\n10 |         .sort_by(|(_, (a, b)), (_, (c, d))| b.cmp(&d).then(a.cmp(&c)))\n\
    \   |          ^^^^^^^ method not found in `Enumerate<Map<std::slice::Iter<'_,\
    \ isize>, _>>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0425, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822471
- exit_code: 101
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums = nums;\n    nums.sort_by(|a, b| (a.abs() % 10\
    \ + a.abs() / 10).cmp(&(b.abs() % 10 + b.abs() / 10)));\n    nums\n}\n\nfn main()\
    \ {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11,\
    \ -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, -1, 11, -11, -12]`,\n right: `[-1, -11, 1, -12, 11]`', /tmp/tmp4cjuu3m5.rs:14:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822471
- exit_code: 101
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    fn digit_sum(num: isize) -> usize {\n        let mut num =\
    \ num;\n        let mut sum = 0;\n        while num > 0 {\n            sum +=\
    \ (num % 10) as usize;\n            num /= 10;\n        }\n        sum\n    }\n\
    \n    let mut nums: Vec<_> = nums.into_iter().enumerate().collect();\n    nums.sort_by_key(|&(_,\
    \ num)| digit_sum(num));\n    nums.into_iter().map(|(_, x)| x).collect()\n}\n\n\
    fn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-1, -11, -12, 1, 11]`,\n right: `[-1, -11, 1, -12, 11]`', /tmp/tmpvq7gbdi6.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822471
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut new_vec = nums.clone();\n    new_vec.sort_by(|a, b|\
    \ {\n        let a_sum = sum_digit(*a);\n        let b_sum = sum_digit(*b);\n\
    \        a_sum.cmp(&b_sum)\n    });\n    new_vec\n}\n\nfn main() {\n    let candidate\
    \ = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `sum_digit` in this scope\n --> /tmp/tmppefx5ar_.rs:9:21\n\
    \  |\n9 |         let a_sum = sum_digit(*a);\n  |                     ^^^^^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find function `sum_digit` in\
    \ this scope\n  --> /tmp/tmppefx5ar_.rs:10:21\n   |\n10 |         let b_sum =\
    \ sum_digit(*b);\n   |                     ^^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822471
- exit_code: 101
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums: Vec<isize> = nums.into_iter().map(|x| x.abs()).collect();\n\
    \    nums.sort_by(|a, b| a.abs().to_string().chars().map(|x| x.to_digit(10).unwrap()\
    \ as isize).sum::<isize>().cmp(&b.abs().to_string().chars().map(|x| x.to_digit(10).unwrap()\
    \ as isize).sum::<isize>()));\n    nums\n}\n\nfn main() {\n    let candidate =\
    \ order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 1, 11, 11, 12]`,\n right: `[-1, -11, 1, -12, 11]`', /tmp/tmpno08_b0a.rs:14:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822471
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    nums.iter()\n        .enumerate()\n        .map(|(i, &n)|\
    \ (sum_of_digits(n), i, n))\n        .sorted()\n        .map(|(_, _, n)| n)\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `sum_of_digits` in this scope\n -->\
    \ /tmp/tmpg49popkp.rs:9:25\n  |\n9 |         .map(|(i, &n)| (sum_of_digits(n),\
    \ i, n))\n  |                         ^^^^^^^^^^^^^ not found in this scope\n\n\
    error[E0599]: no method named `sorted` found for struct `Map` in the current scope\n\
    \  --> /tmp/tmpg49popkp.rs:10:10\n   |\n10 |         .sorted()\n   |         \
    \ ^^^^^^ method not found in `Map<Enumerate<std::slice::Iter<'_, isize>>, _>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822471
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    nums.iter()\n        .enumerate()\n        .map(|(i, &n)|\
    \ (i, n, get_digits_sum(n)))\n        .collect::<Vec<_>>()\n        .sort_by(|a,\
    \ b| {\n            if a.2 == b.2 {\n                a.0.cmp(&b.0)\n         \
    \   } else {\n                a.2.cmp(&b.2)\n            }\n        })\n     \
    \   .into_iter()\n        .map(|n| n.1)\n        .collect()\n}\n\nfn main() {\n\
    \    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1,\
    \ -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `get_digits_sum` in this scope\n -->\
    \ /tmp/tmpqz19e9m8.rs:9:31\n  |\n9 |         .map(|(i, &n)| (i, n, get_digits_sum(n)))\n\
    \  |                               ^^^^^^^^^^^^^^ not found in this scope\n\n\
    error[E0609]: no field `2` on type `&_`\n  --> /tmp/tmpqz19e9m8.rs:12:18\n   |\n\
    12 |             if a.2 == b.2 {\n   |                  ^\n\nerror[E0599]: the\
    \ method `into_iter` exists for unit type `()`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmpqz19e9m8.rs:18:10\n   |\n18 |         .into_iter()\n\
    \   |          ^^^^^^^^^ method cannot be called on `()` due to unsatisfied trait\
    \ bounds\n   |\n   = note: the following trait bounds were not satisfied:\n  \
    \         `(): Iterator`\n           which is required by `(): IntoIterator`\n\
    \           `&(): Iterator`\n           which is required by `&(): IntoIterator`\n\
    \           `&mut (): Iterator`\n           which is required by `&mut (): IntoIterator`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0425, E0599, E0609.\nFor more information about an error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659822471
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_rev = nums.clone();\n    nums_rev.reverse();\n\
    \    let mut nums_rev = nums_rev\n        .into_iter()\n        .enumerate()\n\
    \        .map(|(i, n)| (n, i))\n        .collect::<Vec<(isize, usize)>>();\n \
    \   nums_rev.sort_by(|a, b| {\n        let a_sum = sum_digits(a.0);\n        let\
    \ b_sum = sum_digits(b.0);\n        if a_sum < b_sum {\n            return Ordering::Less;\n\
    \        } else if a_sum > b_sum {\n            return Ordering::Greater;\n  \
    \      }\n        if a.1 < b.1 {\n            return Ordering::Less;\n       \
    \ } else if a.1 > b.1 {\n            return Ordering::Greater;\n        }\n  \
    \      Ordering::Equal\n    });\n    nums_rev.iter().map(|a| a.0).collect()\n\
    }\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Ordering`\n  -->\
    \ /tmp/tmpfrj98qb3.rs:18:20\n   |\n18 |             return Ordering::Less;\n \
    \  |                    ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `Ordering`\n  --> /tmp/tmpfrj98qb3.rs:20:20\n\
    \   |\n20 |             return Ordering::Greater;\n   |                    ^^^^^^^^\
    \ use of undeclared type `Ordering`\n\nerror[E0433]: failed to resolve: use of\
    \ undeclared type `Ordering`\n  --> /tmp/tmpfrj98qb3.rs:23:20\n   |\n23 |    \
    \         return Ordering::Less;\n   |                    ^^^^^^^^ use of undeclared\
    \ type `Ordering`\n\nerror[E0433]: failed to resolve: use of undeclared type `Ordering`\n\
    \  --> /tmp/tmpfrj98qb3.rs:25:20\n   |\n25 |             return Ordering::Greater;\n\
    \   |                    ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `Ordering`\n  --> /tmp/tmpfrj98qb3.rs:27:9\n\
    \   |\n27 |         Ordering::Equal\n   |         ^^^^^^^^ use of undeclared type\
    \ `Ordering`\n\nerror[E0425]: cannot find function `sum_digits` in this scope\n\
    \  --> /tmp/tmpfrj98qb3.rs:15:21\n   |\n15 |         let a_sum = sum_digits(a.0);\n\
    \   |                     ^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `sum_digits` in this scope\n  --> /tmp/tmpfrj98qb3.rs:16:21\n\
    \   |\n16 |         let b_sum = sum_digits(b.0);\n   |                     ^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to 7 previous errors\n\nSome\
    \ errors have detailed explanations: E0425, E0433.\nFor more information about\
    \ an error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822471
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    nums.into_iter().enumerate().sorted_by(|(_, a), (_, b)| {\n\
    \        let (a_sum, b_sum) = (a.to_string().chars().map(|c| c.to_digit(10).unwrap()\
    \ as usize).sum(),\n                              b.to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap() as usize).sum());\n        if a_sum == b_sum {\n   \
    \         Ord::cmp(&a, &b)\n        } else {\n            Ord::cmp(&a_sum, &b_sum)\n\
    \        }\n    }).map(|(_, num)| num).collect()\n}\n\nfn main() {\n    let candidate\
    \ = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted_by` found for struct `Enumerate`\
    \ in the current scope\n --> /tmp/tmp0l09p4ms.rs:7:34\n  |\n7 |     nums.into_iter().enumerate().sorted_by(|(_,\
    \ a), (_, b)| {\n  |                                  ^^^^^^^^^ method not found\
    \ in `Enumerate<std::vec::IntoIter<isize>>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659822471
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    nums.iter()\n        .enumerate()\n        .map(|(i, x)| (i,\
    \ sum_digits(*x)))\n        .sorted_by(|(i, sum_a), (j, sum_b)| {\n          \
    \  let comparison = sum_a.cmp(sum_b);\n            match comparison {\n      \
    \          Ordering::Equal => i.cmp(j),\n                _ => comparison,\n  \
    \          }\n        })\n        .map(|(_, x)| x)\n        .collect()\n}\n\n\
    fn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Ordering`\n  -->\
    \ /tmp/tmph4l5aw8x.rs:13:17\n   |\n13 |                 Ordering::Equal => i.cmp(j),\n\
    \   |                 ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0425]:\
    \ cannot find function `sum_digits` in this scope\n --> /tmp/tmph4l5aw8x.rs:9:27\n\
    \  |\n9 |         .map(|(i, x)| (i, sum_digits(*x)))\n  |                    \
    \       ^^^^^^^^^^ not found in this scope\n\nerror[E0599]: no method named `sorted_by`\
    \ found for struct `Map` in the current scope\n  --> /tmp/tmph4l5aw8x.rs:10:10\n\
    \   |\n10 |         .sorted_by(|(i, sum_a), (j, sum_b)| {\n   |          ^^^^^^^^^\
    \ method not found in `Map<Enumerate<std::slice::Iter<'_, isize>>, _>`\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0425, E0433, E0599.\nFor more information about an error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659822471
- exit_code: 101
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp3p_6ij05.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822471
- exit_code: 101
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums = nums;\n    nums.sort_by(|a, b| {\n        let\
    \ a_sum: isize = a.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize).sum();\n\
    \        let b_sum: isize = b.to_string().chars().map(|c| c.to_digit(10).unwrap()\
    \ as isize).sum();\n        a_sum.cmp(&b_sum)\n    });\n    nums\n}\n\nfn main()\
    \ {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11,\
    \ -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpyhr70hgi.rs:9:73

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822471
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut sum_of_digits: Vec<(isize, usize)> = nums\n      \
    \  .iter()\n        .enumerate()\n        .map(|(i, &x)| (sum_of_digits(x), i))\n\
    \        .collect();\n    sum_of_digits.sort();\n    sum_of_digits\n        .iter()\n\
    \        .map(|(x, _)| *x)\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `sum_of_digits` in this scope\n  -->\
    \ /tmp/tmp0bd65u0_.rs:10:25\n   |\n10 |         .map(|(i, &x)| (sum_of_digits(x),\
    \ i))\n   |                         ^^^^^^^^^^^^^ not found in this scope\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822471
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    nums.iter()\n        .enumerate()\n        .map(|(i, &x)|\
    \ {\n            let mut v = x;\n            let mut sum = 0;\n            while\
    \ v > 0 {\n                sum += v % 10;\n                v /= 10;\n        \
    \    }\n            (i, sum, x)\n        })\n        .sorted_by(|a, b| a.1.cmp(&b.1).then(a.0.cmp(&b.0)))\n\
    \        .map(|(_, _, x)| x)\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted_by` found for struct `Map` in the\
    \ current scope\n  --> /tmp/tmpzykdsdhe.rs:18:10\n   |\n18 |         .sorted_by(|a,\
    \ b| a.1.cmp(&b.1).then(a.0.cmp(&b.0)))\n   |          ^^^^^^^^^ method not found\
    \ in `Map<Enumerate<std::slice::Iter<'_, isize>>, [closure@/tmp/tmpzykdsdhe.rs:9:14:\
    \ 17:10]>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659822471
- exit_code: 101
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums = nums;\n    let sum = |a: &isize| {\n      \
    \  let mut sum = 0;\n        let mut a = *a;\n        while a > 0 {\n        \
    \    sum += a % 10;\n            a /= 10;\n        }\n        sum\n    };\n  \
    \  nums.sort_by(|a, b| sum(a).cmp(&sum(b)));\n    nums\n}\n\nfn main() {\n   \
    \ let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11,\
    \ -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-1, -11, -12, 1, 11]`,\n right: `[-1, -11, 1, -12, 11]`', /tmp/tmpx8jzyvvz.rs:23:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822471
- exit_code: 101
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums: Vec<isize> = nums;\n    nums.sort_by(|a, b|\
    \ a.to_string().chars().map(|x| x.to_digit(10).unwrap() as isize).sum::<isize>().cmp(&b.to_string().chars().map(|x|\
    \ x.to_digit(10).unwrap() as isize).sum::<isize>()));\n    nums\n}\n\nfn main()\
    \ {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11,\
    \ -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmptsq0l3_d.rs:8:70

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822471
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    nums.iter()\n        .enumerate()\n        .map(|(i, v)| (v,\
    \ i, sum_digits(*v)))\n        .sorted_by(|x, y| x.2.cmp(&y.2).then(x.1.cmp(&y.1)))\n\
    \        .into_iter()\n        .map(|(v, _, _)| *v)\n        .collect()\n}\n\n\
    fn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `sum_digits` in this scope\n --> /tmp/tmpnl2yoeky.rs:9:30\n\
    \  |\n9 |         .map(|(i, v)| (v, i, sum_digits(*v)))\n  |                 \
    \             ^^^^^^^^^^ not found in this scope\n\nerror[E0599]: no method named\
    \ `sorted_by` found for struct `Map` in the current scope\n  --> /tmp/tmpnl2yoeky.rs:10:10\n\
    \   |\n10 |         .sorted_by(|x, y| x.2.cmp(&y.2).then(x.1.cmp(&y.1)))\n   |\
    \          ^^^^^^^^^ method not found in `Map<Enumerate<std::slice::Iter<'_, isize>>,\
    \ _>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0425, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822471
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums = nums;\n    let mut sums = vec![0; nums.len()];\n\
    \    for i in 0..nums.len() {\n        let mut t = nums[i];\n        let mut sum\
    \ = 0;\n        while t > 0 {\n            sum += t % 10;\n            t /= 10;\n\
    \        }\n        sums[i] = sum;\n    }\n    nums.sort_by(|x, y| sums[x].cmp(&sums[y]));\n\
    \    nums\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `&isize`\n  --> /tmp/tmpygfek1s0.rs:18:25\n\
    \   |\n18 |     nums.sort_by(|x, y| sums[x].cmp(&sums[y]));\n   |            \
    \             ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `&isize`\n\
    \   = note: required because of the requirements on the impl of `Index<&isize>`\
    \ for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `&isize`\n\
    \  --> /tmp/tmpygfek1s0.rs:18:38\n   |\n18 |     nums.sort_by(|x, y| sums[x].cmp(&sums[y]));\n\
    \   |                                      ^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `&isize`\n   = note: required because of the requirements on\
    \ the impl of `Index<&isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659822471
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    // ...\n    let mut nums = nums;\n    nums.sort_by(|a, b|\
    \ {\n        sum_digits(*a).cmp(&sum_digits(*b))\n    });\n    nums\n}\n\nfn main()\
    \ {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11,\
    \ -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `sum_digits` in this scope\n  --> /tmp/tmpxcfbl0my.rs:10:9\n\
    \   |\n10 |         sum_digits(*a).cmp(&sum_digits(*b))\n   |         ^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find function `sum_digits` in\
    \ this scope\n  --> /tmp/tmpxcfbl0my.rs:10:29\n   |\n10 |         sum_digits(*a).cmp(&sum_digits(*b))\n\
    \   |                             ^^^^^^^^^^ not found in this scope\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822471
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    // Write your code here\n    return nums.iter().zip(nums.iter().map(|x|\
    \ x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize).sum::<isize>()).collect::<Vec<isize>>()).collect::<Vec<_>>().sort_by(|x,\
    \ y| {\n        if x.1 == y.1 {\n            return x.0.cmp(y.0);\n        }\n\
    \        return x.1.cmp(&y.1);\n    }).iter().map(|x| *x.0).collect::<Vec<isize>>();\n\
    }\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `iter` found for unit type `()` in the current\
    \ scope\n  --> /tmp/tmpzi633adw.rs:13:8\n   |\n13 |     }).iter().map(|x| *x.0).collect::<Vec<isize>>();\n\
    \   |        ^^^^ method not found in `()`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659822471
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    use std::cmp::Ordering;\n    let mut nums = nums;\n    nums.sort_by(|a,\
    \ b| {\n        let sum_a = sum_digits(*a);\n        let sum_b = sum_digits(*b);\n\
    \        match sum_a.cmp(&sum_b) {\n            Ordering::Equal => a.cmp(&b),\n\
    \            Ordering::Less => Ordering::Less,\n            Ordering::Greater\
    \ => Ordering::Greater,\n        }\n    });\n    nums\n}\n\nfn main() {\n    let\
    \ candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11,\
    \ -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `sum_digits` in this scope\n  --> /tmp/tmpy5kqpd3t.rs:10:21\n\
    \   |\n10 |         let sum_a = sum_digits(*a);\n   |                     ^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find function `sum_digits` in\
    \ this scope\n  --> /tmp/tmpy5kqpd3t.rs:11:21\n   |\n11 |         let sum_b =\
    \ sum_digits(*b);\n   |                     ^^^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822471
- exit_code: 101
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    fn get_points(n: isize) -> (usize, isize) {\n        let mut\
    \ n = n;\n        let mut points = 0;\n        while n > 0 {\n            points\
    \ += n % 10;\n            n /= 10;\n        }\n        (points as usize, n)\n\
    \    }\n\n    let mut aux: Vec<_> = nums.iter().enumerate().map(|(i, &x)| (get_points(x),\
    \ i, x)).collect();\n    aux.sort();\n    aux.into_iter().map(|(_, _, x)| x).collect()\n\
    }\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-12, -11, -1, 1, 11]`,\n right: `[-1, -11, 1, -12, 11]`', /tmp/tmpg01_31h2.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822471
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    nums.into_iter().enumerate().sorted_by(|a, b| {\n        a.1.to_string().chars().map(|d|\
    \ d.to_digit(10).unwrap() as isize).sum::<isize>()\n            .cmp(&b.1.to_string().chars().map(|d|\
    \ d.to_digit(10).unwrap() as isize).sum::<isize>())\n            .then_with(||\
    \ a.0.cmp(&b.0))\n    }).map(|(_, v)| v).collect()\n}\n\nfn main() {\n    let\
    \ candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11,\
    \ -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted_by` found for struct `Enumerate`\
    \ in the current scope\n --> /tmp/tmpcbh9m97x.rs:7:34\n  |\n7 |     nums.into_iter().enumerate().sorted_by(|a,\
    \ b| {\n  |                                  ^^^^^^^^^ method not found in `Enumerate<std::vec::IntoIter<isize>>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659822471
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums = nums;\n    nums.sort_by(|a, b| a.abs().sum::<isize>().cmp(&b.abs().sum::<isize>()));\n\
    \    nums\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `sum` exists for type `isize`, but its trait bounds\
    \ were not satisfied\n --> /tmp/tmp4hbxa99l.rs:8:33\n  |\n8 |     nums.sort_by(|a,\
    \ b| a.abs().sum::<isize>().cmp(&b.abs().sum::<isize>()));\n  |              \
    \                   ^^^ method cannot be called on `isize` due to unsatisfied\
    \ trait bounds\n  |\n  = note: the following trait bounds were not satisfied:\n\
    \          `isize: Iterator`\n          which is required by `&mut isize: Iterator`\n\
    \nerror[E0599]: the method `sum` exists for type `isize`, but its trait bounds\
    \ were not satisfied\n --> /tmp/tmp4hbxa99l.rs:8:61\n  |\n8 |     nums.sort_by(|a,\
    \ b| a.abs().sum::<isize>().cmp(&b.abs().sum::<isize>()));\n  |              \
    \                                               ^^^ method cannot be called on\
    \ `isize` due to unsatisfied trait bounds\n  |\n  = note: the following trait\
    \ bounds were not satisfied:\n          `isize: Iterator`\n          which is\
    \ required by `&mut isize: Iterator`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659822471
- exit_code: 101
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut pairs: Vec<(isize, isize)> = Vec::new();\n    for\
    \ (index, num) in nums.iter().enumerate() {\n        let mut sum: isize = 0;\n\
    \        let mut n = *num;\n        while n > 0 {\n            sum += n % 10;\n\
    \            n /= 10;\n        }\n        pairs.push((index as isize, sum));\n\
    \    }\n    pairs.sort_by(|a, b| a.1.cmp(&b.1));\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    for (index, _) in pairs {\n        result.push(nums[index\
    \ as usize]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-1, -11, -12, 1, 11]`,\n right: `[-1, -11, 1, -12, 11]`', /tmp/tmpn_w0tsbm.rs:27:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822471
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut sum_digits = vec![0; nums.len()];\n    for i in 0..nums.len()\
    \ {\n        sum_digits[i] = nums[i].abs()\n            .to_string()\n       \
    \     .chars()\n            .map(|c| c.to_digit(10).unwrap() as isize)\n     \
    \       .sum::<isize>();\n    }\n    nums.iter()\n        .zip(sum_digits.iter())\n\
    \        .sorted_by(|a, b| a.1.cmp(b.1))\n        .map(|v| *v.0)\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted_by` found for struct `Zip` in the\
    \ current scope\n  --> /tmp/tmpbzp0ss68.rs:17:10\n   |\n17 |         .sorted_by(|a,\
    \ b| a.1.cmp(b.1))\n   |          ^^^^^^^^^ method not found in `Zip<std::slice::Iter<'_,\
    \ isize>, std::slice::Iter<'_, isize>>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659822471
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = nums.clone();\n    result.sort_by(|a, b|\
    \ a.sum_digits().cmp(&b.sum_digits()));\n    result\n}\n\nfn main() {\n    let\
    \ candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11,\
    \ -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sum_digits` found for reference `&isize`\
    \ in the current scope\n --> /tmp/tmpq19fcj7r.rs:8:29\n  |\n8 |     result.sort_by(|a,\
    \ b| a.sum_digits().cmp(&b.sum_digits()));\n  |                             ^^^^^^^^^^\
    \ method not found in `&isize`\n\nerror[E0599]: no method named `sum_digits` found\
    \ for reference `&isize` in the current scope\n --> /tmp/tmpq19fcj7r.rs:8:49\n\
    \  |\n8 |     result.sort_by(|a, b| a.sum_digits().cmp(&b.sum_digits()));\n  |\
    \                                                 ^^^^^^^^^^ method not found\
    \ in `&isize`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659822471
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut sums = HashMap::new();\n    for (i, num) in nums.iter().enumerate()\
    \ {\n        let s = sum_digits(*num);\n        sums.insert(i, s);\n    }\n  \
    \  let mut sums = sums.into_iter().collect::<Vec<(usize, isize)>>();\n    sums.sort_by(|&(ref\
    \ a, ref b), &(ref c, ref d)| {\n        if b > d {\n            Ordering::Less\n\
    \        } else if b < d {\n            Ordering::Greater\n        } else {\n\
    \            a.cmp(c)\n        }\n    });\n    let mut result = Vec::new();\n\
    \    for (i, _) in sums {\n        result.push(nums[i]);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Ordering`\n  -->\
    \ /tmp/tmpzoggwbll.rs:15:13\n   |\n15 |             Ordering::Less\n   |     \
    \        ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0433]: failed to\
    \ resolve: use of undeclared type `Ordering`\n  --> /tmp/tmpzoggwbll.rs:17:13\n\
    \   |\n17 |             Ordering::Greater\n   |             ^^^^^^^^ use of undeclared\
    \ type `Ordering`\n\nerror[E0433]: failed to resolve: use of undeclared type `HashMap`\n\
    \ --> /tmp/tmpzoggwbll.rs:7:20\n  |\n7 |     let mut sums = HashMap::new();\n\
    \  |                    ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot\
    \ find function `sum_digits` in this scope\n --> /tmp/tmpzoggwbll.rs:9:17\n  |\n\
    9 |         let s = sum_digits(*num);\n  |                 ^^^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to 4 previous errors\n\nSome errors have\
    \ detailed explanations: E0425, E0433.\nFor more information about an error, try\
    \ `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822471
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    nums.iter()\n        .enumerate()\n        .map(|(i, v)| (i,\
    \ count_digits(*v)))\n        .sorted_by(|(i1, d1), (i2, d2)| {\n            d1.cmp(&d2).then(i1.cmp(&i2))\n\
    \        })\n        .map(|(_, v)| v)\n        .collect()\n}\n\nfn main() {\n\
    \    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1,\
    \ -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `count_digits` in this scope\n --> /tmp/tmp001b3guk.rs:9:27\n\
    \  |\n9 |         .map(|(i, v)| (i, count_digits(*v)))\n  |                  \
    \         ^^^^^^^^^^^^ not found in this scope\n\nerror[E0599]: no method named\
    \ `sorted_by` found for struct `Map` in the current scope\n  --> /tmp/tmp001b3guk.rs:10:10\n\
    \   |\n10 |         .sorted_by(|(i1, d1), (i2, d2)| {\n   |          ^^^^^^^^^\
    \ method not found in `Map<Enumerate<std::slice::Iter<'_, isize>>, _>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822471
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut index_map: HashMap<usize, isize> = HashMap::new();\n\
    \    let mut sum_vec: Vec<usize> = Vec::new();\n    let mut index_vec: Vec<usize>\
    \ = Vec::new();\n    let mut result: Vec<isize> = Vec::new();\n\n    // Calculate\
    \ the sum of each digit of each number in the list.\n    for index in 0..nums.len()\
    \ {\n        let mut total = 0;\n        let mut num = nums[index];\n        while\
    \ num > 0 {\n            total += num % 10;\n            num /= 10;\n        }\n\
    \        sum_vec.push(total);\n        index_map.insert(index, nums[index]);\n\
    \    }\n\n    // Sorts the vector of numbers based on the sum of their digits.\n\
    \    // The index of the element is stored in the index_vec vector.\n    for index\
    \ in 0..sum_vec.len() {\n        for j in 0..sum_vec.len() {\n            if sum_vec[index]\
    \ < sum_vec[j] {\n                let temp = sum_vec[index];\n               \
    \ sum_vec[index] = sum_vec[j];\n                sum_vec[j] = temp;\n         \
    \       index_vec.push(index);\n            }\n        }\n    }\n\n    // Builds\
    \ the result vector with the numbers based on their index in\n    // the index_vec\
    \ vector, which contains the indexes of the values\n    // that were sorted based\
    \ on the sum of their digits.\n    for index in 0..index_vec.len() {\n       \
    \ if let Some(num) = index_map.get(&index_vec[index]) {\n            result.push(*num);\n\
    \        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashMap` in this scope\n --> /tmp/tmplg6uhtt1.rs:7:24\n\
    \  |\n7 |     let mut index_map: HashMap<usize, isize> = HashMap::new();\n  |\
    \                        ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmplg6uhtt1.rs:7:48\n\
    \  |\n7 |     let mut index_map: HashMap<usize, isize> = HashMap::new();\n  |\
    \                                                ^^^^^^^ not found in this scope\n\
    \  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n\
    \  |\n\nerror[E0308]: mismatched types\n  --> /tmp/tmplg6uhtt1.rs:20:22\n   |\n\
    20 |         sum_vec.push(total);\n   |                      ^^^^^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n20 |         sum_vec.push(total.try_into().unwrap());\n\
    \   |                      ~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror: aborting due to\
    \ 3 previous errors\n\nSome errors have detailed explanations: E0308, E0412, E0433.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822471
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums = nums;\n    nums.sort_by(|a, b| sum_of_digits(*a).cmp(&sum_of_digits(*b)));\n\
    \    nums\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `sum_of_digits` in this scope\n -->\
    \ /tmp/tmpdvyjk07i.rs:8:25\n  |\n8 |     nums.sort_by(|a, b| sum_of_digits(*a).cmp(&sum_of_digits(*b)));\n\
    \  |                         ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `sum_of_digits` in this scope\n --> /tmp/tmpdvyjk07i.rs:8:48\n\
    \  |\n8 |     nums.sort_by(|a, b| sum_of_digits(*a).cmp(&sum_of_digits(*b)));\n\
    \  |                                                ^^^^^^^^^^^^^ not found in\
    \ this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822471
- exit_code: 101
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    fn order_by_points_inner(nums: Vec<isize>) -> Vec<isize> {\n\
    \        let mut original = nums.clone();\n        let mut sum_list = Vec::new();\n\
    \        let mut result = Vec::new();\n        for i in nums {\n            sum_list.push(sum_of_digits(i));\n\
    \        }\n        sum_list.sort();\n        for j in sum_list {\n          \
    \  for (index, i) in original.iter().enumerate() {\n                if sum_of_digits(*i)\
    \ == j {\n                    result.push(*i);\n                    original.remove(index);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     result\n    }\n    fn sum_of_digits(i: isize) -> isize {\n        if i <\
    \ 10 {\n            return i;\n        }\n        sum_of_digits(i / 10) + i %\
    \ 10\n    }\n    order_by_points_inner(nums)\n}\n\nfn main() {\n    let candidate\
    \ = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-12, -11, -1, 1, 11]`,\n right: `[-1, -11, 1, -12, 11]`', /tmp/tmpwfd1rtc0.rs:37:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822471
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut sum_vec: Vec<(isize, usize)> = vec![];\n    let mut\
    \ idx = 0;\n    for num in nums {\n        let mut curr_num = num;\n        let\
    \ mut sum = 0;\n        while curr_num > 0 {\n            sum += curr_num % 10;\n\
    \            curr_num /= 10;\n        }\n        sum_vec.push((sum, idx));\n \
    \       idx += 1;\n    }\n    sum_vec.sort_by(|a, b| a.0.cmp(&b.0));\n    let\
    \ mut res: Vec<isize> = vec![];\n    for (sum, idx) in sum_vec {\n        res.push(nums[idx]);\n\
    \    }\n    res\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `sum`\n  --> /tmp/tmpxwan5jbj.rs:21:10\n   |\n\
    21 |     for (sum, idx) in sum_vec {\n   |          ^^^ help: if this is intentional,\
    \ prefix it with an underscore: `_sum`\n   |\n   = note: `#[warn(unused_variables)]`\
    \ on by default\n\nerror[E0382]: borrow of moved value: `nums`\n   --> /tmp/tmpxwan5jbj.rs:22:18\n\
    \    |\n6   | fn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    |    \
    \                ---- move occurs because `nums` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n9   |     for num in nums {\n    |\
    \                ----\n    |                |\n    |                `nums` moved\
    \ due to this implicit call to `.into_iter()`\n    |                help: consider\
    \ borrowing to avoid moving into the for loop: `&nums`\n...\n22  |         res.push(nums[idx]);\n\
    \    |                  ^^^^ value borrowed here after move\n    |\nnote: this\
    \ function takes ownership of the receiver `self`, which moves `nums`\n\nerror:\
    \ aborting due to previous error; 1 warning emitted\n\nFor more information about\
    \ this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659822471
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    nums.into_iter().enumerate().sort_by(|a, b| {\n        a.1.to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap() as isize).sum::<isize>()\n            .cmp(&b.1.to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap() as isize).sum::<isize>())\n            .then(a.0.cmp(&b.0))\n\
    \    }).map(|a| a.1).collect()\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sort_by` found for struct `Enumerate` in\
    \ the current scope\n --> /tmp/tmpn0op0f_9.rs:7:34\n  |\n7 |     nums.into_iter().enumerate().sort_by(|a,\
    \ b| {\n  |                                  ^^^^^^^ method not found in `Enumerate<std::vec::IntoIter<isize>>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659822471
- exit_code: 101
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp3p_6ij05.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822471
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    nums.into_iter().enumerate().collect::<Vec<_>>().sort_by(|x,\
    \ y| {\n        let (i, x) = *x;\n        let (j, y) = *y;\n        let (x, y)\
    \ = (x.abs(), y.abs());\n        x.to_string().chars().map(|c| c.to_digit(10).unwrap()\
    \ as usize).sum::<usize>().cmp(&y.to_string().chars().map(|c| c.to_digit(10).unwrap()\
    \ as usize).sum::<usize>()).then(i.cmp(&j))\n    }).into_iter().map(|(_, y)| y).collect()\n\
    }\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `into_iter` exists for unit type `()`, but its\
    \ trait bounds were not satisfied\n  --> /tmp/tmp8h95m3ih.rs:12:8\n   |\n12 |\
    \     }).into_iter().map(|(_, y)| y).collect()\n   |        ^^^^^^^^^ method cannot\
    \ be called on `()` due to unsatisfied trait bounds\n   |\n   = note: the following\
    \ trait bounds were not satisfied:\n           `(): Iterator`\n           which\
    \ is required by `(): IntoIterator`\n           `&(): Iterator`\n           which\
    \ is required by `&(): IntoIterator`\n           `&mut (): Iterator`\n       \
    \    which is required by `&mut (): IntoIterator`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659822471
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    nums.into_iter().enumerate().map(|(i, x)| (x, i)).sorted_by_key(|(x,\
    \ _)| {\n        x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize).sum::<isize>()\n\
    \    }).map(|(x, _)| x).collect()\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted_by_key` found for struct `Map` in\
    \ the current scope\n --> /tmp/tmprs2jsmao.rs:7:55\n  |\n7 |     nums.into_iter().enumerate().map(|(i,\
    \ x)| (x, i)).sorted_by_key(|(x, _)| {\n  |                                  \
    \                     ^^^^^^^^^^^^^ method not found in `Map<Enumerate<std::vec::IntoIter<isize>>,\
    \ [closure@/tmp/tmprs2jsmao.rs:7:38: 7:53]>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659822471
- exit_code: 101
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut sum_list: Vec<(isize, isize)> = Vec::new();\n    for\
    \ (idx, num) in nums.iter().enumerate() {\n        let mut sum = 0;\n        let\
    \ mut tmp = *num;\n        while tmp != 0 {\n            sum += tmp % 10;\n  \
    \          tmp /= 10;\n        }\n        sum_list.push((sum, idx as isize));\n\
    \    }\n    sum_list.sort_by(|a, b| a.0.cmp(&b.0));\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    for item in sum_list {\n        result.push(nums[item.1 as\
    \ usize]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-12, -11, -1, 1, 11]`,\n right: `[-1, -11, 1, -12, 11]`', /tmp/tmppnlmrf4g.rs:27:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822471
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = nums.clone();\n    result.sort_by(|a, b|\
    \ {\n        let a_sum: usize = a.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum();\n\
    \        let b_sum: usize = b.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum();\n\
    \        a_sum.cmp(&b_sum)\n    });\n    result\n}\n\nfn main() {\n    let candidate\
    \ = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Sum<u32>` is not satisfied\n -->\
    \ /tmp/tmpwc27sqrz.rs:9:83\n  |\n9 |         let a_sum: usize = a.to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).sum();\n  |                                       \
    \                                            ^^^ the trait `Sum<u32>` is not implemented\
    \ for `usize`\n  |\n  = help: the following implementations were found:\n    \
    \        <usize as Sum<&'a usize>>\n            <usize as Sum>\n\nerror[E0277]:\
    \ the trait bound `usize: Sum<u32>` is not satisfied\n  --> /tmp/tmpwc27sqrz.rs:10:83\n\
    \   |\n10 |         let b_sum: usize = b.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum();\n\
    \   |                                                                        \
    \           ^^^ the trait `Sum<u32>` is not implemented for `usize`\n   |\n  \
    \ = help: the following implementations were found:\n             <usize as Sum<&'a\
    \ usize>>\n             <usize as Sum>\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659822471
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums = nums;\n    nums.sort_by(|a, b| {\n        let\
    \ a_digits = a.to_string().chars().map(|d| d.to_digit(10).unwrap() as isize);\n\
    \        let b_digits = b.to_string().chars().map(|d| d.to_digit(10).unwrap()\
    \ as isize);\n        let a_sum: isize = a_digits.sum();\n        let b_sum: isize\
    \ = b_digits.sum();\n        a_sum.cmp(&b_sum)\n    });\n    nums\n}\n\nfn main()\
    \ {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11,\
    \ -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0716]: temporary value dropped while borrowed\n  --> /tmp/tmpr4fb82m3.rs:9:24\n\
    \   |\n9  |         let a_digits = a.to_string().chars().map(|d| d.to_digit(10).unwrap()\
    \ as isize);\n   |                        ^^^^^^^^^^^^^                      \
    \                            - temporary value is freed at the end of this statement\n\
    \   |                        |\n   |                        creates a temporary\
    \ which is freed while still in use\n10 |         let b_digits = b.to_string().chars().map(|d|\
    \ d.to_digit(10).unwrap() as isize);\n11 |         let a_sum: isize = a_digits.sum();\n\
    \   |                            -------- borrow later used here\n   |\n   = note:\
    \ consider using a `let` binding to create a longer lived value\n\nerror[E0716]:\
    \ temporary value dropped while borrowed\n  --> /tmp/tmpr4fb82m3.rs:10:24\n  \
    \ |\n10 |         let b_digits = b.to_string().chars().map(|d| d.to_digit(10).unwrap()\
    \ as isize);\n   |                        ^^^^^^^^^^^^^                      \
    \                            - temporary value is freed at the end of this statement\n\
    \   |                        |\n   |                        creates a temporary\
    \ which is freed while still in use\n11 |         let a_sum: isize = a_digits.sum();\n\
    12 |         let b_sum: isize = b_digits.sum();\n   |                        \
    \    -------- borrow later used here\n   |\n   = note: consider using a `let`\
    \ binding to create a longer lived value\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0716`.\n"
  stdout: ''
  timestamp: 1659822471
- exit_code: 101
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = vec![];\n    let mut temp = vec![];\n   \
    \ let mut temp_idx = vec![];\n    for (idx, &i) in nums.iter().enumerate() {\n\
    \        let mut i = i;\n        let mut sum = 0;\n        while i > 0 {\n   \
    \         sum += i % 10;\n            i /= 10;\n        }\n        temp.push(sum);\n\
    \        temp_idx.push(idx);\n    }\n    // this will sort temp and temp_idx in\
    \ the same order\n    let mut sort = temp.iter().enumerate().collect::<Vec<_>>();\n\
    \    sort.sort_by(|a, b| a.1.cmp(b.1));\n    for i in sort {\n        result.push(nums[temp_idx[i.0]]);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = order_by_points;\n \
    \   assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-1, -11, -12, 1, 11]`,\n right: `[-1, -11, 1, -12, 11]`', /tmp/tmp1az42a5b.rs:31:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822471
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    nums.iter()\n        .enumerate()\n        .map(|(idx, num)|\
    \ (num, num.to_string().chars().fold(0, |acc, ch| acc + ch.to_digit(10).unwrap()\
    \ as isize)))\n        .sorted_by(|a, b| a.1.cmp(&b.1).then(a.0.cmp(&b.0)))\n\
    \        .map(|(num, _)| *num)\n        .collect()\n}\n\nfn main() {\n    let\
    \ candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11,\
    \ -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted_by` found for struct `Map` in the\
    \ current scope\n  --> /tmp/tmpsvukr8um.rs:10:10\n   |\n10 |         .sorted_by(|a,\
    \ b| a.1.cmp(&b.1).then(a.0.cmp(&b.0)))\n   |          ^^^^^^^^^ method not found\
    \ in `Map<Enumerate<std::slice::Iter<'_, isize>>, [closure@/tmp/tmpsvukr8um.rs:9:14:\
    \ 9:116]>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659822471
- exit_code: 101
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    if nums.len() == 0 {\n        return vec![];\n    }\n    let\
    \ mut m = vec![];\n    for (i, v) in nums.iter().enumerate() {\n        let mut\
    \ vv = *v;\n        let mut sum = 0;\n        while vv != 0 {\n            sum\
    \ += vv % 10;\n            vv /= 10;\n        }\n        m.push((i, sum));\n \
    \   }\n    m.sort_by(|a, b| a.1.cmp(&b.1));\n    let mut res = vec![];\n    for\
    \ i in m {\n        res.push(nums[i.0]);\n    }\n    res\n}\n\nfn main() {\n \
    \   let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1,\
    \ -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-12, -11, -1, 1, 11]`,\n right: `[-1, -11, 1, -12, 11]`', /tmp/tmpn5ftoe2c.rs:30:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822471
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut sum_count = nums.iter().map(|x| (digit_sum(*x), x)).collect::<Vec<_>>();\n\
    \    sum_count.sort_by(|x, y| x.0.cmp(&y.0));\n    sum_count.iter().map(|x| *x.1).collect()\n\
    }\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `digit_sum` in this scope\n --> /tmp/tmpsngps5vn.rs:7:46\n\
    \  |\n7 |     let mut sum_count = nums.iter().map(|x| (digit_sum(*x), x)).collect::<Vec<_>>();\n\
    \  |                                              ^^^^^^^^^ not found in this\
    \ scope\n\nerror[E0609]: no field `0` on type `&_`\n --> /tmp/tmpsngps5vn.rs:8:32\n\
    \  |\n8 |     sum_count.sort_by(|x, y| x.0.cmp(&y.0));\n  |                  \
    \              ^\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0425, E0609.\nFor more information about an error, try\
    \ `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822471
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut sorted_num: Vec<isize> = nums.iter().map(|num| (num,\
    \ sum_digits(*num))).collect();\n    sorted_num.sort_by(|a, b| b.1.cmp(&a.1));\n\
    \    sorted_num.iter().map(|num| *num.0).collect()\n}\n\nfn main() {\n    let\
    \ candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11,\
    \ -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `sum_digits` in this scope\n --> /tmp/tmp2suwp57s.rs:7:66\n\
    \  |\n7 |     let mut sorted_num: Vec<isize> = nums.iter().map(|num| (num, sum_digits(*num))).collect();\n\
    \  |                                                                  ^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0609]: no field `1` on type `&isize`\n -->\
    \ /tmp/tmp2suwp57s.rs:8:33\n  |\n8 |     sorted_num.sort_by(|a, b| b.1.cmp(&a.1));\n\
    \  |                                 ^\n\nerror[E0609]: no field `1` on type `&isize`\n\
    \ --> /tmp/tmp2suwp57s.rs:8:42\n  |\n8 |     sorted_num.sort_by(|a, b| b.1.cmp(&a.1));\n\
    \  |                                          ^\n\nerror[E0609]: no field `0`\
    \ on type `&isize`\n --> /tmp/tmp2suwp57s.rs:9:38\n  |\n9 |     sorted_num.iter().map(|num|\
    \ *num.0).collect()\n  |                                      ^\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0425, E0609.\n\
    For more information about an error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822471
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    fn sum_digits(n: isize) -> isize {\n        let mut acc =\
    \ 0;\n        let mut n = n;\n        while n > 0 {\n            acc += n % 10;\n\
    \            n /= 10;\n        }\n        acc\n    }\n\n    nums.into_iter()\n\
    \        .enumerate()\n        .map(|(i, n)| (i, n, sum_digits(n)))\n        .sorted_by(|a,\
    \ b| {\n            let comp = a.2.cmp(&b.2);\n            if comp == Ordering::Equal\
    \ {\n                a.0.cmp(&b.0)\n            } else {\n                comp\n\
    \            }\n        })\n        .map(|(_, n, _)| n)\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Ordering`\n  -->\
    \ /tmp/tmp0lbb6c15.rs:22:24\n   |\n22 |             if comp == Ordering::Equal\
    \ {\n   |                        ^^^^^^^^ use of undeclared type `Ordering`\n\n\
    error[E0599]: no method named `sorted_by` found for struct `Map` in the current\
    \ scope\n  --> /tmp/tmp0lbb6c15.rs:20:10\n   |\n20 |         .sorted_by(|a, b|\
    \ {\n   |          ^^^^^^^^^ method not found in `Map<Enumerate<std::vec::IntoIter<isize>>,\
    \ [closure@/tmp/tmp0lbb6c15.rs:19:14: 19:44]>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0433, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659822471
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut points: Vec<(isize, isize)> = nums.iter().map(|x|\
    \ (x, dig_sum(*x))).collect();\n    points.sort_by(|x, y| {\n        let x = x.clone();\n\
    \        let y = y.clone();\n        x.1.cmp(&y.1)\n    });\n    points.iter().map(|x|\
    \ x.0).collect()\n}\n\nfn main() {\n    let candidate = order_by_points;\n   \
    \ assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `dig_sum` in this scope\n --> /tmp/tmpnu8l5khx.rs:7:67\n\
    \  |\n7 |     let mut points: Vec<(isize, isize)> = nums.iter().map(|x| (x, dig_sum(*x))).collect();\n\
    \  |                                                                   ^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822471
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    nums.iter()\n        .enumerate()\n        .map(|(i, v)| (i,\
    \ v, v.to_string().chars().filter_map(|c| c.to_digit(10)).sum::<u32>() as isize))\n\
    \        .sorted_by(|a, b| (a.2, a.0).cmp(&(b.2, b.0)))\n        .into_iter()\n\
    \        .map(|(_, &v, _)| v)\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted_by` found for struct `Map` in the\
    \ current scope\n  --> /tmp/tmp3dw3wj90.rs:10:10\n   |\n10 |         .sorted_by(|a,\
    \ b| (a.2, a.0).cmp(&(b.2, b.0)))\n   |          ^^^^^^^^^ method not found in\
    \ `Map<Enumerate<std::slice::Iter<'_, isize>>, [closure@/tmp/tmp3dw3wj90.rs:9:14:\
    \ 9:105]>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659822471
- exit_code: 101
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut numbers: Vec<isize> = nums.clone();\n    let mut sorted_numbers:\
    \ Vec<isize> = vec![];\n    let mut min: isize = 0;\n    let mut index: usize\
    \ = 0;\n    loop {\n        for (i, n) in numbers.iter().enumerate() {\n     \
    \       let mut sum = 0;\n            for c in n.to_string().chars() {\n     \
    \           sum += c.to_digit(10).unwrap() as isize;\n            }\n        \
    \    if sum < min || min == 0 {\n                min = sum;\n                index\
    \ = i;\n            }\n        }\n        sorted_numbers.push(numbers[index]);\n\
    \        numbers.remove(index);\n        min = 0;\n        if numbers.len() ==\
    \ 0 {\n            break;\n        }\n    }\n    sorted_numbers\n}\n\nfn main()\
    \ {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11,\
    \ -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmp1qdeqa5z.rs:15:39

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822471
- exit_code: 101
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums = nums;\n    nums.sort_by(|a, b| {\n        let\
    \ sum1 = a.to_string().chars().map(|ch| ch.to_digit(10).unwrap()).sum::<u32>();\n\
    \        let sum2 = b.to_string().chars().map(|ch| ch.to_digit(10).unwrap()).sum::<u32>();\n\
    \        sum1.cmp(&sum2)\n    });\n    nums\n}\n\nfn main() {\n    let candidate\
    \ = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmppohyicno.rs:9:67

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822471
- exit_code: 101
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut vec = nums.clone();\n    vec.sort_by(|a, b| -> std::cmp::Ordering\
    \ {\n        let points_a = a.to_string().chars().fold(0, |sum, item| sum + item.to_digit(10).unwrap()\
    \ as isize);\n        let points_b = b.to_string().chars().fold(0, |sum, item|\
    \ sum + item.to_digit(10).unwrap() as isize);\n        points_a.cmp(&points_b)\n\
    \    });\n    vec\n}\n\nfn main() {\n    let candidate = order_by_points;\n  \
    \  assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmp30ydr23w.rs:9:90

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822471
- exit_code: 101
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    // transform num to (num, sum_of_digits)\n    let mut digits:\
    \ Vec<(isize, usize)> = nums.iter().map(|x| (*x, x.to_string().chars().fold(0,\
    \ |acc, n| acc + n.to_digit(10).unwrap() as usize))).collect();\n    digits.sort_by(|a,\
    \ b| if a.1 == b.1 { a.0.cmp(&b.0) } else { a.1.cmp(&b.1) });\n    digits.iter().map(|x|\
    \ x.0).collect()\n}\n\nfn main() {\n    let candidate = order_by_points;\n   \
    \ assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmplpse70ov.rs:8:128

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822471
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    nums.into_iter().enumerate().collect::<Vec<_>>().sort_by(|(_,\
    \ a), (_, b)| {\n        let (a_l, a_r) = split(a);\n        let (b_l, b_r) =\
    \ split(b);\n        (a_l + a_r).cmp(&(b_l + b_r))\n    }).into_iter().map(|(_,\
    \ x)| x).collect()\n}\n\nfn main() {\n    let candidate = order_by_points;\n \
    \   assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `split` in this scope\n --> /tmp/tmp99f46mp8.rs:8:26\n\
    \  |\n8 |         let (a_l, a_r) = split(a);\n  |                          ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find function `split` in this\
    \ scope\n --> /tmp/tmp99f46mp8.rs:9:26\n  |\n9 |         let (b_l, b_r) = split(b);\n\
    \  |                          ^^^^^ not found in this scope\n\nerror[E0599]: the\
    \ method `into_iter` exists for unit type `()`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmp99f46mp8.rs:11:8\n   |\n11 |     }).into_iter().map(|(_,\
    \ x)| x).collect()\n   |        ^^^^^^^^^ method cannot be called on `()` due\
    \ to unsatisfied trait bounds\n   |\n   = note: the following trait bounds were\
    \ not satisfied:\n           `(): Iterator`\n           which is required by `():\
    \ IntoIterator`\n           `&(): Iterator`\n           which is required by `&():\
    \ IntoIterator`\n           `&mut (): Iterator`\n           which is required\
    \ by `&mut (): IntoIterator`\n\nerror: aborting due to 3 previous errors\n\nSome\
    \ errors have detailed explanations: E0425, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822471
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    //let nums = nums.clone();\n    nums.iter().enumerate().sorted_by(|x,\
    \ y| {\n        let x = x.1;\n        let y = y.1;\n        let mut xsum = 0;\n\
    \        let mut ysum = 0;\n        for c in x.to_string().chars() {\n       \
    \     xsum += c.to_digit(10).unwrap();\n        }\n        for c in y.to_string().chars()\
    \ {\n            ysum += c.to_digit(10).unwrap();\n        }\n        xsum.cmp(&ysum)\n\
    \    }).map(|(i, &x)| x).collect()\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted_by` found for struct `Enumerate`\
    \ in the current scope\n --> /tmp/tmp8ngud_fr.rs:8:29\n  |\n8 |     nums.iter().enumerate().sorted_by(|x,\
    \ y| {\n  |                             ^^^^^^^^^ method not found in `Enumerate<std::slice::Iter<'_,\
    \ isize>>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659822471
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut array = nums.clone();\n    array.sort_by(|a, b| {\n\
    \        let a_sum = split_digits(*a).iter().sum::<isize>();\n        let b_sum\
    \ = split_digits(*b).iter().sum::<isize>();\n        a_sum.cmp(&b_sum)\n    });\n\
    \    array\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `split_digits` in this scope\n --> /tmp/tmpb958nfhn.rs:9:21\n\
    \  |\n9 |         let a_sum = split_digits(*a).iter().sum::<isize>();\n  |   \
    \                  ^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find function `split_digits` in this scope\n  --> /tmp/tmpb958nfhn.rs:10:21\n\
    \   |\n10 |         let b_sum = split_digits(*b).iter().sum::<isize>();\n   |\
    \                     ^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822471
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums = nums;\n    nums.sort_by(|x, y| digits(x).cmp(&digits(y)));\n\
    \    nums\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `digits` in this scope\n --> /tmp/tmpn3cncn1q.rs:8:25\n\
    \  |\n8 |     nums.sort_by(|x, y| digits(x).cmp(&digits(y)));\n  |           \
    \              ^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function\
    \ `digits` in this scope\n --> /tmp/tmpn3cncn1q.rs:8:40\n  |\n8 |     nums.sort_by(|x,\
    \ y| digits(x).cmp(&digits(y)));\n  |                                        ^^^^^^\
    \ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822471
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    nums.iter()\n        .enumerate()\n        .map(|(i, v)| (i,\
    \ v, v.to_string().chars().map(|d| d.to_digit(10).unwrap() as isize).sum()))\n\
    \        .sorted_by(|(_, _, a), (_, _, b)| a.cmp(b))\n        .map(|(_, v, _)|\
    \ *v)\n        .collect()\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted_by` found for struct `Map` in the\
    \ current scope\n  --> /tmp/tmpnow210g7.rs:10:10\n   |\n10 |         .sorted_by(|(_,\
    \ _, a), (_, _, b)| a.cmp(b))\n   |          ^^^^^^^^^ method not found in `Map<Enumerate<std::slice::Iter<'_,\
    \ isize>>, [closure@/tmp/tmpnow210g7.rs:9:14: 9:100]>`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659822471
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    //fn digsum(n: isize) -> isize {\n    //    n.to_string().chars().fold(0,\
    \ |acc, d| acc + d.to_digit(10).unwrap())\n    //}\n    //nums.iter().enumerate().sorted_by(|a,\
    \ b| {\n    //    let asum = digsum(a.1);\n    //    let bsum = digsum(b.1);\n\
    \    //    asum.cmp(&bsum).then(a.0.cmp(&b.0))\n    //}).map(|(_, n)| *n).collect()\n\
    \    let mut res = nums.clone();\n    res.sort_by(|a, b| {\n        let (a_sum,\
    \ b_sum) = (digsum(*a), digsum(*b));\n        if a_sum == b_sum { a.cmp(b) } else\
    \ { a_sum.cmp(&b_sum) }\n    });\n    res\n}\n\nfn main() {\n    let candidate\
    \ = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `digsum` in this scope\n  --> /tmp/tmp34crw_jj.rs:17:31\n\
    \   |\n17 |         let (a_sum, b_sum) = (digsum(*a), digsum(*b));\n   |     \
    \                          ^^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find function `digsum` in this scope\n  --> /tmp/tmp34crw_jj.rs:17:43\n   |\n\
    17 |         let (a_sum, b_sum) = (digsum(*a), digsum(*b));\n   |            \
    \                               ^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822471
- exit_code: 101
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_with_idx: Vec<_> = nums.iter().enumerate().collect();\n\
    \    nums_with_idx.sort_by_key(|(_, &num)| {\n        num.to_string()\n      \
    \      .chars()\n            .fold(0, |acc, c| acc + c.to_digit(10).unwrap())\n\
    \    });\n    nums_with_idx.into_iter().map(|(_, &num)| num).collect()\n}\n\n\
    fn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmp4bvl_jlq.rs:11:52

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822471
- exit_code: 101
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = nums.clone();\n    result.sort_by(|a, b|\
    \ {\n        let a_sum = a.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        let b_sum = b.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        a_sum.cmp(&b_sum)\n    });\n    result\n}\n\nfn main() {\n    let candidate\
    \ = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmp5akewofl.rs:9:66

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822471
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    nums.iter()\n        .enumerate()\n        .map(|(idx, n)|\
    \ (idx, n, sum_digits(*n)))\n        .sorted_by(|(_, n1, points1), (_, n2, points2)|\
    \ match points1.cmp(points2) {\n            Ordering::Equal => n1.cmp(n2),\n \
    \           _ => points1.cmp(points2),\n        })\n        .map(|(_, n, _)| *n)\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Ordering`\n  -->\
    \ /tmp/tmpaoxaehcb.rs:11:13\n   |\n11 |             Ordering::Equal => n1.cmp(n2),\n\
    \   |             ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0425]:\
    \ cannot find function `sum_digits` in this scope\n --> /tmp/tmpaoxaehcb.rs:9:34\n\
    \  |\n9 |         .map(|(idx, n)| (idx, n, sum_digits(*n)))\n  |             \
    \                     ^^^^^^^^^^ not found in this scope\n\nerror[E0599]: no method\
    \ named `sorted_by` found for struct `Map` in the current scope\n  --> /tmp/tmpaoxaehcb.rs:10:10\n\
    \   |\n10 |         .sorted_by(|(_, n1, points1), (_, n2, points2)| match points1.cmp(points2)\
    \ {\n   |          ^^^^^^^^^ method not found in `Map<Enumerate<std::slice::Iter<'_,\
    \ isize>>, _>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0425, E0433, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822471
- exit_code: 101
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    // TODO\n    let mut nums = nums;\n    //let mut points =\
    \ vec![];\n    let mut sum = 0;\n    let mut sort = vec![];\n    let mut sum_digit\
    \ = 0;\n    let mut new_nums = vec![];\n    let mut new_nums_1 = vec![];\n   \
    \ let mut num_res = vec![];\n    for num in nums.iter() {\n        sum = 0;\n\
    \        let num_str = num.to_string();\n        for digit in num_str.chars()\
    \ {\n            let digit = digit.to_digit(10).unwrap();\n            sum +=\
    \ digit as isize;\n        }\n        sum_digit = sum;\n        new_nums.push(sum_digit);\n\
    \    }\n    //println!(\"{:?}\", new_nums);\n    new_nums_1 = new_nums.clone();\n\
    \    new_nums_1.sort();\n    //println!(\"{:?}\", new_nums_1);\n    for i in new_nums_1.iter()\
    \ {\n        for (index, j) in new_nums.iter().enumerate() {\n            if i\
    \ == j {\n                sort.push(index);\n            }\n        }\n    }\n\
    \    //println!(\"{:?}\", sort);\n    for i in sort.iter() {\n        num_res.push(nums[*i]);\n\
    \    }\n    num_res\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpyj9qkng3.rs:20:44

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822472
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    nums.into_iter().enumerate().map(|(i, x)| (i, x, x.to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap() as isize).sum())).sorted_by(|&(_, _, a), &(_, _, b)|\
    \ a.cmp(&b)).map(|(_, x, _)| x).collect()\n}\n\nfn main() {\n    let candidate\
    \ = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted_by` found for struct `Map` in the\
    \ current scope\n --> /tmp/tmpvbxspyeu.rs:7:126\n  |\n7 | ....sum())).sorted_by(|&(_,\
    \ _, a), &(_, _, b)| a.cmp(&b)).map(|(_, x, _)| x).collect()\n  |            \
    \ ^^^^^^^^^ method not found in `Map<Enumerate<std::vec::IntoIter<isize>>, [closure@/tmp/tmpvbxspyeu.rs:7:38:\
    \ 7:124]>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659822471
- exit_code: 101
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut sum_nums = nums.clone();\n    for (i, v) in nums.iter().enumerate()\
    \ {\n        let t: String = v.to_string();\n        let mut sum: isize = 0;\n\
    \        for c in t.chars() {\n            let digit: isize = c.to_digit(10).unwrap()\
    \ as isize;\n            sum += digit;\n        }\n        sum_nums[i] = sum;\n\
    \    }\n    println!(\"{:?}\", sum_nums);\n    let mut nums = nums;\n    nums.sort_by(|a,\
    \ b| sum_nums[*a as usize].cmp(&sum_nums[*b as usize]));\n    println!(\"{:?}\"\
    , nums);\n    nums\n}\n\nfn main() {\n    let candidate = order_by_points;\n \
    \   assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpt71bemvx.rs:12:47

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822472
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    fn sum_of_digits(num: isize) -> isize {\n        num.to_string()\n\
    \            .chars()\n            .map(|d| d.to_digit(10).unwrap() as isize)\n\
    \            .sum()\n    }\n\n    let mut sum_of_digits_map = nums\n        .iter()\n\
    \        .map(|num| (num, sum_of_digits(*num)))\n        .collect::<Vec<(&isize,\
    \ isize)>>();\n\n    // sort with descending order of sum of digits, then ascending\
    \ order of original index.\n    sum_of_digits_map.sort_by(|a, b| b.1.cmp(&a.1).then(a.0.cmp(&b.0)));\n\
    \n    sum_of_digits_map.iter().map(|(num, _)| *num).collect()\n}\n\nfn main()\
    \ {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11,\
    \ -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<isize>` cannot be built from an iterator\
    \ over elements of type `&isize`\n  --> /tmp/tmpikme4388.rs:22:51\n   |\n22 |\
    \     sum_of_digits_map.iter().map(|(num, _)| *num).collect()\n   |          \
    \                                         ^^^^^^^ value of type `Vec<isize>` cannot\
    \ be built from `std::iter::Iterator<Item=&isize>`\n   |\n   = help: the trait\
    \ `FromIterator<&isize>` is not implemented for `Vec<isize>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659822471
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    fn sum_digits(mut num: isize) -> isize {\n        let mut\
    \ sum = 0;\n        while num > 0 {\n            sum += num % 10;\n          \
    \  num /= 10;\n        }\n        sum\n    }\n\n    let mut result = nums.iter().enumerate().collect::<Vec<_>>();\n\
    \    result.sort_by_key(|x| (sum_digits(x.1), x.0));\n    result.iter().map(|x|\
    \ *x.1).collect()\n}\n\nfn main() {\n    let candidate = order_by_points;\n  \
    \  assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpa9111lrp.rs:17:40\n   |\n\
    17 |     result.sort_by_key(|x| (sum_digits(x.1), x.0));\n   |               \
    \                         ^^^ expected `isize`, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n17 |     result.sort_by_key(|x| (sum_digits(*x.1),\
    \ x.0));\n   |                                        +\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659822471
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    nums.into_iter().enumerate().sorted_by(|&(i1,n1), &(i2,n2)|{\n\
    \        (n1.to_string().chars().map(|c| c.to_digit(10).unwrap() as usize).sum(),\
    \ i1).cmp(&(n2.to_string().chars().map(|c| c.to_digit(10).unwrap() as usize).sum(),\
    \ i2))\n    }).map(|(i,n)| n).collect()\n}\n\nfn main() {\n    let candidate =\
    \ order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted_by` found for struct `Enumerate`\
    \ in the current scope\n --> /tmp/tmp1t2ethwf.rs:7:34\n  |\n7 |     nums.into_iter().enumerate().sorted_by(|&(i1,n1),\
    \ &(i2,n2)|{\n  |                                  ^^^^^^^^^ method not found\
    \ in `Enumerate<std::vec::IntoIter<isize>>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659822471
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = nums.clone();\n    result.sort_by(|a, b|\
    \ {\n        let a_num = sum_of_digits(*a);\n        let b_num = sum_of_digits(*b);\n\
    \        a_num.cmp(&b_num)\n    });\n    result\n}\n\nfn main() {\n    let candidate\
    \ = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `sum_of_digits` in this scope\n -->\
    \ /tmp/tmpv9arsdgi.rs:9:21\n  |\n9 |         let a_num = sum_of_digits(*a);\n\
    \  |                     ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `sum_of_digits` in this scope\n  --> /tmp/tmpv9arsdgi.rs:10:21\n\
    \   |\n10 |         let b_num = sum_of_digits(*b);\n   |                     ^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822471
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    // /////////////////////////////////////////////////////////////////////////\n\
    \    nums.iter()\n        .enumerate()\n        .map(|(i, &n)| (i, sum_digits(n),\
    \ n))\n        .sorted_by(|a, b| {\n            match a.1.cmp(&b.1) {\n      \
    \          std::cmp::Ordering::Equal => a.0.cmp(&b.0),\n                otherwise\
    \ => otherwise,\n            }\n        })\n        .map(|(_, _, n)| n)\n    \
    \    .collect()\n    // /////////////////////////////////////////////////////////////////////////\n\
    }\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `sum_digits` in this scope\n  --> /tmp/tmplnfx_zad.rs:10:28\n\
    \   |\n10 |         .map(|(i, &n)| (i, sum_digits(n), n))\n   |              \
    \              ^^^^^^^^^^ not found in this scope\n\nerror[E0599]: no method named\
    \ `sorted_by` found for struct `Map` in the current scope\n  --> /tmp/tmplnfx_zad.rs:11:10\n\
    \   |\n11 |         .sorted_by(|a, b| {\n   |          ^^^^^^^^^ method not found\
    \ in `Map<Enumerate<std::slice::Iter<'_, isize>>, _>`\n\nerror: aborting due to\
    \ 2 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\n\
    For more information about an error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822471
- exit_code: 101
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums = nums;\n    nums.sort_by(|a, b| {\n        a.to_string()\n\
    \            .chars()\n            .map(|c| c.to_digit(10).unwrap() as isize)\n\
    \            .sum::<isize>()\n            .cmp(&b.to_string()\n              \
    \  .chars()\n                .map(|c| c.to_digit(10).unwrap() as isize)\n    \
    \            .sum::<isize>())\n    });\n    nums\n}\n\nfn main() {\n    let candidate\
    \ = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpr9d9p43f.rs:11:37

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822472
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut ret = nums.iter().enumerate().collect::<Vec<_>>();\n\
    \    ret.sort_by_key(|(i, &num)| (num.abs() as usize).to_string().chars().map(|ch|\
    \ ch.to_digit(10).unwrap() as usize).sum() * 100000 + *i);\n    ret.iter().map(|&(_,\
    \ num)| num).collect()\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<isize>` cannot be built from an iterator\
    \ over elements of type `&isize`\n --> /tmp/tmp_qxa2yow.rs:9:37\n  |\n9 |    \
    \ ret.iter().map(|&(_, num)| num).collect()\n  |                             \
    \        ^^^^^^^ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \  |\n  = help: the trait `FromIterator<&isize>` is not implemented for `Vec<isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659822471
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    nums.into_iter().enumerate().collect::<Vec<_>>().sort_by(|&(_,\
    \ a), &(_, b)| sum_of_digits(a).cmp(&sum_of_digits(b))).iter().map(|&(i, _)| nums[i]).collect()\n\
    }\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `sum_of_digits` in this scope\n -->\
    \ /tmp/tmpj_zemfez.rs:7:81\n  |\n7 |     nums.into_iter().enumerate().collect::<Vec<_>>().sort_by(|&(_,\
    \ a), &(_, b)| sum_of_digits(a).cmp(&sum_of_digits(b))).iter().map(|&(i,...\n\
    \  |                                                                         \
    \        ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function\
    \ `sum_of_digits` in this scope\n --> /tmp/tmpj_zemfez.rs:7:103\n  |\n7 | ...ort_by(|&(_,\
    \ a), &(_, b)| sum_of_digits(a).cmp(&sum_of_digits(b))).iter().map(|&(i, _)| nums[i]).collect()\n\
    \  |                                                    ^^^^^^^^^^^^^ not found\
    \ in this scope\n\nerror[E0599]: no method named `iter` found for unit type `()`\
    \ in the current scope\n --> /tmp/tmpj_zemfez.rs:7:122\n  |\n7 | ..., &(_, b)|\
    \ sum_of_digits(a).cmp(&sum_of_digits(b))).iter().map(|&(i, _)| nums[i]).collect()\n\
    \  |                                                        ^^^^ method not found\
    \ in `()`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0425, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822471
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    // let sum: Vec<isize> = nums.iter().map(|x| x.to_string().chars().map(|y|\
    \ y.to_digit(10).unwrap() as isize).sum()).collect();\n    // let indexes: Vec<usize>\
    \ = (0..nums.len()).collect();\n    // let mut list: Vec<(isize, usize)> = sum.iter().zip(indexes.iter()).collect();\n\
    \    // list.sort_by(|a, b| a.0.cmp(&b.0));\n    // list.iter().map(|x| nums[x.1]).collect()\n\
    \    nums.iter().enumerate().sorted_by(|a, b| {\n        let a_sum = a.1.to_string().chars().map(|x|\
    \ x.to_digit(10).unwrap() as isize).sum();\n        let b_sum = b.1.to_string().chars().map(|x|\
    \ x.to_digit(10).unwrap() as isize).sum();\n        a_sum.cmp(&b_sum).then(a.0.cmp(&b.0))\n\
    \    }).iter().map(|x| *x.1).collect()\n}\n\nfn main() {\n    let candidate =\
    \ order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted_by` found for struct `Enumerate`\
    \ in the current scope\n  --> /tmp/tmpbjf3aucw.rs:12:29\n   |\n12 |     nums.iter().enumerate().sorted_by(|a,\
    \ b| {\n   |                             ^^^^^^^^^ method not found in `Enumerate<std::slice::Iter<'_,\
    \ isize>>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659822471
- exit_code: 101
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut orders: Vec<(isize, isize)> = nums.iter().map(|n|\
    \ {\n        let mut num: isize = *n;\n        let mut sum: isize = 0;\n     \
    \   while num > 0 {\n            sum += num % 10;\n            num /= 10;\n  \
    \      }\n        (sum, *n)\n    }).collect();\n    orders.sort_by(|a, b| a.0.cmp(&b.0));\n\
    \    orders.iter().map(|i| i.1).collect()\n}\n\nfn main() {\n    let candidate\
    \ = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-1, -11, -12, 1, 11]`,\n right: `[-1, -11, 1, -12, 11]`', /tmp/tmpz6vp6qzp.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822472
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut sum_nums = vec![];\n    for (index, num) in nums.iter().enumerate()\
    \ {\n        sum_nums.push((index, num.to_string().chars().map(|d| d.to_digit(10).unwrap()\
    \ as isize).sum()));\n    }\n    sum_nums.sort_by(|a, b| a.1.cmp(&b.1));\n   \
    \ let mut res = vec![];\n    for (_, v) in sum_nums {\n        res.push(nums[v\
    \ as usize]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed for `&(usize, S)`\n  --> /tmp/tmpf_rofl3j.rs:11:23\n\
    \   |\n11 |     sum_nums.sort_by(|a, b| a.1.cmp(&b.1));\n   |                \
    \       ^ consider giving this closure parameter the explicit type `&(usize, S)`,\
    \ where the type parameter `S` is specified\n   |\n   = note: type must be known\
    \ at this point\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659822472
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    nums.iter()\n        .enumerate()\n        .map(|(i, n)| (n,\
    \ i, n.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize).sum()))\n\
    \        .collect::<Vec<_>>()\n        .sort_by(|&(_, _, s1), &(_, _, s2)| {\n\
    \            if s1 == s2 {\n                core::cmp::Ordering::Equal\n     \
    \       } else if s1 < s2 {\n                core::cmp::Ordering::Less\n     \
    \       } else {\n                core::cmp::Ordering::Greater\n            }\n\
    \        })\n        .iter()\n        .map(|&(n, _, _)| *n)\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `iter` found for unit type `()` in the current\
    \ scope\n  --> /tmp/tmp5l7jdup0.rs:20:10\n   |\n20 |         .iter()\n   |   \
    \       ^^^^ method not found in `()`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659822472
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    nums.into_iter().enumerate().collect::<Vec<_>>().sort_by(|(_,\
    \ x), (_, y)| x.abs().to_string().chars().map(|z| z.to_digit(10).unwrap() as isize).sum::<isize>().cmp(&y.abs().to_string().chars().map(|z|\
    \ z.to_digit(10).unwrap() as isize).sum::<isize>()).then(x.cmp(&y))).into_iter().map(|(i,\
    \ _)| i as isize).collect::<Vec<_>>()\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `into_iter` exists for unit type `()`, but its\
    \ trait bounds were not satisfied\n --> /tmp/tmpqwpa24dm.rs:7:272\n  |\n7 | ...::<isize>()).then(x.cmp(&y))).into_iter().map(|(i,\
    \ _)| i as isize).collect::<Vec<_>>()\n  |                                  ^^^^^^^^^\
    \ method cannot be called on `()` due to unsatisfied trait bounds\n  |\n  = note:\
    \ the following trait bounds were not satisfied:\n          `(): Iterator`\n \
    \         which is required by `(): IntoIterator`\n          `&(): Iterator`\n\
    \          which is required by `&(): IntoIterator`\n          `&mut (): Iterator`\n\
    \          which is required by `&mut (): IntoIterator`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659822472
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut list = nums;\n    let mut temp: usize;\n    let mut\
    \ sum: isize;\n    let mut d: isize;\n    let mut i: usize;\n    let mut j: usize;\n\
    \    let mut index: usize;\n    let mut key: isize;\n    for i in 1..list.len()\
    \ {\n        key = list[i];\n        temp = key.abs() as usize;\n        sum =\
    \ 0;\n        while temp > 0 {\n            d = temp % 10;\n            sum +=\
    \ d;\n            temp = temp / 10;\n        }\n        j = i - 1;\n        while\
    \ j >= 0 && (list[j].abs() as usize).count_ones() < sum.count_ones() {\n     \
    \       list[j + 1] = list[j];\n            j = j - 1;\n        }\n        if\
    \ j >= 0 && (list[j].abs() as usize).count_ones() == sum.count_ones() {\n    \
    \        index = nums.iter().position(|&val| val == key).unwrap();\n         \
    \   while j >= 0 && (list[j].abs() as usize).count_ones() == sum.count_ones()\
    \ && (nums.iter().position(|&val| val == list[j]).unwrap() > index) {\n      \
    \          list[j + 1] = list[j];\n                j = j - 1;\n            }\n\
    \        }\n        list[j + 1] = key;\n    }\n    list\n}\n\nfn main() {\n  \
    \  let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1,\
    \ -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2ez302up.rs:20:17\n   |\n\
    20 |             d = temp % 10;\n   |                 ^^^^^^^^^ expected `isize`,\
    \ found `usize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822471
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    fn sum_digits(n: isize) -> isize {\n        let mut result\
    \ = 0;\n        let mut n = n;\n        while n > 0 {\n            result += n\
    \ % 10;\n            n /= 10;\n        }\n        result\n    }\n\n    let mut\
    \ nums: Vec<_> = nums.into_iter().enumerate().collect();\n    nums.sort_by_key(|(index,\
    \ &number)| (sum_digits(number), index));\n    nums.into_iter().map(|(_, number)|\
    \ number).collect()\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2zpm6dcv.rs:18:31\n   |\n\
    18 |     nums.sort_by_key(|(index, &number)| (sum_digits(number), index));\n \
    \  |                               ^^^^^^^- expected due to this\n   |       \
    \                        |\n   |                               expected `isize`,\
    \ found reference\n   |                               help: you can probably remove\
    \ the explicit borrow: `number`\n   |\n   = note:   expected type `isize`\n  \
    \         found reference `&_`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822471
- exit_code: 101
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    // WIP\n    let mut nums = nums;\n    nums.sort_by(|a, b|\
    \ {\n        let split_a = a.to_string().chars().map(|x| x.to_digit(10).unwrap()).sum::<u32>();\n\
    \        let split_b = b.to_string().chars().map(|x| x.to_digit(10).unwrap()).sum::<u32>();\n\
    \        split_a.cmp(&split_b)\n    });\n    nums\n}\n\nfn main() {\n    let candidate\
    \ = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmps1npkgx9.rs:10:68

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822472
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    nums.into_iter().enumerate().sorted_by(|a, b| {\n        a.1.to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap() as isize).sum::<isize>()\n            .cmp(&b.1.to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap() as isize).sum::<isize>())\n            .then_with(||\
    \ a.0.cmp(&b.0))\n    }).map(|(_, x)| x).collect()\n}\n\nfn main() {\n    let\
    \ candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11,\
    \ -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted_by` found for struct `Enumerate`\
    \ in the current scope\n --> /tmp/tmpd1io0xs5.rs:7:34\n  |\n7 |     nums.into_iter().enumerate().sorted_by(|a,\
    \ b| {\n  |                                  ^^^^^^^^^ method not found in `Enumerate<std::vec::IntoIter<isize>>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659822472
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    nums.iter()\n        .enumerate()\n        .map(|(index, &num)|\
    \ (index, num))\n        .map(|(index, num)| (index, num, num.to_string().chars().map(|ch|\
    \ ch.to_digit(10).unwrap() as isize).sum()))\n        .map(|(index, num, points)|\
    \ (points, num, index))\n        .sorted_by(|&(p1, _, _), &(p2, _, _)| p1.cmp(&p2))\n\
    \        .map(|(_, num, _)| num)\n        .collect()\n}\n\nfn main() {\n    let\
    \ candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11,\
    \ -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted_by` found for struct `Map` in the\
    \ current scope\n  --> /tmp/tmpsw4xivgh.rs:12:10\n   |\n12 |         .sorted_by(|&(p1,\
    \ _, _), &(p2, _, _)| p1.cmp(&p2))\n   |          ^^^^^^^^^ method not found in\
    \ `Map<Map<Map<Enumerate<std::slice::Iter<'_, isize>>, [closure@/tmp/tmpsw4xivgh.rs:9:14:\
    \ 9:42]>, [closure@/tmp/tmpsw4xivgh.rs:10:14: 10:116]>, [closure@/tmp/tmpsw4xivgh.rs:11:14:\
    \ 11:57]>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659822472
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    fn sum_digits(mut num: isize) -> isize {\n        let mut\
    \ sum = 0;\n        while num > 0 {\n            sum += num % 10;\n          \
    \  num /= 10;\n        }\n        sum\n    }\n\n    let mut nums = nums;\n   \
    \ nums.sort_by_key(|num| (sum_digits(*num), num));\n    nums\n}\n\nfn main() {\n\
    \    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1,\
    \ -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error: lifetime may not live long enough\n  --> /tmp/tmp_taph0ps.rs:17:28\n\
    \   |\n17 |     nums.sort_by_key(|num| (sum_digits(*num), num));\n   |       \
    \                ---- ^^^^^^^^^^^^^^^^^^^^^^^ returning this value requires that\
    \ `'1` must outlive `'2`\n   |                       |  |\n   |              \
    \         |  return type of closure is (isize, &'2 isize)\n   |              \
    \         has type `&'1 isize`\n\nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1659822471
- exit_code: 101
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpibftsb8b.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822472
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    nums.iter()\n        .enumerate()\n        .map(|(index, n)|\
    \ (index, n, sum_of_digits(*n)))\n        .sorted_by(|(_, _, a), (_, _, b)| a.cmp(b))\n\
    \        .into_iter()\n        .map(|(_, n, _)| *n)\n        .collect()\n}\n\n\
    fn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `sum_of_digits` in this scope\n -->\
    \ /tmp/tmp55fd7jst.rs:9:38\n  |\n9 |         .map(|(index, n)| (index, n, sum_of_digits(*n)))\n\
    \  |                                      ^^^^^^^^^^^^^ not found in this scope\n\
    \nerror[E0599]: no method named `sorted_by` found for struct `Map` in the current\
    \ scope\n  --> /tmp/tmp55fd7jst.rs:10:10\n   |\n10 |         .sorted_by(|(_, _,\
    \ a), (_, _, b)| a.cmp(b))\n   |          ^^^^^^^^^ method not found in `Map<Enumerate<std::slice::Iter<'_,\
    \ isize>>, _>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0425, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822472
- exit_code: 101
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    // CODE HERE\n    unimplemented!()\n}\n\nfn main() {\n   \
    \ let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11,\
    \ -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpruhiza7h.rs:8:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822472
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    nums.into_iter().enumerate().sorted_by(|(_, a), (_, b)| {\n\
    \        get_digits_sum(*a).cmp(&get_digits_sum(*b))\n    }).map(|(_, x)| x).collect()\n\
    }\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `get_digits_sum` in this scope\n -->\
    \ /tmp/tmpzp89353t.rs:8:9\n  |\n8 |         get_digits_sum(*a).cmp(&get_digits_sum(*b))\n\
    \  |         ^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ function `get_digits_sum` in this scope\n --> /tmp/tmpzp89353t.rs:8:33\n  |\n\
    8 |         get_digits_sum(*a).cmp(&get_digits_sum(*b))\n  |                 \
    \                ^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0599]: no method\
    \ named `sorted_by` found for struct `Enumerate` in the current scope\n --> /tmp/tmpzp89353t.rs:7:34\n\
    \  |\n7 |     nums.into_iter().enumerate().sorted_by(|(_, a), (_, b)| {\n  | \
    \                                 ^^^^^^^^^ method not found in `Enumerate<std::vec::IntoIter<isize>>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822472
- exit_code: 101
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpibftsb8b.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822472
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let sum_digits = |num: &isize| -> isize {\n        let mut\
    \ sum = 0;\n        let mut num = *num;\n        while num > 0 {\n           \
    \ sum += num % 10;\n            num /= 10;\n        }\n        sum\n    };\n\n\
    \    nums.iter()\n        .enumerate()\n        .sorted_by(|(_, a), (_, b)| {\n\
    \            if sum_digits(a) == sum_digits(b) {\n                Ordering::Equal\n\
    \            } else if sum_digits(a) < sum_digits(b) {\n                Ordering::Less\n\
    \            } else {\n                Ordering::Greater\n            }\n    \
    \    })\n        .map(|(i, &num)| num)\n        .collect()\n}\n\nfn main() {\n\
    \    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1,\
    \ -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Ordering`\n  -->\
    \ /tmp/tmp8s7_x7tn.rs:21:17\n   |\n21 |                 Ordering::Equal\n   |\
    \                 ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `Ordering`\n  --> /tmp/tmp8s7_x7tn.rs:23:17\n\
    \   |\n23 |                 Ordering::Less\n   |                 ^^^^^^^^ use\
    \ of undeclared type `Ordering`\n\nerror[E0433]: failed to resolve: use of undeclared\
    \ type `Ordering`\n  --> /tmp/tmp8s7_x7tn.rs:25:17\n   |\n25 |               \
    \  Ordering::Greater\n   |                 ^^^^^^^^ use of undeclared type `Ordering`\n\
    \nerror[E0599]: no method named `sorted_by` found for struct `Enumerate` in the\
    \ current scope\n  --> /tmp/tmp8s7_x7tn.rs:19:10\n   |\n19 |         .sorted_by(|(_,\
    \ a), (_, b)| {\n   |          ^^^^^^^^^ method not found in `Enumerate<std::slice::Iter<'_,\
    \ isize>>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed\
    \ explanations: E0433, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0433`.\n"
  stdout: ''
  timestamp: 1659822472
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums = nums;\n    nums.sort_by(|a, b| {\n        let\
    \ a_digits = a.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n\
    \        let b_digits = b.to_string().chars().map(|c| c.to_digit(10).unwrap()\
    \ as isize);\n        a_digits.sum::<isize>().cmp(&b_digits.sum::<isize>())\n\
    \    });\n    nums\n}\n\nfn main() {\n    let candidate = order_by_points;\n \
    \   assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0716]: temporary value dropped while borrowed\n  --> /tmp/tmp33grht4o.rs:9:24\n\
    \   |\n9  |         let a_digits = a.to_string().chars().map(|c| c.to_digit(10).unwrap()\
    \ as isize);\n   |                        ^^^^^^^^^^^^^                      \
    \                            - temporary value is freed at the end of this statement\n\
    \   |                        |\n   |                        creates a temporary\
    \ which is freed while still in use\n10 |         let b_digits = b.to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap() as isize);\n11 |         a_digits.sum::<isize>().cmp(&b_digits.sum::<isize>())\n\
    \   |         -------- borrow later used here\n   |\n   = note: consider using\
    \ a `let` binding to create a longer lived value\n\nerror[E0716]: temporary value\
    \ dropped while borrowed\n  --> /tmp/tmp33grht4o.rs:10:24\n   |\n10 |        \
    \ let b_digits = b.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n\
    \   |                        ^^^^^^^^^^^^^                                   \
    \               - temporary value is freed at the end of this statement\n   |\
    \                        |\n   |                        creates a temporary which\
    \ is freed while still in use\n11 |         a_digits.sum::<isize>().cmp(&b_digits.sum::<isize>())\n\
    \   |                                      -------- borrow later used here\n \
    \  |\n   = note: consider using a `let` binding to create a longer lived value\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0716`.\n"
  stdout: ''
  timestamp: 1659822472
- exit_code: 101
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut dig_sums: Vec<(isize, isize)> = vec![];\n    for (idx,\
    \ num) in nums.iter().enumerate() {\n        let sum: isize = num.to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap() as isize).sum();\n        dig_sums.push((sum, idx as\
    \ isize));\n    }\n    dig_sums.sort_by(|a, b| a.0.cmp(&b.0));\n    let mut result:\
    \ Vec<isize> = vec![];\n    for dig_sum in dig_sums {\n        result.push(nums[dig_sum.1\
    \ as usize]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmp_0opf4qq.rs:9:73

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822472
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut m = HashMap::new();\n    for i in 0..nums.len() {\n\
    \        let s = sum_digits(nums[i]);\n        m.entry(s).or_insert(Vec::new()).push(nums[i]);\n\
    \    }\n    let mut keys: Vec<isize> = m.keys().map(|x| *x).collect();\n    keys.sort();\n\
    \    let mut out = Vec::new();\n    for k in keys {\n        out.append(&mut m.get(&k).unwrap().clone());\n\
    \    }\n    out\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmpn0vzcsnw.rs:7:17\n  |\n7 |     let mut m = HashMap::new();\n  |    \
    \             ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this\
    \ struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot\
    \ find function `sum_digits` in this scope\n --> /tmp/tmpn0vzcsnw.rs:9:17\n  |\n\
    9 |         let s = sum_digits(nums[i]);\n  |                 ^^^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0425, E0433.\nFor more information about an error, try\
    \ `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822472
- exit_code: 101
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut sum_vec: Vec<(isize, isize)> = Vec::new();\n    for\
    \ num in nums {\n        let mut num = num;\n        let mut sum = 0;\n      \
    \  while num > 0 {\n            sum += num % 10;\n            num /= 10;\n   \
    \     }\n        sum_vec.push((sum, num));\n    }\n    sum_vec.sort_by(|a, b|\
    \ a.cmp(b));\n    sum_vec.iter().map(|&(_, num)| num).collect()\n}\n\nfn main()\
    \ {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11,\
    \ -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-12, -11, -1, 0, 0]`,\n right: `[-1, -11, 1, -12, 11]`', /tmp/tmp369jdzid.rs:23:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822472
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    nums.into_iter().enumerate().collect::<Vec<_>>().sort_by(|a,\
    \ b| a.1.sum_of_digits().cmp(&b.1.sum_of_digits())).into_iter().map(|(_, x)| x).collect()\n\
    }\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sum_of_digits` found for type `isize` in\
    \ the current scope\n --> /tmp/tmp00plxza8.rs:7:73\n  |\n7 |     nums.into_iter().enumerate().collect::<Vec<_>>().sort_by(|a,\
    \ b| a.1.sum_of_digits().cmp(&b.1.sum_of_digits())).into_iter().map(|(_, x...\n\
    \  |                                                                         ^^^^^^^^^^^^^\
    \ method not found in `isize`\n\nerror[E0599]: no method named `sum_of_digits`\
    \ found for type `isize` in the current scope\n --> /tmp/tmp00plxza8.rs:7:98\n\
    \  |\n7 | ...).sort_by(|a, b| a.1.sum_of_digits().cmp(&b.1.sum_of_digits())).into_iter().map(|(_,\
    \ x)| x).collect()\n  |                                                  ^^^^^^^^^^^^^\
    \ method not found in `isize`\n\nerror[E0599]: the method `into_iter` exists for\
    \ unit type `()`, but its trait bounds were not satisfied\n --> /tmp/tmp00plxza8.rs:7:116\n\
    \  |\n7 | ...().cmp(&b.1.sum_of_digits())).into_iter().map(|(_, x)| x).collect()\n\
    \  |                                  ^^^^^^^^^ method cannot be called on `()`\
    \ due to unsatisfied trait bounds\n  |\n  = note: the following trait bounds were\
    \ not satisfied:\n          `(): Iterator`\n          which is required by `():\
    \ IntoIterator`\n          `&(): Iterator`\n          which is required by `&():\
    \ IntoIterator`\n          `&mut (): Iterator`\n          which is required by\
    \ `&mut (): IntoIterator`\n\nerror: aborting due to 3 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659822472
- exit_code: 101
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    fn digit_sum(n: isize) -> usize {\n        let mut sum = 0;\n\
    \        let mut n = n;\n        while n > 0 {\n            sum += (n % 10) as\
    \ usize;\n            n /= 10;\n        }\n        sum\n    }\n\n    let mut nums\
    \ = nums;\n    nums.sort_by_key(|&n| (digit_sum(n), n));\n    nums\n}\n\nfn main()\
    \ {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11,\
    \ -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-12, -11, -1, 1, 11]`,\n right: `[-1, -11, 1, -12, 11]`', /tmp/tmpz6lvt8lb.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822472
- exit_code: 101
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    // this is amazing\n    let mut nums = nums;\n    nums.sort_by_key(|&x|\
    \ (x.abs() as usize).to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>());\n\
    \    nums\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, -1, 11, -11, -12]`,\n right: `[-1, -11, 1, -12, 11]`', /tmp/tmpx50pk7wx.rs:15:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822472
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums: Vec<_> = nums.into_iter().enumerate().collect();\n\
    \    nums.sort_by_key(|(_, &item)| item.to_string().as_bytes().iter().map(|&x|\
    \ x - '0' as u8).sum::<u8>());\n    nums.into_iter().map(|(i, _)| i as isize).collect()\n\
    }\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp92zs22nr.rs:8:27\n  |\n8 |\
    \     nums.sort_by_key(|(_, &item)| item.to_string().as_bytes().iter().map(|&x|\
    \ x - '0' as u8).sum::<u8>());\n  |                           ^^^^^- expected\
    \ due to this\n  |                           |\n  |                          \
    \ expected `isize`, found reference\n  |                           help: you can\
    \ probably remove the explicit borrow: `item`\n  |\n  = note:   expected type\
    \ `isize`\n          found reference `&_`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822472
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    nums.iter()\n        .enumerate()\n        .map(|(i, n)| (i,\
    \ sum_digits(*n)))\n        .collect::<Vec<(usize, isize)>>()\n        .sort_by(|a,\
    \ b| {\n            if a.1 < b.1 {\n                Ordering::Less\n         \
    \   } else if a.1 > b.1 {\n                Ordering::Greater\n            } else\
    \ {\n                a.0.cmp(&b.0)\n            }\n        })\n        .iter()\n\
    \        .map(|x| nums[x.0])\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Ordering`\n  -->\
    \ /tmp/tmpe71gl7df.rs:13:17\n   |\n13 |                 Ordering::Less\n   | \
    \                ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `Ordering`\n  --> /tmp/tmpe71gl7df.rs:15:17\n\
    \   |\n15 |                 Ordering::Greater\n   |                 ^^^^^^^^ use\
    \ of undeclared type `Ordering`\n\nerror[E0425]: cannot find function `sum_digits`\
    \ in this scope\n --> /tmp/tmpe71gl7df.rs:9:27\n  |\n9 |         .map(|(i, n)|\
    \ (i, sum_digits(*n)))\n  |                           ^^^^^^^^^^ not found in\
    \ this scope\n\nerror[E0599]: no method named `iter` found for unit type `()`\
    \ in the current scope\n  --> /tmp/tmpe71gl7df.rs:20:10\n   |\n20 |         .iter()\n\
    \   |          ^^^^ method not found in `()`\n\nerror: aborting due to 4 previous\
    \ errors\n\nSome errors have detailed explanations: E0425, E0433, E0599.\nFor\
    \ more information about an error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822472
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = nums.clone();\n    result.sort_by(|a, b|\
    \ {\n        let ad = sum_digits(*a);\n        let bd = sum_digits(*b);\n    \
    \    match ad.cmp(&bd) {\n            Ordering::Equal => a.cmp(&b),\n        \
    \    Ordering::Less => Ordering::Less,\n            Ordering::Greater => Ordering::Greater,\n\
    \        }\n    });\n    result\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Ordering`\n  -->\
    \ /tmp/tmp71zav3e3.rs:12:13\n   |\n12 |             Ordering::Equal => a.cmp(&b),\n\
    \   |             ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `Ordering`\n  --> /tmp/tmp71zav3e3.rs:13:13\n\
    \   |\n13 |             Ordering::Less => Ordering::Less,\n   |             ^^^^^^^^\
    \ use of undeclared type `Ordering`\n\nerror[E0433]: failed to resolve: use of\
    \ undeclared type `Ordering`\n  --> /tmp/tmp71zav3e3.rs:13:31\n   |\n13 |    \
    \         Ordering::Less => Ordering::Less,\n   |                            \
    \   ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `Ordering`\n  --> /tmp/tmp71zav3e3.rs:14:13\n   |\n14\
    \ |             Ordering::Greater => Ordering::Greater,\n   |             ^^^^^^^^\
    \ use of undeclared type `Ordering`\n\nerror[E0433]: failed to resolve: use of\
    \ undeclared type `Ordering`\n  --> /tmp/tmp71zav3e3.rs:14:34\n   |\n14 |    \
    \         Ordering::Greater => Ordering::Greater,\n   |                      \
    \            ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0425]: cannot\
    \ find function `sum_digits` in this scope\n --> /tmp/tmp71zav3e3.rs:9:18\n  |\n\
    9 |         let ad = sum_digits(*a);\n  |                  ^^^^^^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find function `sum_digits` in this scope\n\
    \  --> /tmp/tmp71zav3e3.rs:10:18\n   |\n10 |         let bd = sum_digits(*b);\n\
    \   |                  ^^^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to 7 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\n\
    For more information about an error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822472
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut sorted_nums = nums.clone();\n    sorted_nums.sort_by(|a,\
    \ b| (sum_digits(*a), a).cmp(&(sum_digits(*b), b)));\n    sorted_nums\n}\n\nfn\
    \ main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `sum_digits` in this scope\n --> /tmp/tmpb5ckw7i1.rs:8:33\n\
    \  |\n8 |     sorted_nums.sort_by(|a, b| (sum_digits(*a), a).cmp(&(sum_digits(*b),\
    \ b)));\n  |                                 ^^^^^^^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find function `sum_digits` in this scope\n --> /tmp/tmpb5ckw7i1.rs:8:58\n\
    \  |\n8 |     sorted_nums.sort_by(|a, b| (sum_digits(*a), a).cmp(&(sum_digits(*b),\
    \ b)));\n  |                                                          ^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822472
- exit_code: 101
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut final_vec: Vec<isize> = Vec::new();\n    let mut sum_point_pair:\
    \ Vec<(isize, isize)> = Vec::new();\n    for num in nums {\n        let mut sum\
    \ = 0;\n        let mut num_copy = num;\n        while num_copy > 0 {\n      \
    \      sum += num_copy % 10;\n            num_copy /= 10;\n        }\n       \
    \ sum_point_pair.push((sum, num));\n    }\n    sum_point_pair.sort();\n    for\
    \ pair in sum_point_pair {\n        final_vec.push(pair.1);\n    }\n    final_vec\n\
    }\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-12, -11, -1, 1, 11]`,\n right: `[-1, -11, 1, -12, 11]`', /tmp/tmpbzuo7ffy.rs:27:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822472
- exit_code: 101
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    // Your code here\n    let mut sorted_nums = nums.clone();\n\
    \    sorted_nums.sort_by(|a, b| {\n        let a_sum = a.to_string().chars().fold(0,\
    \ |acc, c| acc + c.to_digit(10).unwrap() as isize);\n        let b_sum = b.to_string().chars().fold(0,\
    \ |acc, c| acc + c.to_digit(10).unwrap() as isize);\n        a_sum.cmp(&b_sum)\n\
    \    });\n    sorted_nums\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpccock3fx.rs:10:81

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822472
- exit_code: 101
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut tuples: Vec<(isize, usize)> = Vec::new();\n    for\
    \ (i, x) in nums.iter().enumerate() {\n        let mut sum = 0;\n        let mut\
    \ x = *x;\n        while x > 0 {\n            sum += x % 10;\n            x /=\
    \ 10;\n        }\n        tuples.push((sum, i));\n    }\n    tuples.sort();\n\
    \    let mut res: Vec<isize> = Vec::new();\n    for x in tuples {\n        res.push(nums[x.1]);\n\
    \    }\n    res\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-1, -11, -12, 1, 11]`,\n right: `[-1, -11, 1, -12, 11]`', /tmp/tmpbs5u04j1.rs:27:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822472
- exit_code: 101
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut tuples: Vec<(isize, usize)> = nums.iter().enumerate().map(|(i,\
    \ x)| (x.to_string().chars().map(|d| d.to_digit(10).unwrap() as isize).sum(),\
    \ i)).collect();\n    tuples.sort_by(|a, b| {\n        if a.0 == b.0 {\n     \
    \       a.1.cmp(&b.1)\n        } else {\n            a.0.cmp(&b.0)\n        }\n\
    \    });\n    tuples.iter().map(|t| nums[t.1]).collect()\n}\n\nfn main() {\n \
    \   let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1,\
    \ -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpa4am4n6_.rs:7:126

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822472
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    nums.iter()\n        .enumerate()\n        .map(|(index, num)|\
    \ (num, num.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>()\
    \ as isize, index))\n        .sorted_by(|(_, a, _), (_, b, _)| a.cmp(b))\n   \
    \     .map(|(num, _, _)| *num)\n        .collect()\n}\n\nfn main() {\n    let\
    \ candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11,\
    \ -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted_by` found for struct `Map` in the\
    \ current scope\n  --> /tmp/tmp2fd2mb6b.rs:10:10\n   |\n10 |         .sorted_by(|(_,\
    \ a, _), (_, b, _)| a.cmp(b))\n   |          ^^^^^^^^^ method not found in `Map<Enumerate<std::slice::Iter<'_,\
    \ isize>>, [closure@/tmp/tmp2fd2mb6b.rs:9:14: 9:121]>`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659822472
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums = nums;\n    nums.sort_by(|a, b| -> std::cmp::Ordering\
    \ {\n        let a_sum = sum_digits(*a);\n        let b_sum = sum_digits(*b);\n\
    \        if a_sum < b_sum {\n            std::cmp::Ordering::Less\n        } else\
    \ if a_sum > b_sum {\n            std::cmp::Ordering::Greater\n        } else\
    \ {\n            std::cmp::Ordering::Equal\n        }\n    });\n    nums\n}\n\n\
    fn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `sum_digits` in this scope\n --> /tmp/tmpel5lqsts.rs:9:21\n\
    \  |\n9 |         let a_sum = sum_digits(*a);\n  |                     ^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find function `sum_digits` in\
    \ this scope\n  --> /tmp/tmpel5lqsts.rs:10:21\n   |\n10 |         let b_sum =\
    \ sum_digits(*b);\n   |                     ^^^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822472
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums = nums;\n    nums.sort_by(|a, b| sum_digits(*a).cmp(&sum_digits(*b)));\n\
    \    nums\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `sum_digits` in this scope\n --> /tmp/tmpqb3k46e2.rs:8:25\n\
    \  |\n8 |     nums.sort_by(|a, b| sum_digits(*a).cmp(&sum_digits(*b)));\n  | \
    \                        ^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find function `sum_digits` in this scope\n --> /tmp/tmpqb3k46e2.rs:8:45\n  |\n\
    8 |     nums.sort_by(|a, b| sum_digits(*a).cmp(&sum_digits(*b)));\n  |       \
    \                                      ^^^^^^^^^^ not found in this scope\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822472
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut res = nums.clone();\n    res.sort_by(|a, b| {\n  \
    \      let a_digits = a.to_string().chars().map(|d| d.to_digit(10).unwrap() as\
    \ usize).sum();\n        let b_digits = b.to_string().chars().map(|d| d.to_digit(10).unwrap()\
    \ as usize).sum();\n        a_digits.cmp(&b_digits)\n    });\n    res\n}\n\nfn\
    \ main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmp62hk_xiz.rs:11:9\n\
    \   |\n9  |         let a_digits = a.to_string().chars().map(|d| d.to_digit(10).unwrap()\
    \ as usize).sum();\n   |             -------- consider giving `a_digits` a type\n\
    10 |         let b_digits = b.to_string().chars().map(|d| d.to_digit(10).unwrap()\
    \ as usize).sum();\n11 |         a_digits.cmp(&b_digits)\n   |         ^^^^^^^^\
    \ cannot infer type\n   |\n   = note: type must be known at this point\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659822472
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut order = nums.iter().enumerate().collect::<Vec<(usize,\
    \ &isize)>>();\n    order.sort_by(|a, b| {\n        let sum_a = sum_digits(*a.1);\n\
    \        let sum_b = sum_digits(*b.1);\n        if sum_a == sum_b {\n        \
    \    a.0.cmp(&b.0)\n        } else {\n            sum_a.cmp(&sum_b)\n        }\n\
    \    });\n    order.iter().map(|&(_, &i)| i).collect()\n}\n\nfn main() {\n   \
    \ let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11,\
    \ -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `sum_digits` in this scope\n --> /tmp/tmpgxwkrr3s.rs:9:21\n\
    \  |\n9 |         let sum_a = sum_digits(*a.1);\n  |                     ^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find function `sum_digits` in\
    \ this scope\n  --> /tmp/tmpgxwkrr3s.rs:10:21\n   |\n10 |         let sum_b =\
    \ sum_digits(*b.1);\n   |                     ^^^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822472
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    nums.iter()\n        .enumerate()\n        .map(|(i, n)| (i,\
    \ n, sum_of_digits(*n)))\n        .sorted_by(|a, b| a.2.cmp(&b.2).then(a.0.cmp(&b.0)))\n\
    \        .into_iter()\n        .map(|(_, n, _)| *n)\n        .collect()\n}\n\n\
    fn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `sum_of_digits` in this scope\n -->\
    \ /tmp/tmp_1za3r8a.rs:9:30\n  |\n9 |         .map(|(i, n)| (i, n, sum_of_digits(*n)))\n\
    \  |                              ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0599]:\
    \ no method named `sorted_by` found for struct `Map` in the current scope\n  -->\
    \ /tmp/tmp_1za3r8a.rs:10:10\n   |\n10 |         .sorted_by(|a, b| a.2.cmp(&b.2).then(a.0.cmp(&b.0)))\n\
    \   |          ^^^^^^^^^ method not found in `Map<Enumerate<std::slice::Iter<'_,\
    \ isize>>, _>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0425, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822472
- exit_code: 101
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp3p_6ij05.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822471
- exit_code: 101
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    // let v = &nums;\n    let mut v = nums.clone();\n    v.sort_by(|a,\
    \ b| {\n        let sum_a = a.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        let sum_b = b.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \        // println!(\"{}-{}\", sum_a, sum_b);\n        sum_a.cmp(&sum_b)\n  \
    \  });\n    v\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpqhvq8vn0.rs:10:66

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822472
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = vec![];\n    let mut dict = HashMap::new();\n\
    \    for (index, &num) in nums.iter().enumerate() {\n        let score = num.to_string().chars().map(|x|\
    \ x.to_digit(10).unwrap() as isize).sum();\n        dict.insert(index, score);\n\
    \    }\n    let mut idx = dict.keys().cloned().collect::<Vec<usize>>();\n    idx.sort_by_key(|&x|\
    \ dict[&x]);\n    for &i in idx.iter() {\n        result.push(nums[i]);\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmpftnvt2qu.rs:8:20\n  |\n8 |     let mut dict = HashMap::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659822472
- exit_code: 101
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_sum = Vec::new();\n    for i in 0..nums.len()\
    \ {\n        let mut num = nums[i];\n        let mut sum = 0;\n        while num\
    \ > 0 {\n            sum += num % 10;\n            num /= 10;\n        }\n   \
    \     nums_sum.push((sum, i));\n    }\n    nums_sum.sort();\n    let mut sorted_nums\
    \ = Vec::new();\n    for j in 0..nums_sum.len() {\n        sorted_nums.push(nums[nums_sum[j].1]);\n\
    \    }\n    sorted_nums\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-1, -11, -12, 1, 11]`,\n right: `[-1, -11, 1, -12, 11]`', /tmp/tmpwe5h946y.rs:27:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822472
- exit_code: 101
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp3p_6ij05.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822471
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_sum_map: HashMap<isize, Vec<isize>> = HashMap::new();\n\
    \    for i in 0..nums.len() {\n        let sum = sum_digits(nums[i]);\n      \
    \  let mut entry = nums_sum_map.entry(sum).or_insert(Vec::new());\n        entry.push(nums[i]);\n\
    \    }\n    let mut nums_sum_map: Vec<(&isize, &Vec<isize>)> = nums_sum_map.iter().collect();\n\
    \    nums_sum_map.sort_by(|x, y| x.0.cmp(y.0));\n    let mut res: Vec<isize> =\
    \ Vec::new();\n    for (_, values) in nums_sum_map {\n        res.extend(values.iter());\n\
    \    }\n    res\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashMap` in this scope\n --> /tmp/tmpak056qu4.rs:7:27\n\
    \  |\n7 |     let mut nums_sum_map: HashMap<isize, Vec<isize>> = HashMap::new();\n\
    \  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpak056qu4.rs:7:56\n\
    \  |\n7 |     let mut nums_sum_map: HashMap<isize, Vec<isize>> = HashMap::new();\n\
    \  |                                                        ^^^^^^^ not found\
    \ in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n\
    \  |\n\nerror[E0425]: cannot find function `sum_digits` in this scope\n --> /tmp/tmpak056qu4.rs:9:19\n\
    \  |\n9 |         let sum = sum_digits(nums[i]);\n  |                   ^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to 3 previous errors\n\nSome\
    \ errors have detailed explanations: E0412, E0425, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659822472
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut sum_vec: Vec<(isize, usize)> = Vec::new();\n    for\
    \ (idx, &num) in nums.iter().enumerate() {\n        sum_vec.push((num, idx));\n\
    \    }\n    let mut new_vec: Vec<isize> = Vec::new();\n    sum_vec.sort_by(|a,\
    \ b| a.1.cmp(&b.1));\n    sum_vec.sort_by(|a, b| sum_digits(a.0).cmp(&sum_digits(b.0)));\n\
    \    for num in sum_vec {\n        new_vec.push(num.0);\n    }\n    new_vec\n\
    }\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `sum_digits` in this scope\n  --> /tmp/tmpnxo1eple.rs:13:28\n\
    \   |\n13 |     sum_vec.sort_by(|a, b| sum_digits(a.0).cmp(&sum_digits(b.0)));\n\
    \   |                            ^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `sum_digits` in this scope\n  --> /tmp/tmpnxo1eple.rs:13:49\n\
    \   |\n13 |     sum_vec.sort_by(|a, b| sum_digits(a.0).cmp(&sum_digits(b.0)));\n\
    \   |                                                 ^^^^^^^^^^ not found in\
    \ this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822472
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut res = nums.clone();\n    res.sort_by(|a, b| sum_digits(*a).cmp(&sum_digits(*b)));\n\
    \    res\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `sum_digits` in this scope\n --> /tmp/tmpdyyl6llh.rs:8:24\n\
    \  |\n8 |     res.sort_by(|a, b| sum_digits(*a).cmp(&sum_digits(*b)));\n  |  \
    \                      ^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find function `sum_digits` in this scope\n --> /tmp/tmpdyyl6llh.rs:8:44\n  |\n\
    8 |     res.sort_by(|a, b| sum_digits(*a).cmp(&sum_digits(*b)));\n  |        \
    \                                    ^^^^^^^^^^ not found in this scope\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822472
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    fn digits_sum(n: isize) -> isize {\n        fn acc(n: isize,\
    \ acc: isize) -> isize {\n            if n == 0 {\n                acc\n     \
    \       } else {\n                acc(n / 10, acc + n % 10)\n            }\n \
    \       }\n        acc(n, 0)\n    }\n    let mut nums = nums;\n    nums.sort_by(|a,\
    \ b| digits_sum(*a).cmp(&digits_sum(*b)));\n    nums\n}\n\nfn main() {\n    let\
    \ candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11,\
    \ -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0618]: expected function, found `isize`\n  --> /tmp/tmptnb5b7pa.rs:12:17\n\
    \   |\n8  |         fn acc(n: isize, acc: isize) -> isize {\n   |            \
    \              --- `acc` has type `isize`\n...\n12 |                 acc(n / 10,\
    \ acc + n % 10)\n   |                 ^^^----------------------\n   |        \
    \         |\n   |                 call expression requires function\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0618`.\n"
  stdout: ''
  timestamp: 1659822472
- exit_code: 101
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums: Vec<_> = nums.into_iter().enumerate().collect();\n\
    \    nums.sort_by_key(|&(_, x)| {\n        x.abs()\n            .to_string()\n\
    \            .chars()\n            .map(|c| c.to_digit(10).unwrap() as u32)\n\
    \            .sum::<u32>()\n    });\n    nums.into_iter().map(|(_, x)| x).collect()\n\
    }\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, -1, 11, -11, -12]`,\n right: `[-1, -11, 1, -12, 11]`', /tmp/tmpk9_gffqs.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822472
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = vec![];\n    let mut nums = nums;\n    nums.sort_by(|a,\
    \ b| (digit_sum(*a)).cmp(&digit_sum(*b)));\n    result.extend(nums);\n    result\n\
    }\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `digit_sum` in this scope\n --> /tmp/tmpjvpmgit2.rs:9:26\n\
    \  |\n9 |     nums.sort_by(|a, b| (digit_sum(*a)).cmp(&digit_sum(*b)));\n  | \
    \                         ^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find function `digit_sum` in this scope\n --> /tmp/tmpjvpmgit2.rs:9:46\n  |\n\
    9 |     nums.sort_by(|a, b| (digit_sum(*a)).cmp(&digit_sum(*b)));\n  |       \
    \                                       ^^^^^^^^^ not found in this scope\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822472
- exit_code: 101
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut total = Vec::new();\n    let mut sort = Vec::new();\n\
    \    for x in nums.iter() {\n        let mut y = x.clone();\n        let mut sum\
    \ = 0;\n        while y > 0 {\n            sum += y % 10;\n            y /= 10;\n\
    \        }\n        total.push(sum);\n    }\n    let mut min_so_far = 0;\n   \
    \ while sort.len() < nums.len() {\n        for x in 0..nums.len() {\n        \
    \    if total[x] < total[min_so_far] {\n                min_so_far = x;\n    \
    \        }\n        }\n        sort.push(nums[min_so_far]);\n        total[min_so_far]\
    \ = 100;\n    }\n    sort\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-1, -11, -12, 1, 11]`,\n right: `[-1, -11, 1, -12, 11]`', /tmp/tmps5yeimzm.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822472
- exit_code: 101
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    // the sum_of_digits() function is provided for your use\n\
    \    fn sum_of_digits(n: isize) -> isize {\n        n.to_string()\n          \
    \  .chars()\n            .map(|c| c.to_digit(10).unwrap() as isize)\n        \
    \    .sum()\n    }\n\n    // order_by_points(vec![51, 32, 43]) == vec![32, 43,\
    \ 51]\n    // because 51 -> 5 + 1 = 6, 32 -> 3 + 2 = 5, 43 -> 4 + 3 = 7.\n   \
    \ //\n    // order_by_points(vec![99, 77, 55, 33, 1, 0]) == vec![99, 77, 55, 1,\
    \ 33, 0]\n    // because 55 -> 5 + 5 = 10, 33 -> 3 + 3 = 6, 77 -> 7 + 7 = 14,\n\
    \    // 1 -> 1 = 1, 99 -> 9 + 9 = 18, 0 -> 0 = 0.\n    //\n    // order_by_points(vec![12,\
    \ 23, 34, 45, 56, 67, 78, 89, 90]) == vec![12, 89, 23, 78, 34, 67, 45, 56, 90]\n\
    \    // because 12 -> 1 + 2 = 3, 23 -> 2 + 3 = 5, 34 -> 3 + 4 = 7,\n    // 45\
    \ -> 4 + 5 = 9, 56 -> 5 + 6 = 11, 67 -> 6 + 7 = 13,\n    // 78 -> 7 + 8 = 15,\
    \ 89 -> 8 + 9 = 17, 90 -> 9 + 0 = 9.\n    //\n    // Note: order of items with\
    \ similar sum of digits may differ.\n    // For example:\n    // order_by_points(vec![12,\
    \ 23, 34, 45, 56, 67, 78, 89, 90]) == vec![12, 23, 34, 45, 56, 67, 78, 89, 90]\n\
    \    // is also a valid answer.\n    let mut result = nums.clone();\n    result.sort_by_key(|&x|\
    \ (sum_of_digits(x), x));\n    result\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpq9novr4_.rs:11:37

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822472
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums: Vec<(isize, usize)> = nums.into_iter().enumerate().map(|(i,\
    \ x)| (x, i)).collect();\n    nums.sort_by(|a, b| {\n        let (a, ai) = a;\n\
    \        let (b, bi) = b;\n        let a_sum = a.to_string().chars().map(|c| c.to_digit(10).unwrap()\
    \ as isize).sum();\n        let b_sum = b.to_string().chars().map(|c| c.to_digit(10).unwrap()\
    \ as isize).sum();\n        a_sum.cmp(&b_sum).then(ai.cmp(&bi))\n    });\n   \
    \ nums.into_iter().map(|(a, _)| a).collect()\n}\n\nfn main() {\n    let candidate\
    \ = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmpd2aquzsp.rs:13:9\n\
    \   |\n11 |         let a_sum = a.to_string().chars().map(|c| c.to_digit(10).unwrap()\
    \ as isize).sum();\n   |             ----- consider giving `a_sum` a type\n12\
    \ |         let b_sum = b.to_string().chars().map(|c| c.to_digit(10).unwrap()\
    \ as isize).sum();\n13 |         a_sum.cmp(&b_sum).then(ai.cmp(&bi))\n   |   \
    \      ^^^^^ cannot infer type\n   |\n   = note: type must be known at this point\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659822472
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    nums.into_iter().enumerate().collect::<Vec<_>>().sort_by(|a,\
    \ b| {\n        let sum_a = a.1.to_string().chars().map(|c| c.to_digit(10).unwrap()\
    \ as isize).sum();\n        let sum_b = b.1.to_string().chars().map(|c| c.to_digit(10).unwrap()\
    \ as isize).sum();\n        sum_a.cmp(&sum_b).then(a.0.cmp(&b.0))\n    }).into_iter().map(|(_,\
    \ x)| x).collect()\n}\n\nfn main() {\n    let candidate = order_by_points;\n \
    \   assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmp0cws8d95.rs:10:9\n\
    \   |\n8  |         let sum_a = a.1.to_string().chars().map(|c| c.to_digit(10).unwrap()\
    \ as isize).sum();\n   |             ----- consider giving `sum_a` a type\n9 \
    \ |         let sum_b = b.1.to_string().chars().map(|c| c.to_digit(10).unwrap()\
    \ as isize).sum();\n10 |         sum_a.cmp(&sum_b).then(a.0.cmp(&b.0))\n   | \
    \        ^^^^^ cannot infer type\n   |\n   = note: type must be known at this\
    \ point\n\nerror[E0599]: the method `into_iter` exists for unit type `()`, but\
    \ its trait bounds were not satisfied\n  --> /tmp/tmp0cws8d95.rs:11:8\n   |\n\
    11 |     }).into_iter().map(|(_, x)| x).collect()\n   |        ^^^^^^^^^ method\
    \ cannot be called on `()` due to unsatisfied trait bounds\n   |\n   = note: the\
    \ following trait bounds were not satisfied:\n           `(): Iterator`\n    \
    \       which is required by `(): IntoIterator`\n           `&(): Iterator`\n\
    \           which is required by `&(): IntoIterator`\n           `&mut (): Iterator`\n\
    \           which is required by `&mut (): IntoIterator`\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0282, E0599.\n\
    For more information about an error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659822472
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    nums.iter()\n        .enumerate()\n        .map(|(i, n)| {\n\
    \            (\n                i,\n                n.to_string()\n          \
    \          .chars()\n                    .map(|c| c.to_digit(10).unwrap())\n \
    \                   .sum::<u32>(),\n            )\n        })\n        .sorted_by(|a,\
    \ b| Ord::cmp(&a.1, &b.1))\n        .map(|(i, _)| nums[i])\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted_by` found for struct `Map` in the\
    \ current scope\n  --> /tmp/tmp6yo8dbwb.rs:18:10\n   |\n18 |         .sorted_by(|a,\
    \ b| Ord::cmp(&a.1, &b.1))\n   |          ^^^^^^^^^ method not found in `Map<Enumerate<std::slice::Iter<'_,\
    \ isize>>, [closure@/tmp/tmp6yo8dbwb.rs:9:14: 17:10]>`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659822472
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    fn sum_digits(x: isize) -> isize {\n        let mut sum =\
    \ 0;\n        let mut x = x;\n        while x > 0 {\n            sum += x % 10;\n\
    \            x /= 10;\n        }\n        sum\n    }\n    let mut nums = nums;\n\
    \    nums.sort_by(|&a, &b| {\n        let a = sum_digits(a);\n        let b =\
    \ sum_digits(b);\n        if a == b {\n            Less\n        } else if a <\
    \ b {\n            Less\n        } else {\n            Greater\n        }\n  \
    \  });\n    nums\n}\n\nfn main() {\n    let candidate = order_by_points;\n   \
    \ assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `Less` in this scope\n  --> /tmp/tmpfxecry49.rs:21:13\n\
    \   |\n21 |             Less\n   |             ^^^^ not found in this scope\n\
    \   |\nhelp: consider importing this unit variant\n   |\n1  | use std::cmp::Ordering::Less;\n\
    \   |\n\nerror[E0425]: cannot find value `Less` in this scope\n  --> /tmp/tmpfxecry49.rs:23:13\n\
    \   |\n23 |             Less\n   |             ^^^^ not found in this scope\n\
    \   |\nhelp: consider importing this unit variant\n   |\n1  | use std::cmp::Ordering::Less;\n\
    \   |\n\nerror[E0425]: cannot find value `Greater` in this scope\n  --> /tmp/tmpfxecry49.rs:25:13\n\
    \   |\n25 |             Greater\n   |             ^^^^^^^ not found in this scope\n\
    \   |\nhelp: consider importing this unit variant\n   |\n1  | use std::cmp::Ordering::Greater;\n\
    \   |\n\nerror: aborting due to 3 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822472
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    if nums.len() < 2 {\n        return nums;\n    }\n    nums.iter()\n\
    \        .enumerate()\n        .map(|(i, n)| {\n            let mut digits_sum\
    \ = 0;\n            let mut num = *n;\n            while num > 0 {\n         \
    \       digits_sum += num % 10;\n                num /= 10;\n            }\n \
    \           (digits_sum, i)\n        })\n        .collect::<Vec<(isize, usize)>>()\n\
    \        .sort_by(|a, b| a.0.cmp(&b.0))\n        .iter()\n        .map(|x| nums[x.1])\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `iter` found for unit type `()` in the current\
    \ scope\n  --> /tmp/tmp2fwjj6f5.rs:23:10\n   |\n23 |         .iter()\n   |   \
    \       ^^^^ method not found in `()`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659822472
- exit_code: 101
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums = nums;\n    let mut new_nums = Vec::new();\n\
    \    let mut sum = 0;\n    for i in 0..nums.len() {\n        for digit in nums[i].to_string().chars()\
    \ {\n            sum += digit.to_digit(10).unwrap() as isize;\n        }\n   \
    \     new_nums.push((sum, nums[i]));\n        sum = 0;\n    }\n    new_nums.sort();\n\
    \    let mut final_nums = Vec::new();\n    for i in 0..new_nums.len() {\n    \
    \    final_nums.push(new_nums[i].1);\n    }\n    final_nums\n}\n\nfn main() {\n\
    \    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1,\
    \ -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpu1ccl8mq.rs:12:39

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822472
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    if nums.len() <= 1 {\n        return nums;\n    }\n    let\
    \ mut nums = nums;\n    let length = nums.len();\n    for i in 0..length {\n \
    \       for j in 0..length - i - 1 {\n            if digits_sum(&nums[j]) > digits_sum(&nums[j\
    \ + 1]) {\n                nums.swap(j, j + 1);\n            }\n        }\n  \
    \  }\n    nums\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `digits_sum` in this scope\n  --> /tmp/tmpxhgwd9p7.rs:14:16\n\
    \   |\n14 |             if digits_sum(&nums[j]) > digits_sum(&nums[j + 1]) {\n\
    \   |                ^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find function `digits_sum` in this scope\n  --> /tmp/tmpxhgwd9p7.rs:14:39\n\
    \   |\n14 |             if digits_sum(&nums[j]) > digits_sum(&nums[j + 1]) {\n\
    \   |                                       ^^^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822472
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    // let mut nums_map = HashMap::new();\n    // for (k, v) in\
    \ nums.iter().enumerate() {\n    //     let sum_digits = v.to_string().chars().map(|x|\
    \ x.to_digit(10).unwrap()).sum::<u32>();\n    //     nums_map.insert(k, sum_digits);\n\
    \    // }\n    // let mut nums_vec: Vec<_> = nums_map.iter().collect();\n    //\
    \ nums_vec.sort_by(|a, b| a.1.cmp(b.1));\n    // let mut res = vec![];\n    //\
    \ for x in nums_vec {\n    //     res.push(nums[*x.0]);\n    // }\n    // res\n\
    \    nums.into_iter().enumerate().map(|(k, v)| (k, v.to_string().chars().map(|x|\
    \ x.to_digit(10).unwrap()).sum::<u32>())).collect::<Vec<_>>().sort_by(|a, b| a.1.cmp(&b.1)).into_iter().map(|x|\
    \ nums[x.0]).collect()\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `into_iter` exists for unit type `()`, but its\
    \ trait bounds were not satisfied\n  --> /tmp/tmpjlxur6qq.rs:19:171\n   |\n19\
    \ | ...sort_by(|a, b| a.1.cmp(&b.1)).into_iter().map(|x| nums[x.0]).collect()\n\
    \   |                                  ^^^^^^^^^ method cannot be called on `()`\
    \ due to unsatisfied trait bounds\n   |\n   = note: the following trait bounds\
    \ were not satisfied:\n           `(): Iterator`\n           which is required\
    \ by `(): IntoIterator`\n           `&(): Iterator`\n           which is required\
    \ by `&(): IntoIterator`\n           `&mut (): Iterator`\n           which is\
    \ required by `&mut (): IntoIterator`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659822472
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    nums.into_iter().enumerate().map(|(idx, n)| (idx, n, n.to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap() as isize).sum())).sorted_by(|(_, _, a), (_, _, b)| a.cmp(b)).map(|(_,\
    \ n, _)| n).collect()\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted_by` found for struct `Map` in the\
    \ current scope\n --> /tmp/tmpv7_m92yp.rs:7:130\n  |\n7 | ....sum())).sorted_by(|(_,\
    \ _, a), (_, _, b)| a.cmp(b)).map(|(_, n, _)| n).collect()\n  |             ^^^^^^^^^\
    \ method not found in `Map<Enumerate<std::vec::IntoIter<isize>>, [closure@/tmp/tmpv7_m92yp.rs:7:38:\
    \ 7:128]>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659822472
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = nums.clone();\n    result.sort_by(|a, b|\
    \ {\n        let a_sum = sum_digits(*a);\n        let b_sum = sum_digits(*b);\n\
    \        a_sum.cmp(&b_sum)\n    });\n    result\n}\n\nfn main() {\n    let candidate\
    \ = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `sum_digits` in this scope\n --> /tmp/tmpywb7u_dj.rs:9:21\n\
    \  |\n9 |         let a_sum = sum_digits(*a);\n  |                     ^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find function `sum_digits` in\
    \ this scope\n  --> /tmp/tmpywb7u_dj.rs:10:21\n   |\n10 |         let b_sum =\
    \ sum_digits(*b);\n   |                     ^^^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822472
- exit_code: 101
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut v = Vec::new();\n    for i in nums {\n        let\
    \ x = i.to_string();\n        let y = x.chars().filter_map(|c| c.to_digit(10)).sum::<u32>();\n\
    \        v.push((i, y));\n    }\n    v.sort_by(|a, b| a.1.cmp(&b.1));\n    let\
    \ mut k = Vec::new();\n    for i in v {\n        k.push(i.0);\n    }\n    k\n\
    }\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, -1, 11, -11, -12]`,\n right: `[-1, -11, 1, -12, 11]`', /tmp/tmpsesh0e_w.rs:23:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822472
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut sum_digits: Vec<(isize, isize)> = nums.iter().map(|n|\
    \ (*n, sum_digits(*n))).collect();\n    sum_digits.sort_by(|a, b| a.1.cmp(&b.1));\n\
    \    sum_digits.iter().map(|x| x.0).collect()\n}\n\nfn main() {\n    let candidate\
    \ = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `sum_digits` in this scope\n --> /tmp/tmpm1wn1f9m.rs:7:72\n\
    \  |\n7 |     let mut sum_digits: Vec<(isize, isize)> = nums.iter().map(|n| (*n,\
    \ sum_digits(*n))).collect();\n  |                                           \
    \                             ^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659822472
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    // let sum = |n: &isize| n.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \    let sum = |n: &isize| n.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n\
    \    let mut nums = nums;\n    nums.sort_by_key(|n| (sum(n), n));\n    nums\n\
    }\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error: lifetime may not live long enough\n  --> /tmp/tmpp4l2w506.rs:10:26\n\
    \   |\n10 |     nums.sort_by_key(|n| (sum(n), n));\n   |                     \
    \  -- ^^^^^^^^^^^ returning this value requires that `'1` must outlive `'2`\n\
    \   |                       ||\n   |                       |return type of closure\
    \ is (u32, &'2 isize)\n   |                       has type `&'1 isize`\n\nerror:\
    \ aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1659822472
- exit_code: 101
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpibftsb8b.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822472
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums = nums;\n    nums.sort_by(|a, b| {\n        let\
    \ (sa, sb) = (sum_digits(*a), sum_digits(*b));\n        if sa == sb {\n      \
    \      a.cmp(b)\n        } else {\n            sa.cmp(&sb)\n        }\n    });\n\
    \    nums\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `sum_digits` in this scope\n --> /tmp/tmpg6md75hr.rs:9:25\n\
    \  |\n9 |         let (sa, sb) = (sum_digits(*a), sum_digits(*b));\n  |      \
    \                   ^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find function `sum_digits` in this scope\n --> /tmp/tmpg6md75hr.rs:9:41\n  |\n\
    9 |         let (sa, sb) = (sum_digits(*a), sum_digits(*b));\n  |            \
    \                             ^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822472
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let sum_digits = |x: &isize| {\n        let mut n = *x;\n\
    \        let mut sum = 0;\n        while n > 0 {\n            sum += n % 10;\n\
    \            n /= 10;\n        }\n        sum\n    };\n    nums.iter()\n     \
    \   .enumerate()\n        .map(|(idx, val)| (idx, val, sum_digits(val)))\n   \
    \     .sorted_by(|(_, _, score_a), (_, _, score_b)| score_a.cmp(score_b))\n  \
    \      .into_iter()\n        .map(|(_, val, _)| *val)\n        .collect()\n}\n\
    \nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted_by` found for struct `Map` in the\
    \ current scope\n  --> /tmp/tmpe4fl0awm.rs:19:10\n   |\n19 |         .sorted_by(|(_,\
    \ _, score_a), (_, _, score_b)| score_a.cmp(score_b))\n   |          ^^^^^^^^^\
    \ method not found in `Map<Enumerate<std::slice::Iter<'_, isize>>, [closure@/tmp/tmpe4fl0awm.rs:18:14:\
    \ 18:54]>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659822472
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    nums.iter()\n        .enumerate()\n        .map(|(i, &v)|\
    \ (v, sum_digits(v), i))\n        .sorted_by(|a, b| (a.1, a.2).cmp(&(b.1, b.2)))\n\
    \        .into_iter()\n        .map(|(v, _, _)| v)\n        .collect()\n}\n\n\
    fn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `sum_digits` in this scope\n --> /tmp/tmp330zi406.rs:9:28\n\
    \  |\n9 |         .map(|(i, &v)| (v, sum_digits(v), i))\n  |                 \
    \           ^^^^^^^^^^ not found in this scope\n\nerror[E0599]: no method named\
    \ `sorted_by` found for struct `Map` in the current scope\n  --> /tmp/tmp330zi406.rs:10:10\n\
    \   |\n10 |         .sorted_by(|a, b| (a.1, a.2).cmp(&(b.1, b.2)))\n   |     \
    \     ^^^^^^^^^ method not found in `Map<Enumerate<std::slice::Iter<'_, isize>>,\
    \ _>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0425, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822472
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    nums.iter()\n        .enumerate()\n        .map(|(i, &x)|\
    \ (i, x, sum_digits(x)))\n        .sorted_by(|(_, _, a), (_, _, b)| b.cmp(a))\n\
    \        .map(|(_, x, _)| x)\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `sum_digits` in this scope\n --> /tmp/tmp204pd3xr.rs:9:31\n\
    \  |\n9 |         .map(|(i, &x)| (i, x, sum_digits(x)))\n  |                 \
    \              ^^^^^^^^^^ not found in this scope\n\nerror[E0599]: no method named\
    \ `sorted_by` found for struct `Map` in the current scope\n  --> /tmp/tmp204pd3xr.rs:10:10\n\
    \   |\n10 |         .sorted_by(|(_, _, a), (_, _, b)| b.cmp(a))\n   |        \
    \  ^^^^^^^^^ method not found in `Map<Enumerate<std::slice::Iter<'_, isize>>,\
    \ _>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0425, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822472
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = Vec::new();\n    let mut buf: HashMap<isize,\
    \ isize> = HashMap::new();\n    for (index, value) in nums.iter().enumerate()\
    \ {\n        let mut sum = 0;\n        let mut num = *value;\n        while num\
    \ > 0 {\n            sum += num % 10;\n            num /= 10;\n        }\n   \
    \     buf.insert(sum, index as isize);\n    }\n    let mut keys: Vec<isize> =\
    \ buf.keys().map(|x| *x).collect();\n    keys.sort();\n    for key in keys {\n\
    \        result.push(nums[buf[&key] as usize]);\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11,\
    \ -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashMap` in this scope\n --> /tmp/tmpxdglw_nc.rs:8:18\n\
    \  |\n8 |     let mut buf: HashMap<isize, isize> = HashMap::new();\n  |      \
    \            ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this\
    \ struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpxdglw_nc.rs:8:42\n\
    \  |\n8 |     let mut buf: HashMap<isize, isize> = HashMap::new();\n  |      \
    \                                    ^^^^^^^ not found in this scope\n  |\nhelp:\
    \ consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0412, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659822472
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    nums.into_iter().enumerate().map(|(i, v)| (v, sum_digits(v\
    \ as isize), i)).collect::<Vec<(isize, isize, usize)>>().sort_by(|a, b| a.1.cmp(&b.1).then(a.2.cmp(&b.2))).into_iter().map(|(v,\
    \ _, _)| v).collect()\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `sum_digits` in this scope\n --> /tmp/tmp0e6upbdk.rs:7:51\n\
    \  |\n7 |     nums.into_iter().enumerate().map(|(i, v)| (v, sum_digits(v as isize),\
    \ i)).collect::<Vec<(isize, isize, usize)>>().sort_by(|a, b| a.1....\n  |    \
    \                                               ^^^^^^^^^^ not found in this scope\n\
    \nerror[E0599]: the method `into_iter` exists for unit type `()`, but its trait\
    \ bounds were not satisfied\n --> /tmp/tmp0e6upbdk.rs:7:169\n  |\n7 | ...mp(&b.1).then(a.2.cmp(&b.2))).into_iter().map(|(v,\
    \ _, _)| v).collect()\n  |                                  ^^^^^^^^^ method cannot\
    \ be called on `()` due to unsatisfied trait bounds\n  |\n  = note: the following\
    \ trait bounds were not satisfied:\n          `(): Iterator`\n          which\
    \ is required by `(): IntoIterator`\n          `&(): Iterator`\n          which\
    \ is required by `&(): IntoIterator`\n          `&mut (): Iterator`\n        \
    \  which is required by `&mut (): IntoIterator`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822472
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    nums.iter()\n        .enumerate()\n        .map(|(i, v)| (v,\
    \ i))\n        .collect::<Vec<_>>()\n        .sort_by(|(v1, _), (v2, _)| v1.cmp(v2))\n\
    \        .iter()\n        .map(|(v, _)| v)\n        .cloned()\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `iter` found for unit type `()` in the current\
    \ scope\n  --> /tmp/tmpugekudfd.rs:12:10\n   |\n12 |         .iter()\n   |   \
    \       ^^^^ method not found in `()`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659822472
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    nums.iter()\n        .enumerate()\n        .map(|(i, val)|\
    \ (val, sum_digits(*val), i))\n        .sorted_by(|a, b| a.1.cmp(&b.1).then(a.2.cmp(&b.2)))\n\
    \        .map(|(val, _, _)| *val)\n        .collect()\n}\n\nfn main() {\n    let\
    \ candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11,\
    \ -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `sum_digits` in this scope\n --> /tmp/tmp9f2w48en.rs:9:31\n\
    \  |\n9 |         .map(|(i, val)| (val, sum_digits(*val), i))\n  |           \
    \                    ^^^^^^^^^^ not found in this scope\n\nerror[E0599]: no method\
    \ named `sorted_by` found for struct `Map` in the current scope\n  --> /tmp/tmp9f2w48en.rs:10:10\n\
    \   |\n10 |         .sorted_by(|a, b| a.1.cmp(&b.1).then(a.2.cmp(&b.2)))\n   |\
    \          ^^^^^^^^^ method not found in `Map<Enumerate<std::slice::Iter<'_, isize>>,\
    \ _>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0425, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822472
- exit_code: 101
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_with_points: Vec<(isize, usize)> = Vec::new();\n\
    \    for (idx, x) in nums.iter().enumerate() {\n        let digits: Vec<char>\
    \ = x.to_string().chars().collect();\n        let mut points = 0;\n        for\
    \ digit in digits {\n            let digit_value = digit.to_digit(10).unwrap();\n\
    \            points += digit_value as usize;\n        }\n        nums_with_points.push((*x,\
    \ points));\n    }\n    nums_with_points.sort_by(|a, b| a.1.cmp(&b.1));\n    let\
    \ mut result: Vec<isize> = Vec::new();\n    for (x, _) in nums_with_points {\n\
    \        result.push(x);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpwr3n5uji.rs:12:50

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822473
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut pairs: Vec<(isize, isize)> = nums.iter().map(|&n|\
    \ (n, num_sum(n))).collect();\n    pairs.sort_by(|&(a, _), &(b, _)| a.cmp(&b));\n\
    \    pairs.into_iter().map(|(a, _)| a).collect()\n}\n\nfn main() {\n    let candidate\
    \ = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `num_sum` in this scope\n --> /tmp/tmphdd_t0b_.rs:7:67\n\
    \  |\n7 |     let mut pairs: Vec<(isize, isize)> = nums.iter().map(|&n| (n, num_sum(n))).collect();\n\
    \  |                                                                   ^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822472
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut v: Vec<(isize, usize)> = nums.iter().enumerate().map(|(i,\
    \ n)| (n, i)).collect();\n    v.sort_by(|(a, _), (b, _)| {\n        let a: String\
    \ = a.to_string();\n        let b: String = b.to_string();\n        let (a, b)\
    \ = (a.chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>(),\n              \
    \        b.chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>());\n        a.cmp(&b)\n\
    \    });\n    v.iter().map(|(n, _)| *n).collect()\n}\n\nfn main() {\n    let candidate\
    \ = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<(isize, usize)>` cannot be built from\
    \ an iterator over elements of type `(&isize, usize)`\n --> /tmp/tmpivue03lr.rs:7:83\n\
    \  |\n7 |     let mut v: Vec<(isize, usize)> = nums.iter().enumerate().map(|(i,\
    \ n)| (n, i)).collect();\n  |                                                \
    \                                   ^^^^^^^ value of type `Vec<(isize, usize)>`\
    \ cannot be built from `std::iter::Iterator<Item=(&isize, usize)>`\n  |\n  = help:\
    \ the trait `FromIterator<(&isize, usize)>` is not implemented for `Vec<(isize,\
    \ usize)>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659822472
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums = nums;\n    nums.sort_by(|a, b| a.to_string().chars().sum::<u32>().cmp(&b.to_string().chars().sum::<u32>()));\n\
    \    nums\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `u32: Sum<char>` is not satisfied\n --> /tmp/tmpcam_1rsb.rs:8:47\n\
    \  |\n8 |     nums.sort_by(|a, b| a.to_string().chars().sum::<u32>().cmp(&b.to_string().chars().sum::<u32>()));\n\
    \  |                                               ^^^ the trait `Sum<char>` is\
    \ not implemented for `u32`\n  |\n  = help: the following implementations were\
    \ found:\n            <u32 as Sum<&'a u32>>\n            <u32 as Sum>\n\nerror[E0277]:\
    \ the trait bound `u32: Sum<char>` is not satisfied\n --> /tmp/tmpcam_1rsb.rs:8:87\n\
    \  |\n8 |     nums.sort_by(|a, b| a.to_string().chars().sum::<u32>().cmp(&b.to_string().chars().sum::<u32>()));\n\
    \  |                                                                         \
    \              ^^^ the trait `Sum<char>` is not implemented for `u32`\n  |\n \
    \ = help: the following implementations were found:\n            <u32 as Sum<&'a\
    \ u32>>\n            <u32 as Sum>\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659822472
- exit_code: 101
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut digit_sum_vec: Vec<(isize, usize)> = nums\n      \
    \  .iter()\n        .enumerate()\n        .map(|(i, x)| (x.to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap() as isize).sum(), i))\n        .collect();\n    digit_sum_vec.sort_by(|a,\
    \ b| a.0.cmp(&b.0));\n    digit_sum_vec.iter().map(|a| nums[a.1]).collect()\n\
    }\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmptu86a1px.rs:10:69

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822473
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums = nums;\n    nums.sort_by(|a, b| {\n        let\
    \ a_val = order_by_points_value(*a);\n        let b_val = order_by_points_value(*b);\n\
    \        a_val.cmp(&b_val)\n    });\n    nums\n}\n\nfn main() {\n    let candidate\
    \ = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `order_by_points_value` in this scope\n\
    \ --> /tmp/tmppytjedpv.rs:9:21\n  |\n9 |         let a_val = order_by_points_value(*a);\n\
    \  |                     ^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `order_by_points_value` in this scope\n  --> /tmp/tmppytjedpv.rs:10:21\n\
    \   |\n10 |         let b_val = order_by_points_value(*b);\n   |             \
    \        ^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659822472
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    nums.iter()\n        .enumerate()\n        .map(|(i, n)| (sum_of_digits(*n),\
    \ i, *n))\n        .sorted_by(|a, b| a.0.cmp(&b.0).then(a.1.cmp(&b.1)))\n    \
    \    .into_iter()\n        .map(|(_, _, n)| n)\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11,\
    \ -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `sum_of_digits` in this scope\n -->\
    \ /tmp/tmpulxad7dn.rs:9:24\n  |\n9 |         .map(|(i, n)| (sum_of_digits(*n),\
    \ i, *n))\n  |                        ^^^^^^^^^^^^^ not found in this scope\n\n\
    error[E0599]: no method named `sorted_by` found for struct `Map` in the current\
    \ scope\n  --> /tmp/tmpulxad7dn.rs:10:10\n   |\n10 |         .sorted_by(|a, b|\
    \ a.0.cmp(&b.0).then(a.1.cmp(&b.1)))\n   |          ^^^^^^^^^ method not found\
    \ in `Map<Enumerate<std::slice::Iter<'_, isize>>, _>`\n\nerror: aborting due to\
    \ 2 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\n\
    For more information about an error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822472
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut m = nums.iter().enumerate().map(|(i, &n)| (i, n, digit_sum(n))).collect::<Vec<_>>();\n\
    \    m.sort_by(|a, b| a.2.cmp(&b.2).then(a.0.cmp(&b.0)));\n    m.iter().map(|&(_,\
    \ n, _)| n).collect()\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `digit_sum` in this scope\n --> /tmp/tmptgpykzpy.rs:7:62\n\
    \  |\n7 |     let mut m = nums.iter().enumerate().map(|(i, &n)| (i, n, digit_sum(n))).collect::<Vec<_>>();\n\
    \  |                                                              ^^^^^^^^^ not\
    \ found in this scope\n\nerror[E0609]: no field `2` on type `&_`\n --> /tmp/tmptgpykzpy.rs:8:24\n\
    \  |\n8 |     m.sort_by(|a, b| a.2.cmp(&b.2).then(a.0.cmp(&b.0)));\n  |      \
    \                  ^\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0425, E0609.\nFor more information about an error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822472
- exit_code: 101
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpibftsb8b.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822472
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums = nums;\n    nums.sort_by(|a, b| a.abs().to_string().chars().sum::<u32>().cmp(&b.abs().to_string().chars().sum::<u32>()));\n\
    \    nums\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `u32: Sum<char>` is not satisfied\n --> /tmp/tmpi_4v09a5.rs:8:53\n\
    \  |\n8 |     nums.sort_by(|a, b| a.abs().to_string().chars().sum::<u32>().cmp(&b.abs().to_string().chars().sum::<u32>()));\n\
    \  |                                                     ^^^ the trait `Sum<char>`\
    \ is not implemented for `u32`\n  |\n  = help: the following implementations were\
    \ found:\n            <u32 as Sum<&'a u32>>\n            <u32 as Sum>\n\nerror[E0277]:\
    \ the trait bound `u32: Sum<char>` is not satisfied\n --> /tmp/tmpi_4v09a5.rs:8:99\n\
    \  |\n8 |     nums.sort_by(|a, b| a.abs().to_string().chars().sum::<u32>().cmp(&b.abs().to_string().chars().sum::<u32>()));\n\
    \  |                                                                         \
    \                          ^^^ the trait `Sum<char>` is not implemented for `u32`\n\
    \  |\n  = help: the following implementations were found:\n            <u32 as\
    \ Sum<&'a u32>>\n            <u32 as Sum>\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659822472
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    nums.iter()\n        .enumerate()\n        .map(|(i, &x)|\
    \ (x, i))\n        .map(|(x, i)| (x, sum_digits(x), i))\n        .sorted_by(|a,\
    \ b| {\n            let (a, a_sum, a_i) = a;\n            let (b, b_sum, b_i)\
    \ = b;\n            a_sum.cmp(&b_sum).then(a_i.cmp(&b_i))\n        })\n      \
    \  .map(|(x, _, _)| x)\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `sum_digits` in this scope\n  --> /tmp/tmp9utsycoa.rs:10:27\n\
    \   |\n10 |         .map(|(x, i)| (x, sum_digits(x), i))\n   |               \
    \            ^^^^^^^^^^ not found in this scope\n\nerror[E0599]: no method named\
    \ `sorted_by` found for struct `Map` in the current scope\n  --> /tmp/tmp9utsycoa.rs:11:10\n\
    \   |\n11 |         .sorted_by(|a, b| {\n   |          ^^^^^^^^^ method not found\
    \ in `Map<Map<Enumerate<std::slice::Iter<'_, isize>>, [closure@/tmp/tmp9utsycoa.rs:9:14:\
    \ 9:30]>, _>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0425, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822472
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut points = nums.iter().map(|&x| (x, digits_sum(x))).collect::<Vec<_>>();\n\
    \    points.sort_by(|a, b| match a.1.cmp(&b.1) {\n        std::cmp::Ordering::Equal\
    \ => a.0.cmp(&b.0),\n        a => a,\n    });\n    points.iter().map(|&x| x.0).collect()\n\
    }\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `digits_sum` in this scope\n --> /tmp/tmpjx_bl34r.rs:7:47\n\
    \  |\n7 |     let mut points = nums.iter().map(|&x| (x, digits_sum(x))).collect::<Vec<_>>();\n\
    \  |                                               ^^^^^^^^^^ not found in this\
    \ scope\n\nerror[E0609]: no field `1` on type `&_`\n --> /tmp/tmpjx_bl34r.rs:8:35\n\
    \  |\n8 |     points.sort_by(|a, b| match a.1.cmp(&b.1) {\n  |               \
    \                    ^\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0425, E0609.\nFor more information about an error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822473
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut new_nums = vec![];\n    for i in nums {\n        new_nums.push((split_sum(i),\
    \ i));\n    }\n    new_nums.sort();\n    let mut result = vec![];\n    for (_,\
    \ i) in new_nums {\n        result.push(i);\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11,\
    \ -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `split_sum` in this scope\n --> /tmp/tmp_pj36qbs.rs:9:24\n\
    \  |\n9 |         new_nums.push((split_sum(i), i));\n  |                     \
    \   ^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822472
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    nums.iter()\n        .enumerate()\n        .map(|(idx, n)|\
    \ (idx, n, n.to_string().as_bytes().iter().fold(0, |acc, x| acc + (x - '0' as\
    \ u8) as isize)))\n        .sorted_by(|(_, _, p1), (_, _, p2)| p1.cmp(p2))\n \
    \       .map(|(_, n, _)| *n)\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted_by` found for struct `Map` in the\
    \ current scope\n  --> /tmp/tmpyv6xdpar.rs:10:10\n   |\n10 |         .sorted_by(|(_,\
    \ _, p1), (_, _, p2)| p1.cmp(p2))\n   |          ^^^^^^^^^ method not found in\
    \ `Map<Enumerate<std::slice::Iter<'_, isize>>, [closure@/tmp/tmpyv6xdpar.rs:9:14:\
    \ 9:115]>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659822473
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    fn sum_of_digits(num: isize) -> isize {\n        let mut sum\
    \ = 0;\n        let mut m = num;\n        while m > 0 {\n            sum += m\
    \ % 10;\n            m /= 10;\n        }\n        sum\n    }\n\n    fn sum_of_digits_desc(lhs:\
    \ &isize, rhs: &isize) -> Ordering {\n        let (lhs_sum, rhs_sum) = (sum_of_digits(*lhs),\
    \ sum_of_digits(*rhs));\n        lhs_sum.cmp(&rhs_sum).reverse()\n    }\n\n  \
    \  nums.into_iter().sorted_by(sum_of_digits_desc).collect()\n}\n\nfn main() {\n\
    \    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1,\
    \ -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `Ordering` in this scope\n  --> /tmp/tmpk30g_8vv.rs:17:56\n\
    \   |\n17 |     fn sum_of_digits_desc(lhs: &isize, rhs: &isize) -> Ordering {\n\
    \   |                                                        ^^^^^^^^ not found\
    \ in this scope\n   |\nhelp: consider importing one of these items\n   |\n1  |\
    \ use std::cmp::Ordering;\n   |\n1  | use std::sync::atomic::Ordering;\n   |\n\
    \nerror[E0599]: no method named `sorted_by` found for struct `std::vec::IntoIter`\
    \ in the current scope\n  --> /tmp/tmpk30g_8vv.rs:22:22\n   |\n22 |     nums.into_iter().sorted_by(sum_of_digits_desc).collect()\n\
    \   |                      ^^^^^^^^^ method not found in `std::vec::IntoIter<isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0412, E0599.\nFor more information about an error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659822473
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums: Vec<isize> = nums;\n    nums.sort_by(|a, b|\
    \ {\n        let a_sum = digit_sum(*a);\n        let b_sum = digit_sum(*b);\n\
    \        if a_sum == b_sum {\n            a.cmp(b)\n        } else {\n       \
    \     a_sum.cmp(&b_sum)\n        }\n    });\n    nums\n}\n\nfn main() {\n    let\
    \ candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11,\
    \ -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `digit_sum` in this scope\n --> /tmp/tmp9vudb47e.rs:9:21\n\
    \  |\n9 |         let a_sum = digit_sum(*a);\n  |                     ^^^^^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find function `digit_sum` in\
    \ this scope\n  --> /tmp/tmp9vudb47e.rs:10:21\n   |\n10 |         let b_sum =\
    \ digit_sum(*b);\n   |                     ^^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822472
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    // Result: {0, 10, 1, 7, 8, 9, 2, 6, 5, 3, 4}\n    // Input:\
    \ {10, 7, 2, 8, 3, 9, 0, 6, 4, 5, 1}\n    let sums: Vec<isize> = nums.iter().map(|x|\
    \ x.to_string().chars().map(|x| x.to_digit(10).unwrap() as isize).sum()).collect();\n\
    \    //    let mut nums: Vec<isize> = nums.clone();\n    nums.sort_by(|a, b| sums[*a\
    \ as usize].cmp(&sums[*b as usize]));\n    nums\n}\n\nfn main() {\n    let candidate\
    \ = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0596]: cannot borrow `nums` as mutable, as it is not declared as\
    \ mutable\n  --> /tmp/tmp_b_7o1id.rs:11:5\n   |\n6  | fn order_by_points(nums:\
    \ Vec<isize>) -> Vec<isize> {\n   |                    ---- help: consider changing\
    \ this to be mutable: `mut nums`\n...\n11 |     nums.sort_by(|a, b| sums[*a as\
    \ usize].cmp(&sums[*b as usize]));\n   |     ^^^^ cannot borrow as mutable\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0596`.\n"
  stdout: ''
  timestamp: 1659822473
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut s = Vec::new();\n    let mut i = 0;\n    for n in\
    \ nums {\n        s.push((n, i, digits_sum(n)));\n        i += 1;\n    }\n   \
    \ s.sort_by(|a, b| {\n        match a.2.cmp(&b.2) {\n            Ordering::Equal\
    \ => a.1.cmp(&b.1),\n            r => r,\n        }\n    });\n    s.iter().map(|t|\
    \ t.0).collect()\n}\n\nfn main() {\n    let candidate = order_by_points;\n   \
    \ assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Ordering`\n  -->\
    \ /tmp/tmpp_39trfm.rs:15:13\n   |\n15 |             Ordering::Equal => a.1.cmp(&b.1),\n\
    \   |             ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0425]:\
    \ cannot find function `digits_sum` in this scope\n  --> /tmp/tmpp_39trfm.rs:10:23\n\
    \   |\n10 |         s.push((n, i, digits_sum(n)));\n   |                     \
    \  ^^^^^^^^^^ not found in this scope\n\nerror[E0609]: no field `2` on type `&_`\n\
    \  --> /tmp/tmpp_39trfm.rs:14:17\n   |\n14 |         match a.2.cmp(&b.2) {\n \
    \  |                 ^\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0425, E0433, E0609.\nFor more information about\
    \ an error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822473
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    nums.iter()\n        .enumerate()\n        .map(|(i, x)| (x,\
    \ x.abs() as isize % 10 + x.abs() / 10 as isize % 10))\n        .sorted_by(|(_,\
    \ a), (_, b)| a.cmp(b))\n        .map(|(x, _)| *x)\n        .collect()\n}\n\n\
    fn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted_by` found for struct `Map` in the\
    \ current scope\n  --> /tmp/tmpde_8iexr.rs:10:10\n   |\n10 |         .sorted_by(|(_,\
    \ a), (_, b)| a.cmp(b))\n   |          ^^^^^^^^^ method not found in `Map<Enumerate<std::slice::Iter<'_,\
    \ isize>>, [closure@/tmp/tmpde_8iexr.rs:9:14: 9:78]>`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659822473
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    nums.into_iter().enumerate().sorted_by(|(_, a), (_, b)| a.cmp(b)).map(|(_,\
    \ x)| x).collect()\n}\n\nfn main() {\n    let candidate = order_by_points;\n \
    \   assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted_by` found for struct `Enumerate`\
    \ in the current scope\n --> /tmp/tmpzq79gv_1.rs:7:34\n  |\n7 |     nums.into_iter().enumerate().sorted_by(|(_,\
    \ a), (_, b)| a.cmp(b)).map(|(_, x)| x).collect()\n  |                       \
    \           ^^^^^^^^^ method not found in `Enumerate<std::vec::IntoIter<isize>>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659822473
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    nums.iter()\n        .enumerate()\n        .map(|(i, n)| (n,\
    \ (n % 10 + n / 10) as usize, i))\n        .sorted_by(|a, b| (a.1, a.2).cmp(&(b.1,\
    \ b.2)))\n        .map(|(n, _, _)| *n)\n        .collect()\n}\n\nfn main() {\n\
    \    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1,\
    \ -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted_by` found for struct `Map` in the\
    \ current scope\n  --> /tmp/tmpsxd_i9j9.rs:10:10\n   |\n10 |         .sorted_by(|a,\
    \ b| (a.1, a.2).cmp(&(b.1, b.2)))\n   |          ^^^^^^^^^ method not found in\
    \ `Map<Enumerate<std::slice::Iter<'_, isize>>, [closure@/tmp/tmpsxd_i9j9.rs:9:14:\
    \ 9:57]>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659822473
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    nums.into_iter().enumerate().map(|(i, n)| (i, n, n.to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap() as usize).sum::<usize>())).collect::<Vec<_>>().sort_by(|a,\
    \ b| if a.2 == b.2 { a.0.cmp(&b.0) } else { a.2.cmp(&b.2) }).into_iter().map(|(_,\
    \ n, _)| n).collect::<Vec<_>>()\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `into_iter` exists for unit type `()`, but its\
    \ trait bounds were not satisfied\n --> /tmp/tmpdf0uz1er.rs:7:226\n  |\n7 | ....0)\
    \ } else { a.2.cmp(&b.2) }).into_iter().map(|(_, n, _)| n).collect::<Vec<_>>()\n\
    \  |                                  ^^^^^^^^^ method cannot be called on `()`\
    \ due to unsatisfied trait bounds\n  |\n  = note: the following trait bounds were\
    \ not satisfied:\n          `(): Iterator`\n          which is required by `():\
    \ IntoIterator`\n          `&(): Iterator`\n          which is required by `&():\
    \ IntoIterator`\n          `&mut (): Iterator`\n          which is required by\
    \ `&mut (): IntoIterator`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659822473
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    // let mut new_vec = Vec::new();\n    // for num in nums {\n\
    \    //     new_vec.push(num)\n    // }\n    // new_vec.sort_by(|a, b| a.to_string().chars().sum::<i32>().cmp(&b.to_string().chars().sum::<i32>()));\n\
    \    // new_vec\n    nums.sort_by(|a, b| {\n        a.to_string().chars().sum::<i32>().cmp(&b.to_string().chars().sum::<i32>())\n\
    \    });\n    nums\n}\n\nfn main() {\n    let candidate = order_by_points;\n \
    \   assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `i32: Sum<char>` is not satisfied\n  -->\
    \ /tmp/tmp4hgol39b.rs:14:31\n   |\n14 |         a.to_string().chars().sum::<i32>().cmp(&b.to_string().chars().sum::<i32>())\n\
    \   |                               ^^^ the trait `Sum<char>` is not implemented\
    \ for `i32`\n   |\n   = help: the following implementations were found:\n    \
    \         <i32 as Sum<&'a i32>>\n             <i32 as Sum>\n\nerror[E0277]: the\
    \ trait bound `i32: Sum<char>` is not satisfied\n  --> /tmp/tmp4hgol39b.rs:14:71\n\
    \   |\n14 |         a.to_string().chars().sum::<i32>().cmp(&b.to_string().chars().sum::<i32>())\n\
    \   |                                                                       ^^^\
    \ the trait `Sum<char>` is not implemented for `i32`\n   |\n   = help: the following\
    \ implementations were found:\n             <i32 as Sum<&'a i32>>\n          \
    \   <i32 as Sum>\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659822473
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    use std::collections::HashMap;\n    let mut points: HashMap<isize,\
    \ isize> = HashMap::new();\n    let mut result: Vec<isize> = vec![];\n    for\
    \ num in nums {\n        let mut sum = 0;\n        let mut n = num;\n        while\
    \ n > 0 {\n            sum += n % 10;\n            n /= 10;\n        }\n     \
    \   if points.contains_key(&sum) {\n            points.insert(sum, -1);\n    \
    \    } else {\n            points.insert(sum, num);\n        }\n    }\n    for\
    \ i in 0..nums.len() {\n        if let Some(num) = points.get(&(i as isize)) {\n\
    \            if *num != -1 {\n                result.push(*num);\n           \
    \ }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `nums`\n   --> /tmp/tmp74m96iiv.rs:23:17\n\
    \    |\n6   | fn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    |    \
    \                ---- move occurs because `nums` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n10  |     for num in nums {\n    |\
    \                ----\n    |                |\n    |                `nums` moved\
    \ due to this implicit call to `.into_iter()`\n    |                help: consider\
    \ borrowing to avoid moving into the for loop: `&nums`\n...\n23  |     for i in\
    \ 0..nums.len() {\n    |                 ^^^^ value borrowed here after move\n\
    \    |\nnote: this function takes ownership of the receiver `self`, which moves\
    \ `nums`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659822473
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    // TODO\n    let mut res = nums.clone();\n    res.sort_by(|x,\
    \ y| {\n        let x_sum = sum_digits(*x);\n        let y_sum = sum_digits(*y);\n\
    \        if x_sum < y_sum {\n            Ordering::Less\n        } else if x_sum\
    \ > y_sum {\n            Ordering::Greater\n        } else {\n            Ordering::Equal\n\
    \        }\n    });\n    res\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Ordering`\n  -->\
    \ /tmp/tmpu4y6b33h.rs:13:13\n   |\n13 |             Ordering::Less\n   |     \
    \        ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0433]: failed to\
    \ resolve: use of undeclared type `Ordering`\n  --> /tmp/tmpu4y6b33h.rs:15:13\n\
    \   |\n15 |             Ordering::Greater\n   |             ^^^^^^^^ use of undeclared\
    \ type `Ordering`\n\nerror[E0433]: failed to resolve: use of undeclared type `Ordering`\n\
    \  --> /tmp/tmpu4y6b33h.rs:17:13\n   |\n17 |             Ordering::Equal\n   |\
    \             ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0425]: cannot\
    \ find function `sum_digits` in this scope\n  --> /tmp/tmpu4y6b33h.rs:10:21\n\
    \   |\n10 |         let x_sum = sum_digits(*x);\n   |                     ^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find function `sum_digits` in\
    \ this scope\n  --> /tmp/tmpu4y6b33h.rs:11:21\n   |\n11 |         let y_sum =\
    \ sum_digits(*y);\n   |                     ^^^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations:\
    \ E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822473
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut ret = Vec::with_capacity(nums.len());\n    let mut\
    \ sorted = nums.clone();\n    sorted.sort_by(|a, b| sum_digits(*a).cmp(&sum_digits(*b)));\n\
    \    for i in sorted {\n        ret.push(nums.iter().position(|x| x == &i).unwrap()\
    \ as isize)\n    }\n    ret\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `sum_digits` in this scope\n --> /tmp/tmp06hpy4fp.rs:9:27\n\
    \  |\n9 |     sorted.sort_by(|a, b| sum_digits(*a).cmp(&sum_digits(*b)));\n  |\
    \                           ^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `sum_digits` in this scope\n --> /tmp/tmp06hpy4fp.rs:9:47\n\
    \  |\n9 |     sorted.sort_by(|a, b| sum_digits(*a).cmp(&sum_digits(*b)));\n  |\
    \                                               ^^^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822473
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    nums.iter()\n        .enumerate()\n        .map(|(index, &value)|\
    \ (index, digit_sum(value), value))\n        .sorted_by(|(index1, points1, _),\
    \ (index2, points2, _)| {\n            match points1.cmp(points2) {\n        \
    \        std::cmp::Ordering::Equal => index1.cmp(index2),\n                other\
    \ => other,\n            }\n        })\n        .map(|(_, _, value)| value)\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `digit_sum` in this scope\n --> /tmp/tmp92ezxxwq.rs:9:40\n\
    \  |\n9 |         .map(|(index, &value)| (index, digit_sum(value), value))\n \
    \ |                                        ^^^^^^^^^ not found in this scope\n\
    \nerror[E0599]: no method named `sorted_by` found for struct `Map` in the current\
    \ scope\n  --> /tmp/tmp92ezxxwq.rs:10:10\n   |\n10 |         .sorted_by(|(index1,\
    \ points1, _), (index2, points2, _)| {\n   |          ^^^^^^^^^ method not found\
    \ in `Map<Enumerate<std::slice::Iter<'_, isize>>, _>`\n\nerror: aborting due to\
    \ 2 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\n\
    For more information about an error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822473
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    nums.into_iter().enumerate().map(|(i, n)| (n, i)).collect::<Vec<_>>().sort_by(|x,\
    \ y| {\n        let (nx, ix) = x;\n        let (ny, iy) = y;\n        digits_sum(nx).cmp(&digits_sum(ny)).then(ix.cmp(&iy))\n\
    \    }).into_iter().map(|(x, _)| x).collect()\n}\n\nfn main() {\n    let candidate\
    \ = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `digits_sum` in this scope\n  --> /tmp/tmpi67z48cg.rs:10:9\n\
    \   |\n10 |         digits_sum(nx).cmp(&digits_sum(ny)).then(ix.cmp(&iy))\n  \
    \ |         ^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function\
    \ `digits_sum` in this scope\n  --> /tmp/tmpi67z48cg.rs:10:29\n   |\n10 |    \
    \     digits_sum(nx).cmp(&digits_sum(ny)).then(ix.cmp(&iy))\n   |            \
    \                 ^^^^^^^^^^ not found in this scope\n\nerror[E0599]: the method\
    \ `into_iter` exists for unit type `()`, but its trait bounds were not satisfied\n\
    \  --> /tmp/tmpi67z48cg.rs:11:8\n   |\n11 |     }).into_iter().map(|(x, _)| x).collect()\n\
    \   |        ^^^^^^^^^ method cannot be called on `()` due to unsatisfied trait\
    \ bounds\n   |\n   = note: the following trait bounds were not satisfied:\n  \
    \         `(): Iterator`\n           which is required by `(): IntoIterator`\n\
    \           `&(): Iterator`\n           which is required by `&(): IntoIterator`\n\
    \           `&mut (): Iterator`\n           which is required by `&mut (): IntoIterator`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822473
- exit_code: 101
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums = nums;\n    let mut sums = nums.iter().map(|num|\
    \ {\n        let mut num = *num;\n        let mut sum = 0;\n        while num\
    \ > 0 {\n            sum += num % 10;\n            num /= 10;\n        }\n   \
    \     sum\n    }).collect::<Vec<isize>>();\n    nums.sort_by(|x, y| sums[x.abs()\
    \ as usize].cmp(&sums[y.abs() as usize]));\n    nums\n}\n\nfn main() {\n    let\
    \ candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11,\
    \ -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 5 but the
    index is 12'', /tmp/tmpt90giqq4.rs:17:25

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822473
- exit_code: 101
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut new_nums = nums.clone();\n    new_nums.sort_by(|a,\
    \ b| {\n        let a_sum: isize = a.to_string().chars().map(|c| c.to_digit(10).unwrap()\
    \ as isize).sum();\n        let b_sum: isize = b.to_string().chars().map(|c| c.to_digit(10).unwrap()\
    \ as isize).sum();\n        if a_sum == b_sum {\n            return nums.iter().position(|&x|\
    \ x == *a).unwrap().cmp(&nums.iter().position(|&x| x == *b).unwrap());\n     \
    \   }\n        a_sum.cmp(&b_sum)\n    });\n    new_nums\n}\n\nfn main() {\n  \
    \  let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1,\
    \ -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpef_g4rg5.rs:9:73

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822473
- exit_code: 101
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut v: Vec<(isize, usize)> = Vec::new();\n    for (i,\
    \ n) in nums.iter().enumerate() {\n        let mut num = *n;\n        let mut\
    \ sum = 0;\n        while num > 0 {\n            sum += num % 10;\n          \
    \  num /= 10;\n        }\n        v.push((sum, i));\n    }\n    v.sort();\n  \
    \  let mut result: Vec<isize> = Vec::new();\n    for &(sum, i) in v.iter() {\n\
    \        result.push(nums[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-1, -11, -12, 1, 11]`,\n right: `[-1, -11, 1, -12, 11]`', /tmp/tmpfvho4zra.rs:27:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822473
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut xs = nums.clone();\n    xs.sort_by(|a, b| {\n    \
    \    let a_sum = get_sum_of_digits(*a);\n        let b_sum = get_sum_of_digits(*b);\n\
    \        if a_sum == b_sum {\n            a.cmp(b)\n        } else {\n       \
    \     a_sum.cmp(&b_sum)\n        }\n    });\n    xs\n}\n\nfn main() {\n    let\
    \ candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11,\
    \ -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `get_sum_of_digits` in this scope\n\
    \ --> /tmp/tmpdw22b50x.rs:9:21\n  |\n9 |         let a_sum = get_sum_of_digits(*a);\n\
    \  |                     ^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `get_sum_of_digits` in this scope\n  --> /tmp/tmpdw22b50x.rs:10:21\n\
    \   |\n10 |         let b_sum = get_sum_of_digits(*b);\n   |                 \
    \    ^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822473
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    // let mut result: Vec<isize> = Vec::new();\n    // for num\
    \ in nums {\n    //     let mut sum: isize = 0;\n    //     let mut rem: isize\
    \ = num;\n    //     while rem > 0 {\n    //         sum += rem % 10;\n    //\
    \         rem /= 10;\n    //     }\n    //     result.push(sum);\n    // }\n \
    \   // result.sort();\n    // result\n    // nums.into_iter().zip(nums.iter().map(|&x|\
    \ x.to_string().chars().map(|x| x.to_digit(10).unwrap() as isize).sum()).collect()).sorted_by(|a,\
    \ b| b.1.cmp(&a.1)).map(|x| x.0).collect()\n    nums.into_iter().zip(nums.iter().map(|&x|\
    \ x.to_string().chars().map(|x| x.to_digit(10).unwrap() as isize).sum()).collect()).sorted_by(|a,\
    \ b| b.1.cmp(&a.1)).map(|x| x.0).collect()\n}\n\nfn main() {\n    let candidate\
    \ = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted_by` found for struct `Zip` in the\
    \ current scope\n  --> /tmp/tmpk_2xxg4m.rs:20:129\n   |\n20 | ...rap() as isize).sum()).collect()).sorted_by(|a,\
    \ b| b.1.cmp(&a.1)).map(|x| x.0).collect()\n   |                             \
    \         ^^^^^^^^^ method not found in `Zip<std::vec::IntoIter<isize>, _>`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659822473
- exit_code: 101
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut res = Vec::new();\n    for (i, &x) in nums.iter().enumerate()\
    \ {\n        let mut sum = 0;\n        let mut it = x;\n        while it > 0 {\n\
    \            sum += it % 10;\n            it /= 10;\n        }\n        res.push((i,\
    \ sum, x));\n    }\n    res.sort_by(|a, b| a.1.cmp(&b.1));\n    res.iter().map(|&(_,\
    \ _, x)| x).collect()\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-1, -11, -12, 1, 11]`,\n right: `[-1, -11, 1, -12, 11]`', /tmp/tmp7puiw8k7.rs:23:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822473
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    nums.into_iter().enumerate().collect::<Vec<_>>().sort_by(|a,\
    \ b| {\n        let (index_a, n_a) = a;\n        let (index_b, n_b) = b;\n   \
    \     let mut sum_a = n_a;\n        let mut sum_b = n_b;\n        let mut x =\
    \ 0;\n        let mut y = 0;\n        loop {\n            x += sum_a % 10;\n \
    \           sum_a /= 10;\n            if sum_a == 0 {\n                break;\n\
    \            }\n        }\n        loop {\n            y += sum_b % 10;\n    \
    \        sum_b /= 10;\n            if sum_b == 0 {\n                break;\n \
    \           }\n        }\n        let val = x.cmp(&y);\n        if val == Ordering::Equal\
    \ {\n            index_a.cmp(&index_b)\n        } else {\n            val\n  \
    \      }\n    }).into_iter().map(|(_, n)| n).collect()\n}\n\nfn main() {\n   \
    \ let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11,\
    \ -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Ordering`\n  -->\
    \ /tmp/tmps95j2jb7.rs:29:19\n   |\n29 |         if val == Ordering::Equal {\n\
    \   |                   ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0368]:\
    \ binary assignment operation `/=` cannot be applied to type `&isize`\n  --> /tmp/tmps95j2jb7.rs:16:13\n\
    \   |\n16 |             sum_a /= 10;\n   |             -----^^^^^^\n   |     \
    \        |\n   |             cannot use `/=` on type `&isize`\n   |\nhelp: `/=`\
    \ can be used on `isize`, you can dereference `sum_a`\n   |\n16 |            \
    \ *sum_a /= 10;\n   |             +\n\nerror[E0277]: can't compare `&isize` with\
    \ `{integer}`\n  --> /tmp/tmps95j2jb7.rs:17:22\n   |\n17 |             if sum_a\
    \ == 0 {\n   |                      ^^ no implementation for `&isize == {integer}`\n\
    \   |\n   = help: the trait `PartialEq<{integer}>` is not implemented for `&isize`\n\
    \nerror[E0368]: binary assignment operation `/=` cannot be applied to type `&isize`\n\
    \  --> /tmp/tmps95j2jb7.rs:23:13\n   |\n23 |             sum_b /= 10;\n   |  \
    \           -----^^^^^^\n   |             |\n   |             cannot use `/=`\
    \ on type `&isize`\n   |\nhelp: `/=` can be used on `isize`, you can dereference\
    \ `sum_b`\n   |\n23 |             *sum_b /= 10;\n   |             +\n\nerror[E0277]:\
    \ can't compare `&isize` with `{integer}`\n  --> /tmp/tmps95j2jb7.rs:24:22\n \
    \  |\n24 |             if sum_b == 0 {\n   |                      ^^ no implementation\
    \ for `&isize == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>`\
    \ is not implemented for `&isize`\n\nerror[E0599]: the method `into_iter` exists\
    \ for unit type `()`, but its trait bounds were not satisfied\n  --> /tmp/tmps95j2jb7.rs:34:8\n\
    \   |\n34 |     }).into_iter().map(|(_, n)| n).collect()\n   |        ^^^^^^^^^\
    \ method cannot be called on `()` due to unsatisfied trait bounds\n   |\n   =\
    \ note: the following trait bounds were not satisfied:\n           `(): Iterator`\n\
    \           which is required by `(): IntoIterator`\n           `&(): Iterator`\n\
    \           which is required by `&(): IntoIterator`\n           `&mut (): Iterator`\n\
    \          "
  stdout: ''
  timestamp: 1659822473
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut res = nums.clone();\n    res.sort_by(|a, b| get_sum_of_digits(*a).cmp(&get_sum_of_digits(*b)));\n\
    \    res\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `get_sum_of_digits` in this scope\n\
    \ --> /tmp/tmpl0gzo2pc.rs:8:24\n  |\n8 |     res.sort_by(|a, b| get_sum_of_digits(*a).cmp(&get_sum_of_digits(*b)));\n\
    \  |                        ^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `get_sum_of_digits` in this scope\n --> /tmp/tmpl0gzo2pc.rs:8:51\n\
    \  |\n8 |     res.sort_by(|a, b| get_sum_of_digits(*a).cmp(&get_sum_of_digits(*b)));\n\
    \  |                                                   ^^^^^^^^^^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822473
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums_clone = nums.clone();\n    nums_clone.sort_by(|a,\
    \ b| {\n        let (a_sum, b_sum) = (*a, *b);\n        let (a_sum, b_sum) = (sum_of_digits(a_sum),\
    \ sum_of_digits(b_sum));\n        a_sum.cmp(&b_sum)\n    });\n    nums_clone\n\
    }\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `sum_of_digits` in this scope\n  -->\
    \ /tmp/tmpo9fnvd74.rs:10:31\n   |\n10 |         let (a_sum, b_sum) = (sum_of_digits(a_sum),\
    \ sum_of_digits(b_sum));\n   |                               ^^^^^^^^^^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find function `sum_of_digits` in\
    \ this scope\n  --> /tmp/tmpo9fnvd74.rs:10:53\n   |\n10 |         let (a_sum,\
    \ b_sum) = (sum_of_digits(a_sum), sum_of_digits(b_sum));\n   |               \
    \                                      ^^^^^^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822473
- exit_code: 101
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut ret: Vec<isize> = nums.clone();\n    let mut sum =\
    \ vec![];\n    for i in nums {\n        let mut a = i;\n        let mut s = 0;\n\
    \        while a > 0 {\n            s += a % 10;\n            a /= 10;\n     \
    \   }\n        sum.push(s);\n    }\n    let mut i = 0;\n    while i < sum.len()\
    \ {\n        let mut j = i + 1;\n        while j < sum.len() {\n            if\
    \ sum[i] > sum[j] {\n                sum.swap(i, j);\n                ret.swap(i,\
    \ j);\n            }\n            j += 1;\n        }\n        i += 1;\n    }\n\
    \    ret\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-1, -11, -12, 1, 11]`,\n right: `[-1, -11, 1, -12, 11]`', /tmp/tmpzyy4lps5.rs:35:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822473
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    nums.iter()\n        .enumerate()\n        .map(|(i, &x)|\
    \ {\n            let mut n = x;\n            let mut sum = 0;\n            while\
    \ n > 0 {\n                sum += n % 10;\n                n /= 10;\n        \
    \    }\n            (sum, i, x)\n        })\n        .sorted_by(|&(s1, _, _),\
    \ &(s2, _, _)| s1.cmp(&s2))\n        .map(|(_, _, x)| x)\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted_by` found for struct `Map` in the\
    \ current scope\n  --> /tmp/tmp44cj_rou.rs:18:10\n   |\n18 |         .sorted_by(|&(s1,\
    \ _, _), &(s2, _, _)| s1.cmp(&s2))\n   |          ^^^^^^^^^ method not found in\
    \ `Map<Enumerate<std::slice::Iter<'_, isize>>, [closure@/tmp/tmp44cj_rou.rs:9:14:\
    \ 17:10]>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659822473
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    nums.iter()\n        .enumerate()\n        .map(|(index, item)|\
    \ (sum_digits(*item), index, *item))\n        .sorted_by(|a, b| a.0.cmp(&b.0).then(a.1.cmp(&b.1)))\n\
    \        .map(|tuple| tuple.2)\n        .collect()\n}\n\nfn main() {\n    let\
    \ candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11,\
    \ -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `sum_digits` in this scope\n --> /tmp/tmpn1ug5n0b.rs:9:31\n\
    \  |\n9 |         .map(|(index, item)| (sum_digits(*item), index, *item))\n  |\
    \                               ^^^^^^^^^^ not found in this scope\n\nerror[E0599]:\
    \ no method named `sorted_by` found for struct `Map` in the current scope\n  -->\
    \ /tmp/tmpn1ug5n0b.rs:10:10\n   |\n10 |         .sorted_by(|a, b| a.0.cmp(&b.0).then(a.1.cmp(&b.1)))\n\
    \   |          ^^^^^^^^^ method not found in `Map<Enumerate<std::slice::Iter<'_,\
    \ isize>>, _>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0425, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822473
- exit_code: 101
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let sum = |x: &isize| -> isize { x.to_string().chars().map(|x|\
    \ x.to_digit(10).unwrap() as isize).sum() };\n    let mut nums = nums;\n    nums.sort_by_key(|x|\
    \ sum(x));\n    nums\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpawd6sib8.rs:7:83

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822473
- exit_code: 101
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut result = vec![];\n    for n in nums {\n        let\
    \ s = n.to_string();\n        let mut sum = 0;\n        for c in s.chars() {\n\
    \            let d = c.to_digit(10).unwrap();\n            sum += d as isize;\n\
    \        }\n        result.push((sum, n));\n    }\n    result.sort();\n    result.iter().map(|(_,\
    \ n)| *n).collect()\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmp26beigvg.rs:12:36

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822473
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut pairs: Vec<(isize, usize)> = nums.iter().map(|n| (*n,\
    \ n.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize).sum())).collect();\n\
    \    pairs.sort_by(|a, b| a.1.cmp(&b.1));\n    pairs.iter().map(|(n, _)| *n).collect()\n\
    }\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Sum<isize>` is not satisfied\n -->\
    \ /tmp/tmpisjeiiek.rs:7:131\n  |\n7 | ...|c| c.to_digit(10).unwrap() as isize).sum())).collect();\n\
    \  |                                          ^^^ the trait `Sum<isize>` is not\
    \ implemented for `usize`\n  |\n  = help: the following implementations were found:\n\
    \            <usize as Sum<&'a usize>>\n            <usize as Sum>\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659822473
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    nums.into_iter().enumerate().collect::<Vec<_>>().sort_by(|a,\
    \ b| {\n        let (_, a) = a;\n        let (_, b) = b;\n        if sum_digits(*a)\
    \ == sum_digits(*b) {\n            Ord::cmp(&a, &b)\n        } else {\n      \
    \      Ord::cmp(&sum_digits(*a), &sum_digits(*b))\n        }\n    }).into_iter().map(|(_,\
    \ a)| a).collect()\n}\n\nfn main() {\n    let candidate = order_by_points;\n \
    \   assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `sum_digits` in this scope\n  --> /tmp/tmp6zr1roxr.rs:10:12\n\
    \   |\n10 |         if sum_digits(*a) == sum_digits(*b) {\n   |            ^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find function `sum_digits` in\
    \ this scope\n  --> /tmp/tmp6zr1roxr.rs:10:30\n   |\n10 |         if sum_digits(*a)\
    \ == sum_digits(*b) {\n   |                              ^^^^^^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find function `sum_digits` in this scope\n\
    \  --> /tmp/tmp6zr1roxr.rs:13:23\n   |\n13 |             Ord::cmp(&sum_digits(*a),\
    \ &sum_digits(*b))\n   |                       ^^^^^^^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find function `sum_digits` in this scope\n  --> /tmp/tmp6zr1roxr.rs:13:40\n\
    \   |\n13 |             Ord::cmp(&sum_digits(*a), &sum_digits(*b))\n   |     \
    \                                   ^^^^^^^^^^ not found in this scope\n\nerror[E0599]:\
    \ the method `into_iter` exists for unit type `()`, but its trait bounds were\
    \ not satisfied\n  --> /tmp/tmp6zr1roxr.rs:15:8\n   |\n15 |     }).into_iter().map(|(_,\
    \ a)| a).collect()\n   |        ^^^^^^^^^ method cannot be called on `()` due\
    \ to unsatisfied trait bounds\n   |\n   = note: the following trait bounds were\
    \ not satisfied:\n           `(): Iterator`\n           which is required by `():\
    \ IntoIterator`\n           `&(): Iterator`\n           which is required by `&():\
    \ IntoIterator`\n           `&mut (): Iterator`\n           which is required\
    \ by `&mut (): IntoIterator`\n\nerror: aborting due to 5 previous errors\n\nSome\
    \ errors have detailed explanations: E0425, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822473
- exit_code: 101
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut map = std::collections::HashMap::new();\n    for i\
    \ in 0..nums.len() {\n        let num = nums[i];\n        let mut sum = 0;\n \
    \       let mut tmp = num;\n        while tmp > 0 {\n            sum += tmp %\
    \ 10;\n            tmp /= 10;\n        }\n        let entry = map.entry(sum).or_insert(vec![]);\n\
    \        entry.push(num);\n    }\n    let mut v: Vec<&Vec<isize>> = map.values().collect();\n\
    \    v.sort_by(|x, y| x[0].cmp(&y[0]));\n    let mut res = vec![];\n    for v\
    \ in v {\n        for i in v {\n            res.push(*i);\n        }\n    }\n\
    \    res\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-1, -11, -12, 1, 11]`,\n right: `[-1, -11, 1, -12, 11]`', /tmp/tmpzlmoi9wz.rs:32:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822473
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut sum_digits = Vec::new();\n    let mut sorted_nums\
    \ = Vec::new();\n    for i in 0..nums.len() {\n        let digits = split_digits(nums[i]);\n\
    \        let sum = digits.iter().fold(0, |sum, &x| sum + x);\n        sum_digits.push((i,\
    \ sum));\n    }\n    sum_digits.sort_by(|a, b| a.1.cmp(&b.1));\n    for j in 0..sum_digits.len()\
    \ {\n        sorted_nums.push(nums[sum_digits[j].0]);\n    }\n    sorted_nums\n\
    }\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `split_digits` in this scope\n  -->\
    \ /tmp/tmptl3vguol.rs:10:22\n   |\n10 |         let digits = split_digits(nums[i]);\n\
    \   |                      ^^^^^^^^^^^^ help: a local variable with a similar\
    \ name exists: `sum_digits`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822473
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut nums = nums;\n    nums.sort_by(|a, b| {\n        num_digits(a).cmp(&num_digits(b))\n\
    \    });\n    nums\n}\n\nfn main() {\n    let candidate = order_by_points;\n \
    \   assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `num_digits` in this scope\n --> /tmp/tmpxvim34ua.rs:9:9\n\
    \  |\n9 |         num_digits(a).cmp(&num_digits(b))\n  |         ^^^^^^^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find function `num_digits` in this\
    \ scope\n --> /tmp/tmpxvim34ua.rs:9:28\n  |\n9 |         num_digits(a).cmp(&num_digits(b))\n\
    \  |                            ^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822473
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut sums: Vec<_> = nums.iter().map(|x| sum_of_digits(*x)).collect();\n\
    \    let mut res: Vec<isize> = Vec::new();\n    while sums.len() > 0 {\n     \
    \   let min_index = sums.iter().enumerate().min_by_key(|x| x.1).unwrap().0;\n\
    \        res.push(nums[min_index]);\n        sums.remove(min_index);\n       \
    \ nums.remove(min_index);\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `sum_of_digits` in this scope\n -->\
    \ /tmp/tmperq_jl02.rs:7:48\n  |\n7 |     let mut sums: Vec<_> = nums.iter().map(|x|\
    \ sum_of_digits(*x)).collect();\n  |                                         \
    \       ^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822473
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut map: HashMap<usize, Vec<isize>> = HashMap::new();\n\
    \    for x in nums.iter() {\n        map.entry(sum_of_digits(*x)).or_insert(vec![]).push(*x);\n\
    \    }\n    let mut sorted_k: Vec<_> = map.keys().cloned().collect();\n    sorted_k.sort();\n\
    \    let mut res: Vec<isize> = vec![];\n    for k in sorted_k {\n        let v\
    \ = map.get(&k).unwrap();\n        for x in v.iter() {\n            res.push(*x);\n\
    \        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashMap` in this scope\n --> /tmp/tmp0nrgexv6.rs:7:18\n\
    \  |\n7 |     let mut map: HashMap<usize, Vec<isize>> = HashMap::new();\n  | \
    \                 ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashMap`\n --> /tmp/tmp0nrgexv6.rs:7:47\n\
    \  |\n7 |     let mut map: HashMap<usize, Vec<isize>> = HashMap::new();\n  | \
    \                                              ^^^^^^^ not found in this scope\n\
    \  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n\
    \  |\n\nerror[E0425]: cannot find function `sum_of_digits` in this scope\n -->\
    \ /tmp/tmp0nrgexv6.rs:9:19\n  |\n9 |         map.entry(sum_of_digits(*x)).or_insert(vec![]).push(*x);\n\
    \  |                   ^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0412, E0425,\
    \ E0433.\nFor more information about an error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659822473
- exit_code: 101
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp3p_6ij05.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822471
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    nums.into_iter().enumerate().map(|(i, n)| (i, n, sum_digits(n))).collect::<Vec<_>>().sort_by(|(_,\
    \ _, x), (_, _, y)| y.cmp(x)).iter().map(|(_, n, _)| *n).collect()\n}\n\nfn main()\
    \ {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11,\
    \ -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `sum_digits` in this scope\n --> /tmp/tmp3icypt16.rs:7:54\n\
    \  |\n7 |     nums.into_iter().enumerate().map(|(i, n)| (i, n, sum_digits(n))).collect::<Vec<_>>().sort_by(|(_,\
    \ _, x), (_, _, y)| y.cmp(x)).iter()....\n  |                                \
    \                      ^^^^^^^^^^ not found in this scope\n\nerror[E0599]: no\
    \ method named `iter` found for unit type `()` in the current scope\n --> /tmp/tmp3icypt16.rs:7:131\n\
    \  |\n7 | ...<Vec<_>>().sort_by(|(_, _, x), (_, _, y)| y.cmp(x)).iter().map(|(_,\
    \ n, _)| *n).collect()\n  |                                                  \
    \      ^^^^ method not found in `()`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0425, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822473
- exit_code: 1
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    nums.iter()\n        .enumerate()\n        .sorted_by(|(_,\
    \ a), (_, b)| {\n            let mut a_points = 0;\n            let mut b_points\
    \ = 0;\n            for digit in format!(\"{}\", a).chars() {\n              \
    \  a_points += digit.to_digit(10).unwrap();\n            }\n            for digit\
    \ in format!(\"{}\", b).chars() {\n                b_points += digit.to_digit(10).unwrap();\n\
    \            }\n            if a_points == b_points {\n                Ordering::Equal\n\
    \            } else if a_points > b_points {\n                Ordering::Greater\n\
    \            } else {\n                Ordering::Less\n            }\n       \
    \ })\n        .map(|(_, &val)| val)\n        .collect()\n}\n\nfn main() {\n  \
    \  let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1,\
    \ -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Ordering`\n  -->\
    \ /tmp/tmpmv47yyt8.rs:19:17\n   |\n19 |                 Ordering::Equal\n   |\
    \                 ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `Ordering`\n  --> /tmp/tmpmv47yyt8.rs:21:17\n\
    \   |\n21 |                 Ordering::Greater\n   |                 ^^^^^^^^ use\
    \ of undeclared type `Ordering`\n\nerror[E0433]: failed to resolve: use of undeclared\
    \ type `Ordering`\n  --> /tmp/tmpmv47yyt8.rs:23:17\n   |\n23 |               \
    \  Ordering::Less\n   |                 ^^^^^^^^ use of undeclared type `Ordering`\n\
    \nerror[E0599]: no method named `sorted_by` found for struct `Enumerate` in the\
    \ current scope\n --> /tmp/tmpmv47yyt8.rs:9:10\n  |\n9 |         .sorted_by(|(_,\
    \ a), (_, b)| {\n  |          ^^^^^^^^^ method not found in `Enumerate<std::slice::Iter<'_,\
    \ isize>>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed\
    \ explanations: E0433, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0433`.\n"
  stdout: ''
  timestamp: 1659822473
- exit_code: 101
  program: "/// Write a function which sorts the given list of integers\n/// in ascending\
    \ order according to the sum of their digits.\n/// Note: if there are several\
    \ items with similar sum of their digits,\n/// order them based on their index\
    \ in original list.\n/// For example:\nfn order_by_points(nums: Vec<isize>) ->\
    \ Vec<isize> {\n    let mut sum_digits = vec![];\n    for num in nums.iter() {\n\
    \        let mut num_copy = *num;\n        let mut sum = 0;\n        while num_copy\
    \ > 0 {\n            sum += num_copy % 10;\n            num_copy /= 10;\n    \
    \    }\n        sum_digits.push(sum);\n    }\n    let mut result = vec![];\n \
    \   let mut index = 0;\n    while sum_digits.iter().any(|&s| s > 0) {\n      \
    \  let mut min = 9;\n        let mut min_index = 0;\n        for i in 0..sum_digits.len()\
    \ {\n            if sum_digits[i] > 0 && sum_digits[i] < min {\n             \
    \   min = sum_digits[i];\n                min_index = i;\n            }\n    \
    \    }\n        result.push(nums[min_index]);\n        sum_digits[min_index] =\
    \ -1;\n        index += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 11]`,\n right: `[-1, -11, 1, -12, 11]`', /tmp/tmprqct4qa5.rs:37:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822473
