language: rs
name: HumanEval_36_fizz_buzz
results:
- exit_code: 1
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut s = 0;\n    for i in (1..n).step_by(11) {\n        s += get_num_7(i);\n\
    \    }\n    for i in (1..n).step_by(13) {\n        s += get_num_7(i);\n    }\n\
    \    return s;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `get_num_7` in this scope\n --> /tmp/tmpf722i_dz.rs:5:14\n\
    \  |\n5 |         s += get_num_7(i);\n  |              ^^^^^^^^^ not found in\
    \ this scope\n\nerror[E0425]: cannot find function `get_num_7` in this scope\n\
    \ --> /tmp/tmpf722i_dz.rs:8:14\n  |\n8 |         s += get_num_7(i);\n  |     \
    \         ^^^^^^^^^ not found in this scope\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822493
- exit_code: 0
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    (1..n).filter(|&x|\
    \ x % 11 == 0 || x % 13 == 0).map(|x| x.to_string().chars().filter(|&x| x == '7').count()\
    \ as isize).sum()\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822493
- exit_code: 0
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut result = 0;\n    for i in 1..n {\n        if i % 11 == 0 || i % 13 == 0\
    \ {\n            let string = i.to_string();\n            for c in string.chars()\
    \ {\n                if c == '7' {\n                    result += 1;\n       \
    \         }\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822493
- exit_code: 0
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut count = 0;\n    for i in 1..n {\n        if i % 11 == 0 || i % 13 == 0 {\n\
    \            let mut i = i;\n            while i > 0 {\n                if i %\
    \ 10 == 7 {\n                    count += 1;\n                }\n            \
    \    i /= 10;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822493
- exit_code: 101
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    0\n\
    }\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `2`', /tmp/tmpud3iuic0.rs:9:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822493
- exit_code: 101
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut count = 0;\n    for i in (1..n).step_by(11) {\n        if i.to_string().contains('7')\
    \ {\n            count += 1;\n        }\n    }\n    for i in (1..n).step_by(13)\
    \ {\n        if i.to_string().contains('7') {\n            count += 1;\n     \
    \   }\n    }\n    count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n  \
    \  assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79),\
    \ 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n\
    \    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n\
    \    assert_eq!(candidate(100000), 8026);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpy9uc0re8.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822493
- exit_code: 101
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    //\
    \ \u4E09\u5143\u7EC4\u89E3\u51B3\n    let mut result = 0;\n    for i in 0..n {\n\
    \        let mut flag = true;\n        if i % 11 == 0 || i % 13 == 0 {\n     \
    \       for j in i.to_string().chars() {\n                if j == '7' {\n    \
    \                result += 1;\n                    flag = false;\n           \
    \         break;\n                }\n            }\n        }\n        if !flag\
    \ {\n            continue;\n        }\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmp241m19y3.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822493
- exit_code: 101
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut f = 0;\n    for i in 0..n {\n        if i % 11 == 0 || i % 13 == 0 {\n \
    \           f += 1;\n        }\n    }\n    f\n}\n\nfn main() {\n    let candidate\
    \ = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `0`', /tmp/tmp9rha9m5c.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822493
- exit_code: 101
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut acc = 0;\n    for i in (1..n) {\n        if (i % 11 == 0 || i % 13 == 0)\
    \ && i.to_string().contains(\"7\") {\n            acc += 1;\n        }\n    }\n\
    \    acc\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpsrfgytjl.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822493
- exit_code: 0
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut count = 0;\n    for i in 0..n {\n        if i % 11 == 0 || i % 13 == 0 {\n\
    \            let num_str = i.to_string();\n            for c in num_str.chars()\
    \ {\n                if c == '7' {\n                    count += 1;\n        \
    \        }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n   \
    \ let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822493
- exit_code: 101
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut counter = 0;\n    for i in 0..n {\n        let s = i.to_string();\n    \
    \    if (i % 11 == 0 || i % 13 == 0) && s.contains(\"7\") {\n            counter\
    \ += 1;\n        }\n    }\n    counter\n}\n\nfn main() {\n    let candidate =\
    \ fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmplun7m2k2.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822493
- exit_code: 101
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut q = 0;\n    let mut f = 7;\n    let mut m = 7;\n    while m < n {\n    \
    \    q += m;\n        f *= 10;\n        m = f % (11 * 13);\n    }\n    q\n}\n\n\
    fn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n\
    \    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100),\
    \ 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n\
    \    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmpwr0vmxdk.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822493
- exit_code: 101
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut c = 0;\n    for x in 1..n {\n        let s = x.to_string();\n        let\
    \ mut d = false;\n        for a in s.chars() {\n            if a == '7' {\n  \
    \              d = true;\n                break;\n            }\n        }\n \
    \       if d && (x % 11 == 0 || x % 13 == 0) {\n            c += 1;\n        }\n\
    \    }\n    c\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmp6u2ncz80.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822493
- exit_code: 101
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpwffnkdzl.rs:3:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822493
- exit_code: 0
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    (1..n).filter(|x|\
    \ x % 11 == 0 || x % 13 == 0).map(|x| x.to_string().matches(\"7\").count() as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822493
- exit_code: 1
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 1..n {\n        if i % 11 == 0 || i % 13 == 0 {\n\
    \            sum += digit_counter(&i, 7);\n        }\n    }\n    sum\n}\n\nfn\
    \ main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n\
    \    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100),\
    \ 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n\
    \    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `digit_counter` in this scope\n -->\
    \ /tmp/tmps0rthv7a.rs:6:20\n  |\n6 |             sum += digit_counter(&i, 7);\n\
    \  |                    ^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659822493
- exit_code: 0
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    (1..n).filter(|x|\
    \ x % 11 == 0 || x % 13 == 0).map(|x| x.to_string().chars().filter(|x| *x == '7').count()\
    \ as isize).sum()\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822493
- exit_code: 0
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut v: Vec<isize> = Vec::new();\n    for i in 1..n {\n        let s = i.to_string();\n\
    \        let mut seven_count = 0;\n        for c in s.chars() {\n            if\
    \ c == '7' {\n                seven_count += 1;\n            }\n        }\n  \
    \      if seven_count > 0 && (i % 11 == 0 || i % 13 == 0) {\n            v.push(seven_count);\n\
    \        }\n    }\n    let mut res = 0;\n    for a in v {\n        res += a;\n\
    \    }\n    res\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822493
- exit_code: 1
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    (0..n)\n\
    \        .filter(|x| *x % 11 == 0 || *x % 13 == 0)\n        .map(|x| format!(\"\
    {}\", x))\n        .map(|s| s.chars().filter(|&c| c == '7').count())\n       \
    \ .sum()\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<usize>` is not satisfied\n -->\
    \ /tmp/tmpr99ast8y.rs:7:10\n  |\n7 |         .sum()\n  |          ^^^ the trait\
    \ `Sum<usize>` is not implemented for `isize`\n  |\n  = help: the following implementations\
    \ were found:\n            <isize as Sum<&'a isize>>\n            <isize as Sum>\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659822493
- exit_code: 1
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut count = 0;\n    for i in 1..n {\n        if (i % 11 == 0 || i % 13 == 0)\
    \ && has_digit_7(i) {\n            count += 1;\n        }\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `has_digit_7` in this scope\n --> /tmp/tmp743kv81j.rs:5:44\n\
    \  |\n5 |         if (i % 11 == 0 || i % 13 == 0) && has_digit_7(i) {\n  |   \
    \                                         ^^^^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822493
- exit_code: 101
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut result = 0;\n    for i in 1..n {\n        if i % 11 == 0 || i % 13 == 0\
    \ {\n            if i.to_string().contains(\"7\") {\n                result +=\
    \ 1;\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpz451j84o.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822493
- exit_code: 101
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut count = 0;\n    for i in 0..n {\n        if (i % 11 == 0 || i % 13 == 0)\
    \ && i.to_string().contains(\"7\") {\n            count += 1;\n        }\n   \
    \ }\n    count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpvcugp1gc.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822493
- exit_code: 1
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut count = 0;\n    for i in 1..n {\n        if is_divisible_by_11_or_13(i)\
    \ && contains_digit_7(i) {\n            count += 1;\n        }\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_divisible_by_11_or_13` in this scope\n\
    \ --> /tmp/tmp3lurjvvy.rs:5:12\n  |\n5 |         if is_divisible_by_11_or_13(i)\
    \ && contains_digit_7(i) {\n  |            ^^^^^^^^^^^^^^^^^^^^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find function `contains_digit_7` in this\
    \ scope\n --> /tmp/tmp3lurjvvy.rs:5:43\n  |\n5 |         if is_divisible_by_11_or_13(i)\
    \ && contains_digit_7(i) {\n  |                                           ^^^^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822493
- exit_code: 1
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    //\
    \ TODO: implement\n\n    let div = |x| (x % 11 == 0) || (x % 13 == 0);\n    let\
    \ count_digit = |s, c| s.matches(c).count() as isize;\n\n    (1..n).filter(|&x|\
    \ div(x)).map(|x| count_digit(x.to_string(), \"7\")).sum()\n}\n\nfn main() {\n\
    \    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpy9v3mx96.rs:6:24\n\
    \  |\n6 |     let count_digit = |s, c| s.matches(c).count() as isize;\n  |   \
    \                     ^ consider giving this closure parameter a type\n  |\n \
    \ = note: type must be known at this point\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659822493
- exit_code: 1
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n  /*\n\
    \   * I could write a longer comment to explain what this function does, but I\
    \ don't\n   * want to.\n   */\n  if n <= 0 {\n    return 0;\n  }\n  if n <= 6\
    \ {\n    return 1;\n  }\n  if n <= 10 {\n    return 2;\n  }\n  if n <= 14 {\n\
    \    return 3;\n  }\n  if n <= 18 {\n    return 4;\n  }\n  if n <= 22 {\n    return\
    \ 5;\n  }\n  if n <= 26 {\n    return 6;\n  }\n  if n <= 30 {\n    return 7;\n\
    \  }\n  if n <= 34 {\n    return 8;\n  }\n  if n <= 38 {\n    return 9;\n  }\n\
    \  if n <= 42 {\n    return 10;\n  }\n  if n <= 46 {\n    return 11;\n  }\n  if\
    \ n <= 50 {\n    return 12;\n  }\n  if n <= 54 {\n    return 13;\n  }\n  if n\
    \ <= 58 {\n    return 14;\n  }\n  if n <= 62 {\n    return 15;\n  }\n  if n <=\
    \ 66 {\n    return 16;\n  }\n  if n <= 70 {\n    return 17;\n  }\n  if n <= 74\
    \ {\n    return 18;\n  }\n  if n <= 78 {\n    return 19;\n  }\n  if n <= 82 {\n\
    \    return 20;\n  }\n  if n <= 86 {\n    return 21;\n  }\n  if n <= 90 {\n  \
    \  return 22;\n  }\n  if n <= 94 {\n    return 23;\n  }\n  if n <= 98 {\n    return\
    \ 24;\n  }\n  if n <= 102 {\n    return 25;\n  }\n  if n <= 106 {\n    return\
    \ 26;\n  }\n  if n <= 110 {\n    return 27;\n  }\n  if n <= 114 {\n    return\
    \ 28;\n  }\n  if n <= 118 {\n    return 29;\n  }\n  if n <= 122 {\n    return\
    \ 30;\n  }\n  if n <= 126 {\n    return 31;\n  }\n}\n\nfn main() {\n    let candidate\
    \ = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0317]: `if` may be missing an `else` clause\n   --> /tmp/tmpwarf9ra1.rs:100:3\n\
    \    |\n2   |   fn fizz_buzz(n: isize) -> isize {\n    |                     \
    \        ----- expected `isize` because of this return type\n...\n100 | /   if\
    \ n <= 126 {\n101 | |     return 31;\n102 | |   }\n    | |___^ expected `isize`,\
    \ found `()`\n    |\n    = note: `if` expressions without `else` evaluate to `()`\n\
    \    = help: consider adding an `else` block that evaluates to the expected type\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0317`.\n"
  stdout: ''
  timestamp: 1659822493
- exit_code: 101
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    if\
    \ n <= 0 {\n        return 0;\n    }\n    let mut result = n / 7;\n    if n %\
    \ 7 == 0 {\n        result -= 1;\n    }\n    if n % 13 == 0 || n % 11 == 0 {\n\
    \        result += 1;\n    }\n    result + fizz_buzz(n - 1)\n}\n\nfn main() {\n\
    \    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `161`,\n right: `0`', /tmp/tmplxt3keel.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822493
- exit_code: 101
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut n: isize = n;\n    let mut result: isize = 0;\n    while n > 0 {\n     \
    \   if n % 10 == 7 {\n            result += 1;\n        }\n        n /= 10;\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpb1gaf679.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822493
- exit_code: 101
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    0\n\
    }\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `2`', /tmp/tmpud3iuic0.rs:9:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822493
- exit_code: 101
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    assert!(n\
    \ > 0);\n    //unimplemented!(\"How many times does 7 appear in the integers less\
    \ than {} which are divisible by 11 or 13?\", n)\n    let mut count = 0;\n   \
    \ for i in (1..n) {\n        if i % 11 == 0 || i % 13 == 0 {\n            let\
    \ test = i.to_string();\n            if test.contains(\"7\") {\n             \
    \   count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmplnoptza4.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822493
- exit_code: 101
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    unimplemented!(\"\
    Return the number of times the digit 7 appears in integers less than {} which\
    \ are divisible by 11 or 13\", n)\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n\
    \    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79),\
    \ 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n\
    \    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n\
    \    assert_eq!(candidate(100000), 8026);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented: Return the number of times
    the digit 7 appears in integers less than 50 which are divisible by 11 or 13'',
    /tmp/tmpc4gt_o69.rs:3:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822493
- exit_code: 101
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    assert!(n\
    \ > 0);\n    let mut x = n;\n    let mut y = n;\n    let mut result = 0;\n   \
    \ while x > 0 {\n        result += (x % 10 == 7) as isize;\n        x /= 10;\n\
    \    }\n    while y > 10 {\n        y /= 10;\n        result += (y % 10 == 7)\
    \ as isize;\n    }\n    result\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n\
    \    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79),\
    \ 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n\
    \    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n\
    \    assert_eq!(candidate(100000), 8026);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `3`', /tmp/tmpbxfx5dkg.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822493
- exit_code: 0
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut ret = 0;\n    for i in 0..n {\n        if i % 11 == 0 || i % 13 == 0 {\n\
    \            let mut j = i;\n            while j > 0 {\n                if j %\
    \ 10 == 7 {\n                    ret += 1;\n                }\n              \
    \  j /= 10;\n            }\n        }\n    }\n    ret\n}\n\nfn main() {\n    let\
    \ candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822493
- exit_code: 1
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut num = n;\n    let mut count = 0;\n    let mut num_str = \"\";\n    while\
    \ num > 0 {\n        num_str = &num.to_string() + num_str;\n        num = num\
    \ - 1;\n    }\n    for n in num_str.chars() {\n        if n == '7' {\n       \
    \     count = count + 1;\n        }\n    }\n    return count;\n}\n\nfn main()\
    \ {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot add `&str` to `&String`\n --> /tmp/tmpdszpdih1.rs:7:36\n\
    \  |\n7 |         num_str = &num.to_string() + num_str;\n  |                 \
    \  ---------------- ^ ------- &str\n  |                   |                |\n\
    \  |                   |                `+` cannot be used to concatenate two\
    \ `&str` strings\n  |                   &String\n  |\nhelp: String concatenation\
    \ appends the string on the right to the string on the left and may require reallocation.\
    \ This requires ownership of the string on the left\n  |\n7 |         num_str\
    \ = num.to_string() + num_str;\n  |                   ~~~~~~~~~~~~~~~\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659822493
- exit_code: 1
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    (1..n).filter(|n|\
    \ n % 11 == 0 || n % 13 == 0).filter(|n| contains_seven(n)).count() as isize\n\
    }\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `contains_seven` in this scope\n -->\
    \ /tmp/tmpi7bbu8d8.rs:3:62\n  |\n3 |     (1..n).filter(|n| n % 11 == 0 || n %\
    \ 13 == 0).filter(|n| contains_seven(n)).count() as isize\n  |               \
    \                                               ^^^^^^^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822493
- exit_code: 101
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpaloa4e47.rs:3:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822493
- exit_code: 1
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut total = 0;\n    let mut i = 0;\n    while i < n {\n        if i % 11 ==\
    \ 0 || i % 13 == 0 {\n            total += count_seven(i);\n        }\n      \
    \  i += 1;\n    }\n    total\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n\
    \    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79),\
    \ 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n\
    \    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n\
    \    assert_eq!(candidate(100000), 8026);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `count_seven` in this scope\n --> /tmp/tmp5fjtntk7.rs:7:22\n\
    \  |\n7 |             total += count_seven(i);\n  |                      ^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822493
- exit_code: 101
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    if\
    \ n <= 0 {\n        return 0;\n    }\n    (1..n)\n        .filter(|&x| (x % 11\
    \ == 0 || x % 13 == 0) && x.to_string().contains('7'))\n        .count() as isize\n\
    }\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpwg_ctfn_.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822493
- exit_code: 101
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut result = 0;\n    for x in 0..n {\n        if x % 7 == 0 && (x % 11 == 0\
    \ || x % 13 == 0) {\n            result += 1;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpybfmih0q.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822493
- exit_code: 0
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut total = 0;\n    for number in (1..n).rev() {\n        if number % 11 ==\
    \ 0 || number % 13 == 0 {\n            let mut i = number;\n            while\
    \ i > 0 {\n                let digit = i % 10;\n                if digit == 7\
    \ {\n                    total += 1;\n                }\n                i /=\
    \ 10;\n            }\n        }\n    }\n    total\n}\n\nfn main() {\n    let candidate\
    \ = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822493
- exit_code: 0
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    (1..n).fold(0,\
    \ |acc, x| acc + if x % 11 == 0 || x % 13 == 0 {\n        x.to_string().chars().fold(0,\
    \ |acc, x| acc + if x == '7' { 1 } else { 0 })\n    } else {\n        0\n    })\n\
    }\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822493
- exit_code: 101
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    (1..n).filter(|&x|\
    \ x % 11 == 0 || x % 13 == 0).filter(|&x| x.to_string().chars().any(|c| c == '7')).count()\
    \ as isize\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpx558s2qm.rs:9:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822493
- exit_code: 0
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    (1..n).filter(|&x|\
    \ x % 11 == 0 || x % 13 == 0).map(|x| x.to_string().chars().filter(|&y| y == '7').count()\
    \ as isize).sum()\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822493
- exit_code: 0
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    (1..n).filter(|&i|\
    \ i % 11 == 0 || i % 13 == 0).map(|x| x.to_string().matches(\"7\").count() as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822493
- exit_code: 1
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    (0..n)\n\
    \        .filter(|x| (x % 11 == 0) || (x % 13 == 0))\n        .map(|x| x.to_string())\n\
    \        .map(|x| x.chars().filter(|y| *y == '7').count())\n        .sum()\n}\n\
    \nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n\
    \    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100),\
    \ 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n\
    \    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<usize>` is not satisfied\n -->\
    \ /tmp/tmpfajler6j.rs:7:10\n  |\n7 |         .sum()\n  |          ^^^ the trait\
    \ `Sum<usize>` is not implemented for `isize`\n  |\n  = help: the following implementations\
    \ were found:\n            <isize as Sum<&'a isize>>\n            <isize as Sum>\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659822493
- exit_code: 101
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    //\
    \ digit 7 in n divisible by 11 or 13\n    let mut ans = 0;\n    let mut i = 7;\n\
    \    while i < n {\n        // println!(\"i:{}\", i);\n        if (i % 11 == 0)\
    \ || (i % 13 == 0) {\n            let mut j = i;\n            while j > 0 {\n\
    \                if j % 10 == 7 {\n                    ans += 1;\n           \
    \     }\n                j /= 10;\n            }\n        }\n        i += 7;\n\
    \    }\n    ans\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `3`', /tmp/tmpto6pzt5k.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822493
- exit_code: 0
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut counter = 0;\n    for i in 1..n {\n        if i % 11 == 0 || i % 13 == 0\
    \ {\n            for c in i.to_string().chars() {\n                if c == '7'\
    \ {\n                    counter += 1;\n                }\n            }\n   \
    \     }\n    }\n    counter\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n\
    \    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79),\
    \ 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n\
    \    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n\
    \    assert_eq!(candidate(100000), 8026);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822493
- exit_code: 101
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut cnt = 0;\n    for x in 0..n {\n        if (x % 11 == 0 || x % 13 == 0) &&\
    \ x.to_string().contains(\"7\") {\n            cnt += 1;\n        }\n    }\n \
    \   cnt\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpnctfn2ij.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822493
- exit_code: 1
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut count = 0;\n    for i in (1..n).step_by(11) {\n        count += fizz_buzz_helper(i);\n\
    \    }\n    for i in (1..n).step_by(13) {\n        count += fizz_buzz_helper(i);\n\
    \    }\n    return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n\
    \    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79),\
    \ 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n\
    \    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n\
    \    assert_eq!(candidate(100000), 8026);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `fizz_buzz_helper` in this scope\n -->\
    \ /tmp/tmpnih5n3x_.rs:5:18\n  |\n5 |         count += fizz_buzz_helper(i);\n \
    \ |                  ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `fizz_buzz_helper` in this scope\n --> /tmp/tmpnih5n3x_.rs:8:18\n\
    \  |\n8 |         count += fizz_buzz_helper(i);\n  |                  ^^^^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822493
- exit_code: 0
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut num = 7;\n    let mut count = 0;\n    while num < n {\n        if num %\
    \ 11 == 0 || num % 13 == 0 {\n            let mut num_copy = num;\n          \
    \  while num_copy > 0 {\n                if num_copy % 10 == 7 {\n           \
    \         count += 1;\n                }\n                num_copy /= 10;\n  \
    \          }\n        }\n        num += 1;\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822493
- exit_code: 101
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpwffnkdzl.rs:3:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822493
- exit_code: 0
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut fizz_buzz = 0;\n    for i in 1..n {\n        if i % 11 == 0 || i % 13 ==\
    \ 0 {\n            fizz_buzz += i.to_string().chars().filter(|d| *d == '7').count()\
    \ as isize;\n        }\n    }\n    fizz_buzz\n}\n\nfn main() {\n    let candidate\
    \ = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822493
- exit_code: 101
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut result = 0;\n    for i in 1..n {\n        if (i % 11 == 0 || i % 13 == 0)\
    \ && i.to_string().contains(\"7\") {\n            result += 1;\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpebyl16nx.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822493
- exit_code: 0
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n  let\
    \ mut count = 0;\n  for i in 0..n {\n    if i % 11 == 0 || i % 13 == 0 {\n   \
    \   let mut j = i;\n      while j > 0 {\n        let digit = j % 10;\n       \
    \ if digit == 7 {\n          count += 1;\n        }\n        j /= 10;\n      }\n\
    \    }\n  }\n  count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822493
- exit_code: 0
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut count = 0;\n    for i in 1..n {\n        if i % 11 == 0 || i % 13 == 0 {\n\
    \            let mut num = i;\n            while num > 0 {\n                if\
    \ num % 10 == 7 {\n                    count += 1;\n                }\n      \
    \          num /= 10;\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822493
- exit_code: 0
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut count = 0;\n    for i in 1..n {\n        if i % 11 == 0 || i % 13 == 0 {\n\
    \            let mut num = i;\n            while num > 0 {\n                if\
    \ num % 10 == 7 {\n                    count += 1;\n                }\n      \
    \          num /= 10;\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822493
- exit_code: 0
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut count = 0;\n    for i in 0..n {\n        if i % 11 == 0 || i % 13 == 0 {\n\
    \            count += i.to_string().chars().fold(0, |sum, x| {\n             \
    \   if x == '7' {\n                    sum + 1\n                } else {\n   \
    \                 sum\n                }\n            });\n        }\n    }\n\
    \    count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822494
- exit_code: 1
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..n {\n        if i % 11 == 0 || i % 13 == 0 {\n\
    \            sum += count_digit(i, 7);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `count_digit` in this scope\n --> /tmp/tmpp5385rd0.rs:6:20\n\
    \  |\n6 |             sum += count_digit(i, 7);\n  |                    ^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822493
- exit_code: 101
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n  let\
    \ mut sum = 0;\n  for i in 0..n {\n    if (i % 11 == 0 || i % 13 == 0) && i.to_string().contains(\"\
    7\") {\n      sum += 1;\n    }\n  }\n  sum\n}\n\nfn main() {\n    let candidate\
    \ = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpr8z7jxhw.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822494
- exit_code: 101
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpwffnkdzl.rs:3:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822493
- exit_code: 101
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n  let\
    \ mut count = 0;\n  let mut n = n;\n  while n > 0 {\n    let digit = n % 10;\n\
    \    if digit == 7 {\n      count += 1;\n    }\n    n /= 10;\n  }\n  count\n}\n\
    \nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n\
    \    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100),\
    \ 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n\
    \    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmp06gply9y.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822494
- exit_code: 0
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    //\
    \ Return the number of times 7 appears in each number\n    let count_7s = |n:\
    \ isize| n.to_string().chars().filter(|&x| x == '7').count() as isize;\n\n   \
    \ // Find each multiple of 11 and 13 within range [0, n)\n    (0..n).step_by(1).filter(|&x|\
    \ x % 11 == 0 || x % 13 == 0).map(count_7s).sum()\n}\n\nfn main() {\n    let candidate\
    \ = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822494
- exit_code: 101
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n  (1..n).fold(0,\
    \ |sum, x| {\n    match (x % 11, x % 13) {\n      (0, 0) => sum + 2,\n      (0,\
    \ _) => sum + 1,\n      (_, 0) => sum + 1,\n      _ => sum,\n    }\n  })\n}\n\n\
    fn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n\
    \    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100),\
    \ 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n\
    \    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmpfkvlymxr.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822494
- exit_code: 0
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..n {\n        if i % 11 == 0 || i % 13 == 0 {\n\
    \            let mut tmp = i;\n            while tmp > 0 {\n                if\
    \ tmp % 10 == 7 {\n                    sum += 1;\n                }\n        \
    \        tmp /= 10;\n            }\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822494
- exit_code: 101
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut s = 0;\n    for i in 0..n {\n        if (i % 11 == 0 || i % 13 == 0) &&\
    \ i.to_string().contains(\"7\") {\n            s += 1;\n        }\n    }\n   \
    \ s\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpkec5u9zw.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822494
- exit_code: 0
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut count = 0;\n    for i in 1..n {\n        if i % 11 == 0 || i % 13 == 0 {\n\
    \            let mut num = i;\n            while num > 0 {\n                if\
    \ num % 10 == 7 {\n                    count += 1;\n                }\n      \
    \          num /= 10;\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822493
- exit_code: 0
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    //\
    \ Your code here\n    let mut i: isize = 1;\n    let mut a: String;\n    let mut\
    \ sum: isize = 0;\n    let mut nb: isize = 0;\n    while i < n {\n        a =\
    \ i.to_string();\n        let mut j: usize = 0;\n        while j < a.len() {\n\
    \            if a.chars().nth(j).unwrap() == '7' && (i % 11 == 0 || i % 13 ==\
    \ 0) {\n                nb += 1;\n            }\n            j += 1;\n       \
    \ }\n        sum += nb;\n        nb = 0;\n        i += 1;\n    }\n    sum\n}\n\
    \nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n\
    \    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100),\
    \ 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n\
    \    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822494
- exit_code: 1
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    //\
    \ How many integers less than n are divisible by 11?\n    let a: isize = (n -\
    \ 1) / 11;\n    // How many integers less than n are divisible by 13?\n    let\
    \ b: isize = (n - 1) / 13;\n    // How many integers less than n are divisible\
    \ by 11 or 13?\n    let ab: isize = (n - 1) / (11 * 13);\n    // How many integers\
    \ less than n are divisible by 11 or 13 and contain 7?\n    let ab7: isize = (n\
    \ - 1) / (11 * 13 * 10);\n    // How many integers less than n are divisible by\
    \ 11 or 13 and contain 70?\n    let ab70: isize = (n - 1) / (11 * 13 * 100);\n\
    \    // How many integers less than n are divisible by 11 or 13 and contain 700?\n\
    \    let ab700: isize = (n - 1) / (11 * 13 * 1000);\n    // How many integers\
    \ less than n are divisible by 11 or 13 and contain 7000?\n    let ab7000: isize\
    \ = (n - 1) / (11 * 13 * 10000);\n    // How many integers less than n are divisible\
    \ by 11 or 13 and contain 70000?\n    let ab70000: isize = (n - 1) / (11 * 13\
    \ * 100000);\n    // How many integers less than n are divisible by 11 or 13 and\
    \ contain 700000?\n    let ab700000: isize = (n - 1) / (11 * 13 * 1000000);\n\
    \    // How many integers less than n are divisible by 11 or 13 and contain 7000000?\n\
    \    let ab7000000: isize = (n - 1) / (11 * 13 * 10000000);\n    // How many integers\
    \ less than n are divisible by 11 or 13 and contain 70000000?\n    let ab70000000:\
    \ isize = (n - 1) / (11 * 13 * 100000000);\n    // How many integers less than\
    \ n are divisible by 11 or 13 and contain 700000000?\n    let ab700000000: isize\
    \ = (n - 1) / (11 * 13 * 1000000000);\n    // Sum the digits that are divisible\
    \ by 11 or 13\n    a + b -\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n\
    \    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79),\
    \ 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n\
    \    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n\
    \    assert_eq!(candidate(100000), 8026);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmpsbb432i4.rs:29:1\n\
    \   |\n29 | }\n   | ^ expected expression\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1659822494
- exit_code: 0
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut c = 0;\n    for i in 11..n {\n        if i % 11 == 0 || i % 13 == 0 {\n\
    \            let mut n = i;\n            while n > 0 {\n                if n %\
    \ 10 == 7 {\n                    c += 1;\n                }\n                n\
    \ /= 10;\n            }\n        }\n    }\n    c\n}\n\nfn main() {\n    let candidate\
    \ = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822494
- exit_code: 0
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut fizz_buzz_count = 0;\n    for i in 0..n {\n        if i % 11 == 0 || i %\
    \ 13 == 0 {\n            let i_str = i.to_string();\n            for c in i_str.chars()\
    \ {\n                if c == '7' {\n                    fizz_buzz_count += 1;\n\
    \                }\n            }\n        }\n    }\n    fizz_buzz_count\n}\n\n\
    fn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n\
    \    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100),\
    \ 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n\
    \    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822494
- exit_code: 101
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    (1..n).filter(|x|\
    \ (x % 11 == 0 || x % 13 == 0) && x.to_string().contains(\"7\")).count() as isize\n\
    }\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmps0ie_g9e.rs:9:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822494
- exit_code: 1
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    (1..n).filter(|i|\
    \ i % 11 == 0 || i % 13 == 0).map(|i| i.to_string()).map(|i| i.chars()).flat_map(|i|\
    \ i).filter(|i| *i == '7').count() as isize\n}\n\nfn main() {\n    let candidate\
    \ = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0515]: cannot return value referencing function parameter `i`\n\
    \ --> /tmp/tmpf0sit4s8.rs:3:82\n  |\n3 | ...map(|i| i.to_string()).map(|i| i.chars()).flat_map(|i|\
    \ i).filter(|i| *i == '7').count() as isize\n  |                             \
    \      -^^^^^^^^\n  |                                   |\n  |               \
    \                    returns a value referencing data owned by the current function\n\
    \  |                                   `i` is borrowed here\n  |\n  = help: use\
    \ `.collect()` to allocate the iterator\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0515`.\n"
  stdout: ''
  timestamp: 1659822494
- exit_code: 1
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut result = 0;\n    for i in 0..n {\n        if i % 11 == 0 || i % 13 == 0\
    \ {\n            result += count_digits(i, 7);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `count_digits` in this scope\n --> /tmp/tmp0qm6qn9h.rs:6:23\n\
    \  |\n6 |             result += count_digits(i, 7);\n  |                     \
    \  ^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822494
- exit_code: 101
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut ans = 0;\n    for i in (1..n).step_by(11) {\n        if i % 13 == 0 {\n\
    \            continue;\n        }\n        let mut k = i;\n        while k > 0\
    \ {\n            if k % 10 == 7 {\n                ans += 1;\n            }\n\
    \            k /= 10;\n        }\n    }\n    for i in (1..n).step_by(13) {\n \
    \       if i % 11 == 0 {\n            continue;\n        }\n        let mut k\
    \ = i;\n        while k > 0 {\n            if k % 10 == 7 {\n                ans\
    \ += 1;\n            }\n            k /= 10;\n        }\n    }\n    ans\n}\n\n\
    fn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n\
    \    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100),\
    \ 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n\
    \    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpyq3lejbo.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822494
- exit_code: 1
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut result = 0;\n    for i in 1..n {\n        let d = i % 11;\n        if d\
    \ == 0 || d == 5 {\n            let count = i.to_string().matches(\"7\").count();\n\
    \            result += count;\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgn6seqmt.rs:11:5\n   |\n\
    2  | fn fizz_buzz(n: isize) -> isize {\n   |                           ----- expected\
    \ `isize` because of return type\n...\n11 |     result\n   |     ^^^^^^ expected\
    \ `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n11 |     result.try_into().unwrap()\n\
    \   |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822494
- exit_code: 101
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut count = 0;\n    for i in 1..n {\n        let mut has_13 = false;\n     \
    \   let mut has_11 = false;\n        let mut has_7 = false;\n        let mut i_copy\
    \ = i;\n        while i_copy > 0 {\n            let digit = i_copy % 10;\n   \
    \         if digit == 7 {\n                has_7 = true;\n            }\n    \
    \        i_copy /= 10;\n        }\n        if !has_7 {\n            continue;\n\
    \        }\n        i_copy = i;\n        while i_copy > 0 {\n            let digit\
    \ = i_copy % 10;\n            if digit == 13 {\n                has_13 = true;\n\
    \            }\n            i_copy /= 10;\n        }\n        if !has_13 {\n \
    \           continue;\n        }\n        i_copy = i;\n        while i_copy >\
    \ 0 {\n            let digit = i_copy % 10;\n            if digit == 11 {\n  \
    \              has_11 = true;\n            }\n            i_copy /= 10;\n    \
    \    }\n        if !has_11 {\n            continue;\n        }\n        count\
    \ += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n\
    \    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79),\
    \ 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n\
    \    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n\
    \    assert_eq!(candidate(100000), 8026);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `2`', /tmp/tmpwo7v_5de.rs:49:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822494
- exit_code: 101
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpaloa4e47.rs:3:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822493
- exit_code: 101
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut r = 0;\n    let mut m = 1;\n    let mut i = 0;\n    let mut j = 0;\n   \
    \ let mut k = 0;\n    while i < n {\n        if i % 11 == 0 || i % 13 == 0 {\n\
    \            if m == 100 {\n                m = 1;\n                k += 1;\n\
    \            }\n            if m % 10 == 7 {\n                r += 1;\n      \
    \      }\n            if m / 10 == 7 {\n                r += 1;\n            }\n\
    \            m += 1;\n        }\n        i += 1;\n    }\n    r\n}\n\nfn main()\
    \ {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpahz11jns.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822494
- exit_code: 0
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut i = 1;\n    let mut count = 0;\n    while i < n {\n        if i % 11 ==\
    \ 0 || i % 13 == 0 {\n            let mut j = i;\n            while j > 0 {\n\
    \                if j % 10 == 7 {\n                    count += 1;\n         \
    \       }\n                j /= 10;\n            }\n        }\n        i += 1;\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822494
- exit_code: 0
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    (0..n)\n\
    \        .filter(|x| x % 11 == 0 || x % 13 == 0)\n        .map(|x| x.to_string())\n\
    \        .map(|x| x.chars().filter(|&x| x == '7').count() as isize)\n        .sum()\n\
    }\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822494
- exit_code: 0
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut result = 0;\n    let mut candidate = 0;\n    while candidate < n {\n   \
    \     if candidate % 11 == 0 || candidate % 13 == 0 {\n            let mut num\
    \ = candidate;\n            while num > 0 {\n                if num % 10 == 7\
    \ {\n                    result += 1;\n                }\n                num\
    \ /= 10;\n            }\n        }\n        candidate += 1;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822494
- exit_code: 0
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut result = 0;\n    for i in 0..n {\n        if i % 11 == 0 || i % 13 == 0\
    \ {\n            result += i.to_string().chars().filter(|x| *x == '7').count()\
    \ as isize;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822494
- exit_code: 101
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    unimplemented!(\"\
    How many times the digit 7 appears in integers less than {} which are divisible\
    \ by 11 or 13\", n)\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented: How many times the digit
    7 appears in integers less than 50 which are divisible by 11 or 13'', /tmp/tmp7kg4hnfs.rs:3:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822494
- exit_code: 101
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut c = 0;\n    for i in 1..n {\n        if (i % 11 == 0 || i % 13 == 0) &&\
    \ i.to_string().contains(\"7\") {\n            c += 1;\n        }\n    }\n   \
    \ c\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpcg_bpm0h.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822494
- exit_code: 101
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut n = n;\n    n -= n % 11;\n    n -= n % 13;\n    n / 11 + n / 13\n}\n\nfn\
    \ main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n\
    \    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100),\
    \ 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n\
    \    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `0`', /tmp/tmp63qhktb_.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822494
- exit_code: 0
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ sum = (0..n)\n        .map(|num| num as f64)\n        .filter(|num| {\n    \
    \        num % 11.0 == 0.0 || num % 13.0 == 0.0\n        })\n        .map(|num|\
    \ {\n            num.to_string()\n        })\n        .map(|num| {\n         \
    \   num.chars()\n                .filter(|c| {\n                    *c == '7'\n\
    \                })\n                .count()\n        })\n        .sum::<usize>();\n\
    \    sum as isize\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822494
- exit_code: 101
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 1..n {\n        let mut x = i;\n        while x !=\
    \ 0 {\n            let d = x % 10;\n            if d == 7 {\n                sum\
    \ += 1;\n            }\n            x /= 10;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n\
    \    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100),\
    \ 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n\
    \    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `0`', /tmp/tmp0uoo_icf.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822494
- exit_code: 101
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpwffnkdzl.rs:3:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822493
- exit_code: 1
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut count = 0;\n    for i in 1..n {\n        if (i % 11 == 0 || i % 13 == 0)\
    \ && count_7(i) > 0 {\n            count += 1;\n        }\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `count_7` in this scope\n --> /tmp/tmpsnxj62k1.rs:5:44\n\
    \  |\n5 |         if (i % 11 == 0 || i % 13 == 0) && count_7(i) > 0 {\n  |   \
    \                                         ^^^^^^^ help: a local variable with\
    \ a similar name exists: `count`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822494
- exit_code: 0
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut s = 0;\n    for i in 1..n {\n        if i % 11 == 0 || i % 13 == 0 {\n \
    \           s += i.to_string().chars().filter(|c| *c == '7').count() as isize;\n\
    \        }\n    }\n    s\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n \
    \   assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79),\
    \ 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n\
    \    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n\
    \    assert_eq!(candidate(100000), 8026);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822494
- exit_code: 1
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ div_by_11 = n / 11;\n    let div_by_13 = n / 13;\n    (0..=div_by_11).fold(0,\
    \ |acc, elem| {\n        acc + count_digit(elem, 7) + count_digit(elem * 13, 7)\n\
    \    }) + (0..=div_by_13).fold(0, |acc, elem| {\n        acc + count_digit(elem,\
    \ 7) + count_digit(elem * 11, 7)\n    })\n}\n\nfn main() {\n    let candidate\
    \ = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `count_digit` in this scope\n --> /tmp/tmp6nlfws6x.rs:6:15\n\
    \  |\n6 |         acc + count_digit(elem, 7) + count_digit(elem * 13, 7)\n  |\
    \               ^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ function `count_digit` in this scope\n --> /tmp/tmp6nlfws6x.rs:6:38\n  |\n6\
    \ |         acc + count_digit(elem, 7) + count_digit(elem * 13, 7)\n  |      \
    \                                ^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `count_digit` in this scope\n --> /tmp/tmp6nlfws6x.rs:8:15\n\
    \  |\n8 |         acc + count_digit(elem, 7) + count_digit(elem * 11, 7)\n  |\
    \               ^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ function `count_digit` in this scope\n --> /tmp/tmp6nlfws6x.rs:8:38\n  |\n8\
    \ |         acc + count_digit(elem, 7) + count_digit(elem * 11, 7)\n  |      \
    \                                ^^^^^^^^^^^ not found in this scope\n\nerror:\
    \ aborting due to 4 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822494
- exit_code: 0
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut cnt = 0;\n    for i in 0..n {\n        let m = i as f64;\n        if (m\
    \ % 11.0).abs() < 0.00001 || (m % 13.0).abs() < 0.00001 {\n            let str_i\
    \ = format!(\"{}\", i);\n            for ch in str_i.chars() {\n             \
    \   if ch == '7' {\n                    cnt += 1;\n                }\n       \
    \     }\n        }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n\
    \    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79),\
    \ 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n\
    \    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n\
    \    assert_eq!(candidate(100000), 8026);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822494
- exit_code: 101
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut count = 0;\n    for i in 0..n {\n        if (i % 11 == 0 || i % 13 == 0)\
    \ && i.to_string().contains(\"7\") {\n            count += 1;\n        }\n   \
    \ }\n    count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpvcugp1gc.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822493
- exit_code: 0
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    (1..n).filter(|x|\
    \ x % 11 == 0 || x % 13 == 0).map(|x| x.to_string().chars().filter(|x| *x == '7').count()\
    \ as isize).sum()\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822493
- exit_code: 0
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut cnt = 0;\n    for i in 0..n {\n        if i % 11 == 0 || i % 13 == 0 {\n\
    \            let mut k = i;\n            while k > 0 {\n                if k %\
    \ 10 == 7 {\n                    cnt += 1;\n                }\n              \
    \  k /= 10;\n            }\n        }\n    }\n    cnt\n}\n\nfn main() {\n    let\
    \ candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822494
- exit_code: 1
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut count = 0;\n    for i in 0..n {\n        if (i % 11 == 0 || i % 13 == 0)\
    \ && contains_seven(i) {\n            count += 1;\n        }\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `contains_seven` in this scope\n -->\
    \ /tmp/tmp9emciuts.rs:5:44\n  |\n5 |         if (i % 11 == 0 || i % 13 == 0) &&\
    \ contains_seven(i) {\n  |                                            ^^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822494
- exit_code: 0
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut count = 0;\n    for i in 1..n {\n        if i % 11 == 0 || i % 13 == 0 {\n\
    \            let mut num = i;\n            while num > 0 {\n                if\
    \ num % 10 == 7 {\n                    count += 1;\n                }\n      \
    \          num /= 10;\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822493
- exit_code: 0
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    if\
    \ n < 1 {\n        return 0;\n    }\n    let mut cnt = 0;\n    for i in 1..n {\n\
    \        if i % 11 == 0 || i % 13 == 0 {\n            cnt += i.to_string().chars().filter(|&x|\
    \ x == '7').count() as isize;\n        }\n    }\n    cnt\n}\n\nfn main() {\n \
    \   let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822494
- exit_code: 0
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut ret = 0;\n    for i in 0..n {\n        if i % 11 == 0 || i % 13 == 0 {\n\
    \            let num = i.to_string();\n            for digit in num.chars() {\n\
    \                if digit == '7' {\n                    ret += 1;\n          \
    \      }\n            }\n        }\n    }\n    ret\n}\n\nfn main() {\n    let\
    \ candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822494
- exit_code: 101
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpwffnkdzl.rs:3:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822493
- exit_code: 1
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut i = 0;\n    let mut result = 0;\n    while i < n {\n        if i % 11 ==\
    \ 0 || i % 13 == 0 {\n            let num_of_7 = i.to_string().matches(\"7\").count();\n\
    \            result += num_of_7;\n        }\n        i += 1;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7ed0t5ss.rs:12:5\n   |\n\
    2  | fn fizz_buzz(n: isize) -> isize {\n   |                           ----- expected\
    \ `isize` because of return type\n...\n12 |     result\n   |     ^^^^^^ expected\
    \ `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n12 |     result.try_into().unwrap()\n\
    \   |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822494
- exit_code: 0
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n  (0..n).map(|x|\
    \ {\n    if x % 11 == 0 || x % 13 == 0 {\n      x.to_string().chars().filter(|y|\
    \ *y == '7').count() as isize\n    } else {\n      0\n    }\n  }).sum()\n}\n\n\
    fn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n\
    \    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100),\
    \ 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n\
    \    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822494
- exit_code: 0
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut a = 0;\n    for i in 0..n {\n        if i % 11 == 0 || i % 13 == 0 {\n \
    \           let mut x = i;\n            while x > 0 {\n                if x %\
    \ 10 == 7 {\n                    a += 1;\n                }\n                x\
    \ /= 10;\n            }\n        }\n    }\n    a\n}\n\nfn main() {\n    let candidate\
    \ = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822494
- exit_code: 101
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut result = 0;\n    let mut sevens = 0;\n    let mut rem = 0;\n    let mut\
    \ current = 0;\n    let limit = isize::max_value();\n    let mut x = 1;\n    while\
    \ current < n {\n        x += 1;\n        if x % 11 == 0 || x % 13 == 0 {\n  \
    \          current += 1;\n            rem = x;\n            while rem > 0 {\n\
    \                if rem % 10 == 7 {\n                    sevens += 1;\n      \
    \          }\n                rem /= 10;\n            }\n        }\n        if\
    \ x > limit {\n            break;\n        }\n    }\n    result = sevens;\n  \
    \  result\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `10`,\n right: `0`', /tmp/tmpekyjsate.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822494
- exit_code: 101
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    (1..n).fold(0,\
    \ |acc, x| {\n        if (x % 11 == 0 || x % 13 == 0) && x.to_string().contains(\"\
    7\") {\n            acc + 1\n        } else {\n            acc\n        }\n  \
    \  })\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmp142qqnpd.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822494
- exit_code: 1
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut count = 0;\n    for num in 1..n {\n        if num % 11 == 0 || num % 13\
    \ == 0 {\n            count += count_digit(num, 7);\n        }\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `count_digit` in this scope\n --> /tmp/tmpurwen9qj.rs:6:22\n\
    \  |\n6 |             count += count_digit(num, 7);\n  |                     \
    \ ^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822494
- exit_code: 0
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut count = 0;\n    for i in 1..n {\n        if i % 11 == 0 || i % 13 == 0 {\n\
    \            let mut m = i;\n            while m > 0 {\n                if m %\
    \ 10 == 7 {\n                    count += 1;\n                }\n            \
    \    m /= 10;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822494
- exit_code: 0
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n  if\
    \ n <= 0 { return 0; }\n  let mut sum = 0;\n  for i in 1..n {\n    if i % 11 ==\
    \ 0 || i % 13 == 0 {\n      let digits = i.to_string().chars().collect::<Vec<char>>();\n\
    \      for j in 0..digits.len() {\n        if digits[j] == '7' {\n          sum\
    \ += 1;\n        }\n      }\n    }\n  }\n  sum\n}\n\nfn main() {\n    let candidate\
    \ = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822494
- exit_code: 101
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    (1..n).filter(|&n|\
    \ (n % 11 == 0 || n % 13 == 0) && n.to_string().contains('7')).count() as isize\n\
    }\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpbonjqpof.rs:9:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822494
- exit_code: 1
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut x = 7;\n    let mut count = 0;\n    while x < n {\n        if x % 11 ==\
    \ 0 || x % 13 == 0 {\n            count += count_sevens(x);\n        }\n     \
    \   x += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n\
    \    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79),\
    \ 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n\
    \    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n\
    \    assert_eq!(candidate(100000), 8026);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `count_sevens` in this scope\n --> /tmp/tmpnaqi0h1e.rs:7:22\n\
    \  |\n7 |             count += count_sevens(x);\n  |                      ^^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822494
- exit_code: 101
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut i = 0;\n    let mut sevens = 0;\n    while i < n {\n        let mut num\
    \ = i;\n        while num > 0 {\n            if num % 10 == 7 {\n            \
    \    sevens += 1;\n            }\n            num /= 10;\n        }\n        i\
    \ += 11;\n    }\n    i = 0;\n    while i < n {\n        let mut num = i;\n   \
    \     while num > 0 {\n            if num % 10 == 7 {\n                sevens\
    \ += 1;\n            }\n            num /= 10;\n        }\n        i += 13;\n\
    \    }\n    sevens\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `202`,\n right: `192`', /tmp/tmp9bbnwdty.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822494
- exit_code: 0
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    (0..n)\n\
    \        .filter(|x| x % 11 == 0 || x % 13 == 0)\n        .map(|x| x.to_string())\n\
    \        .map(|s| s.chars().filter(|&c| c == '7').count() as isize)\n        .sum()\n\
    }\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822494
- exit_code: 101
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n  let\
    \ mut count = 0;\n  for i in 0..n {\n    if (i % 11 == 0 || i % 13 == 0) && i.to_string().contains(\"\
    7\") {\n      count += 1;\n    }\n  }\n  count\n}\n\nfn main() {\n    let candidate\
    \ = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpvk8w50q8.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822494
- exit_code: 1
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut total = 0;\n    for i in 0..n {\n        if i % 11 == 0 || i % 13 == 0 {\n\
    \            total += num_sevens(i);\n        }\n    }\n    total\n}\n\nfn main()\
    \ {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `num_sevens` in this scope\n --> /tmp/tmptx1w24s3.rs:6:22\n\
    \  |\n6 |             total += num_sevens(i);\n  |                      ^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822494
- exit_code: 1
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut count = 0;\n    for x in 0..n {\n        if (x % 11 == 0 || x % 13 == 0)\
    \ && has_seven(x) {\n            count += 1;\n        }\n    }\n    count\n}\n\
    \nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n\
    \    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100),\
    \ 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n\
    \    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `has_seven` in this scope\n --> /tmp/tmp7z8v2ioc.rs:5:44\n\
    \  |\n5 |         if (x % 11 == 0 || x % 13 == 0) && has_seven(x) {\n  |     \
    \                                       ^^^^^^^^^ not found in this scope\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822494
- exit_code: 0
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut count = 0;\n    for i in 0..n {\n        if i % 11 == 0 || i % 13 == 0 {\n\
    \            let mut temp = i;\n            while temp > 0 {\n               \
    \ let m = temp % 10;\n                if m == 7 {\n                    count +=\
    \ 1;\n                }\n                temp /= 10;\n            }\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822494
- exit_code: 0
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut count = 0;\n    for num in 11..n {\n        if num % 11 == 0 || num % 13\
    \ == 0 {\n            let num_str = format!(\"{}\", num);\n            for character\
    \ in num_str.chars() {\n                if character == '7' {\n              \
    \      count += 1;\n                }\n            }\n        }\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822494
- exit_code: 101
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpaloa4e47.rs:3:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822493
- exit_code: 101
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpaloa4e47.rs:3:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822493
- exit_code: 0
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut cnt = 0;\n    for i in 1..n {\n        if i % 11 == 0 || i % 13 == 0 {\n\
    \            let mut num = i;\n            while num > 0 {\n                if\
    \ num % 10 == 7 {\n                    cnt += 1;\n                }\n        \
    \        num /= 10;\n            }\n        }\n    }\n    cnt\n}\n\nfn main()\
    \ {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822494
- exit_code: 0
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for m in 1..n {\n        if m % 11 == 0 || m % 13 == 0 {\n\
    \            let mut m = m;\n            while m > 0 {\n                if m %\
    \ 10 == 7 {\n                    sum += 1;\n                }\n              \
    \  m /= 10;\n            }\n        }\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822494
- exit_code: 0
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut count = 0;\n    for i in 1..n {\n        if i % 11 == 0 || i % 13 == 0 {\n\
    \            let mut j = i;\n            while j > 0 {\n                if j %\
    \ 10 == 7 {\n                    count += 1;\n                }\n            \
    \    j /= 10;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822494
- exit_code: 101
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    n\
    \ / 11 + n / 13 - n / 143\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n\
    \    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79),\
    \ 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n\
    \    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n\
    \    assert_eq!(candidate(100000), 8026);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmpimrb9z_b.rs:8:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822494
- exit_code: 101
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut num = n;\n    let mut i = 0;\n    while num >= 0 {\n        if num % 11\
    \ == 0 || num % 13 == 0 {\n            if num % 10 == 7 {\n                i +=\
    \ 1;\n            }\n            if num % 100 == 7 {\n                i += 1;\n\
    \            }\n            if num % 1000 == 7 {\n                i += 1;\n  \
    \          }\n            if num % 10000 == 7 {\n                i += 1;\n   \
    \         }\n            if num % 100000 == 7 {\n                i += 1;\n   \
    \         }\n            if num % 1000000 == 7 {\n                i += 1;\n  \
    \          }\n            if num % 10000000 == 7 {\n                i += 1;\n\
    \            }\n            if num % 100000000 == 7 {\n                i += 1;\n\
    \            }\n            if num % 1000000000 == 7 {\n                i += 1;\n\
    \            }\n            if num % 10000000000 == 7 {\n                i +=\
    \ 1;\n            }\n            if num % 100000000000 == 7 {\n              \
    \  i += 1;\n            }\n            if num % 1000000000000 == 7 {\n       \
    \         i += 1;\n            }\n            if num % 10000000000000 == 7 {\n\
    \                i += 1;\n            }\n            if num % 100000000000000\
    \ == 7 {\n                i += 1;\n            }\n            if num % 1000000000000000\
    \ == 7 {\n                i += 1;\n            }\n            if num % 10000000000000000\
    \ == 7 {\n                i += 1;\n            }\n            if num % 100000000000000000\
    \ == 7 {\n                i += 1;\n            }\n            if num % 1000000000000000000\
    \ == 7 {\n                i += 1;\n            }\n        }\n        num -= 1;\n\
    \    }\n    i\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpbqu0vpvz.rs:70:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822494
- exit_code: 101
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n  let\
    \ mut num = 0;\n  for i in 1..n {\n    if (i % 11 == 0 || i % 13 == 0) && i.to_string().contains(\"\
    7\") {\n      num += 1;\n    }\n  }\n  num\n}\n\nfn main() {\n    let candidate\
    \ = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpi4w498ft.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822494
- exit_code: 101
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    (1..n).filter(|x|\
    \ {\n        let string = x.to_string();\n        let digits = string.chars().map(|x|\
    \ x.to_digit(10).unwrap()).collect::<Vec<u32>>();\n        digits.contains(&7)\
    \ && x % 11 == 0 && x % 13 == 0\n    }).count() as isize\n}\n\nfn main() {\n \
    \   let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `2`', /tmp/tmppy8l_1rm.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822495
- exit_code: 101
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut count = 0;\n    for i in 1..n {\n        let num = i.to_string();\n    \
    \    if (i % 11 == 0 || i % 13 == 0) && num.contains(\"7\") {\n            count\
    \ += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n\
    \    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79),\
    \ 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n\
    \    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n\
    \    assert_eq!(candidate(100000), 8026);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmp_w7_npok.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822495
- exit_code: 1
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..n {\n        if i % 11 == 0 || i % 13 == 0 {\n\
    \            sum += num_of_7(i);\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `num_of_7` in this scope\n --> /tmp/tmpk4zli5td.rs:6:20\n\
    \  |\n6 |             sum += num_of_7(i);\n  |                    ^^^^^^^^ not\
    \ found in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822494
- exit_code: 0
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut count = 0;\n    for i in 1..n {\n        let str_i = i.to_string();\n  \
    \      if i % 11 == 0 || i % 13 == 0 {\n            for c in str_i.chars() {\n\
    \                if c == '7' {\n                    count += 1;\n            \
    \    }\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let\
    \ candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822495
- exit_code: 1
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 1..n {\n        if i % 11 == 0 || i % 13 == 0 {\n\
    \            sum += count_seven(i);\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `count_seven` in this scope\n --> /tmp/tmp3e22tw6i.rs:6:20\n\
    \  |\n6 |             sum += count_seven(i);\n  |                    ^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822494
- exit_code: 0
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    (0..n)\n\
    \        .filter(|&i| i % 11 == 0 || i % 13 == 0)\n        .map(|i| format!(\"\
    {}\", i))\n        .fold(0, |acc, s| acc + s.matches(\"7\").count() as isize)\n\
    }\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822495
- exit_code: 0
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut res = 0;\n    for i in 1..n {\n        if i % 11 == 0 || i % 13 == 0 {\n\
    \            let mut x = i;\n            while x > 0 {\n                if x %\
    \ 10 == 7 {\n                    res += 1;\n                }\n              \
    \  x /= 10;\n            }\n        }\n    }\n    res\n}\n\nfn main() {\n    let\
    \ candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822495
- exit_code: 1
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    (1..n).filter(|x|\
    \ x % 11 == 0 || x % 13 == 0).map(|x| x.to_string()).map(|x| x.chars()).map(|x|\
    \ x.filter(|y| *y == '7').count() as isize).sum()\n}\n\nfn main() {\n    let candidate\
    \ = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0515]: cannot return value referencing function parameter `x`\n\
    \ --> /tmp/tmpadhftqvy.rs:3:82\n  |\n3 | ...map(|x| x.to_string()).map(|x| x.chars()).map(|x|\
    \ x.filter(|y| *y == '7').count() as isize).sum()\n  |                       \
    \            -^^^^^^^^\n  |                                   |\n  |         \
    \                          returns a value referencing data owned by the current\
    \ function\n  |                                   `x` is borrowed here\n  |\n\
    \  = help: use `.collect()` to allocate the iterator\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0515`.\n"
  stdout: ''
  timestamp: 1659822494
- exit_code: 0
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    (1..n).filter(|&a|\
    \ a % 11 == 0 || a % 13 == 0).map(|a| a.to_string().matches(\"7\").count() as\
    \ isize).sum()\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822495
- exit_code: 101
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    0\n\
    }\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `2`', /tmp/tmpud3iuic0.rs:9:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822493
- exit_code: 101
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpwffnkdzl.rs:3:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822493
- exit_code: 101
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    //\
    \ We want \"every eleventh or thirteenth\" element up to, but not including, n\n\
    \    let every_elev = (1..n).step_by(11);\n    let every_thirte = (1..n).step_by(13);\n\
    \    let eleven_and_thirte = every_elev.chain(every_thirte).collect::<Vec<_>>();\n\
    \    eleven_and_thirte.into_iter().filter(|x| x.to_string().contains(\"7\")).count()\
    \ as isize\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmp2u0ps1j8.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822495
- exit_code: 0
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut count = 0;\n    for num in 1..n {\n        if num % 11 == 0 || num % 13\
    \ == 0 {\n            let mut num_copy = num;\n            while num_copy > 0\
    \ {\n                if num_copy % 10 == 7 {\n                    count += 1;\n\
    \                }\n                num_copy /= 10;\n            }\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822495
- exit_code: 0
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    (1..n).fold(0,\
    \ |acc, num| {\n        if num % 11 == 0 || num % 13 == 0 {\n            acc +\
    \ format!(\"{}\", num).chars().filter(|&c| c == '7').count() as isize\n      \
    \  } else {\n            acc\n        }\n    })\n}\n\nfn main() {\n    let candidate\
    \ = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822495
- exit_code: 0
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut cnt = 0;\n    for i in 1..n {\n        if i % 11 == 0 || i % 13 == 0 {\n\
    \            cnt += i.to_string().chars().filter(|&c| c == '7').count() as isize;\n\
    \        }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n\
    \    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79),\
    \ 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n\
    \    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n\
    \    assert_eq!(candidate(100000), 8026);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822495
- exit_code: -1
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut total = 0;\n    for i in (0..n).step_by(11).step_by(13) {\n        let mut\
    \ current = i;\n        while current < n {\n            let ones = current %\
    \ 10;\n            if ones == 7 {\n                total += 1;\n            }\n\
    \            current /= 10;\n        }\n    }\n    total\n}\n\nfn main() {\n \
    \   let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659822500
- exit_code: 101
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpwffnkdzl.rs:3:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822493
- exit_code: 101
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpaloa4e47.rs:3:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822493
- exit_code: 101
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    if\
    \ n < 7 {\n        return 0;\n    }\n    let mut cnt = 1;\n    for i in (1..n\
    \ / 7).rev() {\n        if i % 11 == 0 || i % 13 == 0 {\n            cnt += 1;\n\
    \        }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n\
    \    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79),\
    \ 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n\
    \    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n\
    \    assert_eq!(candidate(100000), 8026);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpiokv3q1k.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822495
- exit_code: 0
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut count = 0;\n    for i in 1..n {\n        if i % 11 == 0 || i % 13 == 0 {\n\
    \            let mut i = i;\n            while i > 0 {\n                let digit\
    \ = i % 10;\n                if digit == 7 {\n                    count += 1;\n\
    \                }\n                i /= 10;\n            }\n        }\n    }\n\
    \    count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822495
- exit_code: 101
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpwffnkdzl.rs:3:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822493
- exit_code: 101
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut count = 0;\n    for i in 0..n {\n        if (i % 11 == 0 || i % 13 == 0)\
    \ && i.to_string().contains(\"7\") {\n            count += 1;\n        }\n   \
    \ }\n    count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpvcugp1gc.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822493
- exit_code: 101
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    n.to_string()\n\
    \        .chars()\n        .map(|c| c.to_digit(10).unwrap() as isize)\n      \
    \  .filter(|d| (d % 11 == 0 || d % 13 == 0) && *d < n)\n        .sum()\n}\n\n\
    fn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n\
    \    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100),\
    \ 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n\
    \    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `2`', /tmp/tmplc6e8odr.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822495
- exit_code: 101
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    (1..n).filter(|x|\
    \ {\n        x % 7 == 0 || x % 11 == 0 || x % 13 == 0\n    }).map(|x| {\n    \
    \    x.to_string().chars().filter(|c| *c == '7').count() as isize\n    }).sum()\n\
    }\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmplc_m14an.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822495
- exit_code: 1
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    (0..n)\n\
    \        .filter(|i| (i % 11 == 0) || (i % 13 == 0))\n        .map(|i| i.to_string())\n\
    \        .map(|s| {\n            s.chars()\n                .filter(|c| c.to_digit(10).unwrap()\
    \ == 7)\n                .count()\n        })\n        .sum()\n}\n\nfn main()\
    \ {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<usize>` is not satisfied\n  -->\
    \ /tmp/tmp8oamvwd0.rs:11:10\n   |\n11 |         .sum()\n   |          ^^^ the\
    \ trait `Sum<usize>` is not implemented for `isize`\n   |\n   = help: the following\
    \ implementations were found:\n             <isize as Sum<&'a isize>>\n      \
    \       <isize as Sum>\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659822495
- exit_code: 1
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    (1..n).filter(|x|\
    \ [11, 13].contains(&x % 100)).map(|x| x.to_string()).fold(0, |sum, x| {\n   \
    \     sum + x.chars().filter(|c| *c == '7').count() as isize\n    })\n}\n\nfn\
    \ main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n\
    \    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100),\
    \ 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n\
    \    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n --> /tmp/tmpfdfqpdbw.rs:3:44\n\
    \  |\n3 |     (1..n).filter(|x| [11, 13].contains(&x % 100)).map(|x| x.to_string()).fold(0,\
    \ |sum, x| {\n  |                                         -- ^ --- {integer}\n\
    \  |                                         |\n  |                          \
    \               &&isize\n  |\nhelp: `%` can be used on `isize`, you can dereference\
    \ `&x`\n  |\n3 |     (1..n).filter(|x| [11, 13].contains(*&x % 100)).map(|x| x.to_string()).fold(0,\
    \ |sum, x| {\n  |                                         +\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  stdout: ''
  timestamp: 1659822495
- exit_code: 0
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut s = 0;\n    for i in 1..n {\n        if i % 11 == 0 || i % 13 == 0 {\n \
    \           let mut j = i;\n            while j > 0 {\n                if j %\
    \ 10 == 7 {\n                    s += 1;\n                }\n                j\
    \ /= 10;\n            }\n        }\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822495
- exit_code: 101
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    return\
    \ (0..n)\n        .filter(|x| (x % 11 == 0) || (x % 13 == 0))\n        .filter(|x|\
    \ x.to_string().contains(\"7\"))\n        .count() as isize;\n}\n\nfn main() {\n\
    \    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpjz4nq2qi.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822495
- exit_code: 101
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut count = 0;\n    for i in (1..n).rev() {\n        if i % 11 == 0 || i % 13\
    \ == 0 {\n            if i.to_string().contains(\"7\") {\n                count\
    \ += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let\
    \ candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpk8kkuqec.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822495
- exit_code: 0
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 1..n {\n        if i % 11 == 0 || i % 13 == 0 {\n\
    \            let mut x = i;\n            while x > 0 {\n                if x %\
    \ 10 == 7 {\n                    sum += 1;\n                }\n              \
    \  x /= 10;\n            }\n        }\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822495
- exit_code: 0
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut count = 0;\n    for i in 0..n {\n        if i % 11 == 0 || i % 13 == 0 {\n\
    \            let mut num = i;\n            while num > 0 {\n                if\
    \ num % 10 == 7 {\n                    count += 1;\n                }\n      \
    \          num /= 10;\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822495
- exit_code: 0
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    //\
    \ Complete this function\n    let mut count = 0;\n    for i in 1..n {\n      \
    \  if i % 11 == 0 || i % 13 == 0 {\n            let n = i.to_string();\n     \
    \       for c in n.chars() {\n                if c == '7' {\n                \
    \    count += 1;\n                }\n            }\n        }\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822495
- exit_code: 101
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut count = 0;\n    for i in 0..n {\n        if i % 11 == 0 {\n            count\
    \ += 1;\n        } else if i % 13 == 0 {\n            count += 1;\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `0`', /tmp/tmpx1mhljws.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822495
- exit_code: 101
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut count = 0;\n    for i in 0..n {\n        let mut tmp = i;\n        while\
    \ tmp > 0 {\n            if tmp % 10 == 7 {\n                count += 1;\n   \
    \         }\n            tmp /= 10;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `0`', /tmp/tmp1f04gs9y.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822495
- exit_code: 101
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut c = 0;\n    for i in 1..n {\n        let string = i.to_string();\n     \
    \   let mut digits = vec![];\n        for j in string.chars() {\n            digits.push(j.to_digit(10).unwrap());\n\
    \        }\n        if digits.contains(&7) && (i % 11 == 0 || i % 13 == 0) {\n\
    \            c += 1;\n        }\n    }\n    c\n}\n\nfn main() {\n    let candidate\
    \ = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpka5_i4wx.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822495
- exit_code: 0
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    (1..n).filter(|x|\
    \ x % 11 == 0 || x % 13 == 0).map(|x| x.to_string()).fold(0, |acc, x| acc + x.chars().filter(|c|\
    \ *c == '7').count() as isize)\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n\
    \    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79),\
    \ 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n\
    \    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n\
    \    assert_eq!(candidate(100000), 8026);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822495
- exit_code: 0
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n  let\
    \ mut count = 0;\n  for i in 1..n {\n    if i % 11 == 0 || i % 13 == 0 {\n   \
    \   count += i.to_string().chars().filter(|&c| c == '7').count() as isize;\n \
    \   }\n  }\n  count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822495
- exit_code: 0
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    (1..n).filter(|x|\
    \ *x % 11 == 0 || *x % 13 == 0).map(|x| {\n        x.to_string().chars().filter(|y|\
    \ *y == '7').count() as isize\n    }).sum()\n}\n\nfn main() {\n    let candidate\
    \ = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822495
- exit_code: 0
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut result = 0;\n    for i in 0..n {\n        if i % 11 == 0 || i % 13 == 0\
    \ {\n            let mut number = i;\n            while number > 0 {\n       \
    \         if number % 10 == 7 {\n                    result += 1;\n          \
    \      }\n                number /= 10;\n            }\n        }\n    }\n   \
    \ result\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822495
- exit_code: 0
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    (0..n)\n\
    \        .filter(|&x| x % 11 == 0 || x % 13 == 0)\n        .map(|x| x.to_string())\n\
    \        .map(|x| x.chars().filter(|&x| x == '7').count() as isize)\n        .sum()\n\
    }\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822495
- exit_code: 101
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 0..n {\n        if (i % 11 == 0 || i % 13 == 0) &&\
    \ i.to_string().contains(\"7\") {\n            sum += 1;\n        }\n    }\n \
    \   sum\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmp_80cexm5.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822495
- exit_code: 0
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut count = 0;\n    for i in 1..n {\n        if i % 11 == 0 || i % 13 == 0 {\n\
    \            let mut x = i;\n            while x > 0 {\n                let d\
    \ = x % 10;\n                if d == 7 {\n                    count += 1;\n  \
    \              }\n                x /= 10;\n            }\n        }\n    }\n\
    \    count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822495
- exit_code: 101
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    (1..n).filter(|x|\
    \ {\n        let s = x.to_string();\n        x % 11 == 0 || x % 13 == 0 && (s.contains('7')\
    \ || s.contains('7'))\n    }).count() as isize\n}\n\nfn main() {\n    let candidate\
    \ = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `0`', /tmp/tmpr3nob14e.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822495
- exit_code: 101
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    (1..n).filter(|x|\
    \ x % 11 == 0 || x % 13 == 0).filter(|x| x.to_string().contains(\"7\")).count()\
    \ as isize\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpq7xpv3an.rs:9:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822495
- exit_code: 101
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 1..n {\n        if i % 7 == 0 {\n            let\
    \ mut x = i;\n            while x > 0 {\n                if x % 10 == 7 {\n  \
    \                  sum += 1;\n                }\n                x /= 10;\n  \
    \          }\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate =\
    \ fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmpi8lmu8dk.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822495
- exit_code: 101
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut cnt = 0;\n    for num in 0..n {\n        if (num % 11 == 0 || num % 13 ==\
    \ 0) && num.to_string().contains('7') {\n            cnt += 1;\n        }\n  \
    \  }\n    cnt\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpwz8pghsa.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822495
- exit_code: 101
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    (1..n).filter(|x|\
    \ (x % 11 == 0 || x % 13 == 0) && x.to_string().contains(\"7\")).count() as isize\n\
    }\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmps0ie_g9e.rs:9:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822494
- exit_code: 0
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for num in 1..n {\n        if num % 11 == 0 || num % 13 ==\
    \ 0 {\n            let mut digit = num;\n            while digit > 0 {\n     \
    \           let d = digit % 10;\n                if d == 7 {\n               \
    \     sum += 1;\n                }\n                digit /= 10;\n           \
    \ }\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n\
    \    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79),\
    \ 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n\
    \    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n\
    \    assert_eq!(candidate(100000), 8026);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822495
- exit_code: 0
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 1..n {\n        if i % 11 == 0 || i % 13 == 0 {\n\
    \            let s = i.to_string();\n            for c in s.chars() {\n      \
    \          if c == '7' {\n                    sum += 1;\n                }\n \
    \           }\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822495
- exit_code: 101
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    (0..n)\n\
    \        .filter(|x| x % 11 == 0 || x % 13 == 0)\n        .filter(|x| x.to_string().contains('7'))\n\
    \        .count() as isize\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n\
    \    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79),\
    \ 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n\
    \    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n\
    \    assert_eq!(candidate(100000), 8026);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpmr3w543o.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822495
- exit_code: 101
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    (1..n).filter(|x|\
    \ x % 11 == 0 || x % 13 == 0).filter(|x| x.to_string().contains(\"7\")).count()\
    \ as isize\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpq7xpv3an.rs:9:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822495
- exit_code: 0
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    (0..n)\n\
    \        .filter(|&i| i % 11 == 0 || i % 13 == 0)\n        .map(|i| format!(\"\
    {}\", i))\n        .map(|i| i.matches(\"7\").count() as isize)\n        .sum()\n\
    }\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822495
- exit_code: 101
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    (1..n).filter(|x|\
    \ x % 11 == 0 || x % 13 == 0).filter(|x| x.to_string().contains(\"7\")).count()\
    \ as isize\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpq7xpv3an.rs:9:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822495
- exit_code: 0
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut count = 0;\n    for i in 1..n {\n        if i % 11 == 0 || i % 13 == 0 {\n\
    \            let s = i.to_string();\n            for c in s.chars() {\n      \
    \          if c == '7' {\n                    count += 1;\n                }\n\
    \            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822496
- exit_code: 101
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n  let\
    \ mut s = 0;\n  for n in (1..n).rev() {\n    let mut n2 = n;\n    while n2 > 0\
    \ {\n      if n2 % 10 == 7 {\n        s += 1;\n      }\n      n2 /= 10;\n    }\n\
    \    if n % 11 == 0 || n % 13 == 0 {\n      s -= 1;\n    }\n  }\n  s\n}\n\nfn\
    \ main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n\
    \    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100),\
    \ 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n\
    \    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-2`,\n right: `0`', /tmp/tmprdv3u42r.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822495
- exit_code: 0
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 1..n {\n        if i % 11 == 0 || i % 13 == 0 {\n\
    \            sum += i.to_string().matches(\"7\").count() as isize;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822495
- exit_code: 0
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut count = 0;\n    for i in 1..n {\n        if i % 11 == 0 || i % 13 == 0 {\n\
    \            count += i.to_string().chars().filter(|&c| c == '7').count() as isize;\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n\
    \    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79),\
    \ 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n\
    \    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n\
    \    assert_eq!(candidate(100000), 8026);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822495
- exit_code: 0
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut seven_count = 0;\n    for i in 0..n {\n        if i % 11 == 0 || i % 13\
    \ == 0 {\n            seven_count += i.to_string().matches(\"7\").count() as isize;\n\
    \        }\n    }\n    seven_count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n\
    \    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79),\
    \ 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n\
    \    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n\
    \    assert_eq!(candidate(100000), 8026);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822496
- exit_code: 1
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ digits = num_to_vec(n);\n    let mut count = 0;\n    for i in 0..digits.len()\
    \ {\n        if digits[i] == 7 {\n            count += 1;\n        }\n    }\n\
    \    count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `num_to_vec` in this scope\n --> /tmp/tmpaek11mxt.rs:3:18\n\
    \  |\n3 |     let digits = num_to_vec(n);\n  |                  ^^^^^^^^^^ not\
    \ found in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822495
- exit_code: 101
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpwffnkdzl.rs:3:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822493
- exit_code: -1
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    use\
    \ std::convert::TryInto;\n    use std::iter::repeat;\n    use std::mem::replace;\n\
    \n    let mut cnt = 0;\n    let mut n: isize = n - 1;\n    while n > 0 {\n   \
    \     let mut digits = repeat(0).take(11).collect::<Vec<_>>();\n        let mut\
    \ idx = 0;\n        while n > 0 {\n            digits[idx] = n % 10;\n       \
    \     n /= 10;\n            idx += 1;\n        }\n        for i in 0..(idx / 2)\
    \ {\n            digits.swap(i, idx - i - 1);\n        }\n        let mut res\
    \ = 0;\n        for i in 0..idx {\n            res = res * 10 + digits[i];\n \
    \       }\n        if res % 11 == 0 || res % 13 == 0 {\n            for i in 0..idx\
    \ {\n                if digits[i] == 7 {\n                    cnt += 1;\n    \
    \            }\n            }\n        }\n        n = replace(&mut res, 0);\n\
    \    }\n    cnt\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659822501
- exit_code: 101
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut count = 0;\n    for i in 0..n {\n        if (i % 11 == 0 || i % 13 == 0)\
    \ && i.to_string().contains(\"7\") {\n            count += 1;\n        }\n   \
    \ }\n    count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpvcugp1gc.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822493
- exit_code: 0
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut count = 0;\n    for i in 1..n {\n        if i % 11 == 0 || i % 13 == 0 {\n\
    \            let mut i = i;\n            while i > 0 {\n                if i %\
    \ 10 == 7 {\n                    count += 1;\n                }\n            \
    \    i /= 10;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822493
- exit_code: 0
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut total = 0;\n    for i in (1..n).rev() {\n        if i % 11 == 0 || i % 13\
    \ == 0 {\n            let mut digits = i.to_string();\n            while digits.len()\
    \ > 0 {\n                if digits.pop().unwrap() == '7' {\n                 \
    \   total += 1;\n                }\n            }\n        }\n    }\n    total\n\
    }\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822496
- exit_code: 101
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    //\
    \ TODO\n    0\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `2`', /tmp/tmph4flhmv3.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822496
- exit_code: 0
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut r = 0;\n    for i in 1..n {\n        if i % 11 == 0 || i % 13 == 0 {\n \
    \           r += i.to_string().chars().filter(|x| *x == '7').count() as isize;\n\
    \        }\n    }\n    r\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n \
    \   assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79),\
    \ 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n\
    \    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n\
    \    assert_eq!(candidate(100000), 8026);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822496
- exit_code: 0
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut total = 0;\n    for m in 1..n {\n        if m % 11 == 0 || m % 13 == 0 {\n\
    \            let mut c = m;\n            while c > 0 {\n                if c %\
    \ 10 == 7 {\n                    total += 1;\n                }\n            \
    \    c /= 10;\n            }\n        }\n    }\n    total\n}\n\nfn main() {\n\
    \    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822496
- exit_code: 101
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut result = 0;\n    for i in 1..n {\n        if (i % 11 == 0 || i % 13 == 0)\
    \ && i.to_string().contains(\"7\") {\n            result += 1;\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpebyl16nx.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822493
- exit_code: 0
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut count = 0;\n    for i in 0..n {\n        if i % 11 == 0 || i % 13 == 0 {\n\
    \            let mut n = i;\n            while n > 0 {\n                if n %\
    \ 10 == 7 {\n                    count += 1;\n                }\n            \
    \    n /= 10;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822496
- exit_code: 1
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    return\
    \ (0..n)\n        .filter(|x| x % 11 == 0 || x % 13 == 0)\n        .map(|x| x.to_string())\n\
    \        .flat_map(|x| x.chars())\n        .filter(|x| x == &'7')\n        .count()\
    \ as isize;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: SyntaxError
  stderr: "error[E0515]: cannot return value referencing function parameter `x`\n\
    \ --> /tmp/tmpejpnz6ne.rs:6:23\n  |\n6 |         .flat_map(|x| x.chars())\n  |\
    \                       -^^^^^^^^\n  |                       |\n  |          \
    \             returns a value referencing data owned by the current function\n\
    \  |                       `x` is borrowed here\n  |\n  = help: use `.collect()`\
    \ to allocate the iterator\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0515`.\n"
  stdout: ''
  timestamp: 1659822495
- exit_code: 101
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpaloa4e47.rs:3:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822493
- exit_code: 101
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut count = 0;\n    for i in 0..n {\n        let mut a = (i / 11) % 10;\n  \
    \      let mut b = (i / 13) % 10;\n        if a == 7 || b == 7 {\n           \
    \ count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmp__qwwb5m.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822496
- exit_code: 101
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    if\
    \ n < 0 {\n        return 0;\n    }\n    let mut result = 0;\n    for i in (1..n)\
    \ {\n        if (i % 11 == 0 || i % 13 == 0) && i.to_string().contains(\"7\")\
    \ {\n            result += 1;\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpvf2keplf.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822496
- exit_code: 101
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut result = 0;\n    for i in 0..n {\n        if (i % 11 == 0 || i % 13 == 0)\
    \ && i.to_string().contains(\"7\") {\n            result += 1;\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpvbyzu6b6.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822496
- exit_code: 0
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut sum = 0;\n    for i in 1..n {\n        let mut x = i;\n        let mut sevens\
    \ = 0;\n        while x > 0 {\n            if x % 10 == 7 {\n                sevens\
    \ += 1;\n            }\n            x /= 10;\n        }\n        if sevens > 0\
    \ && (i % 11 == 0 || i % 13 == 0) {\n            sum += sevens;\n        }\n \
    \   }\n    sum\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822496
- exit_code: 101
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut c: isize = 0;\n    for i in 1..n {\n        if i % 11 == 0 || i % 13 ==\
    \ 0 {\n            if i.to_string().contains(\"7\") {\n                c += 1;\n\
    \            }\n        }\n    }\n    c\n}\n\nfn main() {\n    let candidate =\
    \ fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmp8idh2mz8.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822496
