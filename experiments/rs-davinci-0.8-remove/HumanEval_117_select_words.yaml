name: HumanEval_117_select_words
language: rs
prompt: "/// Given a string s and a natural number n, you have been tasked to implement\
  \ \n/// a function that returns a list of all words from string s that contain exactly\
  \ \n/// n consonants, in order these words appear in the string s.\n/// If the string\
  \ s is empty then the function should return an empty list.\n/// Note: you may assume\
  \ the input string contains only letters and spaces.\n/// Examples:\nfn select_words(s:\
  \ String, n: isize) -> String {\n"
tests: "}\n\nfn main() {\n    let candidate = select_words;\n    assert_eq!(candidate(String::from(\"\
  Mary had a little lamb\"), 4), vec![String::from(\"little\")]);\n    assert_eq!(candidate(String::from(\"\
  Mary had a little lamb\"), 3), vec![String::from(\"Mary\"), String::from(\"lamb\"\
  )]);\n    assert_eq!(candidate(String::from(\"simple white space\"), 2), String::new());\n\
  \    assert_eq!(candidate(String::from(\"Hello world\"), 4), vec![String::from(\"\
  world\")]);\n    assert_eq!(candidate(String::from(\"Uncle sam\"), 3), vec![String::from(\"\
  Uncle\")]);\n    assert_eq!(candidate(String::from(\"\"), 4), String::new());\n\
  \    assert_eq!(candidate(String::from(\"a b c d e f\"), 1), vec![String::from(\"\
  b\"), String::from(\"c\"), String::from(\"d\"), String::from(\"f\")]);\n}\n"
completions: ["    let words: Vec<&str> = s.split_whitespace().collect();\n    let\
    \ mut cons: Vec<&str> = vec![];\n    for word in words {\n        let mut count\
    \ = 0;\n        for ch in word.chars() {\n            if ch.is_ascii_alphabetic()\
    \ && !ch.is_ascii_lowercase() {\n                count += 1;\n            }\n\
    \        }\n        if count == n {\n            cons.push(word);\n        }\n\
    \    }\n    return cons.join(\" \");", "    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    ;\n    let vowels = \"aeiou\";\n    s.split(\" \")\n        .filter(|&word| {\n\
    \            word.chars()\n                .filter(|&letter| consonants.contains(letter))\n\
    \                .count() as isize == n\n        })\n        .collect::<Vec<&str>>()\n\
    \        .join(\" \")", "    // write the code here\n    String::new()", "   \
    \ if s.is_empty() {\n        return \"\".to_string();\n    }\n    s.split_whitespace()\n\
    \        .filter(|x| count_vowels(x) == n)\n        .collect::<Vec<&str>>()\n\
    \        .join(\" \")", "    let mut result = String::new();\n    for word in\
    \ s.split_whitespace() {\n        if count_consonants(word) == n {\n         \
    \   result.push_str(word);\n            result.push(' ');\n        }\n    }\n\
    \    if result.is_empty() { return String::new(); }\n    result.pop();\n    result",
  "  let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n  s.split_whitespace()\n    .filter(|word|\
    \ {\n      word.chars()\n        .filter(|c| !vowels.contains(c))\n        .count()\
    \ as isize == n\n    })\n    .collect::<Vec<&str>>()\n    .join(\" \")", "   \
    \ s.split_whitespace()\n        .filter(|word| word.matches(|c: char| \"BCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz\"\
    .contains(c)).count() as isize == n)\n        .collect::<Vec<&str>>()\n      \
    \  .join(\" \")", "    let mut rv = String::new();\n    for word in s.split_whitespace()\
    \ {\n        if consonants(word) == n {\n            rv.push_str(word);\n    \
    \        rv.push(' ');\n        }\n    }\n    rv.trim().to_string()", "    let\
    \ mut cons: Vec<&str> = Vec::new();\n    let mut vowels: Vec<&str> = Vec::new();\n\
    \    let mut result: Vec<&str> = Vec::new();\n    let mut count: isize = 0;\n\
    \    let mut item: &str = \"\";\n    let vowels_list: &[char] = &['a', 'e', 'i',\
    \ 'o', 'u'];\n    s.split(\" \").for_each(|x| {\n        count = 0;\n        for\
    \ x in x.chars() {\n            item = &x.to_string();\n            if !vowels_list.contains(&x)\
    \ {\n                cons.push(item);\n                count += 1;\n         \
    \   } else {\n                vowels.push(item);\n            }\n        }\n \
    \       if count == n {\n            result.push(x);\n        }\n        cons.clear();\n\
    \        vowels.clear();\n    });\n    result.join(\" \")", "    let mut cons_cnt\
    \ = 0;\n    let mut tmp = String::new();\n    let mut result = String::new();\n\
    \    for c in s.chars() {\n        if c == ' ' {\n            if cons_cnt == n\
    \ {\n                result.push_str(&tmp);\n                result.push(' ');\n\
    \            }\n            cons_cnt = 0;\n            tmp.clear();\n        }\
    \ else {\n            tmp.push(c);\n            match c {\n                'a'\
    \ | 'e' | 'i' | 'o' | 'u' | 'y' => (),\n                _ => cons_cnt += 1,\n\
    \            }\n        }\n    }\n    if cons_cnt == n {\n        result.push_str(&tmp);\n\
    \    }\n    result", "    s.split_whitespace()\n        .map(|word| (word, count_consonants(word)))\n\
    \        .filter(|(_, count)| *count == n)\n        .map(|(word, _)| word)\n \
    \       .collect::<Vec<&str>>()\n        .join(\" \")", "    let mut ret = String::new();\n\
    \    let mut is_first = true;\n    for word in s.split_whitespace() {\n      \
    \  let char_iter = word.chars();\n        let word_consonants: String = char_iter.filter(|c|\
    \ !c.is_vowel()).collect();\n        if word_consonants.len() as isize == n {\n\
    \            if is_first {\n                is_first = false;\n            } else\
    \ {\n                ret.push_str(\" \");\n            }\n            ret.push_str(word);\n\
    \        }\n    }\n    ret", "    let mut ret: String = String::new();\n    let\
    \ mut count: isize = 0;\n    let mut word: String = String::new();\n    for c\
    \ in s.chars() {\n        if c.is_alphabetic() {\n            if !is_vowel(c)\
    \ {\n                count += 1;\n            }\n            word.push(c);\n \
    \       } else {\n            if count == n {\n                ret.push_str(&word);\n\
    \                ret.push(' ');\n            }\n            count = 0;\n     \
    \       word = String::new();\n        }\n    }\n    if count == n {\n       \
    \ ret.push_str(&word);\n    }\n    ret.trim().to_string()", "    let mut sentence\
    \ = String::new();\n    let s: Vec<&str> = s.split_whitespace().collect();\n \
    \   for word in s {\n        let mut counter = 0;\n        for c in word.chars()\
    \ {\n            if !c.is_ascii_vowel() {\n                counter += 1;\n   \
    \         }\n        }\n        if counter == n {\n            sentence.push_str(&format!(\"\
    {} \", word));\n        }\n    }\n    sentence.trim().to_string()", "    let mut\
    \ words = String::new();\n    let xs = s.split(\" \");\n    for x in xs {\n  \
    \      let ys = x.chars();\n        let mut cons = 0;\n        for y in ys {\n\
    \            match y {\n                'a' | 'e' | 'i' | 'o' | 'u' | 'y' => (),\n\
    \                _ => cons += 1,\n            }\n        }\n        if cons ==\
    \ n {\n            words.push_str(&x);\n            words.push(' ');\n       \
    \ }\n    }\n    words.trim().to_string()", "    let s = s.to_lowercase();\n  \
    \  let s: Vec<&str> = s.split_whitespace().collect();\n    let mut res = String::new();\n\
    \    for w in s {\n        let c = w.chars().filter(|x| is_consonant(x)).count();\n\
    \        if c as isize == n {\n            res += w;\n            res += \" \"\
    ;\n        }\n    }\n    if res.len() == 0 {\n        res\n    } else {\n    \
    \    res.pop();\n        res\n    }", "    if s.is_empty() {\n        return \"\
    \".to_string();\n    }\n    let mut words = vec![];\n    let mut word = String::new();\n\
    \    for c in s.chars() {\n        if c == ' ' {\n            words.push(word);\n\
    \            word = String::new();\n        } else {\n            word.push(c);\n\
    \        }\n    }\n    words.push(word);\n    let mut result = String::new();\n\
    \    for word in words {\n        if consonants_count(&word) == n {\n        \
    \    result.push_str(&word);\n            result.push(' ');\n        }\n    }\n\
    \    if result.len() > 0 {\n        result.remove(result.len() - 1);\n    }\n\
    \    result", "    let mut ret = String::new();\n    let v: Vec<&str> = s.split(\"\
    \ \").collect();\n    for word in v {\n        if count_consonants(word) == n\
    \ {\n            ret.push_str(word);\n            ret.push(' ');\n        }\n\
    \    }\n    ret.trim().to_string()", '    unimplemented!()', "    let words: Vec<&str>\
    \ = s.split(\" \").collect();\n    let words_filtered: Vec<&str> = words.iter().filter(|&w|\
    \ num_consonants(w) == n)\n        .map(|&w| w.to_string()).collect();\n    words_filtered.join(\"\
    \ \")", "    let mut res = String::new();\n    let mut num = 0;\n    let mut word\
    \ = String::new();\n    for c in s.chars() {\n        if c.is_alphabetic() {\n\
    \            if c.is_uppercase() {\n                let tmp = c.to_lowercase().to_string();\n\
    \                word.push_str(&tmp);\n            } else {\n                word.push(c);\n\
    \            }\n        } else {\n            if word.len() == n as usize {\n\
    \                if !res.is_empty() {\n                    res.push(' ');\n  \
    \              }\n                res.push_str(&word);\n            }\n      \
    \      word.clear();\n        }\n    }\n    if word.len() == n as usize {\n  \
    \      if !res.is_empty() {\n            res.push(' ');\n        }\n        res.push_str(&word);\n\
    \    }\n    res", "    let mut result = String::new();\n    for word in s.split(\"\
    \ \") {\n        let mut n_consonants = 0;\n        for letter in word.chars()\
    \ {\n            match letter {\n                'a' | 'e' | 'i' | 'o' | 'u' |\
    \ 'y' => {},\n                _ => n_consonants += 1,\n            }\n       \
    \ }\n        if n_consonants == n {\n            result.push_str(word);\n    \
    \        result.push(' ');\n        }\n    }\n    if result.len() == 0 {\n   \
    \     result\n    } else {\n        result.pop();\n        result\n    }", " \
    \   s.split(\" \")\n     .filter(|x| x.chars().filter(|x| \"aeiou\".contains(*x)).count()\
    \ as isize == n)\n     .map(|x| x.to_string())\n     .collect::<Vec<String>>()\n\
    \     .join(\" \")", "    let v: Vec<&str> = s.split_whitespace().collect();\n\
    \    let mut selected_v: Vec<&str> = Vec::new();\n    for word in v {\n      \
    \  let v2: Vec<char> = word.chars().collect();\n        let mut counter = 0;\n\
    \        for c in v2 {\n            if !(c == 'a' || c == 'e' || c == 'i' || c\
    \ == 'o' || c == 'u') {\n                counter += 1;\n            }\n      \
    \  }\n        if counter == n {\n            selected_v.push(word);\n        }\n\
    \    }\n    let mut new_s = String::new();\n    for word in selected_v {\n   \
    \     new_s.push_str(word);\n        new_s.push(' ');\n    }\n    if new_s.len()\
    \ > 0 {\n        new_s.pop();\n    }\n    new_s", "    s.split_whitespace()\n\
    \     .filter(|w| w.chars().filter(|c| \"bcdfghjklmnpqrstvwxyz\".contains(*c)).count()\
    \ as isize == n)\n     .map(String::from)\n     .collect::<Vec<String>>()\n  \
    \   .join(\" \")", "    s.split(\" \")\n        .filter(|w| w.chars().filter(|c|\
    \ c.is_ascii_alphabetic() && !c.is_ascii_vowel()).count() as isize == n)\n   \
    \     .collect::<Vec<&str>>()\n        .join(\" \")", "    let words: Vec<&str>\
    \ = s.split(\" \").collect();\n    let mut result: Vec<&str> = Vec::new();\n \
    \   for word in words {\n        let count = count_consonants(word);\n       \
    \ if count == n {\n            result.push(word);\n        }\n    }\n    let result_string\
    \ = result.join(\" \");\n    result_string", "    let mut arr = s.split_whitespace().collect::<Vec<&str>>();\n\
    \    arr.retain(|&x| x.matches(|c: char| !c.is_vowel()).count() as isize == n);\n\
    \    arr.join(\" \")", "  let vowels = \"AEIOUaeiou\";\n  let chars = s.chars().filter(|&c|\
    \ vowels.find(c).is_none()).count();\n  if n == chars as isize { return s; }\n\
    \  String::new()", "    let mut words: Vec<String> = vec![];\n    let mut temp:\
    \ String = String::new();\n    for i in s.chars() {\n        if i == ' ' {\n \
    \           words.push(temp);\n            temp = String::new();\n        } else\
    \ {\n            temp.push(i);\n        }\n    }\n    words.push(temp);\n    words.retain(|word|\
    \ word.matches(|x| \"aeiou\".contains(x)).count() as isize == n);\n    words.join(\"\
    \ \")", "    let mut result = String::new();\n    let s = s.to_lowercase();\n\
    \    for word in s.split_whitespace() {\n        let mut counter = 0;\n      \
    \  for c in word.chars() {\n            if \"bcdfghjklmnpqrstvwxyz\".contains(c)\
    \ {\n                counter += 1;\n            }\n        }\n        if counter\
    \ == n as usize {\n            result.push_str(word);\n            result.push('\
    \ ');\n        }\n    }\n    result.trim().to_string()", "    let mut res = String::new();\n\
    \    for word in s.split_whitespace() {\n        if vowels(word) == n {\n    \
    \        res += \" \";\n            res += word;\n        }\n    }\n    res.trim().to_string()",
  "    s.split_whitespace()\n     .filter(|w| w.chars().filter(|c| \"bcdfghjklmnpqrstvwxyz\"\
    .contains(*c)).count() as isize == n)\n     .collect::<Vec<&str>>()\n     .join(\"\
    \ \")", "    let mut res = Vec::new();\n    for word in s.split_whitespace() {\n\
    \        let mut v = Vec::new();\n        for c in word.chars() {\n          \
    \  v.push(c);\n        }\n        let mut is_consonant = |x: &char| -> bool {\n\
    \            return x != &'a' && x != &'e' && x != &'i' && x != &'o' && x != &'u';\n\
    \        };\n        let vv: Vec<char> = v.iter().filter(is_consonant).collect();\n\
    \        if vv.len() as isize == n {\n            res.push(word.to_string());\n\
    \        }\n    }\n    return res.join(\" \");", "    s.split_whitespace()\n \
    \       .filter(|s| consonants(s) == n)\n        .collect::<Vec<&str>>()\n   \
    \     .join(\" \")", "    let filtered: Vec<String> = s.split_whitespace()\n \
    \       .filter(|word| word.chars()\n            .filter(|letter| is_consonant(*letter))\n\
    \            .count() as isize == n)\n        .map(|word| word.to_string())\n\
    \        .collect();\n    filtered.join(\" \")", "    let mut result = String::new();\n\
    \    let v: Vec<&str> = s.split(\" \").collect();\n    for x in v {\n        if\
    \ n == x.len() as isize - x.matches(|c: char| c.is_vowel()).count() as isize {\n\
    \            result.push_str(x);\n            result.push(' ');\n        }\n \
    \   }\n    if result.len() > 0 {\n        result.pop();\n    }\n    result", " \
    \   let (mut consonants, mut vowels) = (0, 0);\n    let mut result = String::new();\n\
    \    for ch in s.chars() {\n        match ch {\n            'a' | 'e' | 'i' |\
    \ 'o' | 'u' => vowels += 1,\n            _ => consonants += 1,\n        }\n  \
    \      if ch == ' ' {\n            if consonants == n {\n                result.push_str(\"\
    \\n\");\n            }\n            consonants = 0;\n            vowels = 0;\n\
    \        } else {\n            result.push(ch);\n        }\n    }\n    if consonants\
    \ == n {\n        result.push_str(\"\\n\");\n    }\n    result", "  let v: Vec<_>\
    \ = s.split_whitespace().collect();\n  let mut out = String::new();\n  for word\
    \ in v {\n    let mut ct = 0;\n    for ch in word.chars() {\n      if !VOWELS.contains(ch)\
    \ {\n        ct += 1;\n      }\n    }\n    if ct == n {\n      out.push_str(word);\n\
    \      out.push(' ');\n    }\n  }\n  out.trim().to_string()", "    let mut vector\
    \ = s.split_whitespace().collect::<Vec<&str>>();\n    vector.retain(|s| cons_count(s)\
    \ == n);\n    vector.join(\" \")", "    let mut words: Vec<String> = Vec::new();\n\
    \    s.split_whitespace().for_each(|word| {\n        if is_word_valid(word, n)\
    \ {\n            words.push(word.to_string());\n        }\n    });\n    words.join(\"\
    \ \")", "    let mut res: Vec<String> = Vec::new();\n    let v: Vec<&str> = s.split_whitespace().collect();\n\
    \    for (i, word) in v.iter().enumerate() {\n        let mut counter = 0;\n \
    \       for c in word.chars() {\n            if !is_vowel(c) {\n             \
    \   counter += 1;\n            }\n        }\n        if counter == n {\n     \
    \       res.push(String::from(*word));\n        }\n    }\n    res.join(\" \")",
  "    let mut result = String::new();\n    let mut is_first = true;\n    let vowels\
    \ = \"AEIOUaeiou\";\n    for word in s.split(\" \") {\n        let mut count =\
    \ 0;\n        for ch in word.chars() {\n            if !vowels.contains(ch) {\n\
    \                count += 1;\n            }\n        }\n        if count == n\
    \ {\n            if is_first {\n                is_first = false;\n          \
    \  } else {\n                result.push(' ');\n            }\n            result.push_str(word);\n\
    \        }\n    }\n    result", "    let mut result = String::new();\n    let\
    \ words = s.split(\" \");\n    for word in words {\n        let vowels = \"aeiouAEIOU\"\
    ;\n        let len = word.chars().filter(|x| !vowels.contains(*x)).count();\n\
    \        if len == n as usize {\n            result.push_str(word);\n        \
    \    result.push(' ');\n        }\n    }\n    let len = result.len();\n    if\
    \ len > 0 {\n        result.truncate(len - 1);\n    }\n    result", "    let alpha\
    \ = \"aeiouy\".to_string();\n    let s = s.chars().filter(|c| !alpha.contains(c)).collect::<String>();\n\
    \    let mut arr = s.split_whitespace().filter(|&s| s.len() as isize == n).collect::<Vec<&str>>();\n\
    \    arr.sort();\n    arr.join(\" \")", '    "".to_string()', "    // collect\
    \ the words into a vector\n    let mut words: Vec<String> = s.split_whitespace().map(String::from).collect();\n\
    \    let mut words_copy = words.clone();\n    // how many consonants\n    let\
    \ consonants = vec![\"B\", \"C\", \"D\", \"F\", \"G\", \"H\", \"J\", \"K\", \"\
    L\", \"M\", \"N\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"V\", \"W\", \"X\", \"\
    Y\", \"Z\"];\n    // count consonents of each word\n    let mut word_consonants\
    \ = Vec::new();\n    for word in words.iter() {\n        let mut count = 0;\n\
    \        for letter in word.chars() {\n            if consonants.contains(&letter.to_uppercase().to_string().as_str())\
    \ {\n                count += 1;\n            }\n        }\n        word_consonants.push(count);\n\
    \    }\n    // remove the ones with less than n consonants\n    for i in 0..word_consonants.len()\
    \ {\n        if word_consonants[i] != n {\n            words_copy.remove(i);\n\
    \        }\n    }\n    // join the words\n    words_copy.join(\" \")", "    let\
    \ mut v: Vec<&str> = s.split_whitespace().collect();\n    let mut res: Vec<&str>\
    \ = Vec::new();\n    let mut res2: Vec<String> = Vec::new();\n    let mut res3:\
    \ String = String::new();\n    let consonants = vec![\"b\", \"c\", \"d\", \"f\"\
    , \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\"\
    , \"t\", \"v\", \"w\", \"x\", \"z\"];\n    for c in v {\n        if c.contains(\"\
    a\") || c.contains(\"e\") || c.contains(\"i\") || c.contains(\"o\") || c.contains(\"\
    u\"){\n            res.push(c);\n        }\n    }\n    for w in res {\n      \
    \  let mut nc = 0;\n        for c in w.chars() {\n            for x in consonants.iter()\
    \ {\n                if c.to_string() == *x {\n                    nc += 1;\n\
    \                }\n            }\n        }\n        if nc == n as usize {\n\
    \            res2.push(w.to_string());\n        }\n    }\n    for w in res2 {\n\
    \        res3.push_str(&w);\n        res3.push_str(\" \");\n    }\n    res3.trim().to_string()",
  "    let mut result = String::new();\n    for word in s.split_whitespace() {\n \
    \       if n == 0 {\n            result.push_str(word);\n            result.push('\
    \ ');\n        } else {\n            let mut consonants = 0;\n            for\
    \ letter in word.chars() {\n                if letter != 'a' && letter != 'e'\
    \ && letter != 'i' && letter != 'o' && letter != 'u' {\n                    consonants\
    \ += 1;\n                }\n            }\n            if consonants == n {\n\
    \                result.push_str(word);\n                result.push(' ');\n \
    \           }\n        }\n    }\n    if result.len() > 0 {\n        result.pop();\n\
    \    }\n    result", '    unimplemented!();', "    if n <= 0 {\n        return\
    \ String::new();\n    }\n    let mut result = String::new();\n    for word in\
    \ s.split_whitespace() {\n        let mut count = 0;\n        for c in word.chars()\
    \ {\n            if c.is_ascii_alphabetic() && c.is_ascii_lowercase() && c !=\
    \ 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n                count\
    \ += 1;\n            }\n        }\n        if count == n {\n            result.push_str(word);\n\
    \            result.push(' ');\n        }\n    }\n    if result.len() > 0 {\n\
    \        result.pop();\n    }\n    result", "    let mut words: Vec<String> =\
    \ Vec::new();\n    let mut i = 0;\n    while i < s.len() {\n        if s.as_bytes()[i]\
    \ == b' ' {\n            i += 1;\n            continue;\n        }\n        let\
    \ mut word_length = 0;\n        let mut word_start = i;\n        loop {\n    \
    \        if s.as_bytes()[i] == b' ' {\n                break;\n            }\n\
    \            word_length += 1;\n            i += 1;\n        }\n        if select_word(s.clone(),\
    \ word_start, word_length, n) {\n            words.push(s[word_start..word_start\
    \ + word_length].to_string());\n        }\n    }\n    words.join(\" \")", "  \
    \  let mut result = String::new();\n    let v = s.split_whitespace().filter(|word|\
    \ count_consonants(word) == n).collect::<Vec<&str>>();\n    result.push_str(&v.join(\"\
    \ \"));\n    result", "    let mut result = String::new();\n    let words = s.split_whitespace();\n\
    \    for w in words {\n        let mut c = 0;\n        for ch in w.chars() {\n\
    \            match ch {\n                'a' | 'e' | 'i' | 'o' | 'u' | 'y' =>\
    \ {\n                    continue;\n                }\n                _ => {\n\
    \                    c += 1;\n                }\n            }\n        }\n  \
    \      if c == n {\n            result.push_str(w);\n            result.push('\
    \ ');\n        }\n    }\n    result.trim().to_string()", "    // Create a Vector\
    \ of the words.\n    let str_vec: Vec<&str> = s.split_whitespace().collect();\n\
    \    let mut selected_str_vec: Vec<&str> = Vec::new();\n    // For each word,\
    \ check the number of consonants.\n    for word in str_vec {\n        let consonant_count\
    \ = get_consonant_count(word);\n        if consonant_count == n {\n          \
    \  selected_str_vec.push(word);\n        }\n    }\n    // Convert to string\n\
    \    let mut selected_str = String::new();\n    for word in selected_str_vec {\n\
    \        selected_str = format!(\"{} {}\", selected_str, word);\n    }\n    //\
    \ Trim the space at the end.\n    selected_str.trim().to_string()", "    s.split(\"\
    \ \")\n        .filter(|x| count_consonants(x) == n)\n        .map(|x| x.to_string())\n\
    \        .collect::<Vec<String>>()\n        .join(\" \")", "    let mut res =\
    \ String::new();\n    let words = s.split(\" \");\n    for word in words {\n \
    \       let mut count = 0;\n        for c in word.chars() {\n            match\
    \ c {\n                'a' | 'e' | 'i' | 'o' | 'u' | 'A' | 'E' | 'I' | 'O' | 'U'\
    \ => {}\n                _ => count += 1,\n            }\n        }\n        if\
    \ count == n {\n            res.push_str(word);\n            res.push(' ');\n\
    \        }\n    }\n    res.trim().to_string()", "    let mut vec: Vec<String>\
    \ = Vec::new();\n    let mut word = String::new();\n    let vowels = ['a', 'e',\
    \ 'i', 'o', 'u'];\n    let mut counter = 0;\n    let chars: Vec<char> = s.chars().collect();\n\
    \    for c in chars {\n        if c != ' ' {\n            word.push(c);\n    \
    \        if vowels.contains(&c) {\n                counter += 1;\n           \
    \ }\n        } else {\n            vec.push(word);\n            word = String::new();\n\
    \            counter = 0;\n        }\n    }\n    vec.push(word);\n    let ret\
    \ = vec.into_iter().filter(|x| (x.len() as isize - counter) == n).collect::<Vec<String>>();\n\
    \    ret.join(\" \")", "    let mut res = \"\".to_string();\n    for word in s.split_whitespace()\
    \ {\n        if word.chars().filter(|c| \"bcdfghjklmnpqrstvwxyz\".contains(*c)).count()\
    \ as isize == n {\n            res.push_str(word);\n            res.push(' ');\n\
    \        }\n    }\n    if res.len() > 0 {\n        res.pop();\n    }\n    res",
  "    let mut result = String::new();\n    let words = s.split(\" \");\n    for w\
    \ in words {\n        if get_num_consonants(w) == n {\n            result.push_str(w);\n\
    \            result.push_str(\" \");\n        }\n    }\n    result.trim().to_string()",
  "    let mut result = String::new();\n    for word in s.split_whitespace() {\n \
    \       if count_consts(word) == n {\n            result.push_str(word);\n   \
    \         result.push(' ');\n        }\n    }\n    result.trim().to_string()",
  "    let v: Vec<&str> = s.split(\" \").collect();\n    let mut result = Vec::new();\n\
    \    for word in v {\n        let mut count = 0;\n        for ch in word.chars()\
    \ {\n            if ch != 'a' && ch != 'e' && ch != 'i' && ch != 'o' && ch !=\
    \ 'u' {\n                count += 1;\n            }\n        }\n        if count\
    \ == n {\n            result.push(word);\n        }\n    }\n    result.join(\"\
    \ \")", "    let mut result = String::new();\n    let words = s.split(\" \");\n\
    \    for word in words {\n        let count = word.chars().filter(|c| !is_vowel(*c)).count();\n\
    \        if n == count as isize {\n            result.push_str(word);\n      \
    \      result.push(' ');\n        }\n    }\n    if result.len() == 0 { result\
    \ } else { result.pop(); result }", "    let words: Vec<&str> = s.split(\" \"\
    ).collect();\n    let mut count: isize = 0;\n    let mut answer: String = String::new();\n\
    \    for word in words {\n        let mut temp_count: isize = 0;\n        for\
    \ letter in word.chars() {\n            if letter != 'a' && letter != 'e' && letter\
    \ != 'i' && letter != 'o' && letter != 'u' {\n                temp_count += 1;\n\
    \            }\n        }\n        if temp_count == n {\n            count +=\
    \ 1;\n            answer.push_str(word);\n            answer.push_str(\" \");\n\
    \        }\n    }\n    if count == 0 {\n        return String::from(\"\");\n \
    \   }\n    answer", '    unimplemented!()', "    if n < 0 {\n        panic!(\"\
    n must be a natural number!\");\n    }\n    let mut words = String::new();\n \
    \   let mut chars = String::new();\n    let mut is_word = false;\n    for c in\
    \ s.chars() {\n        if c.is_alphabetic() {\n            chars.push(c);\n  \
    \          is_word = true;\n        } else {\n            if is_word {\n     \
    \           if select_word(&chars, n) {\n                    words.push_str(&chars);\n\
    \                    words.push_str(\" \");\n                }\n             \
    \   chars.clear();\n                is_word = false;\n            }\n        }\n\
    \    }\n    if is_word {\n        if select_word(&chars, n) {\n            words.push_str(&chars);\n\
    \        }\n    }\n    words", "    s.split_whitespace()\n        .filter(|w|\
    \ w.chars().filter(|c| \"aeiou\".contains(*c)).count() as isize == n)\n      \
    \  .collect::<Vec<&str>>()\n        .join(\" \")", "    // let s_copy = s.clone();\n\
    \    // s_copy.split_whitespace().fold(vec![], |mut acc, word| {\n    //     if\
    \ word.chars().filter(|c| consonants.contains(c)).count() == n as usize {\n  \
    \  //         acc.push(word.to_string());\n    //     }\n    //     acc\n    //\
    \ }).join(\" \")\n    let consonants = \"bcdfghjklmnpqrstvwxyz\";\n    s.split_whitespace().filter(|w|\
    \ {\n        w.chars().filter(|c| consonants.contains(c)).count() == n as usize\n\
    \    }).collect::<Vec<&str>>().join(\" \")", "    s.split_whitespace()\n     .filter(|w|\
    \ count_consonants(w) == n)\n     .collect::<Vec<&str>>()\n     .join(\" \")",
  "    s.split_whitespace()\n        .filter(|w| count_consonants(w) == n)\n     \
    \   .collect::<Vec<&str>>()\n        .join(\" \")", "    let mut words = String::new();\n\
    \    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let mut num_consonants = 0;\n\
    \    let mut word_count = 0;\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            if vowels.contains(&c.to_lowercase().next().unwrap()) {\n   \
    \             num_consonants = 0;\n            } else {\n                num_consonants\
    \ += 1;\n            }\n        } else {\n            if num_consonants == n {\n\
    \                if word_count > 0 {\n                    words.push(' ');\n \
    \               }\n                word_count += 1;\n                words.push_str(&num_consonants.to_string());\n\
    \            }\n            num_consonants = 0;\n        }\n    }\n    if num_consonants\
    \ == n {\n        if word_count > 0 {\n            words.push(' ');\n        }\n\
    \        words.push_str(&num_consonants.to_string());\n    }\n    words", "  \
    \  let mut result = String::new();\n    let letters = vec!['b', 'c', 'd', 'f',\
    \ 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'];\n\
    \    let words: Vec<&str> = s.split_whitespace().collect();\n    for i in words\
    \ {\n        let mut count = 0;\n        for j in i.chars() {\n            for\
    \ k in letters.iter() {\n                if j.to_lowercase().to_string() == k.to_string()\
    \ {\n                    count += 1;\n                }\n            }\n     \
    \   }\n        if count == n as usize {\n            result.push_str(i);\n   \
    \         result.push(' ');\n        }\n    }\n    result.trim().to_string()",
  "    s.split(\" \")\n        .filter(|x| n == x.chars().filter(|&x| !\"aeiou\".contains(x)).count()\
    \ as isize)\n        .collect::<Vec<&str>>()\n        .join(\" \")", "    // For\
    \ each word count the number of consonants\n    // If equal to n return the word,\
    \ else return \"\".\n    // Return all non empty words\n    s.split_whitespace()\n\
    \        .map(|w| {\n            let mut c = 0;\n            for l in w.chars()\
    \ {\n                if !is_vowel(l) {\n                    c += 1;\n        \
    \        }\n            }\n            if c == n {\n                w.to_string()\n\
    \            } else {\n                \"\".to_string()\n            }\n     \
    \   })\n        .filter(|w| w != \"\")\n        .collect::<Vec<String>>()\n  \
    \      .join(\" \")", "    let s = s.to_lowercase();\n    let mut result = String::new();\n\
    \    let mut target = 0;\n    let mut count = 0;\n    for (index, c) in s.chars().enumerate()\
    \ {\n        if c.is_alphabetic() {\n            match c {\n                'a'\
    \ | 'e' | 'i' | 'o' | 'u' => count = 0,\n                _ => count += 1,\n  \
    \          }\n        }\n        if c == ' ' {\n            if count == n {\n\
    \                if target == 0 {\n                    target = index;\n     \
    \           }\n                let mut counter = target;\n                for\
    \ (counter, c) in s.chars().enumerate() {\n                    if counter < target\
    \ {\n                        continue;\n                    }\n              \
    \      if c == ' ' {\n                        break;\n                    }\n\
    \                    result.push(c);\n                }\n                result.push('\
    \ ');\n            }\n            target = 0;\n            count = 0;\n      \
    \  }\n    }\n    if count == n {\n        if target == 0 {\n            target\
    \ = s.len();\n        }\n        let mut counter = target;\n        for (counter,\
    \ c) in s.chars().enumerate() {\n            if counter < target {\n         \
    \       continue;\n            }\n            if c == ' ' {\n                break;\n\
    \            }\n            result.push(c);\n        }\n    }\n    result", " \
    \   s.split_whitespace()\n        .filter(|s| s.chars().filter(|c| !\"aeiou\"\
    .contains(*c)).count() as isize == n)\n        .collect::<Vec<&str>>()\n     \
    \   .join(\" \")", "    // let mut consonants: Vec<&str> = vec![];\n    // let\
    \ mut result: Vec<&str> = vec![];\n    // for i in 0..s.len() {\n    //     match\
    \ &s[i..i+1] {\n    //         \"a\" | \"e\" | \"i\" | \"o\" | \"u\" => continue,\n\
    \    //         _ => consonants.push(&s[i..i+1]),\n    //     }\n    // }\n  \
    \  // for i in 0..consonants.len() {\n    //     if consonants[i].len() == n as\
    \ usize {\n    //         result.push(consonants[i]);\n    //     }\n    // }\n\
    \    // result.join(\"\")\n    String::from(\"\")", "    let mut v = Vec::new();\n\
    \    for (i, word) in s.split_whitespace().enumerate() {\n        if fx(word)\
    \ == n {\n            v.push(word);\n        }\n    }\n    if v.len() == 0 {\n\
    \        return s;\n    }\n    v.join(\" \")", "    s.split_whitespace()\n   \
    \     .filter(|w| count_consonants(&w) == n)\n        .collect::<Vec<&str>>()\n\
    \        .join(\" \")", "  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let mut\
    \ result = String::new();\n  let mut current_consonants = 0;\n  let mut start_index\
    \ = 0;\n  let mut current_word = String::new();\n  let mut found_word = false;\n\
    \  for (i, c) in s.chars().enumerate() {\n    if c == ' ' {\n      if current_consonants\
    \ == n {\n        if !found_word {\n          found_word = true;\n        }\n\
    \        result.push_str(&current_word);\n        result.push(' ');\n      }\n\
    \      current_consonants = 0;\n      start_index = i + 1;\n      current_word\
    \ = String::new();\n    } else {\n      current_word.push(c);\n      if !vowels.contains(&c)\
    \ {\n        current_consonants += 1;\n      }\n    }\n  }\n  if current_consonants\
    \ == n {\n    if !found_word {\n      found_word = true;\n    }\n    result.push_str(&current_word);\n\
    \  }\n  if found_word {\n    result.pop();\n  }\n  result", "    let mut words:\
    \ Vec<String> = Vec::new();\n    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n\
    \    let mut word = String::new();\n    for ch in s.chars() {\n        if ch ==\
    \ ' ' {\n            if word.chars().filter(|x| !vowels.contains(x)).count() as\
    \ isize == n {\n                words.push(word.clone());\n            }\n   \
    \         word.clear();\n        } else {\n            word.push(ch);\n      \
    \  }\n    }\n    words.join(\" \")", "    let mut list: Vec<String> = Vec::new();\n\
    \    let l = \"bcdfghjklmnpqrstvwxyz\";\n    let v = \"aeiou\";\n    for word\
    \ in s.split_whitespace() {\n        let mut c = 0;\n        for ch in word.chars()\
    \ {\n            if l.contains(ch) {\n                c += 1;\n            }\n\
    \        }\n        if c == n as usize {\n            list.push(word.to_string());\n\
    \        }\n    }\n    list.join(\" \")", "    // your code here\n    let mut\
    \ v: Vec<&str> = s.split_whitespace().collect();\n    v.retain(|&x| consonants(x)\
    \ == n);\n    v.join(\" \")", "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n\
    \    let mut words = vec![];\n    let text: Vec<&str> = s.split_whitespace().collect();\n\
    \    for word in text {\n        let count: isize = word.chars().filter(|c| !vowels.contains(c)).count()\
    \ as isize;\n        if count == n {\n            words.push(word);\n        }\n\
    \    }\n    words.join(\" \")", "    let mut res = String::new();\n    for word\
    \ in s.split_whitespace() {\n        if n == word.chars().filter(|c| is_consonant(c)).count()\
    \ as isize {\n            res.push_str(word);\n            res.push(' ');\n  \
    \      }\n    }\n    res.trim().to_string()", "    let mut res: Vec<String> =\
    \ Vec::new();\n    let mut i = 0;\n    let mut start = 0;\n    let mut end = 0;\n\
    \    for _ in s.chars() {\n        if s.chars().nth(i).unwrap() == ' ' {\n   \
    \         end = i;\n            if str_count_consonants(&s[start..end]) == n {\n\
    \                res.push(s[start..end].to_string());\n            }\n       \
    \     start = i + 1;\n        }\n        i += 1;\n    }\n    if str_count_consonants(&s[start..])\
    \ == n {\n        res.push(s[start..].to_string());\n    }\n    res.join(\" \"\
    )", "    let c = s.split_whitespace().map(|s| String::from(s)).filter(|w| word_consonants_count(w)\
    \ == n).collect::<Vec<String>>().join(\" \");\n    c", "    let mut res: Vec<String>\
    \ = Vec::new();\n    let mut word = String::new();\n    for c in s.chars() {\n\
    \        if c.is_alphabetic() {\n            word.push(c);\n        } else {\n\
    \            if word.len() > 0 {\n                let consonants: String = word.chars().filter(|x|\
    \ !x.is_vowel()).collect();\n                if consonants.len() as isize == n\
    \ {\n                    res.push(word.clone());\n                }\n        \
    \        word.clear();\n            }\n        }\n    }\n    if word.len() > 0\
    \ {\n        let consonants: String = word.chars().filter(|x| !x.is_vowel()).collect();\n\
    \        if consonants.len() as isize == n {\n            res.push(word.clone());\n\
    \        }\n    }\n    res.join(\" \")", "    let s = s.to_lowercase();\n    let\
    \ v = s.split(\" \").collect::<Vec<&str>>();\n    let mut res = String::new();\n\
    \    for i in 0..v.len() {\n        let mut c = 0;\n        for j in 0..v[i].len()\
    \ {\n            match v[i].chars().nth(j) {\n                Some('a') => {},\n\
    \                Some('e') => {},\n                Some('i') => {},\n        \
    \        Some('o') => {},\n                Some('u') => {},\n                _\
    \ => c += 1,\n            }\n        }\n        if c == n as usize {\n       \
    \     res.push_str(v[i]);\n            res.push(' ');\n        }\n    }\n    res",
  "    let mut res: Vec<String> = Vec::new();\n    let mut word = String::new();\n\
    \    for c in s.chars() {\n        if c == ' ' {\n            if get_consonants_count(&word)\
    \ == n {\n                res.push(word.clone());\n            }\n           \
    \ word.clear();\n        } else {\n            word.push(c);\n        }\n    }\n\
    \    if get_consonants_count(&word) == n {\n        res.push(word.clone());\n\
    \    }\n    res.join(\" \")", "    s.split_whitespace()\n        .filter(|word|\n\
    \            word.chars()\n                .filter(|c| {\n                   \
    \ match c {\n                        'a' | 'e' | 'i' | 'o' | 'u' => false,\n \
    \                       _ => true\n                    }\n                })\n\
    \                .count() as isize == n\n        )\n        .collect::<Vec<&str>>()\n\
    \        .join(\" \")", '    unimplemented!()', "  let vowels = vec![\"a\", \"\
    e\", \"i\", \"o\", \"u\"];\n  let s = s.to_lowercase();\n  let mut words = s.split_whitespace().collect::<Vec<&str>>();\n\
    \  let mut result = String::new();\n  for word in words {\n    let mut count =\
    \ 0;\n    for char in word.chars() {\n      if !vowels.contains(&char.to_string().as_str())\
    \ {\n        count += 1;\n      }\n    }\n    if count == n {\n      result.push_str(word);\n\
    \      result.push(' ');\n    }\n  }\n  if result.len() > 0 {\n    result.pop();\n\
    \  }\n  result", "    // Split the string into a vector of all words\n    let\
    \ words: Vec<&str> = s.split(\" \").collect();\n    // Initialize an empty vector\
    \ for the words to be selected\n    let mut selected_words: Vec<&str> = Vec::new();\n\
    \    // Iterate over the vector of words\n    for word in words {\n        //\
    \ Count the number of consonants in the word\n        let consonants = word.chars().filter(|c|\
    \ \"bcdfghjklmnpqrstvwxyz\".contains(*c)).count();\n        // If number of consonants\
    \ equals n, add word to the result\n        if consonants as isize == n {\n  \
    \          selected_words.push(word);\n        }\n    }\n    // If no words found,\
    \ return an empty string\n    if selected_words.len() == 0 {\n        return String::from(\"\
    \");\n    }\n    // Else return a single string from the result vector, joined\
    \ by space\n    else {\n        return selected_words.join(\" \");\n    }", '    "".to_string()',
  "    s.split_whitespace()\n        .filter(|w| w.chars().filter(|c| c.is_ascii_lowercase()\
    \ && c.is_ascii_consonant()).count() as isize == n)\n        .collect::<Vec<&str>>()\n\
    \        .join(\" \")", "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n   \
    \ let words = s.split(\" \").filter(|word| {\n        word.chars().filter(|c|\
    \ !vowels.contains(c)).count() as isize == n\n    }).collect::<Vec<&str>>();\n\
    \    words.join(\" \")", '    unimplemented!();', "    s.split_whitespace()\n\
    \        .filter(|word| count_consonants(word) == n)\n        .map(|word| word.to_string())\n\
    \        .collect::<Vec<String>>()\n        .join(\" \")", "    s.split_whitespace()\n\
    \        .filter(|word| consonants_num(word) == n)\n        .collect::<Vec<&str>>()\n\
    \        .join(\" \")", "    let split = s.split(\" \");\n    split.into_iter().filter(|x|\
    \ x.chars().filter(|x| x.is_alphabetic()).filter(|x| !is_vowel(*x)).count() as\
    \ isize == n).collect::<Vec<&str>>().join(\" \")", "    let mut s = s;\n    let\
    \ mut ret: Vec<String> = Vec::new();\n    let mut word = String::new();\n    let\
    \ mut index = 0;\n    let mut i: isize = 0;\n    let mut consonants = 0;\n   \
    \ for i in s.chars() {\n        if i.is_alphabetic() {\n            word.push(i);\n\
    \            if !i.is_vowel() {\n                consonants += 1;\n          \
    \  }\n        } else {\n            if consonants == n {\n                ret.push(word.clone());\n\
    \            }\n            word.clear();\n            consonants = 0;\n     \
    \   }\n    }\n    if consonants == n {\n        ret.push(word.clone());\n    }\n\
    \    ret.join(\" \")", "    let words: Vec<&str> = s.split(\" \").collect();\n\
    \    let result = words.iter().filter(|word| {\n        word.chars().filter(|c|\
    \ !\"aeiou\".contains(*c)).count() as isize == n\n    }).map(|word| word.to_string()).collect::<Vec<String>>();\n\
    \    result.join(\" \")", "    let mut result = String::new();\n    let mut word_count\
    \ = false;\n    let mut word_consonants = 0;\n    for c in s.chars() {\n     \
    \   if c == ' ' {\n            if word_count {\n                if word_consonants\
    \ == n {\n                    result.push(' ');\n                }\n         \
    \       word_count = false;\n                word_consonants = 0;\n          \
    \  }\n        } else {\n            if c.is_ascii_lowercase() {\n            \
    \    if c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n         \
    \           word_consonants += 1;\n                }\n                word_count\
    \ = true;\n                result.push(c);\n            }\n        }\n    }\n\
    \    if word_count {\n        if word_consonants == n {\n            result.push('\
    \ ');\n        }\n    }\n    result.trim().to_string()", "    let s = s.to_lowercase();\n\
    \    let mut words = s.split_whitespace();\n    let mut res = vec![];\n    while\
    \ let Some(word) = words.next() {\n        let word = word.to_string();\n    \
    \    let count = word.matches(|c| \"aeiou\".contains(c)).count() as isize;\n \
    \       if count == n {\n            res.push(word);\n        }\n    }\n    res.join(\"\
    \ \")", "    let mut arr = s.split_whitespace().filter(|w|\n        w.chars().filter(|c|\
    \ \"aeiou\".contains(*c)).count() as isize == n).collect::<Vec<&str>>();\n   \
    \ arr.join(\" \")", "    let mut words = s.split_whitespace().filter(|w| count_consonants(w)\
    \ == n).map(|w| w.to_string()).collect::<Vec<String>>();\n    words.sort();\n\
    \    words.join(\" \")", '    unimplemented!();', "    let alph: Vec<char> = \"\
    abcdefghijklmnopqrstuvwxyz\".chars().collect();\n    let vowels: Vec<char> = \"\
    aeiou\".chars().collect();\n    let mut filtered_chars: Vec<char> = Vec::new();\n\
    \    let mut result: Vec<String> = Vec::new();\n    for ch in s.chars() {\n  \
    \      if !vowels.contains(&ch) && alph.contains(&ch) {\n            filtered_chars.push(ch);\n\
    \        } else {\n            if filtered_chars.len() == n as usize {\n     \
    \           result.push(filtered_chars.iter().collect());\n            }\n   \
    \         filtered_chars = Vec::new();\n        }\n    }\n    if filtered_chars.len()\
    \ == n as usize {\n        result.push(filtered_chars.iter().collect());\n   \
    \ }\n    result.join(\" \")", "    let vowels = \"aeiouAEIOU\";\n    let consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    let split_strings: Vec<&str>\
    \ = s.split_whitespace().collect();\n    let mut n_consonants_strings: Vec<&str>\
    \ = Vec::new();\n    for s in split_strings {\n        let mut n_consonants =\
    \ 0;\n        for c in s.chars() {\n            if consonants.contains(c) {\n\
    \                n_consonants += 1;\n            }\n        }\n        if n_consonants\
    \ == n {\n            n_consonants_strings.push(s);\n        }\n    }\n    n_consonants_strings.join(\"\
    \ \")", '    unimplemented!()', "    s.split(\" \")\n        .filter(|w| n ==\
    \ (w.matches(|x| \"bcdfghjklmnpqrstvwxyz\".contains(x)).count() as isize))\n \
    \       .map(|x| x.to_string())\n        .collect::<Vec<String>>()\n        .join(\"\
    \ \")", "    let mut result = String::new();\n    let mut count = 0;\n    let\
    \ mut has_word = false;\n    for c in s.chars() {\n        if c == ' ' {\n   \
    \         if count == n {\n                result += \" \";\n                has_word\
    \ = true;\n            }\n            count = 0;\n        } else if !is_vowel(c)\
    \ {\n            count += 1;\n        }\n    }\n    if count == n {\n        if\
    \ has_word {\n            result += \" \";\n        }\n        result += \" \"\
    ;\n    }\n    result.trim().to_string()", "    let r = s.split_whitespace().filter(|&s|\
    \ {\n        let vowel = \"aeiou\";\n        let count = s.chars().filter(|&x|\
    \ !vowel.contains(x)).count();\n        (count as isize) == n\n    }).collect::<Vec<&str>>().join(\"\
    \ \");\n    r", "    s.split_whitespace()\n        .filter(|word| word.chars().filter(|c|\
    \ \"bcdfghjklmnpqrstvwxyz\".contains(*c)).count() as isize == n)\n        .collect::<Vec<&str>>()\n\
    \        .join(\" \")", "    s.split_whitespace()\n     .filter(|x| x.chars().filter(|c|\
    \ c.is_ascii_consonant()).count() as isize == n)\n     .collect::<Vec<&str>>()\n\
    \     .join(\" \")", "    s.split(\" \")\n        .filter(|w| count_consonants(&w)\
    \ == n)\n        .fold(String::new(), |mut s, w| {\n            if !s.is_empty()\
    \ {\n                s.push(' ');\n            }\n            s.push_str(w);\n\
    \            s\n        })", "    // First, split the input string into a Vec<&str>.\n\
    \    let words: Vec<&str> = s.split(\" \").collect();\n    // Initialize a new\
    \ Vec<String> to store words with exactly `n` consonants.\n    let mut result:\
    \ Vec<String> = Vec::new();\n    // Initialize a string that contains all consonants.\n\
    \    let consonants = \"bcdfghjklmnpqrstvwxyz\";\n    // Iterate over the words.\n\
    \    for word in words {\n        // Initialize a Vec<char> that holds all consonants\
    \ in the current word.\n        let mut word_consonants: Vec<char> = Vec::new();\n\
    \        // Iterate over all characters in the current word.\n        for ch in\
    \ word.chars() {\n            // Check if the current character is a consonant.\n\
    \            if consonants.contains(ch) {\n                // If it is, push it\
    \ to `word_consonants`.\n                word_consonants.push(ch);\n         \
    \   }\n        }\n        // Get the length of `word_consonants`.\n        let\
    \ length = word_consonants.len() as isize;\n        // Check if `word_consonants`\
    \ has exactly `n` consonants.\n        if length == n {\n            // If it\
    \ does, push it to `result`.\n            result.push(word.to_string());\n   \
    \     }\n    }\n    // Convert `result` to a string and return it.\n    result.join(\"\
    \ \")", '    return "";', "    let mut r: String = String::new();\n    let v:\
    \ Vec<&str> = s.split_whitespace().collect();\n    for word in v {\n        if\
    \ consonants(word) == n {\n            r.push_str(&word);\n            r.push('\
    \ ');\n        }\n    }\n    r.trim().to_string()", "    let mut words: Vec<String>\
    \ = Vec::new();\n    for word in s.split(\" \") {\n        if has_exactly_n_consonants(word,\
    \ n) {\n            words.push(word.to_string());\n        }\n    }\n    words.join(\"\
    \ \")", "    let mut result = String::new();\n    let mut numbers = 0;\n    let\
    \ input: Vec<&str> = s.split_whitespace().collect();\n    for i in input {\n \
    \       for j in i.chars() {\n            if !(j == 'a' || j == 'i' || j == 'u'\
    \ || j == 'e' || j == 'o') {\n                numbers += 1;\n            }\n \
    \       }\n        if numbers == n {\n            result += i;\n            result\
    \ += \" \";\n        }\n        numbers = 0;\n    }\n    result", "    let mut\
    \ result = String::new();\n    let split = s.split_whitespace();\n    for word\
    \ in split {\n        let consonants = word.chars().filter(|&c| \"qwrtypsdfghjklzxcvbnm\"\
    .contains(c)).count();\n        if consonants == n as usize {\n            result.push_str(word);\n\
    \            result.push(' ');\n        }\n    }\n    if result.len() > 0 {\n\
    \        result.pop();\n    }\n    result", "    s.split_whitespace()\n      \
    \  .filter(|w|\n            w.chars()\n            .filter(|c| !\"aeiou\".contains(*c))\n\
    \            .count() as isize == n\n        )\n        .collect::<Vec<&str>>()\n\
    \        .join(\" \")", "    let mut result = String::new();\n    let s = s.to_lowercase();\n\
    \    let consonants = vec!['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n',\
    \ 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'];\n    for word in s.split_whitespace()\
    \ {\n        let mut count = 0;\n        for c in word.chars() {\n           \
    \ if consonants.contains(&c) {\n                count += 1;\n            }\n \
    \       }\n        if count == n as usize {\n            result.push_str(word);\n\
    \            result.push(' ');\n        }\n    }\n    result.trim().to_string()",
  "    s.split_whitespace()\n     .filter(|w| n == count_consonants(w))\n     .collect::<Vec<&str>>()\n\
    \     .join(\" \")", "    let mut list = String::new();\n    for word in s.split_whitespace()\
    \ {\n        if count_consonants(word) == n {\n            list += \" \";\n  \
    \          list += word;\n        }\n    }\n    list", "    let res = s.split_whitespace()\n\
    \        .filter(|s| consonants_num(&s) == n)\n        .collect::<Vec<&str>>()\n\
    \        .join(\" \");\n    return res;", "    let mut result = String::new();\n\
    \    let s = s.to_lowercase();\n    let mut previous_char = ' ';\n    let mut\
    \ char_count = 0;\n    let mut word_count = 0;\n    for c in s.chars() {\n   \
    \     if c == ' ' {\n            if char_count == n {\n                word_count\
    \ += 1;\n                char_count = 0;\n            }\n            if previous_char\
    \ != ' ' {\n                result.push(' ');\n            }\n        } else if\
    \ is_vowel(c) {\n            char_count = 0;\n            result.push(c);\n  \
    \      } else {\n            char_count += 1;\n            result.push(c);\n \
    \       }\n        previous_char = c;\n    }\n    if word_count == 0 {\n     \
    \   result.push_str(\"<none>\");\n    }\n    result", "    s.split(\" \")\n  \
    \      .filter(|s| s.chars().filter(|c| !c.is_vowel()).count() as isize == n)\n\
    \        .collect::<Vec<&str>>()\n        .join(\" \")", "    s.split_whitespace()\n\
    \        .filter(|&s| {\n            s.to_lowercase()\n                .chars()\n\
    \                .filter(|c| {\n                    let c = c.to_lowercase().next().unwrap();\n\
    \                    c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u'\n\
    \                })\n                .count() as isize == n\n        })\n    \
    \    .collect::<Vec<&str>>()\n        .join(\" \")", '    return "";', '    unimplemented!()',
  "\tlet mut res = \"\".to_string();\n\tfor x in s.split(\" \"){\n\t\tlet v: Vec<char>\
    \ = x.chars().collect();\n\t\tlet mut cons = 0;\n\t\tfor y in v{\n\t\t\tif y !=\
    \ 'a' && y != 'e' && y != 'i' && y != 'o' && y != 'u' && y != 'A' && y != 'E'\
    \ && y != 'I' && y != 'O' && y != 'U'{\n\t\t\t\tcons += 1;\n\t\t\t}\n\t\t}\n\t\
    \tif cons == n{\n\t\t\tres = format!(\"{} {}\", res, x);\n\t\t}\n\t}\n\tif res.len()\
    \ > 0{\n\t\treturn res[1..].to_string();\n\t}\n\treturn res;", "    s.split(\"\
    \ \")\n        .filter(|x| consonants(x.to_string()) == n)\n        .map(|x| x.to_string())\n\
    \        .collect::<Vec<String>>()\n        .join(\" \")", "    let v: Vec<&str>\
    \ = s.split(\" \").collect();\n    v.iter().filter(|w| w.chars().filter(|c| !is_vowel(*c)).count()\
    \ as isize == n).cloned().collect::<Vec<&str>>().join(\" \")", "    let con: Vec<char>\
    \ = \"bcdfghjklmnpqrstvwxyz\".chars().collect();\n    let vow: Vec<char> = \"\
    aeiou\".chars().collect();\n    let mut word: Vec<String> = Vec::new();\n    let\
    \ mut v: Vec<char> = Vec::new();\n    let mut count = 0;\n    for c in s.to_lowercase().chars()\
    \ {\n        if c == ' ' {\n            if count == n {\n                for i\
    \ in 0..v.len() {\n                    word.push(v[i].to_string());\n        \
    \        }\n                word.push(\" \".to_string());\n            }\n   \
    \         v.clear();\n            count = 0;\n        } else {\n            if\
    \ con.contains(&c) {\n                count += 1;\n            }\n           \
    \ v.push(c);\n        }\n    }\n    word.pop();\n    word.join(\"\")", "    let\
    \ mut vec: Vec<&str> = Vec::new();\n    let mut result = String::new();\n    for\
    \ word in s.split_whitespace() {\n        let word_consonants = count_consonants(word);\n\
    \        if word_consonants == n {\n            vec.push(word);\n        }\n \
    \   }\n    vec.into_iter().map(|word| result.push_str(word) && result.push_str(\"\
    \ \")).count();\n    result.trim().to_string()", "    let arr: Vec<&str> = s.split(\"\
    \ \").collect();\n    let mut result: Vec<&str> = Vec::new();\n    for word in\
    \ arr {\n        let count = count_consonants(word);\n        if count == n {\n\
    \            result.push(word);\n        }\n    }\n    result.join(\" \")", " \
    \   let mut res = Vec::new();\n    for i in s.split_whitespace() {\n        if\
    \ i.chars().filter(|x| !is_vowel(*x)).count() as isize == n {\n            res.push(i.to_string());\n\
    \        }\n    }\n    res.join(\" \")", "    let mut result = String::new();\n\
    \    let s = s.to_lowercase();\n    for word in s.split(\" \") {\n        let\
    \ mut vowels = 0;\n        for ch in word.chars() {\n            if \"aouie\"\
    .contains(ch) {\n                vowels += 1;\n            }\n        }\n    \
    \    if word.len() as isize - vowels == n {\n            result.push_str(word);\n\
    \            result.push(' ');\n        }\n    }\n    result.trim().to_string()",
  "    s.split_whitespace()\n        .filter(|word|\n            word.chars()\n  \
    \              .filter(|&c| match c {\n                    'a' | 'e' | 'i' | 'o'\
    \ | 'u' => false,\n                    _ => true\n                })\n       \
    \         .count() as isize == n\n        )\n        .collect::<Vec<&str>>()\n\
    \        .join(\" \")", "    let mut s = s;\n    let mut result = String::new();\n\
    \    let v = s.split_whitespace().filter(|x| n_consonants(x) == n).collect::<Vec<&str>>();\n\
    \    if v.len() == 0 { return result }\n    for word in v {\n        result.push_str(word);\n\
    \        result.push(' ');\n    }\n    result.pop();\n    result", "    let mut\
    \ words = String::new();\n    let mut cons = 0;\n    let mut v = Vec::new();\n\
    \    for (i, c) in s.chars().enumerate() {\n        if c == ' ' || i == s.len()\
    \ - 1 {\n            if cons == n {\n                if i == s.len() - 1 {\n \
    \                   v.push(c);\n                }\n                let word: String\
    \ = v.iter().collect();\n                words.push_str(&word);\n            \
    \    words.push(' ');\n            }\n            cons = 0;\n            v.clear();\n\
    \        } else {\n            if c != 'a' && c != 'e' && c != 'i' && c != 'o'\
    \ && c != 'u' {\n                cons += 1;\n            }\n            v.push(c);\n\
    \        }\n    }\n    words.trim().to_string()", "    s.split_whitespace()\n\
    \        .filter(|word| word.chars().filter(|letter| \"aeiou\".contains(*letter)).count()\
    \ as isize == n)\n        .collect::<Vec<&str>>()\n        .join(\" \")", "  \
    \  let mut result = \"\".to_string();\n    for word in s.split_whitespace() {\n\
    \        if word.chars().filter(|x| \"aeiouAEIOU\".contains(*x)).count() as isize\
    \ == n {\n            result += &word.to_string() + \" \";\n        }\n    }\n\
    \    result.trim().to_string()", "    //let vowels = vec!['a', 'e', 'i', 'o',\
    \ 'u'];\n    let consonants = vec!['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l',\
    \ 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'];\n    //let b =\
    \ vec!['a', 'e', 'i', 'o', 'u'];\n    //let c = vec!['a', 'e', 'i', 'o', 'u'];\n\
    \    //let d = vec!['a', 'e', 'i', 'o', 'u'];\n    //let f = vec!['a', 'e', 'i',\
    \ 'o', 'u'];\n    //let g = vec!['a', 'e', 'i', 'o', 'u'];\n    //let h = vec!['a',\
    \ 'e', 'i', 'o', 'u'];\n    //let j = vec!['a', 'e', 'i', 'o', 'u'];\n    //let\
    \ k = vec!['a', 'e', 'i', 'o', 'u'];\n    //let l = vec!['a', 'e', 'i', 'o', 'u'];\n\
    \    //let m = vec!['a', 'e', 'i', 'o', 'u'];\n    //let n = vec!['a', 'e', 'i',\
    \ 'o', 'u'];\n    //let p = vec!['a', 'e', 'i', 'o', 'u'];\n    //let q = vec!['a',\
    \ 'e', 'i', 'o', 'u'];\n    //let r = vec!['a', 'e', 'i', 'o', 'u'];\n    //let\
    \ s = vec!['a', 'e', 'i', 'o', 'u'];\n    //let t = vec!['a', 'e', 'i', 'o', 'u'];\n\
    \    //let v = vec!['a', 'e', 'i', 'o', 'u'];\n    //let w = vec", "    let mut\
    \ ans = \"\".to_string();\n    for x in s.split_whitespace() {\n        if x.chars().filter(|x|\
    \ \"bcdfghjklmnpqrstvwxyz\".contains(x)).count() as isize == n {\n           \
    \ ans += x;\n            ans += \" \";\n        }\n    }\n    ans", "    let mut\
    \ result = String::new();\n    for word in s.split_whitespace() {\n        if\
    \ count_consonants(word) == n {\n            result.push_str(word);\n        \
    \    result.push(' ');\n        }\n    }\n    result.trim().to_string()", "  \
    \  let mut result = String::new();\n    if s.is_empty() {\n        return result;\n\
    \    }\n    let mut split = s.split_whitespace();\n    loop {\n        let s =\
    \ split.next();\n        if s.is_none() {\n            break;\n        }\n   \
    \     let mut count = 0;\n        for c in s.unwrap().chars() {\n            if\
    \ c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n               \
    \ count += 1;\n            }\n        }\n        if count == n {\n           \
    \ result.push_str(s.unwrap());\n            result.push(' ');\n        }\n   \
    \ }\n    result.pop();\n    result", "    let mut res: Vec<String> = Vec::new();\n\
    \    let v: Vec<&str> = s.split(\" \").collect();\n    let vowels = ['a', 'e',\
    \ 'i', 'o', 'u'];\n    for word in v {\n        let mut count = 0;\n        for\
    \ c in word.chars() {\n            if !vowels.contains(&c) {\n               \
    \ count += 1;\n            }\n        }\n        if count == n {\n           \
    \ res.push(word.to_string());\n        }\n    }\n    res.join(\" \")", "    s.split(\"\
    \ \")\n        .filter(|word| word.chars().filter(|c| \"aeiouAEIOU\".contains(*c)).count()\
    \ as isize == n)\n        .collect::<Vec<&str>>()\n        .join(\" \")", "  \
    \  // Split string on a space\n    let mut words = s.split_whitespace();\n   \
    \ // Create an empty vector to hold our words\n    let mut vector: Vec<&str> =\
    \ Vec::new();\n    // Loop over words, checking if the word has exactly n consonants\n\
    \    while let Some(word) = words.next() {\n        if let (count, true) = count_vowels_consonants(word)\
    \ {\n            if count == n {\n                vector.push(word);\n       \
    \     }\n        }\n    }\n    // If our vector is empty, return empty string\n\
    \    if vector.is_empty() {\n        return String::from(\"\");\n    }\n    //\
    \ Return the vector, joined by a space\n    vector.join(\" \")", "    let v: Vec<&str>\
    \ = s.split(\" \").collect();\n    let mut res = vec![];\n    for word in v {\n\
    \        let mut consonants = 0;\n        for c in word.chars() {\n          \
    \  if !\"aeiou\".contains(c) {\n                consonants += 1;\n           \
    \ }\n        }\n        if consonants == n {\n            res.push(word);\n  \
    \      }\n    }\n    res.join(\" \")", "    let consonants = ['B', 'C', 'D', 'F',\
    \ 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Z'];\n\
    \    let mut selected_words = vec![];\n    for word in s.split(\" \") {\n    \
    \    let mut counter = 0;\n        for letter in word.chars() {\n            if\
    \ consonants.contains(&letter.to_ascii_uppercase()) {\n                counter\
    \ += 1;\n            }\n        }\n        if counter == n {\n            selected_words.push(word);\n\
    \        }\n    }\n    selected_words.join(\" \")", "  let space = String::from(\"\
    \ \");\n  if s.is_empty() {\n    return String::from(\"\");\n  }\n\n  let mut\
    \ res = String::new();\n  let strs: Vec<&str> = s.split_whitespace().collect();\n\
    \  for v in strs {\n    let mut count = 0;\n    for ch in v.chars() {\n      if\
    \ ch != 'a' && ch != 'e' && ch != 'i' && ch != 'o' && ch != 'u' {\n        count\
    \ += 1;\n      }\n    }\n    if count == n {\n      res.push_str(v);\n      res.push_str(&space);\n\
    \    }\n  }\n  if res.is_empty() {\n    return String::from(\"\");\n  }\n\n  let\
    \ newstr = res.trim();\n  return newstr.to_string();", "    s.split_whitespace()\n\
    \        .filter(|word| num_consonants(word) == n)\n        .collect::<Vec<&str>>()\n\
    \        .join(\" \")", "    s.split_whitespace()\n     .filter(|w| w.chars().filter(|c|\
    \ \"aeiou\".contains(*c)).count() as isize == n)\n     .collect::<Vec<&str>>()\n\
    \     .join(\" \")", '    "".to_string()', "    let mut r = String::new();\n \
    \   let mut tmp = String::new();\n    let m = s.split_whitespace();\n    for i\
    \ in m {\n        let count: isize = i.chars().filter(|&x| \"bcdfghjklmnpqrstvwxyz\"\
    .contains(x)).count() as isize;\n        if count == n {\n            tmp.push_str(i);\n\
    \            tmp.push(' ');\n        }\n    }\n    let c = tmp.split_whitespace();\n\
    \    for i in c {\n        r.push_str(i);\n        r.push(' ');\n    }\n    return\
    \ r;", "    s.split_whitespace()\n        .filter(|w| {\n            let consonants\
    \ = w.chars().filter(|c| \"bcdfghjklmnpqrstvwxyz\".contains(*c)).count();\n  \
    \          consonants == n as usize\n        })\n        .collect::<Vec<&str>>()\n\
    \        .join(\" \")", "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n   \
    \ let mut words = s.split_whitespace();\n    let mut result = String::new();\n\
    \    for word in words {\n        let mut num_consonants = 0;\n        for ch\
    \ in word.chars() {\n            if !vowels.contains(&ch) {\n                num_consonants\
    \ += 1;\n            }\n        }\n        if num_consonants == n {\n        \
    \    result += word;\n            result += \" \";\n        }\n    }\n    result.trim().to_string()",
  "    let mut result = Vec::new();\n    let mut word = String::new();\n    let mut\
    \ consonants = 0;\n    for c in s.chars() {\n        if c == ' ' {\n         \
    \   if consonants == n {\n                result.push(word.clone());\n       \
    \     }\n            word.clear();\n            consonants = 0;\n        } else\
    \ {\n            word.push(c);\n            if !is_vowel(c) {\n              \
    \  consonants += 1;\n            }\n        }\n    }\n    if consonants == n {\n\
    \        result.push(word);\n    }\n    if result.len() == 0 {\n        return\
    \ String::new();\n    }\n    result.join(\" \")", "    let mut words = s.split(\"\
    \ \");\n    let mut output = Vec::new();\n    let mut vowels = vec!['a', 'e',\
    \ 'i', 'o', 'u'];\n    for word in words {\n        let mut n_con = 0;\n     \
    \   for x in word.chars() {\n            if vowels.contains(&x) {\n          \
    \      continue;\n            } else {\n                n_con += 1;\n        \
    \    }\n        }\n        if n_con == n {\n            output.push(word);\n \
    \       }\n    }\n    output.join(\" \")", "    let mut words = s.split(\" \"\
    );\n    let mut result = String::new();\n    for word in words {\n        if word.chars().filter(|&c|\
    \ c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u').count() as isize ==\
    \ n {\n            result.push_str(word);\n            result.push(' ');\n   \
    \     }\n    }\n    if result.len() > 0 {\n        result.pop();\n    }\n    result",
  "    s.split_whitespace()\n        .filter(|word| {\n            word.chars()\n\
    \                .filter(|c| !c.is_vowel())\n                .count() as isize\
    \ == n\n        })\n        .map(|word| word.to_string())\n        .collect::<Vec<String>>()\n\
    \        .join(\" \")", "  let mut result = String::new();\n  let mut words =\
    \ String::new();\n  let consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k',\
    \ 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'];\n  let mut cons_counter\
    \ = 0;\n  let mut tmp_word = String::new();\n  for char in s.chars() {\n    if\
    \ char == ' ' {\n      if cons_counter == n {\n        words.push_str(&tmp_word);\n\
    \        words.push(' ');\n      }\n      cons_counter = 0;\n      tmp_word =\
    \ String::new();\n    } else {\n      if consonants.contains(&char) {\n      \
    \  cons_counter += 1;\n      }\n      tmp_word.push(char);\n    }\n  }\n  if cons_counter\
    \ == n {\n    words.push_str(&tmp_word);\n  }\n  for (i, word) in words.split_whitespace().enumerate()\
    \ {\n    if i == 0 {\n      result.push_str(word);\n    } else {\n      result.push_str(&format!(\"\
    , {}\", word));\n    }\n  }\n  result", '    unimplemented!()', "    s.split_whitespace()\n\
    \        .filter(|w| w.chars().filter(|c| \"aeiou\".contains(*c)).count() as isize\
    \ == n)\n        .collect::<Vec<&str>>()\n        .join(\" \")", "    s.split_whitespace()\n\
    \        .filter(|w| is_count_consonants(w, n))\n        .collect::<Vec<&str>>()\n\
    \        .join(\" \")", "    let mut word: String = String::new();\n    let mut\
    \ result: String = String::new();\n    let mut is_match: bool = false;\n    let\
    \ mut is_first: bool = true;\n    let mut last_char: char = ' ';\n    let mut\
    \ count: isize = 0;\n    let mut vowels: Vec<char> = vec!['a', 'e', 'i', 'o',\
    \ 'u'];\n    for c in s.chars() {\n        if c.is_alphabetic() {\n          \
    \  word.push(c);\n            if last_char != ' ' && !vowels.contains(&last_char)\
    \ {\n                count += 1;\n            }\n        } else {\n          \
    \  if count == n {\n                if is_first {\n                    is_first\
    \ = false;\n                } else {\n                    result.push(' ');\n\
    \                }\n                result.push_str(&word);\n                is_match\
    \ = true;\n            }\n            count = 0;\n            word = String::new();\n\
    \        }\n        last_char = c;\n    }\n    if count == n {\n        if is_first\
    \ {\n            is_first = false;\n        } else {\n            result.push('\
    \ ');\n        }\n        result.push_str(&word);\n        is_match = true;\n\
    \    }\n    if !is_match {\n        result = String::new();\n    }\n    result",
  "    s.split(\" \")\n     .filter(|x| count_consonants(x) == n)\n     .map(|x| x.to_string())\n\
    \     .collect::<Vec<String>>()\n     .join(\" \")", '    "".to_string()', " \
    \   let mut words = s.split(\" \");\n    let mut result = Vec::new();\n    for\
    \ word in words {\n        let mut count = 0;\n        for c in word.chars() {\n\
    \            if c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' && c\
    \ != 'y' {\n                count += 1;\n            }\n        }\n        if\
    \ count == n {\n            result.push(word);\n        }\n    }\n    result.join(\"\
    \ \")", "    let s_cnt = s.chars().filter(|c| {\n        let c = c.to_lowercase().to_string();\n\
    \        \"a\" != c && \"e\" != c && \"i\" != c && \"o\" != c && \"u\" != c\n\
    \    }).count();\n    let s_wcnt = s.split_whitespace().filter(|w| {\n       \
    \ let w = w.to_lowercase();\n        w.chars().filter(|c| {\n            let c\
    \ = c.to_lowercase().to_string();\n            \"a\" != c && \"e\" != c && \"\
    i\" != c && \"o\" != c && \"u\" != c\n        }).count() == s_cnt\n    }).collect::<Vec<&str>>();\n\
    \    s_wcnt.join(\" \")", "    let mut result = String::new();\n    for word in\
    \ s.split_whitespace() {\n        if word.chars().filter(|c| \"bcdfghjklmnpqrstvwxyz\"\
    .contains(*c)).count() as isize == n {\n            result += word;\n        \
    \    result += \" \";\n        }\n    }\n    result.trim().to_string()", "   \
    \ let chars: Vec<char> = s.chars().collect();\n    let mut result = String::new();\n\
    \    let mut count = 0;\n    let mut temp_str = String::new();\n    for c in chars\
    \ {\n        if c == ' ' {\n            if count == n {\n                result.push_str(&temp_str);\n\
    \                result.push(' ');\n            }\n            temp_str = String::new();\n\
    \            count = 0;\n        } else {\n            if c != 'a' && c != 'e'\
    \ && c != 'i' && c != 'o' && c != 'u' && c != 'y' && c != 'A' && c != 'E' && c\
    \ != 'I' && c != 'O' && c != 'U' && c != 'Y' {\n                count += 1;\n\
    \            }\n            temp_str.push(c);\n        }\n    }\n    if count\
    \ == n {\n        result.push_str(&temp_str);\n    }\n    result", "    let mut\
    \ buffer = String::new();\n    let mut count: isize = 0;\n    let mut add_space\
    \ = false;\n    for word in s.split(\" \") {\n        count = count_consonants(word);\n\
    \        if count == n {\n            if add_space {\n                buffer.push_str(\"\
    \ \");\n            }\n            buffer.push_str(word);\n            add_space\
    \ = true;\n        }\n    }\n    buffer", "    let mut result = String::new();\n\
    \    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let words = s.split_whitespace();\n\
    \    for word in words {\n        let mut count = 0;\n        for c in word.chars()\
    \ {\n            if !vowels.contains(&c) {\n                count += 1;\n    \
    \        }\n        }\n        if count == n {\n            result.push_str(word);\n\
    \            result.push(' ');\n        }\n    }\n    result.trim().to_string()",
  "    if n < 0 {\n        return \"Empty string is returned\".to_string();\n    }\n\
    \    let mut arr = s.split(\" \");\n    let mut res = vec![];\n    for i in arr\
    \ {\n        let mut count = 0;\n        for j in i.chars() {\n            match\
    \ j {\n                'a' | 'e' | 'i' | 'o' | 'u' | 'y' => count += 0,\n    \
    \            _ => count += 1,\n            }\n        }\n        if count == n\
    \ {\n            res.push(i);\n        }\n    }\n    return res.join(\" \");",
  "    let mut vec: Vec<&str> = Vec::new();\n    for i in s.split(\" \") {\n     \
    \   let mut cnt = 0;\n        for c in i.chars() {\n            if ! c.is_vowel()\
    \ {\n                cnt += 1;\n            }\n        }\n        if cnt == n\
    \ {\n            vec.push(i);\n        }\n    }\n    return vec.join(\" \");",
  '    unimplemented!()', "    let mut r = String::new();\n    for x in s.split_whitespace()\
    \ {\n        if x.chars().filter(|&c| c.is_ascii_lowercase()).filter(|&c|\n  \
    \              c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u'\n    \
    \        ).count() as isize == n {\n            r.push_str(x);\n            r.push('\
    \ ');\n        }\n    }\n    r.trim().to_string()", "    if s.is_empty() {\n \
    \       return String::new();\n    }\n    let mut words: Vec<String> = s.split_whitespace().map(|s|\
    \ s.to_string()).collect();\n    words.retain(|w| w.chars().filter(|c| !c.is_vowel()).count()\
    \ as isize == n);\n    words.join(\" \")", "    let mut list = s.split_whitespace();\n\
    \    let result: Vec<&str> = list.clone().filter(|x| x.chars().filter(|y| y.is_ascii_consonant()).count()\
    \ as isize == n).collect();\n    result.join(\" \")", "    let mut res: Vec<String>\
    \ = Vec::new();\n    for i in s.split_whitespace() {\n        if i.chars().filter(|&c|\
    \ c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u').count() as isize ==\
    \ n {\n            res.push(i.to_string());\n        }\n    }\n    res.join(\"\
    \ \")", '    unimplemented!()', "    let mut result = String::new();\n    let\
    \ words = s.split(\" \");\n    for word in words {\n        let count = word.matches(|c:\
    \ char| c.is_ascii_lowercase() && c.is_consonant()).count();\n        if count\
    \ == n as usize {\n            result.push_str(word);\n            result.push('\
    \ ');\n        }\n    }\n    result.trim().to_string()", "    let mut count: isize\
    \ = 0;\n    let mut result: String = String::new();\n    let mut words: Vec<&str>\
    \ = s.split_whitespace().collect();\n    for word in words.iter() {\n        for\
    \ ch in word.chars() {\n            if ch != 'a' && ch != 'e' && ch != 'i' &&\
    \ ch != 'o' && ch != 'u' {\n                count += 1;\n            }\n     \
    \   }\n        if count == n {\n            result += word;\n            result\
    \ += \" \";\n        }\n        count = 0;\n    }\n    result.trim().to_string()",
  "    let mut result = String::new();\n    let mut r: Vec<&str> = s.split_whitespace().collect();\n\
    \    r.sort_by(|a, b| {\n        count_consonants(a)\n            .cmp(&count_consonants(b))\n\
    \            .then(a.cmp(b))\n    });\n    let x: Vec<&str> = r.iter().filter(|word|\
    \ count_consonants(word) == n).collect();\n    for word in x {\n        result\
    \ += word;\n        result += \" \";\n    }\n    result.trim().to_string()", '    unimplemented!()',
  '    unimplemented!();', "    s.split_whitespace()\n        .filter(|w| {\n    \
    \        w.chars()\n                .filter(|c| match c {\n                  \
    \  'a' | 'e' | 'i' | 'o' | 'u' => false,\n                    _ => true,\n   \
    \             })\n                .count() as isize == n\n        })\n       \
    \ .collect::<Vec<&str>>()\n        .join(\" \")", "    let words: Vec<&str> =\
    \ s.split_whitespace().collect();\n    let mut result: Vec<&str> = Vec::new();\n\
    \    for word in words {\n        let mut consonants = 0;\n        for c in word.chars()\
    \ {\n            if !\"aeiou\".contains(c) {\n                consonants += 1;\n\
    \            }\n        }\n        if consonants == n {\n            result.push(word);\n\
    \        }\n    }\n    let r = result.join(\" \");\n    return r;", '    unimplemented!()',
  '    unimplemented!()', "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let\
    \ s = s.trim();\n    let words = s.split_whitespace();\n    let mut res = vec![];\n\
    \    for word in words {\n        let mut num_consonants = 0;\n        for c in\
    \ word.chars() {\n            if vowels.contains(&c) {\n                continue;\n\
    \            }\n            num_consonants += 1;\n        }\n        if num_consonants\
    \ == n {\n            res.push(word);\n        }\n    }\n    res.join(\" \")",
  "    let v: Vec<&str> = s.split(\" \").collect();\n    let mut result = String::new();\n\
    \    for word in v {\n        let count = word.chars().filter(|c| c.is_alphabetic()\
    \ && !c.is_vowel()).count();\n        if count == n as usize {\n            result.push_str(word);\n\
    \            result.push(' ');\n        }\n    }\n    result.trim().to_string()",
  "    let mut res = String::new();\n    for (i, word) in s.split(\" \").enumerate()\
    \ {\n        if count_consonants(word) == n {\n            res += word;\n    \
    \        if i < s.split(\" \").count() - 1 {\n                res += \" \";\n\
    \            }\n        }\n    }\n    res", "    let mut selected_words = String::new();\n\
    \    for word in s.split(\" \") {\n        if count_consonants(word) == n {\n\
    \            selected_words.push_str(word);\n            selected_words.push('\
    \ ');\n        }\n    }\n    let last_char = selected_words.pop();\n    if last_char\
    \ == Some(' ') {\n        selected_words\n    } else {\n        selected_words.push(last_char.unwrap());\n\
    \        selected_words\n    }"]
stop_tokens:
- "\n}"
