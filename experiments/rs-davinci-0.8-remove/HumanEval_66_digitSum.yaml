name: HumanEval_66_digitSum
language: rs
prompt: "/// Task\n/// Write a function that takes a string as input and returns the\
  \ sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\nfn digitSum(s:\
  \ String) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = digitSum;\n    assert_eq!(candidate(String::from(\"\
  \")), 0);\n    assert_eq!(candidate(String::from(\"abAB\")), 131);\n    assert_eq!(candidate(String::from(\"\
  abcCd\")), 67);\n    assert_eq!(candidate(String::from(\"helloE\")), 69);\n    assert_eq!(candidate(String::from(\"\
  woArBld\")), 131);\n    assert_eq!(candidate(String::from(\"aAaaaXa\")), 153);\n\
  \    assert_eq!(candidate(String::from(\" How are yOu?\")), 151);\n    assert_eq!(candidate(String::from(\"\
  You arE Very Smart\")), 327);\n}\n"
completions: ["    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ {\n            sum += c as isize - 64;\n        }\n    }\n    sum", "    let\
    \ mut sum = 0;\n    for c in s.chars() {\n        let n = c as isize;\n      \
    \  if n >= 65 && n <= 90 {\n            sum += n - 65 + 1;\n        }\n    }\n\
    \    sum", "    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_ascii_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum", "    let mut\
    \ result = 0isize;\n    for c in s.chars() {\n        if c.is_alphabetic() {\n\
    \            result += (c as u8) as isize;\n        }\n    }\n    result", '    s.chars().filter(|c|
    c.is_uppercase()).map(|c| c as isize).sum()', "    s.chars().map(|c| {\n     \
    \   match c {\n            'A'...'Z' => c as isize - 'A' as isize + 1,\n     \
    \       _ => 0,\n        }\n    }).sum()", "    let mut sum = 0;\n    for c in\
    \ s.chars() {\n        if c.is_ascii_uppercase() {\n            sum += c as isize\
    \ - 'A' as isize + 1;\n        }\n    }\n    sum", "    let mut sum = 0;\n   \
    \ for c in s.chars() {\n        let c_num = c as u8;\n        if c_num >= 65 &&\
    \ c_num <= 90 {\n            sum += c_num as isize;\n        }\n    }\n    sum",
  "    let input: Vec<_> = s.chars().collect();\n    let mut sum = 0;\n    for char\
    \ in input {\n        if char.is_uppercase() {\n            sum += char as isize;\n\
    \        }\n    }\n    sum", "    let mut res = 0;\n    for c in s.chars() {\n\
    \        res += c as isize;\n    }\n    res", '    s.as_bytes().iter().map(|&x|
    x as isize).sum()', "    let mut result = 0;\n    for i in s.chars() {\n     \
    \   let ascii = i as isize;\n        if ascii >= 65 && ascii <= 90 {\n       \
    \     result += ascii;\n        }\n    }\n    result", "    let mut res = 0;\n\
    \    for ch in s.chars() {\n        let ch_int = ch as isize;\n        if ch_int\
    \ >= 65 && ch_int <= 90 {\n            res += ch_int;\n        }\n    }\n    res",
  "    s.as_bytes().iter().map(|&x| if x >= 'A' as u8 && x <= 'Z' as u8 { x as isize\
    \ - 'A' as isize + 1 } else { 0 }).sum()", '    s.chars().map(|c| c as isize).filter(|c|
    *c > 64 && *c < 91).sum()', '    s.chars().map(|ch| ch as isize).sum()', "   \
    \ let mut sum = 0;\n    for ch in s.chars() {\n        if ch.is_uppercase() {\n\
    \            sum += ch as isize;\n        }\n    }\n    sum", "    s.chars().map(|x|\
    \ (x as isize - 'A' as isize) % 32).sum()", "    let mut sum = 0;\n    for ch\
    \ in s.chars() {\n        if ch.is_alphabetic() {\n            sum += ch as isize;\n\
    \        }\n    }\n    sum", "    let a = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".as_bytes();\n\
    \    let mut t: isize = 0;\n    for x in s.to_uppercase().as_bytes() {\n     \
    \   if x.is_ascii_uppercase() {\n            t += isize::from(x) - isize::from(a[0]);\n\
    \        }\n    }\n    t", "    let mut sum = 0;\n    for ch in s.chars() {\n\
    \        if ch.is_uppercase() {\n            sum += ch as isize;\n        }\n\
    \    }\n    sum", '    return s.bytes().filter(|&x| x>=65 && x<=90).map(|x| x
    as isize).sum();', '    s.chars().map(|c| c as isize).filter(|c| c > &96).sum()',
  "    let re = Regex::new(r\"\\d+\").unwrap();\n    re.captures_iter(&s)\n      \
    \  .map(|c| c.get(0).unwrap().as_str().parse::<isize>().unwrap())\n        .sum()",
  "    let mut sum = 0;\n    for i in s.chars() {\n        if i.is_ascii_uppercase()\
    \ {\n            sum += i as isize;\n        }\n    }\n    sum", '    return s.chars().map(|c|
    c as isize).sum();', '    s.chars().filter(|c| c.is_uppercase()).fold(0, |acc,
    c| acc + c as isize)', "    let sum: isize = s.chars().filter(|c| c.is_uppercase()).map(|c|\
    \ c as isize).sum();\n    sum", '    s.chars().filter(|c| c.is_uppercase()).map(|c|
    c as isize).sum()', '    s.chars().map(|x| x as isize).sum()', '    s.bytes().filter(|&b|
    b >= 65 && b <= 90).map(|b| b as isize).sum()', "    s.as_bytes().iter().fold(0,\
    \ |acc, &x| if x >= b'A' && x <= b'Z' {\n        acc + x as isize\n    } else\
    \ {\n        acc\n    })", "    let mut total = 0;\n    for character in s.chars()\
    \ {\n        let value = character as u8;\n        if value >= 65 && value <=\
    \ 90 {\n            total += value as isize;\n        }\n    }\n    total", " \
    \   let mut sum = 0;\n    for digit in s.chars() {\n        sum += digit as isize;\n\
    \    }\n    sum", '    s.chars().map(|x| x as isize).filter(|x| x >= &65 && x
    <= &90).sum()', "    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_ascii_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum", "    let mut\
    \ upper_sum = 0;\n    for i in s.chars() {\n        let n = i as isize;\n    \
    \    if n >= 65 && n <= 90 {\n            upper_sum += n;\n        }\n    }\n\
    \    upper_sum", '    s.chars().map(|c| c as isize).filter(|&c| c >= 65 && c <=
    90).sum()', "    // your code\n    let mut sum = 0;\n    for c in s.chars() {\n\
    \        if c.is_uppercase() {\n            sum += c as isize;\n        }\n  \
    \  }\n    sum", "  let mut total = 0;\n  for i in s.chars() {\n    if i >= 'A'\
    \ && i <= 'Z' {\n      total += i as isize - 64;\n    }\n  }\n  total", '    return
    s.chars().map(|c| if c.is_ascii_uppercase() { c as isize - 64 } else { 0 }).sum();',
  "    let up = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    let letters = s.chars().filter(|&x|\
    \ up.contains(x)).collect::<Vec<char>>();\n    letters.iter().map(|x| x as isize\
    \ - 64).sum()", '    s.chars().filter(|&c| c.is_uppercase()).map(|c| c as isize).sum()',
  '    s.chars().map(|x| x as isize).filter(|x| *x >= 65 && *x <= 90).sum()', '    s.as_bytes().iter().fold(0,
    |sum, i| sum + if *i >= 65 && *i <= 90 { (i - 65) as isize + 1 } else { 0 })',
  '    s.chars().filter(|c| c.is_uppercase()).fold(0, |acc, elem| acc + elem as isize)',
  "    let mut sum = 0;\n    for ch in s.chars() {\n        let n = ch as isize;\n\
    \        if n >= 65 && n <= 90 {\n            sum += n;\n        }\n    }\n  \
    \  sum", '    s.chars().map(|c| c as isize).filter(|&c| c >= 65 && c <= 90).sum()',
  "  let mut sum = 0;\n  for ch in s.chars() {\n    sum += if ch.is_uppercase() {\n\
    \      ch as isize - 64\n    } else {\n      0\n    };\n  }\n  sum", "    let\
    \ mut sum = 0;\n    for i in s.chars() {\n        sum += i as isize;\n    }\n\
    \    sum", "    let mut result = 0;\n    for c in s.chars() {\n        if c >=\
    \ 'A' && c <= 'Z' {\n            result += c as isize;\n        }\n    }\n   \
    \ result", '    s.chars().filter(|x| x.is_uppercase()).map(|x| x as isize - 64).sum()',
  '    s.chars().filter(|&c| c.is_ascii_uppercase()).fold(0, |acc, c| acc + c as isize)',
  '  s.chars().filter(|x| x.is_uppercase()).fold(0, |acc, x| acc + x as isize)', '    s.chars().filter(|&x|
    x.is_uppercase()).map(|x| x as isize).sum()', "  s.chars().filter(|c| c.is_uppercase()).map(|c|\
    \ c as isize - ('A' as isize - 1)).sum()", "    // your code here\n    0", " \
    \   s.chars().map(|c|\n        if c.is_uppercase() {\n            c as isize -\
    \ 'A' as isize + 1\n        } else {\n            0\n        }\n    ).sum()",
  '    s.chars().map(|c| c as isize).filter(|n| *n > 64 && *n < 91).sum()', '    s.chars().filter(|c|
    c.is_uppercase()).fold(0, |a, c| a + c as isize)', '    s.into_bytes().iter().map(|b|
    b as isize).filter(|b| *b >= 65 && *b <= 90).sum()', "    s.chars().map(|c| c\
    \ as isize).filter(|&c| c >= 'A' as isize && c <= 'Z' as isize).sum()", "    let\
    \ mut sum = 0;\n    for character in s.chars() {\n        let c = character as\
    \ u8;\n        if c >= 65 && c <= 90 {\n            sum += c as isize;\n     \
    \   }\n    }\n    sum", "    let mut sum = 0;\n    for c in s.chars() {\n    \
    \    sum += if c >= 'a' && c <= 'z' {\n            c as isize - 'a' as isize +\
    \ 1\n        } else if c >= 'A' && c <= 'Z' {\n            c as isize - 'A' as\
    \ isize + 1\n        } else {\n            0\n        };\n    }\n    sum", '    s.into_bytes().iter().map(|c|
    *c as isize).sum()', "    let mut sum = 0;\n    for ch in s.chars() {\n      \
    \  if ch.is_uppercase() {\n            sum += ch as isize;\n        }\n    }\n\
    \    sum", "  // your code here\n  s.chars().filter(|&c| c.is_ascii_uppercase()).map(|c|\
    \ (c as isize) - 65 + 1).sum()", "    let mut sum = 0;\n    for c in s.chars()\
    \ {\n        if c.is_uppercase() {\n            sum += c as isize;\n        }\n\
    \    }\n    sum", '    s.bytes().filter(|&c| c.is_ascii_uppercase()).map(|c| c
    as isize).sum()', "    let mut sum = 0;\n    for c in s.chars() {\n        if\
    \ c.is_ascii_uppercase() {\n            sum += c as isize;\n        }\n    }\n\
    \    sum", "    let mut result = 0;\n    let s = s.chars().filter(|x| x.is_uppercase()).collect::<Vec<char>>();\n\
    \    for i in 0..s.len() {\n        result += s[i] as isize;\n    }\n    result",
  '    s.chars().filter(|c| c.is_uppercase()).map(|c| c as isize).sum()', "    return\
    \ s.chars().map(|c| if c.is_alphabetic() && c.is_uppercase() { c as isize - 'A'\
    \ as isize + 1 } else { 0 }).sum();", '  s.chars().filter(|&c| c.is_uppercase()).fold(0,
    |sum, c| sum + c as isize)', "    let mut sum = 0;\n    for c in s.chars() {\n\
    \        let ascii_code = c as isize;\n        if ascii_code >= 65 && ascii_code\
    \ <= 90 {\n            sum += ascii_code - 64;\n        }\n    }\n    sum", " \
    \   return s.chars().map(|x| {\n        if x.is_uppercase() {\n            x as\
    \ isize - 64\n        } else {\n            0\n        }\n    }).sum();", '    s.chars().map(|c|
    c as isize).sum()', "    let mut sum = 0;\n    for c in s.chars() {\n        if\
    \ let Some(x) = c.to_digit(10) {\n            sum += x as isize;\n        }\n\
    \    }\n    sum", '    s.chars().filter(|c| c.is_uppercase()).map(|c| c as isize).sum()',
  '    s.chars().filter(|&c| c.is_uppercase()).map(|c| c as isize).sum()', '    s.chars().filter(|c|
    c.is_uppercase()).map(|c| c as isize).sum()', "    let mut sum = 0;\n    for i\
    \ in s.chars() {\n        let ascii = i as u8;\n        if ascii >= 65 && ascii\
    \ <= 90 {\n            sum += (ascii - 64) as isize;\n        }\n    }\n    sum",
  "    let mut sum = 0;\n    for c in s.as_bytes() {\n        if *c < 65 || *c > 122\
    \ {\n            continue;\n        }\n        sum += *c as isize;\n    }\n  \
    \  sum", '    s.chars().filter(|c| c.is_uppercase()).map(|c| c as isize).sum()',
  '    s.chars().filter(|c| c.is_uppercase()).map(|c| c as isize).sum()', "    //\
    \ your code here\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_ascii_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum", "    let mut\
    \ sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase() {\n        \
    \    sum += c as isize;\n        }\n    }\n    sum", "    let mut sum = 0;\n \
    \   for c in s.chars() {\n        if c.is_uppercase() {\n            sum += c\
    \ as isize;\n        }\n    }\n    sum", '  s.chars().fold(0, |acc, x| acc + if
    x.is_alphabetic() && x.is_uppercase() {x as isize - 64} else {0})', "  let mut\
    \ total = 0;\n  for c in s.chars() {\n    let cur = c as u8;\n    if cur >= 65\
    \ && cur <= 90 {\n      total += (cur - 65) as isize + 1;\n    }\n  }\n  total",
  '    s.chars().filter(|c| c.is_uppercase()).map(|c| c as isize).sum()', "    let\
    \ mut sum = 0;\n    for i in s.chars() {\n        if i.is_ascii_uppercase() {\n\
    \            sum += i as isize;\n        }\n    }\n    sum", '    s.chars().filter(|c|
    c.is_ascii_uppercase()).map(|c| c as isize).sum()', '    s.chars().map(|c| if
    c.is_uppercase() { c as isize - 64 } else { 0 }).sum()', '  return s.chars().filter(|c|
    c.is_uppercase()).map(|c| isize::from(c as u8)).sum();', "    let mut sum = 0;\n\
    \    for c in s.chars() {\n        if c.is_uppercase() {\n            sum += (c\
    \ as u8) as isize;\n        }\n    }\n    sum", '    s.into_bytes().iter().fold(0,
    |acc, i| acc + if i >= &65 && i <= &90 { i - 64 } else { 0 })', "    let mut res\
    \ = 0;\n    for c in s.chars() {\n        if let Some(n) = c.to_digit(10) {\n\
    \            res += n as isize;\n        }\n    }\n    res", "    s.bytes().filter(|&b|\
    \ b >= b'A' && b <= b'Z').map(|b| b as isize - b'A' as isize + 1).sum()", "  \
    \  let mut res = 0;\n    for c in s.chars() {\n        if c.is_uppercase() {\n\
    \            res += (c as u8) as isize;\n        }\n    }\n    res", '    s.chars().filter(|&a|
    a.is_uppercase()).map(|a| a as isize).sum()', "    let mut sum = 0;\n    for i\
    \ in s.chars() {\n        if i.is_uppercase() {\n            sum += i as isize;\n\
    \        }\n    }\n    sum", "    let mut sum = 0;\n    for c in s.chars() {\n\
    \        if let Some(value) = c.to_digit(10) {\n            sum += value as isize;\n\
    \        }\n    }\n    sum", '  return s.as_bytes().iter().map(|&c| (c - 64) as
    isize).sum();', '    s.chars().map(|c| c as isize).sum()', "    let mut sum =\
    \ 0;\n    for c in s.chars() {\n        if c.is_ascii_uppercase() {\n        \
    \    sum += c as isize;\n        }\n    }\n    sum", "    let mut sum = 0;\n \
    \   for c in s.chars() {\n        let n = c as isize;\n        if n >= 65 && n\
    \ <= 90 {\n            sum += n - 64;\n        }\n    }\n    sum", '    s.chars().filter(|&x|
    x.is_uppercase()).map(|x| x as isize).sum()', '    s.chars().filter(|c| c.is_uppercase()).map(|c|
    c as isize).sum()', "    let mut sum = 0;\n    for c in s.chars() {\n        if\
    \ c.is_uppercase() {\n            sum += c as isize;\n        }\n    }\n    sum",
  "    let mut sum = 0;\n    for (i, c) in s.chars().enumerate() {\n        if c.is_uppercase()\
    \ {\n            sum += (c as isize) - 64;\n        }\n    }\n    sum", "    let\
    \ mut sum = 0;\n    for ch in s.chars() {\n        if ch.is_uppercase() {\n  \
    \          sum += ch as isize;\n        }\n    }\n    sum", '  s.chars().filter(|&x|
    x.is_uppercase()).map(|x| x as isize).sum()', '    s.chars().filter(|&c| c.is_uppercase()).map(|c|
    c as isize).sum()', "    s.chars().filter(|x| x.is_uppercase()).map(|x| x as isize\
    \ - 'A' as isize + 1).sum()", '    s.chars().filter(|c| c.is_uppercase()).map(|c|
    (c as u8) as isize).sum()', "  let mut sum = 0;\n  for i in s.chars() {\n    if\
    \ i.is_ascii_uppercase() {\n      sum += i as isize;\n    }\n  }\n  sum", '    s.chars().filter(|&x|
    x.is_uppercase()).map(|x| x as isize).sum()', "    let a: Vec<char> = s.chars().collect();\n\
    \    let mut sum = 0;\n    for i in a {\n        if i.is_uppercase() {\n     \
    \       sum += i as isize;\n        }\n    }\n    sum", "    let mut sum = 0;\n\
    \    for i in s.chars() {\n        let ascii = i as u8;\n        if ascii >= 65\
    \ && ascii <= 90 {\n            sum += ascii as isize;\n        }\n    }\n   \
    \ sum", '    return s.bytes().filter(|c| c.is_ascii_uppercase()).map(|c| c as
    isize).sum();', '    s.bytes().filter(|c| c.is_ascii_uppercase()).sum()', '    s.chars().filter(|c|
    c.is_ascii_uppercase()).map(|c| c as isize).sum()', '    s.chars().map(|c| (c
    as u8) as isize).filter(|c| *c > 64 && *c < 91).sum()', "    s.chars().map(|c|\
    \ if c.is_ascii_uppercase() { c as isize - 'A' as isize + 1 } else { 0 }).sum()",
  "    let chars = s.chars();\n    let mut res = 0isize;\n    for c in chars {\n \
    \       let code = c as isize;\n        if code >= 65 && code <= 90 {\n      \
    \      res += code;\n        }\n    }\n    res", '  unimplemented!();', "    let\
    \ mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase() {\n    \
    \        sum += c as isize;\n        }\n    }\n    sum", "    let mut sum = 0;\n\
    \    for c in s.chars() {\n        if c.is_uppercase() {\n            sum += c\
    \ as isize;\n        }\n    }\n    sum", '    s.chars().filter(|&c| c.is_uppercase()).map(|c|
    c as isize).sum()', "    let mut sum = 0;\n    for c in s.chars() {\n        if\
    \ c >= 'A' && c <= 'Z' {\n            sum += c as isize;\n        }\n    }\n \
    \   sum", '  s.chars().filter(|c| c.is_ascii_uppercase()).map(|c| c as isize).sum()',
  "    let mut digits: isize = 0;\n    for c in s.chars() {\n        digits += (c\
    \ as u8) as isize;\n    }\n    digits", "    let mut sum = 0;\n    for c in s.chars()\
    \ {\n        if c.is_uppercase() {\n            sum += c as isize;\n        }\n\
    \    }\n    sum", "    let mut sum = 0;\n    for c in s.chars() {\n        sum\
    \ += c as isize;\n    }\n    sum", '  s.chars().filter(|x| x.is_uppercase()).fold(0,
    |acc, x| acc + x as isize)', '    s.chars().map(|x| x as isize).filter(|x| *x
    >= 65 && *x <= 90).sum()', "    let mut sum = 0;\n    for c in s.chars() {\n \
    \       if c.is_ascii_uppercase() {\n            sum += c as isize;\n        }\n\
    \    }\n    sum", '    s.chars().map(|c| c as isize).filter(|&c| c > 64 && c <
    91).sum()', '    s.chars().map(|c| c as isize).filter(|c| *c >= 65 && *c <= 90).sum()',
  "    let mut sum = 0;\n    let mut v: Vec<_> = s.chars().collect();\n    while let\
    \ Some(c) = v.pop() {\n        if c.is_alphabetic() {\n            sum += c as\
    \ isize;\n        }\n    }\n    sum", "  let mut result = 0;\n  for c in s.chars()\
    \ {\n    if c.is_ascii_uppercase() {\n      result += (c as isize) - 64;\n   \
    \ }\n  }\n  result", '    s.chars().map(|c| c as isize).filter(|&c| 65 <= c &&
    c <= 90).sum()', "    let chars: Vec<char> = s.chars().collect();\n    let mut\
    \ sum = 0;\n    for c in chars {\n        let n = c as usize;\n        if n >=\
    \ 65 && n <= 90 {\n            sum += n as isize;\n        }\n    }\n    sum",
  "    // your code\n    let sum: isize = s.chars().filter(|x| x.is_uppercase()).map(|x|\
    \ x as isize).sum();\n    sum", "    s.chars().filter(|c| c.is_uppercase()).fold(0,\
    \ |acc, c| acc + (c as isize - ('A' as isize - 1)))", '    s.chars().map(|c| c
    as u8).filter(|u| u >= &65 && u <= &90).sum() as isize', "    let mut res = 0;\n\
    \    for c in s.chars() {\n        res += c as isize;\n    }\n    res", "  //\
    \ your code here\n  s.chars().map(|c|\n    if c.is_uppercase() {\n      (c as\
    \ u8 - 64) as isize\n    } else {\n      0\n    }\n  ).sum()", '    s.chars().filter(|c|
    c.is_ascii_uppercase()).map(|c| c as isize).sum()', "    let mut result = 0;\n\
    \    for c in s.chars() {\n        if c.is_uppercase() {\n            result +=\
    \ c as isize;\n        }\n    }\n    result", "    // 1. Use s.chars() to get\
    \ a collection of characters.\n    // 2. Filter the collection with char.is_uppercase()\n\
    \    // 3. Use map to apply char.to_digit() to each character, which will convert\
    \ the\n    // character into an Option<u32>\n    // 4. Use a match expression\
    \ to convert the Option<u32> into a Option<usize>\n    // 5. Filter the list to\
    \ leave only Some<usize>\n    // 6. Use map to apply the ascii_uppercase_sum_fn\
    \ to each value, returning an\n    // Option<usize>\n    // 7. Filter the list\
    \ to leave only Some<usize>\n    // 8. Use fold to sum all the usize in the collection.\n\
    \    s.chars()\n        .filter(|c| c.is_uppercase())\n        .map(|c| c.to_digit(36))\n\
    \        .filter_map(|d| d.map(|d| d as usize))\n        .map(|d| match d {\n\
    \            0..=25 => d + 65,\n            _ => d,\n        })\n        .filter_map(|d|\
    \ d.checked_add(48))\n        .sum() as isize", "  let mut sum = 0;\n  let v:\
    \ Vec<char> = s.chars().collect();\n  for i in v {\n    if i.is_alphabetic() {\n\
    \      let c = i as isize;\n      if c < 97 {\n        sum += c;\n      }\n  \
    \  }\n  }\n  sum", '    s.bytes().filter(|x| (x >= &65 && x <= &90) || (x >= &97
    && x <= &122)).sum()', "    let mut sum = 0;\n    for i in s.chars() {\n     \
    \   if i.is_ascii_uppercase() {\n            sum += i as isize;\n        }\n \
    \   }\n    sum", '    s.chars().filter(|c| c.is_uppercase()).map(|c| c as isize).sum()',
  '    s.chars().filter(|c| c.is_uppercase()).map(|c| c as isize).sum()', '    s.as_bytes().iter().map(|&x|
    (x as isize) - 96).sum()', '    s.into_bytes().iter().map(|&x| if x > 64 && x
    < 91 { x as isize - 38 } else { 0 }).sum()', '  s.chars().fold(0, |acc, c| if
    c.is_uppercase() { acc + c as isize } else { acc })', "    let mut sum = 0;\n\
    \    for c in s.chars() {\n        if c.is_uppercase() {\n            sum += c\
    \ as isize;\n        }\n    }\n    sum", '    s.chars().filter(|&ch| ch.is_ascii_uppercase()).map(|ch|
    ch as isize).sum()', "    let mut sum = 0;\n    for i in s.chars() {\n       \
    \ let val = i as isize;\n        if val >= 65 && val <= 90 {\n            sum\
    \ += val - 65 + 1;\n        }\n    }\n    sum", '    s.bytes().fold(0, |acc, c|
    if c >= 65 && c <= 90 { acc + c as isize } else { acc })', '    s.chars().filter(|&c|
    c.is_uppercase()).fold(0, |sum, c| sum + c as isize)', "    let num = s.chars().into_iter().filter(|x|\
    \ x.is_ascii_uppercase()).fold(0, |acc, x| acc + x as isize);\n    return num;",
  '  s.chars().fold(0, |acc, c| acc + if c.is_uppercase() { c as isize - 64 } else
    { 0 })', '    s.chars().map(|c| (c as u8) as isize).filter(|&x| x >= 65 && x <=
    90).sum()', '    s.as_bytes().iter().map(|&c| c as isize).filter(|&c| c >= 65
    && c <= 90).sum()', "    let mut sum = 0;\n    for c in s.chars() {\n        if\
    \ c >= 'A' && c <= 'Z' {\n            sum += c as isize;\n        }\n    }\n \
    \   sum", '    s.chars().filter(|&c| c.is_ascii_uppercase()).map(|c| c as isize).sum()',
  "    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_ascii_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum", "    // Your\
    \ code here...\n    let mut res = 0;\n    for i in s.chars() {\n        if i >=\
    \ 'A' && i <= 'Z' {\n            res += i as isize - 'A' as isize + 1;\n     \
    \   }\n    }\n    res", "    let mut sum = 0;\n    for ch in s.chars() {\n   \
    \     if ch.is_ascii_uppercase() {\n            sum += ch as isize;\n        }\n\
    \    }\n    sum", '    s.chars().filter(|c| c.is_ascii_uppercase()).map(|c| c
    as isize).sum()', "    // your code here\n    s.chars().map(|x| if x.is_ascii_uppercase()\
    \ { x as isize - 64 } else { 0 }).sum()", "    let mut sum = 0;\n    for c in\
    \ s.chars() {\n        if c.is_uppercase() {\n            sum += c as isize;\n\
    \        }\n    }\n    sum", "    // my solution\n    let result = s.chars().filter(|c|\
    \ c.is_uppercase()).map(|c| c as isize - 64).sum();\n    // best practice in codewars\n\
    \    // s.chars().map(|c| c as isize - 64).filter(|&c| c > 0).sum()\n    result",
  "    let mut sum = 0;\n    let mut i = 0;\n    while i < s.len() {\n        let\
    \ c = s.chars().nth(i).unwrap();\n        match c {\n            'A'...'Z' =>\
    \ sum += c as isize,\n            _ => (),\n        }\n        i += 1;\n    }\n\
    \    sum", "    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_ascii_uppercase()\
    \ {\n            sum += c as isize;\n        }\n    }\n    sum", '    s.chars().filter(|&c|
    c.is_uppercase()).fold(0, |acc, c| acc + c as isize)', "    let mut sum = 0;\n\
    \    for c in s.chars() {\n        if c.is_ascii_uppercase() {\n            sum\
    \ += c as isize;\n        }\n    }\n    sum", '    return 0;', "    let mut sum\
    \ = 0;\n    for byte in s.as_bytes() {\n        if byte >= &65 && byte <= &90\
    \ {\n            sum += byte - &65 + 1;\n        }\n    }\n    sum", '    s.chars().map(|c|
    c as isize).filter(|c| c > &64 && c < &91).sum()', "    let mut sum = 0;\n   \
    \ for c in s.chars() {\n        let letter = c as u8;\n        if letter >= 65\
    \ && letter <= 90 {\n            sum += letter as isize;\n        }\n    }\n \
    \   sum", '    s.chars().filter(|&c| c.is_uppercase()).map(|c| c as isize).sum()',
  "    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_uppercase() {\n\
    \            sum += c as isize;\n        }\n    }\n    sum", "    let mut result\
    \ = 0;\n    for byte in s.into_bytes() {\n        let char = byte as char;\n \
    \       let digit: Option<isize> = char.to_digit(10);\n        if digit.is_some()\
    \ {\n            result += digit.unwrap() as isize;\n        }\n    }\n    result",
  '    s.bytes().fold(0, |acc, c| acc + c as isize)', "    let mut sum = 0;\n    for\
    \ b in s.bytes() {\n        if b >= b'A' && b <= b'Z' {\n            sum += b\
    \ as isize;\n        }\n    }\n    sum", "    let mut sum = 0;\n    for c in s.chars()\
    \ {\n        let i = c as isize;\n        if i > 64 && i < 91 {\n            sum\
    \ += i - 64;\n        }\n    }\n    sum", '    s.chars().map(|ch| ch as isize).filter(|n|
    *n >= 65 && *n <= 90).sum()', "    let total = s.chars().filter(|x| x.is_uppercase()).fold(0,\
    \ |acc, x| acc + x as isize);\n    total", '    s.chars().filter(|&x| x.is_uppercase()).fold(0,
    |acc, x| acc + x as isize)', '    s.chars().map(|c| if c.is_uppercase() { c as
    isize - 64 } else { 0 }).sum()', "    s.chars().map(|c| {\n        let mut n =\
    \ c as isize;\n        if n >= 'A' as isize && n <= 'Z' as isize {\n         \
    \   n -= 'A' as isize;\n            n += 1;\n        }\n        n\n    }).sum()",
  '    s.chars().filter(|x| x.is_uppercase()).map(|x| x as isize - 64).sum()', '    s.bytes().filter(|&byte|
    byte >= 65 && byte <= 90).map(|byte| byte as isize).sum()', "    let mut sum =\
    \ 0;\n    for c in s.chars() {\n        if c.is_uppercase() {\n            sum\
    \ += c as isize;\n        }\n    }\n    sum"]
stop_tokens:
- "\n}"
