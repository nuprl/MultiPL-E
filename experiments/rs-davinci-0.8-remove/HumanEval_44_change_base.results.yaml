language: rs
name: HumanEval_44_change_base
results:
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    if x == 0 {\n        return\
    \ String::from(\"0\");\n    }\n    let mut res = String::new();\n    let mut x\
    \ = x;\n    while x > 0 {\n        res.push((x % base + 48) as u8 as char);\n\
    \        x /= base;\n    }\n    res.chars().rev().collect()\n}\n\nfn main() {\n\
    \    let candidate = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"\
    22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822498
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let (base, x) = (base as\
    \ u32, x as u64);\n    if x < base {\n        return x.to_string();\n    }\n \
    \   let divisor = base as u64;\n    let (quotient, remainder) = (x / divisor,\
    \ x % divisor);\n    format!(\"{}{}\", change_base(quotient as isize, base as\
    \ isize), remainder)\n}\n\nfn main() {\n    let candidate = change_base;\n   \
    \ assert_eq!(candidate(8, 3), String::from(\"22\"));\n    assert_eq!(candidate(9,\
    \ 3), String::from(\"100\"));\n    assert_eq!(candidate(234, 2), String::from(\"\
    11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"10000\"));\n  \
    \  assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpkop6ent_.rs:6:12\n  |\n6 |\
    \     if x < base {\n  |            ^^^^\n  |            |\n  |            expected\
    \ `u64`, found `u32`\n  |            help: you can convert a `u32` to a `u64`:\
    \ `base.into()`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822498
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut value = x;\n   \
    \ let mut num_list = vec![];\n    while value > 0 {\n        num_list.push((value\
    \ % base) as usize);\n        value /= base;\n    }\n    num_list.iter().map(|x|\
    \ to_string(x)).collect()\n}\n\nfn main() {\n    let candidate = change_base;\n\
    \    assert_eq!(candidate(8, 3), String::from(\"22\"));\n    assert_eq!(candidate(9,\
    \ 3), String::from(\"100\"));\n    assert_eq!(candidate(234, 2), String::from(\"\
    11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"10000\"));\n  \
    \  assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `to_string` in this scope\n  --> /tmp/tmpizrctd0l.rs:11:29\n\
    \   |\n11 |     num_list.iter().map(|x| to_string(x)).collect()\n   |        \
    \                     ^^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659822498
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut result = String::new();\n\
    \    let mut numerator = x;\n    while numerator > 0 {\n        result.push_str(&(numerator\
    \ % base).to_string());\n        numerator /= base;\n    }\n    result.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822499
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    if x == 0 {\n        return\
    \ \"0\".to_string();\n    }\n    let mut ans = String::new();\n    let mut num\
    \ = x;\n    while num != 0 {\n        ans = format!(\"{}{}\", ans, num % base);\n\
    \        num /= base;\n    }\n    ans.chars().rev().collect()\n}\n\nfn main()\
    \ {\n    let candidate = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"\
    22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822498
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    if x < 0 {\n        format!(\"\
    -{}\", change_base(-x, base))\n    } else if x < base {\n        // x < base\n\
    \        let y = (x + '0' as isize) as u8;\n        format!(\"{}\", y as char)\n\
    \    } else {\n        let y = x % base;\n        let y = (y + '0' as isize) as\
    \ u8;\n        let rest = change_base(x / base, base);\n        format!(\"{}{}\"\
    , rest, y as char)\n    }\n}\n\nfn main() {\n    let candidate = change_base;\n\
    \    assert_eq!(candidate(8, 3), String::from(\"22\"));\n    assert_eq!(candidate(9,\
    \ 3), String::from(\"100\"));\n    assert_eq!(candidate(234, 2), String::from(\"\
    11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"10000\"));\n  \
    \  assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822499
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut x = x;\n    let\
    \ mut result = String::new();\n    let base_char = '0' as u8;\n    let mut i =\
    \ 0;\n    let mut modulo = 0;\n    loop {\n        modulo = x % base;\n      \
    \  x = x / base;\n        result.push((modulo as u8 + base_char) as char);\n \
    \       if x == 0 {\n            break;\n        }\n        i += 1;\n    }\n \
    \   result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = change_base;\n\
    \    assert_eq!(candidate(8, 3), String::from(\"22\"));\n    assert_eq!(candidate(9,\
    \ 3), String::from(\"100\"));\n    assert_eq!(candidate(234, 2), String::from(\"\
    11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"10000\"));\n  \
    \  assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822499
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut x = x;\n    let\
    \ mut y = String::new();\n    loop {\n        y.push_str(&(x % base).to_string());\n\
    \        x /= base;\n        if x <= 0 {\n            break;\n        }\n    }\n\
    \    y.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = change_base;\n\
    \    assert_eq!(candidate(8, 3), String::from(\"22\"));\n    assert_eq!(candidate(9,\
    \ 3), String::from(\"100\"));\n    assert_eq!(candidate(234, 2), String::from(\"\
    11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"10000\"));\n  \
    \  assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822499
- exit_code: 101
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut x = x;\n    let\
    \ mut result = String::new();\n    while x > 0 {\n        let digit = x % base;\n\
    \        let c = (b'0' + digit as u8) as char;\n        result.push(c);\n    \
    \    x /= base;\n    }\n    result\n}\n\nfn main() {\n    let candidate = change_base;\n\
    \    assert_eq!(candidate(8, 3), String::from(\"22\"));\n    assert_eq!(candidate(9,\
    \ 3), String::from(\"100\"));\n    assert_eq!(candidate(234, 2), String::from(\"\
    11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"10000\"));\n  \
    \  assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"001\"`,\n right: `\"100\"`', /tmp/tmpnu8g5049.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822499
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    if x < 0 {\n        \"-\"\
    .to_string() + &change_base(-x, base)\n    } else if x >= base {\n        change_base(x\
    \ / base, base) + &(x % base).to_string()\n    } else {\n        x.to_string()\n\
    \    }\n}\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822499
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    if x < base {\n        return\
    \ x.to_string();\n    }\n    let r = x % base;\n    let q = x / base;\n    format!(\"\
    {}{}\", change_base(q, base), r)\n}\n\nfn main() {\n    let candidate = change_base;\n\
    \    assert_eq!(candidate(8, 3), String::from(\"22\"));\n    assert_eq!(candidate(9,\
    \ 3), String::from(\"100\"));\n    assert_eq!(candidate(234, 2), String::from(\"\
    11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"10000\"));\n  \
    \  assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822499
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut st = String::new();\n\
    \    let mut x = x;\n    while x > 0 {\n        st.push(((x % base) + 48) as u8\
    \ as char);\n        x /= base;\n    }\n    return st.chars().rev().collect();\n\
    }\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822499
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut ans = String::new();\n\
    \    let mut x = x;\n    while x != 0 {\n        ans.push(((x % base) + ('0' as\
    \ isize)) as u8 as char);\n        x /= base;\n    }\n    ans.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822499
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    if x < 0 {\n        format!(\"\
    -{}\", change_base(-x, base))\n    } else if x < base {\n        (x as u8 + 48)\
    \ as char.to_string()\n    } else {\n        format!(\"{}{}\", change_base(x /\
    \ base, base), change_base(x % base, base))\n    }\n}\n\nfn main() {\n    let\
    \ candidate = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"22\"\
    ));\n    assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error: casts cannot be followed by a method call\n --> /tmp/tmp213vlgcr.rs:8:9\n\
    \  |\n8 |         (x as u8 + 48) as char.to_string()\n  |         ^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |\nhelp: try surrounding the expression in parentheses\n  |\n8 |         ((x\
    \ as u8 + 48) as char).to_string()\n  |         +                      +\n\nerror:\
    \ aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1659822498
- exit_code: 101
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut res = String::new();\n\
    \    let mut power = 0;\n    let mut remainder = x % base;\n    let mut divided\
    \ = x / base;\n    while divided != 0 {\n        power += 1;\n        remainder\
    \ = divided % base;\n        divided = divided / base;\n    }\n    while power\
    \ >= 0 {\n        let digit = (x / (base.pow(power))) % base;\n        res.push_str(&digit.to_string());\n\
    \        power -= 1;\n    }\n    res\n}\n\nfn main() {\n    let candidate = change_base;\n\
    \    assert_eq!(candidate(8, 3), String::from(\"22\"));\n    assert_eq!(candidate(9,\
    \ 3), String::from(\"100\"));\n    assert_eq!(candidate(234, 2), String::from(\"\
    11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"10000\"));\n  \
    \  assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmp9rsucqkz.rs:17:9

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822499
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    if x == 0 {\n        return\
    \ \"0\".to_string();\n    }\n    let mut ret = \"\".to_string();\n    let mut\
    \ x = x;\n    while x > 0 {\n        ret = format!(\"{}{}\", x % base, ret);\n\
    \        x /= base;\n    }\n    ret\n}\n\nfn main() {\n    let candidate = change_base;\n\
    \    assert_eq!(candidate(8, 3), String::from(\"22\"));\n    assert_eq!(candidate(9,\
    \ 3), String::from(\"100\"));\n    assert_eq!(candidate(234, 2), String::from(\"\
    11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"10000\"));\n  \
    \  assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822499
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut x = x;\n    let\
    \ mut ret = String::new();\n    while x != 0 {\n        let tmp = x % base;\n\
    \        x /= base;\n        ret = tmp.to_string() + &ret;\n    }\n    ret\n}\n\
    \nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8, 3),\
    \ String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"\
    ));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16,\
    \ 2), String::from(\"10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"\
    1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"111\"));\n    assert_eq!(candidate(2,\
    \ 3), String::from(\"2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"\
    ));\n    assert_eq!(candidate(4, 5), String::from(\"4\"));\n    assert_eq!(candidate(5,\
    \ 6), String::from(\"5\"));\n    assert_eq!(candidate(6, 7), String::from(\"6\"\
    ));\n    assert_eq!(candidate(7, 8), String::from(\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822498
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    if x < base {\n        return\
    \ x.to_string();\n    }\n    change_base(x / base, base) + &((x % base).to_string())\n\
    }\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822498
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut result = String::new();\n\
    \    let mut x = x;\n    if x == 0 {\n        result.push('0');\n        return\
    \ result;\n    }\n    let negatives = x < 0;\n    if negatives {\n        x =\
    \ -x;\n    }\n    while x > 0 {\n        let (q, r) = (x / base, x % base);\n\
    \        result.push((r as u8 + '0' as u8) as char);\n        x = q;\n    }\n\
    \    if negatives {\n        result.push('-');\n    }\n    result.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822498
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    if x == 0 {\n        return\
    \ String::from(\"0\");\n    }\n    let mut x = x;\n    let mut ans = String::new();\n\
    \    while x > 0 {\n        ans.push(((x % base) + 48) as u8 as char);\n     \
    \   x /= base;\n    }\n    ans.chars().rev().collect()\n}\n\nfn main() {\n   \
    \ let candidate = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"\
    22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822499
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    // x % base is the rightmost\
    \ digit.\n    // do x /= base to remove the rightmost digit.\n    // because of\
    \ integer division, x / base is truncated.\n    // continue until all digits are\
    \ removed.\n    let mut digits = Vec::new();\n    let mut x = x;\n    while x\
    \ > 0 {\n        digits.push((x % base) as u8);\n        x /= base;\n    }\n \
    \   digits.iter().rev().map(|&x| (x + 0x30) as char).collect()\n}\n\nfn main()\
    \ {\n    let candidate = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"\
    22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822498
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    if x < base {\n        x.to_string()\n\
    \    } else {\n        change_base(x / base, base) + &(x % base).to_string()\n\
    \    }\n}\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822499
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut x = x;\n    let\
    \ mut res = String::new();\n    while x != 0 {\n        let r = x % base;\n  \
    \      let ch = char::from_digit(r as u32, 10).unwrap();\n        res.push(ch);\n\
    \        x /= base;\n    }\n    res.chars().rev().collect()\n}\n\nfn main() {\n\
    \    let candidate = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"\
    22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822499
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut ret = String::new();\n\
    \    let mut n = x;\n    let mut t;\n    while n != 0 {\n        t = n % base;\n\
    \        n = n / base;\n        if t < 0 {\n            n += 1;\n            t\
    \ -= base;\n        }\n        ret.push((t as u8 + b'0') as char);\n    }\n  \
    \  return ret.chars().rev().collect();\n}\n\nfn main() {\n    let candidate =\
    \ change_base;\n    assert_eq!(candidate(8, 3), String::from(\"22\"));\n    assert_eq!(candidate(9,\
    \ 3), String::from(\"100\"));\n    assert_eq!(candidate(234, 2), String::from(\"\
    11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"10000\"));\n  \
    \  assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822499
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    if x == 0 {\n        return\
    \ \"0\".to_string();\n    }\n    let mut ans = vec![];\n    let mut x = x;\n \
    \   while x > 0 {\n        ans.push((x % base).to_string());\n        x /= base;\n\
    \    }\n    ans.reverse();\n    ans.join(\"\")\n}\n\nfn main() {\n    let candidate\
    \ = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"22\"));\n   \
    \ assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822499
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut cur = x;\n    let\
    \ mut result = vec![];\n    loop {\n        if cur < base {\n            result.push(cur\
    \ as usize);\n            break;\n        }\n        let n = cur % base;\n   \
    \     result.push(n as usize);\n        cur = cur / base;\n    }\n    let mut\
    \ ret = String::new();\n    for i in result.iter().rev() {\n        ret.push_str(&format!(\"\
    {}\", i));\n    }\n    ret\n}\n\nfn main() {\n    let candidate = change_base;\n\
    \    assert_eq!(candidate(8, 3), String::from(\"22\"));\n    assert_eq!(candidate(9,\
    \ 3), String::from(\"100\"));\n    assert_eq!(candidate(234, 2), String::from(\"\
    11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"10000\"));\n  \
    \  assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822499
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut x = x;\n    let\
    \ mut res = String::new();\n    while x > 0 {\n        res.push_str(&(x % base).to_string());\n\
    \        x /= base;\n    }\n    res.chars().rev().collect()\n}\n\nfn main() {\n\
    \    let candidate = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"\
    22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822499
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    if x == 0 {\n        return\
    \ \"0\".to_string();\n    }\n    let mut ans = \"\".to_string();\n    let mut\
    \ x = x;\n    while x > 0 {\n        ans = format!(\"{}{}\", x % base, ans);\n\
    \        x /= base;\n    }\n    ans\n}\n\nfn main() {\n    let candidate = change_base;\n\
    \    assert_eq!(candidate(8, 3), String::from(\"22\"));\n    assert_eq!(candidate(9,\
    \ 3), String::from(\"100\"));\n    assert_eq!(candidate(234, 2), String::from(\"\
    11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"10000\"));\n  \
    \  assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822499
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    if x == 0 {\n        return\
    \ \"0\".to_string();\n    }\n    let mut ans = String::new();\n    let mut x =\
    \ x;\n    while x > 0 {\n        ans.push_str(&((x % base).to_string()));\n  \
    \      x /= base;\n    }\n    ans.chars().rev().collect()\n}\n\nfn main() {\n\
    \    let candidate = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"\
    22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822499
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut result = String::new();\n\
    \    let mut divisor = x;\n    while divisor > 0 {\n        let remainder = divisor\
    \ % base;\n        result.push_str(&remainder.to_string());\n        divisor /=\
    \ base;\n    }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let\
    \ candidate = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"22\"\
    ));\n    assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822499
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut x = x;\n    let\
    \ mut representation = String::new();\n    while x > 0 {\n        representation.push_str(&(x\
    \ % base).to_string());\n        x /= base;\n    }\n    let mut result = String::new();\n\
    \    for i in representation.chars().rev() {\n        result.push(i);\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822499
- exit_code: 101
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut x = x;\n    let\
    \ mut result = String::new();\n    while x > 0 {\n        let rem = x % base;\n\
    \        let rem = if rem < 0 {\n            rem + 10\n        } else {\n    \
    \        rem\n        };\n        result.push_str(&format!(\"{}\", rem));\n  \
    \      x /= base;\n    }\n    result\n}\n\nfn main() {\n    let candidate = change_base;\n\
    \    assert_eq!(candidate(8, 3), String::from(\"22\"));\n    assert_eq!(candidate(9,\
    \ 3), String::from(\"100\"));\n    assert_eq!(candidate(234, 2), String::from(\"\
    11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"10000\"));\n  \
    \  assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"001\"`,\n right: `\"100\"`', /tmp/tmpgwp3ups4.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822499
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut out = String::new();\n\
    \    let mut r = x;\n    while r > 0 {\n        out.push(((r % base) + '0' as\
    \ isize) as u8 as char);\n        r /= base;\n    }\n    out.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822499
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut res = \"\".to_string();\n\
    \    let mut x = x;\n    while x > 0 {\n        res.push_str(&(x % base).to_string());\n\
    \        x /= base;\n    }\n    res.chars().rev().collect()\n}\n\nfn main() {\n\
    \    let candidate = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"\
    22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822499
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut x = x;\n    let\
    \ mut res = String::new();\n    while x != 0 {\n        let r = x % base;\n  \
    \      x /= base;\n        res.push(r.to_string().chars().next().unwrap());\n\
    \    }\n    res.chars().rev().collect()\n}\n\nfn main() {\n    let candidate =\
    \ change_base;\n    assert_eq!(candidate(8, 3), String::from(\"22\"));\n    assert_eq!(candidate(9,\
    \ 3), String::from(\"100\"));\n    assert_eq!(candidate(234, 2), String::from(\"\
    11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"10000\"));\n  \
    \  assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822499
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut ret = String::new();\n\
    \    let mut x = x;\n    while x > 0 {\n        ret.push_str(&format!(\"{}\",\
    \ x % base));\n        x /= base;\n    }\n    ret.chars().rev().collect()\n}\n\
    \nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8, 3),\
    \ String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"\
    ));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16,\
    \ 2), String::from(\"10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"\
    1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"111\"));\n    assert_eq!(candidate(2,\
    \ 3), String::from(\"2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"\
    ));\n    assert_eq!(candidate(4, 5), String::from(\"4\"));\n    assert_eq!(candidate(5,\
    \ 6), String::from(\"5\"));\n    assert_eq!(candidate(6, 7), String::from(\"6\"\
    ));\n    assert_eq!(candidate(7, 8), String::from(\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822499
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut ans = String::new();\n\
    \    let mut x = x;\n    while x > 0 {\n        ans = format!(\"{}{}\", x % base,\
    \ ans);\n        x /= base;\n    }\n    ans\n}\n\nfn main() {\n    let candidate\
    \ = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"22\"));\n   \
    \ assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822499
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n  let mut x = x;\n  let mut\
    \ ans = String::new();\n  while x > 0 {\n    ans.push(((x % base) + b'0') as char);\n\
    \    x /= base;\n  }\n  ans.chars().rev().collect()\n}\n\nfn main() {\n    let\
    \ candidate = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"22\"\
    ));\n    assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg_cu4ofb.rs:8:28\n  |\n8 |\
    \     ans.push(((x % base) + b'0') as char);\n  |                            ^^^^\
    \ expected `isize`, found `u8`\n\nerror[E0277]: cannot add `u8` to `isize`\n -->\
    \ /tmp/tmpg_cu4ofb.rs:8:26\n  |\n8 |     ans.push(((x % base) + b'0') as char);\n\
    \  |                          ^ no implementation for `isize + u8`\n  |\n  = help:\
    \ the trait `Add<u8>` is not implemented for `isize`\n\nerror[E0604]: only `u8`\
    \ can be cast as `char`, not `isize`\n --> /tmp/tmpg_cu4ofb.rs:8:14\n  |\n8 |\
    \     ans.push(((x % base) + b'0') as char);\n  |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ invalid cast\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308, E0604.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659822499
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut x = x;\n    let\
    \ mut str = String::new();\n    while x != 0 {\n        let r = x % base;\n  \
    \      str.push_str(&r.to_string());\n        x /= base;\n    }\n    str.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822499
- exit_code: 101
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    fn aux(x: isize, base: isize,\
    \ res: String) -> String {\n        if x == 0 { res }\n        else {\n      \
    \      let (q, r) = (x / base, x % base);\n            let new_res = format!(\"\
    {}{}\", r, res);\n            aux(q, base, new_res)\n        }\n    }\n    let\
    \ mut res = aux(x, base, String::new());\n    while res.len() % 3 != 0 {\n   \
    \     res = format!(\"0{}\", res);\n    }\n    res\n}\n\nfn main() {\n    let\
    \ candidate = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"22\"\
    ));\n    assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"022\"`,\n right: `\"22\"`', /tmp/tmpiiz73pnr.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822499
- exit_code: 101
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut x = x;\n    let\
    \ mut res = String::new();\n    while x != 0 {\n        let r = x % base;\n  \
    \      x /= base;\n        res.push_str(&r.to_string());\n    }\n    res\n}\n\n\
    fn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8, 3),\
    \ String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"\
    ));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16,\
    \ 2), String::from(\"10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"\
    1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"111\"));\n    assert_eq!(candidate(2,\
    \ 3), String::from(\"2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"\
    ));\n    assert_eq!(candidate(4, 5), String::from(\"4\"));\n    assert_eq!(candidate(5,\
    \ 6), String::from(\"5\"));\n    assert_eq!(candidate(6, 7), String::from(\"6\"\
    ));\n    assert_eq!(candidate(7, 8), String::from(\"7\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"001\"`,\n right: `\"100\"`', /tmp/tmp8gk5hnf9.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822499
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut x = x;\n    let\
    \ mut ans = String::new();\n    while x > 0 {\n        ans.push(((x % base) +\
    \ 48) as u8 as char);\n        x /= base;\n    }\n    ans.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822499
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    if x == 0 {\n        return\
    \ String::from(\"0\");\n    }\n    let sign = if x > 0 {\n        \"\"\n    }\
    \ else {\n        \"-\"\n    };\n    let mut result = String::new();\n    let\
    \ mut x = x.abs();\n    let mut digit = 0;\n    while x > 0 {\n        digit =\
    \ x % base;\n        x /= base;\n        result.push_str(&format!(\"{}\", DIGITS[digit\
    \ as usize]));\n    }\n    if result.len() > 1 {\n        result.pop();\n    }\n\
    \    result.push_str(sign);\n    result.chars().rev().collect()\n}\n\nfn main()\
    \ {\n    let candidate = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"\
    22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `DIGITS` in this scope\n  --> /tmp/tmpmy44p1fk.rs:19:40\n\
    \   |\n19 |         result.push_str(&format!(\"{}\", DIGITS[digit as usize]));\n\
    \   |                                        ^^^^^^ not found in this scope\n\
    \   |\nhelp: consider importing one of these items\n   |\n1  | use std::f32::DIGITS;\n\
    \   |\n1  | use std::f64::DIGITS;\n   |\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822499
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    if x < base {\n        format!(\"\
    {}\", x)\n    } else {\n        let mut res = x % base;\n        let mut y = x\
    \ / base;\n        if y > 0 {\n            return format!(\"{}{}\", change_base(y,\
    \ base), res);\n        } else {\n            return format!(\"{}\", res);\n \
    \       }\n    }\n}\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822499
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    assert!(x >= 0);\n    assert!(base\
    \ > 1);\n    let mut s = String::new();\n    let mut x = x;\n    while x > 0 {\n\
    \        s.push(((x % base) + (b'0' as isize)) as u8 as char);\n        x /= base;\n\
    \    }\n    s.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = change_base;\n\
    \    assert_eq!(candidate(8, 3), String::from(\"22\"));\n    assert_eq!(candidate(9,\
    \ 3), String::from(\"100\"));\n    assert_eq!(candidate(234, 2), String::from(\"\
    11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"10000\"));\n  \
    \  assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822499
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    if x == 0 {\n        return\
    \ \"0\".to_string();\n    }\n    let mut x = x;\n    let sign = if x < 0 {\n \
    \       x = -x;\n        \"-\"\n    } else {\n        \"\"\n    };\n    let mut\
    \ res = String::new();\n    let mut d = 0;\n    while x > 0 {\n        d = x %\
    \ base;\n        res.push_str(&(d as u8 + b'0' as u8) as &str);\n        x /=\
    \ base;\n    }\n    format!(\"{}{}\", sign, res.chars().rev().collect::<String>())\n\
    }\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0605]: non-primitive cast: `&u8` as `&str`\n  --> /tmp/tmpjlrh3wbn.rs:19:22\n\
    \   |\n19 |         res.push_str(&(d as u8 + b'0' as u8) as &str);\n   |     \
    \                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ an `as` expression can only\
    \ be used to convert between primitive types or to coerce to a specific trait\
    \ object\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0605`.\n"
  stdout: ''
  timestamp: 1659822499
- exit_code: 101
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut y = x;\n    let\
    \ mut ystr = String::new();\n    while y > 0 {\n        ystr.push_str(&format!(\"\
    {}\", y % base));\n        y /= base;\n    }\n    ystr\n}\n\nfn main() {\n   \
    \ let candidate = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"\
    22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"001\"`,\n right: `\"100\"`', /tmp/tmpzk6_t6yo.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822499
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut val = x;\n    while val > 0 {\n        let r = val % base;\n    \
    \    s.push_str(&r.to_string());\n        val /= base;\n    }\n    s.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822499
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut str = String::new();\n\
    \    let mut x = x;\n    while x > 0 {\n        let d = x % base;\n        x /=\
    \ base;\n        str.push_str(&d.to_string());\n    }\n    str.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822499
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut x = x;\n    let\
    \ mut res = String::new();\n    while x > 0 {\n        res.push_str(&(x % base).to_string());\n\
    \        x /= base;\n    }\n    res.chars().rev().collect()\n}\n\nfn main() {\n\
    \    let candidate = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"\
    22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822499
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut x = x;\n    let\
    \ mut string = String::new();\n    let digits = vec!['0', '1', '2', '3', '4',\
    \ '5', '6', '7', '8', '9'];\n    while x > 0 {\n        let digit = digits[(x\
    \ % base) as usize];\n        string.push(digit);\n        x /= base;\n    }\n\
    \    return string.chars().rev().collect();\n}\n\nfn main() {\n    let candidate\
    \ = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"22\"));\n   \
    \ assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822499
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut x = x;\n    let\
    \ mut result = String::new();\n    let mut digits = vec![];\n    while x != 0\
    \ {\n        digits.push(base_num_to_char(x % base));\n        x /= base;\n  \
    \  }\n    for i in digits.iter().rev() {\n        result.push(*i);\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `base_num_to_char` in this scope\n -->\
    \ /tmp/tmp0cfpjjkv.rs:9:21\n  |\n9 |         digits.push(base_num_to_char(x %\
    \ base));\n  |                     ^^^^^^^^^^^^^^^^ not found in this scope\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822499
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let x = if x < 0 { -x }\
    \ else { x };\n    let mut res = String::new();\n    let mut x = x;\n    while\
    \ x > 0 {\n        res.push(((x % base) + b'0') as char);\n        x /= base;\n\
    \    }\n    if x < 0 {\n        res.push('-');\n    }\n    res.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp3xfloqrw.rs:9:32\n  |\n9 |\
    \         res.push(((x % base) + b'0') as char);\n  |                        \
    \        ^^^^ expected `isize`, found `u8`\n\nerror[E0277]: cannot add `u8` to\
    \ `isize`\n --> /tmp/tmp3xfloqrw.rs:9:30\n  |\n9 |         res.push(((x % base)\
    \ + b'0') as char);\n  |                              ^ no implementation for\
    \ `isize + u8`\n  |\n  = help: the trait `Add<u8>` is not implemented for `isize`\n\
    \nerror[E0604]: only `u8` can be cast as `char`, not `isize`\n --> /tmp/tmp3xfloqrw.rs:9:18\n\
    \  |\n9 |         res.push(((x % base) + b'0') as char);\n  |                \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^ invalid cast\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308, E0604.\nFor\
    \ more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659822499
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut x = x;\n    let\
    \ mut buf = String::new();\n    while x > 0 {\n        buf.push_str(&((x % base)\
    \ as u8 + b'0' as u8) as &str);\n        x /= base;\n    }\n    buf.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0605]: non-primitive cast: `&u8` as `&str`\n --> /tmp/tmp4zfpe50c.rs:8:22\n\
    \  |\n8 |         buf.push_str(&((x % base) as u8 + b'0' as u8) as &str);\n  |\
    \                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ an `as` expression\
    \ can only be used to convert between primitive types or to coerce to a specific\
    \ trait object\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0605`.\n"
  stdout: ''
  timestamp: 1659822499
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut ans = \"\".to_string();\n\
    \    let mut x = x;\n    while x > 0 {\n        ans = format!(\"{}{}\", x % base,\
    \ ans);\n        x /= base;\n    }\n    ans\n}\n\nfn main() {\n    let candidate\
    \ = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"22\"));\n   \
    \ assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822500
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    if x == 0 {\n        \"\
    0\".to_string()\n    } else {\n        let mut digits = Vec::new();\n        let\
    \ mut v = x;\n        while v > 0 {\n            digits.push((v % base) as u8);\n\
    \            v /= base;\n        }\n        digits.iter().rev().map(|x| (x + b'0')\
    \ as char).collect()\n    }\n}\n\nfn main() {\n    let candidate = change_base;\n\
    \    assert_eq!(candidate(8, 3), String::from(\"22\"));\n    assert_eq!(candidate(9,\
    \ 3), String::from(\"100\"));\n    assert_eq!(candidate(234, 2), String::from(\"\
    11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"10000\"));\n  \
    \  assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822500
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut x = x;\n    let\
    \ mut s = String::new();\n    while x > 0 {\n        s.push_str(&format!(\"{}\"\
    , x % base));\n        x /= base;\n    }\n    return s.chars().rev().collect::<String>();\n\
    }\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822500
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut x = x;\n    let\
    \ mut result = \"\".to_string();\n    while x > 0 {\n        let remainder = x\
    \ % base;\n        x = x / base;\n        let c = if remainder > 9 {\n       \
    \     (remainder - 10 + 97) as u8 as char\n        } else {\n            (remainder\
    \ + 48) as u8 as char\n        };\n        result.push(c);\n    }\n    result.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822500
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut n = x;\n    let mut modulo;\n    while n > 0 {\n        modulo =\
    \ n % base;\n        s.push_str(&format!(\"{}\", modulo));\n        n = n / base;\n\
    \    }\n    s.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = change_base;\n\
    \    assert_eq!(candidate(8, 3), String::from(\"22\"));\n    assert_eq!(candidate(9,\
    \ 3), String::from(\"100\"));\n    assert_eq!(candidate(234, 2), String::from(\"\
    11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"10000\"));\n  \
    \  assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822500
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut x = x;\n    let\
    \ mut y: Vec<String> = Vec::new();\n    if x == 0 {\n        y.push(\"0\".to_string());\n\
    \    } else {\n        while x > 0 {\n            y.push((x % base).to_string());\n\
    \            x /= base;\n        }\n    }\n    y.reverse();\n    y.join(\"\")\n\
    }\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822500
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut r = x;\n    let\
    \ mut s = \"\".to_string();\n    while r > 0 {\n        s = format!(\"{}{}\",\
    \ (r % base).to_string(), s);\n        r /= base;\n    }\n    s\n}\n\nfn main()\
    \ {\n    let candidate = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"\
    22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822500
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut x = x;\n    while x > 0 {\n        s.push(((x % base) + 48) as u8\
    \ as char);\n        x /= base;\n    }\n    s.chars().rev().collect()\n}\n\nfn\
    \ main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8, 3),\
    \ String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"\
    ));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16,\
    \ 2), String::from(\"10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"\
    1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"111\"));\n    assert_eq!(candidate(2,\
    \ 3), String::from(\"2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"\
    ));\n    assert_eq!(candidate(4, 5), String::from(\"4\"));\n    assert_eq!(candidate(5,\
    \ 6), String::from(\"5\"));\n    assert_eq!(candidate(6, 7), String::from(\"6\"\
    ));\n    assert_eq!(candidate(7, 8), String::from(\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822500
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut x = x;\n    let\
    \ mut chars = vec![];\n    let mut i = 0;\n    while x > 0 {\n        chars.push(char::from((x\
    \ % base) as u8 + '0' as u8));\n        x /= base;\n        i += 1;\n    }\n \
    \   chars.reverse();\n    chars.into_iter().collect()\n}\n\nfn main() {\n    let\
    \ candidate = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"22\"\
    ));\n    assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822500
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut output = \"\".to_string();\n\
    \    let mut x = x;\n    let mut base = base;\n    let mut r = 0;\n    while x\
    \ > 0 {\n        r = x % base;\n        x = x / base;\n        output = format!(\"\
    {}{}\", r, output);\n    }\n    output\n}\n\nfn main() {\n    let candidate =\
    \ change_base;\n    assert_eq!(candidate(8, 3), String::from(\"22\"));\n    assert_eq!(candidate(9,\
    \ 3), String::from(\"100\"));\n    assert_eq!(candidate(234, 2), String::from(\"\
    11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"10000\"));\n  \
    \  assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822500
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    if x < 0 {\n        let\
    \ r = x % base;\n        let q = x / base;\n        return format!(\"{}{}\", change_base(q,\
    \ base), convert_to_letter(r).unwrap());\n    } else if x == 0 {\n        return\
    \ \"0\".to_string();\n    } else {\n        let r = x % base;\n        let q =\
    \ x / base;\n        if q == 0 {\n            return format!(\"{}\", convert_to_letter(r).unwrap());\n\
    \        } else {\n            return format!(\"{}{}\", change_base(q, base),\
    \ convert_to_letter(r).unwrap());\n        }\n    }\n}\n\nfn main() {\n    let\
    \ candidate = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"22\"\
    ));\n    assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `convert_to_letter` in this scope\n\
    \ --> /tmp/tmpukdb_cre.rs:8:54\n  |\n8 |         return format!(\"{}{}\", change_base(q,\
    \ base), convert_to_letter(r).unwrap());\n  |                                \
    \                      ^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `convert_to_letter` in this scope\n  --> /tmp/tmpukdb_cre.rs:15:34\n\
    \   |\n15 |             return format!(\"{}\", convert_to_letter(r).unwrap());\n\
    \   |                                  ^^^^^^^^^^^^^^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find function `convert_to_letter` in this scope\n  -->\
    \ /tmp/tmpukdb_cre.rs:17:58\n   |\n17 |             return format!(\"{}{}\", change_base(q,\
    \ base), convert_to_letter(r).unwrap());\n   |                               \
    \                           ^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror:\
    \ aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822499
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    if x < base {\n        let\
    \ s = std::char::from_digit(x as u32, base as u32).unwrap();\n        return s.to_string();\n\
    \    }\n    let y = x / base;\n    let z = x % base;\n    change_base(y, base)\
    \ + &change_base(z, base)\n}\n\nfn main() {\n    let candidate = change_base;\n\
    \    assert_eq!(candidate(8, 3), String::from(\"22\"));\n    assert_eq!(candidate(9,\
    \ 3), String::from(\"100\"));\n    assert_eq!(candidate(234, 2), String::from(\"\
    11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"10000\"));\n  \
    \  assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822500
- exit_code: 101
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    if x == 0 {\n        return\
    \ \"0\".to_string();\n    }\n    let mut x = x;\n    let mut res = String::new();\n\
    \    while x > 0 {\n        res.push_str(&(x % base).to_string());\n        x\
    \ /= base;\n    }\n    res\n}\n\nfn main() {\n    let candidate = change_base;\n\
    \    assert_eq!(candidate(8, 3), String::from(\"22\"));\n    assert_eq!(candidate(9,\
    \ 3), String::from(\"100\"));\n    assert_eq!(candidate(234, 2), String::from(\"\
    11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"10000\"));\n  \
    \  assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"001\"`,\n right: `\"100\"`', /tmp/tmpx_afq4vx.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822500
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut x = x;\n    let\
    \ mut digits = Vec::new();\n    while x > 0 {\n        digits.push((x % base)\
    \ as u8);\n        x /= base;\n    }\n    digits.iter().rev().map(|&d| (d + b'0')\
    \ as char).collect()\n}\n\nfn main() {\n    let candidate = change_base;\n   \
    \ assert_eq!(candidate(8, 3), String::from(\"22\"));\n    assert_eq!(candidate(9,\
    \ 3), String::from(\"100\"));\n    assert_eq!(candidate(234, 2), String::from(\"\
    11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"10000\"));\n  \
    \  assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822500
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut ans = String::new();\n\
    \    let mut xx = x;\n    let mut modulo;\n    loop {\n        modulo = xx % base;\n\
    \        xx /= base;\n        ans.push_str(&modulo.to_string());\n        if xx\
    \ == 0 {\n            break;\n        }\n    }\n    ans.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822500
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut n = x;\n    let\
    \ mut res = vec![];\n    while n > 0 {\n        res.push((n % base) as u8);\n\
    \        n /= base;\n    }\n    res.reverse();\n    let res = res.iter().map(|d|\
    \ (b'0' + d) as char).collect::<String>();\n    if res.is_empty() {\n        \"\
    0\".to_string()\n    } else {\n        res\n    }\n}\n\nfn main() {\n    let candidate\
    \ = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"22\"));\n   \
    \ assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822500
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut quotient = x;\n\
    \    let mut ret = String::new();\n    while quotient > 0 {\n        let rem =\
    \ quotient % base;\n        ret.push(rem.to_string().chars().next().unwrap());\n\
    \        quotient /= base;\n    }\n    ret.chars().rev().collect()\n}\n\nfn main()\
    \ {\n    let candidate = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"\
    22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822500
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    // if input base is out\
    \ of range, throw error.\n    if base < 2 || base > 10 {\n        panic!(\"Base\
    \ should be between 2 and 10.\")\n    }\n\n    // if base number is equal to x,\
    \ return '1'.\n    if x == base {\n        return \"1\".to_string();\n    }\n\n\
    \    // if input number is less than base, return it as string.\n    if x < base\
    \ {\n        return x.to_string();\n    }\n\n    // set mutable variables and\
    \ iterate.\n    let mut x = x;\n    let mut base_x = \"\".to_string();\n    while\
    \ x >= base {\n        let r = x % base;\n        x = x / base;\n        base_x\
    \ = format!(\"{}{}\", r, base_x);\n    }\n    base_x = format!(\"{}{}\", x, base_x);\n\
    \    base_x\n}\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822500
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    if x == 0 {\n        return\
    \ \"0\".to_string();\n    }\n    let mut string_repr = String::new();\n    let\
    \ mut x = x;\n    while x > 0 {\n        let m = x % base;\n        let c = ('0'\
    \ as u8 + m as u8) as char;\n        string_repr.push(c);\n        x /= base;\n\
    \    }\n    string_repr.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"22\"));\n   \
    \ assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822500
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut m = x;\n    let\
    \ mut result = String::new();\n    while m > 0 {\n        let n = m % base;\n\
    \        result.push_str(&format!(\"{}\", n));\n        m /= base;\n    }\n  \
    \  result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = change_base;\n\
    \    assert_eq!(candidate(8, 3), String::from(\"22\"));\n    assert_eq!(candidate(9,\
    \ 3), String::from(\"100\"));\n    assert_eq!(candidate(234, 2), String::from(\"\
    11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"10000\"));\n  \
    \  assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822500
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut x = x;\n    let\
    \ mut res = String::new();\n    while x > 0 {\n        res.push_str(&((x % base).to_string()));\n\
    \        x /= base;\n    }\n    res.chars().rev().collect()\n}\n\nfn main() {\n\
    \    let candidate = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"\
    22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822500
- exit_code: 101
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut digits = vec![];\n\
    \    let mut x = x;\n    let mut i = 0;\n    while x > 0 {\n        digits.push((x\
    \ % base) as i32);\n        x /= base;\n        i += 1;\n    }\n    // digits.reverse();\n\
    \    let s: String = digits.iter().map(|d| d.to_string()).collect();\n    s\n\
    }\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"001\"`,\n right: `\"100\"`', /tmp/tmpipihrwja.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822500
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut x = x;\n    let\
    \ mut s = String::new();\n    while x > 0 {\n        s.push(((x % base) + ('0'\
    \ as isize)) as u8 as char);\n        x /= base;\n    }\n    s.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822500
- exit_code: 101
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    if x == 0 {\n        s.push('0');\n        return s;\n    }\n    let mut\
    \ x = x;\n    while x > 0 {\n        let r = x % base;\n        x /= base;\n \
    \       s.push_str(&r.to_string());\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"22\"));\n   \
    \ assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"001\"`,\n right: `\"100\"`', /tmp/tmpdxfv2eio.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822500
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut ret = String::new();\n\
    \    let mut x = x;\n    let chars = ['0', '1', '2', '3', '4', '5', '6', '7',\
    \ '8', '9'];\n    while x > 0 {\n        let y = x % base;\n        x /= base;\n\
    \        ret.push(chars[y as usize]);\n    }\n    ret.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822500
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut y = x;\n    let\
    \ mut ret = String::new();\n    let digits = ['0', '1', '2', '3', '4', '5', '6',\
    \ '7', '8', '9'];\n    while y != 0 {\n        let d = y % base;\n        ret.push(digits[d\
    \ as usize]);\n        y /= base;\n    }\n    ret.chars().rev().collect()\n}\n\
    \nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8, 3),\
    \ String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"\
    ));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16,\
    \ 2), String::from(\"10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"\
    1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"111\"));\n    assert_eq!(candidate(2,\
    \ 3), String::from(\"2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"\
    ));\n    assert_eq!(candidate(4, 5), String::from(\"4\"));\n    assert_eq!(candidate(5,\
    \ 6), String::from(\"5\"));\n    assert_eq!(candidate(6, 7), String::from(\"6\"\
    ));\n    assert_eq!(candidate(7, 8), String::from(\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822500
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut x = x;\n    let\
    \ mut out = \"\".to_string();\n    let digits = \"0123456789\".to_string();\n\
    \    loop {\n        if x == 0 {\n            break;\n        }\n        let mut\
    \ new_x = x / base;\n        let this_digit = digits.chars().nth((x - new_x *\
    \ base) as usize).unwrap();\n        out.push(this_digit);\n        x = new_x;\n\
    \    }\n    return out.chars().rev().collect();\n}\n\nfn main() {\n    let candidate\
    \ = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"22\"));\n   \
    \ assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822500
- exit_code: 101
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut m = x;\n    let mut r;\n    while m != 0 {\n        r = m % base;\n\
    \        m = m / base;\n        s.push_str(&r.to_string());\n    }\n    return\
    \ s;\n}\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"001\"`,\n right: `\"100\"`', /tmp/tmphrjnhe7q.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822500
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut ret = String::new();\n\
    \    let mut x = x;\n    while x > 0 {\n        ret.push(((x % base) + '0' as\
    \ isize) as u8 as char);\n        x /= base;\n    }\n    ret.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822500
- exit_code: 101
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    if x == 0 {\n        return\
    \ \"0\".to_string();\n    }\n    let mut x = x;\n    let mut v = Vec::new();\n\
    \    while x != 0 {\n        v.push((x % base) as u8);\n        x /= base;\n \
    \   }\n    v.iter().rev().map(|&c| (c as char).to_string()).collect()\n}\n\nfn\
    \ main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8, 3),\
    \ String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"\
    ));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16,\
    \ 2), String::from(\"10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"\
    1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"111\"));\n    assert_eq!(candidate(2,\
    \ 3), String::from(\"2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"\
    ));\n    assert_eq!(candidate(4, 5), String::from(\"4\"));\n    assert_eq!(candidate(5,\
    \ 6), String::from(\"5\"));\n    assert_eq!(candidate(6, 7), String::from(\"6\"\
    ));\n    assert_eq!(candidate(7, 8), String::from(\"7\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\\u{2}\\u{2}\"`,\n right: `\"22\"`', /tmp/tmpryb4mc9x.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822500
- exit_code: 101
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut x = x;\n    let\
    \ mut s = String::new();\n    let mut r = 0;\n    while x > 0 {\n        r = x\
    \ % base;\n        x = x / base;\n        s.push_str(&r.to_string());\n    }\n\
    \    s\n}\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"001\"`,\n right: `\"100\"`', /tmp/tmpzk886whd.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822500
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    if x == 0 {\n        return\
    \ \"0\".to_string();\n    }\n    let sign = if x > 0 { \"\" } else { \"-\" };\n\
    \    let mut x = x.abs();\n    let mut ret = \"\".to_string();\n    while x >\
    \ 0 {\n        ret = format!(\"{}{}\", (x % base).to_string(), ret);\n       \
    \ x /= base;\n    }\n    format!(\"{}{}\", sign, ret)\n}\n\nfn main() {\n    let\
    \ candidate = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"22\"\
    ));\n    assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822500
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    if x < base {\n        return\
    \ x.to_string();\n    }\n    format!(\"{}{}\", change_base(x / base, base), x\
    \ % base)\n}\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822500
- exit_code: 101
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut x = x;\n    let\
    \ mut digits = Vec::new();\n    while x > 0 {\n        digits.push((x % base)\
    \ as u8);\n        x /= base;\n    }\n    digits.reverse();\n    String::from_utf8(digits).unwrap()\n\
    }\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\\u{2}\\u{2}\"`,\n right: `\"22\"`', /tmp/tmp5q90mr7e.rs:17:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822500
- exit_code: 101
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut x = x;\n    let\
    \ mut result = String::new();\n    let mut base_converted: Vec<char> = vec![];\n\
    \    let chars: Vec<char> = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\".chars().collect();\n\
    \    for _ in 0..base {\n        base_converted.push(chars[0]);\n    }\n    for\
    \ j in 0..32 {\n        let mut p: isize = 1;\n        for i in 0..j {\n     \
    \       p *= base;\n        }\n        base_converted[j] = chars[(x / p) as usize\
    \ % base as usize];\n    }\n    result = base_converted.iter().rev().collect();\n\
    \    let x = result.trim_start_matches('0');\n    String::from(x)\n}\n\nfn main()\
    \ {\n    let candidate = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"\
    22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 3'', /tmp/tmpl5wzo6vg.rs:17:9

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822500
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    if x < base {\n        return\
    \ String::from(match x {\n            0 => \"0\",\n            1 => \"1\",\n \
    \           2 => \"2\",\n            3 => \"3\",\n            4 => \"4\",\n  \
    \          5 => \"5\",\n            6 => \"6\",\n            7 => \"7\",\n   \
    \         8 => \"8\",\n            9 => \"9\",\n            _ => \"\",\n     \
    \   });\n    }\n\n    change_base(x / base, base) + match x % base {\n       \
    \ 0 => \"0\",\n        1 => \"1\",\n        2 => \"2\",\n        3 => \"3\",\n\
    \        4 => \"4\",\n        5 => \"5\",\n        6 => \"6\",\n        7 => \"\
    7\",\n        8 => \"8\",\n        9 => \"9\",\n        _ => \"\",\n    }\n}\n\
    \nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8, 3),\
    \ String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"\
    ));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16,\
    \ 2), String::from(\"10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"\
    1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"111\"));\n    assert_eq!(candidate(2,\
    \ 3), String::from(\"2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"\
    ));\n    assert_eq!(candidate(4, 5), String::from(\"4\"));\n    assert_eq!(candidate(5,\
    \ 6), String::from(\"5\"));\n    assert_eq!(candidate(6, 7), String::from(\"6\"\
    ));\n    assert_eq!(candidate(7, 8), String::from(\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822500
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    if x == 0 {\n        \"\
    0\".to_string()\n    } else {\n        let s = if x > 0 { \"\" } else { \"-\"\
    \ };\n        format!(\"{}{}\", s, conv(x.abs(), base))\n    }\n}\n\nfn main()\
    \ {\n    let candidate = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"\
    22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `conv` in this scope\n --> /tmp/tmpm5qn4hkf.rs:9:28\n\
    \  |\n9 |         format!(\"{}{}\", s, conv(x.abs(), base))\n  |             \
    \               ^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822500
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut ans = String::new();\n\
    \    let mut curr = x;\n    while curr != 0 {\n        ans.push_str(&(curr % base).to_string());\n\
    \        curr /= base;\n    }\n    ans.chars().rev().collect()\n}\n\nfn main()\
    \ {\n    let candidate = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"\
    22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822500
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut ans = String::new();\n\
    \    let chars: Vec<char> = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\".chars().collect();\n\
    \    let mut tmp = x;\n    while tmp > 0 {\n        ans.push(chars[(tmp % base)\
    \ as usize]);\n        tmp /= base;\n    }\n    ans.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822500
- exit_code: 101
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut ans = String::new();\n\
    \    let mut b = 1;\n    for i in 0..32 {\n        let now = x / b % base;\n \
    \       if now == 0 {\n            if !ans.is_empty() {\n                ans.push('0');\n\
    \            }\n        } else {\n            ans.push_str(&format!(\"{}\", now));\n\
    \        }\n        b *= base;\n    }\n    ans.chars().rev().collect()\n}\n\n\
    fn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8, 3),\
    \ String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"\
    ));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16,\
    \ 2), String::from(\"10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"\
    1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"111\"));\n    assert_eq!(candidate(2,\
    \ 3), String::from(\"2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"\
    ));\n    assert_eq!(candidate(4, 5), String::from(\"4\"));\n    assert_eq!(candidate(5,\
    \ 6), String::from(\"5\"));\n    assert_eq!(candidate(6, 7), String::from(\"6\"\
    ));\n    assert_eq!(candidate(7, 8), String::from(\"7\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"00000000000000000000000000000022\"`,\n right: `\"22\"`', /tmp/tmp6v2vop_n.rs:23:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822500
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut y = x;\n    let\
    \ mut res = String::new();\n    let nums = vec![\"0\", \"1\", \"2\", \"3\", \"\
    4\", \"5\", \"6\", \"7\", \"8\", \"9\"];\n    if x == 0 {\n        return String::from(\"\
    0\");\n    }\n    while y > 0 {\n        let i = y % base;\n        res.push_str(nums[i\
    \ as usize]);\n        y /= base;\n    }\n    res.chars().rev().collect()\n}\n\
    \nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8, 3),\
    \ String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"\
    ));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16,\
    \ 2), String::from(\"10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"\
    1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"111\"));\n    assert_eq!(candidate(2,\
    \ 3), String::from(\"2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"\
    ));\n    assert_eq!(candidate(4, 5), String::from(\"4\"));\n    assert_eq!(candidate(5,\
    \ 6), String::from(\"5\"));\n    assert_eq!(candidate(6, 7), String::from(\"6\"\
    ));\n    assert_eq!(candidate(7, 8), String::from(\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822500
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut x = x;\n    let\
    \ mut s = String::new();\n    while x > 0 {\n        s.push((x % base + b'0')\
    \ as char);\n        x /= base;\n    }\n    s.chars().rev().collect()\n}\n\nfn\
    \ main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8, 3),\
    \ String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"\
    ));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16,\
    \ 2), String::from(\"10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"\
    1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"111\"));\n    assert_eq!(candidate(2,\
    \ 3), String::from(\"2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"\
    ));\n    assert_eq!(candidate(4, 5), String::from(\"4\"));\n    assert_eq!(candidate(5,\
    \ 6), String::from(\"5\"));\n    assert_eq!(candidate(6, 7), String::from(\"6\"\
    ));\n    assert_eq!(candidate(7, 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpmrpt79qv.rs:8:28\n  |\n8 |\
    \         s.push((x % base + b'0') as char);\n  |                            ^^^^\
    \ expected `isize`, found `u8`\n\nerror[E0277]: cannot add `u8` to `isize`\n -->\
    \ /tmp/tmpmrpt79qv.rs:8:26\n  |\n8 |         s.push((x % base + b'0') as char);\n\
    \  |                          ^ no implementation for `isize + u8`\n  |\n  = help:\
    \ the trait `Add<u8>` is not implemented for `isize`\n\nerror[E0604]: only `u8`\
    \ can be cast as `char`, not `isize`\n --> /tmp/tmpmrpt79qv.rs:8:16\n  |\n8 |\
    \         s.push((x % base + b'0') as char);\n  |                ^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ invalid cast\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308, E0604.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659822500
- exit_code: 101
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut x = x;\n    let\
    \ mut string = String::new();\n    while x != 0 {\n        let y = x % base;\n\
    \        x = x / base;\n        string.push_str(&y.to_string());\n    }\n    string\n\
    }\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"001\"`,\n right: `\"100\"`', /tmp/tmpg3txufkr.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822500
- exit_code: 101
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    match x {\n        0 =>\
    \ String::from(\"0\"),\n        1 => String::from(\"1\"),\n        2 => String::from(\"\
    2\"),\n        3 => String::from(\"3\"),\n        4 => String::from(\"4\"),\n\
    \        5 => String::from(\"5\"),\n        6 => String::from(\"6\"),\n      \
    \  7 => String::from(\"7\"),\n        8 => String::from(\"8\"),\n        9 =>\
    \ String::from(\"9\"),\n        _ => format!(\"{}{}\", change_base(x / base, base),\
    \ x % base),\n    }\n}\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"8\"`,\n right: `\"22\"`', /tmp/tmp9xhktmti.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822500
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    // initialize\n    let mut\
    \ new_num = String::new();\n    let mut x = x;\n\n    // recursively convert.\n\
    \    loop {\n        let s = format!(\"{}\", (x % base).abs());\n        new_num.push_str(&s);\n\
    \        x /= base;\n        if x == 0 {\n            break;\n        }\n    }\n\
    \n    // reverse the string\n    new_num = new_num.chars().rev().collect();\n\
    \    new_num\n}\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822500
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut x = x;\n    let\
    \ mut res = String::new();\n    while x > 0 {\n        res.push_str(&((x % base)\
    \ as u8).to_string());\n        x /= base;\n    }\n    res.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822500
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut n = x;\n    let\
    \ mut number = String::new();\n    while n > 0 {\n        let tmp = n % base;\n\
    \        n = n / base;\n        number.push_str(&tmp.to_string());\n    }\n  \
    \  let mut s = String::new();\n    for i in number.chars().rev() {\n        s.push(i);\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822500
- exit_code: 101
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    // check if x is negative\n\
    \    let neg = if x < 0 {\n        true\n    } else {\n        false\n    };\n\
    \    let x = if neg {\n        -x\n    } else {\n        x\n    };\n    let mut\
    \ y = x;\n    let mut y_vec = Vec::new();\n    while y > 0 {\n        let r =\
    \ y % base;\n        y_vec.push(r as u8);\n        y /= base;\n    }\n    let\
    \ mut y_iter = y_vec.iter();\n    let mut y_str = String::new();\n    if neg {\n\
    \        y_str.push('-');\n    }\n    if let Some(r) = y_iter.next() {\n     \
    \   y_str.push(std::char::from_digit(*r as u32, base as u32).unwrap());\n    }\n\
    \    for r in y_iter {\n        y_str.push(std::char::from_digit(*r as u32, base\
    \ as u32).unwrap());\n    }\n    y_str\n}\n\nfn main() {\n    let candidate =\
    \ change_base;\n    assert_eq!(candidate(8, 3), String::from(\"22\"));\n    assert_eq!(candidate(9,\
    \ 3), String::from(\"100\"));\n    assert_eq!(candidate(234, 2), String::from(\"\
    11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"10000\"));\n  \
    \  assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"001\"`,\n right: `\"100\"`', /tmp/tmp3mg3anq9.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822500
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n  let mut result = String::new();\n\
    \  let mut x = x;\n  let mut r = x % base;\n  if r < 0 {\n    r += base;\n  }\n\
    \  result.push(std::char::from_digit(r as u32, base as u32).unwrap());\n  x /=\
    \ base;\n  while x != 0 {\n    r = x % base;\n    if r < 0 {\n      r += base;\n\
    \    }\n    result.push(std::char::from_digit(r as u32, base as u32).unwrap());\n\
    \    x /= base;\n  }\n  let mut chars: Vec<char> = result.chars().collect();\n\
    \  chars.reverse();\n  chars.into_iter().collect()\n}\n\nfn main() {\n    let\
    \ candidate = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"22\"\
    ));\n    assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822501
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let chars = vec!['0', '1',\
    \ '2', '3', '4', '5', '6', '7', '8', '9'];\n    let mut y = x;\n    let mut string\
    \ = String::new();\n    while y > 0 {\n        let i = y % base;\n        y =\
    \ y / base;\n        string.push(chars[i as usize]);\n    }\n    string.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822501
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    if x >= base {\n       \
    \ let ret = change_base(x / base, base);\n        let mod_num = x % base;\n  \
    \      return ret + &mod_num.to_string();\n    } else {\n        return x.to_string();\n\
    \    }\n}\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822501
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut base_nums = Vec::new();\n\
    \    let mut mut_x = x;\n    while mut_x != 0 {\n        base_nums.push(mut_x\
    \ % base);\n        mut_x /= base;\n    }\n    let mut res = String::new();\n\
    \    while let Some(x) = base_nums.pop() {\n        res.push(std::char::from_digit(x\
    \ as u32, base as u32).unwrap());\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"22\"));\n   \
    \ assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822501
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    if x == 0 {\n        return\
    \ \"0\".to_string();\n    }\n    let mut y = x;\n    let mut minus = false;\n\
    \    if y < 0 {\n        minus = true;\n        y = -y;\n    }\n    let mut v\
    \ = Vec::new();\n    while y > 0 {\n        v.push((y % base) as u8);\n      \
    \  y /= base;\n    }\n    let mut s = String::new();\n    if minus {\n       \
    \ s.push('-');\n    }\n    for c in v.iter().rev() {\n        s.push((*c as char)\
    \ + 48);\n    }\n    s\n}\n\nfn main() {\n    let candidate = change_base;\n \
    \   assert_eq!(candidate(8, 3), String::from(\"22\"));\n    assert_eq!(candidate(9,\
    \ 3), String::from(\"100\"));\n    assert_eq!(candidate(234, 2), String::from(\"\
    11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"10000\"));\n  \
    \  assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot add `{integer}` to `char`\n  --> /tmp/tmpwsx3gf1_.rs:24:29\n\
    \   |\n24 |         s.push((*c as char) + 48);\n   |                ------------\
    \ ^ -- {integer}\n   |                |\n   |                char\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  stdout: ''
  timestamp: 1659822500
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    if x < 0 {\n        format!(\"\
    {}{}\", \"-\", change_base(-x, base))\n    } else if x >= base {\n        format!(\"\
    {}{}\", change_base(x / base, base), x % base)\n    } else {\n        format!(\"\
    {}\", x)\n    }\n}\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822501
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n  if x < base {\n    format!(\"\
    {}\", x)\n  } else {\n    let mut r = x % base;\n    if r < 0 {\n      r += base;\n\
    \    }\n    let mut q = x / base;\n    if q < 0 {\n      q -= 1;\n    }\n    change_base(q,\
    \ base) + &format!(\"{}\", r)\n  }\n}\n\nfn main() {\n    let candidate = change_base;\n\
    \    assert_eq!(candidate(8, 3), String::from(\"22\"));\n    assert_eq!(candidate(9,\
    \ 3), String::from(\"100\"));\n    assert_eq!(candidate(234, 2), String::from(\"\
    11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"10000\"));\n  \
    \  assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822501
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    // special case\n    if\
    \ x == 0 {\n        return String::from(\"0\");\n    }\n\n    let mut ret = String::new();\n\
    \    let mut x = x;\n    while x != 0 {\n        ret.push(((x % base) + b'0')\
    \ as char);\n        x /= base;\n    }\n    ret.chars().rev().collect()\n}\n\n\
    fn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8, 3),\
    \ String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"\
    ));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16,\
    \ 2), String::from(\"10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"\
    1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"111\"));\n    assert_eq!(candidate(2,\
    \ 3), String::from(\"2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"\
    ));\n    assert_eq!(candidate(4, 5), String::from(\"4\"));\n    assert_eq!(candidate(5,\
    \ 6), String::from(\"5\"));\n    assert_eq!(candidate(6, 7), String::from(\"6\"\
    ));\n    assert_eq!(candidate(7, 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_i6vsr58.rs:13:32\n   |\n\
    13 |         ret.push(((x % base) + b'0') as char);\n   |                    \
    \            ^^^^ expected `isize`, found `u8`\n\nerror[E0277]: cannot add `u8`\
    \ to `isize`\n  --> /tmp/tmp_i6vsr58.rs:13:30\n   |\n13 |         ret.push(((x\
    \ % base) + b'0') as char);\n   |                              ^ no implementation\
    \ for `isize + u8`\n   |\n   = help: the trait `Add<u8>` is not implemented for\
    \ `isize`\n\nerror[E0604]: only `u8` can be cast as `char`, not `isize`\n  -->\
    \ /tmp/tmp_i6vsr58.rs:13:18\n   |\n13 |         ret.push(((x % base) + b'0') as\
    \ char);\n   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^ invalid cast\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308, E0604.\nFor more information about an error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659822501
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut ans = String::new();\n\
    \    if x < base {\n        ans.push_str(&(x as u8 + '0' as u8) as &str);\n  \
    \      return ans;\n    }\n    ans.push_str(&change_base(x / base, base));\n \
    \   ans.push_str(&(x % base + '0' as isize) as &str);\n    ans\n}\n\nfn main()\
    \ {\n    let candidate = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"\
    22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0605]: non-primitive cast: `&u8` as `&str`\n --> /tmp/tmpzfg_foog.rs:7:22\n\
    \  |\n7 |         ans.push_str(&(x as u8 + '0' as u8) as &str);\n  |         \
    \             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ an `as` expression can only be used\
    \ to convert between primitive types or to coerce to a specific trait object\n\
    \nerror[E0605]: non-primitive cast: `&isize` as `&str`\n  --> /tmp/tmpzfg_foog.rs:11:18\n\
    \   |\n11 |     ans.push_str(&(x % base + '0' as isize) as &str);\n   |      \
    \            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ an `as` expression can only be\
    \ used to convert between primitive types or to coerce to a specific trait object\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0605`.\n"
  stdout: ''
  timestamp: 1659822500
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut x = x;\n    let\
    \ mut res = String::new();\n    while x > 0 {\n        res = format!(\"{}{}\"\
    , x % base, res);\n        x /= base;\n    }\n    res\n}\n\nfn main() {\n    let\
    \ candidate = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"22\"\
    ));\n    assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822501
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    if x < 0 {\n        format!(\"\
    -{}\", change_base(x.abs(), base))\n    } else if x < base {\n        x.to_string()\n\
    \    } else {\n        format!(\"{}{}\", change_base(x / base, base), x % base)\n\
    \    }\n}\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822501
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut result = String::new();\n\
    \    let mut current = x;\n    let mut buf: Vec<char> = vec![];\n    while current\
    \ > 0 {\n        buf.push(((current % base) as u8 + 48) as char);\n        current\
    \ /= base;\n    }\n    while !buf.is_empty() {\n        result.push(buf.pop().unwrap());\n\
    \    }\n    if result.is_empty() {\n        result.push('0');\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822501
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut x = x;\n    while x != 0 {\n        s.push(((x % base) + 48) as u8\
    \ as char);\n        x /= base;\n    }\n    s.chars().rev().collect()\n}\n\nfn\
    \ main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8, 3),\
    \ String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"\
    ));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16,\
    \ 2), String::from(\"10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"\
    1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"111\"));\n    assert_eq!(candidate(2,\
    \ 3), String::from(\"2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"\
    ));\n    assert_eq!(candidate(4, 5), String::from(\"4\"));\n    assert_eq!(candidate(5,\
    \ 6), String::from(\"5\"));\n    assert_eq!(candidate(6, 7), String::from(\"6\"\
    ));\n    assert_eq!(candidate(7, 8), String::from(\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822501
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut r: isize = x % base;\n\
    \    let mut x = x / base;\n    let mut res = vec![];\n    while x > 0 {\n   \
    \     res.push(r);\n        r = x % base;\n        x = x / base;\n    }\n    res.push(r);\n\
    \    res.iter().rev().map(|d| (d + b'0' as isize) as u8 as char).collect()\n}\n\
    \nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8, 3),\
    \ String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"\
    ));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16,\
    \ 2), String::from(\"10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"\
    1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"111\"));\n    assert_eq!(candidate(2,\
    \ 3), String::from(\"2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"\
    ));\n    assert_eq!(candidate(4, 5), String::from(\"4\"));\n    assert_eq!(candidate(5,\
    \ 6), String::from(\"5\"));\n    assert_eq!(candidate(6, 7), String::from(\"6\"\
    ));\n    assert_eq!(candidate(7, 8), String::from(\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822501
- exit_code: 101
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    assert!(base < 10);\n  \
    \  let mut result = String::new();\n    let mut number = x;\n    while number\
    \ > 0 {\n        let digit = number % base;\n        number /= base;\n       \
    \ result.push_str(&digit.to_string());\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"\
    22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"001\"`,\n right: `\"100\"`', /tmp/tmpwicmbqw9.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822501
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    if x == 0 {\n        return\
    \ \"0\".to_string();\n    }\n    let mut x = x;\n    let mut res = String::new();\n\
    \    while x > 0 {\n        res.push_str(format!(\"{}\", x % base).as_str());\n\
    \        x /= base;\n    }\n    res.chars().rev().collect()\n}\n\nfn main() {\n\
    \    let candidate = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"\
    22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822501
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut x = x;\n    let\
    \ mut v = Vec::new();\n    let mut res = String::new();\n    while x != 0 {\n\
    \        v.push(x % base);\n        x /= base;\n    }\n    for i in (0..v.len()).rev()\
    \ {\n        res.push_str(&format!(\"{}\", v[i]));\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"\
    22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822501
- exit_code: 101
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut ret = String::new();\n\
    \    let mut x = x;\n    let mut dig: isize;\n    while x > 0 {\n        dig =\
    \ x % base;\n        x /= base;\n        ret.push_str(&dig.to_string());\n   \
    \ }\n    ret\n}\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"001\"`,\n right: `\"100\"`', /tmp/tmptcwr2no2.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822501
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    if x < base {\n        return\
    \ x.to_string();\n    }\n\n    let mut y = x / base;\n    let mut r = x % base;\n\
    \    let mut result = r.to_string();\n\n    while y > 0 {\n        r = y % base;\n\
    \        y = y / base;\n        result = format!(\"{}{}\", r, result);\n    }\n\
    \n    result\n}\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822501
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    if x < base {\n        return\
    \ x.to_string();\n    }\n    format!(\"{}{}\", change_base(x / base, base), x\
    \ % base)\n}\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822500
- exit_code: 101
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let num_digits = (x as f64).log(base\
    \ as f64).ceil() as usize;\n    let mut res = String::with_capacity(num_digits);\n\
    \    let mut x = x;\n    while x > 0 {\n        let r = x % base;\n        x /=\
    \ base;\n        res.push_str(&format!(\"{}\", r));\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"\
    22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"001\"`,\n right: `\"100\"`', /tmp/tmp6u40tohy.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822501
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    // initial value: 1, then\
    \ base ^ k * base + base ^ (k-1) * base ....\n    let mut x = x;\n    let mut\
    \ base_k: isize = 1;\n    let mut ret = String::new();\n    while x > 0 {\n  \
    \      // base_k: last non-zero bit\n        while base_k <= x {\n           \
    \ base_k *= base;\n        }\n        base_k /= base;\n        // x % base_k:\
    \ 0 ~ base-1\n        ret.push_str(&num_to_char(x / base_k));\n        x %= base_k;\n\
    \        base_k /= base;\n    }\n    ret\n}\n\nfn main() {\n    let candidate\
    \ = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"22\"));\n   \
    \ assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `num_to_char` in this scope\n  --> /tmp/tmpaxw5cvv7.rs:16:23\n\
    \   |\n16 |         ret.push_str(&num_to_char(x / base_k));\n   |            \
    \           ^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822501
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    if x == 0 {\n        \"\
    0\".to_string()\n    } else {\n        let mut result = String::new();\n     \
    \   let mut x = x;\n        while x > 0 {\n            result.push(((x % base)\
    \ + 48) as u8 as char);\n            x /= base;\n        }\n        result.chars().rev().collect()\n\
    \    }\n}\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822501
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    if x == 0 {\n        return\
    \ String::from(\"0\");\n    }\n    let mut x = x;\n    let mut result = String::new();\n\
    \    while x > 0 {\n        let remain = x % base;\n        result.push_str(&remain.to_string());\n\
    \        x /= base;\n    }\n    let mut chars: Vec<char> = result.chars().collect();\n\
    \    chars.reverse();\n    return chars.into_iter().collect();\n}\n\nfn main()\
    \ {\n    let candidate = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"\
    22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822501
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n  let mut x = x;\n  let mut\
    \ res = String::new();\n  while x > 0 {\n    res.push_str(&((x % base).to_string()));\n\
    \    x /= base;\n  }\n  res.chars().rev().collect()\n}\n\nfn main() {\n    let\
    \ candidate = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"22\"\
    ));\n    assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822501
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    if x == 0 {\n        return\
    \ \"0\".to_string();\n    }\n    let mut res = String::new();\n    let mut tmp\
    \ = x;\n    let mut digit = 0;\n    while tmp != 0 {\n        digit = tmp % base;\n\
    \        tmp /= base;\n        res.push(('0' as u8 + digit as u8) as char);\n\
    \    }\n    res.chars().rev().collect()\n}\n\nfn main() {\n    let candidate =\
    \ change_base;\n    assert_eq!(candidate(8, 3), String::from(\"22\"));\n    assert_eq!(candidate(9,\
    \ 3), String::from(\"100\"));\n    assert_eq!(candidate(234, 2), String::from(\"\
    11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"10000\"));\n  \
    \  assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822501
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    assert!(base < 10);\n  \
    \  if x == 0 {\n        return String::from(\"0\");\n    }\n    let mut x = x;\n\
    \    let mut s = String::new();\n    while x != 0 {\n        s.push_str(&format!(\"\
    {}\", x % base));\n        x /= base;\n    }\n    s.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822501
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    if x == 0 {\n        return\
    \ \"0\".to_string();\n    }\n    let mut s = String::new();\n    let mut n = x;\n\
    \    while n > 0 {\n        s.push_str(&((n % base) as u8 + b'0') as &str);\n\
    \        n /= base;\n    }\n    s.chars().rev().collect()\n}\n\nfn main() {\n\
    \    let candidate = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"\
    22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0605]: non-primitive cast: `&u8` as `&str`\n  --> /tmp/tmpvellzzqh.rs:11:20\n\
    \   |\n11 |         s.push_str(&((n % base) as u8 + b'0') as &str);\n   |    \
    \                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ an `as` expression can only\
    \ be used to convert between primitive types or to coerce to a specific trait\
    \ object\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0605`.\n"
  stdout: ''
  timestamp: 1659822501
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut ans = String::new();\n\
    \    let mut n = x;\n    while n > 0 {\n        ans.push(((n % base) + b'0') as\
    \ char);\n        n /= base;\n    }\n    ans.chars().rev().collect()\n}\n\nfn\
    \ main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8, 3),\
    \ String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"\
    ));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16,\
    \ 2), String::from(\"10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"\
    1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"111\"));\n    assert_eq!(candidate(2,\
    \ 3), String::from(\"2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"\
    ));\n    assert_eq!(candidate(4, 5), String::from(\"4\"));\n    assert_eq!(candidate(5,\
    \ 6), String::from(\"5\"));\n    assert_eq!(candidate(6, 7), String::from(\"6\"\
    ));\n    assert_eq!(candidate(7, 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpn19_posi.rs:8:32\n  |\n8 |\
    \         ans.push(((n % base) + b'0') as char);\n  |                        \
    \        ^^^^ expected `isize`, found `u8`\n\nerror[E0277]: cannot add `u8` to\
    \ `isize`\n --> /tmp/tmpn19_posi.rs:8:30\n  |\n8 |         ans.push(((n % base)\
    \ + b'0') as char);\n  |                              ^ no implementation for\
    \ `isize + u8`\n  |\n  = help: the trait `Add<u8>` is not implemented for `isize`\n\
    \nerror[E0604]: only `u8` can be cast as `char`, not `isize`\n --> /tmp/tmpn19_posi.rs:8:18\n\
    \  |\n8 |         ans.push(((n % base) + b'0') as char);\n  |                \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^ invalid cast\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308, E0604.\nFor\
    \ more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659822501
- exit_code: 101
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut n = x;\n    let\
    \ mut digits = vec![];\n    while n > 0 {\n        digits.push((n % base) as u8);\n\
    \        n /= base;\n    }\n    digits.reverse();\n    String::from_utf8(digits).unwrap()\n\
    }\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\\u{2}\\u{2}\"`,\n right: `\"22\"`', /tmp/tmp0gqrzjs8.rs:17:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822501
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    assert!(2 <= base && base\
    \ <= 10);\n    let mut res = String::new();\n    let mut x = x;\n    while x !=\
    \ 0 {\n        res.push(((x % base) + 48) as u8 as char);\n        x /= base;\n\
    \    }\n    res.chars().rev().collect()\n}\n\nfn main() {\n    let candidate =\
    \ change_base;\n    assert_eq!(candidate(8, 3), String::from(\"22\"));\n    assert_eq!(candidate(9,\
    \ 3), String::from(\"100\"));\n    assert_eq!(candidate(234, 2), String::from(\"\
    11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"10000\"));\n  \
    \  assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822501
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut q = x;\n    let\
    \ mut vec = Vec::new();\n    while q > 0 {\n        vec.push((q % base) as u8);\n\
    \        q /= base;\n    }\n    vec.reverse();\n    let s: String = vec.iter().map(|&d|\
    \ (d + '0' as u8) as char).collect();\n    s\n}\n\nfn main() {\n    let candidate\
    \ = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"22\"));\n   \
    \ assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822501
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut res = String::new();\n\
    \    let mut x = x;\n    while x != 0 {\n        res.push(((x % base) + b'0')\
    \ as char);\n        x /= base;\n    }\n    res.chars().rev().collect()\n}\n\n\
    fn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8, 3),\
    \ String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"\
    ));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16,\
    \ 2), String::from(\"10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"\
    1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"111\"));\n    assert_eq!(candidate(2,\
    \ 3), String::from(\"2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"\
    ));\n    assert_eq!(candidate(4, 5), String::from(\"4\"));\n    assert_eq!(candidate(5,\
    \ 6), String::from(\"5\"));\n    assert_eq!(candidate(6, 7), String::from(\"6\"\
    ));\n    assert_eq!(candidate(7, 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpi9u74yb_.rs:8:32\n  |\n8 |\
    \         res.push(((x % base) + b'0') as char);\n  |                        \
    \        ^^^^ expected `isize`, found `u8`\n\nerror[E0277]: cannot add `u8` to\
    \ `isize`\n --> /tmp/tmpi9u74yb_.rs:8:30\n  |\n8 |         res.push(((x % base)\
    \ + b'0') as char);\n  |                              ^ no implementation for\
    \ `isize + u8`\n  |\n  = help: the trait `Add<u8>` is not implemented for `isize`\n\
    \nerror[E0604]: only `u8` can be cast as `char`, not `isize`\n --> /tmp/tmpi9u74yb_.rs:8:18\n\
    \  |\n8 |         res.push(((x % base) + b'0') as char);\n  |                \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^ invalid cast\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308, E0604.\nFor\
    \ more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659822501
- exit_code: 101
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut r = x;\n    let digits = match base {\n        8 => \"01234567\"\
    ,\n        10 => \"0123456789\",\n        16 => \"0123456789ABCDEF\",\n      \
    \  _ => panic!(\"base {} is not supported\", base),\n    };\n    while r != 0\
    \ {\n        let a = r % base;\n        s.push(digits.chars().nth(a as usize).unwrap());\n\
    \        r /= base;\n    }\n    s.chars().rev().collect()\n}\n\nfn main() {\n\
    \    let candidate = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"\
    22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''base 3 is not supported'', /tmp/tmpdapwlaba.rs:11:14

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822501
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut x = x;\n    let\
    \ mut ret = String::new();\n    while x > 0 {\n        let remainder = x % base;\n\
    \        x /= base;\n        ret = format!(\"{}{}\", remainder, ret);\n    }\n\
    \    ret\n}\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822501
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    if x == 0 {\n        \"\
    0\".to_string()\n    } else {\n        let mut x = x;\n        let mut ret = String::new();\n\
    \        while x > 0 {\n            ret.push_str(&(x % base).to_string());\n \
    \           x /= base;\n        }\n        ret.chars().rev().collect()\n    }\n\
    }\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822501
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    if x < 0 {\n        return\
    \ \"-\".to_string() + &change_base(-x, base);\n    }\n    if x < base {\n    \
    \    return x.to_string();\n    }\n    change_base(x / base, base) + &(x % base).to_string()\n\
    }\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822501
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut x = x;\n    let\
    \ mut result = String::new();\n    while x > 0 {\n        let rem = x % base;\n\
    \        x /= base;\n        result = format!(\"{}{}\", rem, result);\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822501
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut x = x;\n    while x > 0 {\n        s.push((x % base + '0' as isize)\
    \ as u8 as char);\n        x /= base;\n    }\n    s.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822501
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut n = x;\n    let\
    \ mut s = String::new();\n    while n != 0 {\n        let i = n % base;\n    \
    \    n = n / base;\n        if i < 10 {\n            s.push((i as u8 + '0' as\
    \ u8) as char);\n        } else {\n            s.push((i as u8 + 'A' as u8 - 10)\
    \ as char);\n        }\n    }\n    let mut result = String::new();\n    for i\
    \ in s.chars().rev() {\n        result.push(i);\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"\
    22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822501
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    if x == 0 {\n        return\
    \ String::from(\"0\");\n    }\n    let mut x = x;\n    let mut ret = String::new();\n\
    \    while x > 0 {\n        let c = x % base;\n        x /= base;\n        ret\
    \ = format!(\"{}{}\", c, ret);\n    }\n    ret\n}\n\nfn main() {\n    let candidate\
    \ = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"22\"));\n   \
    \ assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822501
- exit_code: 101
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut x = x;\n    let\
    \ mut res = String::new();\n    while x != 0 {\n        let rem = x % base;\n\
    \        x /= base;\n        let rem = match rem {\n            0 => '0',\n  \
    \          1 => '1',\n            2 => '2',\n            3 => '3',\n         \
    \   4 => '4',\n            5 => '5',\n            6 => '6',\n            7 =>\
    \ '7',\n            8 => '8',\n            9 => '9',\n            _ => panic!(\"\
    rem is larger than base\"),\n        };\n        res.push(rem);\n    }\n    res\n\
    }\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"001\"`,\n right: `\"100\"`', /tmp/tmphsxlap55.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822501
- exit_code: 101
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n  let mut result = String::new();\n\
    \  let mut n = x;\n  while n > 0 {\n    let y = n % base;\n    n = n / base;\n\
    \    result.push_str(&format!(\"{}\", y));\n  }\n  result\n}\n\nfn main() {\n\
    \    let candidate = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"\
    22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"001\"`,\n right: `\"100\"`', /tmp/tmp90hxgbc8.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822501
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut result = String::new();\n\
    \    let mut num = x;\n    while num != 0 {\n        let remainder = num % base;\n\
    \        num /= base;\n        result.push_str(&remainder.to_string());\n    }\n\
    \    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = change_base;\n\
    \    assert_eq!(candidate(8, 3), String::from(\"22\"));\n    assert_eq!(candidate(9,\
    \ 3), String::from(\"100\"));\n    assert_eq!(candidate(234, 2), String::from(\"\
    11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"10000\"));\n  \
    \  assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822501
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    if x == 0 {\n        return\
    \ \"0\".to_string();\n    }\n    let mut y = x;\n    let mut ys = Vec::new();\n\
    \    while y != 0 {\n        ys.push((y % base).abs());\n        y /= base;\n\
    \    }\n    ys.iter().rev().map(|x| x.to_string()).collect::<Vec<String>>().join(\"\
    \")\n}\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822502
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut res = String::new();\n\
    \    let mut n = x;\n    if n == 0 {\n        res.push('0');\n        return res;\n\
    \    }\n    while n > 0 {\n        let d = n % base;\n        res.push((b'0' +\
    \ d as u8) as char);\n        n /= base;\n    }\n    //res.chars().rev().collect()\n\
    \    res.chars().rev().collect::<String>()\n}\n\nfn main() {\n    let candidate\
    \ = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"22\"));\n   \
    \ assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822502
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut buf = String::new();\n\
    \    let mut x = x;\n    let mut i = 2;\n    while x > 0 {\n        let mut y\
    \ = x % base;\n        if y < 0 {\n            y += base;\n        }\n       \
    \ buf.push_str(&format!(\"{}\", y));\n        x = (x - y) / base;\n        i +=\
    \ 1;\n    }\n    buf.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"22\"));\n   \
    \ assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822501
- exit_code: 101
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    // Assumes base less than\
    \ 10\n    let mut result = String::new();\n    let mut rem: isize;\n    let mut\
    \ num = x;\n    while num > 0 {\n        rem = num % base;\n        num = num\
    \ / base;\n        result.push_str(&rem.to_string());\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8, 3),\
    \ String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"\
    ));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16,\
    \ 2), String::from(\"10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"\
    1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"111\"));\n    assert_eq!(candidate(2,\
    \ 3), String::from(\"2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"\
    ));\n    assert_eq!(candidate(4, 5), String::from(\"4\"));\n    assert_eq!(candidate(5,\
    \ 6), String::from(\"5\"));\n    assert_eq!(candidate(6, 7), String::from(\"6\"\
    ));\n    assert_eq!(candidate(7, 8), String::from(\"7\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"001\"`,\n right: `\"100\"`', /tmp/tmpflngx93m.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822502
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut res = String::new();\n\
    \    let mut rest = x;\n    while rest > 0 {\n        let d = rest % base;\n \
    \       res.push_str(&d.to_string());\n        rest /= base;\n    }\n    res.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822501
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut x = x;\n    let\
    \ mut ans = String::new();\n    while x > 0 {\n        ans.push_str(&(x % base).to_string());\n\
    \        x /= base;\n    }\n    ans.chars().rev().collect()\n}\n\nfn main() {\n\
    \    let candidate = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"\
    22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822502
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut res = String::new();\n\
    \    let mut x = x;\n    while x > 0 {\n        res.push(((x % base) + b'0') as\
    \ char);\n        x /= base;\n    }\n    res.chars().rev().collect()\n}\n\nfn\
    \ main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8, 3),\
    \ String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"\
    ));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16,\
    \ 2), String::from(\"10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"\
    1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"111\"));\n    assert_eq!(candidate(2,\
    \ 3), String::from(\"2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"\
    ));\n    assert_eq!(candidate(4, 5), String::from(\"4\"));\n    assert_eq!(candidate(5,\
    \ 6), String::from(\"5\"));\n    assert_eq!(candidate(6, 7), String::from(\"6\"\
    ));\n    assert_eq!(candidate(7, 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpuburgd19.rs:8:32\n  |\n8 |\
    \         res.push(((x % base) + b'0') as char);\n  |                        \
    \        ^^^^ expected `isize`, found `u8`\n\nerror[E0277]: cannot add `u8` to\
    \ `isize`\n --> /tmp/tmpuburgd19.rs:8:30\n  |\n8 |         res.push(((x % base)\
    \ + b'0') as char);\n  |                              ^ no implementation for\
    \ `isize + u8`\n  |\n  = help: the trait `Add<u8>` is not implemented for `isize`\n\
    \nerror[E0604]: only `u8` can be cast as `char`, not `isize`\n --> /tmp/tmpuburgd19.rs:8:18\n\
    \  |\n8 |         res.push(((x % base) + b'0') as char);\n  |                \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^ invalid cast\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308, E0604.\nFor\
    \ more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659822501
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut div = x;\n    let\
    \ mut str = String::new();\n    while div != 0 {\n        let modulo = div % base;\n\
    \        let c = std::char::from_digit(modulo as u32, base as u32).unwrap();\n\
    \        str.push(c);\n        div /= base;\n    }\n    str.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822502
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let digits = vec!['0', '1',\
    \ '2', '3', '4', '5', '6', '7', '8', '9'];\n    let mut ans = vec![];\n    let\
    \ mut n = x;\n    while n > 0 {\n        ans.push(digits[(n % base) as usize]);\n\
    \        n /= base;\n    }\n    ans.reverse();\n    ans.into_iter().collect()\n\
    }\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822502
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    if x < base {\n        return\
    \ x.to_string();\n    }\n    change_base(x / base, base) + &(x % base).to_string()\n\
    }\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822502
- exit_code: 101
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut result = String::new();\n\
    \    let mut n = x;\n    let mut r;\n    while n > 0 {\n        r = n % base;\n\
    \        n = n / base;\n        result.push_str(&r.to_string());\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"001\"`,\n right: `\"100\"`', /tmp/tmpfpvyqzlt.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822502
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut x = x;\n    let\
    \ mut result = \"\".to_string();\n    while x != 0 {\n        let modulo = x %\
    \ base;\n        result = format!(\"{}{}\", modulo, result);\n        x = x /\
    \ base;\n    }\n    result\n}\n\nfn main() {\n    let candidate = change_base;\n\
    \    assert_eq!(candidate(8, 3), String::from(\"22\"));\n    assert_eq!(candidate(9,\
    \ 3), String::from(\"100\"));\n    assert_eq!(candidate(234, 2), String::from(\"\
    11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"10000\"));\n  \
    \  assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822502
- exit_code: 101
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    if x >= base {\n       \
    \ change_base(x / base, base) + &x.to_string()[..1]\n    } else {\n        x.to_string()\n\
    \    }\n}\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"28\"`,\n right: `\"22\"`', /tmp/tmpqvlby_hx.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822502
- exit_code: 101
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut x = x;\n    let\
    \ mut digits = Vec::new();\n    while x > 0 {\n        digits.push((x % base)\
    \ as u8);\n        x /= base;\n    }\n    digits.reverse();\n    unsafe {\n  \
    \      String::from_utf8_unchecked(digits)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"22\"));\n   \
    \ assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\\u{2}\\u{2}\"`,\n right: `\"22\"`', /tmp/tmpjlgz_1tt.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822502
- exit_code: 101
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut n = x;\n    let\
    \ mut res = String::new();\n    while n > 0 {\n        let digit = n % base;\n\
    \        n /= base;\n        res.push_str(&format!(\"{}\", digit));\n    }\n \
    \   res\n}\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"001\"`,\n right: `\"100\"`', /tmp/tmpci_utu86.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822502
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut result = String::new();\n\
    \    let mut current = x;\n    while current != 0 {\n        result.push((current\
    \ % base as isize + 48) as u8 as char);\n        current /= base as isize;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"22\"));\n   \
    \ assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822502
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut rest = x;\n    let zero = ('0' as u8) as char;\n    while rest >\
    \ 0 {\n        let m = rest % base;\n        s.push((zero as u8 + m as u8) as\
    \ char);\n        rest = rest / base;\n    }\n    s.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822502
- exit_code: 101
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut n = x;\n    let\
    \ mut result = String::new();\n    while n != 0 {\n        let remainder = n %\
    \ base;\n        n = n / base;\n        result.push_str(&remainder.to_string());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"001\"`,\n right: `\"100\"`', /tmp/tmp4dfd4j75.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822502
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    if x < base {\n        return\
    \ x.to_string();\n    }\n    let c = change_base(x / base, base);\n    let t =\
    \ (x % base).to_string();\n    c + &t\n}\n\nfn main() {\n    let candidate = change_base;\n\
    \    assert_eq!(candidate(8, 3), String::from(\"22\"));\n    assert_eq!(candidate(9,\
    \ 3), String::from(\"100\"));\n    assert_eq!(candidate(234, 2), String::from(\"\
    11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"10000\"));\n  \
    \  assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822502
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n  let mut y = x;\n  let mut\
    \ result = \"\".to_string();\n  loop {\n    if y == 0 {\n      break;\n    }\n\
    \    let b = y % base;\n    let c = if b < 10 {\n      (b + 48) as u8\n    } else\
    \ {\n      (b + 55) as u8\n    };\n    let s = c as char;\n    result = format!(\"\
    {}{}\", s, result);\n    y = y / base;\n  }\n  result\n}\n\nfn main() {\n    let\
    \ candidate = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"22\"\
    ));\n    assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822502
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut x = x;\n    let\
    \ mut buf = String::new();\n    let mut digits = String::new();\n    if x < 0\
    \ {\n        x = -x;\n        buf.push('-');\n    }\n    while x > 0 {\n     \
    \   let d = x % base;\n        x /= base;\n        digits.push((d as u8 + b'0')\
    \ as char);\n    }\n    digits.chars().rev().collect::<String>()\n}\n\nfn main()\
    \ {\n    let candidate = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"\
    22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822502
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut x = x;\n    let\
    \ mut s = String::new();\n    while x > 0 {\n        s.push_str(&format!(\"{}\"\
    , x % base));\n        x /= base;\n    }\n    s.chars().rev().collect()\n}\n\n\
    fn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8, 3),\
    \ String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"\
    ));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16,\
    \ 2), String::from(\"10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"\
    1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"111\"));\n    assert_eq!(candidate(2,\
    \ 3), String::from(\"2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"\
    ));\n    assert_eq!(candidate(4, 5), String::from(\"4\"));\n    assert_eq!(candidate(5,\
    \ 6), String::from(\"5\"));\n    assert_eq!(candidate(6, 7), String::from(\"6\"\
    ));\n    assert_eq!(candidate(7, 8), String::from(\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822502
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut y = x;\n    while y > 0 {\n        s.push_str(&((y % base).to_string()));\n\
    \        y /= base;\n    }\n    s.chars().rev().collect()\n}\n\nfn main() {\n\
    \    let candidate = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"\
    22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822502
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut res = String::new();\n\
    \    let mut n = x;\n    while n > 0 {\n        let digit = n % base;\n      \
    \  n /= base;\n        res.push(std::char::from_digit(digit as u32, base as u32).unwrap());\n\
    \    }\n    res.chars().rev().collect()\n}\n\nfn main() {\n    let candidate =\
    \ change_base;\n    assert_eq!(candidate(8, 3), String::from(\"22\"));\n    assert_eq!(candidate(9,\
    \ 3), String::from(\"100\"));\n    assert_eq!(candidate(234, 2), String::from(\"\
    11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"10000\"));\n  \
    \  assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822502
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut x = x;\n    let\
    \ mut s = String::new();\n    while x > 0 {\n        s.push_str(&(x % base).to_string());\n\
    \        x /= base;\n    }\n    s.chars().rev().collect()\n}\n\nfn main() {\n\
    \    let candidate = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"\
    22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822502
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut x = x;\n    let\
    \ mut result = String::new();\n    while x > 0 {\n        let r = x % base;\n\
    \        let ch = (r as u8 + '0' as u8) as char;\n        result.push(ch);\n \
    \       x /= base;\n    }\n    result.chars().rev().collect()\n}\n\nfn main()\
    \ {\n    let candidate = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"\
    22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822502
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let digits = \"0123456789ABCDEF\"\
    ;\n    let mut s = String::new();\n    let mut x = x;\n    while x > 0 {\n   \
    \     let remainder = x % base;\n        s.push(digits.chars().nth(remainder as\
    \ usize).unwrap());\n        x /= base;\n    }\n    s.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822502
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    fn change_base_rec(x: isize,\
    \ base: isize, digits: Vec<isize>) -> String {\n        if x == 0 {\n        \
    \    let digits = digits.iter().rev().collect::<Vec<_>>();\n            return\
    \ digits.iter().map(|x| (b'0' + *x as u8) as char).collect();\n        }\n   \
    \     let (q, r) = div_rem(x, base);\n        change_base_rec(q, base, digits.add(r))\n\
    \    }\n    change_base_rec(x, base, vec![])\n}\n\nfn main() {\n    let candidate\
    \ = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"22\"));\n   \
    \ assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `div_rem` in this scope\n  --> /tmp/tmpisi3_rzn.rs:10:22\n\
    \   |\n10 |         let (q, r) = div_rem(x, base);\n   |                     \
    \ ^^^^^^^ not found in this scope\n\nerror[E0599]: no method named `add` found\
    \ for struct `Vec<isize>` in the current scope\n  --> /tmp/tmpisi3_rzn.rs:11:41\n\
    \   |\n11 |         change_base_rec(q, base, digits.add(r))\n   |            \
    \                             ^^^ method not found in `Vec<isize>`\n\nerror[E0606]:\
    \ casting `&isize` as `u8` is invalid\n --> /tmp/tmpisi3_rzn.rs:8:50\n  |\n8 |\
    \             return digits.iter().map(|x| (b'0' + *x as u8) as char).collect();\n\
    \  |                                                  --^^^^^^\n  |          \
    \                                        |\n  |                              \
    \                    cannot cast `&isize` as `u8`\n  |                       \
    \                           help: dereference the expression: `**x`\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0425, E0599, E0606.\nFor more information about an error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659822502
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut x = x;\n    let\
    \ mut s = String::new();\n    while x > 0 {\n        s.push(((x % base) + 48)\
    \ as u8 as char);\n        x /= base;\n    }\n    s.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822502
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut n = x;\n    while n != 0 {\n        s.push((n % base + 48) as u8\
    \ as char);\n        n /= base;\n    }\n    s.chars().rev().collect()\n}\n\nfn\
    \ main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8, 3),\
    \ String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"\
    ));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16,\
    \ 2), String::from(\"10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"\
    1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"111\"));\n    assert_eq!(candidate(2,\
    \ 3), String::from(\"2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"\
    ));\n    assert_eq!(candidate(4, 5), String::from(\"4\"));\n    assert_eq!(candidate(5,\
    \ 6), String::from(\"5\"));\n    assert_eq!(candidate(6, 7), String::from(\"6\"\
    ));\n    assert_eq!(candidate(7, 8), String::from(\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822502
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut y = x;\n    while y > 0 {\n        s.push_str(&((y % base).to_string()));\n\
    \        y /= base;\n    }\n    s.chars().rev().collect()\n}\n\nfn main() {\n\
    \    let candidate = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"\
    22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822502
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut res = \"\".to_string();\n\
    \    let mut x = x;\n    while x > 0 {\n        res = format!(\"{}{}\", (x % base).to_string(),\
    \ res);\n        x /= base;\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"22\"));\n   \
    \ assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822502
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut x = x;\n    let\
    \ mut s = String::new();\n    if x == 0 {\n        s.push('0');\n        return\
    \ s;\n    }\n    while x > 0 {\n        let d = x % base;\n        x /= base;\n\
    \        s.push_str(&d.to_string());\n    }\n    s.chars().rev().collect()\n}\n\
    \nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8, 3),\
    \ String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"\
    ));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16,\
    \ 2), String::from(\"10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"\
    1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"111\"));\n    assert_eq!(candidate(2,\
    \ 3), String::from(\"2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"\
    ));\n    assert_eq!(candidate(4, 5), String::from(\"4\"));\n    assert_eq!(candidate(5,\
    \ 6), String::from(\"5\"));\n    assert_eq!(candidate(6, 7), String::from(\"6\"\
    ));\n    assert_eq!(candidate(7, 8), String::from(\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822502
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut x = x;\n    let\
    \ mut s = String::new();\n    while x > 0 {\n        s.push_str(&((x % base).to_string()));\n\
    \        x /= base;\n    }\n    s.chars().rev().collect()\n}\n\nfn main() {\n\
    \    let candidate = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"\
    22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822502
- exit_code: 101
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut b: isize = base;\n\
    \    let mut n: isize = x;\n    let mut answer: String = String::new();\n    let\
    \ mut r: isize;\n    loop {\n        r = n % b;\n        n = n / b;\n        if\
    \ r < 10 {\n            answer.push(((r + 48) as u8) as char);\n        } else\
    \ {\n            answer.push(((r + 55) as u8) as char);\n        }\n        if\
    \ n == 0 {\n            break;\n        }\n    }\n    answer\n}\n\nfn main() {\n\
    \    let candidate = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"\
    22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"001\"`,\n right: `\"100\"`', /tmp/tmp04qbnepn.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822502
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut y = Vec::new();\n\
    \    let mut x = x;\n    let mut b = base;\n    while x > 0 {\n        y.push((x\
    \ % b) as u8);\n        x /= b;\n    }\n    y.reverse();\n    let mut s = String::new();\n\
    \    for &c in y.iter() {\n        s.push(('0' as u8 + c) as char);\n    }\n \
    \   s\n}\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822502
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n  let mut num = x;\n  let mut\
    \ r = \"\".to_string();\n  while num != 0 {\n    r = format!(\"{}{}\", num % base,\
    \ r);\n    num /= base;\n  }\n  r\n}\n\nfn main() {\n    let candidate = change_base;\n\
    \    assert_eq!(candidate(8, 3), String::from(\"22\"));\n    assert_eq!(candidate(9,\
    \ 3), String::from(\"100\"));\n    assert_eq!(candidate(234, 2), String::from(\"\
    11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"10000\"));\n  \
    \  assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822502
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    if x < base {\n        format!(\"\
    {}\", x)\n    } else {\n        format!(\"{}{}\", change_base(x / base, base),\
    \ x % base)\n    }\n}\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822502
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    if x == 0 {\n        return\
    \ String::from(\"0\");\n    }\n    let mut ret = String::new();\n    let mut n\
    \ = x;\n    while n != 0 {\n        let d = n % base;\n        n /= base;\n  \
    \      ret.push_str(&d.to_string());\n    }\n    let mut t = String::new();\n\
    \    for c in ret.chars().rev() {\n        t.push(c);\n    }\n    t\n}\n\nfn main()\
    \ {\n    let candidate = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"\
    22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822502
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut ans = String::new();\n\
    \    let mut x = x;\n    while x > 0 {\n        ans.push((x % base + '0' as isize)\
    \ as u8 as char);\n        x /= base;\n    }\n    ans.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822502
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut x = x;\n    let\
    \ mut result = String::new();\n    while x > 0 {\n        let remainder = x %\
    \ base;\n        x /= base;\n        result.push_str(&remainder.to_string());\n\
    \    }\n    let result = result.chars().rev().collect::<String>();\n    if result.is_empty()\
    \ {\n        \"0\".to_string()\n    } else {\n        result\n    }\n}\n\nfn main()\
    \ {\n    let candidate = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"\
    22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822502
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    if x < base {\n        return\
    \ x.to_string();\n    }\n    change_base(x / base, base) + &((x % base).to_string())\n\
    }\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822498
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let symbols = \"0123456789abcdefghijklmnopqrstuvwxyz\"\
    ;\n    let symbol_list: Vec<char> = symbols.chars().collect();\n    let mut ret\
    \ = String::new();\n    let mut x = x;\n    while x > 0 {\n        let r = x %\
    \ base;\n        ret.push(symbol_list[r as usize]);\n        x /= base;\n    }\n\
    \    ret.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = change_base;\n\
    \    assert_eq!(candidate(8, 3), String::from(\"22\"));\n    assert_eq!(candidate(9,\
    \ 3), String::from(\"100\"));\n    assert_eq!(candidate(234, 2), String::from(\"\
    11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"10000\"));\n  \
    \  assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822502
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut c = ' ';\n    let\
    \ mut r = String::new();\n    let mut n = x;\n    while n > 0 {\n        c = char::from((n\
    \ % base) as u8 + ('0' as u8));\n        r.push(c);\n        n /= base;\n    }\n\
    \    let mut s = String::new();\n    for c in r.chars().rev() {\n        s.push(c);\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822502
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut x = x;\n    let\
    \ mut res = String::new();\n    while x != 0 {\n        let digit = (x % base)\
    \ as u8;\n        let c = match digit {\n            0 => '0',\n            1\
    \ => '1',\n            2 => '2',\n            3 => '3',\n            4 => '4',\n\
    \            5 => '5',\n            6 => '6',\n            7 => '7',\n       \
    \     8 => '8',\n            9 => '9',\n            _ => 'A',\n        };\n  \
    \      res.push(c);\n        x /= base;\n    }\n    res.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822502
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    if x == 0 {\n        return\
    \ \"0\".to_string();\n    }\n    let mut result = Vec::new();\n    let mut n =\
    \ x;\n    while n != 0 {\n        result.push((n % base).abs() as usize);\n  \
    \      n /= base;\n    }\n    if x < 0 {\n        result.push(base as usize);\n\
    \    }\n    result.reverse();\n    let mut result = result.iter().map(|x| (x +\
    \ b'0' as usize) as u8 as char).collect::<String>();\n    if x < 0 {\n       \
    \ result.insert(0, '-');\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"22\"));\n   \
    \ assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822502
- exit_code: 101
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut ret = String::new();\n\
    \    let mut n = x;\n    let mut modulo;\n    while n > 0 {\n        modulo =\
    \ n % base;\n        n = n / base;\n        ret.push_str(&modulo.to_string());\n\
    \    }\n    ret\n}\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"001\"`,\n right: `\"100\"`', /tmp/tmpz4zgfvte.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822502
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut x = x;\n    let\
    \ mut res = String::new();\n    let alphabet = '0' as isize..'9' as isize;\n \
    \   for i in alphabet {\n        res.push((i + (x % base)).into());\n        x\
    \ /= base;\n    }\n    res.chars().rev().collect()\n}\n\nfn main() {\n    let\
    \ candidate = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"22\"\
    ));\n    assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `char: From<isize>` is not satisfied\n -->\
    \ /tmp/tmpyso_r2s3.rs:9:35\n  |\n9 |         res.push((i + (x % base)).into());\n\
    \  |                                   ^^^^ the trait `From<isize>` is not implemented\
    \ for `char`\n  |\n  = help: the following implementations were found:\n     \
    \       <char as From<u8>>\n  = note: required because of the requirements on\
    \ the impl of `Into<char>` for `isize`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659822502
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut x = x;\n    let\
    \ mut s = String::new();\n    if x == 0 {\n        s.push('0');\n        return\
    \ s;\n    }\n    while x > 0 {\n        s.push((x % base + '0' as isize) as u8\
    \ as char);\n        x /= base;\n    }\n    s.chars().rev().collect()\n}\n\nfn\
    \ main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8, 3),\
    \ String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"\
    ));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16,\
    \ 2), String::from(\"10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"\
    1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"111\"));\n    assert_eq!(candidate(2,\
    \ 3), String::from(\"2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"\
    ));\n    assert_eq!(candidate(4, 5), String::from(\"4\"));\n    assert_eq!(candidate(5,\
    \ 6), String::from(\"5\"));\n    assert_eq!(candidate(6, 7), String::from(\"6\"\
    ));\n    assert_eq!(candidate(7, 8), String::from(\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822502
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut x = x;\n    while x > 0 {\n        s.push_str(&(x % base).to_string());\n\
    \        x /= base;\n    }\n    s.chars().rev().collect()\n}\n\nfn main() {\n\
    \    let candidate = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"\
    22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822502
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    // (x, remainder)\n    let\
    \ mut q = x;\n    let mut r = 0;\n    let mut ret = String::new();\n    while\
    \ q != 0 {\n        r = q % base;\n        q = q / base;\n        let ch = match\
    \ r {\n            0 => '0',\n            1 => '1',\n            2 => '2',\n \
    \           3 => '3',\n            4 => '4',\n            5 => '5',\n        \
    \    6 => '6',\n            7 => '7',\n            8 => '8',\n            9 =>\
    \ '9',\n            _ => panic!(\"Base number should be < 10.\"),\n        };\n\
    \        ret.push(ch);\n    }\n    ret.chars().rev().collect()\n}\n\nfn main()\
    \ {\n    let candidate = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"\
    22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822502
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut m = x;\n    let\
    \ mut res = String::new();\n    let b = ['0', '1', '2', '3', '4', '5', '6', '7',\
    \ '8', '9'];\n    while m != 0 {\n        res.push(b[(m % base) as usize]);\n\
    \        m /= base;\n    }\n    res.chars().rev().collect()\n}\n\nfn main() {\n\
    \    let candidate = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"\
    22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822502
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let symbols = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ;\n    if x < base {\n        return String::from(&symbols[(x as usize)..(x as\
    \ usize + 1)]);\n    } else {\n        return format!(\"{}{}\", change_base(x\
    \ / base, base), &symbols[(x % base) as usize..(x % base + 1) as usize]);\n  \
    \  }\n}\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822502
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\nfn\
    \ change_base(x: isize, base: isize) -> String {\n    let mut num = String::new();\n\
    \    let mut x = x;\n    while x > 0 {\n        num.push_str(&((x % base) as u8\
    \ + 48) as &str);\n        x /= base;\n    }\n    if num.len() == 0 {\n      \
    \  num.push('0');\n    }\n    let mut v: Vec<char> = num.chars().collect();\n\
    \    v.reverse();\n    v.into_iter().collect()\n}\n\nfn main() {\n    let candidate\
    \ = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"22\"));\n   \
    \ assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0605]: non-primitive cast: `&u8` as `&str`\n --> /tmp/tmprbpcd1mc.rs:8:22\n\
    \  |\n8 |         num.push_str(&((x % base) as u8 + 48) as &str);\n  |       \
    \               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ an `as` expression can only be\
    \ used to convert between primitive types or to coerce to a specific trait object\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0605`.\n"
  stdout: ''
  timestamp: 1659822502
