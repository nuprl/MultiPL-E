language: rs
name: HumanEval_65_circular_shift
results:
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let s = x.to_string();\n    let len = s.len() as isize;\n    let mut\
    \ shifted = s;\n    if shift < len {\n        let start = len - shift;\n     \
    \   let end = len;\n        shifted = format!(\"{}{}\", &s[start as usize..end\
    \ as usize], &s[0..start as usize]);\n    } else {\n        shifted = shifted.chars().rev().collect();\n\
    \    }\n    shifted\n}\n\nfn main() {\n    let candidate = circular_shift;\n \
    \   assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `s`\n  --> /tmp/tmpqrolzyfl.rs:11:36\n\
    \   |\n5  |     let s = x.to_string();\n   |         - move occurs because `s`\
    \ has type `String`, which does not implement the `Copy` trait\n6  |     let len\
    \ = s.len() as isize;\n7  |     let mut shifted = s;\n   |                   \
    \    - value moved here\n...\n11 |         shifted = format!(\"{}{}\", &s[start\
    \ as usize..end as usize], &s[0..start as usize]);\n   |                     \
    \               ^ value borrowed here after move\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659822859
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x.to_string();\n    let length = x.len();\n    let shift\
    \ = shift % length;\n    let mut buff = String::new();\n    buff.push_str(&x[shift..]);\n\
    \    buff.push_str(&x[..shift]);\n    buff\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmptt7h3me1.rs:7:25\n  |\n7 |\
    \     let shift = shift % length;\n  |                         ^^^^^^ expected\
    \ `isize`, found `usize`\n\nerror[E0277]: cannot mod `isize` by `usize`\n -->\
    \ /tmp/tmptt7h3me1.rs:7:23\n  |\n7 |     let shift = shift % length;\n  |    \
    \                   ^ no implementation for `isize % usize`\n  |\n  = help: the\
    \ trait `Rem<usize>` is not implemented for `isize`\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `RangeFrom<isize>`\n --> /tmp/tmptt7h3me1.rs:9:20\n\
    \  |\n9 |     buff.push_str(&x[shift..]);\n  |                    ^^^^^^^^^^ `String`\
    \ cannot be indexed by `RangeFrom<isize>`\n  |\n  = help: the trait `Index<RangeFrom<isize>>`\
    \ is not implemented for `String`\n\nerror[E0277]: the type `String` cannot be\
    \ indexed by `RangeTo<isize>`\n  --> /tmp/tmptt7h3me1.rs:10:20\n   |\n10 |   \
    \  buff.push_str(&x[..shift]);\n   |                    ^^^^^^^^^^ `String` cannot\
    \ be indexed by `RangeTo<isize>`\n   |\n   = help: the trait `Index<RangeTo<isize>>`\
    \ is not implemented for `String`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659822859
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut result = x.to_string();\n    let n = result.len();\n    for _\
    \ in 0..shift {\n        result.insert(0, result.pop().unwrap());\n    }\n   \
    \ result\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `n`\n --> /tmp/tmp9vj6vl2z.rs:6:9\n  |\n6 | \
    \    let n = result.len();\n  |         ^ help: if this is intentional, prefix\
    \ it with an underscore: `_n`\n  |\n  = note: `#[warn(unused_variables)]` on by\
    \ default\n\nerror[E0499]: cannot borrow `result` as mutable more than once at\
    \ a time\n --> /tmp/tmp9vj6vl2z.rs:8:26\n  |\n8 |         result.insert(0, result.pop().unwrap());\n\
    \  |         ------ ------    ^^^^^^ second mutable borrow occurs here\n  |  \
    \       |      |\n  |         |      first borrow later used by call\n  |    \
    \     first mutable borrow occurs here\n\nerror: aborting due to previous error;\
    \ 1 warning emitted\n\nFor more information about this error, try `rustc --explain\
    \ E0499`.\n"
  stdout: ''
  timestamp: 1659822859
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut result = x.to_string();\n    let len = result.len();\n    if\
    \ shift >= len as isize {\n        result.chars().rev().collect()\n    } else\
    \ {\n        let (first, second) = result.split_at(len - shift as usize);\n  \
    \      let (first, second) = (first.to_string(), second.to_string());\n      \
    \  format!(\"{}{}\", second, first)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"21\"`,\n right: `\"12\"`', /tmp/tmp1o6yswln.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822860
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = Vec::new();\n    let mut x = x;\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    digits.reverse();\n\
    \    let mut result = Vec::new();\n    let len = digits.len();\n    for i in 0..len\
    \ {\n        result.push(digits[(i + shift as usize) % len]);\n    }\n    result.iter().map(|x|\
    \ char::from_digit(*x as u32, 10).unwrap()).collect()\n}\n\nfn main() {\n    let\
    \ candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"010\"`,\n right: `\"001\"`', /tmp/tmpa4o5q1az.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822860
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = string_of_digits(x);\n    let n = digits.len();\n  \
    \  if shift >= n {\n        digits.reverse();\n        return digits;\n    }\n\
    \n    digits.rotate_right(shift as usize);\n    digits\n}\n\nfn main() {\n   \
    \ let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `string_of_digits` in this scope\n -->\
    \ /tmp/tmpj8hltm9e.rs:5:22\n  |\n5 |     let mut digits = string_of_digits(x);\n\
    \  |                      ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659822859
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let s = x.to_string();\n    let mut v = Vec::new();\n    let mut i =\
    \ 0;\n    let chars = s.chars().collect::<Vec<char>>();\n    for j in 0..s.len()\
    \ {\n        v.push(chars[(i + shift) % s.len()]);\n        i += 1;\n    }\n \
    \   v.iter().collect()\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqnco24gs.rs:10:36\n   |\n\
    10 |         v.push(chars[(i + shift) % s.len()]);\n   |                     \
    \               ^^^^^^^ expected `isize`, found `usize`\n\nerror[E0277]: cannot\
    \ mod `isize` by `usize`\n  --> /tmp/tmpqnco24gs.rs:10:34\n   |\n10 |        \
    \ v.push(chars[(i + shift) % s.len()]);\n   |                                \
    \  ^ no implementation for `isize % usize`\n   |\n   = help: the trait `Rem<usize>`\
    \ is not implemented for `isize`\n\nerror[E0277]: the type `[char]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpqnco24gs.rs:10:16\n   |\n10 |         v.push(chars[(i\
    \ + shift) % s.len()]);\n   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[char]>` is not implemented for `isize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<char>`\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659822859
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let digits = get_digits(x);\n    let shift = shift % digits.len() as\
    \ isize;\n    let mut shifted = digits.clone();\n    shifted.rotate_right(shift\
    \ as usize);\n    shifted.iter().map(|n| n.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `get_digits` in this scope\n --> /tmp/tmpvhs8vjz0.rs:5:18\n\
    \  |\n5 |     let digits = get_digits(x);\n  |                  ^^^^^^^^^^ not\
    \ found in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822859
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut s = String::new();\n    let mut n = 0;\n\
    \    while x > 0 {\n        x /= 10;\n        n += 1;\n    }\n    for _ in 0..shift\
    \ {\n        s.push(((x % 10) + '0' as isize) as u8 as char);\n        x /= 10;\n\
    \    }\n    for _ in 0..n - shift {\n        s.push(((x % 10) + '0' as isize)\
    \ as u8 as char);\n        x /= 10;\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"000\"`,\n right: `\"001\"`', /tmp/tmp5hbokv26.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822860
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let x_str = x.to_string();\n    let x_len = x_str.len() as isize;\n \
    \   let shift = shift % x_len;\n    if shift > 0 {\n        let a = &x_str[shift\
    \ as usize..];\n        let b = &x_str[..shift as usize];\n        format!(\"\
    {}{}\", a, b)\n    } else {\n        x_str.chars().rev().collect()\n    }\n}\n\
    \nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"010\"`,\n right: `\"001\"`', /tmp/tmpqhmz8lab.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822860
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let string = x.to_string();\n    let len = string.len();\n    let reversed\
    \ = String::from(string.chars().rev().collect::<String>());\n    if shift > len\
    \ as isize {\n        return reversed;\n    }\n    let (left, right) = reversed.split_at(shift\
    \ as usize);\n    format!(\"{}{}\", right, left)\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"100\"`,\n right: `\"001\"`', /tmp/tmp_o3gdf7t.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822860
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let x_s = x.to_string();\n    let len = x_s.len() as isize;\n    let\
    \ x_shift = if shift < len {\n        let (x_left, x_right) = x_s.split_at(shift\
    \ as usize);\n        let x_right_reversed: String = x_right.chars().rev().collect();\n\
    \        format!(\"{}{}\", x_right_reversed, x_left)\n    } else {\n        x_s.chars().rev().collect()\n\
    \    };\n    x_shift\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"010\"`,\n right: `\"001\"`', /tmp/tmpfbdygep2.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822859
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = format!(\"{}\", x);\n    let l = s.len();\n    if shift >=\
    \ l as isize {\n        s.chars().rev().collect()\n    } else {\n        let (left,\
    \ right) = s.split_at(l - shift as usize);\n        right.to_string() + left\n\
    \    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"21\"`,\n right: `\"12\"`', /tmp/tmp5lvr_jva.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822860
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = vec![];\n    let mut x = x;\n    while x > 0 {\n   \
    \     digits.push(x % 10);\n        x /= 10;\n    }\n    let n = digits.len();\n\
    \    let mut ret = String::new();\n    for i in 0..n {\n        ret.push_str(&format!(\"\
    {}\", digits[(n - i + shift) % n]));\n    }\n    ret\n}\n\nfn main() {\n    let\
    \ candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnru6b2f3.rs:14:53\n   |\n\
    14 |         ret.push_str(&format!(\"{}\", digits[(n - i + shift) % n]));\n  \
    \ |                                                     ^^^^^ expected `usize`,\
    \ found `isize`\n\nerror[E0277]: cannot add `isize` to `usize`\n  --> /tmp/tmpnru6b2f3.rs:14:51\n\
    \   |\n14 |         ret.push_str(&format!(\"{}\", digits[(n - i + shift) % n]));\n\
    \   |                                                   ^ no implementation for\
    \ `usize + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `usize`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659822859
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = x.to_string();\n    let len = s.len();\n    if shift > len\
    \ as isize {\n        s.chars().rev().collect()\n    } else {\n        let head\
    \ = &s[0..(shift as usize)];\n        let tail = &s[(shift as usize)..];\n   \
    \     tail.to_string() + head\n    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"010\"`,\n right: `\"001\"`', /tmp/tmpv91c1q1e.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822860
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let num_digits = (x as f64).log10().floor() as isize + 1;\n    let mut\
    \ digits = Vec::with_capacity(num_digits as usize);\n    let mut remaining = x;\n\
    \    for _ in 0..num_digits {\n        digits.push(remaining % 10);\n        remaining\
    \ /= 10;\n    }\n    digits.reverse();\n    digits.rotate_right(shift as usize);\n\
    \    let mut result = String::new();\n    for digit in digits {\n        result.push_str(&digit.to_string());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = circular_shift;\n  \
    \  assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''assertion failed: k <= self.len()'', /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/core/src/slice/mod.rs:2864:9

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822860
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let digs = x.to_string();\n    let len = digs.len() as isize;\n    digs\n\
    \        .chars()\n        .cycle()\n        .skip(shift % len)\n        .take(len\
    \ as usize)\n        .collect()\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_vmgek40.rs:10:15\n   |\n\
    10 |         .skip(shift % len)\n   |               ^^^^^^^^^^^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n10 |         .skip((shift % len).try_into().unwrap())\n\
    \   |               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659822859
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let digits = x.to_string();\n    let digits_len = digits.len();\n   \
    \ let shift = shift % digits_len;\n    let mut out = String::with_capacity(digits_len);\n\
    \    for i in 0..digits_len {\n        let index = (i + shift) % digits_len;\n\
    \        out.push(digits.chars().nth(index).unwrap());\n    }\n    out\n}\n\n\
    fn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmphamays7f.rs:7:25\n  |\n7 |\
    \     let shift = shift % digits_len;\n  |                         ^^^^^^^^^^\
    \ expected `isize`, found `usize`\n\nerror[E0277]: cannot mod `isize` by `usize`\n\
    \ --> /tmp/tmphamays7f.rs:7:23\n  |\n7 |     let shift = shift % digits_len;\n\
    \  |                       ^ no implementation for `isize % usize`\n  |\n  = help:\
    \ the trait `Rem<usize>` is not implemented for `isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmphamays7f.rs:10:26\n   |\n10 |         let index = (i +\
    \ shift) % digits_len;\n   |                          ^^^^^ expected `usize`,\
    \ found `isize`\n\nerror[E0277]: cannot add `isize` to `usize`\n  --> /tmp/tmphamays7f.rs:10:24\n\
    \   |\n10 |         let index = (i + shift) % digits_len;\n   |              \
    \          ^ no implementation for `usize + isize`\n   |\n   = help: the trait\
    \ `Add<isize>` is not implemented for `usize`\n\nerror: aborting due to 4 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659822859
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let digits = x.to_string();\n    let digits = digits.chars().collect::<Vec<char>>();\n\
    \    let digits_len = digits.len();\n    let mut ret_str = String::new();\n  \
    \  for i in 0..digits_len {\n        ret_str.push(digits[(i + shift as usize)\
    \ % digits_len]);\n    }\n    return ret_str;\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"010\"`,\n right: `\"001\"`', /tmp/tmpi0icqwlx.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822860
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let shift = shift % x.to_string().len() as isize;\n    if shift == 0\
    \ {\n        return x.to_string();\n    }\n    x.to_string()\n        .chars()\n\
    \        .rev()\n        .collect::<String>()\n        .chars()\n        .skip(shift\
    \ as usize)\n        .chain(x.to_string().chars().rev().take(shift as usize))\n\
    \        .collect::<String>()\n        .chars()\n        .rev()\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"97\"`,\n right: `\"79\"`', /tmp/tmpnt2un8j9.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822860
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut a = x.to_string();\n    let size = a.len();\n    a.push_str(&a[..shift\
    \ as usize]);\n    a.remove(0..shift as usize);\n    if shift >= size as isize\
    \ {\n        a.chars().rev().collect()\n    } else {\n        a\n    }\n}\n\n\
    fn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp8xnwmz1v.rs:8:14\n  |\n8 |\
    \     a.remove(0..shift as usize);\n  |              ^^^^^^^^^^^^^^^^^ expected\
    \ `usize`, found struct `std::ops::Range`\n  |\n  = note: expected type `usize`\n\
    \           found struct `std::ops::Range<usize>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822859
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let digits = get_digits(x);\n    let mut shifted_digits = Vec::new();\n\
    \    if shift > digits.len() as isize {\n        shifted_digits.extend(digits.iter().rev());\n\
    \    } else {\n        let size = digits.len();\n        shifted_digits.extend(digits[(size\
    \ - shift as usize)..].iter());\n        shifted_digits.extend(digits[..(size\
    \ - shift as usize)].iter());\n    }\n    shifted_digits.iter().fold(String::new(),\
    \ |acc, &x| {\n        acc + &format!(\"{}\", x)\n    })\n}\n\nfn main() {\n \
    \   let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `get_digits` in this scope\n --> /tmp/tmpa0vlzphh.rs:5:18\n\
    \  |\n5 |     let digits = get_digits(x);\n  |                  ^^^^^^^^^^ not\
    \ found in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822859
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    if shift == 0 {\n        return x.to_string();\n    }\n    let mut x\
    \ = x;\n    let mut s = String::new();\n    for _ in 0..shift {\n        let d\
    \ = x % 10;\n        x = x / 10;\n        s.push_str(&d.to_string());\n    }\n\
    \    if x > 0 {\n        s.push_str(&x.to_string());\n    }\n    s\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"21\"`,\n right: `\"12\"`', /tmp/tmpu56f9_8x.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822860
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let digits = x.to_string();\n    let rev_digits = digits.chars().rev().collect::<String>();\n\
    \    let n = digits.len() as isize;\n    let mut result = String::new();\n   \
    \ if shift >= n {\n        result.push_str(&rev_digits);\n    } else {\n     \
    \   result.push_str(&digits[(shift as usize)..]);\n        result.push_str(&digits[..(shift\
    \ as usize)]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"010\"`,\n right: `\"001\"`', /tmp/tmprmx5ly1u.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822860
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let string = format!(\"{}\", x);\n    let length = string.len();\n  \
    \  let mut result = String::with_capacity(length);\n    let mut index = shift\
    \ as usize;\n    while index < length {\n        result.push(string.chars().nth(index).unwrap());\n\
    \        index += 1;\n    }\n    while index < length * 2 {\n        result.push(string.chars().nth(index\
    \ - length).unwrap());\n        index += 1;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0100\"`,\n right: `\"001\"`', /tmp/tmpq4hzrwbc.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822860
- exit_code: 0
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = x.to_string();\n    let len = s.len();\n    if shift > len\
    \ as isize {\n        s.chars().rev().collect()\n    } else {\n        let shift\
    \ = shift as usize;\n        let (a, b) = s.split_at(len - shift);\n        b.to_string()\
    \ + a\n    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822860
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x_str = x.to_string();\n    let mut x_bytes = x_str.clone().into_bytes();\n\
    \    let (mut min, mut max) = (0, x_bytes.len() - 1);\n    for _ in 0..shift {\n\
    \        let temp = x_bytes[min];\n        x_bytes[min] = x_bytes[max];\n    \
    \    x_bytes[max] = temp;\n        min += 1;\n        max -= 1;\n    }\n    String::from_utf8(x_bytes).unwrap()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmph6hxw9qg.rs:13:9

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822860
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    if shift > x.to_string().len() as isize {\n        return x.to_string().chars().rev().collect();\n\
    \    }\n\n    let mut result = x.to_string();\n    result.rotate_right(shift as\
    \ usize);\n    result\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `rotate_right` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmp90_zis67.rs:10:12\n   |\n10 |     result.rotate_right(shift\
    \ as usize);\n   |            ^^^^^^^^^^^^ method not found in `String`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659822859
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = vec![];\n    let mut x = x;\n    while x > 0 {\n   \
    \     digits.push(x % 10);\n        x /= 10;\n    }\n    let mut digits = digits.into_iter().rev().collect::<Vec<_>>();\n\
    \    let mut result = vec![];\n    for _ in 0..shift {\n        if digits.is_empty()\
    \ {\n            result.reverse();\n            return result.into_iter().map(|d|\
    \ d.to_string()).collect();\n        }\n        result.push(digits.pop().unwrap());\n\
    \    }\n    result.append(&mut digits);\n    result.into_iter().map(|d| d.to_string()).collect()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmpnu8oe8dh.rs:16:44\n\
    \   |\n16 |             return result.into_iter().map(|d| d.to_string()).collect();\n\
    \   |                                            ^ consider giving this closure\
    \ parameter a type\n   |\n   = note: type must be known at this point\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659822859
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string();\n    let mut n = shift;\n    while n\
    \ > 0 {\n        let last = digits.pop().unwrap();\n        digits.insert(0, last);\n\
    \        n -= 1;\n    }\n    digits\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"97\"`,\n right: `\"79\"`', /tmp/tmppb4vmr1t.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822860
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x.to_string();\n    let length = x.len();\n    for _ in 0..shift\
    \ {\n        let c = x.remove(0);\n        x.push(c);\n    }\n    x\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"010\"`,\n right: `\"001\"`', /tmp/tmp51cbvau4.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822860
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let digits = x.to_string();\n    let length = digits.len();\n    if shift\
    \ >= length as isize {\n        return digits.chars().rev().collect();\n    }\n\
    \    let left = &digits[..shift as usize];\n    let right = &digits[shift as usize..];\n\
    \    [right, left].concat()\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"010\"`,\n right: `\"001\"`', /tmp/tmps1rgng4x.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822860
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let x = x.to_string();\n    let len = x.len();\n    let shift = shift\
    \ % len;\n    let (a, b) = x.split_at(len - shift as usize);\n    let mut res\
    \ = b.to_string();\n    res.push_str(a);\n    res\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpxlkh3rci.rs:7:25\n  |\n7 |\
    \     let shift = shift % len;\n  |                         ^^^ expected `isize`,\
    \ found `usize`\n\nerror[E0277]: cannot mod `isize` by `usize`\n --> /tmp/tmpxlkh3rci.rs:7:23\n\
    \  |\n7 |     let shift = shift % len;\n  |                       ^ no implementation\
    \ for `isize % usize`\n  |\n  = help: the trait `Rem<usize>` is not implemented\
    \ for `isize`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659822860
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x_str = x.to_string();\n    if shift > x_str.len() as isize {\n\
    \        x_str.chars().rev().collect()\n    } else {\n        let mut result =\
    \ String::new();\n        let total_len = x_str.len();\n        let mid = total_len\
    \ / 2;\n        let right_half = &x_str[mid..];\n        let left_half = &x_str[..mid];\n\
    \        result.push_str(right_half);\n        result.push_str(left_half);\n \
    \       result\n    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"21\"`,\n right: `\"12\"`', /tmp/tmp42956w76.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822860
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    // let (sign, digits) = extract_digits(x);\n    let digits = extract_digits(x);\n\
    \    // println!(\"{:?}\", digits);\n    let mut shifted_digits = Vec::new();\n\
    \    for i in 0..digits.len() {\n        let j = (i + shift as usize) % digits.len();\n\
    \        shifted_digits.push(digits[j]);\n    }\n    // println!(\"{:?}\", shifted_digits);\n\
    \    shifted_digits.iter().fold(String::new(), |mut s, d| {\n        s.push_str(&d.to_string());\n\
    \        s\n    })\n}\n\nfn main() {\n    let candidate = circular_shift;\n  \
    \  assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `extract_digits` in this scope\n -->\
    \ /tmp/tmpf0zvf851.rs:6:18\n  |\n6 |     let digits = extract_digits(x);\n  |\
    \                  ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659822860
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string();\n    for _ in 0..shift {\n        if\
    \ let Some(digit) = digits.pop() {\n            digits.insert(0, digit);\n   \
    \     }\n    }\n    digits\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"97\"`,\n right: `\"79\"`', /tmp/tmp5hjoywgr.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822860
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut shifted_x = x;\n    if shift > 0 {\n        for _ in 0..shift\
    \ {\n            shifted_x = circular_shift_right(shifted_x);\n        }\n   \
    \ } else {\n        for _ in 0..-shift {\n            shifted_x = circular_shift_left(shifted_x);\n\
    \        }\n    }\n    shifted_x.to_string()\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `circular_shift_right` in this scope\n\
    \ --> /tmp/tmpwd2r62n_.rs:8:25\n  |\n8 |             shifted_x = circular_shift_right(shifted_x);\n\
    \  |                         ^^^^^^^^^^^^^^^^^^^^ not found in this scope\n\n\
    error[E0425]: cannot find function `circular_shift_left` in this scope\n  -->\
    \ /tmp/tmpwd2r62n_.rs:12:25\n   |\n12 |             shifted_x = circular_shift_left(shifted_x);\n\
    \   |                         ^^^^^^^^^^^^^^^^^^^ not found in this scope\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822860
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string();\n    let n = digits.len();\n    if shift\
    \ > n {\n        digits.chars().rev().collect()\n    } else {\n        let mut\
    \ s = digits.split_off(shift as usize);\n        s.push_str(&digits);\n      \
    \  s\n    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpqf8th9x2.rs:7:16\n  |\n7 |\
    \     if shift > n {\n  |                ^ expected `isize`, found `usize`\n \
    \ |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n  |\n7 |     if shift > n.try_into().unwrap() {\n  |    \
    \            ~~~~~~~~~~~~~~~~~~~~~\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822860
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut shifted = x.to_string();\n    shifted.push_str(&shifted);\n \
    \   shifted.truncate(10);\n    let len = shifted.len();\n    shifted.truncate(len\
    \ - shift as usize);\n    shifted\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0502]: cannot borrow `shifted` as mutable because it is also borrowed\
    \ as immutable\n --> /tmp/tmp2zxycevu.rs:6:5\n  |\n6 |     shifted.push_str(&shifted);\n\
    \  |     ^^^^^^^^--------^--------^\n  |     |       |        |\n  |     |   \
    \    |        immutable borrow occurs here\n  |     |       immutable borrow later\
    \ used by call\n  |     mutable borrow occurs here\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1659822860
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut s = String::new();\n    for _ in 0..shift\
    \ {\n        s.push(((x % 10) + 48) as char);\n        x /= 10;\n    }\n    if\
    \ x > 0 {\n        x = x.to_string()\n            .chars()\n            .rev()\n\
    \            .collect::<String>()\n            .parse::<isize>()\n           \
    \ .unwrap();\n        for _ in 0..shift {\n            s.push(((x % 10) + 48)\
    \ as char);\n            x /= 10;\n        }\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0604]: only `u8` can be cast as `char`, not `isize`\n --> /tmp/tmp0s_fvxsk.rs:8:16\n\
    \  |\n8 |         s.push(((x % 10) + 48) as char);\n  |                ^^^^^^^^^^^^^^^^^^^^^^^\
    \ invalid cast\n\nerror[E0604]: only `u8` can be cast as `char`, not `isize`\n\
    \  --> /tmp/tmp0s_fvxsk.rs:19:20\n   |\n19 |             s.push(((x % 10) + 48)\
    \ as char);\n   |                    ^^^^^^^^^^^^^^^^^^^^^^^ invalid cast\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0604`.\n"
  stdout: ''
  timestamp: 1659822860
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    if shift == 0 {\n        x.to_string()\n    } else {\n        let chars\
    \ = x.to_string().chars().collect::<Vec<char>>();\n        if shift > chars.len()\
    \ as isize {\n            chars.iter().rev().collect::<String>()\n        } else\
    \ {\n            let left = chars[shift as usize..].iter().collect::<String>();\n\
    \            let right = chars[..shift as usize].iter().collect::<String>();\n\
    \            format!(\"{}{}\", left, right)\n        }\n    }\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"010\"`,\n right: `\"001\"`', /tmp/tmp5q_l5l7q.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822860
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let s = format!(\"{}\", x);\n    let n = s.len();\n    let shift = shift\
    \ % n;\n    let mut c = s.chars().collect::<Vec<char>>();\n    if shift > 0 {\n\
    \        let (a, b) = c.split_at_mut(n - shift as usize);\n        a.reverse();\n\
    \        b.reverse();\n        c.reverse();\n    }\n    let y = c.into_iter().collect::<String>();\n\
    \    y\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpriisdt6t.rs:7:25\n  |\n7 |\
    \     let shift = shift % n;\n  |                         ^ expected `isize`,\
    \ found `usize`\n\nerror[E0277]: cannot mod `isize` by `usize`\n --> /tmp/tmpriisdt6t.rs:7:23\n\
    \  |\n7 |     let shift = shift % n;\n  |                       ^ no implementation\
    \ for `isize % usize`\n  |\n  = help: the trait `Rem<usize>` is not implemented\
    \ for `isize`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659822860
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut shifted = x.to_string();\n    shifted.extend(shifted.chars().take(shift\
    \ as usize));\n    shifted.drain(0..shift as usize);\n    shifted\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0502]: cannot borrow `shifted` as mutable because it is also borrowed\
    \ as immutable\n --> /tmp/tmpzbuxenr6.rs:6:5\n  |\n6 |     shifted.extend(shifted.chars().take(shift\
    \ as usize));\n  |     ^^^^^^^^------^-------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |     |       |      |\n  |     |       |      immutable borrow occurs here\n\
    \  |     |       immutable borrow later used by call\n  |     mutable borrow occurs\
    \ here\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1659822860
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut s = String::new();\n    for _ in 0..shift\
    \ {\n        let digit = x % 10;\n        x /= 10;\n        s.push_str(&digit.to_string());\n\
    \    }\n    x.to_string() + &s\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"100\"`,\n right: `\"001\"`', /tmp/tmpdqmltrve.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822860
- exit_code: 0
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let s = x.to_string();\n    let l = s.len();\n    if shift > l as isize\
    \ {\n        s.chars().rev().collect()\n    } else {\n        let (l, r) = s.split_at(l\
    \ - shift as usize);\n        format!(\"{}{}\", r, l)\n    }\n}\n\nfn main() {\n\
    \    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822860
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let digits = x.to_string();\n    let len = digits.len();\n    let mut\
    \ res = digits.to_string();\n    for i in 0..shift {\n        let c = res.chars().nth(0).unwrap();\n\
    \        res.remove(0);\n        res.push(c);\n    }\n    //if shift > len {\n\
    \    //    res.chars().rev().collect::<String>()\n    //} else {\n    //    res\n\
    \    //}\n    res\n}\n\nfn main() {\n    let candidate = circular_shift;\n   \
    \ assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"010\"`,\n right: `\"001\"`', /tmp/tmpj0dfqwbr.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822860
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let num_digits = x.to_string().len() as isize;\n    let mut x_rev = reverse_digits(x);\n\
    \    if shift > num_digits {\n        return x_rev.to_string();\n    }\n    let\
    \ (a, b) = (x_rev % 10isize.pow(shift), x_rev / 10isize.pow(shift));\n    let\
    \ b_rev = reverse_digits(b);\n    (b_rev * 10isize.pow(num_digits - shift) + a).to_string()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `reverse_digits` in this scope\n -->\
    \ /tmp/tmpp293mo4s.rs:6:21\n  |\n6 |     let mut x_rev = reverse_digits(x);\n\
    \  |                     ^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `reverse_digits` in this scope\n  --> /tmp/tmpp293mo4s.rs:11:17\n\
    \   |\n11 |     let b_rev = reverse_digits(b);\n   |                 ^^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpp293mo4s.rs:10:39\n\
    \   |\n10 |     let (a, b) = (x_rev % 10isize.pow(shift), x_rev / 10isize.pow(shift));\n\
    \   |                                       ^^^^^ expected `u32`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to a `u32` and panic if the converted\
    \ value doesn't fit\n   |\n10 |     let (a, b) = (x_rev % 10isize.pow(shift.try_into().unwrap()),\
    \ x_rev / 10isize.pow(shift));\n   |                                       ~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpp293mo4s.rs:10:67\n   |\n10 |\
    \     let (a, b) = (x_rev % 10isize.pow(shift), x_rev / 10isize.pow(shift));\n\
    \   |                                                                   ^^^^^\
    \ expected `u32`, found `isize`\n   |\nhelp: you can convert an `isize` to a `u32`\
    \ and panic if the converted value doesn't fit\n   |\n10 |     let (a, b) = (x_rev\
    \ % 10isize.pow(shift), x_rev / 10isize.pow(shift.try_into().unwrap()));\n   |\
    \                                                                   ~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpp293mo4s.rs:12:26\n   |\n12 |\
    \     (b_rev * 10isize.pow(num_digits - shift) + a).to_string()\n   |        \
    \                  ^^^^^^^^^^^^^^^^^^ expected `u32`, found `isize`\n   |\nhelp:\
    \ you can convert an `isize` to a `u32` and panic if the converted value doesn't\
    \ fit\n   |\n12 |     (b_rev * 10isize.pow((num_digits - shift).try_into().unwrap())\
    \ + a).to_string()\n   |                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0425.\nFor more informatio"
  stdout: ''
  timestamp: 1659822860
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let x = x.to_string();\n    let digits = x.len();\n    let n = digits\
    \ - (shift % digits);\n    let mut shifted = x[n..].to_string();\n    shifted.push_str(&x[..n]);\n\
    \    shifted\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpzd3q5u23.rs:7:31\n  |\n7 |\
    \     let n = digits - (shift % digits);\n  |                               ^^^^^^\
    \ expected `isize`, found `usize`\n\nerror[E0277]: cannot mod `isize` by `usize`\n\
    \ --> /tmp/tmpzd3q5u23.rs:7:29\n  |\n7 |     let n = digits - (shift % digits);\n\
    \  |                             ^ no implementation for `isize % usize`\n  |\n\
    \  = help: the trait `Rem<usize>` is not implemented for `isize`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpzd3q5u23.rs:7:22\n  |\n7 |     let n = digits\
    \ - (shift % digits);\n  |                      ^^^^^^^^^^^^^^^^ expected `usize`,\
    \ found `isize`\n\nerror[E0277]: cannot subtract `isize` from `usize`\n --> /tmp/tmpzd3q5u23.rs:7:20\n\
    \  |\n7 |     let n = digits - (shift % digits);\n  |                    ^ no\
    \ implementation for `usize - isize`\n  |\n  = help: the trait `Sub<isize>` is\
    \ not implemented for `usize`\n\nerror: aborting due to 4 previous errors\n\n\
    Some errors have detailed explanations: E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659822860
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    // get number of digits in x\n    let digits = (x as f64).log10().ceil()\
    \ as isize;\n    // if shift > digits, reverse the digits\n    if shift > digits\
    \ {\n        let mut y = x;\n        let mut result = String::new();\n       \
    \ while y > 0 {\n            result.push(((y % 10) + '0' as isize) as u8 as char);\n\
    \            y /= 10;\n        }\n        return result;\n    }\n    // get the\
    \ amount to shift left\n    let left_shift = (digits - shift) % digits;\n    //\
    \ shift the number x left and then right\n    let mut shifted = ((x * 10isize.pow(left_shift))\
    \ / 10isize.pow(digits - left_shift))\n        .to_string();\n    // add zeros\
    \ to the left if necessary\n    while shifted.len() < digits as usize {\n    \
    \    shifted.insert(0, '0');\n    }\n    shifted\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5hqpoupz.rs:20:41\n   |\n\
    20 |     let mut shifted = ((x * 10isize.pow(left_shift)) / 10isize.pow(digits\
    \ - left_shift))\n   |                                         ^^^^^^^^^^ expected\
    \ `u32`, found `isize`\n   |\nhelp: you can convert an `isize` to a `u32` and\
    \ panic if the converted value doesn't fit\n   |\n20 |     let mut shifted = ((x\
    \ * 10isize.pow(left_shift.try_into().unwrap())) / 10isize.pow(digits - left_shift))\n\
    \   |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp5hqpoupz.rs:20:68\n   |\n20 |\
    \     let mut shifted = ((x * 10isize.pow(left_shift)) / 10isize.pow(digits -\
    \ left_shift))\n   |                                                         \
    \           ^^^^^^^^^^^^^^^^^^^ expected `u32`, found `isize`\n   |\nhelp: you\
    \ can convert an `isize` to a `u32` and panic if the converted value doesn't fit\n\
    \   |\n20 |     let mut shifted = ((x * 10isize.pow(left_shift)) / 10isize.pow((digits\
    \ - left_shift).try_into().unwrap()))\n   |                                  \
    \                                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822860
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let string_form = x.to_string();\n    let string_len = string_form.len()\
    \ as isize;\n    let shifted_index = shift % string_len;\n    if shifted_index\
    \ == 0 {\n        string_form\n    } else {\n        let left = &string_form[shifted_index\
    \ as usize..];\n        let right = &string_form[..shifted_index as usize];\n\
    \        [left, right].concat()\n    }\n}\n\nfn main() {\n    let candidate =\
    \ circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"010\"`,\n right: `\"001\"`', /tmp/tmpe7sgp5xq.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822860
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let s = x.to_string();\n    let len = s.len() as isize;\n    let mut\
    \ rotated = s.chars().cycle().skip(shift % len as isize);\n    rotated.take(len\
    \ as usize).collect()\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpo9ho8w2t.rs:7:46\n  |\n7 |\
    \     let mut rotated = s.chars().cycle().skip(shift % len as isize);\n  |   \
    \                                           ^^^^^^^^^^^^^^^^^^^^ expected `usize`,\
    \ found `isize`\n  |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n  |\n7 |     let mut rotated = s.chars().cycle().skip((shift\
    \ % len as isize).try_into().unwrap());\n  |                                 \
    \             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659822860
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let str = format!(\"{}\", x);\n    let len = str.len();\n    let (left,\
    \ right) = str.split_at(len - (shift as usize));\n    let mut res = format!(\"\
    {}{}\", right, left);\n    res.retain(|c| c != '0');\n    res\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1\"`,\n right: `\"001\"`', /tmp/tmpqxm3r4md.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822860
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    // shift the digits right by shift and return the result as a string\n\
    \    if shift == 0 {\n        format!(\"{}\", x)\n    } else {\n        let digits:\
    \ Vec<char> = format!(\"{}\", x).chars().collect();\n        let rot = if shift\
    \ > digits.len() as isize {\n            shift % digits.len() as isize\n     \
    \   } else {\n            shift\n        };\n        let mut res = vec![];\n \
    \       for i in rot..digits.len() as isize {\n            res.push(digits[i as\
    \ usize]);\n        }\n        for i in 0..rot {\n            res.push(digits[i\
    \ as usize]);\n        }\n        res.iter().collect()\n    }\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"010\"`,\n right: `\"001\"`', /tmp/tmpb3mnyhum.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822860
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    if shift > x.to_string().len() as isize {\n        return x.to_string().chars().rev().collect();\n\
    \    }\n\n    let right_shift = x % 10isize.pow(shift as u32);\n    let left_shift\
    \ = x / 10isize.pow(shift as u32);\n\n    let mut left_shift_as_string = left_shift.to_string();\n\
    \    left_shift_as_string.push_str(&right_shift.to_string());\n\n    return left_shift_as_string;\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"10\"`,\n right: `\"001\"`', /tmp/tmpghf59fnm.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822860
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = x.to_string();\n    let shift = shift % s.len() as isize;\n\
    \    if shift == 0 {\n        return s;\n    }\n    s.push_str(&s[..shift as usize]);\n\
    \    s.drain(..shift as usize);\n    s\n}\n\nfn main() {\n    let candidate =\
    \ circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0502]: cannot borrow `s` as mutable because it is also borrowed\
    \ as immutable\n  --> /tmp/tmp7ua0903i.rs:10:5\n   |\n10 |     s.push_str(&s[..shift\
    \ as usize]);\n   |     ^^--------^^-^^^^^^^^^^^^^^^^^^^\n   |     | |       \
    \  |\n   |     | |         immutable borrow occurs here\n   |     | immutable\
    \ borrow later used by call\n   |     mutable borrow occurs here\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0502`.\n"
  stdout: ''
  timestamp: 1659822860
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = digits(x);\n    // if shift < len, shift % len is the\
    \ actual circular shift, otherwise we\n    // simply reverse the digits\n    if\
    \ shift < digits.len() as isize {\n        let shift = shift % digits.len() as\
    \ isize;\n        digits.rotate_right(shift as usize);\n    } else {\n       \
    \ digits.reverse();\n    }\n    digits.iter().map(|d| d.to_string()).collect()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `digits` in this scope\n --> /tmp/tmp3xoiqs7x.rs:5:22\n\
    \  |\n5 |     let mut digits = digits(x);\n  |                      ^^^^^^ not\
    \ found in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822860
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    if shift == 0 {\n        return x.to_string();\n    }\n    let str =\
    \ x.to_string();\n    let mut result = String::new();\n    let str_len = str.len();\n\
    \    for i in 0..str_len {\n        let idx = (i + shift as usize) % str_len;\n\
    \        result.push(str.chars().nth(idx).unwrap());\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"010\"`,\n right: `\"001\"`', /tmp/tmpj7ian8ax.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822860
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let num_digits = x.abs().to_string().len() as isize;\n    let mut shifted_str\
    \ = if shift > num_digits {\n        x.to_string().chars().rev().collect::<String>()\n\
    \    } else {\n        let (l, r) = x.to_string().split_at(shift as usize);\n\
    \        format!(\"{}{}\", r, l)\n    };\n    if x < 0 {\n        shifted_str.insert(0,\
    \ '-');\n    }\n    shifted_str\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0716]: temporary value dropped while borrowed\n  --> /tmp/tmpz47p4x3p.rs:9:22\n\
    \   |\n9  |         let (l, r) = x.to_string().split_at(shift as usize);\n   |\
    \                      ^^^^^^^^^^^^^                         - temporary value\
    \ is freed at the end of this statement\n   |                      |\n   |   \
    \                   creates a temporary which is freed while still in use\n10\
    \ |         format!(\"{}{}\", r, l)\n   |                            - borrow\
    \ later used here\n   |\n   = note: consider using a `let` binding to create a\
    \ longer lived value\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0716`.\n"
  stdout: ''
  timestamp: 1659822860
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let digit_count = digit_count(x);\n    let mut x = x;\n    let shift\
    \ = if shift > digit_count { digit_count } else { shift };\n    for _ in 0..shift\
    \ {\n        x = shift_right(x);\n    }\n    for _ in 0..digit_count {\n     \
    \   x = shift_left(x);\n    }\n    x.to_string()\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `digit_count` in this scope\n --> /tmp/tmp3djjorit.rs:5:23\n\
    \  |\n5 |     let digit_count = digit_count(x);\n  |                       ^^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find function `shift_right`\
    \ in this scope\n --> /tmp/tmp3djjorit.rs:9:13\n  |\n9 |         x = shift_right(x);\n\
    \  |             ^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ function `shift_left` in this scope\n  --> /tmp/tmp3djjorit.rs:12:13\n   |\n\
    12 |         x = shift_left(x);\n   |             ^^^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to 3 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822860
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x.to_string();\n    let l = x.len();\n    if shift == l {\n\
    \        x.chars().rev().collect()\n    } else {\n        let (a, b) = x.split_at(l\
    \ - shift as usize);\n        format!(\"{}{}\", b, a)\n    }\n}\n\nfn main() {\n\
    \    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplaepk2o7.rs:7:17\n  |\n7 |\
    \     if shift == l {\n  |                 ^ expected `isize`, found `usize`\n\
    \  |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n  |\n7 |     if shift == l.try_into().unwrap() {\n  |   \
    \              ~~~~~~~~~~~~~~~~~~~~~\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822860
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let (whole, frac) = split_num(x);\n    let mut l_shifted: Vec<u8> = Vec::new();\n\
    \    l_shifted.extend(frac.iter().rev());\n    l_shifted.extend(whole.iter().rev());\n\
    \    let len = l_shifted.len();\n    let mut res: Vec<u8> = Vec::new();\n    for\
    \ i in 0..len {\n        res.push(l_shifted[(i + shift as usize) % len]);\n  \
    \  }\n    res.reverse();\n    res.iter().map(|x| (x + 48) as char).collect()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `split_num` in this scope\n --> /tmp/tmpvc5p9amz.rs:5:25\n\
    \  |\n5 |     let (whole, frac) = split_num(x);\n  |                         ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822860
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = vec![];\n    for _ in 0..shift {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    x = if x == 0 {\n\
    \        digits.iter().rev().map(|&x| x).collect::<isize>()\n    } else {\n  \
    \      digits.iter().rev().fold(x, |acc, &x| acc * 10 + x)\n    };\n    x.to_string()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `isize` cannot be built from an iterator\
    \ over elements of type `isize`\n  --> /tmp/tmpj47bw_qx.rs:12:41\n   |\n12 | \
    \        digits.iter().rev().map(|&x| x).collect::<isize>()\n   |            \
    \                             ^^^^^^^ value of type `isize` cannot be built from\
    \ `std::iter::Iterator<Item=isize>`\n   |\n   = help: the trait `FromIterator<isize>`\
    \ is not implemented for `isize`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659822860
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    // Remove leading zeros\n    let mut digits = format!(\"{}\", x).chars().collect::<Vec<char>>();\n\
    \    while digits[0] == '0' {\n        digits.remove(0);\n    }\n\n    // If more\
    \ shifts than digits, reverse digits\n    if shift >= digits.len() as isize {\n\
    \        return digits.iter().rev().collect();\n    }\n\n    // Get right and\
    \ left digits\n    let left_digits = digits.split_off(shift as usize);\n    let\
    \ mut new_digits = Vec::with_capacity(digits.len() + left_digits.len());\n   \
    \ new_digits.extend(digits);\n    new_digits.extend(left_digits);\n\n    new_digits.iter().collect()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"100\"`,\n right: `\"001\"`', /tmp/tmppmhmq7_2.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822860
- exit_code: 0
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = format!(\"{}\", x).chars().collect::<Vec<char>>();\n\
    \    if shift > digits.len() as isize {\n        digits.reverse();\n        return\
    \ digits.into_iter().collect();\n    }\n    for _ in 0..shift {\n        let c\
    \ = digits.pop().unwrap();\n        digits.insert(0, c);\n    }\n    digits.into_iter().collect()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822860
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    if shift < 0 {\n        panic!(\"shift must be positive\");\n    }\n\
    \    let digits = digits(x);\n    let len = digits.len();\n    if shift >= len\
    \ as isize {\n        return digits.iter().rev().cloned().collect();\n    }\n\
    \    let n = len - shift as usize;\n    digits[n..].iter().chain(digits[..n].iter()).cloned().collect()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `digits` in this scope\n --> /tmp/tmp6gz6ofzm.rs:8:18\n\
    \  |\n8 |     let digits = digits(x);\n  |                  ^^^^^^ not found in\
    \ this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822860
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = digits(x);\n    if shift > digits.len() as isize {\n\
    \        return digits.iter().rev().cloned().collect();\n    }\n    digits.rotate_right(shift\
    \ as usize);\n    digits.iter().map(|n| n.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `digits` in this scope\n --> /tmp/tmpiv9716a5.rs:5:22\n\
    \  |\n5 |     let mut digits = digits(x);\n  |                      ^^^^^^ not\
    \ found in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822860
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    if shift == 0 {\n        return x.to_string();\n    }\n    let mut x_str\
    \ = x.to_string();\n    let len = x_str.len();\n    let circular_shift = shift\
    \ % len;\n    if circular_shift == 0 {\n        return x_str;\n    }\n    let\
    \ mut result = x_str.split_off(len - circular_shift as usize);\n    result.push_str(&x_str);\n\
    \    result\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzeaqxx4s.rs:10:34\n   |\n\
    10 |     let circular_shift = shift % len;\n   |                             \
    \     ^^^ expected `isize`, found `usize`\n\nerror[E0277]: cannot mod `isize`\
    \ by `usize`\n  --> /tmp/tmpzeaqxx4s.rs:10:32\n   |\n10 |     let circular_shift\
    \ = shift % len;\n   |                                ^ no implementation for\
    \ `isize % usize`\n   |\n   = help: the trait `Rem<usize>` is not implemented\
    \ for `isize`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659822860
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let digits = x.to_string();\n    let num_digits = digits.len() as isize;\n\
    \    if shift < num_digits {\n        let (left, right) = digits.split_at(shift\
    \ as usize);\n        format!(\"{}{}\", right, left)\n    } else {\n        digits.chars().rev().collect()\n\
    \    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"010\"`,\n right: `\"001\"`', /tmp/tmpp4zb_0jf.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822860
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let a = format!(\"{}\", x);\n    let b = a.chars().rev().collect::<String>();\n\
    \    let c = format!(\"{}\", shift);\n    let d = b.chars().skip(c.len()).collect::<String>();\n\
    \    let mut e = d.chars().rev().collect::<String>();\n    if shift >= a.len()\
    \ as isize {\n        e = d.chars().rev().collect::<String>();\n    }\n    e\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"10\"`,\n right: `\"001\"`', /tmp/tmpuv40g3vt.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822860
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let string = x.to_string();\n    let l = string.len();\n    if shift\
    \ >= l as isize {\n        return string.chars().rev().collect();\n    }\n   \
    \ let front: String = string.chars().skip(shift as usize).collect();\n    let\
    \ back: String = string.chars().take(shift as usize).collect();\n    format!(\"\
    {}{}\", front, back)\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"010\"`,\n right: `\"001\"`', /tmp/tmpetjwg6z2.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822860
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let digits = number_of_digits(x);\n    let shift = shift % digits;\n\
    \    if shift == 0 {\n        return x.to_string();\n    }\n\n    let digits =\
    \ reversed_digits(x);\n    let mut result = String::new();\n    for i in (0..digits.len()).cycle().skip(shift\
    \ as usize) {\n        result.push(digits[i]);\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `number_of_digits` in this scope\n -->\
    \ /tmp/tmpy709v09i.rs:5:18\n  |\n5 |     let digits = number_of_digits(x);\n \
    \ |                  ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `reversed_digits` in this scope\n  --> /tmp/tmpy709v09i.rs:11:18\n\
    \   |\n11 |     let digits = reversed_digits(x);\n   |                  ^^^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822860
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let digits = x.to_string();\n    let mut result = String::new();\n  \
    \  if shift >= digits.len() as isize {\n        for i in digits.chars().rev()\
    \ {\n            result.push(i);\n        }\n    } else {\n        let len = digits.len();\n\
    \        for i in shift..len as isize {\n            result.push(digits.chars().nth(i\
    \ as usize).unwrap());\n        }\n        for i in 0..shift {\n            result.push(digits.chars().nth(i\
    \ as usize).unwrap());\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"010\"`,\n right: `\"001\"`', /tmp/tmpngdcx2yr.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822860
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    if shift < 0 {\n        return circular_shift(x, shift + 9);\n    }\n\
    \n    if shift == 0 {\n        return x.to_string();\n    }\n\n    let mut x =\
    \ x;\n    let mut digits = Vec::new();\n    while x != 0 {\n        digits.push(x\
    \ % 10);\n        x /= 10;\n    }\n\n    if shift >= digits.len() as isize {\n\
    \        return digits.into_iter().rev().collect();\n    }\n\n    let before_shift\
    \ = digits.split_off(digits.len() - shift as usize);\n    let mut shifted_digits\
    \ = before_shift.iter().rev().chain(digits.iter());\n    shifted_digits.collect()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `isize`\n  --> /tmp/tmpwlhipvgy.rs:21:41\n   |\n21 | \
    \        return digits.into_iter().rev().collect();\n   |                    \
    \                     ^^^^^^^ value of type `String` cannot be built from `std::iter::Iterator<Item=isize>`\n\
    \   |\n   = help: the trait `FromIterator<isize>` is not implemented for `String`\n\
    \nerror[E0277]: a value of type `String` cannot be built from an iterator over\
    \ elements of type `&isize`\n  --> /tmp/tmpwlhipvgy.rs:26:20\n   |\n26 |     shifted_digits.collect()\n\
    \   |                    ^^^^^^^ value of type `String` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \   |\n   = help: the trait `FromIterator<&isize>` is not implemented for `String`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659822860
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x_vec = x.to_string().chars().collect::<Vec<char>>();\n    let\
    \ x_length = x_vec.len();\n    let shift = shift % x_length;\n    let mut shifted_vec\
    \ = vec![];\n    if shift == 0 {\n        return x.to_string();\n    }\n    for\
    \ i in 0..x_length {\n        let j = (i + shift) % x_length;\n        shifted_vec.push(x_vec[j]);\n\
    \    }\n    return shifted_vec.into_iter().collect();\n}\n\nfn main() {\n    let\
    \ candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp6tb5oiuo.rs:7:25\n  |\n7 |\
    \     let shift = shift % x_length;\n  |                         ^^^^^^^^ expected\
    \ `isize`, found `usize`\n\nerror[E0277]: cannot mod `isize` by `usize`\n -->\
    \ /tmp/tmp6tb5oiuo.rs:7:23\n  |\n7 |     let shift = shift % x_length;\n  |  \
    \                     ^ no implementation for `isize % usize`\n  |\n  = help:\
    \ the trait `Rem<usize>` is not implemented for `isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp6tb5oiuo.rs:13:22\n   |\n13 |         let j = (i + shift)\
    \ % x_length;\n   |                      ^^^^^ expected `usize`, found `isize`\n\
    \nerror[E0277]: cannot add `isize` to `usize`\n  --> /tmp/tmp6tb5oiuo.rs:13:20\n\
    \   |\n13 |         let j = (i + shift) % x_length;\n   |                    ^\
    \ no implementation for `usize + isize`\n   |\n   = help: the trait `Add<isize>`\
    \ is not implemented for `usize`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659822860
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let len = x.to_string().len() as isize;\n    let rev = x.to_string().chars().rev().collect::<String>();\n\
    \    (shift % len)\n        .try_into()\n        .ok()\n        .map(|shift| rev.chars().skip(shift).collect::<String>()\
    \ + &rev[..shift])\n        .unwrap_or(rev)\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `try_into` found for type `isize` in the\
    \ current scope\n   --> /tmp/tmpoqqfud0y.rs:8:10\n    |\n8   |         .try_into()\n\
    \    |          ^^^^^^^^ method not found in `isize`\n    |\n    = help: items\
    \ from traits can only be used if the trait is in scope\nhelp: the following trait\
    \ is implemented but not in scope; perhaps add a `use` for it:\n    |\n1   | use\
    \ std::convert::TryInto;\n    |\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659822860
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let str = x.to_string();\n    let len = str.len();\n    if shift >= len\
    \ as isize {\n        let reversed: String = str.chars().rev().collect();\n  \
    \      return reversed;\n    }\n    let offset = shift as usize;\n    let shifted\
    \ = format!(\"{}{}\", &str[offset..], &str[..offset]);\n    shifted\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"010\"`,\n right: `\"001\"`', /tmp/tmpa5haixd3.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822860
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let string = x.to_string();\n    let length = string.len();\n    let\
    \ shift = shift % length;\n    if shift == 0 {\n        string\n    } else {\n\
    \        let mut string = string.clone();\n        string.push_str(&string[..shift]);\n\
    \        string[shift..].to_string()\n    }\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp8bnx1ta9.rs:7:25\n  |\n7 |\
    \     let shift = shift % length;\n  |                         ^^^^^^ expected\
    \ `isize`, found `usize`\n\nerror[E0277]: cannot mod `isize` by `usize`\n -->\
    \ /tmp/tmp8bnx1ta9.rs:7:23\n  |\n7 |     let shift = shift % length;\n  |    \
    \                   ^ no implementation for `isize % usize`\n  |\n  = help: the\
    \ trait `Rem<usize>` is not implemented for `isize`\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `RangeTo<isize>`\n  --> /tmp/tmp8bnx1ta9.rs:12:26\n\
    \   |\n12 |         string.push_str(&string[..shift]);\n   |                 \
    \         ^^^^^^^^^^^^^^^ `String` cannot be indexed by `RangeTo<isize>`\n   |\n\
    \   = help: the trait `Index<RangeTo<isize>>` is not implemented for `String`\n\
    \nerror[E0277]: the type `String` cannot be indexed by `RangeFrom<isize>`\n  -->\
    \ /tmp/tmp8bnx1ta9.rs:13:9\n   |\n13 |         string[shift..].to_string()\n \
    \  |         ^^^^^^^^^^^^^^^ `String` cannot be indexed by `RangeFrom<isize>`\n\
    \   |\n   = help: the trait `Index<RangeFrom<isize>>` is not implemented for `String`\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659822860
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let digits = format!(\"{}\", x).chars().rev().collect::<Vec<char>>();\n\
    \    let len = digits.len();\n    let mut s = String::new();\n    for i in 0..len\
    \ {\n        let d = digits[(i + shift as usize) % len];\n        s.push(d);\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"100\"`,\n right: `\"001\"`', /tmp/tmpnoy5u_5y.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822860
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    let n = digits.len();\n\
    \    let mut i = n - shift as usize;\n    while i < n {\n        print!(\"{}\"\
    , digits[i]);\n        i += 1;\n    }\n    i = 0;\n    while i < n - shift as\
    \ usize {\n        print!(\"{}\", digits[i]);\n        i += 1;\n    }\n    println!();\n\
    \    \"\".to_string()\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"001\"`', /tmp/tmpxnzi4kur.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: '010

    '
  timestamp: 1659822860
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let digits = num_to_string(x);\n    let num_digits = num_digits(x);\n\
    \    let shift = shift % num_digits;\n    if shift == 0 {\n        return digits;\n\
    \    }\n    let (left, right) = digits.split_at(shift as usize);\n    format!(\"\
    {}{}\", right, left)\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `num_to_string` in this scope\n -->\
    \ /tmp/tmp8j7l7_p4.rs:5:18\n  |\n5 |     let digits = num_to_string(x);\n  | \
    \                 ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find function `num_digits` in this scope\n --> /tmp/tmp8j7l7_p4.rs:6:22\n  |\n\
    6 |     let num_digits = num_digits(x);\n  |                      ^^^^^^^^^^ not\
    \ found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822860
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let s = x.to_string();\n    let l = s.len();\n    if shift > l as isize\
    \ {\n        s.chars().rev().collect()\n    } else {\n        let mut ret = String::new();\n\
    \        let shift_mod = shift % l as isize;\n        ret.push_str(&s[shift_mod\
    \ as usize..]);\n        ret.push_str(&s[..shift_mod as usize]);\n        ret\n\
    \    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"010\"`,\n right: `\"001\"`', /tmp/tmpki17gkz7.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822860
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut str_x = x.to_string();\n    let shift = shift % str_x.len() as\
    \ isize;\n    let x_len = str_x.len();\n    for _ in 0..x_len {\n        str_x.push(str_x.remove(0));\n\
    \    }\n    str_x[x_len - shift as usize..].to_string()\n}\n\nfn main() {\n  \
    \  let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0499]: cannot borrow `str_x` as mutable more than once at a time\n\
    \ --> /tmp/tmpy9tqpo4t.rs:9:20\n  |\n9 |         str_x.push(str_x.remove(0));\n\
    \  |         ----- ---- ^^^^^ second mutable borrow occurs here\n  |         |\
    \     |\n  |         |     first borrow later used by call\n  |         first\
    \ mutable borrow occurs here\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0499`.\n"
  stdout: ''
  timestamp: 1659822860
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let digits = number_to_digits(x);\n    let l = digits.len();\n    if\
    \ shift > l {\n        digits.into_iter().rev().map(|e| e.to_string()).collect()\n\
    \    } else {\n        let mut cs = Vec::with_capacity(l);\n        for i in 0..l\
    \ {\n            cs.push(digits[(i + shift as usize) % l].to_string());\n    \
    \    }\n        cs.join(\"\")\n    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `number_to_digits` in this scope\n -->\
    \ /tmp/tmps7n6hw0o.rs:5:18\n  |\n5 |     let digits = number_to_digits(x);\n \
    \ |                  ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmps7n6hw0o.rs:10:41\n   |\n10 |         let mut\
    \ cs = Vec::with_capacity(l);\n   |                                         ^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n10 |         let\
    \ mut cs = Vec::with_capacity(l.try_into().unwrap());\n   |                  \
    \                       ~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmps7n6hw0o.rs:12:33\n   |\n12 |             cs.push(digits[(i + shift\
    \ as usize) % l].to_string());\n   |                                 ^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n\nerror[E0277]: cannot add `usize` to `isize`\n\
    \  --> /tmp/tmps7n6hw0o.rs:12:31\n   |\n12 |             cs.push(digits[(i + shift\
    \ as usize) % l].to_string());\n   |                               ^ no implementation\
    \ for `isize + usize`\n   |\n   = help: the trait `Add<usize>` is not implemented\
    \ for `isize`\n\nerror: aborting due to 4 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308, E0425.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659822860
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let s = format!(\"{}\", x);\n    let num_digits = s.len() as isize;\n\
    \    if shift > num_digits {\n        return s.chars().rev().collect();\n    }\n\
    \    let mut s_shifted = String::new();\n    for i in shift..num_digits {\n  \
    \      s_shifted.push(s.chars().nth((i - shift) as usize).unwrap());\n    }\n\
    \    for i in 0..shift {\n        s_shifted.push(s.chars().nth((num_digits - shift\
    \ + i) as usize).unwrap());\n    }\n    s_shifted\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"100\"`,\n right: `\"001\"`', /tmp/tmpuie4cmx4.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = to_digits(x);\n    for _ in 0..shift {\n        let\
    \ last = digits.pop().unwrap();\n        digits.insert(0, last);\n    }\n    digits.iter().map(|x|\
    \ x.to_string()).collect()\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `to_digits` in this scope\n --> /tmp/tmp6hnefjcv.rs:5:22\n\
    \  |\n5 |     let mut digits = to_digits(x);\n  |                      ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822860
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    if shift > length(x) {\n        return reverse_digits(x).to_string();\n\
    \    }\n    let mut v = Vec::new();\n    let mut r = x;\n    while r != 0 {\n\
    \        v.push(r % 10);\n        r /= 10;\n    }\n    let (l, r) = v.split_at(shift\
    \ as usize);\n    r.iter().chain(l.iter()).map(|&i| i.to_string()).collect()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `length` in this scope\n --> /tmp/tmpabnkglpc.rs:5:16\n\
    \  |\n5 |     if shift > length(x) {\n  |                ^^^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find function `reverse_digits` in this scope\n\
    \ --> /tmp/tmpabnkglpc.rs:6:16\n  |\n6 |         return reverse_digits(x).to_string();\n\
    \  |                ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822860
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut s = String::new();\n    let mut count = 0;\n\
    \    while x > 0 {\n        x /= 10;\n        count += 1;\n    }\n    x = x -\
    \ (x / 10) * 10;\n    s.push_str(&x.to_string());\n    x = x / 10;\n    while\
    \ x > 0 {\n        s.push_str(&x.to_string());\n        x = x / 10;\n    }\n \
    \   if shift >= count {\n        s.chars().rev().collect()\n    } else {\n   \
    \     let (a, b) = s.split_at(shift as usize);\n        let mut ret = b.to_string();\n\
    \        ret.push_str(a);\n        ret\n    }\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''byte index 2 is out of bounds of `0`'', /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/core/src/str/mod.rs:576:13

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822861
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = String::new();\n    let mut num = x;\n    while num\
    \ > 0 {\n        digits.push((num % 10) as u8 as char);\n        num /= 10;\n\
    \    }\n    digits.chars().cycle().skip(shift as usize).take(digits.len()).collect()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\\u{1}\\u{0}\\u{0}\"`,\n right: `\"001\"`', /tmp/tmp4x65o1kx.rs:16:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    if shift > 0 {\n        let mut str = x.to_string();\n        for _ in\
    \ 0..shift {\n            let last = str.pop().unwrap();\n            str.insert(0,\
    \ last);\n        }\n        str\n    } else {\n        x.to_string()\n    }\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"97\"`,\n right: `\"79\"`', /tmp/tmpka1o15pj.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let s = x.to_string();\n    let len = s.len() as isize;\n    let x =\
    \ (x / 10_isize.pow(shift as u32)) + ((x % 10_isize.pow(shift as u32)) * 10_isize.pow((len\
    \ - shift) as u32));\n    x.to_string()\n}\n\nfn main() {\n    let candidate =\
    \ circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1\"`,\n right: `\"001\"`', /tmp/tmp108vccl1.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let digits = x.to_string().len();\n    let shift\
    \ = shift % digits;\n    for _ in 0..shift {\n        let first = x % 10;\n  \
    \      x /= 10;\n        x += first * 10isize.pow(digits as u32 - 1);\n    }\n\
    \    x.to_string()\n}\n\nfn main() {\n    let candidate = circular_shift;\n  \
    \  assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpeurucg60.rs:7:25\n  |\n7 |\
    \     let shift = shift % digits;\n  |                         ^^^^^^ expected\
    \ `isize`, found `usize`\n\nerror[E0277]: cannot mod `isize` by `usize`\n -->\
    \ /tmp/tmpeurucg60.rs:7:23\n  |\n7 |     let shift = shift % digits;\n  |    \
    \                   ^ no implementation for `isize % usize`\n  |\n  = help: the\
    \ trait `Rem<usize>` is not implemented for `isize`\n\nerror: aborting due to\
    \ 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659822860
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = format!(\"{}\", x).chars().collect::<Vec<char>>();\n\
    \    let length = digits.len();\n    for i in 0..length {\n        digits[i] =\
    \ digits[(i + shift) % length];\n    }\n    digits.iter().collect()\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp57lpujdp.rs:8:33\n  |\n8 |\
    \         digits[i] = digits[(i + shift) % length];\n  |                     \
    \            ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]: cannot add\
    \ `isize` to `usize`\n --> /tmp/tmp57lpujdp.rs:8:31\n  |\n8 |         digits[i]\
    \ = digits[(i + shift) % length];\n  |                               ^ no implementation\
    \ for `usize + isize`\n  |\n  = help: the trait `Add<isize>` is not implemented\
    \ for `usize`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let digits = x.to_string();\n    let num_digits = digits.len() as isize;\n\
    \    if shift >= num_digits {\n        return digits.chars().rev().collect();\n\
    \    }\n    let head = digits[0..(num_digits - shift) as usize].to_string();\n\
    \    let tail = digits[(num_digits - shift) as usize..].to_string();\n    tail\
    \ + &head\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"21\"`,\n right: `\"12\"`', /tmp/tmpeo8qx7jt.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut result = String::new();\n    if shift ==\
    \ 0 {\n        return x.to_string();\n    }\n    while x > 0 {\n        result.push_str(&((x\
    \ % 10 + shift) % 10).to_string());\n        x /= 10;\n    }\n    result.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"322\"`,\n right: `\"001\"`', /tmp/tmpmo43qjm4.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    format!(\"{:02}\", {\n        if shift >= count_digits(x) {\n       \
    \     let mut s = format!(\"{}\", x);\n            s.chars().rev().collect::<String>()\n\
    \        } else {\n            let l = format!(\"{}\", x).chars().skip(shift as\
    \ usize).collect::<String>();\n            let r = format!(\"{}\", x).chars().take(shift\
    \ as usize).collect::<String>();\n            format!(\"{}{}\", l, r)\n      \
    \  }\n    })\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `count_digits` in this scope\n --> /tmp/tmp84ag574s.rs:6:21\n\
    \  |\n6 |         if shift >= count_digits(x) {\n  |                     ^^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822860
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut s = String::new();\n    if shift > x.to_string().len()\
    \ as isize {\n        for i in x.to_string().chars().rev() {\n            s.push(i);\n\
    \        }\n        return s;\n    }\n    for _ in 0..shift {\n        let digit\
    \ = x % 10;\n        x /= 10;\n        x += digit * 10isize.pow((x.to_string().len()\
    \ - 1) as u32);\n    }\n    x.to_string()\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1\"`,\n right: `\"001\"`', /tmp/tmpkewn2y1o.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let digits = x.to_string();\n    let n = digits.len();\n    let shift\
    \ = if shift > n { shift % n } else { shift };\n    format!(\"{}{}\", &digits[shift..],\
    \ &digits[..shift])\n}\n\nfn main() {\n    let candidate = circular_shift;\n \
    \   assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpw2tjcnx4.rs:7:28\n  |\n7 |\
    \     let shift = if shift > n { shift % n } else { shift };\n  |            \
    \                ^ expected `isize`, found `usize`\n  |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n  |\n\
    7 |     let shift = if shift > n.try_into().unwrap() { shift % n } else { shift\
    \ };\n  |                            ~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpw2tjcnx4.rs:7:40\n  |\n7 |     let shift = if shift > n\
    \ { shift % n } else { shift };\n  |                                        ^\
    \ expected `isize`, found `usize`\n\nerror[E0277]: cannot mod `isize` by `usize`\n\
    \ --> /tmp/tmpw2tjcnx4.rs:7:38\n  |\n7 |     let shift = if shift > n { shift\
    \ % n } else { shift };\n  |                                      ^ no implementation\
    \ for `isize % usize`\n  |\n  = help: the trait `Rem<usize>` is not implemented\
    \ for `isize`\n\nerror[E0277]: the type `String` cannot be indexed by `RangeFrom<isize>`\n\
    \ --> /tmp/tmpw2tjcnx4.rs:8:22\n  |\n8 |     format!(\"{}{}\", &digits[shift..],\
    \ &digits[..shift])\n  |                      ^^^^^^^^^^^^^^^ `String` cannot\
    \ be indexed by `RangeFrom<isize>`\n  |\n  = help: the trait `Index<RangeFrom<isize>>`\
    \ is not implemented for `String`\n\nerror[E0277]: the type `String` cannot be\
    \ indexed by `RangeTo<isize>`\n --> /tmp/tmpw2tjcnx4.rs:8:40\n  |\n8 |     format!(\"\
    {}{}\", &digits[shift..], &digits[..shift])\n  |                             \
    \           ^^^^^^^^^^^^^^^ `String` cannot be indexed by `RangeTo<isize>`\n \
    \ |\n  = help: the trait `Index<RangeTo<isize>>` is not implemented for `String`\n\
    \nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let s = x.to_string();\n    let mut s2 = String::with_capacity(s.len());\n\
    \    let len = s.len();\n    let mut pos = shift % len;\n    while pos < len {\n\
    \        s2.push(s.chars().nth(pos).unwrap());\n        pos += 1;\n    }\n   \
    \ pos = 0;\n    while pos < shift % len {\n        s2.push(s.chars().nth(pos).unwrap());\n\
    \        pos += 1;\n    }\n    s2\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp_pcdxl2r.rs:8:27\n  |\n8 |\
    \     let mut pos = shift % len;\n  |                           ^^^ expected `isize`,\
    \ found `usize`\n\nerror[E0277]: cannot mod `isize` by `usize`\n --> /tmp/tmp_pcdxl2r.rs:8:25\n\
    \  |\n8 |     let mut pos = shift % len;\n  |                         ^ no implementation\
    \ for `isize % usize`\n  |\n  = help: the trait `Rem<usize>` is not implemented\
    \ for `isize`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp_pcdxl2r.rs:9:17\n\
    \  |\n9 |     while pos < len {\n  |                 ^^^ expected `isize`, found\
    \ `usize`\n  |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n  |\n9 |     while pos < len.try_into().unwrap()\
    \ {\n  |                 ~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp_pcdxl2r.rs:10:31\n   |\n10 |         s2.push(s.chars().nth(pos).unwrap());\n\
    \   |                               ^^^ expected `usize`, found `isize`\n   |\n\
    help: you can convert an `isize` to a `usize` and panic if the converted value\
    \ doesn't fit\n   |\n10 |         s2.push(s.chars().nth(pos.try_into().unwrap()).unwrap());\n\
    \   |                               ~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp_pcdxl2r.rs:14:25\n   |\n14 |     while pos < shift % len\
    \ {\n   |                         ^^^ expected `isize`, found `usize`\n\nerror[E0277]:\
    \ cannot mod `isize` by `usize`\n  --> /tmp/tmp_pcdxl2r.rs:14:23\n   |\n14 | \
    \    while pos < shift % len {\n   |                       ^ no implementation\
    \ for `isize % usize`\n   |\n   = help: the trait `Rem<usize>` is not implemented\
    \ for `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_pcdxl2r.rs:15:31\n\
    \   |\n15 |         s2.push(s.chars().nth(pos).unwrap());\n   |              \
    \                 ^^^ expected `usize`, found `isize`\n   |\nhelp: you can convert\
    \ an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n\
    15 |         s2.push(s.chars().nth(pos.try_into().unwrap()).unwrap());\n   | \
    \                              ~~~~~~~~~~~~~~~~~~~~~~~\n\nerror: aborting due\
    \ to 7 pr"
  stdout: ''
  timestamp: 1659822861
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let n = x.to_string().len() as isize;\n    if shift >= n {\n        x.to_string().chars().rev().collect()\n\
    \    } else {\n        let s = x.to_string();\n        let (a, b) = s.split_at(shift\
    \ as usize);\n        format!(\"{}{}\", b, a)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"010\"`,\n right: `\"001\"`', /tmp/tmpt8xdy0xp.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = x.to_string();\n    let len = s.len();\n    let shift = shift\
    \ % len;\n    let a = &s[0..shift];\n    let b = &s[shift..len];\n    format!(\"\
    {}{}\", b, a)\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp0xb6zz9o.rs:7:25\n  |\n7 |\
    \     let shift = shift % len;\n  |                         ^^^ expected `isize`,\
    \ found `usize`\n\nerror[E0277]: cannot mod `isize` by `usize`\n --> /tmp/tmp0xb6zz9o.rs:7:23\n\
    \  |\n7 |     let shift = shift % len;\n  |                       ^ no implementation\
    \ for `isize % usize`\n  |\n  = help: the trait `Rem<usize>` is not implemented\
    \ for `isize`\n\nerror[E0277]: the type `String` cannot be indexed by `std::ops::Range<isize>`\n\
    \ --> /tmp/tmp0xb6zz9o.rs:8:14\n  |\n8 |     let a = &s[0..shift];\n  |      \
    \        ^^^^^^^^^^^ `String` cannot be indexed by `std::ops::Range<isize>`\n\
    \  |\n  = help: the trait `Index<std::ops::Range<isize>>` is not implemented for\
    \ `String`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp0xb6zz9o.rs:9:23\n\
    \  |\n9 |     let b = &s[shift..len];\n  |                       ^^^ expected\
    \ `isize`, found `usize`\n\nerror[E0277]: the type `String` cannot be indexed\
    \ by `std::ops::Range<isize>`\n --> /tmp/tmp0xb6zz9o.rs:9:14\n  |\n9 |     let\
    \ b = &s[shift..len];\n  |              ^^^^^^^^^^^^^ `String` cannot be indexed\
    \ by `std::ops::Range<isize>`\n  |\n  = help: the trait `Index<std::ops::Range<isize>>`\
    \ is not implemented for `String`\n\nerror: aborting due to 5 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let s = x.to_string();\n    let n = s.len();\n    let mut result = String::new();\n\
    \    for i in 0..n {\n        result.push(s.chars().nth((i + shift) % n).unwrap());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = circular_shift;\n  \
    \  assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp5ceo17eo.rs:9:40\n  |\n9 |\
    \         result.push(s.chars().nth((i + shift) % n).unwrap());\n  |         \
    \                               ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot add `isize` to `usize`\n --> /tmp/tmp5ceo17eo.rs:9:38\n  |\n9 |     \
    \    result.push(s.chars().nth((i + shift) % n).unwrap());\n  |              \
    \                        ^ no implementation for `usize + isize`\n  |\n  = help:\
    \ the trait `Add<isize>` is not implemented for `usize`\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut new_x = x;\n    if shift >= 10 {\n        new_x = reverse_number(x);\n\
    \    } else {\n        for _ in 0..shift {\n            let last_digit = new_x\
    \ % 10;\n            new_x /= 10;\n            new_x += last_digit * 10_isize.pow(DIGITS\
    \ - 1);\n        }\n    }\n    new_x.to_string()\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `reverse_number` in this scope\n -->\
    \ /tmp/tmp1h1hnrnb.rs:7:17\n  |\n7 |         new_x = reverse_number(x);\n  | \
    \                ^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `DIGITS` in this scope\n  --> /tmp/tmp1h1hnrnb.rs:12:48\n   |\n12\
    \ |             new_x += last_digit * 10_isize.pow(DIGITS - 1);\n   |        \
    \                                        ^^^^^^ not found in this scope\n   |\n\
    help: consider importing one of these items\n   |\n1  | use std::f32::DIGITS;\n\
    \   |\n1  | use std::f64::DIGITS;\n   |\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut result = x.to_string();\n    let len = result.len();\n    let\
    \ shift = shift % len;\n    let mut rev = result[..shift].chars().rev().collect::<String>();\n\
    \    rev.push_str(&result[shift..]);\n    rev\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpfxcej4zs.rs:7:25\n  |\n7 |\
    \     let shift = shift % len;\n  |                         ^^^ expected `isize`,\
    \ found `usize`\n\nerror[E0277]: cannot mod `isize` by `usize`\n --> /tmp/tmpfxcej4zs.rs:7:23\n\
    \  |\n7 |     let shift = shift % len;\n  |                       ^ no implementation\
    \ for `isize % usize`\n  |\n  = help: the trait `Rem<usize>` is not implemented\
    \ for `isize`\n\nerror[E0277]: the type `String` cannot be indexed by `RangeTo<isize>`\n\
    \ --> /tmp/tmpfxcej4zs.rs:8:19\n  |\n8 |     let mut rev = result[..shift].chars().rev().collect::<String>();\n\
    \  |                   ^^^^^^^^^^^^^^^ `String` cannot be indexed by `RangeTo<isize>`\n\
    \  |\n  = help: the trait `Index<RangeTo<isize>>` is not implemented for `String`\n\
    \nerror[E0277]: the type `String` cannot be indexed by `RangeFrom<isize>`\n -->\
    \ /tmp/tmpfxcej4zs.rs:9:19\n  |\n9 |     rev.push_str(&result[shift..]);\n  |\
    \                   ^^^^^^^^^^^^^^^ `String` cannot be indexed by `RangeFrom<isize>`\n\
    \  |\n  = help: the trait `Index<RangeFrom<isize>>` is not implemented for `String`\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    if shift == 0 {\n        return x.to_string();\n    }\n    let digits\
    \ = x.to_string().chars().map(|c| c.to_digit(10).unwrap()).collect::<Vec<u32>>();\n\
    \    let mut result = Vec::with_capacity(digits.len());\n    let shift = shift\
    \ % digits.len();\n    for i in (0..digits.len()).cycle().skip(shift) {\n    \
    \    result.push(digits[i]);\n    }\n    result.iter().map(|&x| x.to_string()).collect::<Vec<String>>().join(\"\
    \")\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpu2v5ajx9.rs:10:25\n   |\n\
    10 |     let shift = shift % digits.len();\n   |                         ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n\nerror[E0277]: cannot mod `isize` by `usize`\n\
    \  --> /tmp/tmpu2v5ajx9.rs:10:23\n   |\n10 |     let shift = shift % digits.len();\n\
    \   |                       ^ no implementation for `isize % usize`\n   |\n  \
    \ = help: the trait `Rem<usize>` is not implemented for `isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpu2v5ajx9.rs:11:45\n   |\n11 |     for i in (0..digits.len()).cycle().skip(shift)\
    \ {\n   |                                             ^^^^^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n11 |     for i in (0..digits.len()).cycle().skip(shift.try_into().unwrap())\
    \ {\n   |                                             ~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = to_digits(x);\n    digits.rotate_right(shift as usize);\n\
    \    digits.into_iter().map(|x| std::char::from_digit(x as u32, 10).unwrap()).collect()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `to_digits` in this scope\n --> /tmp/tmp48obotgf.rs:5:22\n\
    \  |\n5 |     let mut digits = to_digits(x);\n  |                      ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    let n = digits.len();\n\
    \    let mut result = String::new();\n    for d in 0..n {\n        result.push((digits[(d\
    \ + shift as usize) % n] + 48) as char);\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0604]: only `u8` can be cast as `char`, not `isize`\n  --> /tmp/tmp0mjoovc0.rs:14:21\n\
    \   |\n14 |         result.push((digits[(d + shift as usize) % n] + 48) as char);\n\
    \   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ invalid\
    \ cast\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0604`.\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let digits = x.to_string();\n    let n = digits.len();\n    if shift\
    \ >= n as isize {\n        return digits.chars().rev().collect();\n    }\n   \
    \ let base = pow(10, shift);\n    let first = x / base;\n    let second = x %\
    \ base;\n    format!(\"{}{}\", first, second)\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `pow` in this scope\n  --> /tmp/tmpcjruusto.rs:10:16\n\
    \   |\n10 |     let base = pow(10, shift);\n   |                ^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let num_digits = x.to_string().len() as isize;\n    let shifted = if\
    \ shift < num_digits {\n        let (left, right) = x.to_string().split_at(shift\
    \ as usize);\n        format!(\"{}{}\", right, left)\n    } else {\n        format!(\"\
    {}\", x)\n    };\n    String::from(shifted)\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0716]: temporary value dropped while borrowed\n --> /tmp/tmpwff3__8z.rs:7:29\n\
    \  |\n7 |         let (left, right) = x.to_string().split_at(shift as usize);\n\
    \  |                             ^^^^^^^^^^^^^                         - temporary\
    \ value is freed at the end of this statement\n  |                           \
    \  |\n  |                             creates a temporary which is freed while\
    \ still in use\n8 |         format!(\"{}{}\", right, left)\n  |              \
    \                  ---- borrow later used here\n  |\n  = note: consider using\
    \ a `let` binding to create a longer lived value\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0716`.\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let digits = number_of_digits(x);\n    let shift = shift % digits;\n\
    \    let mut y = x;\n    for _ in 0..shift {\n        let lsd = y % 10;\n    \
    \    y = (y - lsd) / 10;\n        y += lsd * 10_isize.pow(digits - 1);\n    }\n\
    \    y.to_string()\n}\n\nfn main() {\n    let candidate = circular_shift;\n  \
    \  assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `number_of_digits` in this scope\n -->\
    \ /tmp/tmp6vbo2y2a.rs:5:18\n  |\n5 |     let digits = number_of_digits(x);\n \
    \ |                  ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut vec: Vec<_> = x.to_string().chars().collect();\n    for _ in\
    \ 0..shift {\n        let last = vec.pop().unwrap();\n        vec.insert(0, last);\n\
    \    }\n    return vec.into_iter().collect();\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"97\"`,\n right: `\"79\"`', /tmp/tmp7agmovsn.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let s = x.to_string();\n    let mut l = s.len();\n    if l < 2 {\n  \
    \      return s;\n    }\n    let shift = shift % l;\n    if shift > 0 {\n    \
    \    let mut s = s.chars().collect::<Vec<char>>();\n        let mut tmp = s[0];\n\
    \        for i in 0..l {\n            let j = (i + shift) % l;\n            s.swap(i,\
    \ j);\n        }\n        s.into_iter().collect()\n    } else {\n        s\n \
    \   }\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpb76engd3.rs:10:25\n   |\n\
    10 |     let shift = shift % l;\n   |                         ^ expected `isize`,\
    \ found `usize`\n\nerror[E0277]: cannot mod `isize` by `usize`\n  --> /tmp/tmpb76engd3.rs:10:23\n\
    \   |\n10 |     let shift = shift % l;\n   |                       ^ no implementation\
    \ for `isize % usize`\n   |\n   = help: the trait `Rem<usize>` is not implemented\
    \ for `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpb76engd3.rs:15:26\n\
    \   |\n15 |             let j = (i + shift) % l;\n   |                       \
    \   ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]: cannot add `isize`\
    \ to `usize`\n  --> /tmp/tmpb76engd3.rs:15:24\n   |\n15 |             let j =\
    \ (i + shift) % l;\n   |                        ^ no implementation for `usize\
    \ + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented for `usize`\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut s = String::new();\n    let mut pos = 0;\n\
    \    loop {\n        if pos == shift {\n            s.push_str(&x.to_string());\n\
    \        }\n        x /= 10;\n        if x == 0 {\n            break;\n      \
    \  }\n        pos += 1;\n    }\n    x = (x as usize) + 1;\n    s.push_str(&x.to_string());\n\
    \    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0ryj_jm0.rs:18:9\n   |\n\
    18 |     x = (x as usize) + 1;\n   |         ^^^^^^^^^^^^^^^^ expected `isize`,\
    \ found `usize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let shifted_x = x / 10_isize.pow(shift as u32) + x % 10_isize.pow(shift\
    \ as u32) * 10_isize.pow((x.to_string().len() as u32) - shift as u32);\n    shifted_x.to_string()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1\"`,\n right: `\"001\"`', /tmp/tmp9sbj53wu.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = x.to_string();\n    let len = s.len();\n    if shift > len\
    \ as isize {\n        s.chars().rev().collect()\n    } else {\n        s.drain(..shift\
    \ as usize).collect::<String>() + &s\n    }\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"100\"`,\n right: `\"001\"`', /tmp/tmp0cgqtbh2.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    if shift >= x.count_zeros() as isize {\n        return x.to_string().chars().rev().collect();\n\
    \    }\n    let x_str = x.to_string();\n    let rotate_index = x_str.len() - shift\
    \ as usize;\n    let mut x_chars: Vec<char> = x_str.chars().collect();\n    let\
    \ rotate_range = rotate_index..x_chars.len();\n    let r = x_chars.split_off(rotate_index);\n\
    \    x_chars.extend(r);\n    x_chars[rotate_range].iter().rev().cloned().collect()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"00\"`,\n right: `\"001\"`', /tmp/tmposa47o4h.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = format!(\"{}\", x).chars().collect::<Vec<char>>();\n\
    \    let n = digits.len();\n    if shift > n {\n        return digits.into_iter().rev().collect();\n\
    \    }\n    digits.rotate_right(shift as usize);\n    digits.into_iter().collect()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpthjw7p30.rs:7:16\n  |\n7 |\
    \     if shift > n {\n  |                ^ expected `isize`, found `usize`\n \
    \ |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n  |\n7 |     if shift > n.try_into().unwrap() {\n  |    \
    \            ~~~~~~~~~~~~~~~~~~~~~\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let digits = get_digits(x);\n    let len = digits.len();\n    let new_shift\
    \ = shift % len;\n    if new_shift == 0 {\n        digits.iter().cloned().collect()\n\
    \    } else {\n        let mut result = String::with_capacity(len);\n        let\
    \ mut rem = new_shift;\n        for i in (0..len).rev() {\n            if rem\
    \ == 0 {\n                result.push_str(&digits[i..]);\n                break;\n\
    \            }\n            result.push(digits[i]);\n            rem -= 1;\n \
    \       }\n        if rem != 0 {\n            result.push_str(&digits[..rem]);\n\
    \        }\n        result\n    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `get_digits` in this scope\n --> /tmp/tmpf_essqt4.rs:5:18\n\
    \  |\n5 |     let digits = get_digits(x);\n  |                  ^^^^^^^^^^ not\
    \ found in this scope\n\nerror[E0277]: cannot mod `isize` by `usize`\n --> /tmp/tmpf_essqt4.rs:7:27\n\
    \  |\n7 |     let new_shift = shift % len;\n  |                           ^ no\
    \ implementation for `isize % usize`\n  |\n  = help: the trait `Rem<usize>` is\
    \ not implemented for `isize`\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0277, E0425.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let x = x.to_string();\n    let len = x.len();\n    let (shift, len)\
    \ = (shift % len, len as isize);\n    let (first, second) = x.split_at(len - shift\
    \ as usize);\n    let mut result = String::new();\n    result.push_str(second);\n\
    \    result.push_str(first);\n    result\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpkp7cq8sx.rs:7:33\n  |\n7 |\
    \     let (shift, len) = (shift % len, len as isize);\n  |                   \
    \              ^^^ expected `isize`, found `usize`\n\nerror[E0277]: cannot mod\
    \ `isize` by `usize`\n --> /tmp/tmpkp7cq8sx.rs:7:31\n  |\n7 |     let (shift,\
    \ len) = (shift % len, len as isize);\n  |                               ^ no\
    \ implementation for `isize % usize`\n  |\n  = help: the trait `Rem<usize>` is\
    \ not implemented for `isize`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpkp7cq8sx.rs:8:44\n\
    \  |\n8 |     let (first, second) = x.split_at(len - shift as usize);\n  |   \
    \                                         ^^^^^^^^^^^^^^ expected `isize`, found\
    \ `usize`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpkp7cq8sx.rs:8:38\n \
    \ |\n8 |     let (first, second) = x.split_at(len - shift as usize);\n  |    \
    \                                  ^^^^^^^^^^^^^^^^^^^^ expected `usize`, found\
    \ `isize`\n  |\nhelp: you can convert an `isize` to a `usize` and panic if the\
    \ converted value doesn't fit\n  |\n8 |     let (first, second) = x.split_at((len\
    \ - shift as usize).try_into().unwrap());\n  |                               \
    \       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0277]: cannot subtract\
    \ `usize` from `isize`\n --> /tmp/tmpkp7cq8sx.rs:8:42\n  |\n8 |     let (first,\
    \ second) = x.split_at(len - shift as usize);\n  |                           \
    \               ^ no implementation for `isize - usize`\n  |\n  = help: the trait\
    \ `Sub<usize>` is not implemented for `isize`\n\nerror: aborting due to 5 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let string = format!(\"{}\", x);\n    let string_length = string.len();\n\
    \    let index = string_length - (shift as usize % string_length);\n    let (left,\
    \ right) = string.split_at(index);\n    [right, left].concat()\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"97\"`,\n right: `\"79\"`', /tmp/tmp9_8lohwy.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut y = x;\n    let mut y_digits = Vec::new();\n    while y > 0 {\n\
    \        y_digits.push(y % 10);\n        y /= 10;\n    }\n    let n = y_digits.len();\n\
    \    let mut y_circular = Vec::new();\n    if shift > n {\n        y_circular.extend_from_slice(&y_digits[..]);\n\
    \        y_circular.reverse();\n    } else {\n        let (y_left, y_right) =\
    \ y_digits.split_at(n - shift as usize);\n        y_circular.extend_from_slice(y_right);\n\
    \        y_circular.extend_from_slice(y_left);\n    }\n    y_circular.iter().map(|d|\
    \ d.to_string()).collect()\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4tpq4z25.rs:13:16\n   |\n\
    13 |     if shift > n {\n   |                ^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n13 |     if shift > n.try_into().unwrap() {\n   | \
    \               ~~~~~~~~~~~~~~~~~~~~~\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    // We want to shift by a modulo the number of digits in the integer x\n\
    \    let n = x.to_string().len() as isize;\n    let shift = shift % n;\n    if\
    \ shift == 0 {\n        return x.to_string();\n    }\n    let y = x.to_string();\n\
    \    // We can convert the string to an array of chars and use std::mem::swap()\n\
    \    // to shift the array of chars around.\n    let mut y: Vec<char> = y.chars().collect();\n\
    \    for j in 0..n {\n        let j = (j + shift) % n;\n        std::mem::swap(&mut\
    \ y[j as usize], &mut y[(j + 1) as usize]);\n    }\n    y.iter().collect()\n}\n\
    \nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0499]: cannot borrow `y` as mutable more than once at a time\n \
    \ --> /tmp/tmp1i2s_wk7.rs:17:49\n   |\n17 |         std::mem::swap(&mut y[j as\
    \ usize], &mut y[(j + 1) as usize]);\n   |         --------------      -     \
    \              ^ second mutable borrow occurs here\n   |         |           \
    \        |\n   |         |                   first mutable borrow occurs here\n\
    \   |         first borrow later used by call\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0499`.\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut result = \"\".to_string();\n    let (mut\
    \ shift, mut i) = (shift, 0);\n    loop {\n        let digit = x % 10;\n     \
    \   x /= 10;\n        if i < shift {\n            if x == 0 {\n              \
    \  shift -= i + 1;\n                i = 0;\n                x = digit;\n     \
    \       } else {\n                i += 1;\n            }\n        } else {\n \
    \           result.push_str(&format!(\"{}\", digit));\n            if x == 0 {\n\
    \                break;\n            }\n        }\n    }\n    if shift > 0 {\n\
    \        let mut reversed = \"\".to_string();\n        for c in result.chars().rev()\
    \ {\n            reversed.push(c);\n        }\n        reversed\n    } else {\n\
    \        result\n    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1\"`,\n right: `\"001\"`', /tmp/tmpjls4tj88.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = format!(\"{}\", x).chars().collect::<Vec<char>>();\n\
    \    let len = digits.len();\n    let shift = shift % len;\n    digits.rotate_right(shift\
    \ as usize);\n    digits.iter().collect()\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpph8urwj0.rs:7:25\n  |\n7 |\
    \     let shift = shift % len;\n  |                         ^^^ expected `isize`,\
    \ found `usize`\n\nerror[E0277]: cannot mod `isize` by `usize`\n --> /tmp/tmpph8urwj0.rs:7:23\n\
    \  |\n7 |     let shift = shift % len;\n  |                       ^ no implementation\
    \ for `isize % usize`\n  |\n  = help: the trait `Rem<usize>` is not implemented\
    \ for `isize`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    // How many digits are there in the number?\n    let n = n_digits(x);\n\
    \    // Get the last digit.\n    let ld = x % 10;\n    // Divide out the last\
    \ digit.\n    let mut tmp = x / 10;\n    // Now shift the digits, by repeatedly\
    \ multiplying by 10 and adding the last\n    // digit.\n    while tmp > 0 {\n\
    \        tmp = tmp * 10 + tmp % 10;\n        tmp = tmp / 10;\n    }\n    // Now\
    \ add the last digit back on.\n    tmp = tmp * 10 + ld;\n    tmp.to_string()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `n_digits` in this scope\n --> /tmp/tmp8hlz0a3v.rs:6:13\n\
    \  |\n6 |     let n = n_digits(x);\n  |             ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let s = x.to_string();\n    let n = s.len();\n    if shift >= n as isize\
    \ {\n        s.chars().rev().collect()\n    } else {\n        let (first, last)\
    \ = s.split_at(shift as usize);\n        format!(\"{}{}\", last, first)\n    }\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"010\"`,\n right: `\"001\"`', /tmp/tmprn7xwrz2.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut shift = shift;\n    let mut digits = Vec::new();\n\
    \    while x > 0 {\n        digits.push(x % 10);\n        x /= 10;\n    }\n  \
    \  while shift > digits.len() as isize {\n        shift -= digits.len() as isize;\n\
    \    }\n    if shift > 0 {\n        let mut new_digits = Vec::new();\n       \
    \ for i in 0..shift {\n            new_digits.push(digits[digits.len() - i as\
    \ usize - 1]);\n        }\n        for i in shift..digits.len() as isize {\n \
    \           new_digits.push(digits[i as usize - shift as usize]);\n        }\n\
    \        digits = new_digits;\n    }\n    digits.into_iter().map(|x| (x + 48)\
    \ as u8 as char).collect()\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"100\"`,\n right: `\"001\"`', /tmp/tmpsgeozy1w.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = to_digits(x);\n    digits.reverse();\n    for _ in 0..shift\
    \ {\n        let last = digits.pop().unwrap();\n        digits.insert(0, last);\n\
    \    }\n    digits.reverse();\n    digits.iter().map(|&x| std::char::from_digit(x\
    \ as u32, 10).unwrap()).collect()\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `to_digits` in this scope\n --> /tmp/tmpksg1i0rc.rs:5:22\n\
    \  |\n5 |     let mut digits = to_digits(x);\n  |                      ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = x.to_string();\n    for _ in 0..shift {\n        let c =\
    \ s.pop().unwrap();\n        s.insert(0, c);\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"97\"`,\n right: `\"79\"`', /tmp/tmpa676076i.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let s = x.to_string();\n    let y = x % 10isize.pow(shift as u32);\n\
    \    let z = x / 10isize.pow(shift as u32);\n    let mut out = format!(\"{}{}\"\
    , y, z);\n    if out.len() < s.len() {\n        out = format!(\"{}{}\", s.chars().nth(0).unwrap(),\
    \ out);\n    }\n    out\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"101\"`,\n right: `\"001\"`', /tmp/tmp60kjsqd7.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = String::new();\n    while x > 0\
    \ {\n        digits.push_str(&((x % 10) as u8).to_string());\n        x /= 10;\n\
    \    }\n    let digits = digits.chars().rev().collect::<String>();\n    if shift\
    \ > digits.len() as isize {\n        digits.chars().rev().collect::<String>()\n\
    \    } else {\n        digits[(shift as usize)..].to_string() + &digits[..(shift\
    \ as usize)]\n    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n \
    \   assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"010\"`,\n right: `\"001\"`', /tmp/tmpz6m4k0ja.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    if shift == 0 {\n        x.to_string()\n    } else {\n        format!(\"\
    {}{}\", x / 10_isize.pow(shift), x % 10_isize.pow(shift))\n    }\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpqydz3yji.rs:8:42\n  |\n8 |\
    \         format!(\"{}{}\", x / 10_isize.pow(shift), x % 10_isize.pow(shift))\n\
    \  |                                          ^^^^^ expected `u32`, found `isize`\n\
    \  |\nhelp: you can convert an `isize` to a `u32` and panic if the converted value\
    \ doesn't fit\n  |\n8 |         format!(\"{}{}\", x / 10_isize.pow(shift.try_into().unwrap()),\
    \ x % 10_isize.pow(shift))\n  |                                          ~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmpqydz3yji.rs:8:67\n  |\n8 |    \
    \     format!(\"{}{}\", x / 10_isize.pow(shift), x % 10_isize.pow(shift))\n  |\
    \                                                                   ^^^^^ expected\
    \ `u32`, found `isize`\n  |\nhelp: you can convert an `isize` to a `u32` and panic\
    \ if the converted value doesn't fit\n  |\n8 |         format!(\"{}{}\", x / 10_isize.pow(shift),\
    \ x % 10_isize.pow(shift.try_into().unwrap()))\n  |                          \
    \                                         ~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut num_digits = 0;\n    let mut y = 0;\n   \
    \ while x > 0 {\n        let d = x % 10;\n        x /= 10;\n        y = y * 10\
    \ + d;\n        num_digits += 1;\n    }\n    let mut shifted = y;\n    while num_digits\
    \ < shift {\n        shifted = shifted * 10 + y % 10;\n        num_digits += 1;\n\
    \    }\n    shifted.to_string()\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1\"`,\n right: `\"001\"`', /tmp/tmpoarxk69v.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let digits = util::int_to_digits(x);\n    let num_digits = digits.len();\n\
    \    let rshift = shift % num_digits;\n    let mut result = vec![];\n    for i\
    \ in 0..num_digits {\n        let digit = digits[(num_digits - rshift + i) % num_digits];\n\
    \        result.push(digit);\n    }\n    result.iter().map(|x| x.to_string()).collect()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `util`\n\
    \ --> /tmp/tmpe6ic7j9_.rs:5:18\n  |\n5 |     let digits = util::int_to_digits(x);\n\
    \  |                  ^^^^ use of undeclared crate or module `util`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = x.to_string();\n    let len = s.len();\n    let shift = shift\
    \ % len;\n    let (a, b) = s.split_at(len - shift as usize);\n    format!(\"{}{}\"\
    , b, a)\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpivvoa6vo.rs:7:25\n  |\n7 |\
    \     let shift = shift % len;\n  |                         ^^^ expected `isize`,\
    \ found `usize`\n\nerror[E0277]: cannot mod `isize` by `usize`\n --> /tmp/tmpivvoa6vo.rs:7:23\n\
    \  |\n7 |     let shift = shift % len;\n  |                       ^ no implementation\
    \ for `isize % usize`\n  |\n  = help: the trait `Rem<usize>` is not implemented\
    \ for `isize`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    if shift == 0 {\n        return x.to_string();\n    }\n    let mut digits\
    \ = x.to_string().chars().collect::<Vec<char>>();\n    let num_digits = digits.len();\n\
    \    let n = shift % num_digits;\n    let mut new_digits = digits.split_off(num_digits\
    \ - n);\n    new_digits.append(&mut digits);\n    new_digits.iter().collect()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppkg9e28e.rs:10:21\n   |\n\
    10 |     let n = shift % num_digits;\n   |                     ^^^^^^^^^^ expected\
    \ `isize`, found `usize`\n\nerror[E0277]: cannot mod `isize` by `usize`\n  -->\
    \ /tmp/tmppkg9e28e.rs:10:19\n   |\n10 |     let n = shift % num_digits;\n   |\
    \                   ^ no implementation for `isize % usize`\n   |\n   = help:\
    \ the trait `Rem<usize>` is not implemented for `isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmppkg9e28e.rs:11:56\n   |\n11 |     let mut new_digits =\
    \ digits.split_off(num_digits - n);\n   |                                    \
    \                    ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot\
    \ subtract `isize` from `usize`\n  --> /tmp/tmppkg9e28e.rs:11:54\n   |\n11 | \
    \    let mut new_digits = digits.split_off(num_digits - n);\n   |            \
    \                                          ^ no implementation for `usize - isize`\n\
    \   |\n   = help: the trait `Sub<isize>` is not implemented for `usize`\n\nerror:\
    \ aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut str = x.to_string();\n    if str.len() < shift as usize {\n \
    \       let mut new_str = str.chars().rev().collect::<String>();\n        new_str.push_str(&str);\n\
    \        new_str\n    } else {\n        let mut new_str = String::new();\n   \
    \     let vec = str.chars().collect::<Vec<char>>();\n        for i in 0..vec.len()\
    \ {\n            new_str.push(vec[((i as isize + shift) % vec.len() as isize)\
    \ as usize]);\n        }\n        new_str\n    }\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"010\"`,\n right: `\"001\"`', /tmp/tmp6tno3ru2.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut result = Vec::new();\n    let mut i = 0;\n\
    \    while x > 0 {\n        result.push(x % 10);\n        x /= 10;\n        i\
    \ += 1;\n    }\n    for _ in 0..(shift % i) {\n        result.rotate_right(1);\n\
    \    }\n    result.iter().map(|d| d.to_string()).collect()\n}\n\nfn main() {\n\
    \    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"010\"`,\n right: `\"001\"`', /tmp/tmpj34a_xh8.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut result = x.to_string();\n    let mut shift = shift;\n    if shift\
    \ >= result.len() as isize {\n        result.chars().rev().collect()\n    } else\
    \ {\n        while shift > 0 {\n            let shifted = result.pop().unwrap();\n\
    \            result.insert(0, shifted);\n            shift -= 1;\n        }\n\
    \        result\n    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"21\"`,\n right: `\"12\"`', /tmp/tmpupn17es8.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    if shift == 0 {\n        return x.to_string();\n    }\n    let mut digits\
    \ = x.to_string();\n    if shift > digits.len() as isize {\n        return digits.chars().rev().collect();\n\
    \    }\n    let (a, b) = digits.split_at(shift as usize);\n    let mut a = a.to_string();\n\
    \    let mut b = b.to_string();\n    a.push_str(&b);\n    return a;\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"100\"`,\n right: `\"001\"`', /tmp/tmpz5w6c100.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let s = x.to_string();\n    let n = s.len();\n    let s: String = s.chars().cycle().skip(shift\
    \ as usize % n).take(n).collect();\n    s\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"010\"`,\n right: `\"001\"`', /tmp/tmpk2d57xm3.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = Vec::new();\n    let mut x = x;\n    loop {\n      \
    \  if x == 0 {\n            break;\n        }\n        digits.push(x % 10);\n\
    \        x /= 10;\n    }\n    digits.reverse();\n    let num_digits = digits.len();\n\
    \    let mut shifted = digits;\n    shifted.rotate_right(shift as usize % num_digits);\n\
    \    shifted.iter().map(|d| format!(\"{}\", d)).collect()\n}\n\nfn main() {\n\
    \    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"97\"`,\n right: `\"79\"`', /tmp/tmpftgzydmb.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = isize_to_digits(x);\n    for _ in 0..shift {\n     \
    \   let digit = digits.pop().unwrap();\n        digits.insert(0, digit);\n   \
    \ }\n    digits_to_string(digits)\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `isize_to_digits` in this scope\n -->\
    \ /tmp/tmpz0geh7wr.rs:5:22\n  |\n5 |     let mut digits = isize_to_digits(x);\n\
    \  |                      ^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `digits_to_string` in this scope\n  --> /tmp/tmpz0geh7wr.rs:10:5\n\
    \   |\n10 |     digits_to_string(digits)\n   |     ^^^^^^^^^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string();\n    let num_digits = digits.len();\n\
    \    let length = num_digits;\n    let mut digits = digits.chars().collect::<Vec<char>>();\n\
    \    if shift < num_digits {\n        let mut shifted = Vec::with_capacity(length);\n\
    \        shifted.extend_from_slice(&digits[shift as usize..length]);\n       \
    \ shifted.extend_from_slice(&digits[0..shift as usize]);\n        shifted.iter().collect()\n\
    \    } else {\n        digits.reverse();\n        digits.iter().collect()\n  \
    \  }\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpzah12mx7.rs:9:16\n  |\n9 |\
    \     if shift < num_digits {\n  |                ^^^^^^^^^^ expected `isize`,\
    \ found `usize`\n  |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n  |\n9 |     if shift < num_digits.try_into().unwrap()\
    \ {\n  |                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    // Circular shift if shift < digits.\n    if shift < x.to_string().len()\
    \ as isize {\n        let mut digits = x.to_string().chars().collect::<Vec<char>>();\n\
    \        let mut tmp = digits[0];\n        for i in 1..digits.len() {\n      \
    \      let j = i as isize - shift;\n            if j < 0 {\n                digits[(i\
    \ + shift as usize) % digits.len()] = tmp;\n                tmp = digits[i];\n\
    \            } else {\n                digits[j as usize] = digits[i];\n     \
    \       }\n        }\n        digits[(digits.len() as isize - shift) as usize]\
    \ = tmp;\n        return digits.into_iter().collect();\n    }\n\n    // Otherwise,\
    \ reverse digits.\n    x.to_string().chars().rev().collect()\n}\n\nfn main() {\n\
    \    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0502]: cannot borrow `digits` as immutable because it is also borrowed\
    \ as mutable\n  --> /tmp/tmpv_1fjq21.rs:12:47\n   |\n12 |                 digits[(i\
    \ + shift as usize) % digits.len()] = tmp;\n   |                 ------------------------------^^^^^^-------\n\
    \   |                 |                             |\n   |                 |\
    \                             immutable borrow occurs here\n   |             \
    \    mutable borrow occurs here\n   |                 mutable borrow later used\
    \ here\n\nerror[E0502]: cannot borrow `digits` as immutable because it is also\
    \ borrowed as mutable\n  --> /tmp/tmpv_1fjq21.rs:18:17\n   |\n18 |         digits[(digits.len()\
    \ as isize - shift) as usize] = tmp;\n   |         --------^^^^^^----------------------------------\n\
    \   |         |       |\n   |         |       immutable borrow occurs here\n \
    \  |         mutable borrow occurs here\n   |         mutable borrow later used\
    \ here\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let digits = x.to_string();\n    let mut rotated = digits.clone();\n\
    \    for _ in 0..shift {\n        rotated = [rotated[rotated.len() - 1..].to_string(),\
    \ &rotated[..rotated.len() - 1]].join(\"\");\n    }\n    rotated\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbmdoxufg.rs:8:62\n  |\n8 |\
    \         rotated = [rotated[rotated.len() - 1..].to_string(), &rotated[..rotated.len()\
    \ - 1]].join(\"\");\n  |                                                     \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `String`, found `&str`\n\
    \  |\n  = note:   expected type `String`\n          found reference `&str`\nhelp:\
    \ try using a conversion method\n  |\n8 |         rotated = [rotated[rotated.len()\
    \ - 1..].to_string(), (&rotated[..rotated.len() - 1]).to_string()].join(\"\");\n\
    \  |                                                              +          \
    \                   +++++++++++++\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    if shift > number_of_digits(x) {\n        let mut digits = digits(x);\n\
    \        digits.reverse();\n        return digits.iter().map(|&d| (d + '0' as\
    \ isize) as u8 as char).collect();\n    }\n    let mut x = x;\n    let mut circular_shifted\
    \ = 0;\n    let mut idx = 0;\n    while x > 0 {\n        let last_digit = x %\
    \ 10;\n        x /= 10;\n        idx += 1;\n        circular_shifted = circular_shifted\
    \ * 10 + last_digit;\n        if idx == shift {\n            x = circular_shifted\
    \ + x * 10_isize.pow(shift as u32);\n            circular_shifted = 0;\n     \
    \       idx = 0;\n        }\n    }\n    x.to_string()\n}\n\nfn main() {\n    let\
    \ candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `number_of_digits` in this scope\n -->\
    \ /tmp/tmpeelldpi0.rs:5:16\n  |\n5 |     if shift > number_of_digits(x) {\n  |\
    \                ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find function `digits` in this scope\n --> /tmp/tmpeelldpi0.rs:6:26\n  |\n6\
    \ |         let mut digits = digits(x);\n  |                          ^^^^^^ not\
    \ found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut n = x;\n    let mut digit_count = 0;\n    let mut digits = Vec::new();\n\
    \    while n > 0 {\n        digits.push(n % 10);\n        n /= 10;\n        digit_count\
    \ += 1;\n    }\n    let s = shift % digit_count;\n    let mut r = String::new();\n\
    \    for i in 0..digit_count {\n        r.push_str(&(digits[(digit_count - s +\
    \ i) % digit_count].to_string()));\n    }\n    r\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmphmhg1v9n.rs:16:22\n\
    \   |\n16 |         r.push_str(&(digits[(digit_count - s + i) % digit_count].to_string()));\n\
    \   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    if shift == 0 {\n        return x.to_string();\n    }\n    let digits\
    \ = x.to_string().chars().collect::<Vec<char>>();\n    let n = digits.len();\n\
    \    let mut right_shift = shift;\n    if shift > n {\n        right_shift = shift\
    \ % n;\n    }\n    let mut shifted = digits.clone();\n    shifted.rotate_right(right_shift\
    \ as usize);\n    let mut result = String::new();\n    for c in shifted {\n  \
    \      result.push(c);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfdja1bb6.rs:11:16\n   |\n\
    11 |     if shift > n {\n   |                ^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n11 |     if shift > n.try_into().unwrap() {\n   | \
    \               ~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpfdja1bb6.rs:12:31\n   |\n12 |         right_shift = shift % n;\n   |\
    \                               ^ expected `isize`, found `usize`\n\nerror[E0277]:\
    \ cannot mod `isize` by `usize`\n  --> /tmp/tmpfdja1bb6.rs:12:29\n   |\n12 | \
    \        right_shift = shift % n;\n   |                             ^ no implementation\
    \ for `isize % usize`\n   |\n   = help: the trait `Rem<usize>` is not implemented\
    \ for `isize`\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let s = x.to_string();\n    let len = s.len() as isize;\n    let rot\
    \ = if shift > len {\n        shift % len\n    } else {\n        shift\n    };\n\
    \    let (a, b) = s.split_at(len as usize - rot as usize);\n    format!(\"{}{}\"\
    , b, a)\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"97\"`,\n right: `\"79\"`', /tmp/tmpgq1d4505.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let x = x.to_string();\n    let mut res = String::new();\n    let x_len\
    \ = x.len();\n    for i in 0..x_len {\n        res.push(x.chars().nth((i + shift\
    \ as usize) % x_len).unwrap());\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"010\"`,\n right: `\"001\"`', /tmp/tmp8h05eyb6.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    // number of digits in the number\n    let num_digits = x.to_string().len()\
    \ as isize;\n    let shift = shift % num_digits;\n    let shift = if shift < 0\
    \ { num_digits + shift } else { shift };\n    if shift == 0 {\n        x.to_string()\n\
    \    } else {\n        let left = x / 10_isize.pow(shift as u32);\n        let\
    \ right = x % 10_isize.pow(shift as u32);\n        let shifted = right * 10_isize.pow((num_digits\
    \ - shift) as u32) + left;\n        shifted.to_string()\n    }\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1\"`,\n right: `\"001\"`', /tmp/tmpcwnmadga.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let s = x.to_string();\n    let i = if shift > s.len() as isize {\n \
    \       s.len()\n    } else {\n        shift as usize\n    };\n    let (a, b)\
    \ = s.split_at(i);\n    b.to_string() + a\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"010\"`,\n right: `\"001\"`', /tmp/tmp74r_0z8s.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822862
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = utils::number_to_digits(x);\n    let length = digits.len();\n\
    \    if shift >= length as isize {\n        digits.reverse();\n        return\
    \ utils::digits_to_number(&digits);\n    }\n    let mut last = digits.split_off(length\
    \ - shift as usize);\n    digits.append(&mut last);\n    utils::digits_to_number(&digits)\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `utils`\n\
    \ --> /tmp/tmpbw6kdx8x.rs:5:22\n  |\n5 |     let mut digits = utils::number_to_digits(x);\n\
    \  |                      ^^^^^ use of undeclared crate or module `utils`\n\n\
    error[E0433]: failed to resolve: use of undeclared crate or module `utils`\n -->\
    \ /tmp/tmpbw6kdx8x.rs:9:16\n  |\n9 |         return utils::digits_to_number(&digits);\n\
    \  |                ^^^^^ use of undeclared crate or module `utils`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared crate or module `utils`\n  --> /tmp/tmpbw6kdx8x.rs:13:5\n\
    \   |\n13 |     utils::digits_to_number(&digits)\n   |     ^^^^^ use of undeclared\
    \ crate or module `utils`\n\nerror: aborting due to 3 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let digits = x.to_string();\n    let n = digits.len();\n    if shift\
    \ == n {\n        return digits;\n    } else if shift > n {\n        return digits.chars().rev().collect();\n\
    \    }\n    let s: String = digits[shift..].chars().collect();\n    let t: String\
    \ = digits[..shift].chars().collect();\n    s + &t\n}\n\nfn main() {\n    let\
    \ candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpl_6m4p9l.rs:7:17\n  |\n7 |\
    \     if shift == n {\n  |                 ^ expected `isize`, found `usize`\n\
    \  |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n  |\n7 |     if shift == n.try_into().unwrap() {\n  |   \
    \              ~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0308]: mismatched types\n --> /tmp/tmpl_6m4p9l.rs:9:23\n\
    \  |\n9 |     } else if shift > n {\n  |                       ^ expected `isize`,\
    \ found `usize`\n  |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n  |\n9 |     } else if shift > n.try_into().unwrap()\
    \ {\n  |                       ~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `RangeFrom<isize>`\n  --> /tmp/tmpl_6m4p9l.rs:12:21\n\
    \   |\n12 |     let s: String = digits[shift..].chars().collect();\n   |     \
    \                ^^^^^^^^^^^^^^^ `String` cannot be indexed by `RangeFrom<isize>`\n\
    \   |\n   = help: the trait `Index<RangeFrom<isize>>` is not implemented for `String`\n\
    \nerror[E0277]: the type `String` cannot be indexed by `RangeTo<isize>`\n  -->\
    \ /tmp/tmpl_6m4p9l.rs:13:21\n   |\n13 |     let t: String = digits[..shift].chars().collect();\n\
    \   |                     ^^^^^^^^^^^^^^^ `String` cannot be indexed by `RangeTo<isize>`\n\
    \   |\n   = help: the trait `Index<RangeTo<isize>>` is not implemented for `String`\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = 0;\n    let mut factor = 1;\n  \
    \  while x > 0 {\n        x /= 10;\n        digits += 1;\n        factor *= 10;\n\
    \    }\n    factor /= 10;\n    let mut result = String::new();\n    x = x % factor;\n\
    \    while digits > 0 {\n        digits -= 1;\n        let digit = (x % 10) as\
    \ u8;\n        result.push(b'0' + digit);\n        x /= 10;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp36g60o0r.rs:19:21\n   |\n\
    19 |         result.push(b'0' + digit);\n   |                     ^^^^^^^^^^^^\
    \ expected `char`, found `u8`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let s = x.to_string();\n    let len = s.len() as isize;\n    let shift\
    \ = shift % len;\n    let (a, b) = s.split_at(len as usize - shift as usize);\n\
    \    format!(\"{}{}\", b, a)\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"97\"`,\n right: `\"79\"`', /tmp/tmpa6snkix3.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822862
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let s = format!(\"{}\", x);\n    let len = s.len() as isize;\n    let\
    \ mut res = String::new();\n    for c in s.chars() {\n        let idx = (c as\
    \ isize - '0' as isize + shift) % len;\n        res.push(if idx >= 0 {\n     \
    \       (idx + '0' as isize) as u8 as char\n        } else {\n            ((idx\
    \ + len) + '0' as isize) as u8 as char\n        });\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"022\"`,\n right: `\"001\"`', /tmp/tmpwlj008i5.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822862
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let str_x = x.to_string();\n    let len = str_x.len() as isize;\n   \
    \ let str_shifted = str_x.chars().rev().skip((shift % len) as usize).chain(str_x.chars().rev()).take(len\
    \ as usize).collect::<String>();\n    str_shifted.chars().rev().collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"97\"`,\n right: `\"79\"`', /tmp/tmp7fr5e49y.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822862
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let digits = x.to_string();\n    let length = digits.len();\n    let\
    \ mut result = String::with_capacity(length);\n    let shift = shift % length;\n\
    \    if shift == 0 {\n        return digits;\n    }\n    if shift < 0 {\n    \
    \    // Left shift\n        let shift = -shift;\n        result.push_str(&digits[length\
    \ - shift..]);\n        result.push_str(&digits[..length - shift]);\n    } else\
    \ {\n        // Right shift\n        result.push_str(&digits[shift..]);\n    \
    \    result.push_str(&digits[..shift]);\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpvdkeirc5.rs:8:25\n  |\n8 |\
    \     let shift = shift % length;\n  |                         ^^^^^^ expected\
    \ `isize`, found `usize`\n\nerror[E0277]: cannot mod `isize` by `usize`\n -->\
    \ /tmp/tmpvdkeirc5.rs:8:23\n  |\n8 |     let shift = shift % length;\n  |    \
    \                   ^ no implementation for `isize % usize`\n  |\n  = help: the\
    \ trait `Rem<usize>` is not implemented for `isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpvdkeirc5.rs:15:42\n   |\n15 |         result.push_str(&digits[length\
    \ - shift..]);\n   |                                          ^^^^^ expected `usize`,\
    \ found `isize`\n\nerror[E0277]: cannot subtract `isize` from `usize`\n  --> /tmp/tmpvdkeirc5.rs:15:40\n\
    \   |\n15 |         result.push_str(&digits[length - shift..]);\n   |        \
    \                                ^ no implementation for `usize - isize`\n   |\n\
    \   = help: the trait `Sub<isize>` is not implemented for `usize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpvdkeirc5.rs:16:44\n   |\n16 |         result.push_str(&digits[..length\
    \ - shift]);\n   |                                            ^^^^^ expected `usize`,\
    \ found `isize`\n\nerror[E0277]: cannot subtract `isize` from `usize`\n  --> /tmp/tmpvdkeirc5.rs:16:42\n\
    \   |\n16 |         result.push_str(&digits[..length - shift]);\n   |        \
    \                                  ^ no implementation for `usize - isize`\n \
    \  |\n   = help: the trait `Sub<isize>` is not implemented for `usize`\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `RangeFrom<isize>`\n  --> /tmp/tmpvdkeirc5.rs:19:26\n\
    \   |\n19 |         result.push_str(&digits[shift..]);\n   |                 \
    \         ^^^^^^^^^^^^^^^ `String` cannot be indexed by `RangeFrom<isize>`\n \
    \  |\n   = help: the trait `Index<RangeFrom<isize>>` is not implemented for `String`\n\
    \nerror[E0277]: the type `String` cannot be indexed by `RangeTo<isize>`\n  -->\
    \ /tmp/tmpvdkeirc5.rs:20:26\n   |\n20 |         result.push_str(&digits[..shift]);\n\
    \   |                          ^^^^^^^^^^^^^^^ `String` cannot be indexed by `RangeTo<isize>`\n\
    \   |\n   = help: the t"
  stdout: ''
  timestamp: 1659822861
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let s = format!(\"{}\", x);\n    let len = s.len() as isize;\n    let\
    \ mut res = s.chars().skip(shift as usize % len as usize).collect::<String>();\n\
    \    if shift < len {\n        res.push_str(&s[..shift as usize]);\n    } else\
    \ {\n        res.push_str(&s.chars().rev().collect::<String>());\n    }\n    res\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"010\"`,\n right: `\"001\"`', /tmp/tmpfngbe70j.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822862
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x.abs();\n    let mut num = String::new();\n    let num_digits\
    \ = (x as f64).log10().ceil() as isize;\n    while x > 0 {\n        let digit\
    \ = x % 10;\n        x /= 10;\n        num.push_str(&digit.to_string());\n   \
    \ }\n    if shift >= num_digits {\n        return num.chars().rev().collect();\n\
    \    }\n    let (left, right) = num.split_at(shift as usize);\n    format!(\"\
    {}{}\", right, left)\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"100\"`,\n right: `\"001\"`', /tmp/tmp3pd_5xj5.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822862
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let s = x.to_string();\n    let idx = s.len() - shift as usize;\n   \
    \ let s = s.chars().cycle().skip(idx).take(s.len()).collect::<String>();\n   \
    \ s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmpd_xe8wdz.rs:6:15

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822862
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut chars: Vec<char> = x.to_string().chars().collect();\n    let\
    \ len = chars.len();\n    if shift >= len as isize {\n        chars.reverse();\n\
    \        return chars.into_iter().collect();\n    }\n    let mut chars: Vec<char>\
    \ = chars.split_off(len - shift as usize);\n    chars.append(&mut x.to_string().chars().collect());\n\
    \    chars.into_iter().collect()\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"00100\"`,\n right: `\"001\"`', /tmp/tmpgxnbq2te.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822862
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let digits = x.to_string();\n    let mut digits_vec: Vec<char> = digits.chars().collect();\n\
    \    for _ in 0..shift {\n        let tmp = digits_vec.pop().unwrap();\n     \
    \   digits_vec.insert(0, tmp);\n    }\n    let mut result = String::new();\n \
    \   for c in digits_vec {\n        result.push(c);\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"97\"`,\n right: `\"79\"`', /tmp/tmpqxja4lk8.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822862
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut reversed_x: Vec<char> = x.to_string().chars().rev().collect();\n\
    \    let size = reversed_x.len();\n    let shift = shift % size;\n    let mut\
    \ new_x: Vec<char> = Vec::new();\n    for i in 0..size {\n        new_x.push(reversed_x[(size\
    \ - shift + i) % size]);\n    }\n    new_x.into_iter().rev().collect()\n}\n\n\
    fn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp7hhk_8or.rs:7:25\n  |\n7 |\
    \     let shift = shift % size;\n  |                         ^^^^ expected `isize`,\
    \ found `usize`\n\nerror[E0277]: cannot mod `isize` by `usize`\n --> /tmp/tmp7hhk_8or.rs:7:23\n\
    \  |\n7 |     let shift = shift % size;\n  |                       ^ no implementation\
    \ for `isize % usize`\n  |\n  = help: the trait `Rem<usize>` is not implemented\
    \ for `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7hhk_8or.rs:10:39\n\
    \   |\n10 |         new_x.push(reversed_x[(size - shift + i) % size]);\n   | \
    \                                      ^^^^^ expected `usize`, found `isize`\n\
    \nerror[E0277]: cannot subtract `isize` from `usize`\n  --> /tmp/tmp7hhk_8or.rs:10:37\n\
    \   |\n10 |         new_x.push(reversed_x[(size - shift + i) % size]);\n   | \
    \                                    ^ no implementation for `usize - isize`\n\
    \   |\n   = help: the trait `Sub<isize>` is not implemented for `usize`\n\nerror:\
    \ aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659822862
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string().chars().collect::<Vec<char>>();\n    let\
    \ n = digits.len();\n    if shift > n {\n        return digits.into_iter().rev().collect();\n\
    \    }\n    digits.rotate_right(shift as usize);\n    digits.into_iter().collect()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpyz7xx0qz.rs:7:16\n  |\n7 |\
    \     if shift > n {\n  |                ^ expected `isize`, found `usize`\n \
    \ |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n  |\n7 |     if shift > n.try_into().unwrap() {\n  |    \
    \            ~~~~~~~~~~~~~~~~~~~~~\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822861
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = format!(\"{}\", x);\n    let len = s.len();\n    let mut\
    \ i = 0;\n    while i < shift {\n        let y = s.chars().last().unwrap();\n\
    \        s.remove(len - 1);\n        s.insert(0, y);\n        i += 1;\n    }\n\
    \    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"97\"`,\n right: `\"79\"`', /tmp/tmpq82dwfwb.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822862
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let x = x.to_string();\n    let mut y = x.clone();\n    if shift > x.len()\
    \ as isize {\n        y.chars().rev().collect()\n    } else {\n        let mut\
    \ r = y.split_off(shift as usize);\n        r.push_str(&y);\n        r\n    }\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"010\"`,\n right: `\"001\"`', /tmp/tmpo3ozzmhh.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822862
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let n_digits = ((x as f64).log10() + 1.0) as isize;\n    let n_shift\
    \ = n_digits - shift;\n    let mut s = Vec::with_capacity(n_digits as usize);\n\
    \    let mut v = x;\n    for _ in 0..n_digits {\n        s.push((v % 10) as u8);\n\
    \        v /= 10;\n    }\n    let mut new_s = Vec::with_capacity(n_digits as usize);\n\
    \    for i in 0..n_digits {\n        new_s.push(s[(i + n_shift) % n_digits as\
    \ usize]);\n    }\n    String::from_utf8(new_s).unwrap()\n}\n\nfn main() {\n \
    \   let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpk5lxfdxf.rs:15:38\n   |\n\
    15 |         new_s.push(s[(i + n_shift) % n_digits as usize]);\n   |         \
    \                             ^^^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n\
    \nerror[E0277]: cannot mod `isize` by `usize`\n  --> /tmp/tmpk5lxfdxf.rs:15:36\n\
    \   |\n15 |         new_s.push(s[(i + n_shift) % n_digits as usize]);\n   |  \
    \                                  ^ no implementation for `isize % usize`\n \
    \  |\n   = help: the trait `Rem<usize>` is not implemented for `isize`\n\nerror[E0277]:\
    \ the type `[u8]` cannot be indexed by `isize`\n  --> /tmp/tmpk5lxfdxf.rs:15:20\n\
    \   |\n15 |         new_s.push(s[(i + n_shift) % n_digits as usize]);\n   |  \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[u8]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<u8>`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659822862
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let digits = format!(\"{}\", x);\n    let mut shift = shift % digits.len()\
    \ as isize;\n    if shift < 0 {\n        shift += digits.len() as isize;\n   \
    \ }\n    let digits = digits.chars().rev().collect::<String>();\n    let (mut\
    \ prefix, suffix) = digits.split_at(shift as usize);\n    prefix = prefix.chars().rev().collect::<String>();\n\
    \    format!(\"{}{}\", suffix, prefix)\n}\n\nfn main() {\n    let candidate =\
    \ circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvh07kbp6.rs:12:14\n   |\n\
    12 |     prefix = prefix.chars().rev().collect::<String>();\n   |            \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |              |\n   |       \
    \       expected `&str`, found struct `String`\n   |              help: consider\
    \ borrowing here: `&prefix.chars().rev().collect::<String>()`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659822862
- exit_code: 0
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    //assert!(x > 0);\n    let str = x.to_string();\n    let len = str.len();\n\
    \    if shift > len as isize {\n        str.chars().rev().collect()\n    } else\
    \ {\n        let mut vec = vec![];\n        let end = shift as usize;\n      \
    \  let start = len - end;\n        vec.extend(str.chars().skip(start).take(end));\n\
    \        vec.extend(str.chars().take(start));\n        vec.into_iter().collect()\n\
    \    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822862
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let s = x.to_string();\n    let l = s.len();\n    if shift >= l as isize\
    \ {\n        s.chars().rev().collect()\n    } else {\n        let (a, b) = s.split_at(l\
    \ - shift as usize);\n        format!(\"{}{}\", b, a)\n    }\n}\n\nfn main() {\n\
    \    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"21\"`,\n right: `\"12\"`', /tmp/tmp7imjaz1q.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822862
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    if shift == 0 {\n        return x.to_string();\n    }\n    let str =\
    \ x.to_string();\n    let s: String = str.chars().rev().collect();\n    let s\
    \ = s.chars().cycle().skip(shift as usize).take(str.len()).collect();\n    s.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmp4dv_qv78.rs:11:5\n\
    \   |\n10 |     let s = s.chars().cycle().skip(shift as usize).take(str.len()).collect();\n\
    \   |         - consider giving `s` a type\n11 |     s.chars().rev().collect()\n\
    \   |     ^ cannot infer type\n   |\n   = note: type must be known at this point\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659822862
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let n = number_of_digits(x);\n    let reverse = n < shift;\n    let shift\
    \ = shift % n;\n    let mut y = x;\n    for _ in 0..shift {\n        let d = y\
    \ % 10;\n        y = y / 10 + d * pow(10, n - 1);\n    }\n    if reverse {\n \
    \       y.to_string()\n            .chars()\n            .rev()\n            .collect::<String>()\n\
    \    } else {\n        y.to_string()\n    }\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `number_of_digits` in this scope\n -->\
    \ /tmp/tmpqnadzpof.rs:5:13\n  |\n5 |     let n = number_of_digits(x);\n  |   \
    \          ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ function `pow` in this scope\n  --> /tmp/tmpqnadzpof.rs:11:26\n   |\n11 |  \
    \       y = y / 10 + d * pow(10, n - 1);\n   |                          ^^^ not\
    \ found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822862
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let s = x.to_string();\n    let mut t = s.clone();\n    let n = s.len();\n\
    \    let mut shift = shift;\n    while shift > n {\n        shift -= n;\n    }\n\
    \    for i in 0..n {\n        let j = (i + shift) % n;\n        t.replace_range(j..j\
    \ + 1, &s[i..i + 1]);\n    }\n    t\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp00zom_sn.rs:9:19\n  |\n9 |\
    \     while shift > n {\n  |                   ^ expected `isize`, found `usize`\n\
    \  |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n  |\n9 |     while shift > n.try_into().unwrap() {\n  | \
    \                  ~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmp00zom_sn.rs:10:18\n   |\n10 |         shift -= n;\n   |        \
    \          ^ expected `isize`, found `usize`\n\nerror[E0277]: cannot subtract-assign\
    \ `usize` from `isize`\n  --> /tmp/tmp00zom_sn.rs:10:15\n   |\n10 |         shift\
    \ -= n;\n   |               ^^ no implementation for `isize -= usize`\n   |\n\
    \   = help: the trait `SubAssign<usize>` is not implemented for `isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp00zom_sn.rs:13:22\n   |\n13 |         let j\
    \ = (i + shift) % n;\n   |                      ^^^^^ expected `usize`, found\
    \ `isize`\n\nerror[E0277]: cannot add `isize` to `usize`\n  --> /tmp/tmp00zom_sn.rs:13:20\n\
    \   |\n13 |         let j = (i + shift) % n;\n   |                    ^ no implementation\
    \ for `usize + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `usize`\n\nerror: aborting due to 5 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659822862
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = x.to_string();\n    if shift >= s.len() as isize {\n    \
    \    s.chars().rev().collect()\n    } else {\n        let (a, b) = s.split_at(shift\
    \ as usize);\n        let mut res = b.to_string();\n        res.push_str(a);\n\
    \        res\n    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n \
    \   assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"010\"`,\n right: `\"001\"`', /tmp/tmp_ausxsym.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822862
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut d = format!(\"{}\", x);\n    let m = d.len() as isize;\n    if\
    \ shift > m {\n        let mut x = x;\n        let mut r = String::with_capacity(d.len());\n\
    \        for _ in 0..m {\n            r.push_str(&format!(\"{}\", x % 10));\n\
    \            x /= 10;\n        }\n        r\n    } else {\n        let mut y =\
    \ 0;\n        for i in 0..m {\n            let j = (i + shift) % m;\n        \
    \    y = y * 10 + d.bytes().nth(j as usize).unwrap() - b'0';\n        }\n    \
    \    format!(\"{}\", y)\n    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"10\"`,\n right: `\"001\"`', /tmp/tmp3r_qnq7l.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822862
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    if shift >= num_digits(x) {\n        let mut res\
    \ = 0;\n        while x > 0 {\n            res = res * 10 + x % 10;\n        \
    \    x /= 10;\n        }\n        return res.to_string();\n    }\n    while shift\
    \ > 0 {\n        let c = x % 10;\n        x /= 10;\n        x += c * (10_isize.pow(num_digits(x)\
    \ as u32));\n        shift -= 1;\n    }\n    x.to_string()\n}\n\nfn main() {\n\
    \    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `num_digits` in this scope\n --> /tmp/tmp89ncwr7g.rs:6:17\n\
    \  |\n6 |     if shift >= num_digits(x) {\n  |                 ^^^^^^^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find function `num_digits` in this\
    \ scope\n  --> /tmp/tmp89ncwr7g.rs:17:32\n   |\n17 |         x += c * (10_isize.pow(num_digits(x)\
    \ as u32));\n   |                                ^^^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822862
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let digits = number_of_digits(x);\n    let mut shift = shift % digits;\n\
    \    let mut x = x;\n    let mut s = String::new();\n    while shift > 0 {\n \
    \       let right = x % 10;\n        x /= 10;\n        s.push_str(&right.to_string());\n\
    \        shift -= 1;\n    }\n    s.push_str(&x.to_string());\n    return s;\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `number_of_digits` in this scope\n -->\
    \ /tmp/tmpjl82h1ej.rs:5:18\n  |\n5 |     let digits = number_of_digits(x);\n \
    \ |                  ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659822862
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = x.to_string();\n    let d = s.len();\n    let n = shift %\
    \ d;\n    if n == 0 {\n        return s;\n    }\n    let (a, b) = s.split_at(d\
    \ - n as usize);\n    format!(\"{}{}\", b, a)\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmprh20owpf.rs:7:21\n  |\n7 |\
    \     let n = shift % d;\n  |                     ^ expected `isize`, found `usize`\n\
    \nerror[E0277]: cannot mod `isize` by `usize`\n --> /tmp/tmprh20owpf.rs:7:19\n\
    \  |\n7 |     let n = shift % d;\n  |                   ^ no implementation for\
    \ `isize % usize`\n  |\n  = help: the trait `Rem<usize>` is not implemented for\
    \ `isize`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659822862
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    if shift == 0 {\n        return x.to_string();\n    }\n    let s: String\
    \ = x.to_string();\n    let mut res: String = \"\".to_string();\n    let l = s.len();\n\
    \    let start = (l - (shift as usize)) % l;\n    let mut j = start;\n    loop\
    \ {\n        res = res + &s[j..j + 1];\n        j = (j + 1) % l;\n        if j\
    \ == start {\n            break;\n        }\n    }\n    res\n}\n\nfn main() {\n\
    \    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmpkoy6mr3j.rs:11:17

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822862
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let str = x.to_string();\n    let str_len = str.len();\n    let mut tmp\
    \ = String::new();\n    for i in 0..str_len {\n        tmp.push(str.chars().nth((i\
    \ + shift) % str_len).unwrap());\n    }\n    tmp\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpr2ms_shn.rs:9:39\n  |\n9 |\
    \         tmp.push(str.chars().nth((i + shift) % str_len).unwrap());\n  |    \
    \                                   ^^^^^ expected `usize`, found `isize`\n\n\
    error[E0277]: cannot add `isize` to `usize`\n --> /tmp/tmpr2ms_shn.rs:9:37\n \
    \ |\n9 |         tmp.push(str.chars().nth((i + shift) % str_len).unwrap());\n\
    \  |                                     ^ no implementation for `usize + isize`\n\
    \  |\n  = help: the trait `Add<isize>` is not implemented for `usize`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659822862
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut s = String::new();\n    for _ in 0..shift\
    \ {\n        s.push(((x % 10) + ('0' as isize)) as u8 as char);\n        x /=\
    \ 10;\n    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n \
    \   assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"00\"`,\n right: `\"001\"`', /tmp/tmppwi72r3z.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822862
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let n = number_of_digits(x);\n    let shift = shift % n;\n    let mut\
    \ s = format!(\"{}\", x);\n    if shift > 0 {\n        let mut parts = vec![];\n\
    \        let mut part = s.split_off(n - shift as usize);\n        parts.push(part);\n\
    \        parts.push(s);\n        s = parts.join(\"\");\n    }\n    s\n}\n\nfn\
    \ main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `number_of_digits` in this scope\n -->\
    \ /tmp/tmp52u5uv8k.rs:5:13\n  |\n5 |     let n = number_of_digits(x);\n  |   \
    \          ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659822862
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    if shift == 0 {\n        return x.to_string();\n    }\n    let mut s\
    \ = format!(\"{}\", x);\n    for _ in 0..shift {\n        let c = s.pop().unwrap();\n\
    \        s.insert(0, c);\n    }\n    s\n}\n\nfn main() {\n    let candidate =\
    \ circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"97\"`,\n right: `\"79\"`', /tmp/tmpc5oiy37g.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822862
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string();\n    let num_digits = digits.len();\n\
    \    let shift = shift % num_digits;\n    let (left, right) = digits.split_at(num_digits\
    \ - shift as usize);\n    let mut result = right.to_string();\n    result.push_str(left);\n\
    \    result\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpyvn3g41u.rs:7:25\n  |\n7 |\
    \     let shift = shift % num_digits;\n  |                         ^^^^^^^^^^\
    \ expected `isize`, found `usize`\n\nerror[E0277]: cannot mod `isize` by `usize`\n\
    \ --> /tmp/tmpyvn3g41u.rs:7:23\n  |\n7 |     let shift = shift % num_digits;\n\
    \  |                       ^ no implementation for `isize % usize`\n  |\n  = help:\
    \ the trait `Rem<usize>` is not implemented for `isize`\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659822862
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let x = x.to_string();\n    let len = x.len();\n    if shift >= len as\
    \ isize {\n        let x = x.chars().rev().collect::<String>();\n        return\
    \ x;\n    }\n    let mut x_str = x.clone();\n    for i in 0..shift {\n       \
    \ let c = x_str.remove(0);\n        x_str.push(c);\n    }\n    x_str\n}\n\nfn\
    \ main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"010\"`,\n right: `\"001\"`', /tmp/tmp071btc3d.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822862
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = Vec::new();\n    let mut x = x;\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    let mut result = Vec::new();\n\
    \    for i in 0..digits.len() {\n        result.push(digits[(i + shift as usize)\
    \ % digits.len()]);\n    }\n    result.into_iter().map(|d| d.to_string()).collect()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"100\"`,\n right: `\"001\"`', /tmp/tmpjku9mmjf.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822862
- exit_code: 0
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let digits = x.to_string();\n    let len = digits.len();\n    if shift\
    \ > len as isize {\n        return digits.chars().rev().collect();\n    }\n  \
    \  let (rest, head) = digits.split_at(len - shift as usize);\n    let mut res\
    \ = head.to_string();\n    res.push_str(rest);\n    res\n}\n\nfn main() {\n  \
    \  let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822862
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let digits = x.to_string();\n    let len = digits.len();\n    let shift\
    \ = shift % len;\n    let (left, right) = digits.split_at(len - shift as usize);\n\
    \    if shift == 0 {\n        digits\n    } else {\n        format!(\"{}{}\",\
    \ right, left)\n    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpqr4f22yf.rs:7:25\n  |\n7 |\
    \     let shift = shift % len;\n  |                         ^^^ expected `isize`,\
    \ found `usize`\n\nerror[E0277]: cannot mod `isize` by `usize`\n --> /tmp/tmpqr4f22yf.rs:7:23\n\
    \  |\n7 |     let shift = shift % len;\n  |                       ^ no implementation\
    \ for `isize % usize`\n  |\n  = help: the trait `Rem<usize>` is not implemented\
    \ for `isize`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659822862
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let x = x.to_string();\n    let x_len = x.len();\n    let mut result\
    \ = String::new();\n    for i in 0..x_len {\n        let mut j = i + shift;\n\
    \        if j >= x_len {\n            j = j - x_len;\n        }\n        result.push(x.chars().nth(j).unwrap());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = circular_shift;\n  \
    \  assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmphci94z3p.rs:9:25\n  |\n9 |\
    \         let mut j = i + shift;\n  |                         ^^^^^ expected `usize`,\
    \ found `isize`\n\nerror[E0277]: cannot add `isize` to `usize`\n --> /tmp/tmphci94z3p.rs:9:23\n\
    \  |\n9 |         let mut j = i + shift;\n  |                       ^ no implementation\
    \ for `usize + isize`\n  |\n  = help: the trait `Add<isize>` is not implemented\
    \ for `usize`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659822862
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string().chars().collect::<Vec<char>>();\n    let\
    \ n = digits.len();\n    for _ in 0..shift {\n        let d = digits[n - 1];\n\
    \        digits.remove(n - 1);\n        digits.insert(0, d);\n    }\n    digits.iter().collect()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"97\"`,\n right: `\"79\"`', /tmp/tmpspb9keed.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822862
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let digits =\n        std::iter::successors(Some(x), |&x| match x / 10\
    \ { 0 => None, i => Some(i) });\n    let mut shifted = digits.clone().skip(shift\
    \ as usize).chain(digits.take(shift as usize));\n    shifted.map(|x| std::char::from_digit(x\
    \ as u32 % 10, 10).unwrap()).collect()\n}\n\nfn main() {\n    let candidate =\
    \ circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"100\"`,\n right: `\"001\"`', /tmp/tmpbnw3mji3.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822862
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let digits = num_decimal_digits(x);\n    if shift > digits {\n      \
    \  return x.to_string().chars().rev().collect();\n    }\n    let mut digits =\
    \ x.to_string().chars().collect::<Vec<char>>();\n    let x_shift = (digits.len()\
    \ - shift as usize) % digits.len();\n    digits.rotate_right(x_shift);\n    digits.iter().collect()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `num_decimal_digits` in this scope\n\
    \ --> /tmp/tmpw1ramxq9.rs:5:18\n  |\n5 |     let digits = num_decimal_digits(x);\n\
    \  |                  ^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659822862
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x.to_string();\n    let l = x.len();\n    let s = shift %\
    \ l;\n    if s > 0 {\n        let (left, right) = x.split_at(l - s as usize);\n\
    \        return right.to_string() + left;\n    }\n    x\n}\n\nfn main() {\n  \
    \  let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpeas5_7zn.rs:7:21\n  |\n7 |\
    \     let s = shift % l;\n  |                     ^ expected `isize`, found `usize`\n\
    \nerror[E0277]: cannot mod `isize` by `usize`\n --> /tmp/tmpeas5_7zn.rs:7:19\n\
    \  |\n7 |     let s = shift % l;\n  |                   ^ no implementation for\
    \ `isize % usize`\n  |\n  = help: the trait `Rem<usize>` is not implemented for\
    \ `isize`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659822862
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = x.to_string();\n    if shift > s.len() as isize {\n     \
    \   s.chars().rev().collect()\n    } else {\n        let (front, back) = s.split_at(shift\
    \ as usize);\n        back.to_string() + front\n    }\n}\n\nfn main() {\n    let\
    \ candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"010\"`,\n right: `\"001\"`', /tmp/tmp8p7slqnw.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822862
- exit_code: 0
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = format!(\"{}\", x);\n    let len = s.len();\n    if shift\
    \ > len as isize {\n        return s.chars().rev().collect();\n    }\n    let\
    \ shift = shift as usize;\n    let a = s.chars().skip(len - shift).collect::<String>();\n\
    \    let b = s.chars().take(len - shift).collect::<String>();\n    a + &b\n}\n\
    \nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822862
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = format!(\"{}\", x);\n    let l = s.len();\n    let c = s.chars().collect::<Vec<char>>();\n\
    \    let mut v = vec![];\n    for i in 0..l {\n        v.push(c[(i + shift) %\
    \ l]);\n    }\n    v.iter().cloned().collect()\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpejcl98ri.rs:10:23\n   |\n\
    10 |         v.push(c[(i + shift) % l]);\n   |                       ^^^^^ expected\
    \ `usize`, found `isize`\n\nerror[E0277]: cannot add `isize` to `usize`\n  -->\
    \ /tmp/tmpejcl98ri.rs:10:21\n   |\n10 |         v.push(c[(i + shift) % l]);\n\
    \   |                     ^ no implementation for `usize + isize`\n   |\n   =\
    \ help: the trait `Add<isize>` is not implemented for `usize`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659822862
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut result = \"\".to_string();\n    if shift == 0 {\n        result.push_str(&x.to_string());\n\
    \    } else {\n        let mut x = x;\n        let mut digits = Vec::new();\n\
    \        while x > 0 {\n            digits.push(x % 10);\n            x /= 10;\n\
    \        }\n        let mut idx = 0;\n        for _ in 0..shift {\n          \
    \  if idx >= digits.len() {\n                idx = 0;\n            }\n       \
    \     result.push_str(&digits[idx].to_string());\n            idx += 1;\n    \
    \    }\n    }\n    result\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"00\"`,\n right: `\"001\"`', /tmp/tmpo8z3gb39.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822862
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let s = x.to_string();\n    let mut res = String::with_capacity(s.len());\n\
    \    let shift = shift % s.len();\n    for i in 0..s.len() {\n        let offset\
    \ = (i + shift) % s.len();\n        res.push(s.chars().nth(offset).unwrap());\n\
    \    }\n    res\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp_m2fpepp.rs:7:25\n  |\n7 |\
    \     let shift = shift % s.len();\n  |                         ^^^^^^^ expected\
    \ `isize`, found `usize`\n\nerror[E0277]: cannot mod `isize` by `usize`\n -->\
    \ /tmp/tmp_m2fpepp.rs:7:23\n  |\n7 |     let shift = shift % s.len();\n  |   \
    \                    ^ no implementation for `isize % usize`\n  |\n  = help: the\
    \ trait `Rem<usize>` is not implemented for `isize`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp_m2fpepp.rs:9:27\n  |\n9 |         let offset = (i + shift)\
    \ % s.len();\n  |                           ^^^^^ expected `usize`, found `isize`\n\
    \nerror[E0277]: cannot add `isize` to `usize`\n --> /tmp/tmp_m2fpepp.rs:9:25\n\
    \  |\n9 |         let offset = (i + shift) % s.len();\n  |                   \
    \      ^ no implementation for `usize + isize`\n  |\n  = help: the trait `Add<isize>`\
    \ is not implemented for `usize`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659822862
