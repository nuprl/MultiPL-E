name: HumanEval_30_get_positive
language: rs
prompt: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
  \ -> Vec<isize> {\n"
tests: "}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
  \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
  \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
  \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
  }\n"
completions: ["    // Complete this function\n    let mut v = Vec::new();\n    for\
    \ x in l {\n        if x > 0 {\n            v.push(x);\n        }\n    }\n   \
    \ v", "    let mut l = l;\n    let mut i = 0;\n    while i < l.len() {\n     \
    \   if l[i] < 0 {\n            l.remove(i);\n        } else {\n            i +=\
    \ 1;\n        }\n    }\n    l", "    let mut res = Vec::new();\n    for n in l\
    \ {\n        if n > 0 {\n            res.push(n);\n        }\n    }\n    res",
  "    let mut v = Vec::new();\n    for i in l {\n        if i > 0 {\n           \
    \ v.push(i);\n        }\n    }\n    v", '    l.into_iter().filter(|x| *x > 0).collect()',
  '    l.into_iter().filter(|&x| x > 0).collect()', "    let mut res = Vec::<isize>::new();\n\
    \    for i in l {\n        if i > 0 {\n            res.push(i);\n        }\n \
    \   }\n    res", '    l.into_iter().filter(|x| *x > 0).collect()', "\tl.into_iter().filter(|&x|\
    \ x > 0).collect()", '    l.into_iter().filter(|i| *i > 0).collect()', '    l.into_iter().filter(|&x|
    x > 0).collect()', '    unimplemented!();', '    l.into_iter().filter(|&x| x >
    0).collect()', "    let mut v: Vec<isize> = Vec::new();\n    for e in l {\n  \
    \      if e > 0 {\n            v.push(e);\n        }\n    }\n    v", "    let\
    \ mut result = Vec::new();\n    for i in l {\n        if i > 0 {\n           \
    \ result.push(i);\n        }\n    }\n    result", "    let mut r: Vec<isize> =\
    \ Vec::new();\n    for i in l {\n        if i > 0 {\n            r.push(i);\n\
    \        }\n    }\n    r", '    l.into_iter().filter(|&x| x > 0).collect()', " \
    \   let mut out: Vec<isize> = Vec::new();\n    for i in l {\n        if i > 0\
    \ {\n            out.push(i);\n        }\n    }\n    out", '    l.into_iter().filter(|&x|
    x > 0).collect()', '    l.into_iter().filter(|&n| n > 0).collect()', '    l.into_iter().filter(|x|
    *x > 0).collect()', "    let mut result = Vec::new();\n    for n in l {\n    \
    \    if n > 0 {\n            result.push(n);\n        }\n    }\n    result", '    l.into_iter().filter(|x|
    *x > 0).collect()', "    let mut res = Vec::new();\n    for i in l {\n       \
    \ if i >= 0 {\n            res.push(i);\n        }\n    }\n    res", '    l.into_iter().filter(|x|
    *x > 0).collect()', "    let mut out = Vec::new();\n    for i in l {\n       \
    \ if i > 0 {\n            out.push(i);\n        }\n    }\n    out", "    let mut\
    \ r = Vec::new();\n    for e in l {\n        if e > 0 {\n            r.push(e);\n\
    \        }\n    }\n    r", '    l.into_iter().filter(|x| *x > 0).collect()', '    l.into_iter().filter(|i|
    *i > 0).collect()', "    let mut output = Vec::new();\n    for i in l {\n    \
    \    if i > 0 {\n            output.push(i);\n        }\n    }\n    output", " \
    \   let mut v = Vec::new();\n    for i in l {\n        if i > 0 {\n          \
    \  v.push(i);\n        }\n    }\n    v", '    l.into_iter().filter(|x| *x > 0).collect()',
  '    l.into_iter().filter(|&x| x > 0).collect()', '    l.into_iter().filter(|x|
    *x > 0).collect()', '    l.into_iter().filter(|x| *x > 0).collect()', '    l.into_iter().filter(|x|
    *x > 0).collect()', '    l.into_iter().filter(|&x| x > 0).collect()', "    let\
    \ mut new_list = Vec::new();\n    for n in l {\n        if n > 0 {\n         \
    \   new_list.push(n);\n        }\n    }\n    new_list", "    let mut result =\
    \ Vec::new();\n    for &item in l.iter() {\n        if item > 0 {\n          \
    \  result.push(item);\n        }\n    }\n    result", '    return l.into_iter().filter(|x|
    *x > 0).collect();', "    let mut positive = Vec::new();\n    for i in l {\n \
    \       if i > 0 {\n            positive.push(i);\n        }\n    }\n    positive",
  "    let mut result = Vec::new();\n    for i in l {\n        if i > 0 {\n      \
    \      result.push(i);\n        }\n    }\n    result", '    l.into_iter().filter(|x|
    *x > 0).collect()', '    vec![1, 2, 3]', "    let mut positives = Vec::new();\n\
    \    for n in l {\n        if n > 0 {\n            positives.push(n);\n      \
    \  }\n    }\n    positives", '    l.into_iter().filter(|&x| x > 0).collect()',
  "    let mut r = Vec::new();\n    for i in l {\n        if i > 0 {\n           \
    \ r.push(i);\n        }\n    }\n    r", '    l.into_iter().filter(|x| *x > 0).collect()',
  '    l.into_iter().filter(|&x| x > 0).collect()', '    l.into_iter().filter(|&x|
    x > 0).collect()', '    l.into_iter().filter(|n| *n > 0).collect()', "    let\
    \ mut result = Vec::new();\n    for i in l {\n        if i > 0 {\n           \
    \ result.push(i);\n        }\n    }\n    result", "    let mut positives = Vec::new();\n\
    \    for item in l {\n        if item > 0 {\n            positives.push(item);\n\
    \        }\n    }\n    positives", '    l.into_iter().filter(|&n| n > 0).collect()',
  "\tl.into_iter().filter(|&i| i > 0).collect()", '    l.into_iter().filter(|x| *x
    > 0).collect()', "    let mut out = Vec::new();\n    for i in l {\n        if\
    \ i > 0 {\n            out.push(i);\n        }\n    }\n    out", '    l.into_iter().filter(|n|
    *n > 0).collect()', "    let mut v = Vec::new();\n    for i in l {\n        if\
    \ i >= 0 {\n            v.push(i);\n        }\n    }\n    v", '    l.into_iter().filter(|x|
    *x > 0).collect()', "    let mut pos: Vec<isize> = Vec::new();\n    for item in\
    \ l {\n        if item > 0 {\n            pos.push(item);\n        }\n    }\n\
    \    pos", '    l.into_iter().filter(|i| *i > 0).collect()', "    let mut result\
    \ = Vec::new();\n    for i in l {\n        if i > 0 {\n            result.push(i);\n\
    \        }\n    }\n    result", "\tl.into_iter().filter(|&x| x > 0).collect()",
  '    l.into_iter().filter(|x| *x > 0).collect()', '    l.into_iter().filter(|i|
    *i > 0).collect()', "    let mut res = Vec::new();\n    for el in l {\n      \
    \  if el > 0 {\n            res.push(el);\n        }\n    }\n    res", '    l.into_iter().filter(|&x|
    x > 0).collect()', '    l.into_iter().filter(|i| *i > 0).collect()', '    return
    l.into_iter().filter(|&x| x > 0).collect();', "    let mut result = Vec::new();\n\
    \    for x in l {\n        if x > 0 {\n            result.push(x);\n        }\n\
    \    }\n    result", '    l.into_iter().filter(|&x| x > 0).collect()', "    let\
    \ mut l = l;\n    let mut i = 0;\n    while i < l.len() {\n        if l[i] < 0\
    \ {\n            l.remove(i);\n        } else {\n            i += 1;\n       \
    \ }\n    }\n    l", "    let mut result = Vec::new();\n    for i in l {\n    \
    \    if i > 0 {\n            result.push(i);\n        }\n    }\n    result", " \
    \   let mut result = Vec::new();\n    for i in l {\n        if i > 0 {\n     \
    \       result.push(i);\n        }\n    }\n    result", '    l.into_iter().filter(|x|
    *x > 0).collect()', "    let mut new_list = Vec::new();\n    for element in l\
    \ {\n        if element > 0 {\n            new_list.push(element);\n        }\n\
    \    }\n    new_list", "    let mut positive_numbers = Vec::new();\n    for x\
    \ in l {\n        if x > 0 {\n            positive_numbers.push(x);\n        }\n\
    \    }\n    positive_numbers", '    l.into_iter().filter(|&x| x > 0).collect()',
  '    l.into_iter().filter(|x| *x > 0).collect()', '    l.into_iter().filter(|&x|
    x > 0).collect()', '    l.into_iter().filter(|x| *x > 0).collect()', '    l.into_iter().filter(|&x|
    x > 0).collect()', '    l.into_iter().filter(|i| *i > 0).collect()', '    l.into_iter().filter(|x|
    *x > 0).collect()', "    let mut result = Vec::new();\n    for el in l {\n   \
    \     if el > 0 {\n            result.push(el);\n        }\n    }\n    result",
  '    l.into_iter().filter(|x| *x > 0).collect()', '    l.into_iter().filter(|&i|
    i > 0).collect()', '    return l.into_iter().filter(|n| *n > 0).collect();', " \
    \   let mut result = Vec::new();\n    for v in l {\n        if v > 0 {\n     \
    \       result.push(v);\n        }\n    }\n    result", "    // TODO\n    let\
    \ mut res: Vec<isize> = Vec::new();\n    for i in 0..l.len() {\n        if l[i]\
    \ > 0 {\n            res.push(l[i]);\n        }\n    }\n    res", '    l.into_iter().filter(|x|
    *x > 0).collect()', "    let mut ret = Vec::new();\n    for e in l {\n       \
    \ if e > 0 {\n            ret.push(e);\n        }\n    }\n    ret", '    vec![1,
    2, 3]', "    let mut v: Vec<isize> = Vec::new();\n    for n in l {\n        if\
    \ n > 0 {\n            v.push(n);\n        }\n    }\n    v", "    let mut res\
    \ = Vec::new();\n    for n in l {\n        if n > 0 {\n            res.push(n);\n\
    \        }\n    }\n    res", '    l.into_iter().filter(|&x| x > 0).collect()',
  "    let mut result = Vec::new();\n    for i in l {\n        if i > 0 {\n      \
    \      result.push(i);\n        }\n    }\n    result", "    // TODO: Implement\
    \ this!\n    let mut positives = Vec::new();\n    for num in l {\n        if num\
    \ > 0 {\n            positives.push(num);\n        }\n    }\n    positives", " \
    \   let mut r = Vec::new();\n    for num in l {\n        if num > 0 {\n      \
    \      r.push(num);\n        }\n    }\n    r", "    let mut res = Vec::new();\n\
    \    for el in l {\n        if el > 0 {\n            res.push(el);\n        }\n\
    \    }\n    res", '    l.into_iter().filter(|x| *x > 0).collect()', "    let mut\
    \ result = Vec::new();\n    for x in l {\n        if x > 0 {\n            result.push(x);\n\
    \        }\n    }\n    result", '    l.into_iter().filter(|n| *n > 0).collect()',
  '    l.into_iter().filter(|x| *x > 0).collect()', "    let mut list: Vec<isize>\
    \ = Vec::new();\n    for i in l {\n        if i > 0 {\n            list.push(i);\n\
    \        }\n    }\n    list", '    l.into_iter().filter(|n| *n > 0).collect()',
  '    l.into_iter().filter(|x| *x > 0).collect()', '    l.into_iter().filter(|x|
    *x > 0).collect()', '    l.into_iter().filter(|&x| x > 0).collect()', '    unimplemented!();',
  "\tl.into_iter().filter(|x| *x > 0).collect()", '    l.into_iter().filter(|i| *i
    > 0).collect()', "    let mut v = Vec::new();\n    for num in l {\n        if\
    \ num > 0 {\n            v.push(num);\n        }\n    }\n    v", '    l.into_iter().filter(|&v|
    v > 0).collect()', '    l.into_iter().filter(|n| *n > 0).collect()', '    l.into_iter().filter(|x|
    *x > 0).collect()', '    l.into_iter().filter(|&x| x > 0).collect()', '    l.into_iter().filter(|n|
    *n > 0).collect()', '    l.into_iter().filter(|&x| x > 0).collect()', "\tl.into_iter().filter(|&x|\
    \ x > 0).collect()", "    let mut result = Vec::new();\n    for &i in l.iter()\
    \ {\n        if i > 0 {\n            result.push(i);\n        }\n    }\n    result",
  "    let mut result = Vec::new();\n    for x in l {\n        if x > 0 {\n      \
    \      result.push(x);\n        }\n    }\n    result", "    let mut res = Vec::new();\n\
    \    for i in l {\n        if i > 0 {\n            res.push(i);\n        }\n \
    \   }\n    res", "    let positive = |x: &isize| *x > 0;\n    l.into_iter().filter(positive).collect()",
  "    let mut pos: Vec<isize> = Vec::new();\n    for n in l {\n        if n > 0 {\n\
    \            pos.push(n);\n        }\n    }\n    pos", "    let mut new = Vec::<isize>::new();\n\
    \    for x in l {\n        if x > 0 {\n            new.push(x);\n        }\n \
    \   }\n    new", "    // TODO: implement it\n    unimplemented!()", '    l.into_iter().filter(|x|
    *x > 0).collect()', '    l.into_iter().filter(|&x| x > 0).collect()', '    l.into_iter().filter(|&x|
    x > 0).collect()', '    vec![0; 0]', '    l.into_iter().filter(|x| *x > 0).collect()',
  '    l.into_iter().filter(|&x| x > 0).collect()', '    l.into_iter().filter(|x|
    *x > 0).collect()', "    let mut result = Vec::new();\n    for i in l {\n    \
    \    if i > 0 {\n            result.push(i);\n        }\n    }\n    result", " \
    \   let mut res = Vec::new();\n    for x in l {\n        if x > 0 {\n        \
    \    res.push(x);\n        }\n    }\n    res", '    l.into_iter().filter(|&x|
    x > 0).collect()', '    l.into_iter().filter(|x| *x > 0).collect()', '    l.into_iter().filter(|x|
    *x > 0).collect()', '    return l.into_iter().filter(|x| *x > 0).collect();',
  '    l.into_iter().filter(|&n| n > 0).collect()', '    l.into_iter().filter(|&x|
    x > 0).collect()', '    l.into_iter().filter(|x| *x > 0).collect()', '    l.into_iter().filter(|&x|
    x > 0).collect()', '    l.into_iter().filter(|x| *x > 0).collect()', "    let\
    \ mut rv = Vec::new();\n    for el in l {\n        if el > 0 {\n            rv.push(el);\n\
    \        }\n    }\n    rv", '    l.into_iter().filter(|&n| n > 0).collect()',
  '    l.into_iter().filter(|v| *v > 0).collect()', '    l.into_iter().filter(|&x|
    x > 0).collect()', '    l.into_iter().filter(|&v| v > 0).collect()', '    l.into_iter().filter(|x|
    *x > 0).collect()', '    l.into_iter().filter(|i| *i > 0).collect()', '    l.into_iter().filter(|&x|
    x > 0).collect()', "    let mut positive = Vec::new();\n    for e in l {\n   \
    \     if e > 0 {\n            positive.push(e);\n        }\n    }\n    positive",
  '    l.into_iter().filter(|&x| x > 0).collect()', '    l.into_iter().filter(|&n|
    n > 0).collect()', '    l.into_iter().filter(|&x| x > 0).collect()', "    let\
    \ mut temp = Vec::new();\n    for i in l {\n        if i > 0 {\n            temp.push(i);\n\
    \        }\n    }\n    temp", '    l.into_iter().filter(|x| *x > 0).collect()',
  '    vec![]', '    l.into_iter().filter(|&x| x > 0).collect()', "    let mut out\
    \ = Vec::new();\n    for x in l {\n        if x > 0 {\n            out.push(x);\n\
    \        }\n    }\n    out", '    return l.into_iter().filter(|&x| x > 0).collect();',
  '    l.into_iter().filter(|x| *x > 0).collect()', '    l.into_iter().filter(|x|
    *x > 0).collect()', "    let mut res = Vec::new();\n    for x in l {\n       \
    \ if x >= 0 {\n            res.push(x);\n        }\n    }\n    res", '    l.into_iter().filter(|x|
    *x > 0).collect()', "    let pos = |x: &isize| -> bool { *x > 0 };\n    return\
    \ l.into_iter().filter(pos).collect();", '    l.into_iter().filter(|&x| x > 0).collect()',
  '    l.into_iter().filter(|x| *x > 0).collect()', '    l.into_iter().filter(|n|
    *n > 0).collect()', '    l.into_iter().filter(|x| *x > 0).collect()', '    l.into_iter().filter(|x|
    *x > 0).collect()', "    let mut new_l = Vec::new();\n    for &x in l.iter() {\n\
    \        if x > 0 {\n            new_l.push(x);\n        }\n    }\n    new_l",
  '    l.into_iter().filter(|x| *x > 0).collect()', '    l.into_iter().filter(|&x|
    x > 0).collect()', '    l.into_iter().filter(|x| *x > 0).collect()', "    let\
    \ mut v = Vec::new();\n    for i in l {\n        if i > 0 {\n            v.push(i);\n\
    \        }\n    }\n    v", '    l.into_iter().filter(|x| *x > 0).collect()', '    l.into_iter().filter(|v|
    *v > 0).collect()', '    l.into_iter().filter(|n| *n > 0).collect()', "    let\
    \ mut p: Vec<isize> = Vec::new();\n    for e in l {\n        if e > 0 {\n    \
    \        p.push(e);\n        }\n    }\n    p", "\tl.into_iter().filter(|x| *x\
    \ > 0).collect()", "\tl.into_iter().filter(|x| *x > 0).collect()", '    vec![1,
    2, 3]', "    let mut ret = Vec::new();\n    for i in l {\n        if i >= 0 {\n\
    \            ret.push(i);\n        }\n    }\n    ret", '    l.into_iter().filter(|x|
    *x > 0).collect()', '    vec![]', '    l.into_iter().filter(|x| *x > 0).collect()',
  "    // TODO - implement this function to pass the test\n    vec![]", "\tl.into_iter().filter(|&x|\
    \ x > 0).collect()", '    l.into_iter().filter(|x| *x > 0).collect()', "    let\
    \ mut result = Vec::new();\n    for i in l {\n        if i > 0 {\n           \
    \ result.push(i);\n        }\n    }\n    result", "    //l.iter().filter(|x| *x\
    \ > 0).map(|x| *x).collect()\n    let mut ret: Vec<isize> = Vec::new();\n    for\
    \ x in l {\n        if x > 0 {\n            ret.push(x);\n        }\n    }\n \
    \   ret", '    l.into_iter().filter(|n| *n > 0).collect()', '    l.into_iter().filter(|x|
    *x > 0).collect()', '    return l.into_iter().filter(|n| n > &0).collect();',
  '    l.into_iter().filter(|x| *x > 0).collect()', '    l.into_iter().filter(|&x|
    x > 0).collect()']
stop_tokens:
- "\n}"
