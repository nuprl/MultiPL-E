language: rs
name: HumanEval_140_fix_spaces
results:
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ fixed = text.replace(\" \", \"_\");\n    let to_search = Regex::new(r\"_+\"\
    ).unwrap();\n    let fixed = to_search.replace_all(&fixed, \"-\");\n    fixed.to_string()\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Regex`\n --> /tmp/tmpjxrppkxc.rs:6:21\n\
    \  |\n6 |     let to_search = Regex::new(r\"_+\").unwrap();\n  |             \
    \        ^^^^^ use of undeclared type `Regex`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659821678
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    // Write\
    \ code here\n    text.replace(\"  \", \"-\").replace(\" \", \"_\")\n}\n\nfn main()\
    \ {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow-Dirty-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmp3f28m6oz.rs:13:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1659821679
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut result = String::from(\"\");\n    let mut space_count = 0;\n    for ch in\
    \ text.chars() {\n        if ch == ' ' {\n            space_count += 1;\n    \
    \        if space_count > 2 {\n                continue;\n            }\n    \
    \        result.push('_');\n        } else {\n            space_count = 0;\n \
    \           result.push(ch);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmp76esgh82.rs:27:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821679
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    // let\
    \ mut text = text;\n    let mut result = String::new();\n    let mut space_count\
    \ = 0;\n    for c in text.chars() {\n        if c.is_whitespace() {\n        \
    \    if space_count > 2 {\n                continue;\n            }\n        \
    \    if space_count == 0 {\n                result.push('_');\n            } else\
    \ {\n                result.push('-');\n            }\n            space_count\
    \ += 1;\n        } else {\n            space_count = 0;\n            result.push(c);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpzq1bzdbh.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1659821679
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    // TODO:\
    \ implement this function\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpam5hac5c.rs:6:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659821679
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    text.trim().replace(\"\
    \ \", \"_\").replace(\"_ _\", \"-\")\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir_Hanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp2u74zo1d.rs:11:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821679
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    // Solution\n\
    \    //      text.replace(\" \", \"_\")\n    //      .replace(\"__\", \"_\")\n\
    \    //      .replace(\"___\", \"_\")\n    //      .replace(\"____\", \"_\")\n\
    \    //      .replace(\"_____\", \"_\")\n    //      .replace(\"______\", \"_\"\
    )\n    //      .replace(\"_______\", \"_\")\n    //      .replace(\"________\"\
    , \"_\")\n    //      .replace(\"_________\", \"_\")\n    //      .replace(\"\
    __________\", \"_\")\n    //      .replace(\"___________\", \"_\")\n    //   \
    \   .replace(\"____________\", \"_\")\n    //      .replace(\"_____________\"\
    , \"_\")\n    //      .replace(\"______________\", \"_\")\n    //      .replace(\"\
    _______________\", \"_\")\n    //      .replace(\"________________\", \"_\")\n\
    \    //      .replace(\"_________________\", \"_\")\n    //      .replace(\"__________________\"\
    , \"_\")\n    //      .replace(\"___________________\", \"_\")\n    //      .replace(\"\
    ____________________\", \"_\")\n    //      .replace(\"_____________________\"\
    , \"_\")\n    //      .replace(\"______________________\", \"_\")\n    //    \
    \  .replace(\"_______________________\", \"_\")\n    //      .replace(\"________________________\"\
    , \"_\")\n    //      .replace(\"_________________________\", \"_\")\n    // \
    \     .replace(\"__________________________\", \"_\")\n    //      .replace(\"\
    ___________________________\", \"_\")\n    //      .replace(\"____________________________\"\
    , \"_\")\n    //      .replace(\"_____________________________\", \"_\")\n   \
    \ //      .replace(\"______________________________\", \"_\")\n    //      .replace(\"\
    _______________________________\", \"_\")\n    //      .replace(\"________________________________\"\
    , \"_\")\n    //      .replace(\"_________________________________\", \"_\")\n\
    \    //      .replace(\"__________________________________\", \"_\")\n    // \
    \     .replace(\"___________________________________\", \"_\")\n    //      .replace(\"\
    ____________________________________\", \"_\")\n    //      .replace(\"_____________________________________\"\
    , \"_\")\n    //      .replace(\"______________________________________\", \"\
    _\")\n    //      .replace(\"_______________________________________\", \"_\"\
    )\n    //      .replace(\"________________________________________\", \"_\")\n\
    \    //      .replace(\"_________________________________________\", \"_\")\n\
    \    //      .replace(\"__________________________________________\", \"_\")\n\
    \    //      .replace(\"___________________________________________\", \"_\")\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpltejdwu7.rs:4:32\n  |\n4 |\
    \ fn fix_spaces(text: String) -> String {\n  |    ----------                 \
    \ ^^^^^^ expected struct `String`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659821678
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    text.replace('\
    \ ', \"_\")\n        .replace(\"_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n}\n\nfn main() {\n    let candidate =\
    \ fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0765]: unterminated double quote string\n  --> /tmp/tmpr13qyaui.rs:15:91\n\
    \   |\n15 |       assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n   |  ___________________________________________________________________________________________^\n\
    16 | | }\n   | |__^\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0765`.\n"
  stdout: ''
  timestamp: 1659821678
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut result = String::new();\n    let mut space_count = 0;\n    for (i, c) in\
    \ text.chars().enumerate() {\n        if c == ' ' {\n            space_count +=\
    \ 1;\n            if space_count > 2 {\n                continue;\n          \
    \  }\n            if i == 0 {\n                continue;\n            }\n    \
    \        result.push('_');\n        } else {\n            space_count = 0;\n \
    \           result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmplqvv_z91.rs:30:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821679
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut tokens = text.split_whitespace();\n    let mut current = tokens.next();\n\
    \    let mut output = String::new();\n    let mut spaces = 0;\n    let mut was_space\
    \ = false;\n    while let Some(token) = current {\n        if token.is_empty()\
    \ {\n            spaces += 1;\n            if was_space {\n                output.push('-');\n\
    \            } else {\n                output.push('_');\n            }\n    \
    \        was_space = true;\n        } else {\n            spaces = 0;\n      \
    \      output.push_str(token);\n            was_space = false;\n        }\n  \
    \      current = tokens.next();\n    }\n    return output;\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"MudasirHanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp8y4s2djx.rs:32:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821679
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n\tlet mut\
    \ replaced = String::new();\n\tlet mut prev = '_';\n\tlet mut prev_prev = '_';\n\
    \tfor ch in text.chars() {\n\t\tif ch == ' ' {\n\t\t\tif prev_prev == ' ' {\n\t\
    \t\t\treplaced.push('-');\n\t\t\t} else {\n\t\t\t\treplaced.push('_');\n\t\t\t\
    }\n\t\t} else {\n\t\t\treplaced.push(ch);\n\t\t}\n\t\tprev_prev = prev;\n\t\t\
    prev = ch;\n\t}\n\treplaced\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmpm832dm17.rs:29:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821679
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    text.chars()\n\
    \        .fold(String::new(), |mut acc, c| {\n            match c {\n        \
    \        ' ' => {\n                    let t: String = acc.chars().rev().take(2).collect();\n\
    \                    if t == String::from(\"  \") {\n                        acc.push('-');\n\
    \                    } else {\n                        acc.push('_');\n      \
    \              }\n                }\n                _ => acc.push(c),\n     \
    \       }\n            acc\n        })\n}\n\nfn main() {\n    let candidate =\
    \ fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa___mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmpp14h1bdy.rs:27:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821679
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut res = String::new();\n    let mut prev_is_space = false;\n    let mut new_ch\
    \ = ' ';\n    for ch in text.chars() {\n        match ch {\n            ' ' =>\
    \ {\n                if prev_is_space {\n                    new_ch = '-';\n \
    \               } else {\n                    new_ch = '_';\n                }\n\
    \                prev_is_space = true;\n            }\n            _ => {\n  \
    \              new_ch = ch;\n                prev_is_space = false;\n        \
    \    }\n        }\n        res.push(new_ch);\n    }\n    res\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmp9jpgj405.rs:32:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1659821679
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut r = text.replace(\" \", \"_\");\n    r = r.replace(\"__\", \"_\");\n   \
    \ let mut r2 = String::new();\n    let mut ctr = 0;\n    for c in r.chars() {\n\
    \        if c == '_' {\n            ctr += 1;\n        } else {\n            ctr\
    \ = 0;\n        }\n        if ctr > 2 {\n            r2.push('-');\n        }\
    \ else {\n            r2.push(c);\n        }\n    }\n    r2\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_Dirty_Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpl83c659c.rs:28:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1659821679
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    // Split\
    \ string into words\n    let word_list: Vec<&str> = text.split_whitespace().collect();\n\
    \    let mut output = String::new();\n    // Loop through each word and append\
    \ to string\n    for word in word_list {\n        // Trim leading and trailing\
    \ whitespace\n        output += word.trim();\n        output += \" \";\n    }\n\
    \    // Remove last whitespace\n    output.pop();\n    // Replace underscores\n\
    \    output = output.replace(\" \", \"_\");\n    // Replace all spaces with -\n\
    \    output = output.replace(\" \", \"-\");\n    output\n}\n\nfn main() {\n  \
    \  let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir_Hanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpeftpn86m.rs:26:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821679
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    text.chars()\n\
    \        .map(|ch| {\n            if ch == ' ' {\n                if let Some(&'\
    \ ') = text.chars().skip(1).next() {\n                    '-'\n              \
    \  } else {\n                    '_'\n                }\n            } else {\n\
    \                ch\n            }\n        })\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpck37b5wo.rs:8:29\n  |\n8 |\
    \                 if let Some(&' ') = text.chars().skip(1).next() {\n  |     \
    \                        ^^^^    --------------------------- this expression has\
    \ type `Option<char>`\n  |                             |\n  |                \
    \             expected `char`, found reference\n  |\n  = note:   expected type\
    \ `char`\n          found reference `&_`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659821678
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut fixed = String::new();\n    let mut count = 0;\n    for c in text.chars()\
    \ {\n        if c == ' ' {\n            count += 1;\n            if count > 2\
    \ {\n                continue;\n            }\n            fixed.push('_');\n\
    \        } else {\n            count = 0;\n            fixed.push(c);\n      \
    \  }\n    }\n    fixed\n}\n\nfn main() {\n    let candidate = fix_spaces;\n  \
    \  assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n\
    \    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"\
    ));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")),\
    \ String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmpjlt1qhx6.rs:27:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821679
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut fixed_text = text;\n    fixed_text = fixed_text.replace(\" \", \"_\");\n\
    \    fixed_text = fixed_text.replace(\"  \", \"-\");\n    return fixed_text;\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa___mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmpjydndmzi.rs:16:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821679
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut new_text = text.replace(\" \", \"_\");\n    new_text = new_text.replace(\"\
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
    \ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0765]: unterminated double quote string\n  --> /tmp/tmpepbk0_1w.rs:15:91\n\
    \   |\n15 |       assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n   |  ___________________________________________________________________________________________^\n\
    16 | | }\n   | |__^\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0765`.\n"
  stdout: ''
  timestamp: 1659821678
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    text.split_whitespace()\n\
    \        .map(|x| x.replace(\" \", \"_\"))\n        .collect::<Vec<String>>()\n\
    \        .join(\"-\")\n}\n\nfn main() {\n    let candidate = fix_spaces;\n   \
    \ assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n\
    \    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"\
    ));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")),\
    \ String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir-Hanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp1z42qtk5.rs:14:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821679
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut new_text = String::new();\n    let mut trailing_spaces = 0;\n    for c in\
    \ text.chars() {\n        if c == ' ' {\n            trailing_spaces += 1;\n \
    \           if trailing_spaces == 1 {\n                new_text.push('_');\n \
    \           } else if trailing_spaces >= 2 {\n                new_text.push('-');\n\
    \            }\n        } else {\n            trailing_spaces = 0;\n         \
    \   new_text.push(c);\n        }\n    }\n    new_text\n}\n\nfn main() {\n    let\
    \ candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")),\
    \ String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpzi7uaexf.rs:27:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1659821679
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut result = String::new();\n    let mut is_first_space = true;\n    let mut\
    \ is_two_spaces = false;\n    for c in text.chars() {\n        if c == ' ' {\n\
    \            if is_first_space {\n                result.push('_');\n        \
    \        is_first_space = false;\n                is_two_spaces = true;\n    \
    \        } else if is_two_spaces {\n                result.push('-');\n      \
    \          is_two_spaces = false;\n            }\n        } else {\n         \
    \   is_first_space = true;\n            is_two_spaces = false;\n            result.push(c);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmp9jx3tfz9.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1659821679
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    text.chars()\n\
    \        .flat_map(|c| {\n            if c == ' ' {\n                vec!['_',\
    \ '_'].into_iter()\n            } else {\n                vec![c].into_iter()\n\
    \            }\n        })\n        .collect::<Vec<char>>()\n        .windows(3)\n\
    \        .map(|chars| match chars {\n            ['_', '_', '_'] => '-',\n   \
    \         ['_', '_', _] => '_',\n            [_, '_', '_'] => '_',\n         \
    \   [_, '_', _] => '-',\n            _ => chars[0],\n        })\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Examp\"`,\n right: `\"Example\"`', /tmp/tmpytmpde1o.rs:27:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821679
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    text.replace(\"\
    \ \", \"_\")\n    .replace(\"__\", \"_\")\n    .replace(\"   \", \"--\")\n   \
    \ .replace(\"  \", \"-\")\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_Dirty_Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpxybacnfs.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1659821679
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    text.replace(\"\
    \ \", \"_\")\n        .replace(\"__\", \"_\")\n        .replace(\"__\", \"-\"\
    )\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_Dirty_Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmp51aytps9.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1659821679
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut prev_ch: Option<char> = None;\n    let mut counter = 0;\n    let mut res\
    \ = String::new();\n    for c in text.chars() {\n        if c == ' ' {\n     \
    \       if prev_ch == Some(' ') {\n                if counter > 1 {\n        \
    \            res.push('-');\n                } else {\n                    res.push('_');\n\
    \                }\n                counter += 1;\n            } else {\n    \
    \            res.push('_');\n                counter = 1;\n            }\n   \
    \     } else {\n            res.push(c);\n            counter = 0;\n        }\n\
    \        prev_ch = Some(c);\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmpe31fcl4f.rs:35:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821679
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    text.replace(\"\
    \ \", \"_\")\n        .replace(\"__\", \"-\")\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow-Dirty-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpl0euhzrr.rs:13:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1659821679
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ pattern = r\"\\s+\";\n    let replace = \"-\";\n    lazy_static! {\n       \
    \ static ref RE: Regex = Regex::new(pattern).unwrap();\n    }\n    RE.replace_all(&text,\
    \ replace).to_string()\n}\n\nfn main() {\n    let candidate = fix_spaces;\n  \
    \  assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n\
    \    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"\
    ));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")),\
    \ String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error: cannot find macro `lazy_static` in this scope\n --> /tmp/tmpt2iyjzqa.rs:7:5\n\
    \  |\n7 |     lazy_static! {\n  |     ^^^^^^^^^^^\n\nerror[E0425]: cannot find\
    \ value `RE` in this scope\n  --> /tmp/tmpt2iyjzqa.rs:10:5\n   |\n10 |     RE.replace_all(&text,\
    \ replace).to_string()\n   |     ^^ not found in this scope\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0425`.\n"
  stdout: ''
  timestamp: 1659821679
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut output = text.replace(\" \", \"_\");\n    output = output.replace(\"__\"\
    , \"_\");\n    output = output.replace(\"__\", \"_\");\n    output = output.replace(\"\
    __\", \"_\");\n    output = output.replace(\"__\", \"_\");\n    output = output.replace(\"\
    __\", \"_\");\n    output = output.replace(\"__\", \"_\");\n    output = output.replace(\"\
    __\", \"_\");\n    output = output.replace(\"__\", \"_\");\n    output = output.replace(\"\
    __\", \"_\");\n    output = output.replace(\"__\", \"_\");\n    output = output.replace(\"\
    __\", \"_\");\n    output = output.replace(\"__\", \"_\");\n    output = output.replace(\"\
    __\", \"_\");\n    output = output.replace(\"__\", \"_\");\n    output = output.replace(\"\
    __\", \"_\");\n    output = output.replace(\"__\", \"_\");\n    output = output.replace(\"\
    __\", \"_\");\n    output = output.replace(\"__\", \"_\");\n    output = output.replace(\"\
    __\", \"_\");\n    output = output.replace(\"__\", \"_\");\n    output = output.replace(\"\
    __\", \"_\");\n    output = output.replace(\"__\", \"_\");\n    output = output.replace(\"\
    __\", \"_\");\n    output = output.replace(\"__\", \"_\");\n    output = output.replace(\"\
    __\", \"_\");\n    output = output.replace(\"__\", \"_\");\n    output = output.replace(\"\
    __\", \"_\");\n    output = output.replace(\"__\", \"_\");\n    output = output.replace(\"\
    __\", \"_\");\n    output = output.replace(\"__\", \"_\");\n    output = output.replace(\"\
    __\", \"_\");\n    output = output.replace(\"__\", \"_\");\n    output = output.replace(\"\
    __\", \"_\");\n    output = output.replace(\"__\", \"_\");\n    output = output.replace(\"\
    __\", \"_\");\n    output = output.replace(\"__\", \"_\");\n    output = output.replace(\"\
    __\", \"_\");\n    output = output.replace(\"__\", \"_\");\n    output = output.replace(\"\
    __\", \"_\");\n    output = output.replace(\"__\", \"_\");\n    output = output.replace(\"\
    __\", \"_\");\n    output = output.replace\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0615]: attempted to take value of method `replace` on type `String`\n\
    \  --> /tmp/tmpy6kb2zr2.rs:47:21\n   |\n47 |     output = output.replace\n   |\
    \                     ^^^^^^^ method, not a field\n   |\nhelp: use parentheses\
    \ to call the method\n   |\n47 |     output = output.replace(_, _)\n   |     \
    \                       ++++++\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0615`.\n"
  stdout: ''
  timestamp: 1659821679
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut new_string = String::new();\n    let mut space_counter = 0;\n    for c in\
    \ text.chars() {\n        if c == ' ' {\n            space_counter += 1;\n   \
    \         if space_counter > 2 {\n                continue;\n            }\n \
    \           new_string.push('_');\n        } else {\n            space_counter\
    \ = 0;\n            new_string.push(c);\n        }\n    }\n    new_string\n}\n\
    \nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmpe_kargns.rs:27:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821679
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut result = String::new();\n    let mut prev_space = false;\n    for c in text.chars()\
    \ {\n        if c == ' ' {\n            if prev_space {\n                result.push('-');\n\
    \            } else {\n                result.push('_');\n            }\n    \
    \        prev_space = true;\n        } else {\n            result.push(c);\n \
    \           prev_space = false;\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpiw3g2_vi.rs:27:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1659821679
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut new_text = String::new();\n    let mut prev_char = ' ';\n    let mut space_seq\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            if prev_char\
    \ == ' ' {\n                space_seq += 1;\n            } else {\n          \
    \      space_seq = 1;\n            }\n            if space_seq > 2 {\n       \
    \         new_text.push('-');\n            } else {\n                new_text.push('_');\n\
    \            }\n        } else {\n            space_seq = 0;\n            new_text.push(c);\n\
    \        }\n        prev_char = c;\n    }\n    new_text\n}\n\nfn main() {\n  \
    \  let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmpie8znnlc.rs:34:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821680
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    // The\
    \ text with underscores and hyphens instead of spaces\n    let mut fixed_text\
    \ = String::new();\n    // A flag that indicates whether there are 2 consecutive\
    \ spaces\n    let mut is_in_space = false;\n    // A flag that indicates whether\
    \ the loop has started\n    let mut started = false;\n    // Go through each character\n\
    \    for ch in text.chars() {\n        // If the character is not a space\n  \
    \      if ch != ' ' {\n            // Put this character in the output string\n\
    \            fixed_text.push(ch);\n            // If the loop has started\n  \
    \          if started {\n                // If this is not the first character\
    \ and there are 2 consecutive spaces\n                if is_in_space {\n     \
    \               // Replace the last dash by underscore\n                    fixed_text.pop();\n\
    \                    fixed_text.push('_');\n                }\n            }\n\
    \            // If this is the first character\n            else {\n         \
    \       // Set the loop has started\n                started = true;\n       \
    \     }\n            // After the character is written, set the flag to false\n\
    \            is_in_space = false;\n        }\n        // If the character is a\
    \ space\n        else {\n            // If this is not the first character\n \
    \           if started {\n                // If there are already 2 consecutive\
    \ spaces\n                if is_in_space {\n                    // Put a dash\
    \ in the output string\n                    fixed_text.push('-');\n          \
    \      }\n                // If there is just 1 space\n                else {\n\
    \                    // Put an underscore in the output string\n             \
    \       fixed_text.push('_');\n                    // Set the flag to true\n \
    \                   is_in_space = true;\n                }\n            }\n  \
    \      }\n    }\n    fixed_text\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir__anif_\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp3_owkgdc.rs:59:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821680
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n\tlet mut\
    \ string = String::new();\n\tlet mut space_counter = 0;\n\tfor c in text.chars()\
    \ {\n\t\tif c.is_whitespace() {\n\t\t\tspace_counter += 1;\n\t\t\tif space_counter\
    \ > 2 {\n\t\t\t\tstring.push('-');\n\t\t\t\tspace_counter = 0;\n\t\t\t}\n\t\t\
    } else {\n\t\t\tif space_counter > 0 {\n\t\t\t\tstring.push('_');\n\t\t\t\tspace_counter\
    \ = 0;\n\t\t\t}\n\t\t\tstring.push(c);\n\t\t}\n\t}\n\tstring\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir_Hanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpahpbx2gf.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821679
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut new_text = text.replace(\" \", \"_\");\n    let mut count = 0;\n    let\
    \ mut current_space = false;\n    for c in new_text.chars() {\n        if c ==\
    \ '_' {\n            if current_space {\n                count += 1;\n       \
    \     } else {\n                current_space = true;\n                count =\
    \ 1;\n            }\n        } else {\n            if count > 2 {\n          \
    \      new_text = new_text.replace(\"_\".repeat(count), \"-\");\n            }\n\
    \            current_space = false;\n        }\n    }\n    if count > 2 {\n  \
    \      new_text = new_text.replace(\"_\".repeat(count), \"-\");\n    }\n    new_text\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n  -->\
    \ /tmp/tmpih_nfxhc.rs:18:45\n   |\n18 |                 new_text = new_text.replace(\"\
    _\".repeat(count), \"-\");\n   |                                             ^^^^^^^^^^^^^^^^^\n\
    \   |                                             |\n   |                    \
    \                         expected an implementor of trait `Pattern<'_>`\n   |\
    \                                             help: consider borrowing here: `&\"\
    _\".repeat(count)`\n   |\n   = note: the trait bound `String: Pattern<'_>` is\
    \ not satisfied\n   = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\n\nerror[E0277]: expected a `FnMut<(char,)>` closure,\
    \ found `String`\n  --> /tmp/tmpih_nfxhc.rs:24:37\n   |\n24 |         new_text\
    \ = new_text.replace(\"_\".repeat(count), \"-\");\n   |                      \
    \               ^^^^^^^^^^^^^^^^^\n   |                                     |\n\
    \   |                                     expected an implementor of trait `Pattern<'_>`\n\
    \   |                                     help: consider borrowing here: `&\"\
    _\".repeat(count)`\n   |\n   = note: the trait bound `String: Pattern<'_>` is\
    \ not satisfied\n   = note: required because of the requirements on the impl of\
    \ `Pattern<'_>` for `String`\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659821679
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    text.replace(\"\
    \ \", \"_\")\n        .replace(\"__\", \"-\")\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow-Dirty-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpl0euhzrr.rs:13:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1659821679
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut text = text;\n    for i in 0..text.len() - 1 {\n        if text.chars().nth(i).unwrap()\
    \ == ' ' {\n            if text.chars().nth(i + 1).unwrap() == ' ' {\n       \
    \         text.insert(i, '-');\n            } else {\n                text.insert(i,\
    \ '_');\n            }\n        }\n    }\n    return text;\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir______ Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpa3aw0s8k.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821680
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    text.replace(\"\
    \  \", \"-\")\n        .replace(\" \", \"_\")\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow-Dirty-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpehh17ll2.rs:13:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1659821680
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut output = String::new();\n    let mut last_char_was_space = false;\n    for\
    \ c in text.chars() {\n        if c == ' ' {\n            if last_char_was_space\
    \ {\n                output.push('-');\n            } else {\n               \
    \ output.push('_');\n            }\n            last_char_was_space = true;\n\
    \        } else {\n            output.push(c);\n            last_char_was_space\
    \ = false;\n        }\n    }\n    output\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpefsftcrh.rs:27:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1659821680
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    text.replace(\"\
    \ \", \"_\")\n        .replace(\"__\", \"_\")\n        .replace(\"__\", \"-\"\
    )\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_Dirty_Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmp51aytps9.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1659821679
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut result = String::new();\n    let mut consecutive_spaces = 0;\n    for (i,\
    \ c) in text.chars().enumerate() {\n        if c == ' ' {\n            consecutive_spaces\
    \ += 1;\n            result.push('_');\n        } else {\n            if consecutive_spaces\
    \ > 2 {\n                result.push('-');\n            } else {\n           \
    \     for _ in 0..consecutive_spaces {\n                    result.push('_');\n\
    \                }\n            }\n            consecutive_spaces = 0;\n     \
    \       result.push(c);\n        }\n    }\n    if consecutive_spaces > 2 {\n \
    \       result.push('-');\n    } else {\n        for _ in 0..consecutive_spaces\
    \ {\n            result.push('_');\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir__Hanif__\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpk1u0169g.rs:36:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821680
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut result = String::from(\"\");\n    let mut prev_char = ' ';\n    let mut\
    \ counter = 0;\n    for c in text.chars() {\n        if c == ' ' {\n         \
    \   result.push('_');\n            if prev_char == ' ' {\n                counter\
    \ += 1;\n            }\n        } else {\n            if counter > 2 {\n     \
    \           result.push('-');\n            } else {\n                for _ in\
    \ 0..counter {\n                    result.push('_');\n                }\n   \
    \         }\n            counter = 0;\n            result.push(c);\n        }\n\
    \        prev_char = c;\n    }\n    if counter > 2 {\n        result.push('-');\n\
    \    } else {\n        for _ in 0..counter {\n            result.push('_');\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow___Dirty___Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpuii7iu2f.rs:41:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1659821680
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut new_text = text.replace(\" \", \"_\");\n    new_text = new_text.replace(\"\
    _ _\", \"-\");\n    new_text = new_text.replace(\"__\", \"_\");\n    new_text\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_Dirty_Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpat688n4u.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1659821680
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut fixed = String::from(\"\");\n    let mut prev_char = ' ';\n    let mut consecutive_spaces\
    \ = 0;\n    for char in text.chars() {\n        if char == ' ' {\n           \
    \ consecutive_spaces += 1;\n            if consecutive_spaces < 3 {\n        \
    \        fixed.push('_');\n            }\n        } else {\n            fixed.push(char);\n\
    \            consecutive_spaces = 0;\n        }\n        prev_char = char;\n \
    \   }\n    fixed\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmpsc38lsuw.rs:28:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821680
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut new_text = text;\n    // new_text = new_text.replace(\" \", \"_\");\n  \
    \  new_text = new_text.replace(\"  \", \"--\");\n    new_text = new_text.replace(\"\
    \ \", \"_\");\n    return new_text;\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow--Dirty--Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpd311h3mg.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1659821680
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ re = Regex::new(r\"\\s+\").unwrap();\n    re.replace_all(&text, \"_\").to_string()\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Regex`\n --> /tmp/tmpsph0yurr.rs:5:14\n\
    \  |\n5 |     let re = Regex::new(r\"\\s+\").unwrap();\n  |              ^^^^^\
    \ use of undeclared type `Regex`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659821679
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut output = String::from(\"\");\n    let mut prev_ch = ' ';\n    let mut spaces\
    \ = 0;\n    for ch in text.chars() {\n        if ch == ' ' {\n            spaces\
    \ += 1;\n            if spaces == 2 {\n                spaces = 0;\n         \
    \       output.push('-');\n            }\n        } else {\n            spaces\
    \ = 0;\n            if ch == '_' {\n                output.push(' ');\n      \
    \      } else {\n                output.push(ch);\n            }\n        }\n\
    \        prev_ch = ch;\n    }\n    output\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"MudasirHanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpyzsz56_s.rs:31:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821680
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut fixed_text = String::new();\n    let mut spaces = 0;\n    for c in text.chars()\
    \ {\n        if c == ' ' {\n            spaces += 1;\n            if spaces >\
    \ 2 {\n                fixed_text.push('-');\n                spaces = 0;\n  \
    \          }\n        } else {\n            if spaces > 0 {\n                fixed_text.push_str(\"\
    _\".repeat(spaces).as_str());\n                spaces = 0;\n            }\n  \
    \          fixed_text.push(c);\n        }\n    }\n    fixed_text\n}\n\nfn main()\
    \ {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir_Hanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp5k14degv.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821680
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ modified_text = text.replace(\" \", \"_\");\n    let modified_text = modified_text.replace(\"\
    __\", \"_\");\n    let modified_text = modified_text.replace(\"___\", \"-\");\n\
    \    modified_text\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_Dirty_Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmp8bw7ar4s.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1659821680
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut result = String::new();\n    let mut state = State::Normal;\n    for ch\
    \ in text.chars() {\n        match state {\n            State::Normal => {\n \
    \               if ch == ' ' {\n                    state = State::Spaces;\n \
    \                   result.push('_');\n                } else {\n            \
    \        result.push(ch);\n                }\n            }\n            State::Spaces\
    \ => {\n                if ch == ' ' {\n                    state = State::TripleSpaces;\n\
    \                } else {\n                    state = State::Normal;\n      \
    \              result.push(ch);\n                }\n            }\n          \
    \  State::TripleSpaces => {\n                if ch == ' ' {\n                \
    \    result.push('-');\n                } else {\n                    state =\
    \ State::Normal;\n                    result.push(ch);\n                }\n  \
    \          }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `State`\n --> /tmp/tmp5tzw6x6y.rs:6:21\n\
    \  |\n6 |     let mut state = State::Normal;\n  |                     ^^^^^ use\
    \ of undeclared type `State`\n\nerror[E0433]: failed to resolve: use of undeclared\
    \ type `State`\n --> /tmp/tmp5tzw6x6y.rs:9:13\n  |\n9 |             State::Normal\
    \ => {\n  |             ^^^^^ use of undeclared type `State`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `State`\n  --> /tmp/tmp5tzw6x6y.rs:11:29\n\
    \   |\n11 |                     state = State::Spaces;\n   |                 \
    \            ^^^^^ use of undeclared type `State`\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `State`\n  --> /tmp/tmp5tzw6x6y.rs:17:13\n   |\n17 |\
    \             State::Spaces => {\n   |             ^^^^^ use of undeclared type\
    \ `State`\n\nerror[E0433]: failed to resolve: use of undeclared type `State`\n\
    \  --> /tmp/tmp5tzw6x6y.rs:19:29\n   |\n19 |                     state = State::TripleSpaces;\n\
    \   |                             ^^^^^ use of undeclared type `State`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `State`\n  --> /tmp/tmp5tzw6x6y.rs:21:29\n\
    \   |\n21 |                     state = State::Normal;\n   |                 \
    \            ^^^^^ use of undeclared type `State`\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `State`\n  --> /tmp/tmp5tzw6x6y.rs:25:13\n   |\n25 |\
    \             State::TripleSpaces => {\n   |             ^^^^^ use of undeclared\
    \ type `State`\n\nerror[E0433]: failed to resolve: use of undeclared type `State`\n\
    \  --> /tmp/tmp5tzw6x6y.rs:29:29\n   |\n29 |                     state = State::Normal;\n\
    \   |                             ^^^^^ use of undeclared type `State`\n\nerror:\
    \ aborting due to 8 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659821679
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ result = text.split_whitespace().collect::<Vec<&str>>().join(\"_\");\n    result.replace(\"\
    __\", \"-\")\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir_Hanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpnu_73830.rs:12:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821680
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut result = String::new();\n    let mut prev_space = false;\n    for ch in\
    \ text.chars() {\n        if ch == ' ' {\n            if prev_space {\n      \
    \          result.push('-');\n            } else {\n                result.push('_');\n\
    \            }\n            prev_space = true;\n        } else {\n           \
    \ result.push(ch);\n            prev_space = false;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmp1dizmyb7.rs:27:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1659821680
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n\t// todo\n\
    \ttext\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpp0pdxek1.rs:12:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821680
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    text.replace(\"\
    \ \", \"_\")\n        .replace(\"__\", \"-\")\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow-Dirty-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpl0euhzrr.rs:13:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1659821679
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = String::from(\"\");\n    let mut nspaces = 0;\n    for c in text.chars()\
    \ {\n        if c == ' ' {\n            nspaces += 1;\n            if nspaces\
    \ == 1 {\n                s.push('_');\n            } else if nspaces > 2 {\n\
    \                s.push('-');\n            }\n        } else {\n            nspaces\
    \ = 0;\n            s.push(c);\n        }\n    }\n    s\n}\n\nfn main() {\n  \
    \  let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_Dirty_Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpcjlf8izx.rs:27:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1659821680
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut replaced_text = String::new();\n    let mut consecutive_spaces = 0;\n  \
    \  for c in text.chars() {\n        if c.is_whitespace() {\n            consecutive_spaces\
    \ += 1;\n            replaced_text.push('_');\n        } else {\n            consecutive_spaces\
    \ = 0;\n            replaced_text.push(c);\n        }\n        if consecutive_spaces\
    \ > 2 {\n            consecutive_spaces = 2;\n            replaced_text.push('-');\n\
    \        }\n    }\n    return replaced_text;\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa___-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmplwd1dq2q.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821680
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut buf = String::new();\n    let mut spaces_count = 0;\n    for c in text.chars()\
    \ {\n        if c == ' ' {\n            if spaces_count < 2 {\n              \
    \  buf.push('_');\n            }\n            spaces_count += 1;\n        } else\
    \ {\n            if spaces_count > 2 {\n                buf.push('-');\n     \
    \       }\n            buf.push(c);\n            spaces_count = 0;\n        }\n\
    \    }\n    buf\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmpubm5hjp1.rs:29:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821680
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut fixed_text = String::from(\"\");\n    let mut prev_character = \"\";\n \
    \   for character in text.chars() {\n        if character == ' ' {\n         \
    \   if prev_character == \" \" {\n                fixed_text.push('-');\n    \
    \        } else {\n                fixed_text.push('_');\n            }\n    \
    \    } else {\n            fixed_text.push(character);\n        }\n        prev_character\
    \ = &fixed_text[fixed_text.len()-1..];\n    }\n    fixed_text\n}\n\nfn main()\
    \ {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa___mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmp0jrn6q6p.rs:27:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821680
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut fixed_text = String::new();\n    let mut spaces_count = 0;\n    for c in\
    \ text.chars() {\n        if c == ' ' {\n            spaces_count += 1;\n    \
    \        if spaces_count > 2 {\n                continue;\n            }\n   \
    \         fixed_text.push('_');\n        } else {\n            spaces_count =\
    \ 0;\n            fixed_text.push(c);\n        }\n    }\n    fixed_text\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmpr8qj6kxr.rs:27:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821680
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut result = text.clone();\n    result = result.replace(\" \", \"_\");\n   \
    \ let mut space_counter = 0;\n    for (i, c) in result.chars().enumerate() {\n\
    \        if c == '_' {\n            space_counter += 1;\n            if space_counter\
    \ > 2 {\n                result.replace_range(i - space_counter + 1..i + 1, \"\
    -\");\n            }\n        } else {\n            space_counter = 0;\n     \
    \   }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0502]: cannot borrow `result` as mutable because it is also borrowed\
    \ as immutable\n  --> /tmp/tmp5rczwacw.rs:12:17\n   |\n8  |     for (i, c) in\
    \ result.chars().enumerate() {\n   |                   --------------------------\n\
    \   |                   |\n   |                   immutable borrow occurs here\n\
    \   |                   immutable borrow later used here\n...\n12 |          \
    \       result.replace_range(i - space_counter + 1..i + 1, \"-\");\n   |     \
    \            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ mutable borrow\
    \ occurs here\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1659821680
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut new_text = String::from(\"\");\n    let mut spaces_count = 0;\n    for c\
    \ in text.chars() {\n        if c == ' ' {\n            spaces_count += 1;\n \
    \           if spaces_count == 1 {\n                new_text.push('_');\n    \
    \        } else if spaces_count > 2 {\n                new_text.push('-');\n \
    \           }\n        } else {\n            new_text.push(c);\n            spaces_count\
    \ = 0;\n        }\n    }\n    new_text\n}\n\nfn main() {\n    let candidate =\
    \ fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_Dirty_Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpyv7n3yb7.rs:27:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1659821680
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut new_text = String::new();\n    let mut escaped = false;\n    for c in text.chars()\
    \ {\n        if c == ' ' {\n            if escaped {\n                new_text.push('-');\n\
    \                escaped = false;\n            } else {\n                new_text.push('_');\n\
    \                escaped = true;\n            }\n        } else {\n          \
    \  new_text.push(c);\n            escaped = false;\n        }\n    }\n    new_text\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmp9wojm2d_.rs:28:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1659821680
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ spaces = \"    \";\n    let mut has_more_spaces = false;\n    let mut fixed_text\
    \ = String::new();\n    for ch in text.chars() {\n        if ch == ' ' {\n   \
    \         if has_more_spaces {\n                fixed_text.push_str(spaces);\n\
    \            } else {\n                fixed_text.push('_');\n            }\n\
    \            has_more_spaces = true;\n        } else {\n            fixed_text.push(ch);\n\
    \            has_more_spaces = false;\n        }\n    }\n    fixed_text\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_    Dirty_    Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpdspb7wbd.rs:28:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1659821680
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    if text.contains(\"\
    \  \") {\n        text.replace(\"  \", \"-\")\n    } else {\n        text.replace(\"\
    \ \", \"_\")\n    }\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow Yellow-Dirty-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmp1noykadn.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1659821680
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut result = text.clone();\n    result = result.replace(\" \", \"_\");\n   \
    \ if result.contains(\"__\") {\n        result = result.replace(\"__\", \"-\"\
    );\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n   \
    \ assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n\
    \    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"\
    ));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")),\
    \ String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow-Dirty-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmp8i4mt2pd.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1659821680
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut prev_space = false;\n    let mut num_spaces = 0;\n    let mut result = String::new();\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            num_spaces +=\
    \ 1;\n            if prev_space {\n                continue;\n            }\n\
    \            prev_space = true;\n            if num_spaces > 2 {\n           \
    \     result.push('-');\n            } else {\n                result.push('_');\n\
    \            }\n        } else {\n            num_spaces = 0;\n            prev_space\
    \ = false;\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_Dirty_Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpgnrq6bp4.rs:33:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1659821680
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut result = text.replace(\" \", \"_\");\n    let mut was_space = false;\n \
    \   let mut prev_was_space = false;\n    for c in result.chars() {\n        if\
    \ c == '_' {\n            if was_space {\n                prev_was_space = true;\n\
    \            }\n            was_space = true;\n        } else {\n            if\
    \ prev_was_space {\n                result = result.replace(\"__\", \"-\");\n\
    \            }\n            was_space = false;\n            prev_was_space = false;\n\
    \        }\n    }\n    if prev_was_space {\n        result = result.replace(\"\
    __\", \"-\");\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0506]: cannot assign to `result` because it is borrowed\n    -->\
    \ /tmp/tmptef0650j.rs:16:17\n     |\n8    |     for c in result.chars() {\n  \
    \   |              --------------\n     |              |\n     |             \
    \ borrow of `result` occurs here\n     |              borrow later used here\n\
    ...\n16   |                 result = result.replace(\"__\", \"-\");\n     |  \
    \               ^^^^^^ assignment to borrowed `result` occurs here\n     |\n \
    \    = note: borrow occurs due to deref coercion to `str`\nnote: deref defined\
    \ here\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0506`.\n"
  stdout: ''
  timestamp: 1659821680
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut result = String::new();\n    let mut iter = text.chars();\n    let mut has_space\
    \ = false;\n    let mut consecutive_spaces = 0;\n    while let Some(letter) =\
    \ iter.next() {\n        if letter.is_whitespace() {\n            if has_space\
    \ {\n                consecutive_spaces += 1;\n            } else {\n        \
    \        has_space = true;\n                consecutive_spaces = 1;\n        \
    \    }\n            if consecutive_spaces == 1 {\n                result.push('_');\n\
    \            } else if consecutive_spaces > 2 {\n                result.push('-');\n\
    \            }\n        } else {\n            has_space = false;\n           \
    \ consecutive_spaces = 0;\n            result.push(letter);\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_Dirty_Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmplay13puz.rs:35:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1659821680
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    // let\
    \ mut text_vec: Vec<char> = Vec::new();\n    // let mut result_vec: Vec<char>\
    \ = Vec::new();\n    // let mut prev_space = false;\n    // let mut space_count\
    \ = 0;\n    // let mut index = 0;\n    // let text_len = text.len();\n    // let\
    \ text_chars: Vec<char> = text.chars().collect();\n    // while index < text_len\
    \ {\n    //     if text_chars[index] == ' ' {\n    //         if prev_space {\n\
    \    //             space_count += 1;\n    //         } else {\n    //       \
    \      space_count = 1;\n    //             prev_space = true;\n    //       \
    \  }\n    //     } else {\n    //         prev_space = false;\n    //     }\n\
    \    //     if space_count > 2 {\n    //         result_vec.push('-');\n    //\
    \         space_count = 0;\n    //     } else {\n    //         for _i in 0..space_count\
    \ {\n    //             result_vec.push('_');\n    //         }\n    //      \
    \   space_count = 0;\n    //         result_vec.push(text_chars[index]);\n   \
    \ //     }\n    //     index += 1;\n    // }\n    // let mut text_str = String::new();\n\
    \    // for i in result_vec {\n    //     text_str.push(i);\n    // }\n    //\
    \ text_str\n    text.replace(\" \", \"_\")\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa___mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmp82k5a75g.rs:48:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821680
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ spaces = \"     \";\n    let mut replaced = text.replace(\" \", \"_\");\n  \
    \  replaced = replaced.replace(spaces, \"-\");\n    replaced\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa___mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmp8gn6ngld.rs:16:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821680
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    text.replace(\"\
    \ \", \"_\")\n        .replace(\"__\", \"-\")\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow-Dirty-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpl0euhzrr.rs:13:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1659821679
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    text.replace(\"\
    \  \", \"-\")\n        .replace(\" \", \"_\")\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow-Dirty-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpehh17ll2.rs:13:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1659821680
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut result = String::new();\n    let mut count = 0;\n    for s in text.chars()\
    \ {\n        if s == ' ' {\n            count += 1;\n            if count == 1\
    \ {\n                result.push('_');\n            } else if count == 2 {\n \
    \               result.push('-');\n            }\n        } else {\n         \
    \   count = 0;\n            result.push(s);\n        }\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmp5_5to5ft.rs:27:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1659821680
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = String::new();\n    let mut is_pre_space = false;\n    let mut is_pre_underline\
    \ = false;\n    for c in text.chars() {\n        if c == ' ' {\n            if\
    \ is_pre_space {\n                if !is_pre_underline {\n                   \
    \ s.push('-');\n                    is_pre_underline = true;\n               \
    \ }\n            } else {\n                s.push('_');\n                is_pre_space\
    \ = true;\n            }\n        } else {\n            s.push(c);\n         \
    \   is_pre_space = false;\n            is_pre_underline = false;\n        }\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpzg3z7_oc.rs:32:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1659821680
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    text.replace(\"\
    \ \", \"_\")\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa___mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmplrg3z4nx.rs:13:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821680
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    // TODO\n\
    \    unimplemented!()\n}\n\nfn main() {\n    let candidate = fix_spaces;\n   \
    \ assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n\
    \    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"\
    ));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")),\
    \ String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp92q46rgs.rs:6:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659821680
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut chars = text.chars();\n    let mut res = String::new();\n    let mut space_count\
    \ = 0;\n    while let Some(ch) = chars.next() {\n        match ch {\n        \
    \    ' ' => {\n                space_count += 1;\n                if space_count\
    \ > 2 {\n                    continue;\n                }\n                res.push('_');\n\
    \            }\n            _ => {\n                space_count = 0;\n       \
    \         res.push(ch);\n            }\n        }\n    }\n    return res;\n}\n\
    \nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmp8au_fpxn.rs:31:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821680
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ text = text.replace(\" \", \"_\");\n    return text.replace(\"__\", \"-\");\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow-Dirty-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpfasewf13.rs:13:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1659821681
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut replaced = String::new();\n    let mut consecutive_spaces = 0;\n    for\
    \ character in text.chars() {\n        if character == ' ' {\n            consecutive_spaces\
    \ += 1;\n            if consecutive_spaces > 2 {\n                continue;\n\
    \            }\n            replaced.push('_');\n        } else {\n          \
    \  consecutive_spaces = 0;\n            replaced.push(character);\n        }\n\
    \    }\n    replaced\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmpxdrbfdgx.rs:27:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821681
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut result = String::new();\n    let mut spaces = 0;\n    for c in text.chars()\
    \ {\n        if c == ' ' {\n            spaces += 1;\n            if spaces >\
    \ 2 {\n                spaces = 0;\n                result.push('-');\n      \
    \      }\n        } else {\n            if spaces > 0 {\n                for _\
    \ in 0..spaces {\n                    result.push('_');\n                }\n \
    \               spaces = 0;\n            }\n            result.push(c);\n    \
    \    }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir_Hanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmppcfuzn7q.rs:30:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821681
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ reg = Regex::new(r\"\\s+\").unwrap();\n    reg.replace_all(&text, \"_\").to_string()\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Regex`\n --> /tmp/tmparhizx0c.rs:5:15\n\
    \  |\n5 |     let reg = Regex::new(r\"\\s+\").unwrap();\n  |               ^^^^^\
    \ use of undeclared type `Regex`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659821680
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    text.replace(\"\
    \  \", \"-\")\n        .replace(\" \", \"_\")\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow-Dirty-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpehh17ll2.rs:13:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1659821680
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut prev_char: Option<char> = None;\n    let mut count_space = 0;\n    let mut\
    \ result = String::new();\n    for c in text.chars() {\n        if c == ' ' {\n\
    \            count_space += 1;\n            if count_space > 2 {\n           \
    \     result.push('-');\n                count_space = 0;\n            }\n   \
    \     } else {\n            result.push(c);\n            count_space = 0;\n  \
    \      }\n        prev_char = Some(c);\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"MudasirHanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp7cstun7z.rs:27:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821681
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    text.replace(\"\
    \ \", \"_\")\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa___mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmplrg3z4nx.rs:13:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821680
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut result = text.clone();\n    let mut start_idx = 0;\n    let mut end_idx\
    \ = 0;\n    let mut prev_idx = 0;\n    let mut prev_end_idx = 0;\n    while let\
    \ Some(idx) = result[start_idx..].find(' ') {\n        end_idx = start_idx + idx;\n\
    \        if end_idx > prev_end_idx {\n            result.replace_range(prev_idx..end_idx,\
    \ \"-\");\n            start_idx = end_idx + 1;\n            prev_idx = end_idx;\n\
    \            prev_end_idx = end_idx;\n        } else {\n            result.replace_range(prev_idx..end_idx,\
    \ \"_\");\n            start_idx = end_idx + 1;\n            prev_idx = end_idx;\n\
    \            prev_end_idx = end_idx;\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"- Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmptl75aztq.rs:30:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821681
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut new_text = String::from(\"\");\n    let mut was_space = false;\n    let\
    \ mut consecutive_space = false;\n    for ch in text.chars() {\n        if ch\
    \ == ' ' {\n            if !was_space {\n                was_space = true;\n \
    \               consecutive_space = true;\n                new_text.push('_');\n\
    \            } else {\n                if consecutive_space {\n              \
    \      new_text.push('-');\n                    consecutive_space = false;\n \
    \               }\n            }\n        } else {\n            was_space = false;\n\
    \            consecutive_space = false;\n            new_text.push(ch);\n    \
    \    }\n    }\n    new_text\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpky5ypiav.rs:33:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1659821681
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut new_text = String::new();\n    let mut prev_space = false;\n    let mut\
    \ more_than_two_spaces = false;\n    for char in text.chars() {\n        if char\
    \ == ' ' {\n            if prev_space {\n                if !more_than_two_spaces\
    \ {\n                    more_than_two_spaces = true;\n                    new_text.push('-');\n\
    \                }\n            } else {\n                new_text.push('_');\n\
    \                prev_space = true;\n            }\n        } else {\n       \
    \     new_text.push(char);\n            prev_space = false;\n            more_than_two_spaces\
    \ = false;\n        }\n    }\n    new_text\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmp4j9u0w9k.rs:32:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1659821681
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut char_iter = text.chars();\n    let mut result = String::new();\n    let\
    \ mut prev = '_';\n    let mut curr = '_';\n    let mut next = '_';\n    if let\
    \ Some(c) = char_iter.next() {\n        prev = c;\n        if let Some(c) = char_iter.next()\
    \ {\n            curr = c;\n            if let Some(c) = char_iter.next() {\n\
    \                next = c;\n            }\n        }\n    }\n    while curr !=\
    \ '_' {\n        if curr == ' ' {\n            if next == ' ' {\n            \
    \    if prev == ' ' {\n                    // c-3\n                    result.push('-');\n\
    \                } else {\n                    // 3-2\n                    result.push('_');\n\
    \                }\n            } else {\n                // 2-1\n           \
    \     result.push('_');\n            }\n        } else {\n            result.push(curr);\n\
    \        }\n        prev = curr;\n        curr = next;\n        if let Some(c)\
    \ = char_iter.next() {\n            next = c;\n        } else {\n            next\
    \ = '_';\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate =\
    \ fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"xample\"`,\n right: `\"Example\"`', /tmp/tmp8t_ewytd.rs:49:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821681
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    text.replace(\"\
    \  \", \"-\")\n        .replace(\" \", \"_\")\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow-Dirty-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpehh17ll2.rs:13:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1659821680
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut res = String::new();\n    let mut space_counter = 0;\n    for ch in text.chars()\
    \ {\n        if ch == ' ' {\n            space_counter += 1;\n            if space_counter\
    \ > 2 {\n                if res.pop() != Some('-') {\n                    res.push('-');\n\
    \                }\n            } else {\n                res.push('_');\n   \
    \         }\n        } else {\n            space_counter = 0;\n            res.push(ch);\n\
    \        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa_-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmpzibslm_8.rs:30:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821681
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    text.replace(\"\
    \  \", \"-\")\n        .replace(\" \", \"_\")\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow-Dirty-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpehh17ll2.rs:13:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1659821680
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut text = text;\n    let mut found_count = 0;\n    while text.find(\"  \").is_some()\
    \ {\n        text = text.replace(\"  \", \"-\");\n        found_count += 1;\n\
    \        if found_count == 3 {\n            break;\n        }\n    }\n    text.replace(\"\
    \ \", \"_\")\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow-Dirty-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmp_fw0qivc.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1659821681
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut result = text;\n    let mut spaces_count = 0;\n    for c in text.chars()\
    \ {\n        if c == ' ' {\n            spaces_count += 1;\n        } else {\n\
    \            if spaces_count > 2 {\n                result = result.replace(\"\
    \ \", \"-\");\n            } else {\n                result = result.replace(\"\
    \ \", \"_\");\n            }\n            spaces_count = 0;\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `text`\n    --> /tmp/tmpmc63_b7z.rs:7:14\n\
    \     |\n4    | fn fix_spaces(text: String) -> String {\n     |              \
    \ ---- move occurs because `text` has type `String`, which does not implement\
    \ the `Copy` trait\n5    |     let mut result = text;\n     |                \
    \      ---- value moved here\n6    |     let mut spaces_count = 0;\n7    |   \
    \  for c in text.chars() {\n     |              ^^^^^^^^^^^^ value borrowed here\
    \ after move\n     |\n     = note: borrow occurs due to deref coercion to `str`\n\
    note: deref defined here\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659821681
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    text.replace(\"\
    \ \", \"_\")\n        .split_whitespace()\n        .collect::<Vec<&str>>()\n \
    \       .join(\"-\")\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa___mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmplzoybpy8.rs:16:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821681
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut result = String::new();\n    let mut prev = \"\";\n    for ch in text.chars()\
    \ {\n        if ch.is_whitespace() {\n            if prev == \" \" {\n       \
    \         result.push('-');\n            } else {\n                result.push('_');\n\
    \            }\n        } else {\n            result.push(ch);\n        }\n  \
    \      prev = &result[result.len() - 1..];\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa___mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmpmyesqwut.rs:27:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821681
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ text_bytes = text.as_bytes();\n    let mut new_text = Vec::with_capacity(text.len());\n\
    \    for (idx, &byte) in text_bytes.iter().enumerate() {\n        match byte {\n\
    \            b' ' => {\n                let mut double_spaces = false;\n     \
    \           if idx + 1 < text_bytes.len() && text_bytes[idx + 1] == b' ' {\n \
    \                   double_spaces = true;\n                }\n               \
    \ if idx + 2 < text_bytes.len() && text_bytes[idx + 2] == b' ' {\n           \
    \         new_text.push(b'-');\n                } else if double_spaces {\n  \
    \                  new_text.push(b'_');\n                } else {\n          \
    \          new_text.push(b'_');\n                }\n            }\n          \
    \  _ => new_text.push(byte),\n        }\n    }\n    String::from_utf8(new_text).unwrap()\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa-__mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmprv62ryk9.rs:33:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821681
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut result = String::new();\n    let mut counter = 0;\n    for s in text.chars()\
    \ {\n        if s == ' ' {\n            if counter == 0 {\n                result.push('_');\n\
    \            }\n            counter += 1;\n        } else {\n            if counter\
    \ > 2 {\n                result.push('-');\n            } else {\n           \
    \     for _ in 0..counter {\n                    result.push('_');\n         \
    \       }\n            }\n            counter = 0;\n            result.push(s);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir__Hanif_\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpq9qp1_vv.rs:31:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821681
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    //TODO:\
    \ Implement\n    String::new()\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"Example\"`', /tmp/tmpbvuc66x5.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821681
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut result = String::new();\n    let mut seen_space = false;\n    let mut count\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            if seen_space\
    \ {\n                count += 1;\n            } else {\n                seen_space\
    \ = true;\n                count = 1;\n            }\n        } else {\n     \
    \       seen_space = false;\n            count = 0;\n        }\n        if count\
    \ > 2 {\n            result.push('-');\n        } else if c == ' ' {\n       \
    \     result.push('_');\n        } else {\n            result.push(c);\n     \
    \   }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmp52auciq3.rs:36:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821681
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut result = String::new();\n    let mut spaces = 0;\n    for c in text.chars()\
    \ {\n        if c == ' ' {\n            spaces += 1;\n            if spaces >\
    \ 2 {\n                result.push('-');\n                spaces = 0;\n      \
    \      }\n        } else {\n            spaces = 0;\n            result.push(if\
    \ c == ' ' { '_' } else { c });\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"MudasirHanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpt2fb3sih.rs:25:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821681
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    lazy_static!\
    \ {\n        static ref PATTERN: Regex = Regex::new(r\"(?P<space>[\\s]{2,})\"\
    ).unwrap();\n    }\n    PATTERN.replace_all(&text, \"_\").to_string()\n}\n\nfn\
    \ main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error: cannot find macro `lazy_static` in this scope\n --> /tmp/tmpc7ojm1av.rs:5:5\n\
    \  |\n5 |     lazy_static! {\n  |     ^^^^^^^^^^^\n\nerror[E0425]: cannot find\
    \ value `PATTERN` in this scope\n --> /tmp/tmpc7ojm1av.rs:8:5\n  |\n8 |     PATTERN.replace_all(&text,\
    \ \"_\").to_string()\n  |     ^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0425`.\n"
  stdout: ''
  timestamp: 1659821681
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    text.replace(\"\
    \ \", \"_\")\n        .replace(\"__\", \"-\")\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow-Dirty-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpl0euhzrr.rs:13:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1659821679
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut result = String::new();\n    let mut consecutive_spaces = 0;\n    for ch\
    \ in text.chars() {\n        if ch == ' ' {\n            consecutive_spaces +=\
    \ 1;\n            if consecutive_spaces < 3 {\n                result.push('_');\n\
    \            }\n        } else {\n            consecutive_spaces = 0;\n      \
    \      result.push(ch);\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")),\
    \ String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmps3l31_iz.rs:26:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821681
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ spaces = Regex::new(r\"\\s+\").unwrap();\n    spaces.replace_all(&text, \"_\"\
    ).to_string()\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Regex`\n --> /tmp/tmpjk_oj4n7.rs:5:18\n\
    \  |\n5 |     let spaces = Regex::new(r\"\\s+\").unwrap();\n  |              \
    \    ^^^^^ use of undeclared type `Regex`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659821681
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut new_string = String::new();\n    let mut prev_char = ' ';\n    let mut consecutive_spaces\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            if prev_char\
    \ == ' ' {\n                consecutive_spaces += 1;\n            } else {\n \
    \               consecutive_spaces = 1;\n            }\n            if consecutive_spaces\
    \ > 2 {\n                new_string.push('-');\n            } else {\n       \
    \         new_string.push('_');\n            }\n        } else {\n           \
    \ consecutive_spaces = 0;\n            new_string.push(c);\n        }\n      \
    \  prev_char = c;\n    }\n    new_string\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmpb7g90s3u.rs:34:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821681
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut result = String::new();\n    let mut spaces = 0;\n    for c in text.chars()\
    \ {\n        if c == ' ' {\n            spaces += 1;\n            if spaces <\
    \ 3 {\n                result.push('_');\n            } else {\n             \
    \   result.push('-');\n            }\n        } else {\n            spaces = 0;\n\
    \            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmp0j0_tyhv.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821681
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut output = String::new();\n    let mut counter = 0;\n    for c in text.chars()\
    \ {\n        if c == ' ' {\n            counter += 1;\n            if counter\
    \ == 1 {\n                output.push('_');\n            } else if counter ==\
    \ 2 {\n                output.push('-');\n            }\n        } else {\n  \
    \          output.push(c);\n            counter = 0;\n        }\n    }\n    output\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmprp52zbdr.rs:27:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1659821681
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    lazy_static!\
    \ {\n        static ref RE: Regex = Regex::new(r\"\\s{2,}\").unwrap();\n    }\n\
    \    let fixed_text = RE.replace_all(&text, \"-\");\n    fixed_text.to_string().replace(\"\
    \ \", \"_\")\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error: cannot find macro `lazy_static` in this scope\n --> /tmp/tmpc9slymte.rs:5:5\n\
    \  |\n5 |     lazy_static! {\n  |     ^^^^^^^^^^^\n\nerror[E0425]: cannot find\
    \ value `RE` in this scope\n --> /tmp/tmpc9slymte.rs:8:22\n  |\n8 |     let fixed_text\
    \ = RE.replace_all(&text, \"-\");\n  |                      ^^ not found in this\
    \ scope\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659821681
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    text.chars()\n\
    \        .map(|c| match c {\n            ' ' => '_',\n            _ => c,\n  \
    \      })\n        .collect::<Vec<char>>()\n        .windows(3)\n        .map(|x|\
    \ match x {\n            ['_', '_', '_'] => vec!['-', '-'],\n            ['_',\
    \ '_', c] => vec!['-', c],\n            [a, '_', '_'] => vec![a, '-'],\n     \
    \       _ => x.to_vec(),\n        })\n        .flatten()\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvmty6cgd.rs:14:40\n   |\n\
    14 |             ['_', '_', c] => vec!['-', c],\n   |                        \
    \                ^ expected `char`, found `&char`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n14 |             ['_', '_', c] => vec!['-', *c],\n   |   \
    \                                     +\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpvmty6cgd.rs:15:38\n   |\n15 |             [a, '_', '_'] => vec![a, '-'],\n\
    \   |                                      ^^^ expected `&char`, found `char`\n\
    \nerror[E0308]: `match` arms have incompatible types\n  --> /tmp/tmpvmty6cgd.rs:15:30\n\
    \   |\n12 |           .map(|x| match x {\n   |  __________________-\n13 | |  \
    \           ['_', '_', '_'] => vec!['-', '-'],\n   | |                       \
    \         -------------- this is found to be of type `Vec<char>`\n14 | |     \
    \        ['_', '_', c] => vec!['-', c],\n   | |                              ------------\
    \ this is found to be of type `Vec<char>`\n15 | |             [a, '_', '_'] =>\
    \ vec![a, '-'],\n   | |                              ^^^^^^^^^^^^ expected `char`,\
    \ found `&char`\n16 | |             _ => x.to_vec(),\n17 | |         })\n   |\
    \ |_________- `match` arms have incompatible types\n   |\n   = note: expected\
    \ struct `Vec<char, std::alloc::Global>`\n              found struct `Vec<&char,\
    \ _>`\n   = note: this error originates in the macro `vec` (in Nightly builds,\
    \ run with -Z macro-backtrace for more info)\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659821681
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut counter = 0;\n    let mut result = String::new();\n    for c in text.chars()\
    \ {\n        if c == ' ' {\n            counter += 1;\n            if counter\
    \ <= 2 {\n                result.push('_');\n            }\n        } else {\n\
    \            if counter > 2 {\n                result.push('-');\n           \
    \ }\n            result.push(c);\n            counter = 0;\n        }\n    }\n\
    \    if counter > 2 {\n        result.push('-');\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmp5r2nblbx.rs:32:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821681
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut result = String::new();\n    let mut chars = text.chars();\n    let mut\
    \ prev = chars.next();\n    let mut curr = chars.next();\n    let mut consecutive_spaces\
    \ = 0;\n    loop {\n        match (prev, curr) {\n            (Some(p), Some(c))\
    \ => {\n                if p == ' ' {\n                    consecutive_spaces\
    \ += 1;\n                    if consecutive_spaces == 2 {\n                  \
    \      result.push('-');\n                    }\n                } else {\n  \
    \                  result.push(p);\n                    consecutive_spaces = 0;\n\
    \                }\n                prev = Some(c);\n                curr = chars.next();\n\
    \            }\n            (Some(p), None) => {\n                if p == ' '\
    \ {\n                    consecutive_spaces += 1;\n                    if consecutive_spaces\
    \ == 2 {\n                        result.push('-');\n                    }\n \
    \               } else {\n                    result.push(p);\n              \
    \      consecutive_spaces = 0;\n                }\n                break;\n  \
    \          }\n            (None, None) => break,\n            (None, Some(_))\
    \ => panic!(\"Impossible state reached\"),\n        }\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"MudasirHanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp6030a42c.rs:47:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821681
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut a = text.trim().replace(\" \", \"_\");\n    if a.len() >= 2 {\n        if\
    \ a.chars().nth(0).unwrap() == '_' {\n            a = a.replace(\"_\", \"\");\n\
    \        }\n        a = a.replace(\"__\", \"-\");\n    }\n    a\n}\n\nfn main()\
    \ {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir_Hanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpb1s6x0_o.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821681
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut result = String::new();\n    let mut count = 0;\n    for c in text.chars()\
    \ {\n        if c.is_whitespace() {\n            count += 1;\n            if count\
    \ > 2 {\n                result.push('-');\n                count = 0;\n     \
    \       } else {\n                result.push('_');\n            }\n        }\
    \ else {\n            result.push(c);\n            count = 0;\n        }\n   \
    \ }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmpp8znohi9.rs:29:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821681
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut text_vec: Vec<char> = text.chars().collect();\n    let len = text_vec.len();\n\
    \    let mut i = 0;\n    while i < len {\n        let c = text_vec[i];\n     \
    \   if c == ' ' {\n            text_vec[i] = '_';\n            let mut j = i +\
    \ 1;\n            while j < len && text_vec[j] == ' ' {\n                j +=\
    \ 1;\n            }\n            if j - i > 2 {\n                text_vec[i] =\
    \ '-';\n                let mut k = i + 1;\n                while k < j {\n  \
    \                  text_vec[k] = '_';\n                    k += 1;\n         \
    \       }\n            }\n            i = j;\n        } else {\n            i\
    \ += 1;\n        }\n    }\n    text_vec.into_iter().collect()\n}\n\nfn main()\
    \ {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_ Dirty_ Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpao2dz6nx.rs:36:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1659821681
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut result = String::new();\n    let mut prev_ch = '_';\n    let mut space_counter\
    \ = 0;\n    for ch in text.chars() {\n        if ch == ' ' {\n            if prev_ch\
    \ == ' ' {\n                space_counter += 1;\n            } else {\n      \
    \          space_counter = 1;\n            }\n            if space_counter > 2\
    \ {\n                result.push('-');\n            } else {\n               \
    \ result.push('_');\n            }\n        } else {\n            result.push(ch);\n\
    \            space_counter = 0;\n        }\n        prev_ch = ch;\n    }\n   \
    \ result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmpw6raf_bq.rs:34:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821681
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut result = String::from(\"\");\n    let mut i = 0;\n    let mut space_count\
    \ = 0;\n    let len = text.len();\n    for character in text.chars() {\n     \
    \   if character == ' ' {\n            space_count += 1;\n            if space_count\
    \ > 2 {\n                if i > 0 && i < len - 1 {\n                    result.push('-');\n\
    \                }\n            } else {\n                result.push('_');\n\
    \            }\n        } else {\n            space_count = 0;\n            result.push(character);\n\
    \        }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmpo50p68aq.rs:33:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821682
- exit_code: 0
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut chars = text.chars();\n    let mut str_vec = Vec::new();\n    let mut consecutive_space_counter\
    \ = 0;\n    let mut is_last_char_space = false;\n    while let Some(c) = chars.next()\
    \ {\n        if c == ' ' {\n            consecutive_space_counter += 1;\n    \
    \        is_last_char_space = true;\n        } else {\n            if consecutive_space_counter\
    \ > 2 {\n                str_vec.push('-');\n            } else {\n          \
    \      for _ in 0..consecutive_space_counter {\n                    str_vec.push('_');\n\
    \                }\n            }\n            str_vec.push(c);\n            consecutive_space_counter\
    \ = 0;\n            is_last_char_space = false;\n        }\n    }\n    if is_last_char_space\
    \ {\n        if consecutive_space_counter > 2 {\n            str_vec.push('-');\n\
    \        } else {\n            for _ in 0..consecutive_space_counter {\n     \
    \           str_vec.push('_');\n            }\n        }\n    }\n    str_vec.into_iter().collect()\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821682
- exit_code: 0
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    // if\
    \ string has more than 2 consecutive spaces\n    let text = text.replace(\"  \
    \ \", \"-\");\n    // replace all spaces with underscores\n    text.replace(\"\
    \ \", \"_\")\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821682
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut res = text.replace(\" \", \"_\");\n    let regex = Regex::new(r\"([-_]){2,}\"\
    ).unwrap();\n    res = regex.replace_all(&res, \"-\").to_string();\n    res\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Regex`\n --> /tmp/tmpja5m26cn.rs:6:17\n\
    \  |\n6 |     let regex = Regex::new(r\"([-_]){2,}\").unwrap();\n  |         \
    \        ^^^^^ use of undeclared type `Regex`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659821681
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    text.chars()\n\
    \        .fold(String::new(), |mut acc, character| {\n            if character\
    \ == ' ' {\n                if acc.contains(\"--\") {\n                    return\
    \ acc;\n                }\n                acc.push('-');\n            } else\
    \ {\n                acc.push(character);\n            }\n            acc\n  \
    \      })\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir-Hanif-\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpo_3yfn0l.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821682
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut res = String::new();\n    let mut prev_is_space = false;\n    let mut has_two_consecutive_spaces\
    \ = false;\n    for ch in text.chars() {\n        if ch == ' ' {\n           \
    \ if !prev_is_space {\n                res.push('_');\n                prev_is_space\
    \ = true;\n            } else {\n                if !has_two_consecutive_spaces\
    \ {\n                    has_two_consecutive_spaces = true;\n                \
    \    res.push('-');\n                }\n            }\n        } else {\n    \
    \        if has_two_consecutive_spaces {\n                has_two_consecutive_spaces\
    \ = false;\n            }\n            res.push(ch);\n            prev_is_space\
    \ = false;\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpocuvr5po.rs:34:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1659821682
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp74slbgov.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659821682
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut result = String::new();\n    let mut consecutive_spaces = 0;\n    for c\
    \ in text.chars() {\n        if c == ' ' {\n            consecutive_spaces +=\
    \ 1;\n            if consecutive_spaces > 2 {\n                result.push('-');\n\
    \                consecutive_spaces = 0;\n            } else {\n             \
    \   result.push('_');\n            }\n        } else {\n            consecutive_spaces\
    \ = 0;\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmpffa9a5pn.rs:29:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821682
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut out = String::new();\n    let mut spaces = 0;\n    for c in text.chars()\
    \ {\n        if c == ' ' {\n            if spaces < 2 {\n                out.push('_');\n\
    \            } else {\n                out.push('-');\n            }\n       \
    \     spaces += 1;\n        } else {\n            spaces = 0;\n            out.push(c);\n\
    \        }\n    }\n    out\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmpkzteo8ft.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821682
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n\tlet mut\
    \ ans = text.replace(\" \", \"_\");\n\tlet spaces = vec![' ', ' ', ' '];\n\tans\
    \ = ans.replace(&spaces.concat(), \"-\");\n\tans\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `concat` exists for struct `Vec<char>`, but its\
    \ trait bounds were not satisfied\n --> /tmp/tmpvr5nb32h.rs:7:28\n  |\n7 |   \
    \  ans = ans.replace(&spaces.concat(), \"-\");\n  |                          \
    \     ^^^^^^ method cannot be called on `Vec<char>` due to unsatisfied trait bounds\n\
    \  |\n  = note: the following trait bounds were not satisfied:\n          `<[char]\
    \ as Concat<_>>::Output = _`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659821682
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut new_text = String::new();\n    let mut count = 0;\n    for ch in text.chars()\
    \ {\n        if ch != ' ' {\n            while count > 0 {\n                if\
    \ count > 2 {\n                    new_text.push('-');\n                } else\
    \ {\n                    new_text.push('_');\n                }\n            \
    \    count -= 1;\n            }\n            new_text.push(ch);\n        } else\
    \ {\n            count += 1;\n        }\n    }\n    new_text\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir_Hanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpeww2oi9r.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821682
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    lazy_static!\
    \ {\n        static ref RE_SPACES: Regex = Regex::new(r\"(\\s{2,})\").unwrap();\n\
    \    }\n    RE_SPACES.replace_all(&text, \"-\").replace(\" \", \"_\")\n}\n\nfn\
    \ main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error: cannot find macro `lazy_static` in this scope\n --> /tmp/tmplsx_ed4m.rs:5:5\n\
    \  |\n5 |     lazy_static! {\n  |     ^^^^^^^^^^^\n\nerror[E0425]: cannot find\
    \ value `RE_SPACES` in this scope\n --> /tmp/tmplsx_ed4m.rs:8:5\n  |\n8 |    \
    \ RE_SPACES.replace_all(&text, \"-\").replace(\" \", \"_\")\n  |     ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659821681
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ text = text.replace(' ', \"_\");\n    let mut m = HashMap::new();\n    let mut\
    \ result = String::new();\n    for letter in text.chars() {\n        let key =\
    \ letter.to_string();\n        if key == \"_\" {\n            let count = m.entry(key).or_insert(0);\n\
    \            *count += 1;\n        } else {\n            m.clear();\n        }\n\
    \        result.push(letter);\n    }\n    result.replace(\"____\", \"___\")\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmpe9fy1zxy.rs:6:17\n  |\n6 |     let mut m = HashMap::new();\n  |    \
    \             ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this\
    \ struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659821681
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut new_text = text.to_string();\n    let spaces = new_text.matches(\" \").count();\n\
    \    let mut new_spaces = 0;\n    if spaces == 0 {\n        new_text\n    } else\
    \ {\n        let mut last_space_pos = 0;\n        for m in new_text.match_indices(\"\
    \ \") {\n            new_spaces += 1;\n            let (i, _) = m;\n         \
    \   if new_spaces > 1 {\n                new_text.replace_range(last_space_pos..i,\
    \ \"-\");\n            } else {\n                new_text.replace_range(i..i +\
    \ 1, \"_\");\n            }\n            last_space_pos = i;\n        }\n    \
    \    new_text\n    }\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0502]: cannot borrow `new_text` as mutable because it is also borrowed\
    \ as immutable\n  --> /tmp/tmp3edrck7g.rs:16:17\n   |\n12 |         for m in new_text.match_indices(\"\
    \ \") {\n   |                  ---------------------------\n   |             \
    \     |\n   |                  immutable borrow occurs here\n   |            \
    \      immutable borrow later used here\n...\n16 |                 new_text.replace_range(last_space_pos..i,\
    \ \"-\");\n   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ mutable borrow occurs here\n\nerror[E0502]: cannot borrow `new_text` as mutable\
    \ because it is also borrowed as immutable\n  --> /tmp/tmp3edrck7g.rs:18:17\n\
    \   |\n12 |         for m in new_text.match_indices(\" \") {\n   |           \
    \       ---------------------------\n   |                  |\n   |           \
    \       immutable borrow occurs here\n   |                  immutable borrow later\
    \ used here\n...\n18 |                 new_text.replace_range(i..i + 1, \"_\"\
    );\n   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ mutable borrow\
    \ occurs here\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1659821681
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    text.replace(\"\
    \ \", \"_\")\n        .replace(\"__\", \"-\")\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow-Dirty-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpl0euhzrr.rs:13:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1659821679
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    text.replace(\"\
    \  \", \"-\")\n        .replace(\" \", \"_\")\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow-Dirty-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpehh17ll2.rs:13:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1659821680
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut result = String::from(\"\");\n    let mut consecutive_spaces = 0;\n    for\
    \ c in text.chars() {\n        if c.is_whitespace() {\n            consecutive_spaces\
    \ += 1;\n            if consecutive_spaces > 2 {\n                result.push('-');\n\
    \                consecutive_spaces = 0;\n            } else {\n             \
    \   result.push('_');\n            }\n        } else {\n            consecutive_spaces\
    \ = 0;\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmpfc1n8f2q.rs:29:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821682
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n\tlet mut\
    \ str_it = text.split_whitespace();\n\tlet mut result = String::new();\n\tlet\
    \ mut last_space = false;\n\twhile let Some(word) = str_it.next() {\n\t\tif last_space\
    \ {\n\t\t\tresult.push('-');\n\t\t}\n\t\tresult.push_str(word);\n\t\tlast_space\
    \ = !last_space;\n\t}\n\tresult\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir-Hanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpluhjv4mw.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821682
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut result = text.clone();\n    let mut last_space = -1;\n    for i in 0..text.len()\
    \ {\n        if text.chars().nth(i).unwrap() == ' ' {\n            if last_space\
    \ == -1 {\n                result.replace_range(i..=i, \"_\");\n            }\
    \ else if i - last_space > 2 {\n                result.replace_range(last_space..i,\
    \ \"-\");\n            }\n            last_space = i;\n        }\n    }\n    if\
    \ last_space != -1 && text.len() - last_space > 2 {\n        result.replace_range(last_space..text.len(),\
    \ \"-\");\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmppyno8xv1.rs:6:26\n\
    \  |\n6 |     let mut last_space = -1;\n  |                          ^^ the trait\
    \ `Neg` is not implemented for `usize`\n\nerror[E0277]: the trait bound `usize:\
    \ Neg` is not satisfied\n --> /tmp/tmppyno8xv1.rs:9:30\n  |\n9 |             if\
    \ last_space == -1 {\n  |                              ^^ the trait `Neg` is not\
    \ implemented for `usize`\n\nerror[E0600]: cannot apply unary operator `-` to\
    \ type `usize`\n  --> /tmp/tmppyno8xv1.rs:17:22\n   |\n17 |     if last_space\
    \ != -1 && text.len() - last_space > 2 {\n   |                      ^^\n   | \
    \                     |\n   |                      cannot apply unary operator\
    \ `-`\n   |                      help: you may have meant the maximum value of\
    \ `usize`: `usize::MAX`\n   |\n   = note: unsigned values cannot be negated\n\n\
    error: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0600.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659821682
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    // write\
    \ your solution here\n    text.replace(\"  \", \"-\").replace(\" \", \"_\")\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow-Dirty-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmph8r8vfe7.rs:13:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1659821682
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n\tlet words:\
    \ Vec<&str> = text.split_whitespace().collect();\n\tlet mut spaces = 0;\n\tlet\
    \ mut result = String::new();\n\tfor word in words {\n\t\tif word.is_empty() {\n\
    \t\t\tspaces += 1;\n\t\t} else {\n\t\t\tif spaces > 2 {\n\t\t\t\tresult.push_str(\"\
    - \");\n\t\t\t} else {\n\t\t\t\tfor _ in 0..spaces {\n\t\t\t\t\tresult.push_str(\"\
    _ \");\n\t\t\t\t}\n\t\t\t}\n\t\t\tresult.push_str(word);\n\t\t\tresult.push_str(\"\
    \ \");\n\t\t\tspaces = 0;\n\t\t}\n\t}\n\tif spaces > 2 {\n\t\tresult.push_str(\"\
    -\");\n\t} else {\n\t\tfor _ in 0..spaces {\n\t\t\tresult.push_str(\"_\");\n\t\
    \t}\n\t}\n\tresult\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Example \"`,\n right: `\"Example\"`', /tmp/tmp0somsypg.rs:36:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821682
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    text.replace(\"\
    \  \", \" - \").replace(\" \", \"_\")\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-_Dirty_-_Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpe4md9t6i.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1659821682
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    lazy_static!\
    \ {\n        static ref RE_UNDERSCORE: Regex = Regex::new(r\"\\s+\").unwrap();\n\
    \        static ref RE_HYPHEN: Regex = Regex::new(r\"\\s{2,}\").unwrap();\n  \
    \  }\n\n    let replaced = RE_UNDERSCORE.replace_all(&text, \"_\");\n    let replaced\
    \ = RE_HYPHEN.replace_all(&replaced, \"-\");\n    return replaced.to_string();\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error: cannot find macro `lazy_static` in this scope\n --> /tmp/tmpxzv94xwm.rs:5:5\n\
    \  |\n5 |     lazy_static! {\n  |     ^^^^^^^^^^^\n\nerror[E0425]: cannot find\
    \ value `RE_UNDERSCORE` in this scope\n  --> /tmp/tmpxzv94xwm.rs:10:20\n   |\n\
    10 |     let replaced = RE_UNDERSCORE.replace_all(&text, \"_\");\n   |       \
    \             ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `RE_HYPHEN` in this scope\n  --> /tmp/tmpxzv94xwm.rs:11:20\n   |\n11 |\
    \     let replaced = RE_HYPHEN.replace_all(&replaced, \"-\");\n   |          \
    \          ^^^^^^^^^ not found in this scope\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659821682
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut result = String::new();\n    let mut ctr = 0;\n    for c in text.chars()\
    \ {\n        if c == ' ' {\n            ctr += 1;\n            if ctr < 3 {\n\
    \                result.push('_');\n            } else {\n                result.push('-');\n\
    \            }\n        } else {\n            ctr = 0;\n            result.push(c);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmpviu24t5x.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821682
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut fixed_text = String::new();\n    let mut space_count = 0;\n    for c in\
    \ text.chars() {\n        if c == ' ' {\n            space_count += 1;\n     \
    \       if space_count == 2 {\n                fixed_text.push('-');\n       \
    \         fixed_text.push('-');\n                space_count = 0;\n          \
    \  } else {\n                fixed_text.push('_');\n            }\n        } else\
    \ {\n            space_count = 0;\n            fixed_text.push(c);\n        }\n\
    \    }\n    fixed_text\n}\n\nfn main() {\n    let candidate = fix_spaces;\n  \
    \  assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n\
    \    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"\
    ));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")),\
    \ String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_--Dirty_--Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpzd9hp8cu.rs:29:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1659821682
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut text_vec: Vec<char> = text.chars().collect();\n    let mut fixed_vec: Vec<char>\
    \ = Vec::new();\n    let mut prev_ch: char = '_';\n    let mut prev_prev_ch: char\
    \ = '_';\n    for ch in text_vec {\n        match ch {\n            ' ' => {\n\
    \                if prev_ch == ' ' && prev_prev_ch == ' ' {\n                \
    \    fixed_vec.push('-');\n                } else {\n                    fixed_vec.push('_');\n\
    \                }\n            },\n            ch => fixed_vec.push(ch),\n  \
    \      }\n        prev_prev_ch = prev_ch;\n        prev_ch = ch;\n    }\n    fixed_vec.into_iter().collect()\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmpdkej904b.rs:31:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821682
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    text.split_whitespace()\n\
    \        .map(|s| s.replace(\" \", \"_\"))\n        .collect::<Vec<String>>()\n\
    \        .join(\"-\")\n}\n\nfn main() {\n    let candidate = fix_spaces;\n   \
    \ assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n\
    \    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"\
    ));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")),\
    \ String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir-Hanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpedxmxw5s.rs:14:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821682
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    // return\
    \ text.replace(\" \", \"_\").replace(\"   \", \"-\").replace(\"  \", \"-\");\n\
    \    // text.replace(\" \", \"_\").replace(\"   \", \"-\").replace(\"  \", \"\
    -\")\n    text.replace(\" \", \"_\").replacen(\"  \", \"-\", 1)\n}\n\nfn main()\
    \ {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa___mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmpuj_a8tha.rs:15:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821682
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    text.replace(\"\
    \  \", \"-\")\n        .replace(\" \", \"_\")\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow-Dirty-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpehh17ll2.rs:13:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1659821680
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ text_vec: Vec<char> = text.chars().collect();\n    let mut output: String =\
    \ String::new();\n    let mut space_flag: bool = false;\n    for (idx, c) in text_vec.iter().enumerate()\
    \ {\n        if *c == ' ' {\n            if space_flag == false {\n          \
    \      output.push('_');\n                space_flag = true;\n            } else\
    \ {\n                output.push('-');\n            }\n        } else {\n    \
    \        space_flag = false;\n            output.push(*c);\n        }\n    }\n\
    \    output\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmp7nqw69d1.rs:28:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1659821682
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut result = String::new();\n    let mut last_was_space = false;\n    let mut\
    \ last_was_single_space = false;\n    for c in text.chars() {\n        if c ==\
    \ ' ' {\n            if last_was_space {\n                result.push('-');\n\
    \                last_was_single_space = false;\n            } else {\n      \
    \          result.push('_');\n                last_was_single_space = true;\n\
    \            }\n            last_was_space = true;\n        } else {\n       \
    \     result.push(c);\n            last_was_space = false;\n            last_was_single_space\
    \ = false;\n        }\n    }\n    if last_was_single_space {\n        result.pop();\n\
    \        result.push('_');\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpfod9y_15.rs:35:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1659821682
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut count = 0;\n    let mut new_text = String::new();\n    for c in text.chars()\
    \ {\n        if c == ' ' {\n            count += 1;\n            if count == 1\
    \ {\n                new_text.push('_');\n            } else if count > 2 {\n\
    \                new_text.push('-');\n            }\n        } else {\n      \
    \      new_text.push(c);\n            count = 0;\n        }\n    }\n    new_text\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_Dirty_Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpih669y0q.rs:27:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1659821682
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    // fix_spaces\
    \ implementation here\n    let result = text.replace(\" \", \"_\");\n    result\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa___mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmpz4s85o_t.rs:15:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821682
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut result = String::new();\n    let mut consecutive_spaces = 0;\n    for ch\
    \ in text.chars() {\n        if ch == ' ' {\n            consecutive_spaces +=\
    \ 1;\n            if consecutive_spaces > 2 {\n                continue;\n   \
    \         }\n            result.push('_');\n        } else {\n            consecutive_spaces\
    \ = 0;\n            result.push(ch);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmpwjp15q52.rs:27:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821682
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    text.replace(\"\
    \ \", \"_\")\n        .replace(\"__\", \"-\")\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow-Dirty-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpl0euhzrr.rs:13:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1659821679
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut result = String::new();\n    let mut prev = ' ';\n    let mut consecutive_spaces\
    \ = 0;\n    for ch in text.chars() {\n        match ch {\n            ' ' => {\n\
    \                if prev == ' ' {\n                    consecutive_spaces += 1;\n\
    \                } else {\n                    consecutive_spaces = 1;\n     \
    \           }\n                prev = ' ';\n            }\n            _ => {\n\
    \                if consecutive_spaces == 1 {\n                    result.push('_');\n\
    \                } else if consecutive_spaces > 1 {\n                    result.push('-');\n\
    \                }\n                result.push(ch);\n                consecutive_spaces\
    \ = 0;\n                prev = ch;\n            }\n        }\n    }\n    if consecutive_spaces\
    \ == 1 {\n        result.push('_');\n    } else if consecutive_spaces > 1 {\n\
    \        result.push('-');\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow-Dirty-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmp862p3g_c.rs:42:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1659821682
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut result = String::new();\n    let mut prev_space = false;\n    for c in text.chars()\
    \ {\n        match c {\n            ' ' => {\n                if prev_space {\n\
    \                    result.push('-');\n                } else {\n           \
    \         result.push('_');\n                    prev_space = true;\n        \
    \        }\n            }\n            _ => {\n                result.push(c);\n\
    \                prev_space = false;\n            }\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmp6q4ssd4k.rs:30:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1659821682
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut text = text;\n    text = text.replace(\" \", \"_\");\n    text = text.replace(\"\
    __\", \"-\");\n    text\n}\n\nfn main() {\n    let candidate = fix_spaces;\n \
    \   assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow-Dirty-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmp9b56nenu.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1659821682
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut text = text;\n    let mut spaces = 0;\n    let mut i = 0;\n    while i <\
    \ text.len() {\n        let ch = text.chars().nth(i).unwrap();\n        if ch\
    \ == ' ' {\n            if spaces == 0 {\n                text.replace_range(i..i\
    \ + 1, \"_\");\n            } else if spaces == 1 {\n                text.replace_range(i..i\
    \ + 1, \"-\");\n            } else {\n                text.replace_range(i..i\
    \ + 1, \"\");\n            }\n            spaces += 1;\n        } else {\n   \
    \         spaces = 0;\n        }\n        i += 1;\n    }\n    text\n}\n\nfn main()\
    \ {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmp1pcv3fun.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1659821682
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut result = String::new();\n    let mut char_count = 0;\n    for c in text.chars()\
    \ {\n        match c {\n            ' ' => {\n                char_count += 1;\n\
    \                if char_count == 2 {\n                    result.push('-');\n\
    \                }\n            }\n            _ => {\n                if char_count\
    \ > 2 {\n                    result.push('-');\n                }\n          \
    \      result.push(c);\n                char_count = 0;\n            }\n     \
    \   }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"MudasirHanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpi5061uyc.rs:30:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821682
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut new_text = String::new();\n    let mut spaces = 0;\n    for c in text.chars()\
    \ {\n        if c == ' ' {\n            spaces += 1;\n            if spaces >\
    \ 2 {\n                continue;\n            }\n        } else {\n          \
    \  spaces = 0;\n        }\n        if c == ' ' {\n            new_text.push('_');\n\
    \        } else {\n            new_text.push(c);\n        }\n    }\n    new_text\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmp5v_qu3_7.rs:30:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821682
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut fix_text = text.replace(\" \", \"_\");\n    fix_text = fix_text.replace(\"\
    __\", \"_\");\n    fix_text = fix_text.replace(\"___\", \"_\");\n    fix_text\
    \ = fix_text.replace(\"____\", \"_\");\n    fix_text = fix_text.replace(\"_____\"\
    , \"_\");\n    fix_text = fix_text.replace(\"______\", \"_\");\n    fix_text =\
    \ fix_text.replace(\"_______\", \"_\");\n    fix_text = fix_text.replace(\"________\"\
    , \"_\");\n    fix_text = fix_text.replace(\"_________\", \"_\");\n    fix_text\
    \ = fix_text.replace(\"__________\", \"_\");\n    fix_text = fix_text.replace(\"\
    ___________\", \"_\");\n    fix_text = fix_text.replace(\"____________\", \"_\"\
    );\n    fix_text = fix_text.replace(\"_____________\", \"_\");\n    fix_text =\
    \ fix_text.replace(\"______________\", \"_\");\n    fix_text = fix_text.replace(\"\
    _______________\", \"_\");\n    fix_text = fix_text.replace(\"________________\"\
    , \"_\");\n    fix_text = fix_text.replace(\"_________________\", \"_\");\n  \
    \  fix_text = fix_text.replace(\"__________________\", \"_\");\n    fix_text =\
    \ fix_text.replace(\"___________________\", \"_\");\n    fix_text = fix_text.replace(\"\
    ____________________\", \"_\");\n    fix_text = fix_text.replace(\"_____________________\"\
    , \"_\");\n    fix_text = fix_text.replace(\"______________________\", \"_\");\n\
    \    fix_text = fix_text.replace(\"_______________________\", \"_\");\n    fix_text\
    \ = fix_text.replace(\"________________________\", \"_\");\n    fix_text = fix_text.replace(\"\
    _________________________\", \"_\");\n    fix_text = fix_text.replace(\"__________________________\"\
    , \"_\");\n    fix_text = fix_text.replace(\"___________________________\", \"\
    _\");\n    fix_text = fix_text.replace(\"____________________________\", \"_\"\
    );\n    fix_text = fix_text.replace(\"_____________________________\", \"_\");\n\
    \    fix_text = fix_text.replace(\"______________________________\", \"_\");\n\
    \    fix_text = fix_text.replace(\"________________________\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0765]: unterminated double quote string\n  --> /tmp/tmpjoj_vcv3.rs:44:91\n\
    \   |\n44 |       assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n   |  ___________________________________________________________________________________________^\n\
    45 | | }\n   | |__^\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0765`.\n"
  stdout: ''
  timestamp: 1659821682
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut result = String::new();\n    let mut num_space = 0;\n    for char in text.chars()\
    \ {\n        if char == ' ' {\n            num_space += 1;\n            if num_space\
    \ > 2 {\n                result.push('-');\n                num_space = 0;\n \
    \           } else {\n                result.push('_');\n            }\n     \
    \   } else {\n            result.push(char);\n            num_space = 0;\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmpfmyckzur.rs:29:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821682
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut is_space = false;\n    let mut prev_space = false;\n    let mut result =\
    \ String::new();\n    for c in text.chars() {\n        if c == ' ' {\n       \
    \     if !is_space {\n                if prev_space {\n                    result.push('-');\n\
    \                } else {\n                    result.push('_');\n           \
    \     }\n            }\n            is_space = true;\n            prev_space =\
    \ true;\n        } else {\n            if is_space {\n                result.push('_');\n\
    \            }\n            result.push(c);\n            is_space = false;\n \
    \           prev_space = false;\n        }\n    }\n    if is_space {\n       \
    \ result.push('_');\n    }\n    result\n}\n\nfn main() {\n    let candidate =\
    \ fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir__Hanif__\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpa5_pzpnp.rs:37:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821682
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    // TODO\n\
    \    unimplemented!()\n}\n\nfn main() {\n    let candidate = fix_spaces;\n   \
    \ assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n\
    \    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"\
    ));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")),\
    \ String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp92q46rgs.rs:6:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659821680
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut text = text;\n    text = text.replace(\" \", \"_\");\n    text = text.replace(\"\
    \  \", \"-\");\n    text = text.replace(\"  \", \"-\");\n    text = text.replace(\"\
    --\", \"-\");\n    text = text.replace(\"--\", \"-\");\n    text = text.replace(\"\
    --\", \"-\");\n    text = text.replace(\"--\", \"-\");\n    text = text.replace(\"\
    --\", \"-\");\n    text = text.replace(\"--\", \"-\");\n    text = text.replace(\"\
    --\", \"-\");\n    text = text.replace(\"--\", \"-\");\n    text = text.replace(\"\
    --\", \"-\");\n    text = text.replace(\"--\", \"-\");\n    text = text.replace(\"\
    --\", \"-\");\n    text = text.replace(\"--\", \"-\");\n    text = text.replace(\"\
    --\", \"-\");\n    text = text.replace(\"--\", \"-\");\n    text = text.replace(\"\
    --\", \"-\");\n    text = text.replace(\"--\", \"-\");\n    text = text.replace(\"\
    --\", \"-\");\n    text = text.replace(\"--\", \"-\");\n    text = text.replace(\"\
    --\", \"-\");\n    text = text.replace(\"--\", \"-\");\n    text = text.replace(\"\
    --\", \"-\");\n    text = text.replace(\"--\", \"-\");\n    text = text.replace(\"\
    --\", \"-\");\n    text = text.replace(\"--\", \"-\");\n    text = text.replace(\"\
    --\", \"-\");\n    text = text.replace(\"--\", \"-\");\n    text = text.replace(\"\
    --\", \"-\");\n    text = text.replace(\"--\", \"-\");\n    text = text.replace(\"\
    --\", \"-\");\n    text = text.replace(\"--\", \"-\");\n    text = text.replace(\"\
    --\", \"-\");\n    text = text.replace(\"--\", \"-\");\n    text = text.replace(\"\
    --\", \"-\");\n    text = text.replace(\"--\", \"-\");\n    text = text.replace(\"\
    --\", \"-\");\n    text = text.replace(\"--\", \"-\");\n    text = text.replace(\"\
    --\", \"-\");\n    text = text.replace(\"--\", \"-\");\n    text = text.replace(\"\
    --\", \"-\");\n\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp70d5l6k2.rs:4:32\n  |\n4 |\
    \ fn fix_spaces(text: String) -> String {\n  |    ----------                 \
    \ ^^^^^^ expected struct `String`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659821682
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut result = \"\".to_string();\n    let chars: Vec<char> = text.chars().collect();\n\
    \    let mut spaces = 0;\n    for ch in chars {\n        if ch == ' ' {\n    \
    \        spaces += 1;\n            if spaces <= 2 {\n                result.push('_');\n\
    \            }\n        } else {\n            if spaces > 2 {\n              \
    \  result.push('-');\n            }\n            spaces = 0;\n            result.push(ch);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmp8c900rhe.rs:30:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821683
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    // String\
    \ implements FromIterator\n    text.split(' ')\n        .flat_map(|s| s.split('_'))\n\
    \        .collect::<Vec<&str>>()\n        .join(\"_\")\n        .replace(\"__\"\
    , \"_\")\n        .replace(\"__\", \"-\")\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_Dirty_Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpxms_pwr7.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1659821683
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut out_str = text;\n    out_str = out_str.replace(\" \", \"_\");\n    while\
    \ out_str.contains(\"__\") {\n        out_str = out_str.replace(\"__\", \"-\"\
    );\n    }\n    out_str\n}\n\nfn main() {\n    let candidate = fix_spaces;\n  \
    \  assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n\
    \    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"\
    ));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")),\
    \ String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow-Dirty-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpb_hjozok.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1659821683
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut s = String::new();\n    let mut spaces = 0;\n    for c in text.chars() {\n\
    \        if c == ' ' {\n            spaces += 1;\n            if spaces == 2 {\n\
    \                s.push('-');\n                spaces = 0;\n            }\n  \
    \      } else {\n            spaces = 0;\n            if c == ' ' {\n        \
    \        s.push('_');\n            } else {\n                s.push(c);\n    \
    \        }\n        }\n    }\n    s\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"MudasirHanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpda1cm8n6.rs:29:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821683
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    text.trim().replace(\"\
    \  \", \"-\").replace(\" \", \"_\")\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir_Hanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp8w1b2u_a.rs:11:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821683
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut fixed = String::from(\"\");\n    let mut buffer = String::from(\"\");\n\
    \    let mut space_counter = 0;\n    for c in text.chars() {\n        if c ==\
    \ ' ' {\n            space_counter += 1;\n            if space_counter > 2 {\n\
    \                fixed.push('-');\n                space_counter = 0;\n      \
    \      }\n        } else {\n            space_counter = 0;\n            fixed.push(c);\n\
    \        }\n    }\n    fixed.replace(\" \", \"_\")\n}\n\nfn main() {\n    let\
    \ candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")),\
    \ String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"MudasirHanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp6717u55q.rs:26:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821683
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    text.split_whitespace()\n\
    \        .map(|s| {\n            if s.contains(\"  \") {\n                s.replace(\"\
    \ \", \"-\")\n            } else {\n                s.replace(\" \", \"_\")\n\
    \            }\n        })\n        .collect::<Vec<String>>()\n        .join(\"\
    \")\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"MudasirHanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp6udltbav.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821683
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut buffer = String::new();\n    let mut is_space = false;\n    let mut consecutive_spaces\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            if !is_space\
    \ {\n                is_space = true;\n                consecutive_spaces = 1;\n\
    \                buffer.push('_');\n            } else {\n                consecutive_spaces\
    \ += 1;\n                if consecutive_spaces > 2 {\n                    buffer.push('-');\n\
    \                }\n            }\n        } else {\n            if is_space {\n\
    \                consecutive_spaces = 0;\n                is_space = false;\n\
    \            }\n            buffer.push(c);\n        }\n    }\n    buffer\n}\n\
    \nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_Dirty_Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmptojupcpw.rs:35:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1659821683
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut new_text = String::new();\n    let mut last_char = ' ';\n    let mut counter\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            counter\
    \ += 1;\n            new_text.push('_');\n        } else {\n            if counter\
    \ > 2 {\n                let n = counter - 2;\n                for _ in 0..n {\n\
    \                    new_text.push('-');\n                }\n            }\n \
    \           counter = 0;\n            new_text.push(c);\n        }\n        last_char\
    \ = c;\n    }\n    if counter > 2 {\n        let n = counter - 2;\n        for\
    \ _ in 0..n {\n            new_text.push('-');\n        }\n    }\n    new_text\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa___-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmpp5luwv99.rs:38:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821683
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut new_string = String::new();\n    let mut consecutive_spaces = 0;\n    for\
    \ ch in text.chars() {\n        if ch == ' ' {\n            consecutive_spaces\
    \ += 1;\n            new_string.push('_');\n        } else {\n            if consecutive_spaces\
    \ > 2 {\n                new_string.push('-');\n            } else {\n       \
    \         for _ in 0..consecutive_spaces {\n                    new_string.push('_');\n\
    \                }\n            }\n            consecutive_spaces = 0;\n     \
    \       new_string.push(ch);\n        }\n    }\n    if consecutive_spaces > 2\
    \ {\n        new_string.push('-');\n    } else {\n        for _ in 0..consecutive_spaces\
    \ {\n            new_string.push('_');\n        }\n    }\n    new_string\n}\n\n\
    fn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir__Hanif__\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpb4b1qiyc.rs:36:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821683
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    text.chars()\n\
    \        .map(|ch| match ch {\n            ' ' => '_',\n            _ => ch,\n\
    \        })\n        .collect::<String>()\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa___mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmpehcp2dd4.rs:18:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821683
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut prev = '_';\n    let mut result = String::with_capacity(text.len());\n \
    \   for c in text.chars() {\n        if c == ' ' {\n            if prev == ' '\
    \ {\n                result.push('-');\n            } else {\n               \
    \ result.push('_');\n            }\n        } else {\n            result.push(c);\n\
    \        }\n        prev = c;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmp0nir8j37.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1659821683
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut result = text;\n    result = result.replace(\" \", \"_\");\n    let regex\
    \ = Regex::new(r\"\\s{2,}\").unwrap();\n    result = regex.replace_all(&result,\
    \ \"-\").to_string();\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Regex`\n --> /tmp/tmpe8bdc19_.rs:7:17\n\
    \  |\n7 |     let regex = Regex::new(r\"\\s{2,}\").unwrap();\n  |            \
    \     ^^^^^ use of undeclared type `Regex`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659821683
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut result = String::new();\n    let mut consecutive_spaces = 0;\n    for c\
    \ in text.chars() {\n        if c == ' ' {\n            consecutive_spaces +=\
    \ 1;\n            if consecutive_spaces == 1 {\n                result.push('-');\n\
    \            }\n        } else {\n            consecutive_spaces = 0;\n      \
    \      result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")),\
    \ String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir-Hanif-\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpjmqfmg88.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821683
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut new_text = String::new();\n    let mut spaces = 0;\n    for c in text.chars()\
    \ {\n        if c == ' ' {\n            spaces += 1;\n            if spaces >\
    \ 2 {\n                new_text.push('-');\n                spaces = 0;\n    \
    \        }\n        } else {\n            spaces = 0;\n            new_text.push(c);\n\
    \        }\n    }\n    return new_text;\n}\n\nfn main() {\n    let candidate =\
    \ fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"MudasirHanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp1utq3ri5.rs:25:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821683
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut result = String::from(\"\");\n    let mut prev = '\\0';\n    let mut count\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            count\
    \ += 1;\n            if count == 1 {\n                prev = c;\n            \
    \    result.push('_');\n            } else if count > 2 {\n                if\
    \ prev != '-' {\n                    result.push('-');\n                    prev\
    \ = '-';\n                }\n            }\n        } else {\n            count\
    \ = 0;\n            prev = c;\n            result.push(c);\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_Dirty_Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmplhveho71.rs:33:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1659821683
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    text.replace(\"\
    \ \", \"_\")\n        .split(\" \")\n        .map(|word| word.replace(\"_\", \"\
    -\"))\n        .collect::<Vec<String>>()\n        .join(\" \")\n}\n\nfn main()\
    \ {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir-Hanif-\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp_lt8d189.rs:15:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821683
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut result = text.clone();\n    result = result.replace(\" \", \"_\");\n   \
    \ result = result.replace(\"__\", \"_\");\n    result = result.replace(\"___\"\
    , \"-\");\n    result = result.replace(\"____\", \"-\");\n    result = result.replace(\"\
    _____\", \"-\");\n    result = result.replace(\"______\", \"-\");\n    result\
    \ = result.replace(\"_______\", \"-\");\n    result = result.replace(\"________\"\
    , \"-\");\n    result = result.replace(\"_________\", \"-\");\n    result = result.replace(\"\
    __________\", \"-\");\n    result = result.replace(\"___________\", \"-\");\n\
    \    result = result.replace(\"____________\", \"-\");\n    result = result.replace(\"\
    _____________\", \"-\");\n    result = result.replace(\"______________\", \"-\"\
    );\n    result = result.replace(\"_______________\", \"-\");\n    result = result.replace(\"\
    ________________\", \"-\");\n    result = result.replace(\"_________________\"\
    , \"-\");\n    result = result.replace(\"__________________\", \"-\");\n    result\
    \ = result.replace(\"___________________\", \"-\");\n    result = result.replace(\"\
    ____________________\", \"-\");\n    result = result.replace(\"_____________________\"\
    , \"-\");\n    result = result.replace(\"______________________\", \"-\");\n \
    \   result = result.replace(\"_______________________\", \"-\");\n    result =\
    \ result.replace(\"________________________\", \"-\");\n    result = result.replace(\"\
    _________________________\", \"-\");\n    result = result.replace(\"__________________________\"\
    , \"-\");\n    result = result.replace(\"___________________________\", \"-\"\
    );\n    result = result.replace(\"____________________________\", \"-\");\n  \
    \  result = result.replace(\"_____________________________\", \"-\");\n    result\
    \ = result.replace(\"______________________________\", \"-\");\n    result = result.replace(\"\
    _______________________________\", \"-\");\n    result = result.replace(\"________________________________\"\
    , \"-\");\n    result = result.replace(\"_________________________________\",\
    \ \"-\");\n    result = result.replace(\"__________________________________\"\
    , \"-\");\n    result = result.replace(\"___________________________________\"\
    , \"-\");\n    result = result.replace(\"____________________________________\"\
    , \"-\");\n    result = result.replace(\"_____________________________________\"\
    , \"-\");\n    result = result.replace(\"______________________________________\"\
    , \"-\");\n    result = result.replace(\"_______________________________________\"\
    , \"-\");\n    result = result.replace\n}\n\nfn main() {\n    let candidate =\
    \ fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0615]: attempted to take value of method `replace` on type `String`\n\
    \  --> /tmp/tmp1fk2l5rs.rs:45:21\n   |\n45 |     result = result.replace\n   |\
    \                     ^^^^^^^ method, not a field\n   |\nhelp: use parentheses\
    \ to call the method\n   |\n45 |     result = result.replace(_, _)\n   |     \
    \                       ++++++\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0615`.\n"
  stdout: ''
  timestamp: 1659821683
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    text.replace('\
    \ ', '_')\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmped1mw710.rs:5:23\n  |\n5 |\
    \     text.replace(' ', '_')\n  |                       ^^^ expected `&str`, found\
    \ `char`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659821683
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    lazy_static!\
    \ {\n        static ref RE: Regex = Regex::new(r\"\\s{2,}\").unwrap();\n    }\n\
    \    let mut result = text;\n    result = result.replace(\" \", \"_\");\n    result\
    \ = RE.replace_all(&result, \"-\").to_string();\n    result\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error: cannot find macro `lazy_static` in this scope\n --> /tmp/tmpcreoe2a6.rs:5:5\n\
    \  |\n5 |     lazy_static! {\n  |     ^^^^^^^^^^^\n\nerror[E0425]: cannot find\
    \ value `RE` in this scope\n  --> /tmp/tmpcreoe2a6.rs:10:14\n   |\n10 |     result\
    \ = RE.replace_all(&result, \"-\").to_string();\n   |              ^^ not found\
    \ in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659821683
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut res = String::new();\n    let mut last_space = false;\n    for c in text.chars()\
    \ {\n        if c.is_whitespace() {\n            if last_space {\n           \
    \     res.push('-');\n            } else {\n                res.push('_');\n \
    \           }\n            last_space = true;\n        } else {\n            res.push(c);\n\
    \            last_space = false;\n        }\n    }\n    res\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpf57chtdx.rs:27:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1659821683
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut fixed = String::new();\n    let mut count_spaces = 0;\n    for ch in text.chars()\
    \ {\n        if ch == ' ' {\n            count_spaces += 1;\n            if count_spaces\
    \ == 1 {\n                fixed.push('-');\n            }\n        } else {\n\
    \            fixed.push(ch);\n            count_spaces = 0;\n        }\n    }\n\
    \    fixed\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir-Hanif-\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp4byejizz.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821683
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut replacement = text.replace(\" \", \"_\");\n    replacement = replacement.replace(\"\
    __\", \"_\");\n    replacement = replacement.replace(\"__\", \"-\");\n    replacement\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_Dirty_Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpk4qct4v_.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1659821683
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut n = 0;\n    let mut text_arr: Vec<char> = text.chars().collect();\n    for\
    \ i in 0..text_arr.len() {\n        if text_arr[i] == ' ' {\n            if n\
    \ > 2 {\n                text_arr[i] = '-';\n            } else {\n          \
    \      text_arr[i] = '_';\n            }\n            n += 1;\n        } else\
    \ {\n            n = 0;\n        }\n    }\n    text_arr.into_iter().collect()\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa___mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmpsaq1swt7.rs:27:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821683
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n\tif text.contains(\"\
    \  \") {\n\t\tlet mut fixed_text = text.replace(\" \", \"-\");\n\t\tfixed_text\
    \ = fixed_text.replace(\"--\", \"-\");\n\t\treturn fixed_text;\n\t}\n\ttext.replace(\"\
    \ \", \"_\")\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow-Yellow-Dirty-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpi1oze9nl.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1659821683
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut new_text = String::new();\n    let mut prev_is_space = false;\n    let mut\
    \ is_group = false;\n    for c in text.chars() {\n        if c == ' ' {\n    \
    \        if !prev_is_space {\n                new_text.push('_');\n          \
    \      prev_is_space = true;\n            } else {\n                if !is_group\
    \ {\n                    new_text.push('-');\n                    is_group = true;\n\
    \                }\n            }\n        } else {\n            new_text.push(c);\n\
    \            prev_is_space = false;\n            is_group = false;\n        }\n\
    \    }\n    new_text\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmp5yc_gtpu.rs:32:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1659821683
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    // Replace\
    \ all spaces with underscores first\n    let text = text.replace(\" \", \"_\"\
    );\n\n    // Then replace more than 2 consecutive spaces with '-'\n    text.replace(\"\
    __\", \"-\")\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow-Dirty-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpkv5gmk8k.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1659821683
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    // TODO\
    \ \n    unimplemented!()\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpw_ane5gc.rs:6:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659821683
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut new_text = String::new();\n    let mut spaces = 0;\n    for c in text.chars()\
    \ {\n        if c == ' ' {\n            spaces += 1;\n            if spaces >\
    \ 2 {\n                continue;\n            }\n        } else {\n          \
    \  spaces = 0;\n        }\n        new_text.push(c);\n    }\n    new_text.replace(\"\
    \ \", \"_\").replace(\"  \", \"-\")\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmptg51w524.rs:26:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821683
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    // TODO:\
    \ Implement\n    \"\".to_string()\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"Example\"`', /tmp/tmpvdchm2l9.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821683
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut new_text = text.clone();\n    // replace spaces\n    new_text = new_text.replace(\"\
    \ \", \"_\");\n    // replace consecutive spaces\n    new_text = new_text.replace(\"\
    __\", \"-\");\n    return new_text;\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow-Dirty-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpl0gr7qpt.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1659821683
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut replaced = text.replace(\" \", \"_\");\n    replaced = replaced.replace(\"\
    __\", \"_\");\n    replaced = replaced.replace(\"__\", \"-\");\n    replaced\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_Dirty_Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmp4vlm5m7s.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1659821683
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut res = String::new();\n    let mut len = 0;\n    for ch in text.chars() {\n\
    \        if ch == ' ' {\n            if len > 0 {\n                res.push('-');\n\
    \            }\n            len = -1;\n        } else {\n            res.push(ch);\n\
    \            len = 0;\n        }\n        len += 1;\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir-Hanif-\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpelblm80v.rs:25:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821683
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    // Use\
    \ a regular expression\n    text.replace(\" \", \"_\")\n}\n\nfn main() {\n   \
    \ let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa___mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmpyagv5uti.rs:14:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821683
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ mut replaced_text = text;\n    replaced_text = replaced_text.replace(\" \",\
    \ \"_\");\n    let mut split_text = replaced_text.split(\"_\");\n    let mut num_consecutive_spaces\
    \ = 0;\n    let mut new_text = String::new();\n    for word in split_text {\n\
    \        if word.is_empty() {\n            num_consecutive_spaces += 1;\n    \
    \    } else {\n            num_consecutive_spaces = 0;\n        }\n        if\
    \ num_consecutive_spaces > 2 {\n            new_text.push_str(\"-\");\n      \
    \  } else {\n            new_text.push_str(word);\n            new_text.push_str(\"\
    _\");\n        }\n    }\n    new_text\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Example_\"`,\n right: `\"Example\"`', /tmp/tmpsek_0xgy.rs:28:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821684
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ regex = Regex::new(r\" {2,}\").unwrap();\n    regex.replace_all(&text, \"-\"\
    ).into_owned()\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Regex`\n --> /tmp/tmpqf2ztlzm.rs:5:17\n\
    \  |\n5 |     let regex = Regex::new(r\" {2,}\").unwrap();\n  |              \
    \   ^^^^^ use of undeclared type `Regex`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659821683
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    let\
    \ split_spaces = text.split(\" \");\n    let mut acc = String::new();\n    let\
    \ mut spaces = 0;\n    for word in split_spaces {\n        if word == \"\" {\n\
    \            spaces += 1;\n        } else {\n            if spaces == 0 {\n  \
    \              acc.push_str(word);\n            } else if spaces == 1 {\n    \
    \            acc.push_str(\"_\");\n                acc.push_str(word);\n     \
    \       } else {\n                acc.push_str(\"-\");\n                acc.push_str(word);\n\
    \            }\n            spaces = 0;\n        }\n    }\n    acc\n}\n\nfn main()\
    \ {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"MudasirHanif\"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpum92r0li.rs:30:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821684
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n\tlet mut\
    \ prev_prev_char: char = '\\0';\n\tlet mut prev_char: char = '\\0';\n\tlet mut\
    \ prev_is_space: bool = false;\n\tlet mut prev_prev_is_space: bool = false;\n\t\
    let mut result: String = String::new();\n\tfor curr_char in text.chars() {\n\t\
    \tif curr_char == ' ' {\n\t\t\tif prev_is_space && prev_prev_is_space {\n\t\t\t\
    \tresult.push('-');\n\t\t\t} else {\n\t\t\t\tresult.push('_');\n\t\t\t}\n\t\t\t\
    prev_prev_is_space = prev_is_space;\n\t\t\tprev_is_space = true;\n\t\t} else {\n\
    \t\t\tresult.push(curr_char);\n\t\t\tprev_prev_is_space = prev_is_space;\n\t\t\
    \tprev_is_space = false;\n\t\t}\n\t\tprev_prev_char = prev_char;\n\t\tprev_char\
    \ = curr_char;\n\t}\n\tresult\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa__-mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmp1lfn3alq.rs:35:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821683
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with -\nfn fix_spaces(text: String) -> String {\n    text.chars()\n\
    \        .fold(Vec::new(), |mut result, ch| {\n            if ch == ' ' {\n  \
    \              if let Some(last) = result.last() {\n                    if *last\
    \ == ' ' {\n                        result.push('-');\n                    } else\
    \ {\n                        result.push('_');\n                    }\n      \
    \          } else {\n                    result.push('_');\n                }\n\
    \            } else {\n                result.push(ch);\n            }\n     \
    \       result\n        })\n        .iter()\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Exa___mple\"`,\n right: `\"Exa-mple\"`', /tmp/tmpanqice0l.rs:31:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821684
