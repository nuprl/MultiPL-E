name: HumanEval_156_int_to_mini_roman
language: rs
prompt: "/// Given a positive integer, obtain its roman numeral equivalent as a string,\n\
  /// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n/// Examples:\n\
  fn int_to_mini_roman(number: isize) -> String {\n"
tests: "}\n\nfn main() {\n    let candidate = int_to_mini_roman;\n    assert_eq!(candidate(19),\
  \ String::from(\"xix\"));\n    assert_eq!(candidate(152), String::from(\"clii\"\
  ));\n    assert_eq!(candidate(251), String::from(\"ccli\"));\n    assert_eq!(candidate(426),\
  \ String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500), String::from(\"d\"\
  ));\n    assert_eq!(candidate(1), String::from(\"i\"));\n    assert_eq!(candidate(4),\
  \ String::from(\"iv\"));\n    assert_eq!(candidate(43), String::from(\"xliii\"));\n\
  \    assert_eq!(candidate(90), String::from(\"xc\"));\n    assert_eq!(candidate(94),\
  \ String::from(\"xciv\"));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"\
  ));\n    assert_eq!(candidate(900), String::from(\"cm\"));\n    assert_eq!(candidate(994),\
  \ String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000), String::from(\"m\"\
  ));\n}\n"
completions: ["    let mut result = String::from(\"\");\n    if number >= 100 {\n\
    \        result.push_str(&\"c\".repeat((number / 100) as usize));\n    }\n   \
    \ if number % 100 >= 90 {\n        result.push_str(\"xc\");\n    } else if number\
    \ % 100 >= 50 {\n        result.push_str(\"l\");\n        result.push_str(&\"\
    x\".repeat(((number % 100) - 50) as usize));\n    } else if number % 100 >= 40\
    \ {\n        result.push_str(\"xl\");\n    } else if number % 100 >= 10 {\n  \
    \      result.push_str(&\"x\".repeat(((number % 100) / 10) as usize));\n    }\n\
    \    if number % 10 == 9 {\n        result.push_str(\"ix\");\n    } else if number\
    \ % 10 >= 5 {\n        result.push_str(\"v\");\n        result.push_str(&\"i\"\
    .repeat((number % 10 - 5) as usize));\n    } else if number % 10 == 4 {\n    \
    \    result.push_str(\"iv\");\n    } else if number % 10 >= 1 {\n        result.push_str(&\"\
    i\".repeat((number % 10) as usize));\n    }\n    result", "    let mut res = String::new();\n\
    \    let symbols = vec![\n        (\"i\", 1),\n        (\"iv\", 4),\n        (\"\
    v\", 5),\n        (\"ix\", 9),\n        (\"x\", 10),\n        (\"xl\", 40),\n\
    \        (\"l\", 50),\n        (\"xc\", 90),\n        (\"c\", 100),\n        (\"\
    cd\", 400),\n        (\"d\", 500),\n        (\"cm\", 900),\n        (\"m\", 1000),\n\
    \    ];\n    let mut quotient = number;\n    for i in 0..symbols.len() {\n   \
    \     let (symbol, divisor) = symbols[i];\n        let quotient = quotient / divisor;\n\
    \        if quotient > 0 {\n            res.push_str(symbol);\n        }\n   \
    \     if quotient == 0 {\n            break;\n        }\n    }\n    res", "  \
    \  // empty string representing the roman number\n    let mut roman_str = String::new();\n\
    \n    // add the thousands\n    let thousands = number / 1000;\n    if thousands\
    \ > 0 {\n        roman_str.push_str(&\"m\".repeat(thousands as usize));\n    }\n\
    \n    // add the hundreds\n    let hundreds = (number % 1000) / 100;\n    if hundreds\
    \ > 0 {\n        roman_str.push_str(&\"c\".repeat(hundreds as usize));\n    }\n\
    \n    // add the tens\n    let tens = (number % 100) / 10;\n    if tens > 0 {\n\
    \        roman_str.push_str(&\"x\".repeat(tens as usize));\n    }\n\n    // add\
    \ the ones\n    let ones = number % 10;\n    if ones > 0 {\n        roman_str.push_str(&\"\
    i\".repeat(ones as usize));\n    }\n\n    roman_str", "    let mut s = String::new();\n\
    \    let mut x = number;\n    let roman_vals = vec![(\"M\", 1000), (\"CM\", 900),\
    \ (\"D\", 500), (\"CD\", 400),\n                          (\"C\", 100), (\"XC\"\
    , 90), (\"L\", 50), (\"XL\", 40),\n                          (\"X\", 10), (\"\
    IX\", 9), (\"V\", 5), (\"IV\", 4), (\"I\", 1)];\n    for (roman, dec) in roman_vals\
    \ {\n        if x >= dec {\n            for _ in 0..(x / dec) {\n            \
    \    s.push_str(roman);\n            }\n            x = x % dec;\n        }\n\
    \    }\n    s", "    let ones = vec![\n        \"\", \"i\", \"ii\", \"iii\", \"\
    iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\",\n    ];\n    let tens = vec![\n\
    \        \"\", \"x\", \"xx\", \"xxx\", \"xl\", \"l\", \"lx\", \"lxx\", \"lxxx\"\
    , \"xc\",\n    ];\n    let hundreds = vec![\n        \"\", \"c\", \"cc\", \"ccc\"\
    , \"cd\", \"d\", \"dc\", \"dcc\", \"dccc\", \"cm\",\n    ];\n    let thousands\
    \ = vec![\n        \"\", \"m\", \"mm\", \"mmm\", \"mmmm\", \"mmmmm\", \"mmmmmm\"\
    , \"mmmmmmm\", \"mmmmmmmm\", \"mmmmmmmmm\",\n    ];\n\n    let ones_index = number\
    \ % 10;\n    let tens_index = ((number % 100) - ones_index) / 10;\n    let hundreds_index\
    \ = ((number % 1000) - (tens_index * 10) - ones_index) / 100;\n    let thousands_index\
    \ = number / 1000;\n\n    ones[ones_index as usize].to_string() +\n        tens[tens_index\
    \ as usize].to_string().as_str() +\n        hundreds[hundreds_index as usize].to_string().as_str()\
    \ +\n        thousands[thousands_index as usize].to_string().as_str()", "    let\
    \ numerals = [\"i\", \"v\", \"x\", \"l\", \"c\", \"d\", \"m\"];\n    let mut i\
    \ = 0;\n    let mut str = String::new();\n    let mut number = number;\n    while\
    \ number > 0 {\n        if number >= 1000 {\n            str.push_str(numerals[6]);\n\
    \            number -= 1000;\n        } else if number >= 900 {\n            str.push_str(numerals[4]);\n\
    \            str.push_str(numerals[6]);\n            number -= 900;\n        }\
    \ else if number >= 500 {\n            str.push_str(numerals[5]);\n          \
    \  number -= 500;\n        } else if number >= 400 {\n            str.push_str(numerals[4]);\n\
    \            str.push_str(numerals[5]);\n            number -= 400;\n        }\
    \ else if number >= 100 {\n            str.push_str(numerals[4]);\n          \
    \  number -= 100;\n        } else if number >= 90 {\n            str.push_str(numerals[2]);\n\
    \            str.push_str(numerals[4]);\n            number -= 90;\n        }\
    \ else if number >= 50 {\n            str.push_str(numerals[3]);\n           \
    \ number -= 50;\n        } else if number >= 40 {\n            str.push_str(numerals[2]);\n\
    \            str.push_str(numerals[3]);\n            number -= 40;\n        }\
    \ else if number >= 10 {\n            str.push_str(numerals[2]);\n           \
    \ number -= 10;\n        } else if number >= 9 {\n            str.push_str(numerals[0]);\n\
    \            str.push_str(numerals[2]);\n            number -= 9;\n        } else\
    \ if number >= 5 {\n            str.push_str(numerals[1]);\n            number\
    \ -= 5;\n        } else if number >= 4 {\n            str.push_str(numerals[0]);\n\
    \            str.push_str(numerals[1]);\n            number -= 4;\n        } else\
    \ if number >= 1 {\n            str.push_str(numerals[", "    let mut result =\
    \ String::new();\n    let values = vec![1, 5, 10, 50, 100, 500, 1000];\n    let\
    \ roman = vec![\"i\", \"v\", \"x\", \"l\", \"c\", \"d\", \"m\"];\n    let mut\
    \ number = number;\n    for (i, v) in values.iter().enumerate().rev() {\n    \
    \    while number >= *v {\n            result.push_str(roman[i]);\n          \
    \  number -= *v;\n        }\n        if i > 0 && number >= *v - values[i - 1]\
    \ {\n            result.push_str(roman[i - 1]);\n            result.push_str(roman[i]);\n\
    \            number -= *v - values[i - 1];\n        }\n    }\n    result", " \
    \   let mut num = number;\n    let mut result = String::new();\n    let num_symbols\
    \ = vec![\n        (\"m\", 1000),\n        (\"cm\", 900),\n        (\"d\", 500),\n\
    \        (\"cd\", 400),\n        (\"c\", 100),\n        (\"xc\", 90),\n      \
    \  (\"l\", 50),\n        (\"xl\", 40),\n        (\"x\", 10),\n        (\"ix\"\
    , 9),\n        (\"v\", 5),\n        (\"iv\", 4),\n        (\"i\", 1),\n    ];\n\
    \    for (symbol, val) in num_symbols {\n        while num >= val {\n        \
    \    result.push_str(symbol);\n            num -= val;\n        }\n    }\n   \
    \ result", "    let mut num = number;\n    let mut roman = String::new();\n  \
    \  let roman_numerals = [(1000, \"m\"), (900, \"cm\"), (500, \"d\"), (400, \"\
    cd\"),\n        (100, \"c\"), (90, \"xc\"), (50, \"l\"), (40, \"xl\"), (10, \"\
    x\"), (9, \"ix\"),\n        (5, \"v\"), (4, \"iv\"), (1, \"i\")];\n\n    for &(int,\
    \ roman_numeral) in roman_numerals.iter() {\n        while num >= int {\n    \
    \        roman.push_str(roman_numeral);\n            num -= int;\n        }\n\
    \    }\n\n    roman", "    let mut num = number;\n    let mut result = String::from(\"\
    \");\n    let mut current_str = String::from(\"\");\n    let values = vec![1000,\
    \ 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    let letters = vec![\"\
    m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\"\
    , \"iv\", \"i\"];\n    let mut index = 0;\n    while num > 0 {\n        current_str\
    \ = String::from(letters[index]);\n        while num >= values[index] {\n    \
    \        result = format!(\"{}{}\", result, current_str);\n            num -=\
    \ values[index];\n        }\n        index += 1;\n    }\n    result", "    let\
    \ mut s = String::from(\"\");\n    let nums = vec![\n        (\"I\", 1),\n   \
    \     (\"IV\", 4),\n        (\"V\", 5),\n        (\"IX\", 9),\n        (\"X\"\
    , 10),\n        (\"XL\", 40),\n        (\"L\", 50),\n        (\"XC\", 90),\n \
    \       (\"C\", 100),\n        (\"CD\", 400),\n        (\"D\", 500),\n       \
    \ (\"CM\", 900),\n        (\"M\", 1000),\n    ];\n    let mut current_num = number;\n\
    \    while current_num > 0 {\n        let matching_nums = nums.iter().filter(|(key,\
    \ val)| val <= &current_num);\n        let (max_key, max_val) = matching_nums.max_by_key(|(_,\
    \ val)| *val).unwrap();\n        current_num -= max_val;\n        s += max_key;\n\
    \    }\n    s", "    let mut string = String::new();\n    let mut num = number;\n\
    \    while num > 0 {\n        if num >= 1000 {\n            string.push_str(\"\
    m\");\n            num -= 1000;\n        } else if num >= 900 {\n            string.push_str(\"\
    cm\");\n            num -= 900;\n        } else if num >= 500 {\n            string.push_str(\"\
    d\");\n            num -= 500;\n        } else if num >= 400 {\n            string.push_str(\"\
    cd\");\n            num -= 400;\n        } else if num >= 100 {\n            string.push_str(\"\
    c\");\n            num -= 100;\n        } else if num >= 90 {\n            string.push_str(\"\
    xc\");\n            num -= 90;\n        } else if num >= 50 {\n            string.push_str(\"\
    l\");\n            num -= 50;\n        } else if num >= 40 {\n            string.push_str(\"\
    xl\");\n            num -= 40;\n        } else if num >= 10 {\n            string.push_str(\"\
    x\");\n            num -= 10;\n        } else if num >= 9 {\n            string.push_str(\"\
    ix\");\n            num -= 9;\n        } else if num >= 5 {\n            string.push_str(\"\
    v\");\n            num -= 5;\n        } else if num >= 4 {\n            string.push_str(\"\
    iv\");\n            num -= 4;\n        } else if num >= 1 {\n            string.push_str(\"\
    i\");\n            num -= 1;\n        }\n    }\n    string", "    let mut aux\
    \ = number;\n    let mut result = String::new();\n    let mut number_of_each_symbol\
    \ = Vec::new();\n    // calculate how many times you need each symbol:\n    let\
    \ mut count = number / 1000;\n    number_of_each_symbol.push(count);\n    aux\
    \ -= count * 1000;\n    count = aux / 500;\n    number_of_each_symbol.push(count);\n\
    \    aux -= count * 500;\n    count = aux / 100;\n    number_of_each_symbol.push(count);\n\
    \    aux -= count * 100;\n    count = aux / 50;\n    number_of_each_symbol.push(count);\n\
    \    aux -= count * 50;\n    count = aux / 10;\n    number_of_each_symbol.push(count);\n\
    \    aux -= count * 10;\n    count = aux / 5;\n    number_of_each_symbol.push(count);\n\
    \    aux -= count * 5;\n    count = aux / 1;\n    number_of_each_symbol.push(count);\n\
    \    aux -= count * 1;\n    // end\n    let symbols = vec![\"m\", \"d\", \"c\"\
    , \"l\", \"x\", \"v\", \"i\"];\n    for (idx, &times) in number_of_each_symbol.iter().enumerate()\
    \ {\n        for _ in 0..times {\n            result.push_str(symbols[idx]);\n\
    \        }\n    }\n    result", "    let mut out = String::new();\n    let mut\
    \ n = number;\n    let base_strings = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"\
    xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n    let base_numbers\
    \ = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    let mut i = 0;\n\
    \    while n > 0 {\n        while n >= base_numbers[i] {\n            out.push_str(base_strings[i]);\n\
    \            n -= base_numbers[i];\n        }\n        i += 1;\n    }\n    out",
  "    let mut remainder = number;\n    let mut result = String::new();\n\n    while\
    \ remainder >= 1000 {\n        result.push_str(\"m\");\n        remainder -= 1000;\n\
    \    }\n\n    while remainder >= 900 {\n        result.push_str(\"cm\");\n   \
    \     remainder -= 900;\n    }\n\n    while remainder >= 500 {\n        result.push_str(\"\
    d\");\n        remainder -= 500;\n    }\n\n    while remainder >= 400 {\n    \
    \    result.push_str(\"cd\");\n        remainder -= 400;\n    }\n\n    while remainder\
    \ >= 100 {\n        result.push_str(\"c\");\n        remainder -= 100;\n    }\n\
    \n    while remainder >= 90 {\n        result.push_str(\"xc\");\n        remainder\
    \ -= 90;\n    }\n\n    while remainder >= 50 {\n        result.push_str(\"l\"\
    );\n        remainder -= 50;\n    }\n\n    while remainder >= 40 {\n        result.push_str(\"\
    xl\");\n        remainder -= 40;\n    }\n\n    while remainder >= 10 {\n     \
    \   result.push_str(\"x\");\n        remainder -= 10;\n    }\n\n    while remainder\
    \ >= 9 {\n        result.push_str(\"ix\");\n        remainder -= 9;\n    }\n\n\
    \    while remainder >= 5 {\n        result.push_str(\"v\");\n        remainder\
    \ -= 5;\n    }\n\n    while remainder >= 4 {\n        result.push_str(\"iv\");\n\
    \        remainder -= 4;\n    }\n\n    while remainder >= 1 {\n        result.push_str(\"\
    i\");\n        remainder -= 1;\n    }\n\n    result", "    let mut number = number;\n\
    \    let mut roman = String::new();\n    for &(digit, numeral) in DIGITS {\n \
    \       let product = number / digit;\n        if product > 0 {\n            roman.push_str(&numeral.repeat(product\
    \ as usize));\n        }\n        number = number % digit;\n    }\n    roman",
  "    let mut mini_roman: String = String::new();\n    let mut quotient = number;\n\
    \    let mut remainder = 0;\n\n    let mini_roman_table = [(1, \"i\"), (4, \"\
    iv\"), (5, \"v\"), (9, \"ix\"), (10, \"x\"),\n                            (40,\
    \ \"xl\"), (50, \"l\"), (90, \"xc\"), (100, \"c\"),\n                        \
    \    (400, \"cd\"), (500, \"d\"), (900, \"cm\"), (1000, \"m\")];\n\n    while\
    \ quotient > 0 {\n        remainder = quotient % 10;\n        quotient = quotient\
    \ / 10;\n\n        let mini_roman_index = match remainder {\n            4 | 5\
    \ | 9 => remainder,\n            _ => remainder % 5,\n        };\n\n        if\
    \ mini_roman_index > 0 {\n            let roman_value = mini_roman_table[mini_roman_index\
    \ as usize];\n            let string_value = roman_value.1;\n            mini_roman.push_str(string_value);\n\
    \        }\n\n        if remainder >= 5 {\n            let roman_value = mini_roman_table[4];\n\
    \            let string_value = roman_value.1;\n            mini_roman.push_str(string_value);\n\
    \        }\n    }\n\n    mini_roman", "    let mut buf = String::new();\n    let\
    \ mut num = number;\n    let roman_numerals = vec![\n        (1000, \"m\"),\n\
    \        (900, \"cm\"),\n        (500, \"d\"),\n        (400, \"cd\"),\n     \
    \   (100, \"c\"),\n        (90, \"xc\"),\n        (50, \"l\"),\n        (40, \"\
    xl\"),\n        (10, \"x\"),\n        (9, \"ix\"),\n        (5, \"v\"),\n    \
    \    (4, \"iv\"),\n        (1, \"i\"),\n    ];\n    let mut i = 0;\n    while\
    \ num > 0 {\n        let count = num / roman_numerals[i].0;\n        if count\
    \ > 0 {\n            buf.push_str(&roman_numerals[i].1.repeat(count as usize));\n\
    \            num -= count * roman_numerals[i].0;\n        }\n        i += 1;\n\
    \    }\n    buf", "    // your code here\n    const ROMAN_NUMERALS: [(&str, isize);\
    \ 13] = [\n        (\"m\", 1000),\n        (\"cm\", 900),\n        (\"d\", 500),\n\
    \        (\"cd\", 400),\n        (\"c\", 100),\n        (\"xc\", 90),\n      \
    \  (\"l\", 50),\n        (\"xl\", 40),\n        (\"x\", 10),\n        (\"ix\"\
    , 9),\n        (\"v\", 5),\n        (\"iv\", 4),\n        (\"i\", 1),\n    ];\n\
    \n    let mut number = number;\n    let mut result = String::new();\n\n    for\
    \ (numeral, value) in ROMAN_NUMERALS.iter() {\n        while number >= *value\
    \ {\n            result.push_str(numeral);\n            number -= *value;\n  \
    \      }\n    }\n\n    result", "    let mut num = number;\n    let mut result\
    \ = String::new();\n    let mut magnitude = 1;\n    while num > 0 {\n        let\
    \ digit = num % 10;\n        num /= 10;\n        magnitude *= 10;\n        let\
    \ remainder = number % magnitude;\n        match (remainder, digit) {\n      \
    \      (0, _) => {}\n            (n, 0) => result.push_str(&int_to_mini_roman(n)),\n\
    \            (n, 1) => result.push_str(&format!(\"I{}\", int_to_mini_roman(n))),\n\
    \            (n, 2) => result.push_str(&format!(\"II{}\", int_to_mini_roman(n))),\n\
    \            (n, 3) => result.push_str(&format!(\"III{}\", int_to_mini_roman(n))),\n\
    \            (n, 4) => result.push_str(&format!(\"IV{}\", int_to_mini_roman(n))),\n\
    \            (n, 5) => result.push_str(&format!(\"V{}\", int_to_mini_roman(n))),\n\
    \            (n, 6) => result.push_str(&format!(\"VI{}\", int_to_mini_roman(n))),\n\
    \            (n, 7) => result.push_str(&format!(\"VII{}\", int_to_mini_roman(n))),\n\
    \            (n, 8) => result.push_str(&format!(\"VIII{}\", int_to_mini_roman(n))),\n\
    \            (n, 9) => result.push_str(&format!(\"IX{}\", int_to_mini_roman(n))),\n\
    \            _ => unreachable!(),\n        }\n    }\n    result", "    let mut\
    \ rem = number;\n    let mut roman_numerals = String::new();\n\n    //We need\
    \ to work backwards to ensure that\n    //the largest numbers are used first\n\
    \    if rem >= 100 {\n        let hundreds = rem / 100;\n        rem = rem % 100;\n\
    \        roman_numerals.push_str(&std::iter::repeat(\"c\")\n                 \
    \               .take(hundreds as usize)\n                                .collect::<String>());\n\
    \    }\n    if rem >= 90 {\n        rem = rem % 90;\n        roman_numerals.push_str(\"\
    xc\");\n    }\n    if rem >= 50 {\n        rem = rem % 50;\n        roman_numerals.push_str(\"\
    l\");\n    }\n    if rem >= 40 {\n        rem = rem % 40;\n        roman_numerals.push_str(\"\
    xl\");\n    }\n    if rem >= 10 {\n        let tens = rem / 10;\n        rem =\
    \ rem % 10;\n        roman_numerals.push_str(&std::iter::repeat(\"x\")\n     \
    \                           .take(tens as usize)\n                           \
    \     .collect::<String>());\n    }\n    if rem >= 9 {\n        rem = rem % 9;\n\
    \        roman_numerals.push_str(\"ix\");\n    }\n    if rem >= 5 {\n        rem\
    \ = rem % 5;\n        roman_numerals.push_str(\"v\");\n    }\n    if rem >= 4\
    \ {\n        rem = rem % 4;\n        roman_numerals.push_str(\"iv\");\n    }\n\
    \    if rem >= 1 {\n        roman_numerals.push_str(&std::iter::repeat(\"i\")\n\
    \                                .take(rem as usize)\n                       \
    \         .collect::<String>());\n    }\n    roman_numerals", "    // We could\
    \ have a complicated, stateful solution that figures out what the\n    // correct\
    \ characters are. However, we can instead just hardcode all possible\n    // numbers\
    \ that we'll need, and then map them.\n    let possible_numbers = vec![1, 4, 5,\
    \ 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000];\n    let possible_representations\
    \ = vec![\n        \"i\", \"iv\", \"v\", \"ix\", \"x\", \"xl\", \"l\", \"xc\"\
    , \"c\", \"cd\", \"d\", \"cm\", \"m\",\n    ];\n    assert_eq!(possible_numbers.len(),\
    \ possible_representations.len());\n\n    // To map numbers to characters, we\
    \ need to do a linear search to find the\n    // largest-but-not-too-large number.\
    \ We can do this efficiently by\n    // starting at the end of the vector and\
    \ decrementing.\n    //\n    // This solution runs in O(log n) time, where n is\
    \ the number of possible\n    // numbers.\n    let mut result = String::new();\n\
    \    let mut remaining = number;\n    let mut index = possible_numbers.len() -\
    \ 1;\n    while remaining > 0 {\n        let possible_number = possible_numbers[index];\n\
    \        if possible_number <= remaining {\n            remaining -= possible_number;\n\
    \            result.push_str(possible_representations[index]);\n        } else\
    \ {\n            index -= 1;\n        }\n    }\n    result", "    assert!(number\
    \ >= 1);\n    assert!(number <= 1000);\n\n    let mut mini_roman = String::new();\n\
    \    let mut rest = number;\n\n    if rest >= 900 {\n        mini_roman.push_str(\"\
    c\");\n        rest -= 900;\n    }\n    if rest >= 500 {\n        mini_roman.push_str(\"\
    d\");\n        rest -= 500;\n    }\n    if rest >= 400 {\n        mini_roman.push_str(\"\
    cd\");\n        rest -= 400;\n    }\n    while rest >= 100 {\n        mini_roman.push_str(\"\
    c\");\n        rest -= 100;\n    }\n    if rest >= 90 {\n        mini_roman.push_str(\"\
    x\");\n        rest -= 90;\n    }\n    if rest >= 50 {\n        mini_roman.push_str(\"\
    l\");\n        rest -= 50;\n    }\n    if rest >= 40 {\n        mini_roman.push_str(\"\
    xl\");\n        rest -= 40;\n    }\n    while rest >= 10 {\n        mini_roman.push_str(\"\
    x\");\n        rest -= 10;\n    }\n    if rest >= 9 {\n        mini_roman.push_str(\"\
    i\");\n        rest -= 9;\n    }\n    if rest >= 5 {\n        mini_roman.push_str(\"\
    v\");\n        rest -= 5;\n    }\n    if rest >= 4 {\n        mini_roman.push_str(\"\
    iv\");\n        rest -= 4;\n    }\n    while rest >= 1 {\n        mini_roman.push_str(\"\
    i\");\n        rest -= 1;\n    }\n\n    mini_roman", "    let mut number = number;\n\
    \    let mut string = String::new();\n    while number > 0 {\n        if number\
    \ >= 1000 {\n            string.push_str(\"m\");\n            number -= 1000;\n\
    \        } else if number >= 900 {\n            string.push_str(\"cm\");\n   \
    \         number -= 900;\n        } else if number >= 500 {\n            string.push_str(\"\
    d\");\n            number -= 500;\n        } else if number >= 400 {\n       \
    \     string.push_str(\"cd\");\n            number -= 400;\n        } else if\
    \ number >= 100 {\n            string.push_str(\"c\");\n            number -=\
    \ 100;\n        } else if number >= 90 {\n            string.push_str(\"xc\");\n\
    \            number -= 90;\n        } else if number >= 50 {\n            string.push_str(\"\
    l\");\n            number -= 50;\n        } else if number >= 40 {\n         \
    \   string.push_str(\"xl\");\n            number -= 40;\n        } else if number\
    \ >= 10 {\n            string.push_str(\"x\");\n            number -= 10;\n  \
    \      } else if number >= 9 {\n            string.push_str(\"ix\");\n       \
    \     number -= 9;\n        } else if number >= 5 {\n            string.push_str(\"\
    v\");\n            number -= 5;\n        } else if number >= 4 {\n           \
    \ string.push_str(\"iv\");\n            number -= 4;\n        } else if number\
    \ >= 1 {\n            string.push_str(\"i\");\n            number -= 1;\n    \
    \    }\n    }\n    string", "    assert!(number > 0 && number <= 1000);\n    let\
    \ mut number = number;\n    let mut miniroman: String = String::new();\n    while\
    \ number > 0 {\n        if number >= 1000 {\n            miniroman.push('m');\n\
    \            number -= 1000;\n        } else if number >= 900 {\n            miniroman.push_str(\"\
    cm\");\n            number -= 900;\n        } else if number >= 500 {\n      \
    \      miniroman.push('d');\n            number -= 500;\n        } else if number\
    \ >= 400 {\n            miniroman.push_str(\"cd\");\n            number -= 400;\n\
    \        } else if number >= 100 {\n            miniroman.push('c');\n       \
    \     number -= 100;\n        } else if number >= 90 {\n            miniroman.push_str(\"\
    xc\");\n            number -= 90;\n        } else if number >= 50 {\n        \
    \    miniroman.push('l');\n            number -= 50;\n        } else if number\
    \ >= 40 {\n            miniroman.push_str(\"xl\");\n            number -= 40;\n\
    \        } else if number >= 10 {\n            miniroman.push('x');\n        \
    \    number -= 10;\n        } else if number >= 9 {\n            miniroman.push_str(\"\
    ix\");\n            number -= 9;\n        } else if number >= 5 {\n          \
    \  miniroman.push('v');\n            number -= 5;\n        } else if number >=\
    \ 4 {\n            miniroman.push_str(\"iv\");\n            number -= 4;\n   \
    \     } else if number >= 1 {\n            miniroman.push('i');\n            number\
    \ -= 1;\n        }\n    }\n    miniroman", "    let mut num = number;\n    let\
    \ mut roman = String::new();\n    let digits = vec![\n        (num / 1000, 'M'),\n\
    \        (num / 100 % 10, 'C'),\n        (num / 10 % 10, 'X'),\n        (num %\
    \ 10, 'I'),\n    ];\n    for (digit, letter) in digits {\n        if digit <=\
    \ 3 {\n            roman.push_str(&std::iter::repeat(letter).take(digit as usize).collect::<String>());\n\
    \        } else if digit == 4 {\n            roman.push_str(&(letter.to_string()\
    \ + &(letter as char + 1).to_string()));\n        } else if digit == 5 {\n   \
    \         roman.push(letter as char + 1);\n        } else if digit <= 8 {\n  \
    \          roman.push(letter as char + 1);\n            roman.push_str(&std::iter::repeat(letter).take((digit\
    \ - 5) as usize).collect::<String>());\n        } else if digit == 9 {\n     \
    \       roman.push_str(&(letter.to_string() + &(letter as char + 2).to_string()));\n\
    \        }\n    }\n    roman", "    match number {\n        1 => String::from(\"\
    i\"),\n        2 => String::from(\"ii\"),\n        3 => String::from(\"iii\"),\n\
    \        4 => String::from(\"iv\"),\n        5 => String::from(\"v\"),\n     \
    \   6 => String::from(\"vi\"),\n        7 => String::from(\"vii\"),\n        8\
    \ => String::from(\"viii\"),\n        9 => String::from(\"ix\"),\n        10 =>\
    \ String::from(\"x\"),\n        20 => String::from(\"xx\"),\n        30 => String::from(\"\
    xxx\"),\n        40 => String::from(\"xl\"),\n        50 => String::from(\"l\"\
    ),\n        60 => String::from(\"lx\"),\n        70 => String::from(\"lxx\"),\n\
    \        80 => String::from(\"lxxx\"),\n        90 => String::from(\"xc\"),\n\
    \        100 => String::from(\"c\"),\n        200 => String::from(\"cc\"),\n \
    \       300 => String::from(\"ccc\"),\n        400 => String::from(\"cd\"),\n\
    \        500 => String::from(\"d\"),\n        600 => String::from(\"dc\"),\n \
    \       700 => String::from(\"dcc\"),\n        800 => String::from(\"dccc\"),\n\
    \        900 => String::from(\"cm\"),\n        1000 => String::from(\"m\"),\n\
    \        _ => String::from(\"\")\n    }", "    let digits = number.to_string();\n\
    \    let mut result = String::new();\n    for digit in digits.chars() {\n    \
    \    match digit {\n            '1' => result.push_str(\"i\"),\n            '2'\
    \ => result.push_str(\"ii\"),\n            '3' => result.push_str(\"iii\"),\n\
    \            '4' => result.push_str(\"iv\"),\n            '5' => result.push_str(\"\
    v\"),\n            '6' => result.push_str(\"vi\"),\n            '7' => result.push_str(\"\
    vii\"),\n            '8' => result.push_str(\"viii\"),\n            '9' => result.push_str(\"\
    ix\"),\n            _ => continue,\n        }\n    }\n    result", "    // create\
    \ new string variable and set to empty string\n    let mut result: String = String::new();\n\
    \    // temporary variable to hold the number.\n    let mut n = number;\n    //\
    \ counters for each digit, where digit*10**power==n\n    let mut power = 0;\n\
    \    let mut digit = 0;\n    // for each of the powers of 10 in descending order\n\
    \    for _ in (0..4).rev() {\n        // calculate the value of the current digit\n\
    \        digit = n / 10_isize.pow(power);\n        // if digit is between 1 and\
    \ 3\n        if digit >= 1 && digit <= 3 {\n            // append corresponding\
    \ roman numeral to the result string\n            result.push_str(&\"I\".repeat(digit\
    \ as usize));\n        }\n        // if digit is 4\n        else if digit == 4\
    \ {\n            // append corresponding roman numeral to the result string\n\
    \            result.push_str(\"IV\");\n        }\n        // if digit is 5\n \
    \       else if digit == 5 {\n            // append corresponding roman numeral\
    \ to the result string\n            result.push_str(\"V\");\n        }\n     \
    \   // if digit is between 6 and 8\n        else if digit >= 6 && digit <= 8 {\n\
    \            // append corresponding roman numeral to the result string\n    \
    \        result.push_str(\"V\");\n            result.push_str(&\"I\".repeat((digit\
    \ - 5) as usize));\n        }\n        // if digit is 9\n        else if digit\
    \ == 9 {\n            // append corresponding roman numeral to the result string\n\
    \            result.push_str(\"IX\");\n        }\n        // remove current digit\
    \ from number\n        n = n % 10_isize.pow(power);\n        // increment the\
    \ power to inspect the next most significant digit\n        power += 1;\n    }\n\
    \    // return the result string\n    result", "    let mut result = String::new();\n\
    \    let mut num = number;\n    let digits = vec![(\"m\", 1000), (\"c\", 100),\
    \ (\"x\", 10), (\"i\", 1)];\n    for &(roman, factor) in digits.iter() {\n   \
    \     let count = num / factor;\n        if count > 0 {\n            result.push_str(&format!(\"\
    {}\", roman.repeat(count as usize)));\n        }\n        num = num % factor;\n\
    \    }\n    result", "    let mut number = number;\n    let mut result = String::from(\"\
    \");\n    let num_to_roman = vec![(1000, \"m\"), (900, \"cm\"), (500, \"d\"),\
    \ (400, \"cd\"), (100, \"c\"), (90, \"xc\"), (50, \"l\"), (40, \"xl\"), (10, \"\
    x\"), (9, \"ix\"), (5, \"v\"), (4, \"iv\"), (1, \"i\")];\n    for (num, roman)\
    \ in num_to_roman {\n        while number >= num {\n            result += roman;\n\
    \            number -= num;\n        }\n    }\n    result", "    let thousands\
    \ = number / 1000;\n    let hundreds = (number % 1000) / 100;\n    let tens =\
    \ (number % 100) / 10;\n    let ones = number % 10;\n\n    let mut number_string\
    \ = String::new();\n\n    for _ in 0..thousands {\n        number_string.push('m');\n\
    \    }\n\n    if hundreds == 9 {\n        number_string.push_str(\"cm\");\n  \
    \  } else if hundreds == 4 {\n        number_string.push_str(\"cd\");\n    } else\
    \ {\n        if hundreds >= 5 {\n            number_string.push('d');\n      \
    \  }\n        for _ in 0..(hundreds % 5) {\n            number_string.push('c');\n\
    \        }\n    }\n\n    if tens == 9 {\n        number_string.push_str(\"xc\"\
    );\n    } else if tens == 4 {\n        number_string.push_str(\"xl\");\n    }\
    \ else {\n        if tens >= 5 {\n            number_string.push('l');\n     \
    \   }\n        for _ in 0..(tens % 5) {\n            number_string.push('x');\n\
    \        }\n    }\n\n    if ones == 9 {\n        number_string.push_str(\"ix\"\
    );\n    } else if ones == 4 {\n        number_string.push_str(\"iv\");\n    }\
    \ else {\n        if ones >= 5 {\n            number_string.push('v');\n     \
    \   }\n        for _ in 0..(ones % 5) {\n            number_string.push('i');\n\
    \        }\n    }\n\n    number_string", "    let mut roman = String::new();\n\
    \    if number < 1 || number > 1000 {\n        panic!(\"only numbers from 1 to\
    \ 1000 can be converted to mini roman numerals\")\n    }\n    let thousands =\
    \ number / 1000;\n    let hundreds = (number % 1000) / 100;\n    let tens = (number\
    \ % 100) / 10;\n    let units = number % 10;\n    for _ in 0..thousands {\n  \
    \      roman.push('m');\n    }\n    roman.push_str(&get_mini_roman_units(hundreds,\
    \ 'c', 'd', 'm'));\n    roman.push_str(&get_mini_roman_units(tens, 'x', 'l', 'c'));\n\
    \    roman.push_str(&get_mini_roman_units(units, 'i', 'v', 'x'));\n    roman",
  "    if number == 0 {\n        return String::from(\"\");\n    }\n\n    let (arabic,\
    \ roman) = match number {\n        1 => (1, \"i\"),\n        2 => (2, \"ii\"),\n\
    \        3 => (3, \"iii\"),\n        4 => (4, \"iv\"),\n        5 => (5, \"v\"\
    ),\n        6 => (6, \"vi\"),\n        7 => (7, \"vii\"),\n        8 => (8, \"\
    viii\"),\n        9 => (9, \"ix\"),\n        10 => (10, \"x\"),\n        _ =>\
    \ (number, \"\"),\n    };\n\n    let reminder = number - arabic;\n    let mut\
    \ result = String::from(roman);\n    result.push_str(&int_to_mini_roman(reminder));\n\
    \    result", "    let mut temp_num = number;\n    let mut result = String::new();\n\
    \    while temp_num >= 10 {\n        let mut i = temp_num / 10;\n        let mut\
    \ num_to_add = 0;\n        if temp_num >= 100 {\n            if i == 4 {\n   \
    \             result.push_str(\"cd\");\n                num_to_add = 400;\n  \
    \          } else if i == 9 {\n                result.push_str(\"cm\");\n    \
    \            num_to_add = 900;\n            } else {\n                while i\
    \ > 0 {\n                    result.push('c');\n                    i -= 1;\n\
    \                }\n                num_to_add = 100 * (temp_num / 100);\n   \
    \         }\n        } else {\n            if i == 4 {\n                result.push_str(\"\
    xl\");\n                num_to_add = 40;\n            } else if i == 9 {\n   \
    \             result.push_str(\"xc\");\n                num_to_add = 90;\n   \
    \         } else {\n                while i > 0 {\n                    result.push('x');\n\
    \                    i -= 1;\n                }\n                num_to_add =\
    \ 10 * (temp_num / 10);\n            }\n        }\n        temp_num -= num_to_add;\n\
    \    }\n    if temp_num == 4 {\n        result.push_str(\"iv\");\n    } else if\
    \ temp_num == 9 {\n        result.push_str(\"ix\");\n    } else {\n        while\
    \ temp_num > 0 {\n            result.push('i');\n            temp_num -= 1;\n\
    \        }\n    }\n    result", "    let decimal_values = [1, 4, 5, 9, 10, 40,\
    \ 50, 90, 100, 400, 500, 900, 1000];\n    let roman_numerals = [\"i\", \"iv\"\
    , \"v\", \"ix\", \"x\", \"xl\", \"l\", \"xc\", \"c\", \"cd\", \"d\", \"cm\", \"\
    m\"];\n    let mut remainder = number;\n    let mut result = String::new();\n\
    \    let mut i = 12;\n\n    while remainder > 0 {\n        if remainder >= decimal_values[i]\
    \ {\n            result.push_str(roman_numerals[i]);\n            remainder -=\
    \ decimal_values[i];\n        } else {\n            i -= 1;\n        }\n    }\n\
    \n    result", "    let numbers: [isize; 13] = [1, 4, 5, 9, 10, 40, 50, 90, 100,\
    \ 400, 500, 900, 1000];\n    let roman_numbers: [&str; 13] = [\"i\", \"iv\", \"\
    v\", \"ix\", \"x\", \"xl\", \"l\", \"xc\", \"c\", \"cd\", \"d\", \"cm\", \"m\"\
    ];\n    let mut remainder = number;\n    let mut result = String::new();\n   \
    \ while remainder > 0 {\n        let mut position = numbers.len() - 1;\n     \
    \   while numbers[position] > remainder {\n            position -= 1;\n      \
    \  }\n        result += roman_numbers[position];\n        remainder -= numbers[position];\n\
    \    }\n    result", "    let mut result = String::new();\n    for unit in UNITS.iter()\
    \ {\n        let mut n = number;\n        n = n / unit.arabic;\n        if n >\
    \ 0 {\n            result.push_str(&unit.roman);\n            if n > 3 {\n   \
    \             result.push_str(&unit.roman);\n            }\n        }\n      \
    \  number = number % unit.arabic;\n    }\n    result", "    let mut result = String::new();\n\
    \    let mut num = number;\n    let roman_numerals = vec![\n        (\"m\", 1000),\n\
    \        (\"cm\", 900),\n        (\"d\", 500),\n        (\"cd\", 400),\n     \
    \   (\"c\", 100),\n        (\"xc\", 90),\n        (\"l\", 50),\n        (\"xl\"\
    , 40),\n        (\"x\", 10),\n        (\"ix\", 9),\n        (\"v\", 5),\n    \
    \    (\"iv\", 4),\n        (\"i\", 1),\n    ];\n    for &(rn, value) in roman_numerals.iter()\
    \ {\n        while num >= value {\n            result.push_str(rn);\n        \
    \    num -= value;\n        }\n    }\n    result", "    let mut result = String::new();\n\
    \    let numerals = [\n        (\"i\", 1),\n        (\"v\", 5),\n        (\"x\"\
    , 10),\n        (\"l\", 50),\n        (\"c\", 100),\n        (\"d\", 500),\n \
    \       (\"m\", 1000),\n    ];\n    for (i, &(ch, val)) in numerals.iter().enumerate()\
    \ {\n        if number / val > 0 {\n            let mut digit = (number / val)\
    \ as isize;\n            if digit == 4 {\n                let previous_char =\
    \ numerals[i - 1].0;\n                result.push_str(previous_char);\n      \
    \          result.push_str(ch);\n            } else if digit == 9 {\n        \
    \        let previous_char = numerals[i - 1].0;\n                result.push_str(previous_char);\n\
    \                result.push_str(numerals[i + 1].0);\n            } else {\n \
    \               while digit > 0 {\n                    if digit >= 5 {\n     \
    \                   result.push_str(numerals[i + 1].0);\n                    \
    \    digit -= 5;\n                    } else {\n                        result.push_str(ch);\n\
    \                        digit -= 1;\n                    }\n                }\n\
    \            }\n        }\n        number %= val;\n    }\n    result", "    let\
    \ mut output = String::new();\n    let mut value = number;\n    while value >=\
    \ 1000 {\n        output.push_str(\"m\");\n        value -= 1000;\n    }\n   \
    \ if value >= 900 {\n        output.push_str(\"cm\");\n        value -= 900;\n\
    \    }\n    if value >= 500 {\n        output.push_str(\"d\");\n        value\
    \ -= 500;\n    }\n    if value >= 400 {\n        output.push_str(\"cd\");\n  \
    \      value -= 400;\n    }\n    while value >= 100 {\n        output.push_str(\"\
    c\");\n        value -= 100;\n    }\n    if value >= 90 {\n        output.push_str(\"\
    xc\");\n        value -= 90;\n    }\n    if value >= 50 {\n        output.push_str(\"\
    l\");\n        value -= 50;\n    }\n    if value >= 40 {\n        output.push_str(\"\
    xl\");\n        value -= 40;\n    }\n    while value >= 10 {\n        output.push_str(\"\
    x\");\n        value -= 10;\n    }\n    if value >= 9 {\n        output.push_str(\"\
    ix\");\n        value -= 9;\n    }\n    if value >= 5 {\n        output.push_str(\"\
    v\");\n        value -= 5;\n    }\n    if value >= 4 {\n        output.push_str(\"\
    iv\");\n        value -= 4;\n    }\n    while value >= 1 {\n        output.push_str(\"\
    i\");\n        value -= 1;\n    }\n    output", "    let mut string = String::new();\n\
    \    let mut num = number;\n    while num >= 1000 {\n        string.push_str(\"\
    m\");\n        num -= 1000;\n    }\n    if num >= 900 {\n        string.push_str(\"\
    cm\");\n        num -= 900;\n    }\n    if num >= 500 {\n        string.push_str(\"\
    d\");\n        num -= 500;\n    }\n    if num >= 400 {\n        string.push_str(\"\
    cd\");\n        num -= 400;\n    }\n    while num >= 100 {\n        string.push_str(\"\
    c\");\n        num -= 100;\n    }\n    if num >= 90 {\n        string.push_str(\"\
    xc\");\n        num -= 90;\n    }\n    if num >= 50 {\n        string.push_str(\"\
    l\");\n        num -= 50;\n    }\n    if num >= 40 {\n        string.push_str(\"\
    xl\");\n        num -= 40;\n    }\n    while num >= 10 {\n        string.push_str(\"\
    x\");\n        num -= 10;\n    }\n    if num >= 9 {\n        string.push_str(\"\
    ix\");\n        num -= 9;\n    }\n    if num >= 5 {\n        string.push_str(\"\
    v\");\n        num -= 5;\n    }\n    if num >= 4 {\n        string.push_str(\"\
    iv\");\n        num -= 4;\n    }\n    while num >= 1 {\n        string.push_str(\"\
    i\");\n        num -= 1;\n    }\n    string", "    let mut output = String::new();\n\
    \    let mut remainder = number;\n    while remainder > 0 {\n        output.push_str(match\
    \ remainder {\n            1...9 => \"i\",\n            10...99 => \"x\",\n  \
    \          100...999 => \"c\",\n            1000...9999 => \"m\",\n          \
    \  _ => \"\",\n        });\n        remainder = remainder % 10;\n    }\n    output",
  "    let mut result = String::new();\n    let mut remaining = number;\n    while\
    \ remaining >= 1000 {\n        result.push_str(\"m\");\n        remaining -= 1000;\n\
    \    }\n    while remaining >= 500 {\n        result.push_str(\"d\");\n      \
    \  remaining -= 500;\n    }\n    while remaining >= 100 {\n        result.push_str(\"\
    c\");\n        remaining -= 100;\n    }\n    while remaining >= 50 {\n       \
    \ result.push_str(\"l\");\n        remaining -= 50;\n    }\n    while remaining\
    \ >= 10 {\n        result.push_str(\"x\");\n        remaining -= 10;\n    }\n\
    \    while remaining >= 5 {\n        result.push_str(\"v\");\n        remaining\
    \ -= 5;\n    }\n    while remaining >= 1 {\n        result.push_str(\"i\");\n\
    \        remaining -= 1;\n    }\n    result", "    if number < 1 || number > 1000\
    \ {\n        panic!(\"The number must be an integer within the range [1, 1000]!\"\
    );\n    }\n\n    let numerals = [\"\", \"m\", \"mm\", \"mmm\"];\n    let table:\
    \ Vec<Vec<&str>> = vec![\n        vec![\"\", \"i\", \"ii\", \"iii\", \"iv\", \"\
    v\", \"vi\", \"vii\", \"viii\", \"ix\"],\n        vec![\"\", \"x\", \"xx\", \"\
    xxx\", \"xl\", \"l\", \"lx\", \"lxx\", \"lxxx\", \"xc\"],\n        vec![\"\",\
    \ \"c\", \"cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\", \"dccc\", \"cm\"],\n\
    \    ];\n\n    let mut number = number as usize;\n    let mut digits = Vec::new();\n\
    \    for i in 0..3 {\n        digits.push(number % 10);\n        number /= 10;\n\
    \    }\n\n    let s = format!(\n        \"{}{}{}{}\",\n        numerals[number],\n\
    \        table[2][digits[2]],\n        table[1][digits[1]],\n        table[0][digits[0]]\n\
    \    );\n    s.to_lowercase()", "    let symbols = [(\"M\", 1000), (\"CM\", 900),\
    \ (\"D\", 500), (\"CD\", 400), (\"C\", 100),\n        (\"XC\", 90), (\"L\", 50),\
    \ (\"XL\", 40), (\"X\", 10), (\"IX\", 9), (\"V\", 5), (\"IV\", 4), (\"I\", 1)];\n\
    \    let mut remainder = number;\n    let mut roman = String::new();\n    for\
    \ &(sym, val) in symbols.iter() {\n        while remainder >= val {\n        \
    \    roman.push_str(sym);\n            remainder -= val;\n        }\n    }\n \
    \   roman", "    let mut number = number;\n    let mut string = String::new();\n\
    \    let roman_nums = [(\"m\", 1000), (\"cm\", 900), (\"d\", 500), (\"cd\", 400),\n\
    \                      (\"c\", 100), (\"xc\", 90), (\"l\", 50), (\"xl\", 40),\n\
    \                      (\"x\", 10), (\"ix\", 9), (\"v\", 5), (\"iv\", 4), (\"\
    i\", 1)];\n    for &(numeral, value) in roman_nums.iter() {\n        while number\
    \ >= value {\n            string.push_str(numeral);\n            number -= value;\n\
    \        }\n    }\n    string", "    let mut roman_number = String::new();\n \
    \   if number < 4 {\n        roman_number.push_str(&\"i\".repeat(number as usize));\n\
    \    } else if number == 4 {\n        roman_number.push_str(\"iv\");\n    } else\
    \ if number < 9 {\n        roman_number.push_str(\"v\");\n        roman_number.push_str(&\"\
    i\".repeat((number - 5) as usize));\n    } else if number == 9 {\n        roman_number.push_str(\"\
    ix\");\n    }\n    roman_number", "    let (m, n, r) = (number / 1000, number\
    \ % 1000, number % 100);\n    let (x, y, z) = (n / 100, n % 100, n % 10);\n  \
    \  let (i, v, x) = (z / 10, z % 10, z % 1);\n    let mut output = String::new();\n\
    \    for _ in 0..m {\n        output.push('m');\n    }\n    for _ in 0..x {\n\
    \        output.push('c');\n    }\n    for _ in 0..y {\n        output.push('x');\n\
    \    }\n    for _ in 0..i {\n        output.push('i');\n    }\n    output", " \
    \   let mut remainder = number;\n    let mut result = String::new();\n\n    while\
    \ remainder >= 1000 {\n        result.push_str(\"m\");\n        remainder -= 1000;\n\
    \    }\n\n    while remainder >= 900 {\n        result.push_str(\"cm\");\n   \
    \     remainder -= 900;\n    }\n\n    while remainder >= 500 {\n        result.push_str(\"\
    d\");\n        remainder -= 500;\n    }\n\n    while remainder >= 400 {\n    \
    \    result.push_str(\"cd\");\n        remainder -= 400;\n    }\n\n    while remainder\
    \ >= 100 {\n        result.push_str(\"c\");\n        remainder -= 100;\n    }\n\
    \n    while remainder >= 90 {\n        result.push_str(\"xc\");\n        remainder\
    \ -= 90;\n    }\n\n    while remainder >= 50 {\n        result.push_str(\"l\"\
    );\n        remainder -= 50;\n    }\n\n    while remainder >= 40 {\n        result.push_str(\"\
    xl\");\n        remainder -= 40;\n    }\n\n    while remainder >= 10 {\n     \
    \   result.push_str(\"x\");\n        remainder -= 10;\n    }\n\n    while remainder\
    \ >= 9 {\n        result.push_str(\"ix\");\n        remainder -= 9;\n    }\n\n\
    \    while remainder >= 5 {\n        result.push_str(\"v\");\n        remainder\
    \ -= 5;\n    }\n\n    while remainder >= 4 {\n        result.push_str(\"iv\");\n\
    \        remainder -= 4;\n    }\n\n    while remainder >= 1 {\n        result.push_str(\"\
    i\");\n        remainder -= 1;\n    }\n\n    result", "    let mut result = String::new();\n\
    \    let mut number = number;\n    let mini_romans = [(\"i\", 1), (\"v\", 5),\
    \ (\"x\", 10)];\n    for i in 0..mini_romans.len() {\n        let (roman, base)\
    \ = mini_romans[i];\n        let repeat = number / base;\n        for _ in 0..repeat\
    \ {\n            result.push_str(roman);\n        }\n        number %= base;\n\
    \    }\n    result", "    let roman = to_roman(number);\n    roman.to_lowercase()",
  "    let (thousands, hundreds, tens, ones) = number_components(number);\n    let\
    \ mut result = String::new();\n    result.push_str(&thousands_to_mini_roman(thousands));\n\
    \    result.push_str(&hundreds_to_mini_roman(hundreds));\n    result.push_str(&tens_to_mini_roman(tens));\n\
    \    result.push_str(&ones_to_mini_roman(ones));\n    result", "    let singles\
    \ = vec![\"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"\
    ix\"];\n    let tens = vec![\"x\", \"xx\", \"xxx\", \"xl\", \"l\", \"lx\", \"\
    lxx\", \"lxxx\", \"xc\"];\n    let hundreds = vec![\"c\", \"cc\", \"ccc\", \"\
    cd\", \"d\", \"dc\", \"dcc\", \"dccc\", \"cm\"];\n    let thousands = vec![\"\
    m\", \"mm\", \"mmm\"];\n\n    let mut result = String::new();\n    let mut number\
    \ = number;\n\n    if number >= 1000 {\n        result.push_str(thousands[(number\
    \ / 1000) as usize - 1]);\n        number %= 1000;\n    }\n\n    if number >=\
    \ 100 {\n        result.push_str(hundreds[(number / 100) as usize - 1]);\n   \
    \     number %= 100;\n    }\n\n    if number >= 10 {\n        result.push_str(tens[(number\
    \ / 10) as usize - 1]);\n        number %= 10;\n    }\n\n    if number >= 1 {\n\
    \        result.push_str(singles[(number - 1) as usize]);\n    }\n\n    result",
  "    let digits = get_digits(number);\n    let tens = [\"\", \"x\", \"xx\", \"xxx\"\
    , \"xl\", \"l\", \"lx\", \"lxx\", \"lxxx\", \"xc\"];\n    let ones = [\"\", \"\
    i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\"];\n   \
    \ let hundreds = [\"\", \"c\", \"cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\"\
    , \"dccc\", \"cm\"];\n    let thousands = [\"\", \"m\", \"mm\", \"mmm\"];\n  \
    \  let string_number = format!(\n        \"{}{}{}{}\",\n        thousands[digits[3]\
    \ as usize],\n        hundreds[digits[2] as usize],\n        tens[digits[1] as\
    \ usize],\n        ones[digits[0] as usize]\n    );\n    string_number", "   \
    \ let numerals = [\"i\", \"v\", \"x\", \"l\", \"c\", \"d\", \"m\"];\n    let mut\
    \ digits = Vec::new();\n    let mut n = number;\n    while n > 0 {\n        digits.push(n\
    \ % 10);\n        n /= 10;\n    }\n    if digits.len() > 4 {\n        return \"\
    \".to_string();\n    }\n    digits.reverse();\n    let mut roman = \"\".to_string();\n\
    \    for (i, &d) in digits.iter().enumerate() {\n        let j = 2 * i;\n    \
    \    let base = numerals[j];\n        let base_5 = numerals[j + 1];\n        let\
    \ base_10 = numerals[j + 2];\n        match d {\n            1...3 => roman +=\
    \ base.repeat(d as usize).as_str(),\n            4 => roman += base.to_string()\
    \ + base_5,\n            5...8 => {\n                roman += base_5.to_string();\n\
    \                roman += base.repeat((d - 5) as usize).as_str();\n          \
    \  }\n            9 => roman += base.to_string() + base_10,\n            _ =>\
    \ {}\n        }\n    }\n    roman", "    let mut number = number;\n    let mut\
    \ result = String::new();\n    let dictionary = vec![\n        (\"m\", 1000),\n\
    \        (\"cm\", 900),\n        (\"d\", 500),\n        (\"cd\", 400),\n     \
    \   (\"c\", 100),\n        (\"xc\", 90),\n        (\"l\", 50),\n        (\"xl\"\
    , 40),\n        (\"x\", 10),\n        (\"ix\", 9),\n        (\"v\", 5),\n    \
    \    (\"iv\", 4),\n        (\"i\", 1),\n    ];\n    for (roman, decimal) in dictionary\
    \ {\n        while number >= decimal {\n            result.push_str(roman);\n\
    \            number -= decimal;\n        }\n    }\n    result", "    let mut number\
    \ = number;\n    let mut result = String::new();\n    let digit_values = vec![\n\
    \        (\"I\", 1),\n        (\"V\", 5),\n        (\"X\", 10),\n        (\"L\"\
    , 50),\n        (\"C\", 100),\n        (\"D\", 500),\n        (\"M\", 1000),\n\
    \    ];\n    let mut i = 0;\n    while number > 0 {\n        let (digit, value)\
    \ = digit_values[i];\n        if number >= value {\n            result.push_str(digit);\n\
    \            number -= value;\n        } else {\n            i += 1;\n       \
    \ }\n    }\n    result", "    let mut roman = String::new();\n    let mut num\
    \ = number;\n    while num > 0 {\n        match num {\n            1...9 => roman.push_str(&(roman_numeral_helper(num))),\n\
    \            _ => roman.push_str(&(roman_numeral_helper(num / 10))),\n       \
    \ }\n        num = num % 10;\n    }\n    roman", "    let units = vec![\"\", \"\
    i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\"];\n   \
    \ let decades = vec![\"\", \"x\", \"xx\", \"xxx\", \"xl\", \"l\", \"lx\", \"lxx\"\
    , \"lxxx\", \"xc\"];\n    let hundreds = vec![\"\", \"c\", \"cc\", \"ccc\", \"\
    cd\", \"d\", \"dc\", \"dcc\", \"dccc\", \"cm\"];\n    let thousands = vec![\"\"\
    , \"m\", \"mm\", \"mmm\"];\n\n    if number < 1 || number > 3999 {\n        panic!(\"\
    Convertion error, number should be between 1 and 3999\");\n    }\n\n    let thousands_digit\
    \ = number / 1000;\n    let hundreds_digit = (number % 1000) / 100;\n    let decades_digit\
    \ = (number % 100) / 10;\n    let units_digit = number % 10;\n\n    format!(\n\
    \        \"{}{}{}{}\",\n        thousands[thousands_digit as usize],\n       \
    \ hundreds[hundreds_digit as usize],\n        decades[decades_digit as usize],\n\
    \        units[units_digit as usize]\n    )", "    let data = [\n        (1000,\
    \ \"m\"),\n        (900, \"cm\"),\n        (500, \"d\"),\n        (400, \"cd\"\
    ),\n        (100, \"c\"),\n        (90, \"xc\"),\n        (50, \"l\"),\n     \
    \   (40, \"xl\"),\n        (10, \"x\"),\n        (9, \"ix\"),\n        (5, \"\
    v\"),\n        (4, \"iv\"),\n        (1, \"i\"),\n    ];\n\n    let mut num =\
    \ number;\n    let mut res = String::new();\n\n    for &(n, s) in data.iter()\
    \ {\n        while num >= n {\n            res.push_str(s);\n            num -=\
    \ n;\n        }\n    }\n\n    res", "    let mut remainder = number;\n    let\
    \ mut result = String::new();\n\n    for &(value, numeral) in &[\n        (1000,\
    \ \"m\"),\n        (900, \"cm\"),\n        (500, \"d\"),\n        (400, \"cd\"\
    ),\n        (100, \"c\"),\n        (90, \"xc\"),\n        (50, \"l\"),\n     \
    \   (40, \"xl\"),\n        (10, \"x\"),\n        (9, \"ix\"),\n        (5, \"\
    v\"),\n        (4, \"iv\"),\n        (1, \"i\"),\n    ] {\n        while remainder\
    \ >= value {\n            result.push_str(numeral);\n            remainder -=\
    \ value;\n        }\n    }\n\n    result", "    let mut num = number;\n    let\
    \ mut numerals = String::new();\n    while num > 0 {\n        if num >= 1000 {\n\
    \            numerals.push_str(\"m\");\n            num -= 1000;\n        } else\
    \ if num >= 900 {\n            numerals.push_str(\"cm\");\n            num -=\
    \ 900;\n        } else if num >= 500 {\n            numerals.push_str(\"d\");\n\
    \            num -= 500;\n        } else if num >= 400 {\n            numerals.push_str(\"\
    cd\");\n            num -= 400;\n        } else if num >= 100 {\n            numerals.push_str(\"\
    c\");\n            num -= 100;\n        } else if num >= 90 {\n            numerals.push_str(\"\
    xc\");\n            num -= 90;\n        } else if num >= 50 {\n            numerals.push_str(\"\
    l\");\n            num -= 50;\n        } else if num >= 40 {\n            numerals.push_str(\"\
    xl\");\n            num -= 40;\n        } else if num >= 10 {\n            numerals.push_str(\"\
    x\");\n            num -= 10;\n        } else if num >= 9 {\n            numerals.push_str(\"\
    ix\");\n            num -= 9;\n        } else if num >= 5 {\n            numerals.push_str(\"\
    v\");\n            num -= 5;\n        } else if num >= 4 {\n            numerals.push_str(\"\
    iv\");\n            num -= 4;\n        } else if num >= 1 {\n            numerals.push_str(\"\
    i\");\n            num -= 1;\n        }\n    }\n    numerals", "    let thousand\
    \ = if number >= 1000 {\n        let mult = number / 1000;\n        (0..mult).map(|_|\
    \ 'm').collect::<String>()\n    } else {\n        String::new()\n    };\n    let\
    \ (hundred, r) = digit(number % 1000, 'c', 'd', 'm');\n    let (ten, r) = digit(r,\
    \ 'x', 'l', 'c');\n    let (one, _) = digit(r, 'i', 'v', 'x');\n    [thousand,\
    \ hundred, ten, one].join(\"\")", "    let mut s = String::new();\n    let (mut\
    \ div, mut modulus);\n    let symbols = vec![\"i\", \"v\", \"x\", \"l\", \"c\"\
    , \"d\", \"m\"];\n    let mut hundreds_digit = 0;\n    let mut tens_digit = 0;\n\
    \    let mut ones_digit = 0;\n\n    if number < 1 || number > 1000 {\n       \
    \ return String::from(\"Invalid input\");\n    }\n\n    if number == 1000 {\n\
    \        return String::from(\"m\");\n    }\n\n    div = number / 100;\n    modulus\
    \ = number % 100;\n    if div > 0 {\n        hundreds_digit = div;\n    }\n\n\
    \    div = modulus / 10;\n    modulus = modulus % 10;\n    if div > 0 {\n    \
    \    tens_digit = div;\n    }\n\n    ones_digit = modulus;\n\n    if hundreds_digit\
    \ > 0 {\n        s.push_str(symbols[6]);\n        if hundreds_digit == 9 {\n \
    \           s.push_str(symbols[6]);\n            s.push_str(symbols[6]);\n   \
    \     } else if hundreds_digit == 4 {\n            s.push_str(symbols[6]);\n \
    \           s.push_str(symbols[5]);\n        } else if hundreds_digit > 4 {\n\
    \            s.push_str(symbols[5]);\n            if hundreds_digit == 5 {\n \
    \               s.push_str(symbols[6]);\n            } else {\n              \
    \  for _ in 0..(hundreds_digit - 5) {\n                    s.push_str(symbols[6]);\n\
    \                }\n            }\n        } else {\n            for _ in 0..hundreds_digit\
    \ {\n                s.push_str(symbols[6]);\n            }\n        }\n    }\n\
    \n    if tens_digit > 0 {\n        s.push_str(symbols[4]);\n        if tens_digit\
    \ == 9 {\n            s.push_str(symbols[4]);\n            s.push_str(symbols[4]);\n\
    \        } else if tens_digit == 4 {\n            s.push_str(sy", "    const I:\
    \ char = 'i';\n    const V: char = 'v';\n    const X: char = 'x';\n    const L:\
    \ char = 'l';\n    const C: char = 'c';\n    const D: char = 'd';\n    const M:\
    \ char = 'm';\n\n    if number == 0 {\n        return String::new();\n    }\n\n\
    \    if number < 0 {\n        panic!(\"number must be positive\");\n    }\n\n\
    \    let value_to_letter: Vec<(char, isize)> = vec![\n        (M, 1000),\n   \
    \     (D, 500),\n        (C, 100),\n        (L, 50),\n        (X, 10),\n     \
    \   (V, 5),\n        (I, 1),\n    ];\n\n    let mut number = number;\n    let\
    \ mut char_vec: Vec<char> = Vec::new();\n\n    for value_to_letter in value_to_letter.iter()\
    \ {\n        let (letter, value) = value_to_letter;\n        let mut multiple\
    \ = number / value;\n        number -= multiple * value;\n\n        for _ in 0..multiple\
    \ {\n            char_vec.push(*letter);\n        }\n    }\n\n    return char_vec.into_iter().collect();",
  "    //! Unit tests are in `tests/test_mini_roman.rs`\n    let mut num = number;\n\
    \    let mut result = String::from(\"\");\n    while num >= 1000 {\n        result.push_str(\"\
    m\");\n        num -= 1000;\n    }\n    if num >= 900 {\n        result.push_str(\"\
    cm\");\n        num -= 900;\n    }\n    if num >= 500 {\n        result.push_str(\"\
    d\");\n        num -= 500;\n    }\n    if num >= 400 {\n        result.push_str(\"\
    cd\");\n        num -= 400;\n    }\n    while num >= 100 {\n        result.push_str(\"\
    c\");\n        num -= 100;\n    }\n    if num >= 90 {\n        result.push_str(\"\
    xc\");\n        num -= 90;\n    }\n    if num >= 50 {\n        result.push_str(\"\
    l\");\n        num -= 50;\n    }\n    if num >= 40 {\n        result.push_str(\"\
    xl\");\n        num -= 40;\n    }\n    while num >= 10 {\n        result.push_str(\"\
    x\");\n        num -= 10;\n    }\n    if num >= 9 {\n        result.push_str(\"\
    ix\");\n        num -= 9;\n    }\n    if num >= 5 {\n        result.push_str(\"\
    v\");\n        num -= 5;\n    }\n    if num >= 4 {\n        result.push_str(\"\
    iv\");\n        num -= 4;\n    }\n    while num >= 1 {\n        result.push_str(\"\
    i\");\n        num -= 1;\n    }\n    result", "    let mut current_number = number;\n\
    \    let mut result = String::new();\n    while current_number >= 1000 {\n   \
    \     result.push('m');\n        current_number -= 1000;\n    }\n    if current_number\
    \ >= 900 {\n        result.push_str(\"cm\");\n        current_number -= 900;\n\
    \    }\n    if current_number >= 500 {\n        result.push('d');\n        current_number\
    \ -= 500;\n    }\n    if current_number >= 400 {\n        result.push_str(\"cd\"\
    );\n        current_number -= 400;\n    }\n    while current_number >= 100 {\n\
    \        result.push('c');\n        current_number -= 100;\n    }\n    if current_number\
    \ >= 90 {\n        result.push_str(\"xc\");\n        current_number -= 90;\n \
    \   }\n    if current_number >= 50 {\n        result.push('l');\n        current_number\
    \ -= 50;\n    }\n    if current_number >= 40 {\n        result.push_str(\"xl\"\
    );\n        current_number -= 40;\n    }\n    while current_number >= 10 {\n \
    \       result.push('x');\n        current_number -= 10;\n    }\n    if current_number\
    \ >= 9 {\n        result.push_str(\"ix\");\n        current_number -= 9;\n   \
    \ }\n    if current_number >= 5 {\n        result.push('v');\n        current_number\
    \ -= 5;\n    }\n    if current_number >= 4 {\n        result.push_str(\"iv\");\n\
    \        current_number -= 4;\n    }\n    while current_number >= 1 {\n      \
    \  result.push('i');\n        current_number -= 1;\n    }\n    result", "    let\
    \ rn_vec = vec![\n        (1000, \"m\"),\n        (900, \"cm\"),\n        (500,\
    \ \"d\"),\n        (400, \"cd\"),\n        (100, \"c\"),\n        (90, \"xc\"\
    ),\n        (50, \"l\"),\n        (40, \"xl\"),\n        (10, \"x\"),\n      \
    \  (9, \"ix\"),\n        (5, \"v\"),\n        (4, \"iv\"),\n        (1, \"i\"\
    ),\n    ];\n\n    let mut result = String::new();\n    let mut num = number;\n\
    \    for &(decimal, roman) in rn_vec.iter() {\n        while num >= decimal {\n\
    \            result.push_str(roman);\n            num -= decimal;\n        }\n\
    \    }\n    result", "    let mut num = number;\n    let mut numeral = String::from(\"\
    \");\n    let numerals = [(1000, \"m\"), (900, \"cm\"), (500, \"d\"), (400, \"\
    cd\"), (100, \"c\"),\n                    (90, \"xc\"), (50, \"l\"), (40, \"xl\"\
    ), (10, \"x\"), (9, \"ix\"), (5, \"v\"),\n                    (4, \"iv\"), (1,\
    \ \"i\")];\n    for &(divisor, letters) in numerals.iter() {\n        while num\
    \ >= divisor {\n            numeral.push_str(letters);\n            num -= divisor;\n\
    \        }\n    }\n    numeral", "    let mut remainder = number;\n    let mut\
    \ string = String::new();\n    let mut units: Vec<(isize, &str)> = Vec::new();\n\
    \    units.push((remainder % 10, \"i\"));\n    remainder /= 10;\n    units.push((remainder\
    \ % 10, \"x\"));\n    remainder /= 10;\n    units.push((remainder % 10, \"c\"\
    ));\n    remainder /= 10;\n    units.push((remainder % 10, \"m\"));\n    remainder\
    \ /= 10;\n    units.push((remainder % 10, \"v\"));\n    remainder /= 10;\n   \
    \ units.push((remainder % 10, \"l\"));\n    remainder /= 10;\n    units.push((remainder\
    \ % 10, \"d\"));\n    remainder /= 10;\n    units.push((remainder % 10, \"m\"\
    ));\n    units.reverse();\n    //println!(\"{:?}\", units);\n    for (digit, unit)\
    \ in units {\n        if digit != 0 {\n            if digit < 4 {\n          \
    \      for _ in 0..digit {\n                    string.push_str(unit);\n     \
    \           }\n            } else if digit == 4 {\n                string.push_str(unit);\n\
    \                string.push_str(&(unit.to_string() + \"v\"));\n            }\
    \ else if digit == 5 {\n                string.push_str(&(unit.to_string() + \"\
    v\"));\n            } else if digit < 9 {\n                string.push_str(&(unit.to_string()\
    \ + \"v\"));\n                for _ in 5..digit {\n                    string.push_str(unit);\n\
    \                }\n            } else if digit == 9 {\n                string.push_str(unit);\n\
    \                string.push_str(&(unit.to_string() + \"x\"));\n            }\n\
    \        }\n    }\n    string", "    let n = number;\n    let mut nn = n.clone();\n\
    \    let mut res = String::new();\n    while nn > 0 {\n        if nn >= 900 {\n\
    \            res += \"cm\";\n            nn -= 900;\n        } else if nn >= 500\
    \ {\n            res += \"d\";\n            nn -= 500;\n        } else if nn >=\
    \ 400 {\n            res += \"cd\";\n            nn -= 400;\n        } else if\
    \ nn >= 100 {\n            res += \"c\";\n            nn -= 100;\n        } else\
    \ if nn >= 90 {\n            res += \"xc\";\n            nn -= 90;\n        }\
    \ else if nn >= 50 {\n            res += \"l\";\n            nn -= 50;\n     \
    \   } else if nn >= 40 {\n            res += \"xl\";\n            nn -= 40;\n\
    \        } else if nn >= 10 {\n            res += \"x\";\n            nn -= 10;\n\
    \        } else if nn >= 9 {\n            res += \"ix\";\n            nn -= 9;\n\
    \        } else if nn >= 5 {\n            res += \"v\";\n            nn -= 5;\n\
    \        } else if nn >= 4 {\n            res += \"iv\";\n            nn -= 4;\n\
    \        } else if nn >= 1 {\n            res += \"i\";\n            nn -= 1;\n\
    \        }\n    }\n    res", "    let parts = [\n        (1000, \"m\"),\n    \
    \    (900, \"cm\"),\n        (500, \"d\"),\n        (400, \"cd\"),\n        (100,\
    \ \"c\"),\n        (90, \"xc\"),\n        (50, \"l\"),\n        (40, \"xl\"),\n\
    \        (10, \"x\"),\n        (9, \"ix\"),\n        (5, \"v\"),\n        (4,\
    \ \"iv\"),\n        (1, \"i\"),\n    ];\n    let mut result = String::new();\n\
    \    let mut num = number;\n    for &(i, r) in parts.iter() {\n        while num\
    \ >= i {\n            result.push_str(r);\n            num -= i;\n        }\n\
    \    }\n    result", "    let mut str = String::new();\n    let mut num = number;\n\
    \    while num > 0 {\n        match num {\n            1000 => {\n           \
    \     str.push_str(\"m\");\n                num -= 1000;\n            }\n    \
    \        900 => {\n                str.push_str(\"cm\");\n                num\
    \ -= 900;\n            }\n            500 => {\n                str.push_str(\"\
    d\");\n                num -= 500;\n            }\n            400 => {\n    \
    \            str.push_str(\"cd\");\n                num -= 400;\n            }\n\
    \            100 => {\n                str.push_str(\"c\");\n                num\
    \ -= 100;\n            }\n            90 => {\n                str.push_str(\"\
    xc\");\n                num -= 90;\n            }\n            50 => {\n     \
    \           str.push_str(\"l\");\n                num -= 50;\n            }\n\
    \            40 => {\n                str.push_str(\"xl\");\n                num\
    \ -= 40;\n            }\n            10 => {\n                str.push_str(\"\
    x\");\n                num -= 10;\n            }\n            9 => {\n       \
    \         str.push_str(\"ix\");\n                num -= 9;\n            }\n  \
    \          5 => {\n                str.push_str(\"v\");\n                num -=\
    \ 5;\n            }\n            4 => {\n                str.push_str(\"iv\");\n\
    \                num -= 4;\n            }\n            _ => {\n              \
    \  str.push_str(\"i\");\n                num -= 1;\n            }\n        }\n\
    \    }\n    str", "    let mut num = number;\n    let mut result = String::new();\n\
    \    let possible_values = vec![1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900,\
    \ 1000];\n    let possible_romans = vec![\n        \"i\", \"iv\", \"v\", \"ix\"\
    , \"x\", \"xl\", \"l\", \"xc\", \"c\", \"cd\", \"d\", \"cm\", \"m\",\n    ];\n\
    \    for (k, v) in possible_values.iter().zip(possible_romans.iter()) {\n    \
    \    while num >= *k {\n            result.push_str(v);\n            num -= *k;\n\
    \        }\n    }\n    result", "    let mut n = number;\n    let mut result =\
    \ String::new();\n    while n > 0 {\n        if n >= 1000 {\n            result.push_str(\"\
    m\");\n            n -= 1000;\n        } else if n >= 900 {\n            result.push_str(\"\
    cm\");\n            n -= 900;\n        } else if n >= 500 {\n            result.push_str(\"\
    d\");\n            n -= 500;\n        } else if n >= 400 {\n            result.push_str(\"\
    cd\");\n            n -= 400;\n        } else if n >= 100 {\n            result.push_str(\"\
    c\");\n            n -= 100;\n        } else if n >= 90 {\n            result.push_str(\"\
    xc\");\n            n -= 90;\n        } else if n >= 50 {\n            result.push_str(\"\
    l\");\n            n -= 50;\n        } else if n >= 40 {\n            result.push_str(\"\
    xl\");\n            n -= 40;\n        } else if n >= 10 {\n            result.push_str(\"\
    x\");\n            n -= 10;\n        } else if n >= 9 {\n            result.push_str(\"\
    ix\");\n            n -= 9;\n        } else if n >= 5 {\n            result.push_str(\"\
    v\");\n            n -= 5;\n        } else if n >= 4 {\n            result.push_str(\"\
    iv\");\n            n -= 4;\n        } else if n >= 1 {\n            result.push_str(\"\
    i\");\n            n -= 1;\n        }\n    }\n    result", "    let mut output\
    \ = String::new();\n    let num_vec = vec![\n        ('M', 1000),\n        ('D',\
    \ 500),\n        ('C', 100),\n        ('L', 50),\n        ('X', 10),\n       \
    \ ('V', 5),\n        ('I', 1),\n    ];\n    let mut num = number;\n    for (c,\
    \ n) in num_vec {\n        let q = num / n;\n        output.push_str(&c.to_string().repeat(q\
    \ as usize));\n        num = num % n;\n    }\n    output", "    if number > 1000\
    \ || number < 1 {\n        panic!(\"Input must be between 1 and 1000\");\n   \
    \ }\n    let d1000 = number / 1000;\n    let d100 = (number % 1000) / 100;\n \
    \   let d10 = (number % 100) / 10;\n    let d1 = number % 10;\n    let mut s =\
    \ String::new();\n    for _ in 0..d1000 {\n        s.push('m');\n    }\n    for\
    \ _ in 0..d100 {\n        s.push('c');\n    }\n    for _ in 0..d10 {\n       \
    \ s.push('x');\n    }\n    for _ in 0..d1 {\n        s.push('i');\n    }\n   \
    \ s", "    let mut number = number;\n    let mut roman = String::new();\n    while\
    \ number > 0 {\n        match number {\n            //special case: 4\n      \
    \      4 => {\n                roman.push('i');\n                roman.push('v');\n\
    \                number -= 4;\n            }\n            //special case: 9\n\
    \            9 => {\n                roman.push('i');\n                roman.push('x');\n\
    \                number -= 9;\n            }\n            //special case: 40\n\
    \            40 => {\n                roman.push('x');\n                roman.push('l');\n\
    \                number -= 40;\n            }\n            //special case: 90\n\
    \            90 => {\n                roman.push('x');\n                roman.push('c');\n\
    \                number -= 90;\n            }\n            //special case: 400\n\
    \            400 => {\n                roman.push('c');\n                roman.push('d');\n\
    \                number -= 400;\n            }\n            //special case: 900\n\
    \            900 => {\n                roman.push('c');\n                roman.push('m');\n\
    \                number -= 900;\n            }\n            //general case: power\
    \ of 10\n            pow_10 @ _ if pow_10.is_power_of_ten() => {\n           \
    \     roman.push(match pow_10 {\n                    1_000 => 'm',\n         \
    \           100 => 'c',\n                    10 => 'x',\n                    1\
    \ => 'i',\n                    _ => panic!(\"unknown power of 10 {}\", pow_10),\n\
    \                });\n                number -= pow_10;\n            }\n     \
    \       //general case: 5 * power of 10\n            5 * pow_10 @ _ if pow_10.is_power_of_ten()\
    \ => {\n                match pow_10 {\n                    1_000 => roman.push('v'),\n\
    \                    100 => roman.push('d'),\n                    10 => roman.push('l'),\n\
    \                    1 => roman.push('v'),\n                    _ => panic!(\"\
    unknown power of 10 {}\", pow_10),\n                };\n                number\
    \ -= 5 * pow_10;\n            }\n            //general case: 1 * power of 10\n\
    \            pow_10 @ _ if pow_10", "    match number {\n        1 => \"i\".to_string(),\n\
    \        2 => \"ii\".to_string(),\n        3 => \"iii\".to_string(),\n       \
    \ 4 => \"iv\".to_string(),\n        5 => \"v\".to_string(),\n        6 => \"vi\"\
    .to_string(),\n        7 => \"vii\".to_string(),\n        8 => \"viii\".to_string(),\n\
    \        9 => \"ix\".to_string(),\n        10 => \"x\".to_string(),\n        20\
    \ => \"xx\".to_string(),\n        30 => \"xxx\".to_string(),\n        40 => \"\
    xl\".to_string(),\n        50 => \"l\".to_string(),\n        60 => \"lx\".to_string(),\n\
    \        70 => \"lxx\".to_string(),\n        80 => \"lxxx\".to_string(),\n   \
    \     90 => \"xc\".to_string(),\n        100 => \"c\".to_string(),\n        200\
    \ => \"cc\".to_string(),\n        300 => \"ccc\".to_string(),\n        400 =>\
    \ \"cd\".to_string(),\n        500 => \"d\".to_string(),\n        600 => \"dc\"\
    .to_string(),\n        700 => \"dcc\".to_string(),\n        800 => \"dccc\".to_string(),\n\
    \        900 => \"cm\".to_string(),\n        1000 => \"m\".to_string(),\n    \
    \    _ => unimplemented!(),\n    }", "    let v = vec![\n        vec![1000, \"\
    m\"],\n        vec![900, \"cm\"],\n        vec![500, \"d\"],\n        vec![400,\
    \ \"cd\"],\n        vec![100, \"c\"],\n        vec![90, \"xc\"],\n        vec![50,\
    \ \"l\"],\n        vec![40, \"xl\"],\n        vec![10, \"x\"],\n        vec![9,\
    \ \"ix\"],\n        vec![5, \"v\"],\n        vec![4, \"iv\"],\n        vec![1,\
    \ \"i\"],\n    ];\n    let mut ret: String = String::new();\n    let mut count\
    \ = number;\n    for n in v {\n        while count >= n[0] {\n            ret.push_str(n[1]);\n\
    \            count -= n[0];\n        }\n    }\n    ret", "    let ones = vec![\"\
    \", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\"];\n\
    \    let tens = vec![\"\", \"x\", \"xx\", \"xxx\", \"xl\", \"l\", \"lx\", \"lxx\"\
    , \"lxxx\", \"xc\"];\n    let hundreds = vec![\"\", \"c\", \"cc\", \"ccc\", \"\
    cd\", \"d\", \"dc\", \"dcc\", \"dccc\", \"cm\"];\n    let thousands = vec![\"\"\
    , \"m\", \"mm\", \"mmm\"];\n\n    let ones_idx = number % 10;\n    let tens_idx\
    \ = (number / 10) % 10;\n    let hundreds_idx = (number / 100) % 10;\n    let\
    \ thousands_idx = (number / 1000) % 10;\n\n    let mut ret = String::new();\n\
    \    ret.push_str(thousands[thousands_idx as usize]);\n    ret.push_str(hundreds[hundreds_idx\
    \ as usize]);\n    ret.push_str(tens[tens_idx as usize]);\n    ret.push_str(ones[ones_idx\
    \ as usize]);\n\n    ret", "    if number < 1 || number > 1000 {\n        return\
    \ \"\".to_string();\n    }\n\n    let mut result = \"\".to_string();\n    let\
    \ mut num = number;\n\n    while num >= 1000 {\n        result += \"m\";\n   \
    \     num -= 1000;\n    }\n\n    while num >= 900 {\n        result += \"cm\"\
    ;\n        num -= 900;\n    }\n\n    while num >= 500 {\n        result += \"\
    d\";\n        num -= 500;\n    }\n\n    while num >= 400 {\n        result +=\
    \ \"cd\";\n        num -= 400;\n    }\n\n    while num >= 100 {\n        result\
    \ += \"c\";\n        num -= 100;\n    }\n\n    while num >= 90 {\n        result\
    \ += \"xc\";\n        num -= 90;\n    }\n\n    while num >= 50 {\n        result\
    \ += \"l\";\n        num -= 50;\n    }\n\n    while num >= 40 {\n        result\
    \ += \"xl\";\n        num -= 40;\n    }\n\n    while num >= 10 {\n        result\
    \ += \"x\";\n        num -= 10;\n    }\n\n    while num >= 9 {\n        result\
    \ += \"ix\";\n        num -= 9;\n    }\n\n    while num >= 5 {\n        result\
    \ += \"v\";\n        num -= 5;\n    }\n\n    while num >= 4 {\n        result\
    \ += \"iv\";\n        num -= 4;\n    }\n\n    while num >= 1 {\n        result\
    \ += \"i\";\n        num -= 1;\n    }\n\n    result", "    let mut number = number;\n\
    \    let mut result = String::new();\n    while number > 0 {\n        match number\
    \ {\n            n if n >= 1000 => {\n                result.push('m');\n    \
    \            number -= 1000;\n            }\n            n if n >= 900 => {\n\
    \                result.push_str(\"cm\");\n                number -= 900;\n  \
    \          }\n            n if n >= 500 => {\n                result.push('d');\n\
    \                number -= 500;\n            }\n            n if n >= 400 => {\n\
    \                result.push_str(\"cd\");\n                number -= 400;\n  \
    \          }\n            n if n >= 100 => {\n                result.push('c');\n\
    \                number -= 100;\n            }\n            n if n >= 90 => {\n\
    \                result.push_str(\"xc\");\n                number -= 90;\n   \
    \         }\n            n if n >= 50 => {\n                result.push('l');\n\
    \                number -= 50;\n            }\n            n if n >= 40 => {\n\
    \                result.push_str(\"xl\");\n                number -= 40;\n   \
    \         }\n            n if n >= 10 => {\n                result.push('x');\n\
    \                number -= 10;\n            }\n            n if n >= 9 => {\n\
    \                result.push_str(\"ix\");\n                number -= 9;\n    \
    \        }\n            n if n >= 5 => {\n                result.push('v');\n\
    \                number -= 5;\n            }\n            n if n >= 4 => {\n \
    \               result.push_str(\"iv\");\n                number -= 4;\n     \
    \       }\n            n if n >= 1 => {\n                result.push('i');\n \
    \               number -= 1;\n            }\n            _ => {}\n        }\n\
    \    }\n    result", "    let mut result = String::new();\n    let (num, letter)\
    \ = num_to_letter(number, \"M\", \"m\");\n    let (num, letter) = num_to_letter(num,\
    \ \"C\", \"c\");\n    let (num, letter) = num_to_letter(num, \"X\", \"x\");\n\
    \    num_to_letter(num, \"I\", \"i\").1.to_string() + &letter + &result", "  \
    \  let m: isize = number / 1000;\n    let rest: isize = number % 1000;\n    let\
    \ c: isize = rest / 100;\n    let rest: isize = rest % 100;\n    let x: isize\
    \ = rest / 10;\n    let rest: isize = rest % 10;\n    let i: isize = rest;\n\n\
    \    let mut result: String = String::new();\n    for _ in 0..m {\n        result\
    \ += \"m\";\n    }\n    if c == 9 {\n        result += \"cm\";\n    } else if\
    \ c == 4 {\n        result += \"cd\";\n    } else {\n        if c >= 5 {\n   \
    \         result += \"d\";\n        }\n        for _ in 0..(c % 5) {\n       \
    \     result += \"c\";\n        }\n    }\n    if x == 9 {\n        result += \"\
    xc\";\n    } else if x == 4 {\n        result += \"xl\";\n    } else {\n     \
    \   if x >= 5 {\n            result += \"l\";\n        }\n        for _ in 0..(x\
    \ % 5) {\n            result += \"x\";\n        }\n    }\n    if i == 9 {\n  \
    \      result += \"ix\";\n    } else if i == 4 {\n        result += \"iv\";\n\
    \    } else {\n        if i >= 5 {\n            result += \"v\";\n        }\n\
    \        for _ in 0..(i % 5) {\n            result += \"i\";\n        }\n    }\n\
    \    result", "    let mut num = number;\n    let mut result = String::from(\"\
    \");\n    while num > 0 {\n        if num >= 900 {\n            result.push_str(\"\
    cm\");\n            num -= 900;\n        } else if num >= 500 {\n            result.push_str(\"\
    d\");\n            num -= 500;\n        } else if num >= 400 {\n            result.push_str(\"\
    cd\");\n            num -= 400;\n        } else if num >= 100 {\n            result.push_str(\"\
    c\");\n            num -= 100;\n        } else if num >= 90 {\n            result.push_str(\"\
    xc\");\n            num -= 90;\n        } else if num >= 50 {\n            result.push_str(\"\
    l\");\n            num -= 50;\n        } else if num >= 40 {\n            result.push_str(\"\
    xl\");\n            num -= 40;\n        } else if num >= 10 {\n            result.push_str(\"\
    x\");\n            num -= 10;\n        } else if num >= 9 {\n            result.push_str(\"\
    ix\");\n            num -= 9;\n        } else if num >= 5 {\n            result.push_str(\"\
    v\");\n            num -= 5;\n        } else if num >= 4 {\n            result.push_str(\"\
    iv\");\n            num -= 4;\n        } else if num >= 1 {\n            result.push_str(\"\
    i\");\n            num -= 1;\n        }\n    }\n    result", "    let mut number\
    \ = number;\n    let mut res = String::new();\n    let big_nums = [100, 90, 50,\
    \ 40, 10, 9, 5, 4, 1];\n    let roman_nums = [\"c\", \"xc\", \"l\", \"xl\", \"\
    x\", \"ix\", \"v\", \"iv\", \"i\"];\n    let len = big_nums.len();\n    for i\
    \ in 0..len {\n        while number >= big_nums[i] {\n            res.push_str(roman_nums[i]);\n\
    \            number -= big_nums[i];\n        }\n    }\n    res", "    let (mut\
    \ thousand, mut hundred, mut ten, mut one) = num_to_digits(number);\n    let mut\
    \ result = String::new();\n\n    if thousand > 0 {\n        result.push_str(\"\
    m\");\n        thousand -= 1;\n    }\n\n    if hundred > 0 {\n        if hundred\
    \ == 9 {\n            result.push_str(\"cm\");\n            hundred -= 9;\n  \
    \      } else if hundred >= 5 {\n            result.push_str(\"d\");\n       \
    \     hundred -= 5;\n        } else if hundred == 4 {\n            result.push_str(\"\
    cd\");\n            hundred -= 4;\n        }\n\n        while hundred > 0 {\n\
    \            result.push_str(\"c\");\n            hundred -= 1;\n        }\n \
    \   }\n\n    if ten > 0 {\n        if ten == 9 {\n            result.push_str(\"\
    xc\");\n            ten -= 9;\n        } else if ten >= 5 {\n            result.push_str(\"\
    l\");\n            ten -= 5;\n        } else if ten == 4 {\n            result.push_str(\"\
    xl\");\n            ten -= 4;\n        }\n\n        while ten > 0 {\n        \
    \    result.push_str(\"x\");\n            ten -= 1;\n        }\n    }\n\n    if\
    \ one > 0 {\n        if one == 9 {\n            result.push_str(\"ix\");\n   \
    \         one -= 9;\n        } else if one >= 5 {\n            result.push_str(\"\
    v\");\n            one -= 5;\n        } else if one == 4 {\n            result.push_str(\"\
    iv\");\n            one -= 4;\n        }\n\n        while one > 0 {\n        \
    \    result.push_str(\"i\");\n            one -= 1;\n        }\n    }\n\n    result",
  "    let mut roman = String::new();\n    roman += &String::from_utf8(vec![b'I';\
    \ (number % 5) as usize]).unwrap();\n    roman += &(match number {\n        1..=3\
    \ => \"\",\n        4 => \"IV\",\n        5..=8 => \"V\",\n        9 => \"IX\"\
    ,\n        _ => \"\",\n    }\n    .to_string());\n    roman", "    let numeral_list\
    \ = vec![(1000, \"m\"), (900, \"cm\"), (500, \"d\"), (400, \"cd\"), (100, \"c\"\
    ),\n                            (90, \"xc\"), (50, \"l\"), (40, \"xl\"), (10,\
    \ \"x\"), (9, \"ix\"), (5, \"v\"),\n                            (4, \"iv\"), (1,\
    \ \"i\")];\n    let mut remainder = number;\n    let mut result = String::new();\n\
    \    for (numeral, numeral_string) in numeral_list {\n        if remainder ==\
    \ 0 {\n            break;\n        }\n        let fraction = remainder / numeral;\n\
    \        remainder = remainder % numeral;\n        result.push_str(&(numeral_string.repeat(fraction\
    \ as usize)));\n    }\n    result", "    if !(1 <= number && number <= 1000) {\n\
    \        panic!(\"Integer out of range.\");\n    }\n    let mut num = number;\n\
    \    let mut result = String::new();\n    let digits = [1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9];\n    let roman_digits = [\n        \"\", \"i\", \"ii\", \"iii\", \"iv\"\
    , \"v\", \"vi\", \"vii\", \"viii\", \"ix\",\n    ];\n    for digit in digits.iter().rev()\
    \ {\n        if num < *digit {\n            continue;\n        }\n        let\
    \ index = num / digit;\n        result.push_str(roman_digits[index as usize]);\n\
    \        num -= digit * index;\n    }\n    result", "    // let mut result = String::new();\n\
    \    // while num > 0 {\n    //     match num {\n    //         // hundreds\n\
    \    //         x if x >= 900 => {\n    //             result.push_str(\"cm\"\
    );\n    //             num -= 900;\n    //         }\n    //         x if x >=\
    \ 500 => {\n    //             result.push_str(\"d\");\n    //             num\
    \ -= 500;\n    //         }\n    //         x if x >= 400 => {\n    //       \
    \      result.push_str(\"cd\");\n    //             num -= 400;\n    //      \
    \   }\n    //         // tens\n    //         x if x >= 90 => {\n    //      \
    \       result.push_str(\"xc\");\n    //             num -= 90;\n    //      \
    \   }\n    //         x if x >= 50 => {\n    //             result.push_str(\"\
    l\");\n    //             num -= 50;\n    //         }\n    //         x if x\
    \ >= 40 => {\n    //             result.push_str(\"xl\");\n    //            \
    \ num -= 40;\n    //         }\n    //         // units\n    //         x if x\
    \ >= 9 => {\n    //             result.push_str(\"ix\");\n    //             num\
    \ -= 9;\n    //         }\n    //         x if x >= 5 => {\n    //           \
    \  result.push_str(\"v\");\n    //             num -= 5;\n    //         }\n \
    \   //         x if x >= 4 => {\n    //             result.push_str(\"iv\");\n\
    \    //             num -= 4;\n    //         }\n    //         // units\n   \
    \ //         x if x >= 1 => {\n    //             result.push_str(\"i\");\n  \
    \  //             num -= 1;\n    //         }\n    //         _ => break,\n  \
    \  //     }\n    // }\n    // result\n\n    // we could also use an array of tuples\
    \ like:\n    let numerals = [\n        (\"cm\", 900),\n        (\"d\", 500),\n\
    \        (\"cd\", 400),\n        (\"xc\", 90),\n        (\"l\", 50),\n       \
    \ (\"xl\", 40),\n        (\"ix\", 9),\n        (\"v\", 5),\n       ", "    let\
    \ n: usize = number as usize;\n    let mut number = n;\n    let mut result = String::new();\n\
    \    while number >= 100 {\n        result.push('c');\n        number -= 100;\n\
    \    }\n    if number >= 90 {\n        result.push_str(\"xc\");\n        number\
    \ -= 90;\n    }\n    if number >= 50 {\n        result.push('l');\n        number\
    \ -= 50;\n    }\n    if number >= 40 {\n        result.push_str(\"xl\");\n   \
    \     number -= 40;\n    }\n    while number >= 10 {\n        result.push('x');\n\
    \        number -= 10;\n    }\n    if number >= 9 {\n        result.push_str(\"\
    ix\");\n        number -= 9;\n    }\n    if number >= 5 {\n        result.push('v');\n\
    \        number -= 5;\n    }\n    if number >= 4 {\n        result.push_str(\"\
    iv\");\n        number -= 4;\n    }\n    while number >= 1 {\n        result.push('i');\n\
    \        number -= 1;\n    }\n    result", "    // TODO: Implement this function\n\
    \    unimplemented!();", "    let mut output = String::new();\n    let mut number\
    \ = number;\n    while number > 0 {\n        if number >= 1000 {\n           \
    \ output.push_str(\"m\");\n            number -= 1000;\n        } else if number\
    \ >= 900 {\n            output.push_str(\"cm\");\n            number -= 900;\n\
    \        } else if number >= 500 {\n            output.push_str(\"d\");\n    \
    \        number -= 500;\n        } else if number >= 400 {\n            output.push_str(\"\
    cd\");\n            number -= 400;\n        } else if number >= 100 {\n      \
    \      output.push_str(\"c\");\n            number -= 100;\n        } else if\
    \ number >= 90 {\n            output.push_str(\"xc\");\n            number -=\
    \ 90;\n        } else if number >= 50 {\n            output.push_str(\"l\");\n\
    \            number -= 50;\n        } else if number >= 40 {\n            output.push_str(\"\
    xl\");\n            number -= 40;\n        } else if number >= 10 {\n        \
    \    output.push_str(\"x\");\n            number -= 10;\n        } else if number\
    \ >= 9 {\n            output.push_str(\"ix\");\n            number -= 9;\n   \
    \     } else if number >= 5 {\n            output.push_str(\"v\");\n         \
    \   number -= 5;\n        } else if number >= 4 {\n            output.push_str(\"\
    iv\");\n            number -= 4;\n        } else if number >= 1 {\n          \
    \  output.push_str(\"i\");\n            number -= 1;\n        }\n    }\n    output",
  "    let mut result = String::new();\n    for (num, letter) in &[\n        (1000,\
    \ \"m\"),\n        (900, \"cm\"),\n        (500, \"d\"),\n        (400, \"cd\"\
    ),\n        (100, \"c\"),\n        (90, \"xc\"),\n        (50, \"l\"),\n     \
    \   (40, \"xl\"),\n        (10, \"x\"),\n        (9, \"ix\"),\n        (5, \"\
    v\"),\n        (4, \"iv\"),\n        (1, \"i\"),\n    ] {\n        while number\
    \ >= *num {\n            result.push_str(&letter);\n            number -= num;\n\
    \        }\n    }\n    result", "    if number <= 0 {\n        return String::new();\n\
    \    }\n\n    let mut result = String::new();\n    for &(n, r) in &MINI_ROMAN_DIGITS\
    \ {\n        result.push_str(&(r.repeat(number / n)));\n        number %= n;\n\
    \    }\n    result", "    let romans = vec![\n        (\"M\", 1000),\n       \
    \ (\"CM\", 900),\n        (\"D\", 500),\n        (\"CD\", 400),\n        (\"C\"\
    , 100),\n        (\"XC\", 90),\n        (\"L\", 50),\n        (\"XL\", 40),\n\
    \        (\"X\", 10),\n        (\"IX\", 9),\n        (\"V\", 5),\n        (\"\
    IV\", 4),\n        (\"I\", 1),\n    ];\n\n    if number == 0 {\n        return\
    \ \"\".to_string();\n    }\n\n    let mut number = number;\n    let mut result\
    \ = String::new();\n\n    for (roman, value) in romans {\n        if number >=\
    \ value {\n            result.push_str(roman);\n            number -= value;\n\
    \        }\n    }\n\n    result", "    let thousands = number / 1000;\n    let\
    \ hundreds = (number % 1000) / 100;\n    let tens = (number % 100) / 10;\n   \
    \ let ones = number % 10;\n\n    let mut res = String::new();\n    for _ in 0..thousands\
    \ {\n        res.push('m');\n    }\n    match hundreds {\n        1 => res.push('c'),\n\
    \        2 => res.push_str(\"cc\"),\n        3 => res.push_str(\"ccc\"),\n   \
    \     4 => res.push_str(\"cd\"),\n        5 => res.push('d'),\n        6 => res.push_str(\"\
    dc\"),\n        7 => res.push_str(\"dcc\"),\n        8 => res.push_str(\"dccc\"\
    ),\n        9 => res.push_str(\"cm\"),\n        _ => (),\n    }\n    match tens\
    \ {\n        1 => res.push('x'),\n        2 => res.push_str(\"xx\"),\n       \
    \ 3 => res.push_str(\"xxx\"),\n        4 => res.push_str(\"xl\"),\n        5 =>\
    \ res.push('l'),\n        6 => res.push_str(\"lx\"),\n        7 => res.push_str(\"\
    lxx\"),\n        8 => res.push_str(\"lxxx\"),\n        9 => res.push_str(\"xc\"\
    ),\n        _ => (),\n    }\n    match ones {\n        1 => res.push('i'),\n \
    \       2 => res.push_str(\"ii\"),\n        3 => res.push_str(\"iii\"),\n    \
    \    4 => res.push_str(\"iv\"),\n        5 => res.push('v'),\n        6 => res.push_str(\"\
    vi\"),\n        7 => res.push_str(\"vii\"),\n        8 => res.push_str(\"viii\"\
    ),\n        9 => res.push_str(\"ix\"),\n        _ => (),\n    }\n    res", " \
    \   let units = vec![\"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\"\
    , \"viii\", \"ix\"];\n    let tens = vec![\"\", \"x\", \"xx\", \"xxx\", \"xl\"\
    , \"l\", \"lx\", \"lxx\", \"lxxx\", \"xc\"];\n    let hundreds = vec![\"\", \"\
    c\", \"cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\", \"dccc\", \"cm\"];\n   \
    \ let thousands = vec![\"\", \"m\", \"mm\", \"mmm\"];\n\n    let unit = number\
    \ % 10;\n    let ten = (number / 10) % 10;\n    let hundred = (number / 100) %\
    \ 10;\n    let thousand = (number / 1000) % 10;\n\n    let mut roman_numeral =\
    \ String::new();\n    roman_numeral.push_str(thousands[thousand as usize]);\n\
    \    roman_numeral.push_str(hundreds[hundred as usize]);\n    roman_numeral.push_str(tens[ten\
    \ as usize]);\n    roman_numeral.push_str(units[unit as usize]);\n\n    roman_numeral",
  "    let thousand = number / 1000;\n    let hundred = (number % 1000) / 100;\n \
    \   let ten = (number % 100) / 10;\n    let one = number % 10;\n\n    let mut\
    \ result = String::new();\n\n    for _ in 0..thousand {\n        result.push('m');\n\
    \    }\n\n    match hundred {\n        1 => result.push('c'),\n        2 => result.push_str(\"\
    cc\"),\n        3 => result.push_str(\"ccc\"),\n        4 => result.push_str(\"\
    cd\"),\n        5 => result.push('d'),\n        6 => result.push_str(\"dc\"),\n\
    \        7 => result.push_str(\"dcc\"),\n        8 => result.push_str(\"dccc\"\
    ),\n        9 => result.push_str(\"cm\"),\n        _ => (),\n    }\n\n    match\
    \ ten {\n        1 => result.push('x'),\n        2 => result.push_str(\"xx\"),\n\
    \        3 => result.push_str(\"xxx\"),\n        4 => result.push_str(\"xl\"),\n\
    \        5 => result.push('l'),\n        6 => result.push_str(\"lx\"),\n     \
    \   7 => result.push_str(\"lxx\"),\n        8 => result.push_str(\"lxxx\"),\n\
    \        9 => result.push_str(\"xc\"),\n        _ => (),\n    }\n\n    match one\
    \ {\n        1 => result.push('i'),\n        2 => result.push_str(\"ii\"),\n \
    \       3 => result.push_str(\"iii\"),\n        4 => result.push_str(\"iv\"),\n\
    \        5 => result.push('v'),\n        6 => result.push_str(\"vi\"),\n     \
    \   7 => result.push_str(\"vii\"),\n        8 => result.push_str(\"viii\"),\n\
    \        9 => result.push_str(\"ix\"),\n        _ => (),\n    }\n\n    result",
  "    let roman_digits = vec![\"i\", \"v\", \"x\", \"l\", \"c\", \"d\", \"m\"];\n\
    \    let mut digits: Vec<char> = number.to_string().chars().collect();\n    let\
    \ length = digits.len();\n    let mut result = String::new();\n    for i in 0..length\
    \ {\n        let n = (length - i - 1) as usize;\n        let digit = digits[i];\n\
    \        let mut num_repeats = 1;\n        if digit == '0' {\n            continue;\n\
    \        }\n        if i < length - 1 {\n            if digits[i + 1] == '0' {\n\
    \                num_repeats = 1;\n            } else if digits[i + 1] == '1'\
    \ {\n                num_repeats = 2;\n            } else if digits[i + 1] ==\
    \ '2' {\n                num_repeats = 3;\n            } else if digits[i + 1]\
    \ == '3' {\n                num_repeats = 4;\n            } else if digits[i +\
    \ 1] == '4' {\n                num_repeats = 5;\n            } else if digits[i\
    \ + 1] == '5' {\n                num_repeats = 6;\n            } else if digits[i\
    \ + 1] == '6' {\n                num_repeats = 7;\n            } else if digits[i\
    \ + 1] == '7' {\n                num_repeats = 8;\n            } else if digits[i\
    \ + 1] == '8' {\n                num_repeats = 9;\n            } else if digits[i\
    \ + 1] == '9' {\n                num_repeats = 10;\n            }\n        }\n\
    \        if digit == '1' {\n            for _ in 0..num_repeats {\n          \
    \      result.push_str(roman_digits[n * 2]);\n            }\n        } else if\
    \ digit == '2' {\n            for _ in 0..num_repeats {\n                result.push_str(roman_digits[n\
    \ * 2]);\n            }\n        } else if digit == '3' {\n            for _ in\
    \ 0..num_repeats {\n                result.push_str", "    // We will map each\
    \ numeral to its value and write down the numbers in\n    // decreasing order\
    \ to obtain the result.\n    // Note: There are six possible cases, since the\
    \ integers are limited to\n    // three digits.\n    let mut num = number;\n \
    \   let mut result = String::new();\n    if num >= 1000 {\n        let roman_form\
    \ = \"m\".repeat((num / 1000) as usize);\n        result.push_str(&roman_form);\n\
    \        num = num % 1000;\n    }\n    if num >= 100 {\n        let roman_form\
    \ = if num >= 900 {\n            \"cm\"\n        } else if num >= 500 {\n    \
    \        \"d\"\n        } else if num >= 400 {\n            \"cd\"\n        }\
    \ else {\n            \"c\"\n        };\n        result.push_str(roman_form);\n\
    \        num = num % 100;\n    }\n    if num >= 10 {\n        let roman_form =\
    \ if num >= 90 {\n            \"xc\"\n        } else if num >= 50 {\n        \
    \    \"l\"\n        } else if num >= 40 {\n            \"xl\"\n        } else\
    \ {\n            \"x\"\n        };\n        result.push_str(roman_form);\n   \
    \     num = num % 10;\n    }\n    if num >= 1 {\n        let roman_form = if num\
    \ >= 9 {\n            \"ix\"\n        } else if num >= 5 {\n            \"v\"\n\
    \        } else if num >= 4 {\n            \"iv\"\n        } else {\n        \
    \    \"i\"\n        };\n        result.push_str(roman_form);\n    }\n    result",
  "    if number == 0 {\n        return String::from(\"\");\n    }\n\n    let mut\
    \ n = number;\n    let mut res = String::new();\n\n    let nums = [\n        (\"\
    m\", 1000),\n        (\"cm\", 900),\n        (\"d\", 500),\n        (\"cd\", 400),\n\
    \        (\"c\", 100),\n        (\"xc\", 90),\n        (\"l\", 50),\n        (\"\
    xl\", 40),\n        (\"x\", 10),\n        (\"ix\", 9),\n        (\"v\", 5),\n\
    \        (\"iv\", 4),\n        (\"i\", 1),\n    ];\n\n    for (ch, value) in nums.iter()\
    \ {\n        while n >= *value {\n            res.push_str(ch);\n            n\
    \ -= *value;\n        }\n    }\n\n    res", "    let mut out = String::new();\n\
    \    let mut value = number;\n    while value > 0 {\n        let letter = match\
    \ value {\n            1000...4000 => Some('m'),\n            500...1000 => Some('d'),\n\
    \            100...500 => Some('c'),\n            50...100 => Some('l'),\n   \
    \         10...50 => Some('x'),\n            5...10 => Some('v'),\n          \
    \  1...5 => Some('i'),\n            _ => None,\n        };\n        let (multiplier,\
    \ letter_value) = if let Some(letter) = letter {\n            match letter {\n\
    \                'm' => (value / 1000, 1000),\n                'd' => (value /\
    \ 500, 500),\n                'c' => (value / 100, 100),\n                'l'\
    \ => (value / 50, 50),\n                'x' => (value / 10, 10),\n           \
    \     'v' => (value / 5, 5),\n                'i' => (value / 1, 1),\n       \
    \         _ => (0, 0),\n            }\n        } else {\n            (0, 0)\n\
    \        };\n        for _ in 0..multiplier {\n            out.push(letter.unwrap());\n\
    \        }\n        value -= letter_value * multiplier;\n    }\n    out", "  \
    \  use roman_numerals::to_roman_numeral;\n    let roman = to_roman_numeral(number);\n\
    \    let mut result = String::new();\n    for c in roman.chars() {\n        result.push(c.to_lowercase().next().unwrap());\n\
    \    }\n    result", "    let roman_numerals = [\n        \"m\", \"cm\", \"d\"\
    , \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\",\n\
    \    ];\n    let decimal_numbers = [1000, 900, 500, 400, 100, 90, 50, 40, 10,\
    \ 9, 5, 4, 1];\n    let mut number = number;\n    let mut result = String::new();\n\
    \    for (i, num) in decimal_numbers.iter().enumerate() {\n        while number\
    \ >= *num {\n            result.push_str(roman_numerals[i]);\n            number\
    \ -= *num;\n        }\n    }\n    result", "    use std::collections::HashMap;\n\
    \    let mut roman_to_int: HashMap<&str, isize> = HashMap::new();\n    roman_to_int.insert(\"\
    m\", 1000);\n    roman_to_int.insert(\"cm\", 900);\n    roman_to_int.insert(\"\
    d\", 500);\n    roman_to_int.insert(\"cd\", 400);\n    roman_to_int.insert(\"\
    c\", 100);\n    roman_to_int.insert(\"xc\", 90);\n    roman_to_int.insert(\"l\"\
    , 50);\n    roman_to_int.insert(\"xl\", 40);\n    roman_to_int.insert(\"x\", 10);\n\
    \    roman_to_int.insert(\"ix\", 9);\n    roman_to_int.insert(\"v\", 5);\n   \
    \ roman_to_int.insert(\"iv\", 4);\n    roman_to_int.insert(\"i\", 1);\n\n    let\
    \ mut int_to_roman: HashMap<isize, &str> = HashMap::new();\n    int_to_roman.insert(1000,\
    \ \"m\");\n    int_to_roman.insert(900, \"cm\");\n    int_to_roman.insert(500,\
    \ \"d\");\n    int_to_roman.insert(400, \"cd\");\n    int_to_roman.insert(100,\
    \ \"c\");\n    int_to_roman.insert(90, \"xc\");\n    int_to_roman.insert(50, \"\
    l\");\n    int_to_roman.insert(40, \"xl\");\n    int_to_roman.insert(10, \"x\"\
    );\n    int_to_roman.insert(9, \"ix\");\n    int_to_roman.insert(5, \"v\");\n\
    \    int_to_roman.insert(4, \"iv\");\n    int_to_roman.insert(1, \"i\");\n\n \
    \   let mut num = number;\n    let mut res = String::new();\n    for (k, v) in\
    \ int_to_roman.iter() {\n        while num >= *k {\n            res.push_str(v);\n\
    \            num -=", "    let romans = [\"m\", \"cm\", \"d\", \"cd\", \"c\",\
    \ \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n    let numerals\
    \ = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    let mut res =\
    \ String::new();\n    let mut remainder = number;\n    for x in 0..romans.len()\
    \ {\n        while remainder >= numerals[x] {\n            res.push_str(romans[x]);\n\
    \            remainder -= numerals[x];\n        }\n    }\n    res", "    let thousands\
    \ = number / 1000;\n    let hundreds = (number % 1000) / 100;\n    let tens =\
    \ (number % 100) / 10;\n    let ones = number % 10;\n\n    let mut res = String::from(\"\
    \");\n\n    for _ in 0..thousands {\n        res.push('m');\n    }\n\n    res.push_str(&match\
    \ hundreds {\n        1 => \"c\",\n        2 => \"cc\",\n        3 => \"ccc\"\
    ,\n        4 => \"cd\",\n        5 => \"d\",\n        6 => \"dc\",\n        7\
    \ => \"dcc\",\n        8 => \"dccc\",\n        9 => \"cm\",\n        _ => \"\"\
    ,\n    });\n\n    res.push_str(&match tens {\n        1 => \"x\",\n        2 =>\
    \ \"xx\",\n        3 => \"xxx\",\n        4 => \"xl\",\n        5 => \"l\",\n\
    \        6 => \"lx\",\n        7 => \"lxx\",\n        8 => \"lxxx\",\n       \
    \ 9 => \"xc\",\n        _ => \"\",\n    });\n\n    res.push_str(&match ones {\n\
    \        1 => \"i\",\n        2 => \"ii\",\n        3 => \"iii\",\n        4 =>\
    \ \"iv\",\n        5 => \"v\",\n        6 => \"vi\",\n        7 => \"vii\",\n\
    \        8 => \"viii\",\n        9 => \"ix\",\n        _ => \"\",\n    });\n\n\
    \    res", "    let numerals = [\"i\", \"v\", \"x\", \"l\", \"c\", \"d\", \"m\"\
    ];\n    let mut s = String::new();\n    let mut magnitude = 0;\n    let mut remainder\
    \ = number;\n    while remainder > 0 {\n        let digit = remainder % 10;\n\
    \        if digit == 4 {\n            s.push_str(numerals[magnitude]);\n     \
    \       s.push_str(numerals[magnitude + 1]);\n        } else if digit == 9 {\n\
    \            s.push_str(numerals[magnitude]);\n            s.push_str(numerals[magnitude\
    \ + 2]);\n        } else {\n            if digit >= 5 {\n                s.push_str(numerals[magnitude\
    \ + 1]);\n                remainder -= 5;\n            }\n            while remainder\
    \ > 0 {\n                s.push_str(numerals[magnitude]);\n                remainder\
    \ -= 1;\n            }\n        }\n        magnitude += 2;\n        remainder\
    \ /= 10;\n    }\n    s", "    let mut roman = String::new();\n    let mut number\
    \ = number;\n    while number >= 1000 {\n        roman.push('m');\n        number\
    \ -= 1000;\n    }\n    if number >= 900 {\n        roman.push_str(\"cm\");\n \
    \       number -= 900;\n    }\n    if number >= 500 {\n        roman.push('d');\n\
    \        number -= 500;\n    }\n    if number >= 400 {\n        roman.push_str(\"\
    cd\");\n        number -= 400;\n    }\n    while number >= 100 {\n        roman.push('c');\n\
    \        number -= 100;\n    }\n    if number >= 90 {\n        roman.push_str(\"\
    xc\");\n        number -= 90;\n    }\n    if number >= 50 {\n        roman.push('l');\n\
    \        number -= 50;\n    }\n    if number >= 40 {\n        roman.push_str(\"\
    xl\");\n        number -= 40;\n    }\n    while number >= 10 {\n        roman.push('x');\n\
    \        number -= 10;\n    }\n    if number >= 9 {\n        roman.push_str(\"\
    ix\");\n        number -= 9;\n    }\n    if number >= 5 {\n        roman.push('v');\n\
    \        number -= 5;\n    }\n    if number >= 4 {\n        roman.push_str(\"\
    iv\");\n        number -= 4;\n    }\n    while number >= 1 {\n        roman.push('i');\n\
    \        number -= 1;\n    }\n    roman", "    let mut result = String::new();\n\
    \    let mut remaining = number;\n    while remaining >= 1000 {\n        result.push_str(\"\
    m\");\n        remaining -= 1000;\n    }\n    if remaining >= 900 {\n        result.push_str(\"\
    cm\");\n        remaining -= 900;\n    }\n    if remaining >= 500 {\n        result.push_str(\"\
    d\");\n        remaining -= 500;\n    }\n    if remaining >= 400 {\n        result.push_str(\"\
    cd\");\n        remaining -= 400;\n    }\n    while remaining >= 100 {\n     \
    \   result.push_str(\"c\");\n        remaining -= 100;\n    }\n    if remaining\
    \ >= 90 {\n        result.push_str(\"xc\");\n        remaining -= 90;\n    }\n\
    \    if remaining >= 50 {\n        result.push_str(\"l\");\n        remaining\
    \ -= 50;\n    }\n    if remaining >= 40 {\n        result.push_str(\"xl\");\n\
    \        remaining -= 40;\n    }\n    while remaining >= 10 {\n        result.push_str(\"\
    x\");\n        remaining -= 10;\n    }\n    if remaining >= 9 {\n        result.push_str(\"\
    ix\");\n        remaining -= 9;\n    }\n    if remaining >= 5 {\n        result.push_str(\"\
    v\");\n        remaining -= 5;\n    }\n    if remaining >= 4 {\n        result.push_str(\"\
    iv\");\n        remaining -= 4;\n    }\n    while remaining >= 1 {\n        result.push_str(\"\
    i\");\n        remaining -= 1;\n    }\n    result", "    let mut result = String::new();\n\
    \    if number < 1 || number > 1000 {\n        return result;\n    }\n    let\
    \ symbols = vec![\n        (1000, \"m\"),\n        (900, \"cm\"),\n        (500,\
    \ \"d\"),\n        (400, \"cd\"),\n        (100, \"c\"),\n        (90, \"xc\"\
    ),\n        (50, \"l\"),\n        (40, \"xl\"),\n        (10, \"x\"),\n      \
    \  (9, \"ix\"),\n        (5, \"v\"),\n        (4, \"iv\"),\n        (1, \"i\"\
    ),\n    ];\n    let mut num = number;\n    for (val, symbol) in symbols {\n  \
    \      while num >= val {\n            result.push_str(symbol);\n            num\
    \ -= val;\n        }\n    }\n    result", "    let units = [\"\", \"i\", \"ii\"\
    , \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\"];\n    let tens =\
    \ [\"\", \"x\", \"xx\", \"xxx\", \"xl\", \"l\", \"lx\", \"lxx\", \"lxxx\", \"\
    xc\"];\n    let hundreds = [\"\", \"c\", \"cc\", \"ccc\", \"cd\", \"d\", \"dc\"\
    , \"dcc\", \"dccc\", \"cm\"];\n    let thousands = [\"\", \"m\", \"mm\", \"mmm\"\
    ];\n\n    return format!(\"{}{}{}{}\",\n        thousands[(number / 1000) as usize],\n\
    \        hundreds[((number % 1000) / 100) as usize],\n        tens[((number %\
    \ 100) / 10) as usize],\n        units[(number % 10) as usize]);", "    let mut\
    \ num = number;\n    let mut roman = String::new();\n    while num >= 1_000 {\n\
    \        roman.push('m');\n        num -= 1_000;\n    }\n    if num >= 900 {\n\
    \        roman.push_str(\"cm\");\n        num -= 900;\n    }\n    if num >= 500\
    \ {\n        roman.push('d');\n        num -= 500;\n    }\n    if num >= 400 {\n\
    \        roman.push_str(\"cd\");\n        num -= 400;\n    }\n    while num >=\
    \ 100 {\n        roman.push('c');\n        num -= 100;\n    }\n    if num >= 90\
    \ {\n        roman.push_str(\"xc\");\n        num -= 90;\n    }\n    if num >=\
    \ 50 {\n        roman.push('l');\n        num -= 50;\n    }\n    if num >= 40\
    \ {\n        roman.push_str(\"xl\");\n        num -= 40;\n    }\n    while num\
    \ >= 10 {\n        roman.push('x');\n        num -= 10;\n    }\n    if num >=\
    \ 9 {\n        roman.push_str(\"ix\");\n        num -= 9;\n    }\n    if num >=\
    \ 5 {\n        roman.push('v');\n        num -= 5;\n    }\n    if num >= 4 {\n\
    \        roman.push_str(\"iv\");\n        num -= 4;\n    }\n    while num >= 1\
    \ {\n        roman.push('i');\n        num -= 1;\n    }\n    roman", "    let\
    \ values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    let roman\
    \ = [\n        \"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"\
    x\", \"ix\", \"v\", \"iv\", \"i\",\n    ];\n    let mut result = String::new();\n\
    \    let mut num = number;\n    for i in 0..values.len() {\n        while num\
    \ >= values[i] {\n            result.push_str(roman[i]);\n            num -= values[i];\n\
    \        }\n    }\n    result", "    let mut result = String::new();\n    let\
    \ mut num = number;\n    let one = vec![\"\",\"i\",\"ii\",\"iii\",\"iv\",\"v\"\
    ,\"vi\",\"vii\",\"viii\",\"ix\"];\n    let ten = vec![\"\",\"x\",\"xx\",\"xxx\"\
    ,\"xl\",\"l\",\"lx\",\"lxx\",\"lxxx\",\"xc\"];\n    let hundred = vec![\"\",\"\
    c\",\"cc\",\"ccc\",\"cd\",\"d\",\"dc\",\"dcc\",\"dccc\",\"cm\"];\n    if num ==\
    \ 0 {\n        return \"\".to_string();\n    }\n    result.push_str(hundred[(num/100)\
    \ as usize]);\n    num = num%100;\n    result.push_str(ten[(num/10) as usize]);\n\
    \    num = num%10;\n    result.push_str(one[num as usize]);\n    result", "  \
    \  let mut rem = number;\n    let mut out = String::new();\n    let mini_table\
    \ = get_mini_table();\n    for (key, value) in mini_table.iter().rev() {\n   \
    \     let quotient = rem / key;\n        rem = rem % key;\n        if quotient\
    \ > 0 {\n            for _ in 0..quotient {\n                out.push_str(value);\n\
    \            }\n        }\n    }\n    out", "    let (mut output, mut left) =\
    \ (String::new(), number);\n    loop {\n        let (append, remainder) = match\
    \ left {\n            1 => (String::from(\"i\"), 0),\n            2 => (String::from(\"\
    ii\"), 0),\n            3 => (String::from(\"iii\"), 0),\n            4 => (String::from(\"\
    iv\"), 0),\n            5 => (String::from(\"v\"), 0),\n            6 => (String::from(\"\
    vi\"), 0),\n            7 => (String::from(\"vii\"), 0),\n            8 => (String::from(\"\
    viii\"), 0),\n            9 => (String::from(\"ix\"), 0),\n            10 => (String::from(\"\
    x\"), 0),\n            20 => (String::from(\"xx\"), 0),\n            30 => (String::from(\"\
    xxx\"), 0),\n            40 => (String::from(\"xl\"), 0),\n            50 => (String::from(\"\
    l\"), 0),\n            60 => (String::from(\"lx\"), 0),\n            70 => (String::from(\"\
    lxx\"), 0),\n            80 => (String::from(\"lxxx\"), 0),\n            90 =>\
    \ (String::from(\"xc\"), 0),\n            100 => (String::from(\"c\"), 0),\n \
    \           200 => (String::from(\"cc\"), 0),\n            300 => (String::from(\"\
    ccc\"), 0),\n            400 => (String::from(\"cd\"), 0),\n            500 =>\
    \ (String::from(\"d\"), 0),\n            600 => (String::from(\"dc\"), 0),\n \
    \           700 => (String::from(\"dcc\"), 0),\n            800 => (String::from(\"\
    dccc\"), 0),\n            900 => (String::from(\"cm\"), 0),\n            1000\
    \ => (String::from(\"m\"), 0),\n            0 => (String::new(), 0),\n       \
    \     1000..=2000 => (String::from(\"m\"), left - 1000),\n            2000..=3000\
    \ => (String::from(\"mm\"), left - 2000),\n            3000..=4000 => (String::from(\"\
    mmm\"), left - 3000),\n            4000..=5000 => (String::from(\"mv\"), left\
    \ - 4000),\n            5000..=6000 => (String::from(\"v\"), left - 5000),\n \
    \          ", "    let roman_mappings = [\n        (1000, \"m\"),\n        (900,\
    \ \"cm\"),\n        (500, \"d\"),\n        (400, \"cd\"),\n        (100, \"c\"\
    ),\n        (90, \"xc\"),\n        (50, \"l\"),\n        (40, \"xl\"),\n     \
    \   (10, \"x\"),\n        (9, \"ix\"),\n        (5, \"v\"),\n        (4, \"iv\"\
    ),\n        (1, \"i\"),\n    ];\n\n    let mut x = number;\n    let mut result\
    \ = String::new();\n\n    for (arabic, roman) in roman_mappings.iter() {\n   \
    \     while x >= *arabic {\n            result.push_str(&roman);\n           \
    \ x -= arabic;\n        }\n    }\n\n    result", "    let mut string = String::new();\n\
    \    let mut num = number;\n    while num > 0 {\n        if num >= 1000 {\n  \
    \          string.push_str(\"m\");\n            num -= 1000;\n        } else if\
    \ num >= 900 {\n            string.push_str(\"cm\");\n            num -= 900;\n\
    \        } else if num >= 500 {\n            string.push_str(\"d\");\n       \
    \     num -= 500;\n        } else if num >= 400 {\n            string.push_str(\"\
    cd\");\n            num -= 400;\n        } else if num >= 100 {\n            string.push_str(\"\
    c\");\n            num -= 100;\n        } else if num >= 90 {\n            string.push_str(\"\
    xc\");\n            num -= 90;\n        } else if num >= 50 {\n            string.push_str(\"\
    l\");\n            num -= 50;\n        } else if num >= 40 {\n            string.push_str(\"\
    xl\");\n            num -= 40;\n        } else if num >= 10 {\n            string.push_str(\"\
    x\");\n            num -= 10;\n        } else if num >= 9 {\n            string.push_str(\"\
    ix\");\n            num -= 9;\n        } else if num >= 5 {\n            string.push_str(\"\
    v\");\n            num -= 5;\n        } else if num >= 4 {\n            string.push_str(\"\
    iv\");\n            num -= 4;\n        } else if num >= 1 {\n            string.push_str(\"\
    i\");\n            num -= 1;\n        }\n    }\n    string", "    let mut num\
    \ = number;\n    let mut s = String::new();\n    while num >= 1000 {\n       \
    \ s.push_str(\"m\");\n        num -= 1000;\n    }\n    if num >= 900 {\n     \
    \   s.push_str(\"cm\");\n        num -= 900;\n    }\n    if num >= 500 {\n   \
    \     s.push_str(\"d\");\n        num -= 500;\n    }\n    if num >= 400 {\n  \
    \      s.push_str(\"cd\");\n        num -= 400;\n    }\n    while num >= 100 {\n\
    \        s.push_str(\"c\");\n        num -= 100;\n    }\n    if num >= 90 {\n\
    \        s.push_str(\"xc\");\n        num -= 90;\n    }\n    if num >= 50 {\n\
    \        s.push_str(\"l\");\n        num -= 50;\n    }\n    if num >= 40 {\n \
    \       s.push_str(\"xl\");\n        num -= 40;\n    }\n    while num >= 10 {\n\
    \        s.push_str(\"x\");\n        num -= 10;\n    }\n    if num >= 9 {\n  \
    \      s.push_str(\"ix\");\n        num -= 9;\n    }\n    if num >= 5 {\n    \
    \    s.push_str(\"v\");\n        num -= 5;\n    }\n    if num >= 4 {\n       \
    \ s.push_str(\"iv\");\n        num -= 4;\n    }\n    while num >= 1 {\n      \
    \  s.push_str(\"i\");\n        num -= 1;\n    }\n    s", "    let digits = number_to_digits(number);\n\
    \    let mut roman = String::new();\n    let symbols = vec![\n        (\"I\",\
    \ \"V\"),\n        (\"X\", \"L\"),\n        (\"C\", \"D\"),\n        (\"M\", \"\
    V\u0305\"),\n    ];\n    let mut symbol_iter = symbols.iter();\n    let mut thousand_count\
    \ = 0;\n    for digit in digits {\n        if digit == 0 {\n            thousand_count\
    \ += 1;\n            continue;\n        }\n        let (one, five, ten) = {\n\
    \            let (one, five) = symbol_iter.next().unwrap();\n            let ten\
    \ = symbol_iter.next().unwrap().0;\n            (one, five, ten)\n        };\n\
    \        match digit {\n            1 => roman.push_str(one),\n            2 =>\
    \ roman.push_str(&format!(\"{}{}\", one, one)),\n            3 => roman.push_str(&format!(\"\
    {}{}{}\", one, one, one)),\n            4 => roman.push_str(&format!(\"{}{}\"\
    , one, five)),\n            5 => roman.push_str(five),\n            6 => roman.push_str(&format!(\"\
    {}{}\", five, one)),\n            7 => roman.push_str(&format!(\"{}{}{}\", five,\
    \ one, one)),\n            8 => roman.push_str(&format!(\"{}{}{}{}\", five, one,\
    \ one, one)),\n            9 => roman.push_str(&format!(\"{}{}\", one, ten)),\n\
    \            _ => {\n                panic!(\"Impossible!\");\n            }\n\
    \        }\n    }\n    for _ in 0..thousand_count {\n        roman.push_str(\"\
    M\");\n    }\n    roman", "    let mut num = number;\n    let mut ret = String::new();\n\
    \    let table = vec![\n        (1000, \"m\"),\n        (900, \"cm\"),\n     \
    \   (500, \"d\"),\n        (400, \"cd\"),\n        (100, \"c\"),\n        (90,\
    \ \"xc\"),\n        (50, \"l\"),\n        (40, \"xl\"),\n        (10, \"x\"),\n\
    \        (9, \"ix\"),\n        (5, \"v\"),\n        (4, \"iv\"),\n        (1,\
    \ \"i\"),\n    ];\n    for &(divisor, roman) in table.iter() {\n        while\
    \ num >= divisor {\n            ret.push_str(roman);\n            num -= divisor;\n\
    \        }\n    }\n    ret", "    let mut result = String::new();\n    let mut\
    \ rest = number;\n    while rest >= 1000 {\n        result.push_str(\"m\");\n\
    \        rest -= 1000;\n    }\n    if rest >= 900 {\n        result.push_str(\"\
    cm\");\n        rest -= 900;\n    }\n    if rest >= 500 {\n        result.push_str(\"\
    d\");\n        rest -= 500;\n    }\n    if rest >= 400 {\n        result.push_str(\"\
    cd\");\n        rest -= 400;\n    }\n    while rest >= 100 {\n        result.push_str(\"\
    c\");\n        rest -= 100;\n    }\n    if rest >= 90 {\n        result.push_str(\"\
    xc\");\n        rest -= 90;\n    }\n    if rest >= 50 {\n        result.push_str(\"\
    l\");\n        rest -= 50;\n    }\n    if rest >= 40 {\n        result.push_str(\"\
    xl\");\n        rest -= 40;\n    }\n    while rest >= 10 {\n        result.push_str(\"\
    x\");\n        rest -= 10;\n    }\n    if rest >= 9 {\n        result.push_str(\"\
    ix\");\n        rest -= 9;\n    }\n    if rest >= 5 {\n        result.push_str(\"\
    v\");\n        rest -= 5;\n    }\n    if rest >= 4 {\n        result.push_str(\"\
    iv\");\n        rest -= 4;\n    }\n    while rest >= 1 {\n        result.push_str(\"\
    i\");\n        rest -= 1;\n    }\n    result", "    if number < 1 || number >\
    \ 1000 {\n        panic!(\"Please enter a number from 1 to 1000.\");\n    }\n\
    \    let mut remaining = number;\n    let mut result = String::new();\n    let\
    \ roman_digits = vec![\n        (\"c\", 100),\n        (\"x\", 10),\n        (\"\
    i\", 1),\n    ];\n    for (roman_digit, decimal_value) in roman_digits.iter()\
    \ {\n        let result_digit = remaining / decimal_value;\n        remaining\
    \ %= decimal_value;\n        result.push_str(&result_digit.to_string().repeat(*roman_digit));\n\
    \    }\n    // Add \"m\"s as necessary.\n    result.push_str(&(number / 1000).to_string().repeat(\"\
    m\"));\n    result", "    if number > 1000 || number < 1 {\n        panic!(\"\
    Number too large or too small.\");\n    }\n    let hundreds = number / 100;\n\
    \    let tens = (number - hundreds * 100) / 10;\n    let ones = number - hundreds\
    \ * 100 - tens * 10;\n    let mut answer = \"\".to_string();\n    for _ in 0..hundreds\
    \ {\n        answer.push('c');\n    }\n    for _ in 0..tens {\n        answer.push('x');\n\
    \    }\n    for _ in 0..ones {\n        answer.push('i');\n    }\n    answer",
  "    let roman_numerals = &[\n        (\"M\", 1000),\n        (\"CM\", 900),\n \
    \       (\"D\", 500),\n        (\"CD\", 400),\n        (\"C\", 100),\n       \
    \ (\"XC\", 90),\n        (\"L\", 50),\n        (\"XL\", 40),\n        (\"X\",\
    \ 10),\n        (\"IX\", 9),\n        (\"V\", 5),\n        (\"IV\", 4),\n    \
    \    (\"I\", 1),\n    ];\n\n    let mut result = String::new();\n    let mut number\
    \ = number;\n\n    for (roman, arabic) in roman_numerals {\n        while number\
    \ >= *arabic {\n            result.push_str(roman);\n            number -= *arabic;\n\
    \        }\n    }\n\n    result", "    let mut result = String::new();\n    let\
    \ roman_numerals = vec![(\"M\", 1000), (\"CM\", 900), (\"D\", 500), (\"CD\", 400),\n\
    \                              (\"C\", 100), (\"XC\", 90), (\"L\", 50), (\"XL\"\
    , 40),\n                              (\"X\", 10), (\"IX\", 9), (\"V\", 5), (\"\
    IV\", 4), (\"I\", 1)];\n    let mut n = number;\n    for (numeral, value) in roman_numerals\
    \ {\n        while n >= *value {\n            result.push_str(numeral);\n    \
    \        n -= *value;\n        }\n    }\n    result", "    if number == 0 {\n\
    \        String::from(\"\")\n    } else if number >= 1000 {\n        String::from(\"\
    m\") + &int_to_mini_roman(number - 1000)\n    } else if number >= 900 {\n    \
    \    String::from(\"cm\") + &int_to_mini_roman(number - 900)\n    } else if number\
    \ >= 500 {\n        String::from(\"d\") + &int_to_mini_roman(number - 500)\n \
    \   } else if number >= 400 {\n        String::from(\"cd\") + &int_to_mini_roman(number\
    \ - 400)\n    } else if number >= 100 {\n        String::from(\"c\") + &int_to_mini_roman(number\
    \ - 100)\n    } else if number >= 90 {\n        String::from(\"xc\") + &int_to_mini_roman(number\
    \ - 90)\n    } else if number >= 50 {\n        String::from(\"l\") + &int_to_mini_roman(number\
    \ - 50)\n    } else if number >= 40 {\n        String::from(\"xl\") + &int_to_mini_roman(number\
    \ - 40)\n    } else if number >= 10 {\n        String::from(\"x\") + &int_to_mini_roman(number\
    \ - 10)\n    } else if number >= 9 {\n        String::from(\"ix\") + &int_to_mini_roman(number\
    \ - 9)\n    } else if number >= 5 {\n        String::from(\"v\") + &int_to_mini_roman(number\
    \ - 5)\n    } else if number >= 4 {\n        String::from(\"iv\") + &int_to_mini_roman(number\
    \ - 4)\n    } else if number >= 1 {\n        String::from(\"i\") + &int_to_mini_roman(number\
    \ - 1)\n    } else {\n        panic!(\"Number was less than 0\");\n    }", " \
    \   let mut result = String::new();\n    let units = number % 10;\n    result\
    \ += &int_to_roman_digit(units, \"I\", \"V\", \"X\");\n    let tens = number /\
    \ 10 % 10;\n    result += &int_to_roman_digit(tens, \"X\", \"L\", \"C\");\n  \
    \  let hundreds = number / 100 % 10;\n    result += &int_to_roman_digit(hundreds,\
    \ \"C\", \"D\", \"M\");\n    let thousands = number / 1000 % 10;\n    result +=\
    \ &int_to_roman_digit(thousands, \"M\", \"\", \"\");\n    result", "    // Test\
    \ cases\n    // assert_eq!(int_to_mini_roman(1), \"i\");\n    // assert_eq!(int_to_mini_roman(2),\
    \ \"ii\");\n    // assert_eq!(int_to_mini_roman(3), \"iii\");\n    // assert_eq!(int_to_mini_roman(4),\
    \ \"iv\");\n    // assert_eq!(int_to_mini_roman(5), \"v\");\n    // assert_eq!(int_to_mini_roman(6),\
    \ \"vi\");\n    // assert_eq!(int_to_mini_roman(7), \"vii\");\n    // assert_eq!(int_to_mini_roman(8),\
    \ \"viii\");\n    // assert_eq!(int_to_mini_roman(9), \"ix\");\n    // assert_eq!(int_to_mini_roman(10),\
    \ \"x\");\n    // assert_eq!(int_to_mini_roman(11), \"xi\");\n    // assert_eq!(int_to_mini_roman(12),\
    \ \"xii\");\n    // assert_eq!(int_to_mini_roman(13), \"xiii\");\n    // assert_eq!(int_to_mini_roman(14),\
    \ \"xiv\");\n    // assert_eq!(int_to_mini_roman(15), \"xv\");\n    // assert_eq!(int_to_mini_roman(16),\
    \ \"xvi\");\n    // assert_eq!(int_to_mini_roman(17), \"xvii\");\n    // assert_eq!(int_to_mini_roman(18),\
    \ \"xviii\");\n    // assert_eq!(int_to_mini_roman(19), \"xix\");\n    // assert_eq!(int_to_mini_roman(20),\
    \ \"xx\");\n    // assert_eq!(int_to_mini_roman(21), \"xxi\");\n    // assert_eq!(int_to_mini_roman(22),\
    \ \"xxii\");\n    // assert_eq!(int_to_mini_roman(23), \"xxiii\");\n    // assert_eq!(int",
  "    let mut number = number;\n    let mut result = String::new();\n    while number\
    \ >= 1000 {\n        result.push_str(\"m\");\n        number -= 1000;\n    }\n\
    \    if number >= 900 {\n        result.push_str(\"cm\");\n        number -= 900;\n\
    \    }\n    if number >= 500 {\n        result.push_str(\"d\");\n        number\
    \ -= 500;\n    }\n    if number >= 400 {\n        result.push_str(\"cd\");\n \
    \       number -= 400;\n    }\n    while number >= 100 {\n        result.push_str(\"\
    c\");\n        number -= 100;\n    }\n    if number >= 90 {\n        result.push_str(\"\
    xc\");\n        number -= 90;\n    }\n    if number >= 50 {\n        result.push_str(\"\
    l\");\n        number -= 50;\n    }\n    if number >= 40 {\n        result.push_str(\"\
    xl\");\n        number -= 40;\n    }\n    while number >= 10 {\n        result.push_str(\"\
    x\");\n        number -= 10;\n    }\n    if number >= 9 {\n        result.push_str(\"\
    ix\");\n        number -= 9;\n    }\n    if number >= 5 {\n        result.push_str(\"\
    v\");\n        number -= 5;\n    }\n    if number >= 4 {\n        result.push_str(\"\
    iv\");\n        number -= 4;\n    }\n    while number >= 1 {\n        result.push_str(\"\
    i\");\n        number -= 1;\n    }\n    result", "    let mut result = String::new();\n\
    \    let numerals = vec![\n        (\"m\", 1000),\n        (\"d\", 500),\n   \
    \     (\"c\", 100),\n        (\"l\", 50),\n        (\"x\", 10),\n        (\"v\"\
    , 5),\n        (\"i\", 1),\n    ];\n    let mut n = number;\n    for &(literal,\
    \ value) in numerals.iter() {\n        result.push_str(&literal.repeat(n as usize\
    \ / value));\n        n %= value;\n    }\n    result", "    let minis = vec![\"\
    i\", \"iv\", \"v\", \"ix\", \"x\", \"xl\", \"l\", \"xc\", \"c\", \"cd\", \"d\"\
    , \"cm\", \"m\"];\n    let minis_number = vec![1, 4, 5, 9, 10, 40, 50, 90, 100,\
    \ 400, 500, 900, 1000];\n    let mut roman_number = String::new();\n    let mut\
    \ a = number;\n    let mut i = minis_number.len() - 1;\n    while a > 0 {\n  \
    \      while a >= minis_number[i] {\n            roman_number.push_str(minis[i]);\n\
    \            a -= minis_number[i];\n        }\n        i -= 1;\n    }\n    roman_number",
  "    let thousands = (number / 1000) % 10;\n    let hundreds = (number / 100) %\
    \ 10;\n    let tens = (number / 10) % 10;\n    let ones = number % 10;\n\n   \
    \ let mut result = String::new();\n\n    for _ in 0..thousands {\n        result.push('m');\n\
    \    }\n\n    if hundreds == 9 {\n        result.push_str(\"cm\");\n    } else\
    \ if hundreds == 4 {\n        result.push_str(\"cd\");\n    } else {\n       \
    \ if hundreds >= 5 {\n            result.push('d');\n        }\n        for _\
    \ in 0..(hundreds % 5) {\n            result.push('c');\n        }\n    }\n\n\
    \    if tens == 9 {\n        result.push_str(\"xc\");\n    } else if tens == 4\
    \ {\n        result.push_str(\"xl\");\n    } else {\n        if tens >= 5 {\n\
    \            result.push('l');\n        }\n        for _ in 0..(tens % 5) {\n\
    \            result.push('x');\n        }\n    }\n\n    if ones == 9 {\n     \
    \   result.push_str(\"ix\");\n    } else if ones == 4 {\n        result.push_str(\"\
    iv\");\n    } else {\n        if ones >= 5 {\n            result.push('v');\n\
    \        }\n        for _ in 0..(ones % 5) {\n            result.push('i');\n\
    \        }\n    }\n\n    result", "    use std::collections::HashMap;\n    let\
    \ mut d = HashMap::new();\n    d.insert(1, \"i\");\n    d.insert(4, \"iv\");\n\
    \    d.insert(5, \"v\");\n    d.insert(9, \"ix\");\n    d.insert(10, \"x\");\n\
    \    d.insert(40, \"xl\");\n    d.insert(50, \"l\");\n    d.insert(90, \"xc\"\
    );\n    d.insert(100, \"c\");\n    d.insert(400, \"cd\");\n    d.insert(500, \"\
    d\");\n    d.insert(900, \"cm\");\n    d.insert(1000, \"m\");\n\n    let mut keys:\
    \ Vec<isize> = d.keys().map(|k| *k).collect();\n    keys.sort();\n    keys.reverse();\n\
    \n    let mut n = number;\n    let mut result = String::new();\n    while n >\
    \ 0 {\n        let mut x = 1;\n        while x < n {\n            x *= 10;\n \
    \       }\n        while x > n {\n            x /= 10;\n        }\n        let\
    \ m = n / x;\n        let mut roman = String::new();\n        let mut i = 0;\n\
    \        while i < m {\n            roman.push_str(d.get(&x).unwrap());\n    \
    \        i += 1;\n        }\n        result.push_str(&roman);\n        n -= m\
    \ * x;\n    }\n    result", "    let mut number = number;\n    let mut roman_numeral\
    \ = String::new();\n    let roman_numerals = vec![\n        (\"i\", 1),\n    \
    \    (\"iv\", 4),\n        (\"v\", 5),\n        (\"ix\", 9),\n        (\"x\",\
    \ 10),\n        (\"xl\", 40),\n        (\"l\", 50),\n        (\"xc\", 90),\n \
    \       (\"c\", 100),\n        (\"cd\", 400),\n        (\"d\", 500),\n       \
    \ (\"cm\", 900),\n        (\"m\", 1000),\n    ];\n\n    for n in roman_numerals.iter().rev()\
    \ {\n        while number >= n.1 {\n            roman_numeral.push_str(n.0);\n\
    \            number -= n.1;\n        }\n    }\n\n    roman_numeral", "    let\
    \ mut roman = String::new();\n    let mut number = number;\n    let mut alph =\
    \ vec![('I', 1), ('V', 5), ('X', 10), ('L', 50), ('C', 100), ('D', 500), ('M',\
    \ 1000)];\n    while number > 0 {\n        for i in 0..7 {\n            let (letter,\
    \ num) = alph[i];\n            if number >= num {\n                roman.push(letter);\n\
    \                number -= num;\n            }\n        }\n    }\n    roman",
  "    let units = [\"i\", \"v\", \"x\"];\n    let tens = [\"x\", \"l\", \"c\"];\n\
    \    let hundreds = [\"c\", \"d\", \"m\"];\n    let thousands = [\"m\"];\n\n \
    \   let unit = number % 10;\n    let ten = number % 100 / 10;\n    let hundred\
    \ = number % 1000 / 100;\n    let thousand = number / 1000;\n\n    let mut result\
    \ = String::new();\n\n    if thousand > 0 {\n        result.push_str(thousands[0]);\n\
    \    }\n\n    if hundred > 0 {\n        result.push_str(hundreds[0]);\n    }\n\
    \n    if ten > 0 {\n        result.push_str(tens[0]);\n    }\n\n    if unit >\
    \ 0 {\n        result.push_str(units[0]);\n    }\n\n    result", "    if number\
    \ < 1 || number > 1000 {\n        panic!(\"number must be in the range [1-1000]\"\
    );\n    }\n\n    let hundreds = \"c\".repeat((number / 100) as usize);\n    let\
    \ tens = match number % 100 / 10 {\n        0 => \"\".to_string(),\n        1\
    \ => \"x\".to_string(),\n        2 => \"xx\".to_string(),\n        3 => \"xxx\"\
    .to_string(),\n        4 => \"xl\".to_string(),\n        5 => \"l\".to_string(),\n\
    \        6 => \"lx\".to_string(),\n        7 => \"lxx\".to_string(),\n       \
    \ 8 => \"lxxx\".to_string(),\n        9 => \"xc\".to_string(),\n        _ => panic!(\"\
    unexpected number of tens\"),\n    };\n    let ones = match number % 10 {\n  \
    \      0 => \"\".to_string(),\n        1 => \"i\".to_string(),\n        2 => \"\
    ii\".to_string(),\n        3 => \"iii\".to_string(),\n        4 => \"iv\".to_string(),\n\
    \        5 => \"v\".to_string(),\n        6 => \"vi\".to_string(),\n        7\
    \ => \"vii\".to_string(),\n        8 => \"viii\".to_string(),\n        9 => \"\
    ix\".to_string(),\n        _ => panic!(\"unexpected number of ones\"),\n    };\n\
    \n    format!(\"{}{}{}\", hundreds, tens, ones)", "    let mut result = String::new();\n\
    \    if number == 1000 {\n        result.push_str(\"m\");\n    } else if number\
    \ > 900 {\n        result.push_str(\"cm\");\n    } else if number > 500 {\n  \
    \      result.push_str(\"d\");\n    } else if number > 400 {\n        result.push_str(\"\
    cd\");\n    } else if number > 100 {\n        result.push_str(\"c\");\n    } else\
    \ if number > 90 {\n        result.push_str(\"xc\");\n    } else if number > 50\
    \ {\n        result.push_str(\"l\");\n    } else if number > 40 {\n        result.push_str(\"\
    xl\");\n    } else if number > 10 {\n        result.push_str(\"x\");\n    } else\
    \ if number > 9 {\n        result.push_str(\"ix\");\n    } else if number > 5\
    \ {\n        result.push_str(\"v\");\n    } else if number > 4 {\n        result.push_str(\"\
    iv\");\n    } else if number > 1 {\n        result.push_str(\"i\");\n    } else\
    \ if number == 1 {\n        result.push_str(\"i\");\n    }\n    result", "   \
    \ let mut number = number;\n    let mut result = String::new();\n    let mut numerals\
    \ = vec![\n        (10, \"x\"),\n        (9, \"ix\"),\n        (5, \"v\"),\n \
    \       (4, \"iv\"),\n        (1, \"i\"),\n    ];\n\n    for (value, numeral)\
    \ in numerals.iter() {\n        while number >= *value {\n            result.push_str(numeral);\n\
    \            number -= value;\n        }\n    }\n\n    result", "    let res =\
    \ match number {\n        1 => \"i\",\n        2 => \"ii\",\n        3 => \"iii\"\
    ,\n        4 => \"iv\",\n        5 => \"v\",\n        6 => \"vi\",\n        7\
    \ => \"vii\",\n        8 => \"viii\",\n        9 => \"ix\",\n        10 => \"\
    x\",\n        _ => panic!(\"Sorry, I can only handle 1-10 for this one\"),\n \
    \   };\n    res.to_string()", "    let mut s = String::from(\"\");\n    let romans\
    \ = [\n        (1, 'i'),\n        (4, 'v'),\n        (5, 'v'),\n        (9, 'x'),\n\
    \        (10, 'x'),\n        (40, 'l'),\n        (50, 'l'),\n        (90, 'c'),\n\
    \        (100, 'c'),\n        (400, 'd'),\n        (500, 'd'),\n        (900,\
    \ 'm'),\n        (1000, 'm'),\n    ];\n    let len = romans.len();\n    for i\
    \ in 0..len {\n        if number == romans[i].0 {\n            return format!(\"\
    {}\", romans[i].1);\n        }\n    }\n    if number == 0 {\n        return String::from(\"\
    \");\n    }\n    let mut i = len - 1;\n    while i >= 0 {\n        if number >=\
    \ romans[i].0 {\n            s.push(romans[i].1);\n            number -= romans[i].0;\n\
    \            return format!(\"{}{}\", s, int_to_mini_roman(number));\n       \
    \ }\n        i -= 1;\n    }\n    s", "    let thousands = number / 1000;\n   \
    \ let hundreds = (number % 1000) / 100;\n    let tens = (number % 100) / 10;\n\
    \    let ones = number % 10;\n\n    let mut string = String::new();\n\n    for\
    \ _ in 0..thousands {\n        string.push('m');\n    }\n\n    if hundreds ==\
    \ 9 {\n        string.push_str(\"cm\");\n    } else if hundreds == 4 {\n     \
    \   string.push_str(\"cd\");\n    } else {\n        if hundreds >= 5 {\n     \
    \       string.push('d');\n        }\n        for _ in 0..(hundreds % 5) {\n \
    \           string.push('c');\n        }\n    }\n\n    if tens == 9 {\n      \
    \  string.push_str(\"xc\");\n    } else if tens == 4 {\n        string.push_str(\"\
    xl\");\n    } else {\n        if tens >= 5 {\n            string.push('l');\n\
    \        }\n        for _ in 0..(tens % 5) {\n            string.push('x');\n\
    \        }\n    }\n\n    if ones == 9 {\n        string.push_str(\"ix\");\n  \
    \  } else if ones == 4 {\n        string.push_str(\"iv\");\n    } else {\n   \
    \     if ones >= 5 {\n            string.push('v');\n        }\n        for _\
    \ in 0..(ones % 5) {\n            string.push('i');\n        }\n    }\n\n    string",
  "    let roman = vec![\n        (\"m\", 1000),\n        (\"d\", 500),\n        (\"\
    c\", 100),\n        (\"l\", 50),\n        (\"x\", 10),\n        (\"v\", 5),\n\
    \        (\"i\", 1),\n    ];\n\n    let mut remainder = number;\n    let mut answer\
    \ = String::new();\n\n    for &(letter, val) in roman.iter() {\n        let quotient\
    \ = remainder / val;\n        for _ in 0..quotient {\n            answer.push_str(letter);\n\
    \        }\n        remainder = remainder % val;\n    }\n\n    return answer;",
  "    let mut number = number;\n    let mut ret = String::new();\n    let numbers\
    \ = vec![1,4,5,9,10,40,50,90,100,400,500,900,1000];\n    let numerals = vec![\"\
    i\",\"iv\",\"v\",\"ix\",\"x\",\"xl\",\"l\",\"xc\",\"c\",\"cd\",\"d\",\"cm\",\"\
    m\"];\n    let mut i = numerals.len() - 1;\n    while number > 0 {\n        while\
    \ numbers[i] > number {\n            i -= 1;\n        }\n        number -= numbers[i];\n\
    \        ret.push_str(numerals[i]);\n    }\n    ret", "    if number < 1 || number\
    \ > 1000 {\n        panic!(\"ERROR: The number {} is not in the range from 1 to\
    \ 1000!\", number);\n    }\n    let mut remainder = number;\n    let mut roman_string\
    \ = String::from(\"\");\n    for roman_letter in ROMAN_NUMERAL_SINGLE_LETTERS.iter().rev()\
    \ {\n        let divisor = roman_letter.0;\n        let letter = roman_letter.1;\n\
    \        while remainder >= divisor {\n            roman_string.push_str(letter);\n\
    \            remainder -= divisor;\n        }\n    }\n    roman_string", "   \
    \ // I don't want to write this code.\n    if number <= 0 || number > 1000 {\n\
    \        return String::new();\n    }\n\n    let mut roman = String::new();\n\
    \    for (digit, roman_char) in DIGITS.iter().zip(ROMAN_CHARS.iter()) {\n    \
    \    let num_digits = number / digit;\n        if num_digits > 0 {\n         \
    \   for _ in 0..num_digits {\n                roman.push(*roman_char);\n     \
    \       }\n        }\n        number %= digit;\n    }\n    roman", "    let symbols\
    \ = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\"\
    , \"v\", \"iv\", \"i\"];\n    let values = [1000, 900, 500, 400, 100, 90, 50,\
    \ 40, 10, 9, 5, 4, 1];\n    let mut result = String::new();\n    let mut num =\
    \ number;\n    for (i, &value) in values.iter().enumerate() {\n        while num\
    \ >= value {\n            result.push_str(symbols[i]);\n            num -= value;\n\
    \        }\n    }\n    result", "    let mut mini_roman: String = String::new();\n\
    \    let mut num: isize = number;\n    while num >= 1000 {\n        mini_roman.push_str(\"\
    m\");\n        num -= 1000;\n    }\n    while num >= 500 {\n        mini_roman.push_str(\"\
    d\");\n        num -= 500;\n    }\n    while num >= 100 {\n        mini_roman.push_str(\"\
    c\");\n        num -= 100;\n    }\n    while num >= 50 {\n        mini_roman.push_str(\"\
    l\");\n        num -= 50;\n    }\n    while num >= 10 {\n        mini_roman.push_str(\"\
    x\");\n        num -= 10;\n    }\n    while num >= 5 {\n        mini_roman.push_str(\"\
    v\");\n        num -= 5;\n    }\n    while num >= 1 {\n        mini_roman.push_str(\"\
    i\");\n        num -= 1;\n    }\n    mini_roman", "    let mut number = number;\n\
    \    let mut output = String::new();\n    if number >= 1000 {\n        number\
    \ -= 1000;\n        output.push_str(\"m\");\n    }\n    if number >= 900 {\n \
    \       number -= 900;\n        output.push_str(\"cm\");\n    }\n    if number\
    \ >= 500 {\n        number -= 500;\n        output.push_str(\"d\");\n    }\n \
    \   if number >= 400 {\n        number -= 400;\n        output.push_str(\"cd\"\
    );\n    }\n    if number >= 100 {\n        number -= 100;\n        output.push_str(\"\
    c\");\n    }\n    if number >= 90 {\n        number -= 90;\n        output.push_str(\"\
    xc\");\n    }\n    if number >= 50 {\n        number -= 50;\n        output.push_str(\"\
    l\");\n    }\n    if number >= 40 {\n        number -= 40;\n        output.push_str(\"\
    xl\");\n    }\n    if number >= 10 {\n        number -= 10;\n        output.push_str(\"\
    x\");\n    }\n    if number >= 9 {\n        number -= 9;\n        output.push_str(\"\
    ix\");\n    }\n    if number >= 5 {\n        number -= 5;\n        output.push_str(\"\
    v\");\n    }\n    if number >= 4 {\n        number -= 4;\n        output.push_str(\"\
    iv\");\n    }\n    if number >= 1 {\n        number -= 1;\n        output.push_str(\"\
    i\");\n    }\n    output", "    // let mut number = number;\n    let mut result\
    \ = String::from(\"\");\n    let numerals = [\"m\", \"cm\", \"d\", \"cd\", \"\
    c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n    let values\
    \ = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    let mut index\
    \ = 0;\n    while number > 0 {\n        while values[index] > number {\n     \
    \       index += 1;\n        }\n        // if number < values[index] {\n     \
    \   //     index += 1;\n        // }\n        result.push_str(numerals[index]);\n\
    \        number -= values[index];\n    }\n    result", "    let mut iter = number;\n\
    \    let mut ret = String::from(\"\");\n    let mini_roman = [\n        (\"m\"\
    , 1000),\n        (\"d\", 500),\n        (\"c\", 100),\n        (\"l\", 50),\n\
    \        (\"x\", 10),\n        (\"v\", 5),\n        (\"i\", 1),\n    ];\n    while\
    \ iter > 0 {\n        for &(s, n) in mini_roman.iter() {\n            let repeat\
    \ = iter / n;\n            ret.push_str(&s.repeat(repeat as usize));\n       \
    \     iter -= repeat * n;\n        }\n    }\n    ret", "    let thousands = number\
    \ / 1000;\n    let hundreds = (number % 1000) / 100;\n    let tens = (number %\
    \ 100) / 10;\n    let ones = number % 10;\n\n    let mut output = \"\".to_string();\n\
    \n    for _ in 0..thousands {\n        output.push_str(\"m\");\n    }\n\n    if\
    \ hundreds == 9 {\n        output.push_str(\"cm\");\n    } else if hundreds ==\
    \ 4 {\n        output.push_str(\"cd\");\n    } else {\n        if hundreds >=\
    \ 5 {\n            output.push_str(\"d\");\n        }\n        for _ in 0..(hundreds\
    \ % 5) {\n            output.push_str(\"c\");\n        }\n    }\n\n    if tens\
    \ == 9 {\n        output.push_str(\"xc\");\n    } else if tens == 4 {\n      \
    \  output.push_str(\"xl\");\n    } else {\n        if tens >= 5 {\n          \
    \  output.push_str(\"l\");\n        }\n        for _ in 0..(tens % 5) {\n    \
    \        output.push_str(\"x\");\n        }\n    }\n\n    if ones == 9 {\n   \
    \     output.push_str(\"ix\");\n    } else if ones == 4 {\n        output.push_str(\"\
    iv\");\n    } else {\n        if ones >= 5 {\n            output.push_str(\"v\"\
    );\n        }\n        for _ in 0..(ones % 5) {\n            output.push_str(\"\
    i\");\n        }\n    }\n\n    output", "    let digit = |d: isize, c: char| {\n\
    \        let mut s = String::new();\n        if d == 9 {\n            s.push('c');\n\
    \            s.push('m');\n        } else if d >= 5 {\n            s.push('d');\n\
    \            if d == 6 {\n                s.push('c');\n            } else if\
    \ d == 7 {\n                s.push_str(\"cc\");\n            } else if d == 8\
    \ {\n                s.push_str(\"ccc\");\n            }\n        } else if d\
    \ == 4 {\n            s.push('c');\n            s.push('d');\n        } else if\
    \ d == 3 {\n            s.push('c');\n            s.push('c');\n        } else\
    \ if d == 2 {\n            s.push('c');\n        } else if d == 1 {\n        \
    \    s.push(c);\n        }\n        s\n    };\n    let mut buf = String::new();\n\
    \    if number >= 100 {\n        buf.push_str(&digit(number / 100, 'c'));\n  \
    \      number %= 100;\n    }\n    if number >= 10 {\n        buf.push_str(&digit(number\
    \ / 10, 'x'));\n        number %= 10;\n    }\n    buf.push_str(&digit(number,\
    \ 'i'));\n    buf", "    // ToDo: Implement the function.\n    let mut rem = number;\n\
    \    let mut ret = String::new();\n    while rem > 0 {\n        if rem >= 1000\
    \ {\n            ret.push_str(\"m\");\n            rem -= 1000;\n        } else\
    \ if rem >= 900 {\n            ret.push_str(\"cm\");\n            rem -= 900;\n\
    \        } else if rem >= 500 {\n            ret.push_str(\"d\");\n          \
    \  rem -= 500;\n        } else if rem >= 400 {\n            ret.push_str(\"cd\"\
    );\n            rem -= 400;\n        } else if rem >= 100 {\n            ret.push_str(\"\
    c\");\n            rem -= 100;\n        } else if rem >= 90 {\n            ret.push_str(\"\
    xc\");\n            rem -= 90;\n        } else if rem >= 50 {\n            ret.push_str(\"\
    l\");\n            rem -= 50;\n        } else if rem >= 40 {\n            ret.push_str(\"\
    xl\");\n            rem -= 40;\n        } else if rem >= 10 {\n            ret.push_str(\"\
    x\");\n            rem -= 10;\n        } else if rem >= 9 {\n            ret.push_str(\"\
    ix\");\n            rem -= 9;\n        } else if rem >= 5 {\n            ret.push_str(\"\
    v\");\n            rem -= 5;\n        } else if rem >= 4 {\n            ret.push_str(\"\
    iv\");\n            rem -= 4;\n        } else if rem >= 1 {\n            ret.push_str(\"\
    i\");\n            rem -= 1;\n        }\n    }\n    ret", "    let numerals =\
    \ vec![\n        (1000, \"m\"),\n        (900, \"cm\"),\n        (500, \"d\"),\n\
    \        (400, \"cd\"),\n        (100, \"c\"),\n        (90, \"xc\"),\n      \
    \  (50, \"l\"),\n        (40, \"xl\"),\n        (10, \"x\"),\n        (9, \"ix\"\
    ),\n        (5, \"v\"),\n        (4, \"iv\"),\n        (1, \"i\"),\n    ];\n\n\
    \    let mut result = String::new();\n    let mut current_value = number;\n\n\
    \    for (value, numeral) in numerals {\n        let numeral_count = current_value\
    \ / value;\n        current_value = current_value % value;\n        for _ in 0..numeral_count\
    \ {\n            result.push_str(numeral);\n        }\n    }\n\n    result", " \
    \   let mut num = number;\n    let mut result = String::new();\n    let symbols\
    \ = [(\"m\", 1000), (\"cm\", 900), (\"d\", 500), (\"cd\", 400), (\"c\", 100),\n\
    \                   (\"xc\", 90), (\"l\", 50), (\"xl\", 40), (\"x\", 10), (\"\
    ix\", 9), (\"v\", 5),\n                   (\"iv\", 4), (\"i\", 1)];\n    for &(symbol,\
    \ value) in symbols.iter() {\n        while num >= value {\n            result.push_str(symbol);\n\
    \            num -= value;\n        }\n    }\n    result", "    let mut result\
    \ = String::new();\n    let mut n = number;\n    let symbols = [\n        ('M',\
    \ 1000),\n        ('D', 500),\n        ('C', 100),\n        ('L', 50),\n     \
    \   ('X', 10),\n        ('V', 5),\n        ('I', 1),\n    ];\n    for &(symbol,\
    \ value) in symbols.iter() {\n        while n >= value {\n            result.push(symbol);\n\
    \            n -= value;\n        }\n    }\n    result", "    let (thousands,\
    \ number) = (number / 1000, number % 1000);\n    let (hundreds, number) = (number\
    \ / 100, number % 100);\n    let (tens, number) = (number / 10, number % 10);\n\
    \    format!(\n        \"{}{}{}{}\",\n        thousands_romans(thousands),\n \
    \       hundreds_romans(hundreds),\n        tens_romans(tens),\n        units_romans(number)\n\
    \    )", "    let mut num = number;\n    let mut result = String::new();\n   \
    \ let rom_hash: HashMap<isize, &str> = [\n        (1000, \"m\"),\n        (900,\
    \ \"cm\"),\n        (500, \"d\"),\n        (400, \"cd\"),\n        (100, \"c\"\
    ),\n        (90, \"xc\"),\n        (50, \"l\"),\n        (40, \"xl\"),\n     \
    \   (10, \"x\"),\n        (9, \"ix\"),\n        (5, \"v\"),\n        (4, \"iv\"\
    ),\n        (1, \"i\"),\n    ]\n    .iter()\n    .cloned()\n    .collect();\n\n\
    \    for (key, value) in rom_hash {\n        while num >= key {\n            result.push_str(value);\n\
    \            num -= key;\n        }\n    }\n    result", "    let mut digits =\
    \ number;\n    let mut result = String::new();\n    let values = vec![(1000, \"\
    m\"), (900, \"cm\"), (500, \"d\"), (400, \"cd\"), (100, \"c\"), (90, \"xc\"),\n\
    \                      (50, \"l\"), (40, \"xl\"), (10, \"x\"), (9, \"ix\"), (5,\
    \ \"v\"), (4, \"iv\"), (1, \"i\")];\n    for i in values {\n        if digits\
    \ >= i.0 {\n            result.push_str(&i.1.repeat(digits / i.0));\n        \
    \    digits = digits % i.0;\n        }\n    }\n    result", "    let digits =\
    \ vec![\n        (1000, \"m\"),\n        (900, \"cm\"),\n        (500, \"d\"),\n\
    \        (400, \"cd\"),\n        (100, \"c\"),\n        (90, \"xc\"),\n      \
    \  (50, \"l\"),\n        (40, \"xl\"),\n        (10, \"x\"),\n        (9, \"ix\"\
    ),\n        (5, \"v\"),\n        (4, \"iv\"),\n        (1, \"i\"),\n    ];\n\n\
    \    let mut roman = String::new();\n    let mut remaining = number;\n\n    while\
    \ remaining > 0 {\n        for (integer, roman_numeral) in digits.iter() {\n \
    \           if remaining >= *integer {\n                roman.push_str(roman_numeral);\n\
    \                remaining -= *integer;\n                break;\n            }\n\
    \        }\n    }\n\n    roman", "    let number = number as usize;\n    let mut\
    \ numeral = String::new();\n    let units = vec![\n        (1, \"i\"),\n     \
    \   (2, \"ii\"),\n        (3, \"iii\"),\n        (4, \"iv\"),\n        (5, \"\
    v\"),\n        (6, \"vi\"),\n        (7, \"vii\"),\n        (8, \"viii\"),\n \
    \       (9, \"ix\"),\n    ];\n    let tens = vec![\n        (10, \"x\"),\n   \
    \     (20, \"xx\"),\n        (30, \"xxx\"),\n        (40, \"xl\"),\n        (50,\
    \ \"l\"),\n        (60, \"lx\"),\n        (70, \"lxx\"),\n        (80, \"lxxx\"\
    ),\n        (90, \"xc\"),\n    ];\n    let hundreds = vec![\n        (100, \"\
    c\"),\n        (200, \"cc\"),\n        (300, \"ccc\"),\n        (400, \"cd\"),\n\
    \        (500, \"d\"),\n        (600, \"dc\"),\n        (700, \"dcc\"),\n    \
    \    (800, \"dccc\"),\n        (900, \"cm\"),\n    ];\n    let thousands = vec![\n\
    \        (1000, \"m\"),\n        (2000, \"mm\"),\n        (3000, \"mmm\"),\n \
    \       (4000, \"mv\"),\n        (5000, \"v\"),\n        (6000, \"vm\"),\n   \
    \     (7000, \"vmm\"),\n        (8000, \"vmmm\"),\n        (9000, \"mx\"),\n \
    \   ];\n    if number < 10 {\n        for (value, digit) in units {\n        \
    \    if number == value {\n                numeral.push_str(digit);\n        \
    \    }\n        }\n    } else if number < 100 {\n        let mut remainder = number;\n\
    \        for (value, digit) in tens {\n            if remainder >= value {\n \
    \               numeral.push_str(digit);\n                remainder -= value;\n\
    \            }\n        }\n        for (value, digit) in units {\n           \
    \ if remainder == value {\n                numeral.push_str(digit);\n        \
    \    }\n        }\n    } else if number < 1000 {", "    let mut number = number;\n\
    \    let mut roman = String::new();\n    let digits = [\n        (\"i\", 1),\n\
    \        (\"v\", 5),\n        (\"x\", 10),\n        (\"l\", 50),\n        (\"\
    c\", 100),\n        (\"d\", 500),\n        (\"m\", 1000),\n    ];\n    let mut\
    \ divisor_index = digits.len() - 1;\n    while number > 0 {\n        if number\
    \ < digits[divisor_index].1 {\n            divisor_index -= 1;\n        } else\
    \ {\n            roman.push_str(digits[divisor_index].0);\n            number\
    \ -= digits[divisor_index].1;\n        }\n    }\n    roman", "    let mut roman_string\
    \ = String::new();\n    let number = number as usize;\n    let digits = [1000,\
    \ 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    let roman_numerals = [\"\
    m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\"\
    , \"iv\", \"i\"];\n    for (digit, roman_numeral) in digits.iter().zip(roman_numerals.iter())\
    \ {\n        while number >= *digit {\n            roman_string.push_str(roman_numeral);\n\
    \            number -= *digit;\n        }\n    }\n    roman_string", "    let\
    \ symbols = [\n        (\"m\", 1000),\n        (\"cm\", 900),\n        (\"d\"\
    , 500),\n        (\"cd\", 400),\n        (\"c\", 100),\n        (\"xc\", 90),\n\
    \        (\"l\", 50),\n        (\"xl\", 40),\n        (\"x\", 10),\n        (\"\
    ix\", 9),\n        (\"v\", 5),\n        (\"iv\", 4),\n        (\"i\", 1),\n  \
    \  ];\n\n    let mut n = number;\n    let mut roman_numeral = String::new();\n\
    \n    for &(roman_symbol, arabic_value) in symbols.iter() {\n        while n >=\
    \ arabic_value {\n            roman_numeral.push_str(roman_symbol);\n        \
    \    n -= arabic_value;\n        }\n    }\n\n    roman_numeral", "    let conversions\
    \ = vec![\n        (\"\", \"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\"\
    , \"VIII\", \"IX\"),\n        (\"\", \"X\", \"XX\", \"XXX\", \"XL\", \"L\", \"\
    LX\", \"LXX\", \"LXXX\", \"XC\"),\n        (\"\", \"C\", \"CC\", \"CCC\", \"CD\"\
    , \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"),\n        (\"\", \"M\", \"MM\", \"\
    MMM\", \"\", \"\", \"\", \"\", \"\", \"\"),\n    ];\n\n    let number_string =\
    \ number.to_string();\n    let number_string_vec: Vec<_> = number_string.chars().collect();\n\
    \    let num_digits = number_string_vec.len();\n\n    let mut roman_numeral =\
    \ String::new();\n    for i in 0..num_digits {\n        let digit = number_string_vec[i].to_digit(10).unwrap()\
    \ as usize;\n        let mut index = num_digits - i - 1;\n        roman_numeral.push_str(conversions[index][digit]);\n\
    \    }\n\n    roman_numeral", "    let num_to_mini_romans =\n        [(1000, \"\
    m\"), (900, \"cm\"), (500, \"d\"), (400, \"cd\"), (100, \"c\"), (90, \"xc\"),\
    \ (50, \"l\"),\n         (40, \"xl\"), (10, \"x\"), (9, \"ix\"), (5, \"v\"), (4,\
    \ \"iv\"), (1, \"i\")];\n\n    let mut number = number;\n    let mut output =\
    \ String::new();\n\n    for (num, rom) in num_to_mini_romans.iter() {\n      \
    \  if number >= *num {\n            let (quotient, remainder) = number.div_rem(num);\n\
    \            output.push_str(&rom.repeat(quotient as usize));\n            number\
    \ = remainder;\n        }\n    }\n\n    output", "    let mut arabic = number;\n\
    \    let mut roman = String::new();\n    while arabic > 0 {\n        if arabic\
    \ >= 1000 {\n            roman.push_str(\"m\");\n            arabic -= 1000;\n\
    \        } else if arabic >= 900 {\n            roman.push_str(\"cm\");\n    \
    \        arabic -= 900;\n        } else if arabic >= 500 {\n            roman.push_str(\"\
    d\");\n            arabic -= 500;\n        } else if arabic >= 400 {\n       \
    \     roman.push_str(\"cd\");\n            arabic -= 400;\n        } else if arabic\
    \ >= 100 {\n            roman.push_str(\"c\");\n            arabic -= 100;\n \
    \       } else if arabic >= 90 {\n            roman.push_str(\"xc\");\n      \
    \      arabic -= 90;\n        } else if arabic >= 50 {\n            roman.push_str(\"\
    l\");\n            arabic -= 50;\n        } else if arabic >= 40 {\n         \
    \   roman.push_str(\"xl\");\n            arabic -= 40;\n        } else if arabic\
    \ >= 10 {\n            roman.push_str(\"x\");\n            arabic -= 10;\n   \
    \     } else if arabic >= 9 {\n            roman.push_str(\"ix\");\n         \
    \   arabic -= 9;\n        } else if arabic >= 5 {\n            roman.push_str(\"\
    v\");\n            arabic -= 5;\n        } else if arabic >= 4 {\n           \
    \ roman.push_str(\"iv\");\n            arabic -= 4;\n        } else if arabic\
    \ >= 1 {\n            roman.push_str(\"i\");\n            arabic -= 1;\n     \
    \   }\n    }\n    roman", "    let mut output = String::new();\n    let mut n\
    \ = number;\n    while n > 0 {\n        if n >= 1000 {\n            output.push_str(\"\
    m\");\n            n -= 1000;\n        } else if n >= 900 {\n            output.push_str(\"\
    cm\");\n            n -= 900;\n        } else if n >= 500 {\n            output.push_str(\"\
    d\");\n            n -= 500;\n        } else if n >= 400 {\n            output.push_str(\"\
    cd\");\n            n -= 400;\n        } else if n >= 100 {\n            output.push_str(\"\
    c\");\n            n -= 100;\n        } else if n >= 90 {\n            output.push_str(\"\
    xc\");\n            n -= 90;\n        } else if n >= 50 {\n            output.push_str(\"\
    l\");\n            n -= 50;\n        } else if n >= 40 {\n            output.push_str(\"\
    xl\");\n            n -= 40;\n        } else if n >= 10 {\n            output.push_str(\"\
    x\");\n            n -= 10;\n        } else if n >= 9 {\n            output.push_str(\"\
    ix\");\n            n -= 9;\n        } else if n >= 5 {\n            output.push_str(\"\
    v\");\n            n -= 5;\n        } else if n >= 4 {\n            output.push_str(\"\
    iv\");\n            n -= 4;\n        } else if n >= 1 {\n            output.push_str(\"\
    i\");\n            n -= 1;\n        }\n    }\n    output", "    let mut number\
    \ = number;\n    let mut numerals = \"\".to_string();\n    let mut n = 0;\n  \
    \  let mut i = 0;\n    let roman_numerals = [\"i\", \"ii\", \"iii\", \"iv\", \"\
    v\", \"vi\", \"vii\", \"viii\", \"ix\"];\n    let divisors = [1, 4, 5, 9, 10,\
    \ 40, 50, 90, 100, 400, 500, 900, 1000];\n    while number > 0 {\n        if number\
    \ >= divisors[i] {\n            n = (number / divisors[i]) as usize;\n       \
    \     number = number % divisors[i];\n            if divisors[i] > 10 {\n    \
    \            numerals = numerals + &vec![\"c\", \"cd\", \"d\", \"cm\", \"m\"][i\
    \ - 8].repeat(n);\n            } else {\n                numerals = numerals +\
    \ &roman_numerals[i].repeat(n);\n            }\n        }\n        i += 1;\n \
    \   }\n    numerals", "    let romans = vec![\n        vec![1, \"i\"],\n     \
    \   vec![4, \"iv\"],\n        vec![5, \"v\"],\n        vec![9, \"ix\"],\n    \
    \    vec![10, \"x\"],\n        vec![40, \"xl\"],\n        vec![50, \"l\"],\n \
    \       vec![90, \"xc\"],\n        vec![100, \"c\"],\n        vec![400, \"cd\"\
    ],\n        vec![500, \"d\"],\n        vec![900, \"cm\"],\n        vec![1000,\
    \ \"m\"],\n    ];\n    let mut num = number;\n    let mut res = String::new();\n\
    \    let mut index = romans.len() - 1;\n    while num > 0 {\n        if num >=\
    \ romans[index][0] {\n            num -= romans[index][0];\n            res.push_str(romans[index][1]);\n\
    \        } else {\n            index -= 1;\n        }\n    }\n    res", "    let\
    \ mut result = String::new();\n    let mut n = number;\n    let mut i = 1;\n \
    \   while n > 0 {\n        match n % 10 {\n            0 => {}\n            1\
    \ => result.push('i'),\n            2 => result.push_str(\"ii\"),\n          \
    \  3 => result.push_str(\"iii\"),\n            4 => result.push_str(\"iv\"),\n\
    \            5 => result.push('v'),\n            6 => result.push_str(\"vi\"),\n\
    \            7 => result.push_str(\"vii\"),\n            8 => result.push_str(\"\
    viii\"),\n            9 => result.push_str(\"ix\"),\n            _ => panic!(\"\
    int_to_mini_roman: input not in range 1..1000\"),\n        }\n        n /= 10;\n\
    \        i *= 10;\n    }\n    result", "    let mut roman = String::new();\n \
    \   let mut num = number;\n    while num >= 1000 {\n        roman.push_str(\"\
    m\");\n        num -= 1000;\n    }\n    if num >= 900 {\n        roman.push_str(\"\
    cm\");\n        num -= 900;\n    }\n    if num >= 500 {\n        roman.push_str(\"\
    d\");\n        num -= 500;\n    }\n    if num >= 400 {\n        roman.push_str(\"\
    cd\");\n        num -= 400;\n    }\n    while num >= 100 {\n        roman.push_str(\"\
    c\");\n        num -= 100;\n    }\n    if num >= 90 {\n        roman.push_str(\"\
    xc\");\n        num -= 90;\n    }\n    if num >= 50 {\n        roman.push_str(\"\
    l\");\n        num -= 50;\n    }\n    if num >= 40 {\n        roman.push_str(\"\
    xl\");\n        num -= 40;\n    }\n    while num >= 10 {\n        roman.push_str(\"\
    x\");\n        num -= 10;\n    }\n    if num >= 9 {\n        roman.push_str(\"\
    ix\");\n        num -= 9;\n    }\n    if num >= 5 {\n        roman.push_str(\"\
    v\");\n        num -= 5;\n    }\n    if num >= 4 {\n        roman.push_str(\"\
    iv\");\n        num -= 4;\n    }\n    while num >= 1 {\n        roman.push_str(\"\
    i\");\n        num -= 1;\n    }\n    roman", "    // I = 1\n    // V = 5\n   \
    \ // X = 10\n    // L = 50\n    // C = 100\n    // D = 500\n    // M = 1000\n\
    \    let mut output: String = String::new();\n    let (mut thousands, mut hundreds,\
    \ mut tens, mut ones) = (number / 1000, number / 100 % 10, number / 10 % 10, number\
    \ % 10);\n    // Build up thousands\n    for _ in 0..thousands {\n        output.push('m');\n\
    \    }\n    // Build up hundreds\n    if hundreds == 9 {\n        output.push_str(\"\
    cm\");\n    } else if hundreds == 4 {\n        output.push_str(\"cd\");\n    }\
    \ else {\n        for _ in 0..hundreds / 5 {\n            output.push('d');\n\
    \        }\n        for _ in 0..hundreds % 5 {\n            output.push('c');\n\
    \        }\n    }\n    // Build up tens\n    if tens == 9 {\n        output.push_str(\"\
    xc\");\n    } else if tens == 4 {\n        output.push_str(\"xl\");\n    } else\
    \ {\n        for _ in 0..tens / 5 {\n            output.push('l');\n        }\n\
    \        for _ in 0..tens % 5 {\n            output.push('x');\n        }\n  \
    \  }\n    // Build up ones\n    if ones == 9 {\n        output.push_str(\"ix\"\
    );\n    } else if ones == 4 {\n        output.push_str(\"iv\");\n    } else {\n\
    \        for _ in 0..ones / 5 {\n            output.push('v');\n        }\n  \
    \      for _ in 0..ones % 5 {\n            output.push('i');\n        }\n    }\n\
    \    output", "    let mut result = String::new();\n    let mut num = number;\n\
    \    let numerals = vec![\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"\
    xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n    let values = vec![1000, 900,\
    \ 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    let mut i = 0;\n    while num\
    \ > 0 {\n        while num - values[i] >= 0 {\n            result.push_str(numerals[i]);\n\
    \            num -= values[i];\n        }\n        i += 1;\n    }\n    result",
  "    let mut result = String::new();\n    let digits = vec![\n        (900, \"cm\"\
    ),\n        (400, \"cd\"),\n        (900, \"xm\"),\n        (400, \"xd\"),\n \
    \       (90, \"xc\"),\n        (40, \"xl\"),\n        (9, \"ix\"),\n        (4,\
    \ \"iv\"),\n        (1, \"i\"),\n    ];\n    let mut m = number;\n    for &(n,\
    \ r) in digits.iter() {\n        while m >= n {\n            result.push_str(r);\n\
    \            m -= n;\n        }\n    }\n    result", "    let mut result = String::new();\n\
    \    let mut num = number;\n    while num >= 1000 {\n        result.push_str(\"\
    m\");\n        num -= 1000;\n    }\n    if num >= 900 {\n        result.push_str(\"\
    cm\");\n        num -= 900;\n    }\n    if num >= 500 {\n        result.push_str(\"\
    d\");\n        num -= 500;\n    }\n    if num >= 400 {\n        result.push_str(\"\
    cd\");\n        num -= 400;\n    }\n    while num >= 100 {\n        result.push_str(\"\
    c\");\n        num -= 100;\n    }\n    if num >= 90 {\n        result.push_str(\"\
    xc\");\n        num -= 90;\n    }\n    if num >= 50 {\n        result.push_str(\"\
    l\");\n        num -= 50;\n    }\n    if num >= 40 {\n        result.push_str(\"\
    xl\");\n        num -= 40;\n    }\n    while num >= 10 {\n        result.push_str(\"\
    x\");\n        num -= 10;\n    }\n    if num >= 9 {\n        result.push_str(\"\
    ix\");\n        num -= 9;\n    }\n    if num >= 5 {\n        result.push_str(\"\
    v\");\n        num -= 5;\n    }\n    if num >= 4 {\n        result.push_str(\"\
    iv\");\n        num -= 4;\n    }\n    while num >= 1 {\n        result.push_str(\"\
    i\");\n        num -= 1;\n    }\n    result", "    let mut roman = String::new();\n\
    \    let mut rest = number;\n    while rest > 0 {\n        match rest {\n    \
    \        1000 => {\n                roman.push_str(\"m\");\n                rest\
    \ -= 1000;\n            }\n            900 => {\n                roman.push_str(\"\
    cm\");\n                rest -= 900;\n            }\n            500 => {\n  \
    \              roman.push_str(\"d\");\n                rest -= 500;\n        \
    \    }\n            400 => {\n                roman.push_str(\"cd\");\n      \
    \          rest -= 400;\n            }\n            100 => {\n               \
    \ roman.push_str(\"c\");\n                rest -= 100;\n            }\n      \
    \      90 => {\n                roman.push_str(\"xc\");\n                rest\
    \ -= 90;\n            }\n            50 => {\n                roman.push_str(\"\
    l\");\n                rest -= 50;\n            }\n            40 => {\n     \
    \           roman.push_str(\"xl\");\n                rest -= 40;\n           \
    \ }\n            10 => {\n                roman.push_str(\"x\");\n           \
    \     rest -= 10;\n            }\n            9 => {\n                roman.push_str(\"\
    ix\");\n                rest -= 9;\n            }\n            5 => {\n      \
    \          roman.push_str(\"v\");\n                rest -= 5;\n            }\n\
    \            4 => {\n                roman.push_str(\"iv\");\n               \
    \ rest -= 4;\n            }\n            1 => {\n                roman.push_str(\"\
    i\");\n                rest -= 1;\n            }\n            _ => {}\n      \
    \  }\n    }\n    roman", "    let mut s = String::new();\n    let mut number =\
    \ number;\n    while number > 0 {\n        if number >= 1000 {\n            s.push_str(\"\
    m\");\n            number -= 1000;\n        } else if number >= 900 {\n      \
    \      s.push_str(\"cm\");\n            number -= 900;\n        } else if number\
    \ >= 500 {\n            s.push_str(\"d\");\n            number -= 500;\n     \
    \   } else if number >= 400 {\n            s.push_str(\"cd\");\n            number\
    \ -= 400;\n        } else if number >= 100 {\n            s.push_str(\"c\");\n\
    \            number -= 100;\n        } else if number >= 90 {\n            s.push_str(\"\
    xc\");\n            number -= 90;\n        } else if number >= 50 {\n        \
    \    s.push_str(\"l\");\n            number -= 50;\n        } else if number >=\
    \ 40 {\n            s.push_str(\"xl\");\n            number -= 40;\n        }\
    \ else if number >= 10 {\n            s.push_str(\"x\");\n            number -=\
    \ 10;\n        } else if number >= 9 {\n            s.push_str(\"ix\");\n    \
    \        number -= 9;\n        } else if number >= 5 {\n            s.push_str(\"\
    v\");\n            number -= 5;\n        } else if number >= 4 {\n           \
    \ s.push_str(\"iv\");\n            number -= 4;\n        } else if number >= 1\
    \ {\n            s.push_str(\"i\");\n            number -= 1;\n        }\n   \
    \ }\n    s", "    let vals = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5,\
    \ 4, 1];\n    let roms = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\",\
    \ \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n    let mut output = String::new();\n\
    \    let mut num = number;\n    let mut i = 0;\n    while num > 0 {\n        while\
    \ num >= vals[i] {\n            output.push_str(roms[i]);\n            num -=\
    \ vals[i];\n        }\n        i += 1;\n    }\n    output", "    // Greedy algorithm\n\
    \    let units = [\n        (\"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\"\
    , \"vii\", \"viii\", \"ix\"),\n        (\"\", \"x\", \"xx\", \"xxx\", \"xl\",\
    \ \"l\", \"lx\", \"lxx\", \"lxxx\", \"xc\"),\n        (\"\", \"c\", \"cc\", \"\
    ccc\", \"cd\", \"d\", \"dc\", \"dcc\", \"dccc\", \"cm\"),\n        (\"\", \"m\"\
    , \"mm\", \"mmm\", \"\", \"\", \"\", \"\", \"\", \"\"),\n    ];\n    let mut res\
    \ = String::new();\n    let mut number = number;\n    for i in 0..4 {\n      \
    \  let d = number % 10;\n        res = units[i][d as usize].to_string() + &res;\n\
    \        number /= 10;\n    }\n    res", "    let mut number = number;\n    let\
    \ mut result = String::new();\n    let mut i = 0;\n    let roman_numerals = vec![\n\
    \        \"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"\
    IX\", \"X\", \"XX\", \"XXX\", \"XL\", \"L\",\n        \"LX\", \"LXX\", \"LXXX\"\
    , \"XC\", \"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"\
    CM\", \"M\",\n        \"MM\", \"MMM\",\n    ];\n    while number > 0 {\n     \
    \   if number % 10 > 0 {\n            result.insert_str(0, roman_numerals[i]);\n\
    \        }\n        number /= 10;\n        i += 1;\n    }\n    result", "    let\
    \ mut number = number;\n    let mut roman = String::new();\n    while number >=\
    \ 1000 {\n        roman.push_str(\"m\");\n        number -= 1000;\n    }\n   \
    \ if number >= 900 {\n        roman.push_str(\"cm\");\n        number -= 900;\n\
    \    }\n    if number >= 500 {\n        roman.push_str(\"d\");\n        number\
    \ -= 500;\n    }\n    if number >= 400 {\n        roman.push_str(\"cd\");\n  \
    \      number -= 400;\n    }\n    while number >= 100 {\n        roman.push_str(\"\
    c\");\n        number -= 100;\n    }\n    if number >= 90 {\n        roman.push_str(\"\
    xc\");\n        number -= 90;\n    }\n    if number >= 50 {\n        roman.push_str(\"\
    l\");\n        number -= 50;\n    }\n    if number >= 40 {\n        roman.push_str(\"\
    xl\");\n        number -= 40;\n    }\n    while number >= 10 {\n        roman.push_str(\"\
    x\");\n        number -= 10;\n    }\n    if number >= 9 {\n        roman.push_str(\"\
    ix\");\n        number -= 9;\n    }\n    if number >= 5 {\n        roman.push_str(\"\
    v\");\n        number -= 5;\n    }\n    if number >= 4 {\n        roman.push_str(\"\
    iv\");\n        number -= 4;\n    }\n    while number >= 1 {\n        roman.push_str(\"\
    i\");\n        number -= 1;\n    }\n    roman", "    let mut str = String::new();\n\
    \    let ones = number % 10;\n    let number = number / 10;\n    let tens = number\
    \ % 10;\n    let number = number / 10;\n    let hundreds = number % 10;\n    let\
    \ number = number / 10;\n    let thousands = number % 10;\n    for _ in 0..thousands\
    \ {\n        str.push_str(\"m\");\n    }\n    if hundreds == 9 {\n        str.push_str(\"\
    cm\");\n    } else if hundreds == 4 {\n        str.push_str(\"cd\");\n    } else\
    \ {\n        if hundreds >= 5 {\n            str.push_str(\"d\");\n          \
    \  for _ in 0..(hundreds - 5) {\n                str.push_str(\"c\");\n      \
    \      }\n        } else {\n            for _ in 0..hundreds {\n             \
    \   str.push_str(\"c\");\n            }\n        }\n    }\n    if tens == 9 {\n\
    \        str.push_str(\"xc\");\n    } else if tens == 4 {\n        str.push_str(\"\
    xl\");\n    } else {\n        if tens >= 5 {\n            str.push_str(\"l\");\n\
    \            for _ in 0..(tens - 5) {\n                str.push_str(\"x\");\n\
    \            }\n        } else {\n            for _ in 0..tens {\n           \
    \     str.push_str(\"x\");\n            }\n        }\n    }\n    if ones == 9\
    \ {\n        str.push_str(\"ix\");\n    } else if ones == 4 {\n        str.push_str(\"\
    iv\");\n    } else {\n        if ones >= 5 {\n            str.push_str(\"v\");\n\
    \            for _ in 0..(ones - 5) {\n                str.push_str(\"i\");\n\
    \            }\n        } else {\n            for _ in 0..ones {\n           \
    \     str.push_str(\"i\");\n            }\n        }\n    }\n    str", "    let\
    \ m: isize = number / 1000;\n    let c: isize = (number - (m * 1000)) / 100;\n\
    \    let x: isize = (number - (m * 1000) - (c * 100)) / 10;\n    let i: isize\
    \ = number - (m * 1000) - (c * 100) - (x * 10);\n\n    let mut result = \"\".to_string();\n\
    \    if m > 0 {\n        result += \"m\";\n    }\n    if c > 0 {\n        if c\
    \ == 9 {\n            result += \"cm\";\n        } else if c >= 5 {\n        \
    \    result += \"d\";\n            result += \"c\".repeat((c - 5) as usize);\n\
    \        } else if c == 4 {\n            result += \"cd\";\n        } else {\n\
    \            result += \"c\".repeat(c as usize);\n        }\n    }\n    if x >\
    \ 0 {\n        if x == 9 {\n            result += \"xc\";\n        } else if x\
    \ >= 5 {\n            result += \"l\";\n            result += \"x\".repeat((x\
    \ - 5) as usize);\n        } else if x == 4 {\n            result += \"xl\";\n\
    \        } else {\n            result += \"x\".repeat(x as usize);\n        }\n\
    \    }\n    if i > 0 {\n        if i == 9 {\n            result += \"ix\";\n \
    \       } else if i >= 5 {\n            result += \"v\";\n            result +=\
    \ \"i\".repeat((i - 5) as usize);\n        } else if i == 4 {\n            result\
    \ += \"iv\";\n        } else {\n            result += \"i\".repeat(i as usize);\n\
    \        }\n    }\n    result", "    let mut working_number = number;\n    let\
    \ mut result = String::from(\"\");\n\n    if working_number >= 1000 {\n      \
    \  let thousand_count = working_number / 1000;\n        result += &\"m\".repeat(thousand_count\
    \ as usize);\n        working_number -= thousand_count * 1000;\n    }\n\n    if\
    \ working_number >= 100 {\n        let hundred_count = working_number / 100;\n\
    \        result += &\"c\".repeat(hundred_count as usize);\n        working_number\
    \ -= hundred_count * 100;\n    }\n\n    if working_number >= 10 {\n        let\
    \ ten_count = working_number / 10;\n        result += &\"x\".repeat(ten_count\
    \ as usize);\n        working_number -= ten_count * 10;\n    }\n\n    result +=\
    \ &\"i\".repeat(working_number as usize);\n\n    result", "    let (mut number,\
    \ mut result) = (number, String::new());\n    let replacements = vec![\n     \
    \   (1000, \"m\"),\n        (900, \"cm\"),\n        (500, \"d\"),\n        (400,\
    \ \"cd\"),\n        (100, \"c\"),\n        (90, \"xc\"),\n        (50, \"l\"),\n\
    \        (40, \"xl\"),\n        (10, \"x\"),\n        (9, \"ix\"),\n        (5,\
    \ \"v\"),\n        (4, \"iv\"),\n        (1, \"i\"),\n    ];\n    for (int, roman)\
    \ in replacements {\n        while number >= int {\n            result.push_str(roman);\n\
    \            number -= int;\n        }\n    }\n    result", "    if number > 1000\
    \ || number < 1 {\n        return String::from(\"\");\n    }\n    let mut num\
    \ = number;\n    let mut result = String::new();\n    // 1000 -> 10M\n    let\
    \ thousand = num / 1000;\n    num = num % 1000;\n    for _i in 0..thousand {\n\
    \        result.push('m');\n    }\n    // 900 -> 9M\n    if num >= 900 {\n   \
    \     result.push_str(\"cm\");\n        num -= 900;\n    }\n    // 500 -> 5M\n\
    \    if num >= 500 {\n        result.push('d');\n        num -= 500;\n    }\n\
    \    // 400 -> 4M\n    if num >= 400 {\n        result.push_str(\"cd\");\n   \
    \     num -= 400;\n    }\n    // 100 -> 10C\n    let hundred = num / 100;\n  \
    \  num = num % 100;\n    for _i in 0..hundred {\n        result.push('c');\n \
    \   }\n    // 90 -> 9C\n    if num >= 90 {\n        result.push_str(\"xc\");\n\
    \        num -= 90;\n    }\n    // 50 -> 5C\n    if num >= 50 {\n        result.push('l');\n\
    \        num -= 50;\n    }\n    // 40 -> 4C\n    if num >= 40 {\n        result.push_str(\"\
    xl\");\n        num -= 40;\n    }\n    // 10 -> 1X\n    let ten = num / 10;\n\
    \    num = num % 10;\n    for _i in 0..ten {\n        result.push('x');\n    }\n\
    \    // 9 -> 9X\n    if num >= 9 {\n        result.push_str(\"ix\");\n       \
    \ num -= 9;\n    }\n    // 5 -> 5X\n    if num >= 5 {\n        result.push('v');\n\
    \        num -= 5;\n    }\n    // 4 -> 4X\n    if num >= 4 {\n        result.push_str(\"\
    iv\");\n        num -= 4;\n    }\n    // 1 -> 1I\n    for _i in 0..num {\n   \
    \     result.push('i');\n    }\n    result", "    let mut res = String::new();\n\
    \    let n = number;\n    if n == 0 {\n        return res;\n    }\n    if n >=\
    \ 1000 {\n        res.push_str(&\"m\".repeat(n / 1000));\n    }\n    if n % 1000\
    \ >= 900 {\n        res.push_str(\"cm\");\n    } else if n % 1000 >= 500 {\n \
    \       res.push_str(\"d\");\n        res.push_str(&\"c\".repeat((n % 1000 - 500)\
    \ / 100));\n    } else if n % 1000 >= 400 {\n        res.push_str(\"cd\");\n \
    \   } else if n % 1000 >= 100 {\n        res.push_str(&\"c\".repeat(n % 1000 /\
    \ 100));\n    }\n    if n % 100 >= 90 {\n        res.push_str(\"xc\");\n    }\
    \ else if n % 100 >= 50 {\n        res.push_str(\"l\");\n        res.push_str(&\"\
    x\".repeat((n % 100 - 50) / 10));\n    } else if n % 100 >= 40 {\n        res.push_str(\"\
    xl\");\n    } else if n % 100 >= 10 {\n        res.push_str(&\"x\".repeat(n %\
    \ 100 / 10));\n    }\n    if n % 10 == 9 {\n        res.push_str(\"ix\");\n  \
    \  } else if n % 10 >= 5 {\n        res.push_str(\"v\");\n        res.push_str(&\"\
    i\".repeat(n % 10 - 5));\n    } else if n % 10 == 4 {\n        res.push_str(\"\
    iv\");\n    } else if n % 10 >= 1 {\n        res.push_str(&\"i\".repeat(n % 10));\n\
    \    }\n    res", "    // TODO: Implement the function here\n    let mut s = String::new();\n\
    \    if number == 0 {\n        return s;\n    }\n    if number >= 1000 {\n   \
    \     s.push_str(&\"m\".repeat(number as usize / 1000));\n    }\n    let y: isize\
    \ = number % 1000;\n    if y >= 900 {\n        s.push_str(\"cm\");\n    } else\
    \ if y >= 500 {\n        s.push_str(\"d\");\n        if y - 500 >= 400 {\n   \
    \         s.push_str(\"cd\");\n        } else {\n            s.push_str(&\"c\"\
    .repeat((y - 500) as usize / 100));\n        }\n    } else if y >= 400 {\n   \
    \     s.push_str(\"cd\");\n    } else if y >= 100 {\n        s.push_str(&\"c\"\
    .repeat(y as usize / 100));\n    }\n    let b: isize = y % 100;\n    if b >= 90\
    \ {\n        s.push_str(\"xc\");\n    } else if b >= 50 {\n        s.push_str(\"\
    l\");\n        if b - 50 >= 40 {\n            s.push_str(\"xl\");\n        } else\
    \ {\n            s.push_str(&\"x\".repeat((b - 50) as usize / 10));\n        }\n\
    \    } else if b >= 40 {\n        s.push_str(\"xl\");\n    } else if b >= 10 {\n\
    \        s.push_str(&\"x\".repeat(b as usize / 10));\n    }\n    let g: isize\
    \ = b % 10;\n    if g >= 9 {\n        s.push_str(\"ix\");\n    } else if g >=\
    \ 5 {\n        s.push_str(\"v\");\n        if g - 5 >= 4 {\n            s.push_str(\"\
    iv\");\n        } else {\n            s.push_str(&\"i\".repeat((g - 5) as usize));\n\
    \        }\n    } else if g >= 4 {\n        s.push_str(\"iv\");\n    } else if\
    \ g >= 1 {\n        s.push_str(&\"i\".repeat(g as usize));\n    }\n   ", "   \
    \ if number < 1 || number > 1000 {\n        panic!(\"Out of range. Give 1 <= num\
    \ <= 1000\");\n    }\n    let mut ret = String::new();\n    let mut number = number;\n\
    \    if number >= 1000 {\n        ret.push_str(\"m\");\n        number -= 1000;\n\
    \    }\n    if number >= 900 {\n        ret.push_str(\"cm\");\n        number\
    \ -= 900;\n    }\n    if number >= 500 {\n        ret.push_str(\"d\");\n     \
    \   number -= 500;\n    }\n    if number >= 400 {\n        ret.push_str(\"cd\"\
    );\n        number -= 400;\n    }\n    if number >= 100 {\n        ret.push_str(\"\
    c\");\n        number -= 100;\n    }\n    if number >= 90 {\n        ret.push_str(\"\
    xc\");\n        number -= 90;\n    }\n    if number >= 50 {\n        ret.push_str(\"\
    l\");\n        number -= 50;\n    }\n    if number >= 40 {\n        ret.push_str(\"\
    xl\");\n        number -= 40;\n    }\n    if number >= 10 {\n        ret.push_str(\"\
    x\");\n        number -= 10;\n    }\n    if number >= 9 {\n        ret.push_str(\"\
    ix\");\n        number -= 9;\n    }\n    if number >= 5 {\n        ret.push_str(\"\
    v\");\n        number -= 5;\n    }\n    if number >= 4 {\n        ret.push_str(\"\
    iv\");\n        number -= 4;\n    }\n    if number >= 1 {\n        ret.push_str(\"\
    i\");\n        number -= 1;\n    }\n    assert_eq!(number, 0);\n    ret", "  \
    \  let (tens, ones) = (number / 10, number % 10);\n    match tens {\n        1\
    \ => return String::from(\"x\") + &int_to_mini_roman(ones),\n        2 => return\
    \ String::from(\"xx\") + &int_to_mini_roman(ones),\n        3 => return String::from(\"\
    xxx\") + &int_to_mini_roman(ones),\n        4 => return String::from(\"xl\") +\
    \ &int_to_mini_roman(ones),\n        5 => return String::from(\"l\") + &int_to_mini_roman(ones),\n\
    \        6 => return String::from(\"lx\") + &int_to_mini_roman(ones),\n      \
    \  7 => return String::from(\"lxx\") + &int_to_mini_roman(ones),\n        8 =>\
    \ return String::from(\"lxxx\") + &int_to_mini_roman(ones),\n        9 => return\
    \ String::from(\"xc\") + &int_to_mini_roman(ones),\n        _ => {}\n    }\n \
    \   match ones {\n        1 => return String::from(\"i\"),\n        2 => return\
    \ String::from(\"ii\"),\n        3 => return String::from(\"iii\"),\n        4\
    \ => return String::from(\"iv\"),\n        5 => return String::from(\"v\"),\n\
    \        6 => return String::from(\"vi\"),\n        7 => return String::from(\"\
    vii\"),\n        8 => return String::from(\"viii\"),\n        9 => return String::from(\"\
    ix\"),\n        _ => {}\n    }\n    String::from(\"\")", "    let ones = \"i\"\
    , tens = \"x\", hundreds = \"c\", thousands = \"m\";\n    let mut arr = Vec::new();\n\
    \    let mut modulus = number;\n    let (mut d1, mut d2, mut d3, mut d4) = (0,\
    \ 0, 0, 0);\n    while modulus > 0 {\n        match arr.len() {\n            0\
    \ => {\n                d1 = modulus % 10;\n                modulus = modulus\
    \ / 10;\n            }\n            1 => {\n                d2 = modulus % 10;\n\
    \                modulus = modulus / 10;\n            }\n            2 => {\n\
    \                d3 = modulus % 10;\n                modulus = modulus / 10;\n\
    \            }\n            3 => {\n                d4 = modulus % 10;\n     \
    \           modulus = modulus / 10;\n            }\n            _ => (),\n   \
    \     }\n        arr.push(modulus);\n    }\n    // first digit\n    let mut s\
    \ = match d1 {\n        0 => \"\".to_string(),\n        1 => format!(\"{}\", ones),\n\
    \        2 => format!(\"{}{}\", ones, ones),\n        3 => format!(\"{}{}{}\"\
    , ones, ones, ones),\n        4 => format!(\"{}{}\", ones, tens),\n        5 =>\
    \ format!(\"{}\", tens),\n        6 => format!(\"{}{}\", tens, ones),\n      \
    \  7 => format!(\"{}{}{}\", tens, ones, ones),\n        8 => format!(\"{}{}{}{}\"\
    , tens, ones, ones, ones),\n        9 => format!(\"{}{}\", ones, hundreds),\n\
    \        _ => \"\".to_string(),\n    };\n    // second digit\n    match d2 {\n\
    \        0 => (),\n        1 => s.push_str(&format!(\"{}\", tens)),\n        2\
    \ => s.push_str(&format!(\"{}{}\", tens, tens)),\n        3 => s.push_str(&format!(\"\
    {}{}{}\", tens, tens, tens)),\n        4 => s.push_str(&format!(\"{}{}\", tens,\
    \ hundreds)),\n        5 => s.push_str(&format!(\"", "    // no idea what order\
    \ to put them in, so will use this...\n    let to_roman = [\n        (1000, \"\
    m\"),\n        (900, \"cm\"),\n        (500, \"d\"),\n        (400, \"cd\"),\n\
    \        (100, \"c\"),\n        (90, \"xc\"),\n        (50, \"l\"),\n        (40,\
    \ \"xl\"),\n        (10, \"x\"),\n        (9, \"ix\"),\n        (5, \"v\"),\n\
    \        (4, \"iv\"),\n        (1, \"i\"),\n    ];\n\n    let mut number = number;\n\
    \    let mut ret = String::new();\n    for &(value, numeral) in to_roman.iter()\
    \ {\n        while number >= value {\n            ret.push_str(numeral);\n   \
    \         number -= value;\n        }\n    }\n    ret"]
stop_tokens:
- "\n}"
