language: rs
name: HumanEval_111_histogram
results:
- exit_code: 0
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut map = HashMap::new();\n   \
    \ let mut max = 0;\n    for word in test.split_whitespace() {\n        let count\
    \ = map.entry(word.to_string()).or_insert(0);\n        *count += 1;\n        if\
    \ *count > max {\n            max = *count;\n        }\n    }\n    map.retain(|_k,\
    \ v| *v == max);\n    map\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821433
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut counter = HashMap::new();\n\
    \    for c in test.chars() {\n        let val = counter.entry(c.to_string()).or_insert(0);\n\
    \        *val += 1;\n    }\n    let mut max_count = isize::min_value();\n    let\
    \ mut max_chars = HashMap::new();\n    for (key, val) in counter.iter() {\n  \
    \      if val > &max_count {\n            max_count = *val;\n            max_chars.clear();\n\
    \            max_chars.insert(key.to_string(), *val);\n        } else if val ==\
    \ &max_count {\n            max_chars.insert(key.to_string(), *val);\n       \
    \ }\n    }\n    max_chars\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\" \": 3}`,\n right: `{\"b\": 2, \"a\": 2}`', /tmp/tmporedh92f.rs:29:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821433
- exit_code: 0
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut result: HashMap<String, isize>\
    \ = HashMap::new();\n    let mut counter: HashMap<String, isize> = HashMap::new();\n\
    \    for c in test.split_whitespace() {\n        let counter_value = counter.entry(c.to_string()).or_insert(0);\n\
    \        *counter_value += 1;\n    }\n    let mut maximum = 0;\n    for (k, v)\
    \ in counter.iter() {\n        if *v > maximum {\n            maximum = *v;\n\
    \        }\n    }\n    for (k, v) in counter.iter() {\n        if *v == maximum\
    \ {\n            result.insert(k.to_string(), maximum);\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821433
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut counts: HashMap<String, isize>\
    \ = HashMap::new();\n    let mut max = 0;\n    for letter in test.split(\" \"\
    ) {\n        let count = counts.entry(letter.to_string()).or_insert(0);\n    \
    \    *count += 1;\n        if *count > max {\n            max = *count;\n    \
    \    }\n    }\n    let mut top: HashMap<String, isize> = HashMap::new();\n   \
    \ for (key, value) in counts {\n        if value == max {\n            top.insert(key,\
    \ value);\n        }\n    }\n    top\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"\": 1}`,\n right: `{}`', /tmp/tmp6lc6m84r.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821433
- exit_code: 1
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut letters = HashMap::new();\n\
    \    let mut tmp_vector = Vec::new();\n    let mut tmp_string: String;\n    let\
    \ mut most_letter: String;\n    let mut current_most: isize = 0;\n    let mut\
    \ most: isize = 0;\n    let mut tmp_value: isize;\n    let mut tmp_vector_sec\
    \ = Vec::new();\n    let mut tmp_string_sec: String;\n    for x in test.split_whitespace()\
    \ {\n        tmp_vector.push(x);\n    }\n    for y in tmp_vector {\n        let\
    \ mut flag = false;\n        for (key, value) in letters.iter() {\n          \
    \  if key == &y {\n                flag = true;\n                tmp_value = *value;\n\
    \                tmp_value += 1;\n                letters.insert(y.to_string(),\
    \ tmp_value);\n            }\n        }\n        if flag == false {\n        \
    \    letters.insert(y.to_string(), 1);\n        }\n    }\n    for (key, value)\
    \ in letters.iter() {\n        if *value > most {\n            most = *value;\n\
    \        }\n    }\n    for (key, value) in letters.iter() {\n        if most ==\
    \ *value {\n            tmp_vector_sec.push(key);\n        }\n    }\n    for z\
    \ in tmp_vector_sec {\n        if z == tmp_vector_sec[0] {\n            tmp_string\
    \ = z.to_string();\n            tmp_string.push_str(\" \");\n            tmp_string.push_str(&most.to_string());\n\
    \            tmp_string_sec = tmp_string.to_string();\n        } else {\n    \
    \        tmp_string = z.to_string();\n            tmp_string.push_str(\" \");\n\
    \            tmp_string.push_str(&most.to_string());\n            tmp_string_sec.push_str(&tmp_string);\n\
    \        }\n    }\n    let mut tmp_hash: HashMap<String, isize> = HashMap::new();\n\
    \    tmp_hash.insert(tmp_string_sec, most);\n    tmp_hash\n}\n\nfn main() {\n\
    \    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"a b b\
    \ a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `most_letter`\n  --> /tmp/tmphuaae98u.rs:11:13\n\
    \   |\n11 |     let mut most_letter: String;\n   |             ^^^^^^^^^^^ help:\
    \ if this is intentional, prefix it with an underscore: `_most_letter`\n   |\n\
    \   = note: `#[warn(unused_variables)]` on by default\n\nwarning: unused variable:\
    \ `current_most`\n  --> /tmp/tmphuaae98u.rs:12:13\n   |\n12 |     let mut current_most:\
    \ isize = 0;\n   |             ^^^^^^^^^^^^ help: if this is intentional, prefix\
    \ it with an underscore: `_current_most`\n\nwarning: unused variable: `key`\n\
    \  --> /tmp/tmphuaae98u.rs:34:10\n   |\n34 |     for (key, value) in letters.iter()\
    \ {\n   |          ^^^ help: if this is intentional, prefix it with an underscore:\
    \ `_key`\n\nwarning: variable does not need to be mutable\n  --> /tmp/tmphuaae98u.rs:12:9\n\
    \   |\n12 |     let mut current_most: isize = 0;\n   |         ----^^^^^^^^^^^^\n\
    \   |         |\n   |         help: remove this `mut`\n   |\n   = note: `#[warn(unused_mut)]`\
    \ on by default\n\nerror[E0502]: cannot borrow `letters` as mutable because it\
    \ is also borrowed as immutable\n  --> /tmp/tmphuaae98u.rs:27:17\n   |\n22 | \
    \        for (key, value) in letters.iter() {\n   |                          \
    \   --------------\n   |                             |\n   |                 \
    \            immutable borrow occurs here\n   |                             immutable\
    \ borrow later used here\n...\n27 |                 letters.insert(y.to_string(),\
    \ tmp_value);\n   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ mutable\
    \ borrow occurs here\n\nerror[E0382]: borrow of moved value: `tmp_vector_sec`\n\
    \   --> /tmp/tmphuaae98u.rs:45:17\n    |\n15  |     let mut tmp_vector_sec = Vec::new();\n\
    \    |         ------------------ move occurs because `tmp_vector_sec` has type\
    \ `Vec<&String>`, which does not implement the `Copy` trait\n...\n44  |     for\
    \ z in tmp_vector_sec {\n    |              --------------\n    |            \
    \  |\n    |              `tmp_vector_sec` moved due to this implicit call to `.into_iter()`\n\
    \    |              help: consider borrowing to avoid moving into the for loop:\
    \ `"
  stdout: ''
  timestamp: 1659821433
- exit_code: 1
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    // lower case letters (a-z)\n    let\
    \ test = test.to_lowercase();\n    let mut result = HashMap::new();\n    for i\
    \ in 'a' as u8..='z' as u8 {\n        let mut count = 0;\n        for c in test.chars()\
    \ {\n            if c as u8 == i {\n                count += 1;\n            }\n\
    \        }\n        result.insert(count.to_string(), (i as char).to_string());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp13m_k1ye.rs:20:5\n   |\n\
    7  | fn histogram(test: String) -> HashMap<String, isize> {\n   |            \
    \                   ---------------------- expected `HashMap<String, isize>` because\
    \ of return type\n...\n20 |     result\n   |     ^^^^^^ expected `isize`, found\
    \ struct `String`\n   |\n   = note: expected struct `HashMap<_, isize>`\n    \
    \          found struct `HashMap<_, String>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659821433
- exit_code: 0
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut map = HashMap::new();\n   \
    \ for i in test.split_whitespace() {\n        if map.contains_key(i) {\n     \
    \       let count = map.get_mut(i).unwrap();\n            *count += 1;\n     \
    \   } else {\n            map.insert(i.to_string(), 1);\n        }\n    }\n  \
    \  let mut max_value = 0;\n    for (_, value) in map.iter() {\n        if value\
    \ > &max_value {\n            max_value = *value;\n        }\n    }\n    let mut\
    \ result = HashMap::new();\n    for (key, value) in map.iter() {\n        if value\
    \ == &max_value {\n            result.insert(key.to_string(), *value);\n     \
    \   }\n    }\n    result\n}\n\nfn main() {\n    let candidate = histogram;\n \
    \   assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821433
- exit_code: 1
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut result: HashMap<String, isize>\
    \ = HashMap::new();\n    let mut letter_counter: HashMap<String, isize> = HashMap::new();\n\
    \    for letter in test.split_whitespace() {\n        let counter = letter_counter.entry(letter.to_string()).or_insert(0);\n\
    \        *counter += 1;\n    }\n    let mut highest_count = 0;\n    for (letter,\
    \ count) in letter_counter {\n        highest_count = if count > highest_count\
    \ {\n            count\n        } else {\n            highest_count\n        };\n\
    \    }\n    for (letter, count) in letter_counter {\n        if count == highest_count\
    \ {\n            result.insert(letter, count);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `letter`\n  --> /tmp/tmp8e2rpvi8.rs:15:10\n \
    \  |\n15 |     for (letter, count) in letter_counter {\n   |          ^^^^^^ help:\
    \ if this is intentional, prefix it with an underscore: `_letter`\n   |\n   =\
    \ note: `#[warn(unused_variables)]` on by default\n\nerror[E0382]: use of moved\
    \ value: `letter_counter`\n   --> /tmp/tmp8e2rpvi8.rs:22:28\n    |\n9   |    \
    \ let mut letter_counter: HashMap<String, isize> = HashMap::new();\n    |    \
    \     ------------------ move occurs because `letter_counter` has type `HashMap<String,\
    \ isize>`, which does not implement the `Copy` trait\n...\n15  |     for (letter,\
    \ count) in letter_counter {\n    |                            --------------\n\
    \    |                            |\n    |                            `letter_counter`\
    \ moved due to this implicit call to `.into_iter()`\n    |                   \
    \         help: consider borrowing to avoid moving into the for loop: `&letter_counter`\n\
    ...\n22  |     for (letter, count) in letter_counter {\n    |                \
    \            ^^^^^^^^^^^^^^ value used here after move\n    |\nnote: this function\
    \ takes ownership of the receiver `self`, which moves `letter_counter`\n\nerror:\
    \ aborting due to previous error; 1 warning emitted\n\nFor more information about\
    \ this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659821433
- exit_code: 1
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let letters = test.split(\" \");\n\
    \    let mut results = HashMap::new();\n    let mut count = 1;\n    let mut max_count\
    \ = 0;\n    let mut winners = Vec::new();\n\n    for letter in letters {\n   \
    \     let letter_to_check = letter.to_string();\n        for (key, value) in &results\
    \ {\n            if letter_to_check == *key {\n                results.insert(letter_to_check,\
    \ value + 1);\n                count = value + 1;\n            }\n        }\n\
    \        if !results.contains_key(&letter_to_check) {\n            results.insert(letter_to_check,\
    \ 1);\n        }\n        if count > max_count {\n            max_count = count;\n\
    \            winners.clear();\n            winners.push(letter_to_check);\n  \
    \      } else if count == max_count {\n            winners.push(letter_to_check);\n\
    \        }\n    }\n    let mut histogram = HashMap::new();\n    for winner in\
    \ winners {\n        histogram.insert(winner, max_count);\n    }\n    histogram\n\
    }\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<&i32 as Add<i32>>::Output == isize`\n\
    \  --> /tmp/tmpgnlxl466.rs:19:31\n   |\n19 |                 count = value + 1;\n\
    \   |                               ^ expected `i32`, found `isize`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0271`.\n"
  stdout: ''
  timestamp: 1659821433
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let lower_letters = String::from(\"\
    abcdefghijklmnopqrstuvwxyz\");\n    let mut lower_counter = HashMap::new();\n\
    \    for letter in lower_letters.chars() {\n        lower_counter.insert(letter.to_string(),\
    \ 0);\n    }\n    for char_in_test in test.chars() {\n        if lower_counter.contains_key(&char_in_test.to_string())\
    \ {\n            let char_count = lower_counter.get(&char_in_test.to_string()).unwrap();\n\
    \            lower_counter.insert(char_in_test.to_string(), *char_count + 1);\n\
    \        }\n    }\n    let (max_count, max_count_letters) = lower_counter.iter().fold((0,\
    \ Vec::new()), |(max_count, mut max_count_letters), (letter, letter_count)| {\n\
    \        if *letter_count > max_count {\n            max_count_letters.clear();\n\
    \            max_count_letters.push(letter);\n            (letter_count.clone(),\
    \ max_count_letters)\n        } else if *letter_count == max_count {\n       \
    \     max_count_letters.push(letter);\n            (max_count, max_count_letters)\n\
    \        } else {\n            (max_count, max_count_letters)\n        }\n   \
    \ });\n    let mut max_count_letters_map = HashMap::new();\n    for letter in\
    \ max_count_letters {\n        max_count_letters_map.insert(letter.to_string(),\
    \ max_count);\n    }\n    max_count_letters_map\n}\n\nfn main() {\n    let candidate\
    \ = histogram;\n    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"n\": 0, \"l\": 0, \"f\": 0, \"g\": 0, \"c\": 0, \"k\": 0, \"o\": 0, \"d\"\
    : 0, \"w\": 0, \"v\": 0, \"z\": 0, \"p\": 0, \"y\": 0, \"r\": 0, \"m\": 0, \"\
    q\": 0, \"s\": 0, \"j\": 0, \"h\": 0, \"t\": 0, \"e\": 0, \"a\": 0, \"x\": 0,\
    \ \"u\": 0, \"b\": 0, \"i\": 0}`,\n right: `{}`', /tmp/tmps7gre67w.rs:46:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821433
- exit_code: 1
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut result: HashMap<String, isize>\
    \ = HashMap::new();\n    let mut max_count: isize = 0;\n    for c in test.chars()\
    \ {\n        let count = result.entry(c.to_string()).or_insert(0);\n        *count\
    \ += 1;\n        if *count > max_count {\n            max_count = *count;\n  \
    \      }\n    }\n    result.iter().filter(|x| x.1 == &max_count).map(|x| (*x.0,\
    \ *x.1)).collect()\n}\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: SyntaxError
  stderr: "error[E0507]: cannot move out of `*x.0` which is behind a shared reference\n\
    \  --> /tmp/tmp6_fabniv.rs:17:58\n   |\n17 |     result.iter().filter(|x| x.1\
    \ == &max_count).map(|x| (*x.0, *x.1)).collect()\n   |                       \
    \                                   ^^^^ move occurs because `*x.0` has type `String`,\
    \ which does not implement the `Copy` trait\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0507`.\n"
  stdout: ''
  timestamp: 1659821433
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut map = HashMap::new();\n   \
    \ for i in test.split(\" \") {\n        let count = map.entry(i.to_string()).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = 0;\n    for (_k, v) in &map {\n\
    \        if *v > max {\n            max = *v;\n        }\n    }\n    let mut result\
    \ = HashMap::new();\n    for (k, v) in &map {\n        if *v == max {\n      \
    \      result.insert(k.to_string(), *v);\n        }\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"\": 1}`,\n right: `{}`', /tmp/tmpvqa9keea.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821433
- exit_code: 1
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut letter_freq: HashMap<String,\
    \ isize> = HashMap::new();\n    let mut max_freq: isize = 0;\n    let mut freq_letters:\
    \ Vec<String> = Vec::new();\n\n    for letter in test.split_whitespace() {\n \
    \       let count = letter_freq.entry(letter.to_string()).or_insert(0);\n    \
    \    *count += 1;\n        if *count > max_freq {\n            max_freq = *count;\n\
    \            freq_letters.clear();\n            freq_letters.push(letter.to_string());\n\
    \        } else if *count == max_freq {\n            freq_letters.push(letter.to_string());\n\
    \        }\n    }\n\n    freq_letters.sort();\n    freq_letters.dedup();\n\n \
    \   let mut result: HashMap<String, isize> = HashMap::new();\n    for letter in\
    \ freq_letters {\n        result.insert(letter, *letter_freq.get(&letter).unwrap());\n\
    \    }\n\n    result\n}\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `letter`\n  --> /tmp/tmpqvpy662f.rs:29:48\n\
    \   |\n28 |     for letter in freq_letters {\n   |         ------ move occurs\
    \ because `letter` has type `String`, which does not implement the `Copy` trait\n\
    29 |         result.insert(letter, *letter_freq.get(&letter).unwrap());\n   |\
    \                       ------ value moved here  ^^^^^^^ value borrowed here after\
    \ move\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659821433
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut histogram = HashMap::new();\n\
    \    for letter in test.split_whitespace() {\n        let count = histogram.entry(letter.to_string()).or_insert(0);\n\
    \        *count += 1;\n    }\n    histogram\n}\n\nfn main() {\n    let candidate\
    \ = histogram;\n    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"b\": 2, \"c\": 1, \"a\": 2}`,\n right: `{\"b\": 2, \"a\": 2}`', /tmp/tmprvlqxnzx.rs:19:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821433
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut dict: HashMap<String, isize>\
    \ = HashMap::new();\n    let mut max_count: isize = 0;\n    for l in test.chars()\
    \ {\n        let c = dict.entry(l.to_string()).or_insert(0);\n        *c += 1;\n\
    \        if *c > max_count {\n            max_count = *c;\n        }\n    }\n\
    \    dict.retain(|_k, v| *v == max_count);\n    dict\n}\n\nfn main() {\n    let\
    \ candidate = histogram;\n    assert_eq!(candidate(String::from(\"a b b a\")),\
    \ HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\" \": 3}`,\n right: `{\"b\": 2, \"a\": 2}`', /tmp/tmpw7bftsvl.rs:23:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821433
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut hist = HashMap::new();\n  \
    \  let letters = test.split(\" \").collect::<Vec<&str>>();\n    let mut max =\
    \ 0;\n    for letter in letters {\n        let count = hist.entry(letter.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max {\n            max = *count;\n\
    \        }\n    }\n    let mut result = HashMap::new();\n    for (key, value)\
    \ in hist {\n        if value == max {\n            result.insert(key, value);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"\": 1}`,\n right: `{}`', /tmp/tmp6epdml8q.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821433
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut letters: HashMap<String, isize>\
    \ = HashMap::new();\n    for char in test.split(\" \") {\n        let counter\
    \ = letters.entry(char.to_string()).or_insert(0);\n        *counter += 1;\n  \
    \  }\n    letters\n}\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"b\": 2, \"a\": 2, \"c\": 1}`,\n right: `{\"b\": 2, \"a\": 2}`', /tmp/tmpw7lxjjyb.rs:19:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821433
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut occurences: HashMap<String,\
    \ isize> = HashMap::new();\n    for c in test.split_whitespace() {\n        let\
    \ count = occurences.entry(c.to_string()).or_insert(0);\n        *count += 1;\n\
    \    }\n    occurences\n}\n\nfn main() {\n    let candidate = histogram;\n   \
    \ assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"b\": 2, \"c\": 1, \"a\": 2}`,\n right: `{\"a\": 2, \"b\": 2}`', /tmp/tmp4dt6f_z0.rs:19:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821433
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    // your code goes here.\n    let mut\
    \ histogram = HashMap::new();\n    for l in test.chars() {\n        let letter\
    \ = l.to_string();\n        let count = histogram.entry(letter).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max_key = \"\".to_string();\n    let\
    \ mut max_value = -1;\n    for (key, value) in &histogram {\n        if value\
    \ > &max_value {\n            max_key = key.to_string();\n            max_value\
    \ = *value;\n        }\n    }\n    let mut h: HashMap<String, isize> = HashMap::new();\n\
    \    for (key, value) in &histogram {\n        if value == &max_value {\n    \
    \        h.insert(key.to_string(), max_value);\n        }\n    }\n    h\n}\n\n\
    fn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\" \": 3}`,\n right: `{\"b\": 2, \"a\": 2}`', /tmp/tmp99f5157w.rs:34:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821433
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut result: HashMap<String, isize>\
    \ = HashMap::new();\n    let letters: Vec<String> = test.split_whitespace().map(String::from).collect();\n\
    \    for letter in letters {\n        let counter = result.entry(letter).or_insert(0);\n\
    \        *counter += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = histogram;\n    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"b\": 2, \"a\": 2, \"c\": 1}`,\n right: `{\"a\": 2, \"b\": 2}`', /tmp/tmpbt9nzi9q.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821433
- exit_code: 0
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut letter_counts: HashMap<String,\
    \ isize> = HashMap::new();\n    let letters: Vec<String> = test.split_whitespace().map(|s|\
    \ s.to_string()).collect();\n    let mut max_count: isize = 0;\n    for l in letters\
    \ {\n        let count = letter_counts.entry(l).or_insert(0);\n        *count\
    \ += 1;\n        if *count > max_count {\n            max_count = *count;\n  \
    \      }\n    }\n    let mut all_max_letters: HashMap<String, isize> = HashMap::new();\n\
    \    for (k, v) in letter_counts {\n        if v == max_count {\n            all_max_letters.insert(k,\
    \ v);\n        }\n    }\n    all_max_letters\n}\n\nfn main() {\n    let candidate\
    \ = histogram;\n    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821433
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut dict: HashMap<String, isize>\
    \ = HashMap::new();\n    let letters: Vec<String> = test.split_whitespace().map(|s|\
    \ s.to_string()).collect();\n    for letter in letters {\n        let count =\
    \ dict.entry(letter).or_insert(0);\n        *count += 1;\n    }\n    dict\n}\n\
    \nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"b\": 2, \"c\": 1, \"a\": 2}`,\n right: `{\"b\": 2, \"a\": 2}`', /tmp/tmp45pdpl8_.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821433
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut hist = HashMap::new();\n  \
    \  let mut max_count = 0;\n    for c in test.chars() {\n        let count = hist.entry(c.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max_count {\n            max_count\
    \ = *count;\n        }\n    }\n    let keys: Vec<String> = hist.keys().map(|x|\
    \ x.to_string()).collect();\n    let result: HashMap<String, isize> = keys.iter().filter(|&x|\
    \ hist[x] == max_count).map(|x| (x.to_string(), hist[x])).collect();\n    result\n\
    }\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\" \": 3}`,\n right: `{\"b\": 2, \"a\": 2}`', /tmp/tmpfdrckpt7.rs:24:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821433
- exit_code: 0
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut count = HashMap::new();\n \
    \   let mut result = HashMap::new();\n    for item in test.split_whitespace()\
    \ {\n        let count = count.entry(item).or_insert(0);\n        *count += 1;\n\
    \    }\n    let mut max_val = 0;\n    for (key, val) in count.iter() {\n     \
    \   if *val > max_val {\n            max_val = *val;\n        }\n    }\n    for\
    \ (key, val) in count.iter() {\n        if *val == max_val {\n            result.insert(key.to_string(),\
    \ *val);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate =\
    \ histogram;\n    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821433
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut res = HashMap::new();\n   \
    \ for c in test.chars() {\n        let count = res.entry(c.to_string()).or_insert(0);\n\
    \        *count += 1;\n    }\n    res\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\" \": 3, \"a\": 2, \"b\": 2}`,\n right: `{\"a\": 2, \"b\": 2}`', /tmp/tmpolxnan94.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821433
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut count: HashMap<String, isize>\
    \ = HashMap::new();\n    let mut result: HashMap<String, isize> = HashMap::new();\n\
    \    for c in test.chars() {\n        let key = c.to_string();\n        *count.entry(key).or_insert(0)\
    \ += 1;\n    }\n    let mut max_count = 0;\n    for (key, value) in count.iter()\
    \ {\n        if *value > max_count {\n            max_count = *value;\n      \
    \  }\n    }\n    for (key, value) in count.iter() {\n        if *value == max_count\
    \ {\n            result.insert(key.to_string(), max_count);\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\" \": 3}`,\n right: `{\"b\": 2, \"a\": 2}`', /tmp/tmpd679ucdz.rs:30:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821433
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut map = HashMap::new();\n   \
    \ let mut result = HashMap::new();\n    for c in test.chars() {\n        let count\
    \ = map.entry(c.to_string()).or_insert(0);\n        *count += 1;\n    }\n    let\
    \ mut max_count = 0;\n    for (key, val) in map.iter() {\n        if val > &max_count\
    \ {\n            max_count = *val;\n        }\n    }\n    for (key, val) in map.iter()\
    \ {\n        if val == &max_count {\n            result.insert(key.to_string(),\
    \ *val);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate =\
    \ histogram;\n    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\" \": 3}`,\n right: `{\"a\": 2, \"b\": 2}`', /tmp/tmpe5dbwfwg.rs:30:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821433
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut map = HashMap::new();\n   \
    \ for ch in test.split_whitespace() {\n        let count = map.entry(ch.to_string()).or_insert(0);\n\
    \        *count += 1;\n    }\n    map\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"c\": 1, \"b\": 2, \"a\": 2}`,\n right: `{\"b\": 2, \"a\": 2}`', /tmp/tmprmpjkbw0.rs:19:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821433
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut dict: HashMap<String, isize>\
    \ = HashMap::new();\n    let mut count: HashMap<String, isize> = HashMap::new();\n\
    \    let mut max: isize = 0;\n    for letter in test.split(\" \") {\n        if\
    \ dict.contains_key(letter) {\n            dict.insert(letter.to_string(), dict.get(letter).unwrap()\
    \ + 1);\n        } else {\n            dict.insert(letter.to_string(), 1);\n \
    \       }\n    }\n    for (letter, value) in dict.iter() {\n        if value >\
    \ &max {\n            max = *value;\n        }\n    }\n    for (letter, value)\
    \ in dict.iter() {\n        if value == &max {\n            count.insert(letter.to_string(),\
    \ max);\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"\": 1}`,\n right: `{}`', /tmp/tmpzveiiaij.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821434
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut r = HashMap::new();\n    for\
    \ x in test.split_whitespace() {\n        let f = r.entry(x.to_string()).or_insert(0);\n\
    \        *f += 1;\n    }\n    return r;\n}\n\nfn main() {\n    let candidate =\
    \ histogram;\n    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"c\": 1, \"b\": 2, \"a\": 2}`,\n right: `{\"a\": 2, \"b\": 2}`', /tmp/tmpwfrkzdrr.rs:19:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821434
- exit_code: 0
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut cnt = HashMap::new();\n   \
    \ let mut max_cnt = 0;\n    for c in test.split_whitespace() {\n        let cnt_now\
    \ = match cnt.get(c) {\n            Some(cnt) => *cnt + 1,\n            None =>\
    \ 1,\n        };\n        cnt.insert(c.to_string(), cnt_now);\n        if cnt_now\
    \ > max_cnt {\n            max_cnt = cnt_now;\n        }\n    }\n    cnt.iter()\n\
    \        .filter(|&(_, v)| *v == max_cnt)\n        .map(|(k, v)| (k.to_string(),\
    \ *v))\n        .collect()\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821434
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut histogram = HashMap::new();\n\
    \    for ch in test.split_whitespace() {\n        *histogram.entry(ch.to_string()).or_insert(0)\
    \ += 1;\n    }\n    histogram\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"a\": 2, \"b\": 2, \"c\": 1}`,\n right: `{\"b\": 2, \"a\": 2}`', /tmp/tmp3zk3em6m.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821434
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut result: HashMap<String, isize>\
    \ = HashMap::new();\n    let mut letters: Vec<String> = test.split_whitespace().map(|s|\
    \ s.to_string()).collect();\n    letters.sort();\n    let mut letter_count: isize\
    \ = 0;\n    let mut current_letter: String = String::new();\n    for letter in\
    \ letters {\n        if letter == current_letter {\n            letter_count +=\
    \ 1;\n        } else {\n            if letter_count > 0 {\n                let\
    \ n = result.entry(current_letter).or_insert(0);\n                *n = letter_count;\n\
    \            }\n            current_letter = letter;\n            letter_count\
    \ = 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"a\": 2}`,\n right: `{\"a\": 2, \"b\": 2}`', /tmp/tmpc2urwkmm.rs:30:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821434
- exit_code: 1
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut counts: HashMap<String, isize>\
    \ = HashMap::new();\n    for c in test.chars() {\n        let letter = c.to_string();\n\
    \        let count = counts.entry(letter).or_insert(0);\n        *count += 1;\n\
    \    }\n    let max_count = counts.values().max().unwrap();\n    counts.iter().filter(|&(_,\
    \ v)| v == max_count).cloned().collect()\n}\n\nfn main() {\n    let candidate\
    \ = histogram;\n    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<Filter<std::collections::hash_map::Iter<'_,\
    \ String, isize>, [closure@/tmp/tmp_xyee_04.rs:15:26: 15:50]> as Iterator>::Item\
    \ == &_`\n  --> /tmp/tmp_xyee_04.rs:15:52\n   |\n15 |     counts.iter().filter(|&(_,\
    \ v)| v == max_count).cloned().collect()\n   |                               \
    \                     ^^^^^^ expected tuple, found reference\n   |\n   = note:\
    \  expected tuple `(&String, &isize)`\n           found reference `&_`\n\nerror[E0599]:\
    \ the method `collect` exists for struct `Cloned<Filter<std::collections::hash_map::Iter<'_,\
    \ String, isize>, [closure@/tmp/tmp_xyee_04.rs:15:26: 15:50]>>`, but its trait\
    \ bounds were not satisfied\n  --> /tmp/tmp_xyee_04.rs:15:61\n   |\n15 |     \
    \   counts.iter().filter(|&(_, v)| v == max_count).cloned().collect()\n   |  \
    \                                                              ^^^^^^^ method\
    \ cannot be called on `Cloned<Filter<std::collections::hash_map::Iter<'_, String,\
    \ isize>, [closure@/tmp/tmp_xyee_04.rs:15:26: 15:50]>>` due to unsatisfied trait\
    \ bounds\n   |\n   = note: the following trait bounds were not satisfied:\n  \
    \         `<Filter<std::collections::hash_map::Iter<'_, String, isize>, [closure@/tmp/tmp_xyee_04.rs:15:26:\
    \ 15:50]> as Iterator>::Item = &_`\n           which is required by `Cloned<Filter<std::collections::hash_map::Iter<'_,\
    \ String, isize>, [closure@/tmp/tmp_xyee_04.rs:15:26: 15:50]>>: Iterator`\n  \
    \         `Cloned<Filter<std::collections::hash_map::Iter<'_, String, isize>,\
    \ [closure@/tmp/tmp_xyee_04.rs:15:26: 15:50]>>: Iterator`\n           which is\
    \ required by `&mut Cloned<Filter<std::collections::hash_map::Iter<'_, String,\
    \ isize>, [closure@/tmp/tmp_xyee_04.rs:15:26: 15:50]>>: Iterator`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0271, E0599.\n\
    For more information about an error, try `rustc --explain E0271`.\n"
  stdout: ''
  timestamp: 1659821434
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut memo = HashMap::new();\n  \
    \  let mut max = 1;\n    let mut max_letters = String::new();\n    for c in test.chars()\
    \ {\n        if let Some(count) = memo.get_mut(&c.to_string()) {\n           \
    \ *count += 1;\n            if *count > max {\n                max = *count;\n\
    \                max_letters = c.to_string();\n            } else if *count ==\
    \ max {\n                max_letters.push(c);\n            }\n        } else {\n\
    \            memo.insert(c.to_string(), 1);\n        }\n    }\n    let mut rv\
    \ = HashMap::new();\n    rv.insert(max_letters, max);\n    rv\n}\n\nfn main()\
    \ {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\" \": 3}`,\n right: `{\"a\": 2, \"b\": 2}`', /tmp/tmpcgxy6oo8.rs:31:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821434
- exit_code: 0
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut result: HashMap<String, isize>\
    \ = HashMap::new();\n    let mut occurrences: HashMap<String, isize> = HashMap::new();\n\
    \    let mut max_occurrence: isize = 0;\n\n    for letter in test.split_whitespace()\
    \ {\n        let current_occurrence = occurrences.entry(letter.to_string()).or_insert(0);\n\
    \        *current_occurrence += 1;\n        if *current_occurrence > max_occurrence\
    \ {\n            max_occurrence = *current_occurrence;\n        }\n    }\n\n \
    \   for (letter, occurrence) in occurrences {\n        if occurrence == max_occurrence\
    \ {\n            result.insert(letter, occurrence);\n        }\n    }\n\n    result\n\
    }\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821434
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut letters = HashMap::new();\n\
    \    for c in test.chars() {\n        let c = c.to_string();\n        let count\
    \ = letters.entry(c).or_insert(0);\n        *count += 1;\n    }\n    letters\n\
    }\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\" \": 3, \"b\": 2, \"a\": 2}`,\n right: `{\"a\": 2, \"b\": 2}`', /tmp/tmpp8o2yox6.rs:19:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821434
- exit_code: 1
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut h = HashMap::new();\n    for\
    \ c in test.chars() {\n        let cc = c.to_string();\n        let count = h.entry(cc).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut occ = Vec::new();\n    for (k, v) in\
    \ h.iter() {\n        if occ.len() == 0 {\n            occ.push(v);\n        }\
    \ else {\n            if *v > occ[0] {\n                occ.clear();\n       \
    \         occ.push(v);\n            } else if *v == occ[0] {\n               \
    \ occ.push(v);\n            }\n        }\n    }\n    let mut solution = HashMap::new();\n\
    \    for (k, v) in h.iter() {\n        if occ.contains(v) {\n            solution.insert(k.to_string(),\
    \ *v);\n        }\n    }\n    solution\n}\n\nfn main() {\n    let candidate =\
    \ histogram;\n    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `{integer}` with `&{integer}`\n  --> /tmp/tmpxk8zd5si.rs:19:19\n\
    \   |\n19 |             if *v > occ[0] {\n   |                   ^ no implementation\
    \ for `{integer} < &{integer}` and `{integer} > &{integer}`\n   |\n   = help:\
    \ the trait `PartialOrd<&{integer}>` is not implemented for `{integer}`\n\nerror[E0277]:\
    \ can't compare `{integer}` with `&{integer}`\n  --> /tmp/tmpxk8zd5si.rs:22:26\n\
    \   |\n22 |             } else if *v == occ[0] {\n   |                       \
    \   ^^ no implementation for `{integer} == &{integer}`\n   |\n   = help: the trait\
    \ `PartialEq<&{integer}>` is not implemented for `{integer}`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpxk8zd5si.rs:29:25\n   |\n29 |         if occ.contains(v)\
    \ {\n   |                         ^ expected `&{integer}`, found integer\n   |\n\
    \   = note: expected reference `&&{integer}`\n              found reference `&{integer}`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659821434
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut count = HashMap::new();\n \
    \   for c in test.split(\" \") {\n        let entry = count.entry(c.to_string()).or_insert(0);\n\
    \        *entry += 1;\n    }\n    let mut max = 0;\n    let mut res = HashMap::new();\n\
    \    for (k, v) in count {\n        if v > max {\n            max = v;\n     \
    \       res.clear();\n            res.insert(k, v);\n        } else if v == max\
    \ {\n            res.insert(k, v);\n        }\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"\": 1}`,\n right: `{}`', /tmp/tmpzsej42ck.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821434
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut occurences: HashMap<String,\
    \ isize> = HashMap::new();\n    let mut max_occurence: isize = 0;\n    for c in\
    \ test.chars() {\n        let v = occurences.entry(c.to_string()).or_insert(0);\n\
    \        *v += 1;\n        if *v > max_occurence {\n            max_occurence\
    \ = *v;\n        }\n    }\n    let mut result: HashMap<String, isize> = HashMap::new();\n\
    \    for (k, v) in occurences {\n        if v == max_occurence {\n           \
    \ result.insert(k, v);\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = histogram;\n    assert_eq!(candidate(String::from(\"a b b a\")),\
    \ HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\" \": 3}`,\n right: `{\"a\": 2, \"b\": 2}`', /tmp/tmprc3zimq7.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821434
- exit_code: 1
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    // if test.len() > 0 {\n    //    \
    \ let mut dict = HashMap::new();\n    //     for item in test.split(\" \") {\n\
    \    //         if dict.contains_key(item) {\n    //             dict.insert(item.to_string(),\
    \ dict.get(item).unwrap() + 1);\n    //         } else {\n    //             dict.insert(item.to_string(),\
    \ 1);\n    //         }\n    //     }\n    //     dict\n    // } else {\n    //\
    \     HashMap::new()\n    // }\n    if test.len() > 0 {\n        let mut dict\
    \ = HashMap::new();\n        for item in test.split(\" \") {\n            dict.entry(item).and_modify(|x|\
    \ { *x += 1 }).or_insert(1);\n        }\n        dict\n    } else {\n        HashMap::new()\n\
    \    }\n}\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpp78t2whi.rs:26:9\n   |\n\
    7  | fn histogram(test: String) -> HashMap<String, isize> {\n   |            \
    \                   ---------------------- expected `HashMap<String, isize>` because\
    \ of return type\n...\n26 |         dict\n   |         ^^^^ expected struct `String`,\
    \ found `&str`\n   |\n   = note: expected struct `HashMap<String, isize>`\n  \
    \            found struct `HashMap<&str, {integer}>`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659821434
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut dict: HashMap<String, isize>\
    \ = HashMap::new();\n    let v: Vec<&str> = test.split(\" \").collect();\n   \
    \ for s in v {\n        *dict.entry(s.to_string()).or_insert(0) += 1;\n    }\n\
    \    dict\n}\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"b\": 2, \"c\": 1, \"a\": 2}`,\n right: `{\"b\": 2, \"a\": 2}`', /tmp/tmp_7b9zmtk.rs:19:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821434
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    // create a mutable hash map to store\
    \ the resulting count\n    let mut result: HashMap<String, isize> = HashMap::new();\n\
    \    // create an array to store a mutable count for each letters in the alphabet\n\
    \    let mut alphabet_count: [isize; 26] = [0; 26];\n    // iterate over the received\
    \ string, converting every char to lowercase,\n    // subtracting the lowercase\
    \ `a` character unicode value and incrementing the\n    // corresponding count\
    \ in the array\n    for ch in test.chars() {\n        let key = ch.to_lowercase().to_string();\n\
    \        let count = result.entry(key).or_insert(0);\n        *count += 1;\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"a\": 2, \" \": 3, \"b\": 2}`,\n right: `{\"a\": 2, \"b\": 2}`', /tmp/tmp73h7wn63.rs:25:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821434
- exit_code: 1
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let split_test = test.split_whitespace();\n\
    \    let mut histogram = HashMap::new();\n    let mut max_letter = String::new();\n\
    \    let mut max_val = 0;\n    for val in split_test {\n        let count = histogram.entry(val.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max_val {\n            max_val = *count;\n\
    \            max_letter = val.to_string();\n        }\n    }\n    let mut result\
    \ = HashMap::new();\n    result.insert(max_letter, max_val);\n    for (key, val)\
    \ in histogram {\n        if val == max_val && key != max_letter {\n         \
    \   result.insert(key, val);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"a b b\
    \ a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `max_letter`\n  --> /tmp/tmp2l_dryev.rs:23:37\n\
    \   |\n10 |     let mut max_letter = String::new();\n   |         --------------\
    \ move occurs because `max_letter` has type `String`, which does not implement\
    \ the `Copy` trait\n...\n21 |     result.insert(max_letter, max_val);\n   |  \
    \                 ---------- value moved here\n22 |     for (key, val) in histogram\
    \ {\n23 |         if val == max_val && key != max_letter {\n   |             \
    \                        ^^^^^^^^^^ value borrowed here after move\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  stdout: ''
  timestamp: 1659821434
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut dict: HashMap<String, isize>\
    \ = HashMap::new();\n    let mut iter = test.split_whitespace();\n    for word\
    \ in iter {\n        let count = dict.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n    }\n    dict\n}\n\nfn main() {\n    let candidate =\
    \ histogram;\n    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"c\": 1, \"b\": 2, \"a\": 2}`,\n right: `{\"a\": 2, \"b\": 2}`', /tmp/tmpw87296mh.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821434
- exit_code: 1
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut split = test.split_whitespace();\n\
    \    let mut h = HashMap::new();\n    let mut max = 0;\n    let mut letters =\
    \ Vec::new();\n\n    for i in split {\n        let letter = i.to_string();\n \
    \       let count = h.entry(letter).or_insert(0);\n        *count += 1;\n    \
    \    if *count > max {\n            max = *count;\n            letters.clear();\n\
    \            letters.push(letter);\n        } else if *count == max {\n      \
    \      letters.push(letter);\n        }\n    }\n\n    let mut result = HashMap::new();\n\
    \    for letter in letters {\n        result.insert(letter, max);\n    }\n   \
    \ result\n}\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: SyntaxError
  stderr: "warning: variable does not need to be mutable\n --> /tmp/tmpoqxhtn0h.rs:8:9\n\
    \  |\n8 |     let mut split = test.split_whitespace();\n  |         ----^^^^^\n\
    \  |         |\n  |         help: remove this `mut`\n  |\n  = note: `#[warn(unused_mut)]`\
    \ on by default\n\nerror[E0382]: use of moved value: `letter`\n  --> /tmp/tmpoqxhtn0h.rs:20:26\n\
    \   |\n14 |         let letter = i.to_string();\n   |             ------ move\
    \ occurs because `letter` has type `String`, which does not implement the `Copy`\
    \ trait\n15 |         let count = h.entry(letter).or_insert(0);\n   |        \
    \                     ------ value moved here\n...\n20 |             letters.push(letter);\n\
    \   |                          ^^^^^^ value used here after move\n\nerror: aborting\
    \ due to previous error; 1 warning emitted\n\nFor more information about this\
    \ error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659821434
- exit_code: 0
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut res = HashMap::new();\n   \
    \ let mut most_occur = 0;\n    let mut curr_count: isize;\n    for val in test.split_whitespace()\
    \ {\n        curr_count = match res.get(val) {\n            Some(count) => *count\
    \ + 1,\n            None => 1,\n        };\n        res.insert(val.to_string(),\
    \ curr_count);\n        if curr_count > most_occur {\n            most_occur =\
    \ curr_count;\n        }\n    }\n    res.retain(|_, v| *v == most_occur);\n  \
    \  res\n}\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821434
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut count = HashMap::new();\n \
    \   let mut keys = vec![];\n    let mut max = 0;\n    let mut output = HashMap::new();\n\
    \n    let test = test.split(\" \").collect::<Vec<&str>>();\n\n    for key in test\
    \ {\n        let counter = count.entry(key).or_insert(0);\n        *counter +=\
    \ 1;\n    }\n\n    for (key, val) in count.iter() {\n        if val > &max {\n\
    \            max = *val;\n            keys = vec![key.to_string()];\n        }\
    \ else if val == &max {\n            keys.push(key.to_string());\n        }\n\
    \    }\n\n    for key in keys {\n        output.insert(key, max);\n    }\n\n \
    \   output\n}\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"\": 1}`,\n right: `{}`', /tmp/tmp31kj5lek.rs:44:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821434
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut counts: HashMap<String, isize>\
    \ = HashMap::new();\n    for ch in test.chars() {\n        let count = counts.entry(ch.to_string()).or_insert(0);\n\
    \        *count += 1;\n    }\n    counts\n}\n\nfn main() {\n    let candidate\
    \ = histogram;\n    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"b\": 2, \"a\": 2, \" \": 3}`,\n right: `{\"b\": 2, \"a\": 2}`', /tmp/tmpaidkiuap.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821434
- exit_code: 1
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    test.chars()\n        .fold(HashMap::new(),\
    \ |mut map, ch| {\n            let count = map.entry(ch.to_string()).or_insert(0);\n\
    \            *count += 1;\n            map\n        })\n        .iter()\n    \
    \    .filter(|&(_, &v)| v == most_repetitions(&test))\n        .cloned()\n   \
    \     .collect()\n}\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `most_repetitions` in this scope\n \
    \ --> /tmp/tmpgd6k8kci.rs:15:33\n   |\n15 |         .filter(|&(_, &v)| v == most_repetitions(&test))\n\
    \   |                                 ^^^^^^^^^^^^^^^^ not found in this scope\n\
    \nerror[E0271]: type mismatch resolving `<Filter<std::collections::hash_map::Iter<'_,\
    \ String, {integer}>, [closure@/tmp/tmpgd6k8kci.rs:15:17: 15:56]> as Iterator>::Item\
    \ == &_`\n  --> /tmp/tmpgd6k8kci.rs:16:10\n   |\n16 |         .cloned()\n   |\
    \          ^^^^^^ expected tuple, found reference\n   |\n   = note:  expected\
    \ tuple `(&String, &{integer})`\n           found reference `&_`\n\nerror[E0599]:\
    \ the method `collect` exists for struct `Cloned<Filter<std::collections::hash_map::Iter<'_,\
    \ String, {integer}>, [closure@/tmp/tmpgd6k8kci.rs:15:17: 15:56]>>`, but its trait\
    \ bounds were not satisfied\n  --> /tmp/tmpgd6k8kci.rs:17:10\n   |\n17 |     \
    \       .collect()\n   |             ^^^^^^^ method cannot be called on `Cloned<Filter<std::collections::hash_map::Iter<'_,\
    \ String, {integer}>, [closure@/tmp/tmpgd6k8kci.rs:15:17: 15:56]>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<Filter<std::collections::hash_map::Iter<'_, String, {integer}>,\
    \ [closure@/tmp/tmpgd6k8kci.rs:15:17: 15:56]> as Iterator>::Item = &_`\n     \
    \      which is required by `Cloned<Filter<std::collections::hash_map::Iter<'_,\
    \ String, {integer}>, [closure@/tmp/tmpgd6k8kci.rs:15:17: 15:56]>>: Iterator`\n\
    \           `Cloned<Filter<std::collections::hash_map::Iter<'_, String, {integer}>,\
    \ [closure@/tmp/tmpgd6k8kci.rs:15:17: 15:56]>>: Iterator`\n           which is\
    \ required by `&mut Cloned<Filter<std::collections::hash_map::Iter<'_, String,\
    \ {integer}>, [closure@/tmp/tmpgd6k8kci.rs:15:17: 15:56]>>: Iterator`\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0271, E0425, E0599.\nFor more information about an error, try `rustc --explain\
    \ E0271`.\n"
  stdout: ''
  timestamp: 1659821434
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut ret_map: HashMap<String, isize>\
    \ = HashMap::new();\n    let mut words = test.split_whitespace();\n    while let\
    \ Some(word) = words.next() {\n        *ret_map.entry(word.to_string()).or_insert(0)\
    \ += 1;\n    }\n    let max_count = {\n        let mut v = ret_map.values().cloned().collect::<Vec<isize>>();\n\
    \        v.sort();\n        v.pop().unwrap()\n    };\n    ret_map.retain(|_, v|\
    \ *v == max_count);\n    ret_map\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpqlnwsifh.rs:16:17

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659821434
- exit_code: 1
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut histogram: HashMap<String,\
    \ isize> = HashMap::new();\n    let mut maximum: isize = 0;\n    let v: Vec<&str>\
    \ = test.split_whitespace().collect();\n    for word in v {\n        if histogram.contains_key(word)\
    \ {\n            let count = histogram.get_mut(word).unwrap();\n            *count\
    \ += 1;\n            if *count > maximum {\n                maximum = *count;\n\
    \            }\n        } else {\n            histogram.insert(word.to_string(),\
    \ 1);\n        }\n    }\n    println!(\"{}\", maximum);\n    for i in &histogram\
    \ {\n        if i.1 == maximum {\n            println!(\"{}\", i.0);\n       \
    \ }\n    }\n    return histogram;\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&isize` with `isize`\n  --> /tmp/tmpbd7263uf.rs:24:16\n\
    \   |\n24 |         if i.1 == maximum {\n   |                ^^ no implementation\
    \ for `&isize == isize`\n   |\n   = help: the trait `PartialEq<isize>` is not\
    \ implemented for `&isize`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659821434
- exit_code: 1
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    // create a new empty vector of strings\n\
    \    let mut unique_letters: Vec<String> = Vec::new();\n    // split the string\
    \ into a vector of letters and store it into s_letters\n    let mut s_letters:\
    \ Vec<String> = test.split_whitespace().map(|x| x.to_string()).collect();\n  \
    \  // loop through all letters in s_letters\n    while s_letters.len() > 0 {\n\
    \        // get the last element in s_letters and store it into target\n     \
    \   let target = s_letters.pop().unwrap();\n        // if the vector unique_letters\
    \ does not contain the target letter, push it to unique_letters\n        if !unique_letters.contains(&target)\
    \ {\n            unique_letters.push(target);\n        }\n    }\n    // create\
    \ a new empty HashMap\n    let mut result: HashMap<String, isize> = HashMap::new();\n\
    \    // loop through all letters in unique_letters\n    for letter in unique_letters\
    \ {\n        // store the number of occurrences of each letter in s_letters into\
    \ l_count\n        let l_count = s_letters.iter().filter(|x| x == &letter).count()\
    \ as isize;\n        // push the letter and its corresponding count to the HashMap\n\
    \        result.insert(letter, l_count);\n    }\n    // return the HashMap\n \
    \   result\n}\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&String` with `String`\n  --> /tmp/tmp9sl378i7.rs:26:53\n\
    \   |\n26 |         let l_count = s_letters.iter().filter(|x| x == &letter).count()\
    \ as isize;\n   |                                                     ^^ no implementation\
    \ for `&String == String`\n   |\n   = help: the trait `PartialEq<String>` is not\
    \ implemented for `&String`\n   = note: required because of the requirements on\
    \ the impl of `PartialEq<&String>` for `&&String`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659821434
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut chars: HashMap<String, isize>\
    \ = HashMap::new();\n    let test_vec: Vec<String> = test.split(\" \").map(|s|\
    \ s.to_string()).collect();\n    for char in test_vec {\n        let count = chars.entry(char).or_insert(0);\n\
    \        *count += 1;\n    }\n    chars\n}\n\nfn main() {\n    let candidate =\
    \ histogram;\n    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"a\": 2, \"b\": 2, \"c\": 1}`,\n right: `{\"a\": 2, \"b\": 2}`', /tmp/tmp29t5p_el.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821434
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut dict: HashMap<String, isize>\
    \ = HashMap::new();\n    for c in test.chars() {\n        let key = c.to_string();\n\
    \        if dict.contains_key(&key) {\n            let counter = dict.get_mut(&key).unwrap();\n\
    \            *counter += 1;\n        } else {\n            dict.insert(key, 1);\n\
    \        }\n    }\n    dict\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"b\": 2, \"a\": 2, \" \": 3}`,\n right: `{\"b\": 2, \"a\": 2}`', /tmp/tmp0o83i7ax.rs:23:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821434
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut h: HashMap<String, isize> =\
    \ HashMap::new();\n    let split: Vec<&str> = test.split(\" \").collect();\n \
    \   for s in split {\n        let key = String::from(s);\n        let count =\
    \ h.entry(key).or_insert(0);\n        *count += 1;\n    }\n    h\n}\n\nfn main()\
    \ {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"c\": 1, \"b\": 2, \"a\": 2}`,\n right: `{\"b\": 2, \"a\": 2}`', /tmp/tmpt76mxuao.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821434
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut map = HashMap::new();\n   \
    \ for ch in test.split_whitespace() {\n        let counter = map.entry(ch.to_string()).or_insert(0);\n\
    \        *counter += 1;\n    }\n    map\n}\n\nfn main() {\n    let candidate =\
    \ histogram;\n    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"a\": 2, \"b\": 2, \"c\": 1}`,\n right: `{\"a\": 2, \"b\": 2}`', /tmp/tmp_oe81c94.rs:19:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821434
- exit_code: 0
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut map = HashMap::new();\n   \
    \ let mut max_count = 0;\n    let letters = test.split_whitespace();\n    for\
    \ letter in letters {\n        let count = map.entry(letter.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max_count {\n            max_count\
    \ = *count;\n        }\n    }\n    let mut output = HashMap::new();\n    for (key,\
    \ val) in map {\n        if val == max_count {\n            output.insert(key,\
    \ val);\n        }\n    }\n    output\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821434
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut result: HashMap<String, isize>\
    \ = HashMap::new();\n    let mut max = 0;\n    let values: Vec<String> = test.split(\"\
    \ \").map(|s| s.to_string()).collect();\n    let frequencies: HashMap<String,\
    \ isize> = values.iter().fold(HashMap::new(), |mut map, letter| {\n        let\
    \ count = map.entry(letter.to_string()).or_insert(0);\n        *count += 1;\n\
    \        map\n    });\n    for (key, value) in frequencies.iter() {\n        if\
    \ *value > max {\n            max = *value;\n        }\n    }\n    for (key, value)\
    \ in frequencies.iter() {\n        if *value == max {\n            result.insert(key.to_string(),\
    \ *value);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = histogram;\n    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"\": 1}`,\n right: `{}`', /tmp/tmpz85hipd8.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821434
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut counter = HashMap::new();\n\
    \    let mut result = HashMap::new();\n    let mut value = 0;\n    for c in test.chars()\
    \ {\n        let count = counter.entry(c.to_string()).or_insert(0);\n        *count\
    \ += 1;\n    }\n    for (key, val) in counter.iter() {\n        if val > &value\
    \ {\n            value = *val;\n            result.clear();\n            result.insert(key.to_string(),\
    \ *val);\n        } else if val == &value {\n            result.insert(key.to_string(),\
    \ *val);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate =\
    \ histogram;\n    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\" \": 3}`,\n right: `{\"b\": 2, \"a\": 2}`', /tmp/tmpr1gzsxo6.rs:29:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821434
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut my_str = test.as_str();\n \
    \   let mut dict: HashMap<String, isize> = HashMap::new();\n    while my_str.len()\
    \ > 0 {\n        let mut count = 0;\n        let mut char_res = my_str.chars().next().unwrap().to_string();\n\
    \        loop {\n            if !my_str.is_empty() && &my_str[0..1] == char_res.as_str()\
    \ {\n                count += 1;\n                my_str = &my_str[1..];\n   \
    \         } else {\n                break;\n            }\n        }\n       \
    \ dict.insert(char_res, count);\n    }\n    dict\n}\n\nfn main() {\n    let candidate\
    \ = histogram;\n    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"a\": 1, \"b\": 1, \" \": 1}`,\n right: `{\"b\": 2, \"a\": 2}`', /tmp/tmp79rvcysr.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821435
- exit_code: 1
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut dict: HashMap<String, isize>\
    \ = HashMap::new();\n    let letters: Vec<&str> = test.split(\" \").collect();\n\
    \    let mut letter_count: isize = 0;\n    for i in letters {\n        if *dict.get(i).unwrap_or(&0)\
    \ == 0 {\n            dict.insert(i.to_string(), 1);\n        } else {\n     \
    \       let current_count = dict.get(i).unwrap();\n            let new_count =\
    \ current_count + 1;\n            dict.insert(i.to_string(), new_count);\n   \
    \     }\n    }\n    // For each of the keys in the dictionary, keep a track of\
    \ the max value.\n    for key in dict.keys() {\n        let new_count = dict.get(key).unwrap();\n\
    \        if new_count > &letter_count {\n            letter_count = *new_count;\n\
    \        }\n    }\n    // Iterate through the dictionary and remove all keys with\
    \ a value less than\n    // the max value.\n    for (key, val) in dict.iter()\
    \ {\n        if val < &letter_count {\n            dict.remove(key);\n       \
    \ }\n    }\n    dict\n}\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: SyntaxError
  stderr: "error[E0502]: cannot borrow `dict` as mutable because it is also borrowed\
    \ as immutable\n  --> /tmp/tmppl1f8axi.rs:31:13\n   |\n29 |     for (key, val)\
    \ in dict.iter() {\n   |                       -----------\n   |             \
    \          |\n   |                       immutable borrow occurs here\n   |  \
    \                     immutable borrow later used here\n30 |         if val <\
    \ &letter_count {\n31 |             dict.remove(key);\n   |             ^^^^^^^^^^^^^^^^\
    \ mutable borrow occurs here\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1659821434
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut dict: HashMap<String, isize>\
    \ = HashMap::new();\n    let mut max_value: isize = 0;\n    for letter in test.split(\"\
    \ \") {\n        let count = dict.entry(letter.to_string()).or_insert(0);\n  \
    \      *count += 1;\n        if *count > max_value {\n            max_value =\
    \ *count;\n        }\n    }\n    dict.retain(|_, &mut v| v == max_value);\n  \
    \  dict\n}\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"\": 1}`,\n right: `{}`', /tmp/tmpexrg9_ss.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821435
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    // Return a map of the frequency of\
    \ each letter\n\n    let mut result = HashMap::new();\n    for c in test.split_whitespace()\
    \ {\n        let counter = result.entry(c.to_string()).or_insert(0);\n       \
    \ *counter += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"b\": 2, \"c\": 1, \"a\": 2}`,\n right: `{\"b\": 2, \"a\": 2}`', /tmp/tmp7x6ntqq8.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821435
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut letters: HashMap<String, isize>\
    \ = HashMap::new();\n    let str: Vec<&str> = test.split(\" \").collect();\n \
    \   for i in str {\n        let count = letters.entry(i.to_string()).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max_letters: HashMap<String, isize>\
    \ = HashMap::new();\n    let mut max_count = 0;\n    for (k, v) in letters.iter()\
    \ {\n        if *v > max_count {\n            max_count = *v;\n            max_letters.clear();\n\
    \            max_letters.insert(k.to_string(), v.to_owned());\n        } else\
    \ if *v == max_count {\n            max_letters.insert(k.to_string(), v.to_owned());\n\
    \        }\n    }\n    max_letters\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"\": 1}`,\n right: `{}`', /tmp/tmpq85naj8m.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821435
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut dict: HashMap<String, isize>\
    \ = HashMap::new();\n    for c in test.split(\" \") {\n        let count = dict.entry(c.to_string()).or_insert(0);\n\
    \        *count += 1;\n    }\n    dict\n}\n\nfn main() {\n    let candidate =\
    \ histogram;\n    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"b\": 2, \"a\": 2, \"c\": 1}`,\n right: `{\"a\": 2, \"b\": 2}`', /tmp/tmpg4agi4op.rs:19:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821435
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut occurrences: HashMap<String,\
    \ isize> = HashMap::new();\n    for letter in test.split_whitespace() {\n    \
    \    if let Some(count) = occurrences.get_mut(letter) {\n            *count +=\
    \ 1;\n        } else {\n            occurrences.insert(letter.to_string(), 1);\n\
    \        }\n    }\n    occurrences\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"a\": 2, \"c\": 1, \"b\": 2}`,\n right: `{\"a\": 2, \"b\": 2}`', /tmp/tmp88r1qvhe.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821435
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut map = HashMap::new();\n   \
    \ for letter in test.split(\" \") {\n        let count = map.entry(letter.to_string()).or_insert(0);\n\
    \        *count += 1;\n    }\n    map\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"c\": 1, \"b\": 2, \"a\": 2}`,\n right: `{\"b\": 2, \"a\": 2}`', /tmp/tmp175srv40.rs:19:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821435
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut counter = HashMap::new();\n\
    \    let mut max = 0;\n    let mut result = HashMap::new();\n\n    for c in test.chars()\
    \ {\n        *counter.entry(c).or_insert(0) += 1;\n    }\n\n    for (k, v) in\
    \ counter {\n        if v > max {\n            max = v;\n            result.clear();\n\
    \            result.insert(k.to_string(), v as isize);\n        } else if v ==\
    \ max {\n            result.insert(k.to_string(), v as isize);\n        }\n  \
    \  }\n\n    result\n}\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\" \": 3}`,\n right: `{\"a\": 2, \"b\": 2}`', /tmp/tmp1ywrk05r.rs:31:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821435
- exit_code: 0
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut map = HashMap::new();\n   \
    \ let mut max = 0;\n    for letter in test.split_whitespace() {\n        let count\
    \ = map.entry(letter.to_string()).or_insert(0);\n        *count += 1;\n      \
    \  if *count > max {\n            max = *count;\n        }\n    }\n    map.retain(|_,\
    \ &mut v| v == max);\n    map\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821435
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut map = HashMap::new();\n   \
    \ for word in test.split_whitespace() {\n        let count = map.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n    }\n    map\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"a\": 2, \"b\": 2, \"c\": 1}`,\n right: `{\"b\": 2, \"a\": 2}`', /tmp/tmp8euqmbv8.rs:19:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821435
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut letters = HashMap::new();\n\
    \    for letter in test.split(\" \") {\n        let letter_count = letters.entry(letter.to_string()).or_insert(0);\n\
    \        *letter_count += 1;\n    }\n    let mut max_count = 0;\n    let mut max_letters\
    \ = Vec::new();\n    for (letter, count) in letters {\n        if count > max_count\
    \ {\n            max_count = count;\n            max_letters = vec![letter];\n\
    \        } else if count == max_count {\n            max_letters.push(letter);\n\
    \        }\n    }\n    let mut result = HashMap::new();\n    for letter in max_letters\
    \ {\n        result.insert(letter, max_count);\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"\": 1}`,\n right: `{}`', /tmp/tmp3yfgw386.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821435
- exit_code: 1
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    test.chars()\n        .collect::<HashMap<char,\
    \ isize>>()\n        .iter()\n        .fold(HashMap::new(), |mut acc, (c, count)|\
    \ {\n            if acc.is_empty() {\n                acc.insert(c.to_string(),\
    \ *count);\n            } else {\n                match acc.get(&count.to_string())\
    \ {\n                    Some(char_count) => {\n                        let mut\
    \ char_count = char_count.clone();\n                        char_count.push_str(c);\n\
    \                        acc.insert(count.to_string(), char_count);\n        \
    \            }\n                    None => {\n                        acc.insert(c.to_string(),\
    \ *count);\n                    }\n                }\n            }\n        \
    \    acc\n        })\n}\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `HashMap<char, isize>` cannot be built from\
    \ an iterator over elements of type `char`\n --> /tmp/tmp6zk8e0ye.rs:9:10\n  |\n\
    9 |         .collect::<HashMap<char, isize>>()\n  |          ^^^^^^^ value of\
    \ type `HashMap<char, isize>` cannot be built from `std::iter::Iterator<Item=char>`\n\
    \  |\n  = help: the trait `FromIterator<char>` is not implemented for `HashMap<char,\
    \ isize>`\n\nerror[E0599]: no method named `push_str` found for type `isize` in\
    \ the current scope\n  --> /tmp/tmp6zk8e0ye.rs:18:36\n   |\n18 |             \
    \            char_count.push_str(c);\n   |                                   \
    \ ^^^^^^^^ method not found in `isize`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659821434
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut histo = HashMap::new();\n \
    \   for letter in test.split_whitespace() {\n        *histo.entry(letter.to_string()).or_insert(0)\
    \ += 1;\n    }\n    return histo;\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"c\": 1, \"a\": 2, \"b\": 2}`,\n right: `{\"b\": 2, \"a\": 2}`', /tmp/tmpsqm1adlp.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821435
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut hist = HashMap::new();\n  \
    \  for c in test.chars() {\n        let counter = hist.entry(c.to_string()).or_insert(0);\n\
    \        *counter += 1;\n    }\n    let max_val = hist.values().max().unwrap();\n\
    \    let max_val_iter = hist.iter().filter(|&(_, &count)| count == *max_val);\n\
    \    let mut answer = HashMap::new();\n    for (key, &val) in max_val_iter {\n\
    \        answer.insert(key.to_string(), val);\n    }\n    answer\n}\n\nfn main()\
    \ {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\" \": 3}`,\n right: `{\"b\": 2, \"a\": 2}`', /tmp/tmpzfg29cct.rs:24:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821435
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut histo = HashMap::new();\n \
    \   let mut max_value = 0;\n    let mut max_keys = vec![];\n\n    for c in test.chars()\
    \ {\n        let value = histo.entry(c.to_string()).or_insert(0);\n        *value\
    \ += 1;\n        if *value > max_value {\n            max_value = *value;\n  \
    \          max_keys = vec![c.to_string()];\n        } else if *value == max_value\
    \ {\n            max_keys.push(c.to_string());\n        }\n    }\n\n    let mut\
    \ output = HashMap::new();\n    for key in max_keys {\n        output.insert(key,\
    \ max_value);\n    }\n    output\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\" \": 3}`,\n right: `{\"b\": 2, \"a\": 2}`', /tmp/tmpk8ew2ecl.rs:32:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821435
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut letters = HashMap::new();\n\
    \    for letter in test.split(\" \") {\n        let count = letters.entry(letter.to_string()).or_insert(0);\n\
    \        *count += 1;\n    }\n    letters\n}\n\nfn main() {\n    let candidate\
    \ = histogram;\n    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"c\": 1, \"b\": 2, \"a\": 2}`,\n right: `{\"a\": 2, \"b\": 2}`', /tmp/tmpzyz057dh.rs:19:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821435
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    test.split_whitespace()\n        .fold(HashMap::new(),\
    \ |mut acc, w| {\n            *acc.entry(w.to_string()).or_insert(0) += 1;\n \
    \           acc\n        })\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"b\": 2, \"c\": 1, \"a\": 2}`,\n right: `{\"a\": 2, \"b\": 2}`', /tmp/tmpq1_qu5dy.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821435
- exit_code: 0
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut letters = HashMap::new();\n\
    \    for letter in test.split_whitespace() {\n        let counter = letters.entry(letter.to_string()).or_insert(0);\n\
    \        *counter += 1;\n    }\n    let mut max_count = 0;\n    for (_, count)\
    \ in letters.iter() {\n        if *count > max_count {\n            max_count\
    \ = *count;\n        }\n    }\n    let mut result = HashMap::new();\n    for (letter,\
    \ count) in letters.iter() {\n        if *count == max_count {\n            result.insert(letter.to_string(),\
    \ *count);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = histogram;\n    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821435
- exit_code: 0
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut occurences: HashMap<String,\
    \ isize> = HashMap::new();\n    let vec_of_chars: Vec<String> = test.split_whitespace().map(String::from).collect();\n\
    \    let mut highest_count: isize = 0;\n    for i in vec_of_chars {\n        let\
    \ count = occurences.entry(i).or_insert(0);\n        *count += 1;\n        if\
    \ *count > highest_count {\n            highest_count = *count;\n        }\n \
    \   }\n    let mut results: HashMap<String, isize> = HashMap::new();\n    for\
    \ (letter, count) in occurences {\n        if count == highest_count {\n     \
    \       results.insert(letter, count);\n        }\n    }\n    results\n}\n\nfn\
    \ main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821435
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut chars = test.chars().map(|c|\
    \ c.to_string()).collect::<Vec<String>>();\n    chars.sort();\n    let mut output\
    \ = HashMap::new();\n    let mut max_count = 0;\n    let mut count = 0;\n    let\
    \ mut letter = String::new();\n    for i in chars {\n        if letter == i {\n\
    \            count += 1;\n        } else {\n            if count > max_count {\n\
    \                max_count = count;\n                output.clear();\n       \
    \         output.insert(letter, count);\n            } else if count == max_count\
    \ {\n                output.insert(letter, count);\n            }\n          \
    \  letter = i;\n            count = 1;\n        }\n    }\n    if count > max_count\
    \ {\n        max_count = count;\n        output.clear();\n        output.insert(letter,\
    \ count);\n    } else if count == max_count {\n        output.insert(letter, count);\n\
    \    }\n    output\n}\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\" \": 3}`,\n right: `{\"b\": 2, \"a\": 2}`', /tmp/tmp1kp03_l5.rs:41:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821435
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut map = HashMap::new();\n   \
    \ for letter in test.split_whitespace() {\n        let counter = map.entry(letter.to_string()).or_insert(0);\n\
    \        *counter += 1;\n    }\n    map\n}\n\nfn main() {\n    let candidate =\
    \ histogram;\n    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"a\": 2, \"b\": 2, \"c\": 1}`,\n right: `{\"a\": 2, \"b\": 2}`', /tmp/tmp0xlkaznh.rs:19:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821435
- exit_code: 0
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut dict: HashMap<String, isize>\
    \ = HashMap::new();\n    let test_split: Vec<&str> = test.split_whitespace().collect();\n\
    \    let mut current_max = 0;\n    for word in test_split {\n        let count\
    \ = dict.entry(word.to_string()).or_insert(0);\n        *count += 1;\n       \
    \ if *count > current_max {\n            current_max = *count;\n        }\n  \
    \  }\n    let mut output: HashMap<String, isize> = HashMap::new();\n    for (word,\
    \ count) in dict {\n        if count == current_max {\n            output.insert(word,\
    \ count);\n        }\n    }\n    output\n}\n\nfn main() {\n    let candidate =\
    \ histogram;\n    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821435
- exit_code: 0
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut letters = HashMap::new();\n\
    \    for c in test.split_whitespace() {\n        *letters.entry(c.to_string()).or_insert(0)\
    \ += 1;\n    }\n    let mut maximum = 0;\n    for (_, value) in letters.iter()\
    \ {\n        if *value > maximum {\n            maximum = *value;\n        }\n\
    \    }\n    let mut result = HashMap::new();\n    for (key, value) in letters.iter()\
    \ {\n        if *value == maximum {\n            result.insert(key.to_string(),\
    \ *value);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = histogram;\n    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821435
- exit_code: 1
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut counts: HashMap<String, isize>\
    \ = HashMap::new();\n    let mut highest_count: isize = 0;\n    let words: Vec<&str>\
    \ = test.split(\" \").collect();\n    let mut highest_letters: Vec<String> = Vec::new();\n\
    \n    for word in words {\n        let count = counts.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > highest_count {\n            highest_count\
    \ = *count;\n            highest_letters.clear();\n            highest_letters.push(word.to_string());\n\
    \        } else if *count == highest_count {\n            highest_letters.push(word.to_string());\n\
    \        }\n    }\n\n    highest_letters.into_iter().zip(vec![highest_count; highest_letters.len()].into_iter()).collect()\n\
    }\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `highest_letters`\n   --> /tmp/tmpdj7sohf1.rs:25:57\n\
    \    |\n11  |     let mut highest_letters: Vec<String> = Vec::new();\n    |  \
    \       ------------------- move occurs because `highest_letters` has type `Vec<String>`,\
    \ which does not implement the `Copy` trait\n...\n25  |     highest_letters.into_iter().zip(vec![highest_count;\
    \ highest_letters.len()].into_iter()).collect()\n    |                     -----------\
    \                         ^^^^^^^^^^^^^^^ value borrowed here after move\n   \
    \ |                     |\n    |                     `highest_letters` moved due\
    \ to this method call\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `highest_letters`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659821435
- exit_code: 0
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut table = HashMap::new();\n \
    \   let mut hist = HashMap::new();\n    for i in test.split_whitespace() {\n \
    \       let count = table.entry(i.to_string()).or_insert(0);\n        *count +=\
    \ 1;\n    }\n    let mut max = 0;\n    for (word, count) in &table {\n       \
    \ if count > &max {\n            max = *count;\n        }\n    }\n    for (word,\
    \ count) in &table {\n        if count == &max {\n            hist.insert(word.to_string(),\
    \ *count);\n        }\n    }\n    hist\n}\n\nfn main() {\n    let candidate =\
    \ histogram;\n    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821435
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut hist = HashMap::new();\n  \
    \  let mut max = 0;\n    let mut s = String::new();\n    let mut v = Vec::new();\n\
    \    for c in test.split_whitespace() {\n        if let Some(val) = hist.get_mut(c)\
    \ {\n            *val += 1;\n            if *val == max {\n                v.push(c.to_string());\n\
    \            } else if *val > max {\n                max = *val;\n           \
    \     v.clear();\n                v.push(c.to_string());\n            }\n    \
    \    } else {\n            hist.insert(c.to_string(), 1);\n        }\n    }\n\
    \    for item in v {\n        s.push_str(&item);\n        s.push(' ');\n    }\n\
    \    let mut res = HashMap::new();\n    res.insert(s, max);\n    res\n}\n\nfn\
    \ main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"b a \": 2}`,\n right: `{\"a\": 2, \"b\": 2}`', /tmp/tmpp9ukn3f6.rs:37:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821435
- exit_code: 0
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let letters = test.split_whitespace();\n\
    \    let mut map: HashMap<String, isize> = HashMap::new();\n    let mut max_occurrence\
    \ = 0;\n    let mut result: HashMap<String, isize> = HashMap::new();\n\n    for\
    \ letter in letters {\n        let letter_key = letter.to_string();\n        let\
    \ count = map.entry(letter_key).or_insert(0);\n        *count += 1;\n        if\
    \ *count > max_occurrence {\n            max_occurrence = *count;\n        }\n\
    \    }\n\n    for (key, value) in map {\n        if value == max_occurrence {\n\
    \            result.insert(key, value);\n        }\n    }\n\n    result\n}\n\n\
    fn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821435
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut map = HashMap::new();\n   \
    \ for letter in test.split(\" \") {\n        let count = map.entry(letter.to_string()).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut res = HashMap::new();\n    let mut max\
    \ = 0;\n    for (key, value) in map.iter() {\n        if value > &max {\n    \
    \        max = *value;\n            res.clear();\n            res.insert(key.to_string(),\
    \ *value);\n        } else if value == &max {\n            res.insert(key.to_string(),\
    \ *value);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"\": 1}`,\n right: `{}`', /tmp/tmpqdhriy31.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821435
- exit_code: 0
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut histogram = HashMap::new();\n\
    \    let mut best_count = 0;\n    for ch in test.split_whitespace() {\n      \
    \  let count = histogram.entry(ch.to_string()).or_insert(0);\n        *count +=\
    \ 1;\n        if *count > best_count {\n            best_count = *count;\n   \
    \     }\n    }\n    let mut result = HashMap::new();\n    for key in histogram.keys()\
    \ {\n        if *histogram.get(key).unwrap() == best_count {\n            result.insert(key.to_string(),\
    \ best_count);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = histogram;\n    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821435
- exit_code: 1
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut result: HashMap<String, isize>\
    \ = HashMap::new();\n    let mut letter_map: HashMap<String, isize> = HashMap::new();\n\
    \    let letters: Vec<String> = test.split(\" \").map(|s| s.to_string()).collect();\n\
    \    for letter in letters {\n        let count = letter_map.entry(letter.clone()).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max_value = 0;\n    for letter in letters\
    \ {\n        let max_value_before = max_value;\n        let count = letter_map.get(&letter).unwrap();\n\
    \        if *count > max_value {\n            max_value = *count;\n        }\n\
    \        if *count >= max_value_before {\n            result.insert(letter, *count);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `letters`\n   --> /tmp/tmp5yn70n8o.rs:16:19\n\
    \    |\n10  |     let letters: Vec<String> = test.split(\" \").map(|s| s.to_string()).collect();\n\
    \    |         ------- move occurs because `letters` has type `Vec<String>`, which\
    \ does not implement the `Copy` trait\n11  |     for letter in letters {\n   \
    \ |                   -------\n    |                   |\n    |              \
    \     `letters` moved due to this implicit call to `.into_iter()`\n    |     \
    \              help: consider borrowing to avoid moving into the for loop: `&letters`\n\
    ...\n16  |     for letter in letters {\n    |                   ^^^^^^^ value\
    \ used here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `letters`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659821435
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut map = HashMap::new();\n   \
    \ for c in test.split(\" \") {\n        *map.entry(c.to_string()).or_insert(0)\
    \ += 1;\n    }\n    map\n}\n\nfn main() {\n    let candidate = histogram;\n  \
    \  assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"c\": 1, \"a\": 2, \"b\": 2}`,\n right: `{\"a\": 2, \"b\": 2}`', /tmp/tmprdllks7h.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821435
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut dict: HashMap<String, isize>\
    \ = HashMap::new();\n    let mut highest_count: isize = 0;\n    let mut highest_letters:\
    \ Vec<String> = Vec::new();\n\n    for letter in test.split(\" \") {\n       \
    \ if dict.contains_key(letter) {\n            dict.insert(letter.to_string(),\
    \ dict.get(letter).unwrap() + 1);\n        } else {\n            dict.insert(letter.to_string(),\
    \ 1);\n        }\n    }\n\n    // Iterate over the dictionary to find the highest\
    \ repeat\n    for (letter, count) in dict.iter() {\n        if count > &highest_count\
    \ {\n            highest_count = *count;\n            highest_letters.clear();\n\
    \            highest_letters.push(letter.to_string());\n        } else if count\
    \ == &highest_count {\n            highest_letters.push(letter.to_string());\n\
    \        }\n    }\n\n    let mut final_dict: HashMap<String, isize> = HashMap::new();\n\
    \    for letter in highest_letters {\n        final_dict.insert(letter, highest_count);\n\
    \    }\n\n    final_dict\n}\n\nfn main() {\n    let candidate = histogram;\n \
    \   assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"\": 1}`,\n right: `{}`', /tmp/tmpbz3ydwj3.rs:47:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821435
- exit_code: 1
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut v : Vec<char> = test.chars().collect();\n\
    \    v.sort();\n    let mut map : HashMap<String, isize> = HashMap::new();\n \
    \   let mut max_count = 0;\n    let mut previous_letter : char = ' ';\n    let\
    \ mut letter_count = 0;\n    for i in v {\n        if i == previous_letter {\n\
    \            letter_count += 1;\n        } else {\n            if letter_count\
    \ > max_count {\n                max_count = letter_count;\n            }\n  \
    \          letter_count = 1;\n            previous_letter = i;\n        }\n  \
    \  }\n    if letter_count > max_count {\n        max_count = letter_count;\n \
    \   }\n    letter_count = 0;\n    previous_letter = ' ';\n    for i in v {\n \
    \       if i == previous_letter {\n            letter_count += 1;\n        } else\
    \ {\n            if letter_count == max_count {\n                map.insert(previous_letter.to_string(),\
    \ letter_count);\n            }\n            letter_count = 1;\n            previous_letter\
    \ = i;\n        }\n    }\n    if letter_count == max_count {\n        map.insert(previous_letter.to_string(),\
    \ letter_count);\n    }\n    map\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `v`\n   --> /tmp/tmpfni9w5m6.rs:30:14\n\
    \    |\n8   |     let mut v : Vec<char> = test.chars().collect();\n    |     \
    \    ----- move occurs because `v` has type `Vec<char>`, which does not implement\
    \ the `Copy` trait\n...\n14  |     for i in v {\n    |              -\n    | \
    \             |\n    |              `v` moved due to this implicit call to `.into_iter()`\n\
    \    |              help: consider borrowing to avoid moving into the for loop:\
    \ `&v`\n...\n30  |     for i in v {\n    |              ^ value used here after\
    \ move\n    |\nnote: this function takes ownership of the receiver `self`, which\
    \ moves `v`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659821435
- exit_code: 1
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut hash: HashMap<String, isize>\
    \ = HashMap::new();\n    let mut max_count: isize = 0;\n    let mut max_key: String\
    \ = \"\".to_string();\n\n    for c in test.chars() {\n        let str_c = c.to_string();\n\
    \        let char_count = hash.entry(str_c).or_insert(0);\n        *char_count\
    \ += 1;\n        if *char_count > max_count {\n            max_count = *char_count;\n\
    \            max_key = str_c;\n        }\n    }\n\n    let mut hash_max: HashMap<String,\
    \ isize> = HashMap::new();\n    for (key, val) in hash.iter() {\n        if *val\
    \ == max_count {\n            hash_max.insert(key.to_string(), max_count);\n \
    \       }\n    }\n\n    hash_max\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: SyntaxError
  stderr: "warning: variable `max_key` is assigned to, but never used\n  --> /tmp/tmpqv50x_hj.rs:10:13\n\
    \   |\n10 |     let mut max_key: String = \"\".to_string();\n   |            \
    \ ^^^^^^^\n   |\n   = note: `#[warn(unused_variables)]` on by default\n   = note:\
    \ consider using `_max_key` instead\n\nwarning: value assigned to `max_key` is\
    \ never read\n  --> /tmp/tmpqv50x_hj.rs:18:13\n   |\n18 |             max_key\
    \ = str_c;\n   |             ^^^^^^^\n   |\n   = note: `#[warn(unused_assignments)]`\
    \ on by default\n   = help: maybe it is overwritten before being read?\n\nerror[E0382]:\
    \ use of moved value: `str_c`\n  --> /tmp/tmpqv50x_hj.rs:18:23\n   |\n13 |   \
    \      let str_c = c.to_string();\n   |             ----- move occurs because\
    \ `str_c` has type `String`, which does not implement the `Copy` trait\n14 | \
    \        let char_count = hash.entry(str_c).or_insert(0);\n   |              \
    \                       ----- value moved here\n...\n18 |             max_key\
    \ = str_c;\n   |                       ^^^^^ value used here after move\n\nerror:\
    \ aborting due to previous error; 2 warnings emitted\n\nFor more information about\
    \ this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659821435
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    // let mut word_counts: HashMap<String,\
    \ isize> = HashMap::new();\n    // for word in test.split_whitespace() {\n   \
    \ //     let count = word_counts.entry(word.to_string()).or_insert(0);\n    //\
    \     *count += 1;\n    // }\n    // word_counts\n    unimplemented!()\n}\n\n\
    fn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpq8aqh9zl.rs:14:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659821435
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut dict: HashMap<String, isize>\
    \ = HashMap::new();\n    for letter in test.split(\" \") {\n        let count\
    \ = dict.entry(letter.to_string()).or_insert(0);\n        *count += 1;\n    }\n\
    \    dict\n}\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"b\": 2, \"c\": 1, \"a\": 2}`,\n right: `{\"b\": 2, \"a\": 2}`', /tmp/tmpsr2j92jb.rs:19:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821435
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut result: HashMap<String, isize>\
    \ = HashMap::new();\n    let mut char_count: HashMap<char, isize> = HashMap::new();\n\
    \    let mut highest_count: isize = 0;\n\n    for letter in test.chars() {\n \
    \       let count = char_count.entry(letter).or_insert(0);\n        *count +=\
    \ 1;\n        if *count > highest_count {\n            highest_count = *count;\n\
    \        }\n    }\n\n    for (key, value) in char_count {\n        if value ==\
    \ highest_count {\n            result.insert(key.to_string(), value);\n      \
    \  }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\" \": 3}`,\n right: `{\"b\": 2, \"a\": 2}`', /tmp/tmp0frhiimy.rs:31:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821435
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    // Your code here\n    let mut hist:\
    \ HashMap<String, isize> = HashMap::new();\n    let mut split_test = test.split(\"\
    \ \");\n    let mut max_count = 0;\n    for x in split_test {\n        let temp_count\
    \ = hist.entry(x.to_string()).or_insert(0);\n        *temp_count += 1;\n     \
    \   if *temp_count > max_count {\n            max_count = *temp_count;\n     \
    \   }\n    }\n    let mut max_letters: HashMap<String, isize> = HashMap::new();\n\
    \    for (key, value) in hist {\n        if value == max_count {\n           \
    \ max_letters.insert(key, value);\n        }\n    }\n    max_letters\n}\n\nfn\
    \ main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"\": 1}`,\n right: `{}`', /tmp/tmpjniz011p.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821436
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut hist = HashMap::new();\n  \
    \  let words = test.split_whitespace();\n    for word in words {\n        let\
    \ count = hist.entry(word.to_lowercase()).or_insert(0);\n        *count += 1;\n\
    \    }\n    hist\n}\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"b\": 2, \"c\": 1, \"a\": 2}`,\n right: `{\"a\": 2, \"b\": 2}`', /tmp/tmpjhiilnu0.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821435
- exit_code: 0
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut map = HashMap::new();\n   \
    \ for c in test.chars() {\n        if c != ' ' {\n            let key = c.to_string();\n\
    \            *map.entry(key).or_insert(0) += 1;\n        }\n    }\n    let mut\
    \ max = 0;\n    for (_, v) in map.iter() {\n        if *v > max {\n          \
    \  max = *v;\n        }\n    }\n    let mut max_map = HashMap::new();\n    for\
    \ (k, v) in map.iter() {\n        if *v == max {\n            max_map.insert(k.to_string(),\
    \ max);\n        }\n    }\n    max_map\n}\n\nfn main() {\n    let candidate =\
    \ histogram;\n    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821435
- exit_code: 1
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut result: HashMap<String, isize>\
    \ = HashMap::new();\n    let mut most_common: isize = -1;\n    let mut most_common_letters:\
    \ Vec<String> = Vec::new();\n\n    for c in test.chars() {\n        let mut count\
    \ = 1;\n        let mut c_str = c.to_string();\n        if result.contains_key(&c_str)\
    \ {\n            count = *result.get(&c_str).unwrap() + 1;\n        }\n      \
    \  result.insert(c_str, count);\n        if count > most_common {\n          \
    \  most_common = count;\n            most_common_letters = vec![c_str];\n    \
    \    } else if count == most_common {\n            most_common_letters.push(c_str);\n\
    \        }\n    }\n\n    let mut result: HashMap<String, isize> = HashMap::new();\n\
    \    for c in most_common_letters {\n        result.insert(c, most_common);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: SyntaxError
  stderr: "warning: variable does not need to be mutable\n  --> /tmp/tmpqhynpqws.rs:14:13\n\
    \   |\n14 |         let mut c_str = c.to_string();\n   |             ----^^^^^\n\
    \   |             |\n   |             help: remove this `mut`\n   |\n   = note:\
    \ `#[warn(unused_mut)]` on by default\n\nerror[E0382]: use of moved value: `c_str`\n\
    \  --> /tmp/tmpqhynpqws.rs:21:40\n   |\n14 |         let mut c_str = c.to_string();\n\
    \   |             --------- move occurs because `c_str` has type `String`, which\
    \ does not implement the `Copy` trait\n...\n18 |         result.insert(c_str,\
    \ count);\n   |                       ----- value moved here\n...\n21 |      \
    \       most_common_letters = vec![c_str];\n   |                             \
    \           ^^^^^ value used here after move\n\nerror: aborting due to previous\
    \ error; 1 warning emitted\n\nFor more information about this error, try `rustc\
    \ --explain E0382`.\n"
  stdout: ''
  timestamp: 1659821435
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut map = HashMap::new();\n   \
    \ for c in test.chars() {\n        let counter = map.entry(c.to_string()).or_insert(0);\n\
    \        *counter += 1;\n    }\n    map\n}\n\nfn main() {\n    let candidate =\
    \ histogram;\n    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\" \": 3, \"a\": 2, \"b\": 2}`,\n right: `{\"a\": 2, \"b\": 2}`', /tmp/tmpkyxmbii6.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821435
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut letters = HashMap::new();\n\
    \    for c in test.chars() {\n        let count = letters.entry(c.to_string()).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max_count = 0;\n    for (_, v) in letters.iter()\
    \ {\n        if *v > max_count {\n            max_count = *v;\n        }\n   \
    \ }\n    let mut max_letters = HashMap::new();\n    for (k, v) in letters.iter()\
    \ {\n        if *v == max_count {\n            max_letters.insert(k.to_string(),\
    \ *v);\n        }\n    }\n    max_letters\n}\n\nfn main() {\n    let candidate\
    \ = histogram;\n    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\" \": 3}`,\n right: `{\"b\": 2, \"a\": 2}`', /tmp/tmpxgvulzix.rs:30:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821436
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut h = HashMap::new();\n    let\
    \ chars: Vec<_> = test.split_whitespace().collect();\n    for c in chars {\n \
    \       let counter = h.entry(c.to_string()).or_insert(0);\n        *counter +=\
    \ 1;\n    }\n    h\n}\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"c\": 1, \"a\": 2, \"b\": 2}`,\n right: `{\"b\": 2, \"a\": 2}`', /tmp/tmpbnna_dke.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821436
- exit_code: 1
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut result: HashMap<String, isize>\
    \ = HashMap::new();\n    let mut letter_count: HashMap<String, isize> = HashMap::new();\n\
    \    for letter in test.split(\" \") {\n        let _ = letter_count.entry(letter.to_string()).or_insert(0);\n\
    \        *letter_count.get_mut(letter).unwrap() += 1;\n    }\n    let max_count\
    \ = letter_count.values().max().unwrap();\n    for (letter, count) in letter_count\
    \ {\n        if count == max_count {\n            result.insert(letter, count);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2440qhut.rs:16:21\n   |\n\
    16 |         if count == max_count {\n   |                     ^^^^^^^^^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    16 |         if count == *max_count {\n   |                     +\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659821435
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut map = HashMap::new();\n   \
    \ let mut max_key = String::new();\n    let mut max_value = 0;\n    for c in test.chars()\
    \ {\n        *map.entry(c.to_string()).or_insert(0) += 1;\n        if *map.get(&c.to_string()).unwrap()\
    \ > max_value {\n            max_value = *map.get(&c.to_string()).unwrap();\n\
    \            max_key = c.to_string();\n        }\n    }\n    let mut res = HashMap::new();\n\
    \    for (key, value) in map {\n        if value == max_value {\n            res.insert(key,\
    \ value);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\" \": 3}`,\n right: `{\"b\": 2, \"a\": 2}`', /tmp/tmpbvyx3rwc.rs:29:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821436
- exit_code: 1
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut result: HashMap<String, isize>\
    \ = HashMap::new();\n    let mut split_str: Vec<String> = test.split_whitespace().map(|s|\
    \ s.to_string()).collect();\n    split_str.sort();\n    split_str.dedup();\n \
    \   for letter in split_str {\n        result.insert(letter, test.matches(&letter).count()\
    \ as isize);\n    }\n    result\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `letter`\n  --> /tmp/tmpu24bhati.rs:13:44\n\
    \   |\n12 |     for letter in split_str {\n   |         ------ move occurs because\
    \ `letter` has type `String`, which does not implement the `Copy` trait\n13 |\
    \         result.insert(letter, test.matches(&letter).count() as isize);\n   |\
    \                       ------               ^^^^^^^ value borrowed here after\
    \ move\n   |                       |\n   |                       value moved here\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659821435
- exit_code: 1
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut occurrences: HashMap<String,\
    \ isize> = HashMap::new();\n    for c in test.chars() {\n        let mut entry\
    \ = occurrences.entry(c.to_string()).or_insert(0);\n        *entry += 1;\n   \
    \ }\n    let highest_value = occurrences.values().max().unwrap();\n    occurrences.retain(|_,\
    \ &v| v == *highest_value);\n    occurrences\n}\n\nfn main() {\n    let candidate\
    \ = histogram;\n    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpf7ajomfn.rs:14:28\n   |\n\
    14 |     occurrences.retain(|_, &v| v == *highest_value);\n   |              \
    \              ^--\n   |                            ||\n   |                 \
    \           |expected due to this\n   |                            types differ\
    \ in mutability\n   |                            help: did you mean `v`: `&&mut\
    \ isize`\n   |\n   = note: expected mutable reference `&mut isize`\n         \
    \             found reference `&_`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659821435
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut histogram: HashMap<String,\
    \ isize> = HashMap::new();\n    let mut max_value: isize = 0;\n    for ch in test.chars()\
    \ {\n        if let Some(value) = histogram.get_mut(&ch.to_string()) {\n     \
    \       *value += 1;\n            if *value > max_value {\n                max_value\
    \ = *value;\n            }\n        } else {\n            histogram.insert(ch.to_string(),\
    \ 1);\n        }\n    }\n    let mut result: HashMap<String, isize> = HashMap::new();\n\
    \    for (key, value) in histogram {\n        if value == max_value {\n      \
    \      result.insert(key, value);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\" \": 3}`,\n right: `{\"b\": 2, \"a\": 2}`', /tmp/tmpsyrcqab5.rs:31:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821436
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    //TODO: implement histogram function\n\
    \    HashMap::new()\n}\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{}`,\n right: `{\"b\": 2, \"a\": 2}`', /tmp/tmprdzxu55k.rs:14:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821436
- exit_code: 1
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut m: HashMap<String, isize> =\
    \ HashMap::new();\n    let mut max_value = 0;\n    for c in test.chars() {\n \
    \       let l = c.to_string();\n        if m.contains_key(&l) {\n            *m.get_mut(&l).unwrap()\
    \ += 1;\n        } else {\n            m.insert(l, 1);\n        }\n        if\
    \ *m.get(&l).unwrap() > max_value {\n            max_value = *m.get(&l).unwrap();\n\
    \        }\n    }\n    let mut res: HashMap<String, isize> = HashMap::new();\n\
    \    for key in m.keys() {\n        if *m.get(key).unwrap() == max_value {\n \
    \           res.insert(key.to_string(), max_value);\n        }\n    }\n    res\n\
    }\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `l`\n  --> /tmp/tmpmxkhosvn.rs:17:19\n\
    \   |\n11 |         let l = c.to_string();\n   |             - move occurs because\
    \ `l` has type `String`, which does not implement the `Copy` trait\n...\n15 |\
    \             m.insert(l, 1);\n   |                      - value moved here\n\
    16 |         }\n17 |         if *m.get(&l).unwrap() > max_value {\n   |      \
    \             ^^ value borrowed here after move\n...\n20 |     }\n   |     - value\
    \ moved here, in previous iteration of loop\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659821435
- exit_code: 0
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut result: HashMap<String, isize>\
    \ = HashMap::new();\n    let mut letter_count: HashMap<String, isize> = HashMap::new();\n\
    \    let mut max_count: isize = 0;\n\n    for letter in test.split_whitespace()\
    \ {\n        let count = letter_count.entry(letter.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max_count {\n            max_count\
    \ = *count;\n        }\n    }\n\n    for (key, value) in letter_count {\n    \
    \    if value == max_count {\n            result.insert(key, value);\n       \
    \ }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = histogram;\n \
    \   assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821436
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut result: HashMap<String, isize>\
    \ = HashMap::new();\n    let mut count = 0;\n    let mut name = String::new();\n\
    \    for c in test.chars() {\n        if !result.contains_key(&c.to_string())\
    \ {\n            result.insert(c.to_string(), 1);\n        } else {\n        \
    \    let value = result.get(&c.to_string()).unwrap();\n            let value =\
    \ value + 1;\n            result.insert(c.to_string(), value);\n        }\n  \
    \  }\n    for i in result.keys() {\n        let value = result.get(i).unwrap();\n\
    \        if value > &count {\n            count = *value;\n            name =\
    \ i.to_string();\n        }\n    }\n    let mut result_final: HashMap<String,\
    \ isize> = HashMap::new();\n    for (key, value) in result.iter() {\n        if\
    \ value == &count {\n            result_final.insert(key.to_string(), count);\n\
    \        }\n    }\n    result_final\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\" \": 3}`,\n right: `{\"a\": 2, \"b\": 2}`', /tmp/tmp7ub0a2yr.rs:38:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821436
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut dict: HashMap<String, isize>\
    \ = HashMap::new();\n    for ch in test.split_whitespace() {\n        let counter\
    \ = dict.entry(ch.to_string()).or_insert(0);\n        *counter += 1;\n    }\n\
    \    dict\n}\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"a\": 2, \"b\": 2, \"c\": 1}`,\n right: `{\"a\": 2, \"b\": 2}`', /tmp/tmpff5000u_.rs:19:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821436
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut histo = HashMap::new();\n \
    \   for c in test.chars() {\n        let mut letter = c.to_string();\n       \
    \ *histo.entry(letter).or_insert(0) += 1;\n    }\n    histo\n}\n\nfn main() {\n\
    \    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"a b b\
    \ a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\" \": 3, \"b\": 2, \"a\": 2}`,\n right: `{\"a\": 2, \"b\": 2}`', /tmp/tmpvut0z7t8.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821436
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    // We're going to iterate over our\
    \ string, create an empty hashmap and add an entry\n    // with the key being\
    \ the character and the value being the count\n    let mut hm: HashMap<String,\
    \ isize> = HashMap::new();\n    for ch in test.chars() {\n        // We have to\
    \ convert our character to a string, so it is hashable\n        let character\
    \ = ch.to_string();\n        let count = hm.entry(character).or_insert(0);\n \
    \       *count += 1;\n    }\n    return hm;\n}\n\nfn main() {\n    let candidate\
    \ = histogram;\n    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"b\": 2, \"a\": 2, \" \": 3}`,\n right: `{\"a\": 2, \"b\": 2}`', /tmp/tmp6m4fbis4.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821436
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut hist = HashMap::new();\n  \
    \  let mut letters = test.split(\" \");\n    let mut max = 0;\n    for l in letters\
    \ {\n        let count = hist.entry(l.to_string()).or_insert(0);\n        *count\
    \ += 1;\n        if max < *count {\n            max = *count;\n        }\n   \
    \ }\n    let mut max_hist = HashMap::new();\n    for (letter, count) in hist {\n\
    \        if count == max {\n            max_hist.insert(letter, count);\n    \
    \    }\n    }\n    max_hist\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"\": 1}`,\n right: `{}`', /tmp/tmpr8hwjrkb.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821436
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut ret = HashMap::new();\n   \
    \ for i in test.split(\" \") {\n        let count = ret.entry(i.to_string()).or_insert(0);\n\
    \        *count += 1;\n    }\n    ret\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"b\": 2, \"a\": 2, \"c\": 1}`,\n right: `{\"a\": 2, \"b\": 2}`', /tmp/tmpt_iwv0jv.rs:19:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821436
- exit_code: 0
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut letters: HashMap<String, isize>\
    \ = HashMap::new();\n    let mut max_occurrence: isize = 0;\n    for letter in\
    \ test.split_whitespace() {\n        let mut occurrence = letters.entry(letter.to_string()).or_insert(0);\n\
    \        *occurrence += 1;\n        if *occurrence > max_occurrence {\n      \
    \      max_occurrence = *occurrence;\n        }\n    }\n    let mut result: HashMap<String,\
    \ isize> = HashMap::new();\n    for (key, value) in letters {\n        if value\
    \ == max_occurrence {\n            result.insert(key, value);\n        }\n   \
    \ }\n    result\n}\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821436
- exit_code: 1
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    //your code here\n    test.split_whitespace()\n\
    \        .fold(HashMap::new(), |mut acc, x| {\n            acc.entry(x.to_string())\n\
    \                .and_modify(|c| *c += 1)\n                .or_insert(1);\n  \
    \          acc\n        })\n        .iter()\n        .fold(HashMap::new(), |mut\
    \ acc, (k, v)| {\n            acc.entry(*v)\n                .and_modify(|v| v.push(k.to_string()))\n\
    \                .or_insert(vec![k.to_string()]);\n            acc\n        })\n\
    \        .iter()\n        .fold(HashMap::new(), |mut acc, (k, v)| {\n        \
    \    acc.insert(v.join(\" \"), *k);\n            acc\n        })\n}\n\nfn main()\
    \ {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed for `HashMap<{integer}, V>`\n  -->\
    \ /tmp/tmpxb2rkx3q.rs:17:32\n   |\n17 |         .fold(HashMap::new(), |mut acc,\
    \ (k, v)| {\n   |                                ^^^^^^^ consider giving this\
    \ closure parameter the explicit type `HashMap<{integer}, V>`, where the type\
    \ parameter `V` is specified\n   |\n   = note: type must be known at this point\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659821436
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut d = HashMap::new();\n    let\
    \ mut v: Vec<&str> = test.split(\" \").collect();\n    v.sort();\n    v.push(\"\
    \\0\");\n    let mut count = 1;\n    let mut most = 0;\n    let mut letter = String::new();\n\
    \    for i in 0..v.len() - 1 {\n        if v[i] == v[i + 1] {\n            count\
    \ += 1;\n        } else {\n            if count == most {\n                d.insert(v[i].to_string(),\
    \ count);\n            } else if count > most {\n                d.clear();\n\
    \                most = count;\n                d.insert(v[i].to_string(), count);\n\
    \            }\n            count = 1;\n        }\n    }\n    d\n}\n\nfn main()\
    \ {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"\": 1}`,\n right: `{}`', /tmp/tmpfb8a8vo0.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821436
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut dict: HashMap<String, isize>\
    \ = HashMap::new();\n    for letter in test.split_whitespace() {\n        let\
    \ counter = dict.entry(letter.to_string()).or_insert(0);\n        *counter +=\
    \ 1;\n    }\n    let max_count = dict.values().cloned().max().unwrap();\n    let\
    \ mut result: HashMap<String, isize> = HashMap::new();\n    for (letter, count)\
    \ in dict {\n        if count == max_count {\n            result.insert(letter,\
    \ count);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate =\
    \ histogram;\n    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmp42o50rfs.rs:13:50

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659821436
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut output: HashMap<String, isize>\
    \ = HashMap::new();\n    let alphabet: Vec<String> = vec![\n        \"a\".to_string(),\n\
    \        \"b\".to_string(),\n        \"c\".to_string(),\n        \"d\".to_string(),\n\
    \        \"e\".to_string(),\n        \"f\".to_string(),\n        \"g\".to_string(),\n\
    \        \"h\".to_string(),\n        \"i\".to_string(),\n        \"j\".to_string(),\n\
    \        \"k\".to_string(),\n        \"l\".to_string(),\n        \"m\".to_string(),\n\
    \        \"n\".to_string(),\n        \"o\".to_string(),\n        \"p\".to_string(),\n\
    \        \"q\".to_string(),\n        \"r\".to_string(),\n        \"s\".to_string(),\n\
    \        \"t\".to_string(),\n        \"u\".to_string(),\n        \"v\".to_string(),\n\
    \        \"w\".to_string(),\n        \"x\".to_string(),\n        \"y\".to_string(),\n\
    \        \"z\".to_string(),\n    ];\n    for letter in alphabet {\n        let\
    \ mut count: isize = 0;\n        for s in test.split_whitespace() {\n        \
    \    if letter == s {\n                count += 1;\n            }\n        }\n\
    \        if count > 0 {\n            output.insert(letter, count);\n        }\n\
    \    }\n    output\n}\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"a\": 2, \"b\": 2, \"c\": 1}`,\n right: `{\"a\": 2, \"b\": 2}`', /tmp/tmpqcgv4ty8.rs:54:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821436
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut map = HashMap::new();\n   \
    \ for c in test.split(\" \") {\n        let key = c.to_string();\n        let\
    \ count = map.entry(key).or_insert(0);\n        *count += 1;\n    }\n    map\n\
    }\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"b\": 2, \"c\": 1, \"a\": 2}`,\n right: `{\"a\": 2, \"b\": 2}`', /tmp/tmpn9klwdzr.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821436
- exit_code: 0
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut count: HashMap<String, isize>\
    \ = HashMap::new();\n    let letters: Vec<String> = test.split_whitespace().map(|x|\
    \ x.to_string()).collect();\n    for letter in letters {\n        let value =\
    \ count.entry(letter).or_insert(0);\n        *value += 1;\n    }\n    let mut\
    \ max_count = 0;\n    for value in count.values() {\n        if *value > max_count\
    \ {\n            max_count = *value;\n        }\n    }\n    let mut max_letters:\
    \ HashMap<String, isize> = HashMap::new();\n    for (key, value) in count {\n\
    \        if value == max_count {\n            max_letters.insert(key, value);\n\
    \        }\n    }\n    max_letters\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821436
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut dict: HashMap<String, isize>\
    \ = HashMap::new();\n    for ch in test.chars() {\n        let key = ch.to_string();\n\
    \        match dict.get(&key) {\n            Some(cnt) => {\n                dict.insert(key,\
    \ cnt + 1);\n            }\n            None => {\n                dict.insert(key,\
    \ 1);\n            }\n        }\n    }\n    return dict;\n}\n\nfn main() {\n \
    \   let candidate = histogram;\n    assert_eq!(candidate(String::from(\"a b b\
    \ a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"b\": 2, \" \": 3, \"a\": 2}`,\n right: `{\"a\": 2, \"b\": 2}`', /tmp/tmp0_lmvgo_.rs:25:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821436
- exit_code: 1
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    // Create a string of unique characters\n\
    \    let mut unique_chars = String::new();\n    for ch in test.chars() {\n   \
    \     if !unique_chars.contains(ch) {\n            unique_chars.push(ch);\n  \
    \      }\n    }\n\n    // Iterate over each character, count the number of occurrences\
    \ and create a map\n    let mut char_counts = HashMap::new();\n    for ch in unique_chars.chars()\
    \ {\n        let mut count = 0;\n        for ch_in_test in test.chars() {\n  \
    \          if ch == ch_in_test {\n                count += 1;\n            }\n\
    \        }\n        char_counts.insert(ch.to_string(), count);\n    }\n\n    //\
    \ Take the max count value and get all characters that have the same value\n \
    \   let max_count = *char_counts.values().max().unwrap();\n    let max_chars:\
    \ Vec<&String> = char_counts.keys().filter(|key| char_counts[key] == max_count).collect();\n\
    \n    // Create a dictionary that contains the characters that have the max count\n\
    \    let mut histogram: HashMap<String, isize> = HashMap::new();\n    for ch in\
    \ max_chars {\n        histogram.insert(ch.to_string(), max_count);\n    }\n\n\
    \    histogram\n}\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `String: Borrow<&String>` is not satisfied\n\
    \  --> /tmp/tmph0gij5kr.rs:30:67\n   |\n30 |     let max_chars: Vec<&String> =\
    \ char_counts.keys().filter(|key| char_counts[key] == max_count).collect();\n\
    \   |                                                                   ^^^^^^^^^^^^^^^^\
    \ the trait `Borrow<&String>` is not implemented for `String`\n   |\n   = help:\
    \ the following implementations were found:\n             <String as Borrow<str>>\n\
    \   = note: required because of the requirements on the impl of `Index<&&String>`\
    \ for `HashMap<String, {integer}>`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659821436
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut map = HashMap::new();\n   \
    \ let letters: Vec<&str> = test.split(\" \").collect();\n    let mut max = 0;\n\
    \    let mut max_keys = Vec::new();\n    for key in letters {\n        if !map.contains_key(key)\
    \ {\n            map.insert(key, 1);\n        } else {\n            let count\
    \ = map.get_mut(key).unwrap();\n            *count += 1;\n        }\n        if\
    \ let Some(count) = map.get(key) {\n            if *count > max {\n          \
    \      max = *count;\n                max_keys.clear();\n                max_keys.push(key);\n\
    \            } else if *count == max {\n                max_keys.push(key);\n\
    \            }\n        }\n    }\n    let mut result = HashMap::new();\n    for\
    \ key in max_keys {\n        result.insert(key.to_string(), *map.get(key).unwrap());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"\": 1}`,\n right: `{}`', /tmp/tmpm4ekwhjd.rs:44:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821436
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut dict: HashMap<String, isize>\
    \ = HashMap::new();\n    let arr: Vec<&str> = test.split(\" \").collect();\n \
    \   for i in arr {\n        let mut count = dict.entry(i.to_string()).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = 0;\n    for i in dict.values()\
    \ {\n        if *i > max {\n            max = *i;\n        }\n    }\n    dict.retain(|k,\
    \ v| *v == max);\n    dict\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"\": 1}`,\n right: `{}`', /tmp/tmp6ez_crd1.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821436
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut occurrences: HashMap<String,\
    \ isize> = HashMap::new();\n    for letter in test.split_whitespace() {\n    \
    \    let count = occurrences.entry(letter.to_string()).or_insert(0);\n       \
    \ *count += 1;\n    }\n    occurrences\n}\n\nfn main() {\n    let candidate =\
    \ histogram;\n    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"a\": 2, \"c\": 1, \"b\": 2}`,\n right: `{\"a\": 2, \"b\": 2}`', /tmp/tmpqy8nh1zn.rs:19:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821436
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut hmap: HashMap<String, isize>\
    \ = HashMap::new();\n    let split_test: Vec<String> = test.split_whitespace().map(|s|\
    \ s.to_string()).collect();\n    for i in split_test {\n        let count = hmap.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let max = hmap.values().cloned().max().unwrap();\n\
    \    let mut result: HashMap<String, isize> = HashMap::new();\n    for (k, v)\
    \ in hmap {\n        if v == max {\n            result.insert(k, v);\n       \
    \ }\n    }\n    result\n}\n\nfn main() {\n    let candidate = histogram;\n   \
    \ assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpvi0ybo56.rs:14:44

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659821436
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut dict: HashMap<String, isize>\
    \ = HashMap::new();\n    for c in test.split_whitespace() {\n        let count\
    \ = dict.entry(c.to_string()).or_insert(0);\n        *count += 1;\n    }\n   \
    \ dict\n}\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"b\": 2, \"a\": 2, \"c\": 1}`,\n right: `{\"b\": 2, \"a\": 2}`', /tmp/tmpidb3xrty.rs:19:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821436
- exit_code: 1
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut counts: HashMap<String, isize>\
    \ = HashMap::new();\n    for letter in test.split_whitespace() {\n        let\
    \ count = counts.entry(letter.to_string()).or_insert(0);\n        *count += 1;\n\
    \    }\n    let max_count = counts.values().max().unwrap();\n    let mut max_count_letters:\
    \ HashMap<String, isize> = HashMap::new();\n    for (letter, count) in counts\
    \ {\n        if count == *max_count {\n            max_count_letters.insert(letter,\
    \ count);\n        }\n    }\n    max_count_letters\n}\n\nfn main() {\n    let\
    \ candidate = histogram;\n    assert_eq!(candidate(String::from(\"a b b a\")),\
    \ HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: SyntaxError
  stderr: "error[E0505]: cannot move out of `counts` because it is borrowed\n  -->\
    \ /tmp/tmpxzbhd91y.rs:15:28\n   |\n13 |     let max_count = counts.values().max().unwrap();\n\
    \   |                     ------ borrow of `counts` occurs here\n14 |     let\
    \ mut max_count_letters: HashMap<String, isize> = HashMap::new();\n15 |     for\
    \ (letter, count) in counts {\n   |                            ^^^^^^ move out\
    \ of `counts` occurs here\n16 |         if count == *max_count {\n   |       \
    \              ---------- borrow later used here\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0505`.\n"
  stdout: ''
  timestamp: 1659821436
- exit_code: 1
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut counts: HashMap<String, isize>\
    \ = HashMap::new();\n    for c in test.chars() {\n        let counter = counts.entry(c.to_string()).or_insert(0);\n\
    \        *counter += 1;\n    }\n    let max_value = counts.values().max().unwrap();\n\
    \    counts.retain(|k, v| v == max_value);\n    counts\n}\n\nfn main() {\n   \
    \ let candidate = histogram;\n    assert_eq!(candidate(String::from(\"a b b a\"\
    )), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n  \
    \  assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `k`\n  --> /tmp/tmpbcs1c985.rs:14:20\n   |\n\
    14 |     counts.retain(|k, v| v == max_value);\n   |                    ^ help:\
    \ if this is intentional, prefix it with an underscore: `_k`\n   |\n   = note:\
    \ `#[warn(unused_variables)]` on by default\n\nerror[E0502]: cannot borrow `counts`\
    \ as mutable because it is also borrowed as immutable\n  --> /tmp/tmpbcs1c985.rs:14:5\n\
    \   |\n13 |     let max_value = counts.values().max().unwrap();\n   |        \
    \             ------ immutable borrow occurs here\n14 |     counts.retain(|k,\
    \ v| v == max_value);\n   |     ^^^^^^^------^^^^^^^^^^^^^^^^^^^^^^^\n   |   \
    \  |      |\n   |     |      immutable borrow later used by call\n   |     mutable\
    \ borrow occurs here\n\nerror: aborting due to previous error; 1 warning emitted\n\
    \nFor more information about this error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1659821436
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut dict: HashMap<String, isize>\
    \ = HashMap::new();\n    for c in test.chars() {\n        let elem = c.to_string();\n\
    \        let count = dict.entry(elem).or_insert(0);\n        *count += 1;\n  \
    \  }\n    dict\n}\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\" \": 3, \"b\": 2, \"a\": 2}`,\n right: `{\"a\": 2, \"b\": 2}`', /tmp/tmpe_wpbip5.rs:19:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821436
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut counter = HashMap::new();\n\
    \    for character in test.chars() {\n        let character_string = character.to_string();\n\
    \        let count = counter.entry(character_string).or_insert(0);\n        *count\
    \ += 1;\n    }\n    counter\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"a\": 2, \" \": 3, \"b\": 2}`,\n right: `{\"a\": 2, \"b\": 2}`', /tmp/tmpeub9v9pr.rs:19:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821436
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut map = HashMap::new();\n   \
    \ for c in test.chars() {\n        map.entry(c.to_string()).and_modify(|x| *x\
    \ += 1).or_insert(1);\n    }\n    let max = map.values().max().unwrap();\n   \
    \ map.iter().filter(|&(_, &v)| v == *max).map(|(k, v)| (k.to_string(), *v)).collect()\n\
    }\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\" \": 3}`,\n right: `{\"a\": 2, \"b\": 2}`', /tmp/tmpvdy73cep.rs:18:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821436
- exit_code: 0
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut m = HashMap::new();\n    let\
    \ mut res = HashMap::new();\n    let mut strs: Vec<&str> = test.split_whitespace().collect();\n\
    \    let mut max = 0;\n    for s in strs {\n        let mut key = String::from(s);\n\
    \        if m.contains_key(&key) {\n            let count = m.get(&key).unwrap();\n\
    \            m.insert(key, count + 1);\n        } else {\n            m.insert(key,\
    \ 1);\n        }\n    }\n    for (k, v) in m.iter() {\n        if v > &max {\n\
    \            max = *v;\n        }\n    }\n    for (k, v) in m.iter() {\n     \
    \   if v == &max {\n            res.insert(k.to_string(), *v);\n        }\n  \
    \  }\n    res\n}\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821436
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut hm = HashMap::new();\n    let\
    \ mut max_count = 0;\n    for c in test.chars() {\n        let count = hm.entry(c.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max_count {\n            max_count\
    \ = *count;\n        }\n    }\n    let mut result = HashMap::new();\n    for (key,\
    \ value) in hm {\n        if value == max_count {\n            result.insert(key,\
    \ value);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate =\
    \ histogram;\n    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\" \": 3}`,\n right: `{\"a\": 2, \"b\": 2}`', /tmp/tmp4_928lp0.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821436
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut counts: HashMap<String, isize>\
    \ = HashMap::new();\n    let mut max_count: isize = 0;\n    for c in test.chars()\
    \ {\n        let entry = counts.entry(c.to_string()).or_insert(0);\n        *entry\
    \ += 1;\n        if *entry > max_count {\n            max_count = *entry;\n  \
    \      }\n    }\n    counts.retain(|_, &mut v| v == max_count);\n    counts\n\
    }\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\" \": 3}`,\n right: `{\"b\": 2, \"a\": 2}`', /tmp/tmp48wpfsab.rs:23:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821436
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut count: HashMap<String, isize>\
    \ = HashMap::new();\n    let mut max_count: isize = 0;\n    let mut is_first_letter\
    \ = true;\n    let mut max_letter: String = String::new();\n\n    for letter in\
    \ test.split(\" \") {\n        let count_number = count.entry(letter.to_string()).or_insert(0);\n\
    \        *count_number += 1;\n        if *count_number > max_count {\n       \
    \     max_count = *count_number;\n            max_letter = letter.to_string();\n\
    \        } else if *count_number == max_count {\n            if is_first_letter\
    \ {\n                max_letter = letter.to_string();\n                is_first_letter\
    \ = false;\n            } else {\n                max_letter.push_str(\" \");\n\
    \                max_letter.push_str(letter);\n            }\n        }\n    }\n\
    \    count.insert(max_letter, max_count);\n    count\n}\n\nfn main() {\n    let\
    \ candidate = histogram;\n    assert_eq!(candidate(String::from(\"a b b a\")),\
    \ HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"b a\": 2, \"a\": 2, \"b\": 2}`,\n right: `{\"a\": 2, \"b\": 2}`', /tmp/tmpr58m_1om.rs:35:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821436
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut h = HashMap::new();\n    for\
    \ ch in test.split_whitespace() {\n        let counter = h.entry(ch.to_string()).or_insert(0);\n\
    \        *counter += 1;\n    }\n    h\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"b\": 2, \"c\": 1, \"a\": 2}`,\n right: `{\"b\": 2, \"a\": 2}`', /tmp/tmpepgwu31p.rs:19:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821436
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut best_count = 0;\n    let mut\
    \ histo = HashMap::new();\n    let mut best_letters = Vec::new();\n\n    for c\
    \ in test.chars() {\n        let count = histo.entry(c.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count == best_count {\n            best_letters.push(c.to_string());\n\
    \        } else if *count > best_count {\n            best_count = *count;\n \
    \           best_letters = vec![c.to_string()];\n        }\n    }\n\n    let mut\
    \ result = HashMap::new();\n    for letter in best_letters {\n        result.insert(letter,\
    \ best_count);\n    }\n    result\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\" \": 3}`,\n right: `{\"b\": 2, \"a\": 2}`', /tmp/tmp8w12vsnd.rs:32:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821436
- exit_code: 1
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut map = HashMap::new();\n   \
    \ let mut max = 0;\n    let mut max_map = HashMap::new();\n    for l in test.split(\"\
    \ \") {\n        let l = l.to_string();\n        let count = map.entry(l).or_insert(0);\n\
    \        *count += 1;\n        if *count > max {\n            max = *count;\n\
    \            max_map.clear();\n            max_map.insert(l, max);\n        }\
    \ else if *count == max {\n            max_map.insert(l, max);\n        }\n  \
    \  }\n    max_map\n}\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `l`\n  --> /tmp/tmp7bb5hjqk.rs:18:28\n\
    \   |\n12 |         let l = l.to_string();\n   |             - move occurs because\
    \ `l` has type `String`, which does not implement the `Copy` trait\n13 |     \
    \    let count = map.entry(l).or_insert(0);\n   |                            \
    \   - value moved here\n...\n18 |             max_map.insert(l, max);\n   |  \
    \                          ^ value used here after move\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  stdout: ''
  timestamp: 1659821436
- exit_code: 1
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut res: HashMap<String, isize>\
    \ = HashMap::new();\n    let test = test.replace(|c: char| !c.is_alphabetic(),\
    \ \" \");\n    let v: Vec<String> = test.split_whitespace().map(|s| s.to_lowercase()).collect();\n\
    \    for s in v {\n        let count = res.entry(s).or_insert(0);\n        *count\
    \ += 1;\n    }\n    let max = res.values().max().unwrap();\n    let mut r: HashMap<String,\
    \ isize> = HashMap::new();\n    for (key, val) in res {\n        if val == *max\
    \ {\n            r.insert(key, val);\n        }\n    }\n    r\n}\n\nfn main()\
    \ {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: SyntaxError
  stderr: "error[E0505]: cannot move out of `res` because it is borrowed\n  --> /tmp/tmpxgm39dp0.rs:17:23\n\
    \   |\n15 |     let max = res.values().max().unwrap();\n   |               ---\
    \ borrow of `res` occurs here\n16 |     let mut r: HashMap<String, isize> = HashMap::new();\n\
    17 |     for (key, val) in res {\n   |                       ^^^ move out of `res`\
    \ occurs here\n18 |         if val == *max {\n   |                   ---- borrow\
    \ later used here\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0505`.\n"
  stdout: ''
  timestamp: 1659821436
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut histo = HashMap::new();\n \
    \   for character in test.chars() {\n        let count = histo.entry(character.to_string()).or_insert(0);\n\
    \        *count += 1;\n    }\n    return histo;\n}\n\nfn main() {\n    let candidate\
    \ = histogram;\n    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"a\": 2, \" \": 3, \"b\": 2}`,\n right: `{\"b\": 2, \"a\": 2}`', /tmp/tmpl1l3x828.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821436
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut letters: HashMap<String, isize>\
    \ = HashMap::new();\n    let words: Vec<&str> = test.split(\" \").collect();\n\
    \    let mut max_count: isize = 0;\n    for word in words {\n        let _old_count\
    \ = letters.get(word);\n        let old_count = match _old_count {\n         \
    \   Some(val) => *val,\n            None => 0,\n        };\n        if old_count\
    \ + 1 > max_count {\n            max_count = old_count + 1;\n        }\n     \
    \   letters.insert(word.to_string(), old_count + 1);\n    }\n    let mut result:\
    \ HashMap<String, isize> = HashMap::new();\n    for (key, value) in letters {\n\
    \        if value == max_count {\n            result.insert(key, value);\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"\": 1}`,\n right: `{}`', /tmp/tmprpgs51ec.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821436
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut map = HashMap::new();\n   \
    \ let mut max = 0;\n    let mut max_letters = Vec::new();\n\n    for c in test.chars()\
    \ {\n        let v = map.entry(c.to_string()).or_insert(0);\n        *v += 1;\n\
    \        if *v == max {\n            max_letters.push(c.to_string());\n      \
    \  } else if *v > max {\n            max = *v;\n            max_letters = vec![c.to_string()];\n\
    \        }\n    }\n\n    let mut res = HashMap::new();\n    for c in max_letters\
    \ {\n        res.insert(c, max);\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = histogram;\n    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\" \": 3}`,\n right: `{\"a\": 2, \"b\": 2}`', /tmp/tmp_i4gjxb2.rs:32:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821437
- exit_code: 0
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut freq: HashMap<String, isize>\
    \ = HashMap::new();\n    for c in test.split_whitespace() {\n        freq.entry(c.to_string()).and_modify(|i|\
    \ *i += 1).or_insert(1);\n    }\n    let mut max = 0;\n    for (_, val) in &freq\
    \ {\n        if *val > max {\n            max = *val;\n        }\n    }\n    let\
    \ mut res: HashMap<String, isize> = HashMap::new();\n    for (k, v) in &freq {\n\
    \        if *v == max {\n            res.insert(k.to_string(), *v);\n        }\n\
    \    }\n    res\n}\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821436
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut histo: HashMap<String, isize>\
    \ = HashMap::new();\n    for letter in test.split_whitespace() {\n        let\
    \ counter = histo.entry(letter.to_string()).or_insert(0);\n        *counter +=\
    \ 1;\n    }\n    histo\n}\n\nfn main() {\n    let candidate = histogram;\n   \
    \ assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"a\": 2, \"b\": 2, \"c\": 1}`,\n right: `{\"b\": 2, \"a\": 2}`', /tmp/tmpl6dppr7a.rs:19:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821437
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut map = HashMap::new();\n   \
    \ let mut curr_count = 0;\n    let mut highest_count = 0;\n    let mut highest_letters\
    \ = String::new();\n\n    for c in test.chars() {\n        curr_count = *map.entry(c.to_string()).or_insert(0);\n\
    \        map.insert(c.to_string(), curr_count + 1);\n    }\n\n    for (key, value)\
    \ in map.iter() {\n        if value > &highest_count {\n            highest_count\
    \ = *value;\n            highest_letters = key.to_string();\n        } else if\
    \ value == &highest_count {\n            highest_letters.push_str(key);\n    \
    \    }\n    }\n\n    let mut out = HashMap::new();\n    out.insert(highest_letters,\
    \ highest_count);\n    out\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\" \": 3}`,\n right: `{\"a\": 2, \"b\": 2}`', /tmp/tmpv5rkjjzz.rs:34:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821437
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut v: Vec<char> = test.chars().collect();\n\
    \    v.sort();\n    let mut m: HashMap<String, isize> = HashMap::new();\n    let\
    \ mut i = 0;\n    let mut counter = 1;\n    while i < v.len() - 1 {\n        if\
    \ v[i] == v[i + 1] {\n            counter += 1;\n        } else {\n          \
    \  let key = v[i].to_string();\n            m.insert(key, counter);\n        \
    \    counter = 1;\n        }\n        i += 1;\n    }\n    let key = v[i].to_string();\n\
    \    m.insert(key, counter);\n    m\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"b\": 2, \" \": 3, \"a\": 2}`,\n right: `{\"a\": 2, \"b\": 2}`', /tmp/tmpttq_r0w4.rs:30:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821437
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut dict: HashMap<String, isize>\
    \ = HashMap::new();\n    let mut result: HashMap<String, isize> = HashMap::new();\n\
    \    let mut max_count: isize = 0;\n\n    for letter in test.split(\" \") {\n\
    \        let count = dict.entry(letter.to_string()).or_insert(0);\n        *count\
    \ += 1;\n        if *count > max_count {\n            max_count = *count;\n  \
    \      }\n    }\n\n    for (key, value) in dict {\n        if value == max_count\
    \ {\n            result.insert(key, value);\n        }\n    }\n\n    result\n\
    }\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"\": 1}`,\n right: `{}`', /tmp/tmp7bihn2ah.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821437
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut map = HashMap::new();\n   \
    \ let mut max = 0;\n    for letter in test.split(\" \") {\n        let count =\
    \ map.entry(letter.to_string()).or_insert(0);\n        *count += 1;\n        if\
    \ *count > max {\n            max = *count;\n        }\n    }\n    let mut result\
    \ = HashMap::new();\n    for (key, value) in map {\n        if value == max {\n\
    \            result.insert(key, value);\n        }\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"\": 1}`,\n right: `{}`', /tmp/tmp003f1l20.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821437
- exit_code: 0
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut result: HashMap<String, isize>\
    \ = HashMap::new();\n    let mut map: HashMap<String, isize> = HashMap::new();\n\
    \    let s: Vec<&str> = test.split_whitespace().collect();\n    for i in 0..s.len()\
    \ {\n        let c = s[i];\n        match map.get(c) {\n            Some(n) =>\
    \ {\n                map.insert(c.to_string(), n + 1);\n            }\n      \
    \      None => {\n                map.insert(c.to_string(), 1);\n            }\n\
    \        }\n    }\n    let mut max = 0;\n    for i in 0..s.len() {\n        let\
    \ c = s[i];\n        match map.get(c) {\n            Some(n) => {\n          \
    \      if n > &max {\n                    max = *n;\n                }\n     \
    \       }\n            None => {}\n        }\n    }\n    for i in 0..s.len() {\n\
    \        let c = s[i];\n        match map.get(c) {\n            Some(n) => {\n\
    \                if n == &max {\n                    result.insert(c.to_string(),\
    \ max);\n                }\n            }\n            None => {}\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821437
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut hashy = HashMap::new();\n \
    \   let split = test.split_whitespace();\n    let mut check = \"\";\n    let mut\
    \ checkcount = 0;\n    for item in split {\n        let count = hashy.entry(item.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if count > &mut checkcount {\n            check\
    \ = item;\n            checkcount = *count;\n        }\n    }\n    let mut result\
    \ = HashMap::new();\n    result.insert(check.to_string(), checkcount);\n    result\n\
    }\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"b\": 2}`,\n right: `{\"a\": 2, \"b\": 2}`', /tmp/tmpto91gm4m.rs:27:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821437
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut count: HashMap<String, isize>\
    \ = HashMap::new();\n    for letter in test.split_whitespace() {\n        count.entry(letter.to_string()).and_modify(|c|\
    \ *c += 1).or_insert(1);\n    }\n    let max = count.values().max().unwrap();\n\
    \    count.iter().filter(|&(_, value)| value == max).map(|(key, value)| (key.to_string(),\
    \ *value)).collect()\n}\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpvziafa7s.rs:12:36

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659821437
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut histogram: HashMap<String,\
    \ isize> = HashMap::new();\n    for c in test.chars() {\n        let string =\
    \ c.to_string();\n        let count = histogram.entry(string).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut res: HashMap<String, isize> = HashMap::new();\n\
    \    let mut max = 0;\n    for (k, v) in histogram.iter() {\n        if *v > max\
    \ {\n            max = *v;\n            res.clear();\n            res.insert(k.to_string(),\
    \ *v);\n        } else if *v == max {\n            res.insert(k.to_string(), *v);\n\
    \        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\" \": 3}`,\n right: `{\"a\": 2, \"b\": 2}`', /tmp/tmpbxk2kcif.rs:30:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821437
- exit_code: 0
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut char_hash: HashMap<String,\
    \ isize> = HashMap::new();\n    let mut most_char: isize = 0;\n    let mut max_count:\
    \ isize = 0;\n    let mut max_key: String = \"\".to_string();\n    let t_chars:\
    \ Vec<&str> = test.split_whitespace().collect();\n    for i in t_chars {\n   \
    \     let count = char_hash.entry(i.to_string()).or_insert(0);\n        *count\
    \ += 1;\n        if *count > max_count {\n            max_count = *count;\n  \
    \          max_key = i.to_string();\n        }\n    }\n    let mut n_hash: HashMap<String,\
    \ isize> = HashMap::new();\n    for (key, value) in char_hash {\n        if value\
    \ == max_count {\n            n_hash.insert(key, value);\n        }\n    }\n \
    \   n_hash\n}\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821437
- exit_code: 1
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut result: HashMap<String, isize>\
    \ = HashMap::new();\n    let mut letters: Vec<&str> = test.split(\" \").collect();\n\
    \    letters.sort();\n    let mut count = 1;\n    let mut letter = letters[0];\n\
    \    for l in letters.iter().skip(1) {\n        if l == letter {\n           \
    \ count += 1;\n        } else {\n            result.insert(letter.to_string(),\
    \ count);\n            count = 1;\n            letter = l;\n        }\n    }\n\
    \    result.insert(letter.to_string(), count);\n    result\n}\n\nfn main() {\n\
    \    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"a b b\
    \ a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&str` with `str`\n  --> /tmp/tmprqj0w7pa.rs:14:14\n\
    \   |\n14 |         if l == letter {\n   |              ^^ no implementation for\
    \ `&str == str`\n   |\n   = help: the trait `PartialEq<str>` is not implemented\
    \ for `&str`\n   = note: required because of the requirements on the impl of `PartialEq<&str>`\
    \ for `&&str`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659821437
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let count: HashMap<char, isize> = test.chars().fold(HashMap::new(),\
    \ |mut acc, i| {\n        let count = acc.entry(i).or_insert(0);\n        *count\
    \ += 1;\n        acc\n    });\n\n    let max_v = count.values().max().unwrap();\n\
    \    let keys = count.keys().filter(|&&k| count[&k] == *max_v).map(|k| k.to_string()).collect();\n\
    \    let mut h: HashMap<String, isize> = HashMap::new();\n    h.insert(keys, *max_v);\n\
    \    h\n}\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\" \": 3}`,\n right: `{\"b\": 2, \"a\": 2}`', /tmp/tmphbq59iv9.rs:23:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821437
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    // build dictionary of each letter\
    \ in the string\n    let mut letters = HashMap::new();\n    for c in test.chars()\
    \ {\n        let count = letters.entry(c.to_string()).or_insert(0);\n        *count\
    \ += 1;\n    }\n\n    // assign each letter value to its count\n    let mut counts\
    \ = HashMap::new();\n    for (letter, count) in letters {\n        let letters\
    \ = counts.entry(count).or_insert(vec![]);\n        letters.push(letter);\n  \
    \  }\n\n    // get the max value\n    let mut max = -1;\n    for (count, _) in\
    \ counts.iter() {\n        if count > &max {\n            max = *count;\n    \
    \    }\n    }\n\n    // get the associated letters from the max value, and return\
    \ that with the max value\n    let mut letters = HashMap::new();\n    let letter_vec\
    \ = counts.get(&max).unwrap();\n    for letter in letter_vec {\n        letters.insert(letter.to_string(),\
    \ max);\n    }\n    letters\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\" \": 3}`,\n right: `{\"a\": 2, \"b\": 2}`', /tmp/tmpq1tll2j6.rs:41:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821437
- exit_code: 1
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut dict: HashMap<String, isize>\
    \ = HashMap::new();\n    let mut count = 0;\n    let mut most_frequent = \"\"\
    .to_string();\n    for i in test.split(\" \") {\n        let letter = i.to_string();\n\
    \        match dict.get(&letter) {\n            Some(value) => {\n           \
    \     dict.insert(letter.clone(), value + 1);\n                if value + 1 >\
    \ count {\n                    count = value + 1;\n                    most_frequent\
    \ = letter.clone();\n                }\n            }\n            None => {\n\
    \                dict.insert(letter.clone(), 1);\n                if count ==\
    \ 0 {\n                    count = 1;\n                    most_frequent = letter.clone();\n\
    \                }\n            }\n        }\n    }\n    let mut result: HashMap<String,\
    \ isize> = HashMap::new();\n    for (key, value) in dict {\n        if value ==\
    \ count {\n            result.insert(key, value);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: SyntaxError
  stderr: "warning: variable `most_frequent` is assigned to, but never used\n  -->\
    \ /tmp/tmp8nduqbvn.rs:10:13\n   |\n10 |     let mut most_frequent = \"\".to_string();\n\
    \   |             ^^^^^^^^^^^^^\n   |\n   = note: `#[warn(unused_variables)]`\
    \ on by default\n   = note: consider using `_most_frequent` instead\n\nwarning:\
    \ value assigned to `most_frequent` is never read\n  --> /tmp/tmp8nduqbvn.rs:18:21\n\
    \   |\n18 |                     most_frequent = letter.clone();\n   |        \
    \             ^^^^^^^^^^^^^\n   |\n   = note: `#[warn(unused_assignments)]` on\
    \ by default\n   = help: maybe it is overwritten before being read?\n\nwarning:\
    \ value assigned to `most_frequent` is never read\n  --> /tmp/tmp8nduqbvn.rs:25:21\n\
    \   |\n25 |                     most_frequent = letter.clone();\n   |        \
    \             ^^^^^^^^^^^^^\n   |\n   = help: maybe it is overwritten before being\
    \ read?\n\nerror[E0502]: cannot borrow `dict` as mutable because it is also borrowed\
    \ as immutable\n  --> /tmp/tmp8nduqbvn.rs:15:17\n   |\n13 |         match dict.get(&letter)\
    \ {\n   |               ---- immutable borrow occurs here\n14 |             Some(value)\
    \ => {\n15 |                 dict.insert(letter.clone(), value + 1);\n   |   \
    \              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n\
    16 |                 if value + 1 > count {\n   |                    ----- immutable\
    \ borrow later used here\n\nerror: aborting due to previous error; 3 warnings\
    \ emitted\n\nFor more information about this error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1659821437
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut output: HashMap<String, isize>\
    \ = HashMap::new();\n    let mut input: Vec<String> = test.split(\" \").map(|s|\
    \ s.to_string()).collect();\n    input.sort();\n    let mut char_count = 0;\n\
    \    let mut prev_char = input[0].clone();\n    for c in input {\n        if c\
    \ == prev_char {\n            char_count += 1;\n        } else {\n           \
    \ output.insert(prev_char, char_count);\n            char_count = 1;\n       \
    \     prev_char = c;\n        }\n    }\n    output.insert(prev_char, char_count);\n\
    \    output\n}\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"b\": 2, \"c\": 1, \"a\": 2}`,\n right: `{\"a\": 2, \"b\": 2}`', /tmp/tmpz31q0x0_.rs:29:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821437
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut letters = HashMap::new();\n\
    \    for c in test.chars() {\n        let counter = letters.entry(c.to_string()).or_insert(0);\n\
    \        *counter += 1;\n    }\n    let mut max = 0;\n    for (_, v) in letters.iter()\
    \ {\n        if *v > max {\n            max = *v;\n        }\n    }\n    let mut\
    \ res = HashMap::new();\n    for (k, v) in letters.iter() {\n        if *v ==\
    \ max {\n            res.insert(k.to_string(), max);\n        }\n    }\n    res\n\
    }\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\" \": 3}`,\n right: `{\"a\": 2, \"b\": 2}`', /tmp/tmpy_xk32o0.rs:30:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821437
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let letters = test.split(\" \");\n\
    \    let mut map = HashMap::new();\n    for l in letters {\n        let v = map.entry(l.to_string()).or_insert(0);\n\
    \        *v += 1;\n    }\n    map\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"c\": 1, \"a\": 2, \"b\": 2}`,\n right: `{\"a\": 2, \"b\": 2}`', /tmp/tmp0j3hi_th.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821437
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    // write me\n    let letters = test.split(\"\
    \ \").collect::<Vec<&str>>();\n    let mut map = HashMap::new();\n    let mut\
    \ max = 0;\n    for x in letters {\n        let count = map.entry(x).or_insert(0);\n\
    \        *count += 1;\n        if *count > max {\n            max = *count;\n\
    \        }\n    }\n    let mut solution = HashMap::new();\n    for (key, value)\
    \ in map {\n        if value == max {\n            solution.insert(key.to_string(),\
    \ value);\n        }\n    }\n    solution\n}\n\nfn main() {\n    let candidate\
    \ = histogram;\n    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"\": 1}`,\n right: `{}`', /tmp/tmpqzcsnqng.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821437
- exit_code: 0
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut letters = HashMap::new();\n\
    \    let mut highest_count = 0;\n    let split_input = test.split_whitespace();\n\
    \    for word in split_input {\n        let count = letters.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > highest_count {\n            highest_count\
    \ = *count;\n        }\n    }\n    // Convert the HashMap<String, isize> to HashMap<String,\
    \ isize>\n    // Does not alter if count is not one of the highest\n    let mut\
    \ highest_letters = HashMap::new();\n    for (key, value) in letters {\n     \
    \   if value == highest_count {\n            highest_letters.insert(key, value);\n\
    \        }\n    }\n    highest_letters\n}\n\nfn main() {\n    let candidate =\
    \ histogram;\n    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821437
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut h = HashMap::new();\n    let\
    \ mut max_val = 0;\n    for c in test.chars() {\n        let counter = h.entry(c.to_string()).or_insert(0);\n\
    \        *counter += 1;\n        if *counter > max_val {\n            max_val\
    \ = *counter;\n        }\n    }\n    let mut keys = HashMap::new();\n    for (k,\
    \ v) in h {\n        if v == max_val {\n            keys.insert(k, v);\n     \
    \   }\n    }\n    keys\n}\n\nfn main() {\n    let candidate = histogram;\n   \
    \ assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\" \": 3}`,\n right: `{\"a\": 2, \"b\": 2}`', /tmp/tmpos15xs3j.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821437
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut map = HashMap::new();\n   \
    \ let mut max = 0;\n    let mut letters = vec![];\n    let mut occurrence = vec![];\n\
    \    let mut letter = String::new();\n    for l in test.split_whitespace() {\n\
    \        if map.contains_key(l) {\n            map.insert(l.to_string(), map.get(l).unwrap()\
    \ + 1);\n        } else {\n            map.insert(l.to_string(), 1);\n       \
    \ }\n    }\n    for (k, v) in map.iter() {\n        if v > &max {\n          \
    \  max = *v;\n            letter = k.to_string();\n            occurrence.push(v);\n\
    \            letters.push(letter.clone());\n        } else if v == &max {\n  \
    \          letters.push(k.to_string());\n            occurrence.push(v);\n   \
    \     }\n    }\n    let mut output = HashMap::new();\n    for i in 0..letters.len()\
    \ {\n        output.insert(letters[i].clone(), occurrence[i].clone());\n    }\n\
    \    output\n}\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"c\": 1, \"a\": 2, \"b\": 2}`,\n right: `{\"b\": 2, \"a\": 2}`', /tmp/tmpcgvgnzlv.rs:41:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821437
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut map = HashMap::new();\n   \
    \ for letter in test.split(\" \") {\n        let ct = map.entry(letter.to_string()).or_insert(0);\n\
    \        *ct += 1;\n    }\n    map\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"c\": 1, \"b\": 2, \"a\": 2}`,\n right: `{\"a\": 2, \"b\": 2}`', /tmp/tmpcb9gwfjy.rs:19:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821437
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut occ: HashMap<String, isize>\
    \ = HashMap::new();\n    for c in test.chars() {\n        let key = c.to_string();\n\
    \        let counter = occ.entry(key).or_insert(0);\n        *counter += 1;\n\
    \    }\n    // Allocate the result vector.\n    let mut result: HashMap<String,\
    \ isize> = HashMap::new();\n    let mut max_occ = 0;\n    for (c, count) in occ.iter()\
    \ {\n        if *count == max_occ {\n            result.insert(c.to_string(),\
    \ *count);\n        } else if *count > max_occ {\n            max_occ = *count;\n\
    \            result.clear();\n            result.insert(c.to_string(), *count);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\" \": 3}`,\n right: `{\"a\": 2, \"b\": 2}`', /tmp/tmpiyv3_18s.rs:31:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821437
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut hist = HashMap::new();\n  \
    \  let letters = test.split(\" \").collect::<Vec<&str>>();\n    let mut max =\
    \ 0;\n    for elem in letters {\n        let count = hist.entry(elem.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if max < *count {\n            max = *count;\n\
    \        }\n    }\n    let mut dictionary = HashMap::new();\n    for (letter,\
    \ cnt) in hist {\n        if cnt == max {\n            dictionary.insert(letter,\
    \ cnt);\n        }\n    }\n    dictionary\n}\n\nfn main() {\n    let candidate\
    \ = histogram;\n    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"\": 1}`,\n right: `{}`', /tmp/tmpc6n8z4ip.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821437
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let test_vec: Vec<&str> = test.split(\"\
    \ \").collect();\n    let mut counts: HashMap<String, isize> = HashMap::new();\n\
    \    for word in test_vec {\n        let count = counts.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n    }\n    //return a map with only the letters that have\
    \ max count\n    let max_count: isize = *counts.values().max().unwrap();\n   \
    \ let mut max_count_letters: HashMap<String, isize> = HashMap::new();\n    for\
    \ (k, v) in counts {\n        if v == max_count {\n            max_count_letters.insert(k,\
    \ v);\n        }\n    }\n    max_count_letters\n}\n\nfn main() {\n    let candidate\
    \ = histogram;\n    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"\": 1}`,\n right: `{}`', /tmp/tmpfipjac49.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821437
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut map = HashMap::new();\n   \
    \ for c in test.chars() {\n        let counter = map.entry(c.to_string()).or_insert(0);\n\
    \        *counter += 1;\n    }\n    let mut map2 = HashMap::new();\n    let mut\
    \ key = \"\".to_string();\n    let mut max = 0;\n    for (k, v) in map.iter()\
    \ {\n        if v > &max {\n            key = k.to_string();\n            max\
    \ = *v;\n        }\n    }\n    map2.insert(key, max);\n    map2\n}\n\nfn main()\
    \ {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\" \": 3}`,\n right: `{\"a\": 2, \"b\": 2}`', /tmp/tmp19aze6fy.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821437
- exit_code: 1
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut letter_counts: HashMap<String,\
    \ isize> = HashMap::new();\n    let mut max_count = 0;\n    for letter in test.split_whitespace()\
    \ {\n        let count = letter_counts.entry(letter.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max_count {\n            max_count\
    \ = *count;\n        }\n    }\n    letter_counts.iter().filter(|(_, v)| **v ==\
    \ max_count).cloned().collect()\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<Filter<std::collections::hash_map::Iter<'_,\
    \ String, isize>, [closure@/tmp/tmpml_j9rko.rs:17:33: 17:58]> as Iterator>::Item\
    \ == &_`\n  --> /tmp/tmpml_j9rko.rs:17:60\n   |\n17 |     letter_counts.iter().filter(|(_,\
    \ v)| **v == max_count).cloned().collect()\n   |                             \
    \                               ^^^^^^ expected tuple, found reference\n   |\n\
    \   = note:  expected tuple `(&String, &isize)`\n           found reference `&_`\n\
    \nerror[E0599]: the method `collect` exists for struct `Cloned<Filter<std::collections::hash_map::Iter<'_,\
    \ String, isize>, [closure@/tmp/tmpml_j9rko.rs:17:33: 17:58]>>`, but its trait\
    \ bounds were not satisfied\n  --> /tmp/tmpml_j9rko.rs:17:69\n   |\n17 |     \
    \   letter_counts.iter().filter(|(_, v)| **v == max_count).cloned().collect()\n\
    \   |                                                                        ^^^^^^^\
    \ method cannot be called on `Cloned<Filter<std::collections::hash_map::Iter<'_,\
    \ String, isize>, [closure@/tmp/tmpml_j9rko.rs:17:33: 17:58]>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<Filter<std::collections::hash_map::Iter<'_, String, isize>, [closure@/tmp/tmpml_j9rko.rs:17:33:\
    \ 17:58]> as Iterator>::Item = &_`\n           which is required by `Cloned<Filter<std::collections::hash_map::Iter<'_,\
    \ String, isize>, [closure@/tmp/tmpml_j9rko.rs:17:33: 17:58]>>: Iterator`\n  \
    \         `Cloned<Filter<std::collections::hash_map::Iter<'_, String, isize>,\
    \ [closure@/tmp/tmpml_j9rko.rs:17:33: 17:58]>>: Iterator`\n           which is\
    \ required by `&mut Cloned<Filter<std::collections::hash_map::Iter<'_, String,\
    \ isize>, [closure@/tmp/tmpml_j9rko.rs:17:33: 17:58]>>: Iterator`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0271, E0599.\n\
    For more information about an error, try `rustc --explain E0271`.\n"
  stdout: ''
  timestamp: 1659821437
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut counts: HashMap<String, isize>\
    \ = HashMap::new();\n    for word in test.split(\" \") {\n        *counts.entry(word.to_string()).or_insert(0)\
    \ += 1;\n    }\n    counts\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"c\": 1, \"a\": 2, \"b\": 2}`,\n right: `{\"a\": 2, \"b\": 2}`', /tmp/tmpdce2xl6r.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821437
- exit_code: 1
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut result: HashMap<String, isize>\
    \ = HashMap::new();\n    let mut temp: HashMap<String, isize> = HashMap::new();\n\
    \    let mut max: isize = 0;\n    let mut max_val: String = \"\".to_string();\n\
    \    let mut max_vals: Vec<String> = Vec::new();\n\n    for s in test.split_whitespace()\
    \ {\n        let letter = s.to_string();\n        let count = temp.entry(letter).or_insert(0);\n\
    \        *count += 1;\n        if max < *count {\n            max = *count;\n\
    \            max_val = letter.clone();\n        }\n    }\n\n    for (key, val)\
    \ in temp.iter() {\n        if *val == max {\n            max_vals.push(key.clone());\n\
    \        }\n    }\n\n    for val in max_vals.iter() {\n        result.insert(val.clone(),\
    \ max);\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: SyntaxError
  stderr: "warning: variable `max_val` is assigned to, but never used\n  --> /tmp/tmpdfi1_1qf.rs:11:13\n\
    \   |\n11 |     let mut max_val: String = \"\".to_string();\n   |            \
    \ ^^^^^^^\n   |\n   = note: `#[warn(unused_variables)]` on by default\n   = note:\
    \ consider using `_max_val` instead\n\nwarning: value assigned to `max_val` is\
    \ never read\n  --> /tmp/tmpdfi1_1qf.rs:20:13\n   |\n20 |             max_val\
    \ = letter.clone();\n   |             ^^^^^^^\n   |\n   = note: `#[warn(unused_assignments)]`\
    \ on by default\n   = help: maybe it is overwritten before being read?\n\nerror[E0382]:\
    \ borrow of moved value: `letter`\n  --> /tmp/tmpdfi1_1qf.rs:20:23\n   |\n15 |\
    \         let letter = s.to_string();\n   |             ------ move occurs because\
    \ `letter` has type `String`, which does not implement the `Copy` trait\n16 |\
    \         let count = temp.entry(letter).or_insert(0);\n   |                 \
    \               ------ value moved here\n...\n20 |             max_val = letter.clone();\n\
    \   |                       ^^^^^^ value borrowed here after move\n\nerror: aborting\
    \ due to previous error; 2 warnings emitted\n\nFor more information about this\
    \ error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659821437
- exit_code: 0
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut result: HashMap<String, isize>\
    \ = HashMap::new();\n    let letters: Vec<String> = test.split_whitespace().map(|s|\
    \ s.to_string()).collect();\n    let mut max_value: isize = -1;\n    for letter\
    \ in letters {\n        let count = result.entry(letter).or_insert(0);\n     \
    \   *count += 1;\n        if *count > max_value {\n            max_value = *count;\n\
    \        }\n    }\n    let mut res: HashMap<String, isize> = HashMap::new();\n\
    \    for (key, value) in result {\n        if value == max_value {\n         \
    \   res.insert(key, value);\n        }\n    }\n    res\n}\n\nfn main() {\n   \
    \ let candidate = histogram;\n    assert_eq!(candidate(String::from(\"a b b a\"\
    )), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n  \
    \  assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821437
- exit_code: 1
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut results: HashMap<String, isize>\
    \ = HashMap::new();\n    let split_test = test.split(\" \");\n    let mut count:\
    \ isize = 0;\n    for i in split_test {\n        count += 1;\n        let key\
    \ = String::from(i);\n        let val = results.entry(key).or_insert(0);\n   \
    \     *val += 1;\n    }\n    for (key, value) in &results {\n        let x = value\
    \ / count;\n        let mut val = results.entry(key.to_string()).or_insert(0);\n\
    \        *val = x;\n    }\n    let mut max = 0;\n    let mut results_max: HashMap<String,\
    \ isize> = HashMap::new();\n    for (key, value) in &results {\n        if *value\
    \ > max {\n            max = *value;\n        }\n    }\n    for (key, value) in\
    \ &results {\n        if *value == max {\n            results_max.insert(key.to_string(),\
    \ *value);\n        }\n    }\n    return results_max;\n}\n\nfn main() {\n    let\
    \ candidate = histogram;\n    assert_eq!(candidate(String::from(\"a b b a\")),\
    \ HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `key`\n  --> /tmp/tmpqtre60_4.rs:24:10\n   |\n\
    24 |     for (key, value) in &results {\n   |          ^^^ help: if this is intentional,\
    \ prefix it with an underscore: `_key`\n   |\n   = note: `#[warn(unused_variables)]`\
    \ on by default\n\nwarning: variable does not need to be mutable\n  --> /tmp/tmpqtre60_4.rs:19:13\n\
    \   |\n19 |         let mut val = results.entry(key.to_string()).or_insert(0);\n\
    \   |             ----^^^\n   |             |\n   |             help: remove this\
    \ `mut`\n   |\n   = note: `#[warn(unused_mut)]` on by default\n\nerror[E0502]:\
    \ cannot borrow `results` as mutable because it is also borrowed as immutable\n\
    \  --> /tmp/tmpqtre60_4.rs:19:23\n   |\n17 |     for (key, value) in &results\
    \ {\n   |                         --------\n   |                         |\n \
    \  |                         immutable borrow occurs here\n   |              \
    \           immutable borrow later used here\n18 |         let x = value / count;\n\
    19 |         let mut val = results.entry(key.to_string()).or_insert(0);\n   |\
    \                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n\
    \nerror: aborting due to previous error; 2 warnings emitted\n\nFor more information\
    \ about this error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1659821437
- exit_code: 1
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let chars = test.chars().collect::<Vec<char>>();\n\
    \    let mut result = HashMap::new();\n    let mut max_char = &chars[0];\n   \
    \ let mut max_count = 0;\n    for c in chars {\n        let new_count = result.entry(c.to_string()).or_insert(0);\n\
    \        *new_count += 1;\n        if *new_count > max_count {\n            max_count\
    \ = *new_count;\n            max_char = &c;\n        }\n    }\n    result.remove(max_char);\n\
    \    result.insert(max_char.to_string(), max_count as isize);\n    result\n}\n\
    \nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `String: Borrow<char>` is not satisfied\n\
    \  --> /tmp/tmppo1jpu77.rs:20:12\n   |\n20 |     result.remove(max_char);\n  \
    \ |            ^^^^^^ the trait `Borrow<char>` is not implemented for `String`\n\
    \   |\n   = help: the following implementations were found:\n             <String\
    \ as Borrow<str>>\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659821437
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut letters = HashMap::new();\n\
    \    for l in test.split_whitespace() {\n        let letter = l.to_string();\n\
    \        *letters.entry(letter).or_insert(0) += 1;\n    }\n    letters\n}\n\n\
    fn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"b\": 2, \"c\": 1, \"a\": 2}`,\n right: `{\"a\": 2, \"b\": 2}`', /tmp/tmpz7v_kr9f.rs:19:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821437
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut hist = HashMap::new();\n  \
    \  for word in test.split(\" \") {\n        let count = hist.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n    }\n    hist\n}\n\nfn main() {\n    let candidate =\
    \ histogram;\n    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"c\": 1, \"a\": 2, \"b\": 2}`,\n right: `{\"a\": 2, \"b\": 2}`', /tmp/tmpfjbeiwlo.rs:19:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821437
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut map = HashMap::new();\n   \
    \ let chars = test.split(\" \");\n    for i in chars {\n        let count = map.entry(i.to_string()).or_insert(0);\n\
    \        *count += 1;\n    }\n    map\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"a\": 2, \"b\": 2, \"c\": 1}`,\n right: `{\"a\": 2, \"b\": 2}`', /tmp/tmp5arfzne4.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821437
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    // Write your code here\n    let mut\
    \ result: HashMap<String, isize> = HashMap::new();\n    let words: Vec<&str> =\
    \ test.split_whitespace().collect();\n    let max = words.iter().map(|x| x.len()).max().unwrap();\n\
    \    for s in words {\n        if s.len() == max {\n            *result.entry(s.to_string()).or_insert(0)\
    \ += 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"a\": 2, \"b\": 2, \"c\": 1}`,\n right: `{\"a\": 2, \"b\": 2}`', /tmp/tmpvsrf9nl2.rs:23:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821437
- exit_code: 0
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut char_count = HashMap::new();\n\
    \    let mut most_frequent = HashMap::new();\n    let mut max_count = 0;\n\n \
    \   // Iterate through each of the characters in the string\n    for c in test.split_whitespace()\
    \ {\n        // Keep track of the number of times a character appears\n      \
    \  let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n\n   \
    \     // Update the map of most frequent characters\n        if *count > max_count\
    \ {\n            max_count = *count;\n            most_frequent.clear();\n   \
    \         most_frequent.insert(c.to_string(), *count);\n        } else if *count\
    \ == max_count {\n            most_frequent.insert(c.to_string(), *count);\n \
    \       }\n    }\n\n    most_frequent\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821437
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut hist = HashMap::new();\n  \
    \  for key in test.split_whitespace() {\n        let count = hist.entry(key.to_string()).or_insert(0);\n\
    \        *count += 1;\n    }\n    hist\n}\n\nfn main() {\n    let candidate =\
    \ histogram;\n    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"a\": 2, \"b\": 2, \"c\": 1}`,\n right: `{\"b\": 2, \"a\": 2}`', /tmp/tmpd_8z9bjp.rs:19:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821437
- exit_code: 1
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut result: HashMap<String, isize>\
    \ = HashMap::new();\n    let mut counter: HashMap<String, isize> = HashMap::new();\n\
    \    let letters: Vec<String> = test.split_whitespace().map(|x| x.to_string()).collect();\n\
    \    for letter in letters {\n        let count = counter.entry(letter.clone()).or_insert(0);\n\
    \        *count += 1;\n    }\n    let max = counter.values().max().unwrap();\n\
    \    for (key, value) in counter {\n        if value == *max {\n            result.insert(key,\
    \ value);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate =\
    \ histogram;\n    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: SyntaxError
  stderr: "error[E0505]: cannot move out of `counter` because it is borrowed\n  -->\
    \ /tmp/tmpfjasfk70.rs:16:25\n   |\n15 |     let max = counter.values().max().unwrap();\n\
    \   |               ------- borrow of `counter` occurs here\n16 |     for (key,\
    \ value) in counter {\n   |                         ^^^^^^^ move out of `counter`\
    \ occurs here\n17 |         if value == *max {\n   |                     ----\
    \ borrow later used here\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0505`.\n"
  stdout: ''
  timestamp: 1659821437
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut res = HashMap::new();\n   \
    \ let mut max_count = 0;\n    let mut max_letter = \"\".to_string();\n    for\
    \ c in test.chars() {\n        let current_count = res.entry(c.to_string()).or_insert(0);\n\
    \        *current_count += 1;\n        if *current_count >= max_count {\n    \
    \        max_count = *current_count;\n            max_letter = c.to_string();\n\
    \        }\n    }\n    res.insert(max_letter, max_count);\n    res\n}\n\nfn main()\
    \ {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\" \": 3, \"a\": 2, \"b\": 2}`,\n right: `{\"a\": 2, \"b\": 2}`', /tmp/tmpxgzx3juk.rs:25:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821437
- exit_code: 1
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut map = HashMap::new();\n   \
    \ let letters: Vec<&str> = test.split(\" \").collect();\n    let max_count = letters.iter().map(|letter|\
    \ map.entry(letter).or_insert(0)).fold(0, |acc, n| acc.max(*n));\n    let mut\
    \ ret = HashMap::new();\n    for (letter, count) in map {\n        if *count ==\
    \ max_count {\n            ret.insert(letter.to_string(), count);\n        }\n\
    \    }\n    ret\n}\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `{integer}` cannot be dereferenced\n  --> /tmp/tmpefo9imly.rs:13:12\n\
    \   |\n13 |         if *count == max_count {\n   |            ^^^^^^\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0614`.\n"
  stdout: ''
  timestamp: 1659821437
- exit_code: 1
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut map = HashMap::new();\n   \
    \ let mut count: isize = 0;\n    let mut letter = String::new();\n    for ch in\
    \ test.chars() {\n        if map.contains_key(&ch.to_string()) {\n           \
    \ let mut tmp = map.get(&ch.to_string()).unwrap().clone();\n            tmp +=\
    \ 1;\n            map.insert(ch.to_string(), tmp);\n        } else {\n       \
    \     map.insert(ch.to_string(), 1);\n        }\n    }\n    for (k, v) in map.iter()\
    \ {\n        if v > &count {\n            count = *v;\n            letter = k.to_string();\n\
    \        }\n    }\n    let mut result = HashMap::new();\n    result.insert(letter,\
    \ count);\n    result\n}\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed for `HashMap<K, V>`\n  --> /tmp/tmpua5s_sip.rs:13:31\n\
    \   |\n8  |     let mut map = HashMap::new();\n   |         ------- consider giving\
    \ `map` the explicit type `HashMap<K, V>`, where the type parameter `V` is specified\n\
    ...\n13 |             let mut tmp = map.get(&ch.to_string()).unwrap().clone();\n\
    \   |                               ^^^ cannot infer type for type parameter `V`\n\
    \   |\n   = note: type must be known at this point\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659821437
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut map = HashMap::new();\n   \
    \ let mut max_count = 0;\n    for c in test.chars() {\n        let val = map.entry(c.to_string()).or_insert(0);\n\
    \        *val += 1;\n        if *val > max_count {\n            max_count = *val;\n\
    \        }\n    }\n    let mut ret = HashMap::new();\n    for (c, v) in map {\n\
    \        if v == max_count {\n            ret.insert(c, v);\n        }\n    }\n\
    \    ret\n}\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\" \": 3}`,\n right: `{\"b\": 2, \"a\": 2}`', /tmp/tmppxp1v720.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821438
- exit_code: 1
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let chars: Vec<char> = test.chars().collect();\n\
    \    let count: HashMap<char, isize> = chars.iter().fold(HashMap::new(), |mut\
    \ acc, &c| {\n        *acc.entry(c).or_insert(0) += 1;\n        acc\n    });\n\
    \    let key: char = *count.iter().max_by_key(|&(_, v)| v).unwrap().0;\n    let\
    \ value: isize = *count.iter().max_by_key(|&(_, v)| v).unwrap().1;\n    let mut\
    \ result: HashMap<String, isize> = HashMap::new();\n    result.insert(key.to_string(),\
    \ value);\n    for (key, value) in count {\n        if key != result.keys().next().unwrap().chars().nth(0).unwrap()\
    \ && value == result.values().next().unwrap() {\n            result.insert(key.to_string(),\
    \ value);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate =\
    \ histogram;\n    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp21th393f.rs:18:85\n   |\n\
    18 |         if key != result.keys().next().unwrap().chars().nth(0).unwrap() &&\
    \ value == result.values().next().unwrap() {\n   |                           \
    \                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n18 |         if key != result.keys().next().unwrap().chars().nth(0).unwrap()\
    \ && value == *result.values().next().unwrap() {\n   |                       \
    \                                                              +\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659821437
- exit_code: 0
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let words: Vec<&str> = test.split_whitespace().collect();\n\
    \    let mut counts: HashMap<String, isize> = HashMap::new();\n    for word in\
    \ words {\n        let count = counts.entry(word.to_string()).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut dict: HashMap<String, isize> = HashMap::new();\n\
    \    let mut max_val: isize = 0;\n    for (key, value) in counts.iter() {\n  \
    \      if *value > max_val {\n            max_val = *value;\n            dict.clear();\n\
    \            dict.insert(key.to_string(), *value);\n        } else if *value ==\
    \ max_val {\n            dict.insert(key.to_string(), *value);\n        }\n  \
    \  }\n    dict\n}\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821438
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut key = \"\".to_string();\n \
    \   let mut value = 0;\n    let mut hist = HashMap::new();\n    for c in test.split_whitespace()\
    \ {\n        let count = hist.entry(c.to_string()).or_insert(0);\n        *count\
    \ += 1;\n    }\n    for (k, v) in &hist {\n        if *v > value {\n         \
    \   key = k.to_string();\n            value = *v;\n        }\n    }\n    let mut\
    \ result = HashMap::new();\n    result.insert(key, value);\n    result\n}\n\n\
    fn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"a\": 2}`,\n right: `{\"a\": 2, \"b\": 2}`', /tmp/tmpj0qids_f.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821438
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    // YOUR CODE GOES HERE\n    HashMap::new()\n\
    }\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{}`,\n right: `{\"b\": 2, \"a\": 2}`', /tmp/tmpuu1z95gj.rs:14:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821438
- exit_code: 1
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    // We use a HashMap to store the letters\
    \ and their count, and a Vec to store\n    // the letters with the maximum count.\n\
    \    let mut letter_counts = HashMap::new();\n    let mut max_count_letters =\
    \ Vec::new();\n    // We split the string on spaces and iterate the array of letters.\n\
    \    let letters = test.split(\" \");\n    for letter in letters {\n        //\
    \ We calculate the number of occurrences of a letter and store it in the map.\n\
    \        let count = letter_counts.entry(letter.to_string()).or_insert(0);\n \
    \       *count += 1;\n        // We check if the current count is greater than\
    \ the maximum count.\n        // If it is, we clear the vector of max count letters\n\
    \        // and add the current letter to it.\n        if *count > max_count_letters.len()\
    \ as isize {\n            max_count_letters.clear();\n            max_count_letters.push(letter.to_string());\n\
    \        }\n        // If the current count is equal to the maximum count,\n \
    \       // we just add the current letter to the vector of max count letters.\n\
    \        else if *count == max_count_letters.len() as isize {\n            max_count_letters.push(letter.to_string());\n\
    \        }\n    }\n    // We build the result map by iterating the letters with\
    \ max count\n    // and setting the corresponding count.\n    let mut result:\
    \ HashMap<String, isize> = HashMap::new();\n    for letter in max_count_letters\
    \ {\n        result.insert(letter, *letter_counts.get(&letter).unwrap());\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"\
    a b b a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `letter`\n  --> /tmp/tmp0bj555pf.rs:35:50\n\
    \   |\n34 |     for letter in max_count_letters {\n   |         ------ move occurs\
    \ because `letter` has type `String`, which does not implement the `Copy` trait\n\
    35 |         result.insert(letter, *letter_counts.get(&letter).unwrap());\n  \
    \ |                       ------ value moved here    ^^^^^^^ value borrowed here\
    \ after move\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659821437
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut letters: HashMap<String, isize>\
    \ = HashMap::new();\n    for letter in test.split_whitespace() {\n        let\
    \ counter = letters.entry(letter.to_string()).or_insert(0);\n        *counter\
    \ += 1;\n    }\n    letters\n}\n\nfn main() {\n    let candidate = histogram;\n\
    \    assert_eq!(candidate(String::from(\"a b b a\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c a b\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"),\
    \ 2)]));\n    assert_eq!(candidate(String::from(\"a b c d g\")), HashMap::from([(String::from(\"\
    a\"), 1), (String::from(\"b\"), 1), (String::from(\"c\"), 1), (String::from(\"\
    d\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"b b b\
    \ b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"c\": 1, \"a\": 2, \"b\": 2}`,\n right: `{\"a\": 2, \"b\": 2}`', /tmp/tmpwrg10e1t.rs:19:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821438
- exit_code: 101
  program: "use std::collections::HashMap;\n\n/// Given a string representing a space\
    \ separated lowercase letters, return a dictionary\n/// of the letter with the\
    \ most repetition and containing the corresponding count.\n/// If several letters\
    \ have the same occurrence, return all of them.\n/// Example:\nfn histogram(test:\
    \ String) -> HashMap<String, isize> {\n    let mut res = HashMap::new();\n   \
    \ let mut max = 0;\n    let vec: Vec<&str> = test.split(\" \").collect();\n  \
    \  for x in vec {\n        let count = res.entry(x.to_string()).or_insert(0);\n\
    \        *count += 1;\n        if *count > max {\n            max = *count;\n\
    \        }\n    }\n    res.iter()\n        .filter(|&(_, x)| *x == max)\n    \
    \    .map(|(k, v)| (k.to_string(), *v))\n        .collect()\n}\n\nfn main() {\n\
    \    let candidate = histogram;\n    assert_eq!(candidate(String::from(\"a b b\
    \ a\")), HashMap::from([(String::from(\"a\"), 2), (String::from(\"b\"), 2)]));\n\
    \    assert_eq!(candidate(String::from(\"a b c a b\")), HashMap::from([(String::from(\"\
    a\"), 2), (String::from(\"b\"), 2)]));\n    assert_eq!(candidate(String::from(\"\
    a b c d g\")), HashMap::from([(String::from(\"a\"), 1), (String::from(\"b\"),\
    \ 1), (String::from(\"c\"), 1), (String::from(\"d\"), 1), (String::from(\"g\"\
    ), 1)]));\n    assert_eq!(candidate(String::from(\"r t g\")), HashMap::from([(String::from(\"\
    r\"), 1), (String::from(\"t\"), 1), (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\
    b b b b a\")), HashMap::from([(String::from(\"b\"), 4)]));\n    assert_eq!(candidate(String::from(\"\
    r t g\")), HashMap::from([(String::from(\"r\"), 1), (String::from(\"t\"), 1),\
    \ (String::from(\"g\"), 1)]));\n    assert_eq!(candidate(String::from(\"\")),\
    \ HashMap::from([]));\n    assert_eq!(candidate(String::from(\"a\")), HashMap::from([(String::from(\"\
    a\"), 1)]));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `{\"\": 1}`,\n right: `{}`', /tmp/tmpvk5_kvs2.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821438
