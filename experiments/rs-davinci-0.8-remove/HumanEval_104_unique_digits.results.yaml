language: rs
name: HumanEval_104_unique_digits
results:
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    x.into_iter().filter(|i| \n        i.to_string().chars().all(|c| c.to_digit(10).unwrap()\
    \ & 1 == 1)\n    ).collect()\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpyo0cqvus.rs:13:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822356
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    x.into_iter().filter(|&x| x.to_string().chars().all(|x| x.to_digit(10).unwrap()\
    \ % 2 == 1)).collect()\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpnshke_bg.rs:11:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822356
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut res = Vec::new();\n    for i in &x {\n        if i.to_string().chars().all(|j|\
    \ j.to_digit(10).unwrap() % 2 != 0) {\n            res.push(*i);\n        }\n\
    \    }\n    res.sort();\n    res\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822356
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = Vec::new();\n    for i in x {\n        if !i.to_string().chars().any(|x|\
    \ x.is_digit(10) && x.to_digit(10).unwrap() % 2 == 0) {\n            result.push(i);\n\
    \        }\n    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822356
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    // Solution 1\n    // x.iter().filter(|&n|\n    //     n.to_string().chars().all(|c|\
    \ c.to_digit(10).unwrap() % 2 == 1))\n    //     .cloned().collect()\n\n    //\
    \ Solution 2\n    x.iter().filter(|n| n.to_string().chars().all(|c| c.is_digit(10)\
    \ && c.to_digit(10).unwrap() % 2 == 1))\n        .cloned().collect()\n}\n\nfn\
    \ main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpwlsbl87u.rs:18:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822356
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result: Vec<isize> = Vec::new();\n    for num in x {\n      \
    \  if has_even_digit(num) {\n            continue;\n        }\n        result.push(num);\n\
    \    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate =\
    \ unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n -->\
    \ /tmp/tmpv6655qxy.rs:8:12\n  |\n8 |         if has_even_digit(num) {\n  |   \
    \         ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822356
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result: Vec<isize> = Vec::new();\n    for num in x {\n      \
    \  if !has_even_digit(num) {\n            result.push(num);\n        }\n    }\n\
    \    result.sort();\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n -->\
    \ /tmp/tmpyo7mj2ra.rs:8:13\n  |\n8 |         if !has_even_digit(num) {\n  |  \
    \           ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822356
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    return x.into_iter().filter(|&x| x.to_string().chars().filter(|&c| c.is_numeric()\
    \ && (c.to_digit(10).unwrap() % 2 == 0)).count() == 0).collect();\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpb0uqn0fs.rs:11:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822356
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut vec = Vec::new();\n    for i in x {\n        if !i.to_string().chars().any(|x|\
    \ x.is_digit(10) && x.to_digit(10).unwrap() % 2 == 0) {\n            vec.push(i);\n\
    \        }\n    }\n    vec.sort();\n    vec\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822356
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    x.into_iter().filter(|a| *a.to_string().as_bytes().iter().next().unwrap()\
    \ != b'0' &&\n                            a.to_string().as_bytes().iter().filter(|&y|\
    \ y % 2 == 0).count() == 0)\n     .collect::<Vec<isize>>()\n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpm0ftg_0c.rs:13:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822356
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    x.into_iter().filter(|&x| x.to_string().chars().all(|d| d.to_digit(10).unwrap()\
    \ & 1 == 1)).collect()\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpje5pdr8q.rs:11:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822356
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut v = Vec::new();\n    for i in x {\n        if i.to_string().chars().any(|c|\
    \ c.is_digit(10) && c.to_digit(10).unwrap() % 2 == 0) {\n            continue;\n\
    \        }\n        v.push(i);\n    }\n    v.sort();\n    v\n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822356
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut unique_vec: Vec<isize> = Vec::new();\n    let mut flag: bool\
    \ = false;\n    for xi in x {\n        let mut x_copy = xi;\n        while x_copy\
    \ > 0 {\n            if x_copy % 2 == 0 {\n                flag = true;\n    \
    \            break;\n            }\n            x_copy /= 10;\n        }\n   \
    \     if !flag {\n            unique_vec.push(xi);\n        }\n        flag =\
    \ false;\n    }\n    unique_vec.sort();\n    unique_vec\n}\n\nfn main() {\n  \
    \  let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822356
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    // your code here...\n    let mut res: Vec<isize> = vec![];\n    for\
    \ num in x {\n        if num.to_string().chars().any(|c| c.is_digit(10) && (c.to_digit(10).unwrap()\
    \ as isize) % 2 == 0) {\n            continue;\n        }\n        res.push(num);\n\
    \    }\n    res.sort();\n    res\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822356
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    x.into_iter().filter(|&i| !contains_even_digit(i)).collect()\n}\n\nfn\
    \ main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `contains_even_digit` in this scope\n\
    \ --> /tmp/tmptxu39ua2.rs:6:32\n  |\n6 |     x.into_iter().filter(|&i| !contains_even_digit(i)).collect()\n\
    \  |                                ^^^^^^^^^^^^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822356
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    x.into_iter().filter(|i| !i.to_string().chars().any(|c| c.is_digit(10)\
    \ && (c.to_digit(10).unwrap() & 1) == 0)).collect()\n}\n\nfn main() {\n    let\
    \ candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]),\
    \ vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpe615p7we.rs:11:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822356
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut res = vec![];\n    for &num in &x {\n        if num.to_string().chars().all(|c|\
    \ c.to_digit(10).unwrap() % 2 == 1) {\n            res.push(num);\n        }\n\
    \    }\n    res.sort();\n    res\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822356
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut xx = x.clone();\n    let mut i = 0;\n    while i < xx.len() {\n\
    \        let mut all_odd = true;\n        let mut tmp = xx[i];\n        while\
    \ tmp > 0 {\n            if (tmp % 10) % 2 == 0 {\n                all_odd = false;\n\
    \                break;\n            }\n            tmp /= 10;\n        }\n  \
    \      if !all_odd {\n            xx.remove(i);\n        } else {\n          \
    \  i += 1;\n        }\n    }\n    xx.sort();\n    xx\n}\n\nfn main() {\n    let\
    \ candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]),\
    \ vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822356
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut out = Vec::new();\n    for num in x {\n        if num.to_string().chars().any(|x|\
    \ x.is_numeric() && x.to_digit(10).unwrap() % 2 == 0) {\n            continue;\n\
    \        }\n        out.push(num);\n    }\n    out.sort();\n    out\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822356
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    x.into_iter().filter(|x| !x.to_string().chars().any(|c| c.is_digit(10)\
    \ && (c as isize) % 2 == 0)).collect()\n}\n\nfn main() {\n    let candidate =\
    \ unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpcs7io27u.rs:11:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822356
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut res = Vec::new();\n    let mut is_odd = true;\n    for i in x\
    \ {\n        is_odd = true;\n        let mut i_copy = i;\n        while i_copy\
    \ > 0 {\n            if i_copy % 2 == 0 {\n                is_odd = false;\n \
    \               break;\n            }\n            i_copy /= 10;\n        }\n\
    \        if is_odd {\n            res.push(i);\n        }\n    }\n    res.sort();\n\
    \    res\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822356
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result: Vec<isize> = vec![];\n    for y in x {\n        let mut\
    \ unique = true;\n        let mut y_ = y;\n        while y_ > 0 {\n          \
    \  if y_ % 2 == 0 {\n                unique = false;\n                break;\n\
    \            }\n            y_ /= 10;\n        }\n        if unique {\n      \
    \      result.push(y);\n        }\n    }\n    result.sort();\n    result\n}\n\n\
    fn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822356
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut v = vec![];\n    for num in x {\n        if !contains_even_digit(num)\
    \ {\n            v.push(num);\n        }\n    }\n    v.sort();\n    v\n}\n\nfn\
    \ main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `contains_even_digit` in this scope\n\
    \ --> /tmp/tmpc6gn6ulp.rs:8:13\n  |\n8 |         if !contains_even_digit(num)\
    \ {\n  |             ^^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659822356
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    x.into_iter().filter(|i| i.to_string().chars().all(|c| c.to_digit(10).unwrap()\
    \ % 2 == 1)).collect()\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpoi2ljiyn.rs:11:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822356
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut res = Vec::new();\n    for i in x {\n        if i.to_string().chars().any(|c|\
    \ c == '0' || c == '2' || c == '4' || c == '6' || c == '8') {\n            continue;\n\
    \        }\n        res.push(i);\n    }\n    res.sort();\n    res\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822356
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut results = Vec::new();\n    for num in x {\n        let str_num\
    \ = num.to_string();\n        if !str_num.contains(\"2\") && !str_num.contains(\"\
    4\") && !str_num.contains(\"6\") && !str_num.contains(\"8\") {\n            results.push(num);\n\
    \        }\n    }\n    results.sort();\n    results\n}\n\nfn main() {\n    let\
    \ candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]),\
    \ vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[10]`,\n right: `[]`', /tmp/tmp0yuv8jf1.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822357
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    x.into_iter().filter(|&x| all_odd_digits(x)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `all_odd_digits` in this scope\n -->\
    \ /tmp/tmpituyqa10.rs:6:31\n  |\n6 |     x.into_iter().filter(|&x| all_odd_digits(x)).collect()\n\
    \  |                               ^^^^^^^^^^^^^^ not found in this scope\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822356
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut res = Vec::new();\n    for i in x {\n        if has_even_digit(i)\
    \ {\n            continue;\n        }\n        res.push(i);\n    }\n    res.sort();\n\
    \    res\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n -->\
    \ /tmp/tmph4uy7hce.rs:8:12\n  |\n8 |         if has_even_digit(i) {\n  |     \
    \       ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822356
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    // result holds unique digits\n    let mut result: Vec<isize> = Vec::new();\n\
    \    // \n    for item in x {\n        // temporary variable to hold the current\
    \ number\n        let mut temp = item;\n        // temporary variable to hold\
    \ the number of even digits in the current number\n        let mut even_digits:\
    \ u32 = 0;\n        // loop until temp is zero\n        while temp > 0 {\n   \
    \         // \n            let digit = temp % 10;\n            // \n         \
    \   if digit % 2 == 0 {\n                // increment even digits\n          \
    \      even_digits += 1;\n            }\n            // \n            temp /=\
    \ 10;\n        }\n        // \n        if even_digits == 0 {\n            // add\
    \ the number to the result\n            result.push(item);\n        }\n    }\n\
    \    // \n    result.sort();\n    // \n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822357
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    x.into_iter().filter(|&n| {\n        let mut m = n;\n        while m\
    \ > 0 {\n            if m % 2 == 0 {\n                return false;\n        \
    \    }\n            m /= 10;\n        }\n        true\n    }).collect()\n}\n\n\
    fn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpe87vklvw.rs:20:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822357
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut y: Vec<isize> = vec![];\n    'outer: for i in x {\n        let\
    \ mut j = i;\n        while j > 0 {\n            if j % 2 == 0 {\n           \
    \     continue 'outer;\n            }\n            j /= 10;\n        }\n     \
    \   y.push(i);\n    }\n    y.sort();\n    y\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822357
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut r: Vec<isize> = Vec::new();\n    for a in x {\n        let nums:\
    \ Vec<char> = a.to_string().chars().collect();\n        let mut flag = true;\n\
    \        for b in nums {\n            let b_num: isize = b.to_string().parse().unwrap();\n\
    \            if b_num % 2 == 0 {\n                flag = false;\n            \
    \    break;\n            }\n        }\n        if flag {\n            r.push(a);\n\
    \        }\n    }\n    r.sort();\n    r\n}\n\nfn main() {\n    let candidate =\
    \ unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822357
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    x.into_iter().filter(|&x| x.to_string().chars().filter(|c| c.is_digit(10)\
    \ && (c.to_digit(10).unwrap() % 2 == 0)).count() == 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmp6ygikzq2.rs:11:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822357
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = Vec::new();\n    for num in x {\n        if num.to_string().chars().all(|c|\
    \ c.to_digit(10).unwrap() % 2 == 1) {\n            result.push(num);\n       \
    \ }\n    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822357
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    // a. unique_digits([1, 20, 23, 4, 8]) = [1, 23]\n    // b. unique_digits([13,\
    \ 6, 7, 8]) = []\n    // c. unique_digits([5, 2, 9]) = [5, 2, 9]\n    // d. unique_digits([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) = []\n    unimplemented!()\n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp9b732gtt.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822357
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result: Vec<isize> = Vec::new();\n    for i in x {\n        if\
    \ i.to_string().chars().any(|c| c.is_digit(10) && c.to_digit(10).unwrap() % 2\
    \ == 0) {\n            continue;\n        }\n        result.push(i);\n    }\n\
    \    result.sort();\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822357
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut u = x.iter().filter(|&&n| has_only_odd_digits(n)).collect::<Vec<_>>();\n\
    \    u.sort();\n    u\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `has_only_odd_digits` in this scope\n\
    \ --> /tmp/tmp1ya6vo4d.rs:6:39\n  |\n6 |     let mut u = x.iter().filter(|&&n|\
    \ has_only_odd_digits(n)).collect::<Vec<_>>();\n  |                          \
    \             ^^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp1ya6vo4d.rs:8:5\n  |\n5 | fn unique_digits(x: Vec<isize>)\
    \ -> Vec<isize> {\n  |                                    ---------- expected\
    \ `Vec<isize>` because of return type\n...\n8 |     u\n  |     ^ expected `isize`,\
    \ found `&isize`\n  |\n  = note: expected struct `Vec<isize>`\n             found\
    \ struct `Vec<&isize>`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0425.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822357
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut res = Vec::new();\n    for i in x {\n        if i.to_string().chars().all(|c|\
    \ c.to_digit(10).unwrap() % 2 == 1) {\n            res.push(i);\n        }\n \
    \   }\n    res.sort();\n    res\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822357
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    return x\n        .iter()\n        .filter(|&x|\n            format!(\"\
    {}\", x)\n                .chars()\n                .map(|c| c.to_digit(10).unwrap())\n\
    \                .collect::<Vec<u32>>()\n                .iter()\n           \
    \     .all(|x| x & 1 == 1)\n        )\n        .cloned()\n        .collect::<Vec<isize>>();\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmp5puifgz5.rs:22:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822357
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut res = Vec::new();\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            res.push(i);\n        }\n    }\n    res.sort();\n    res\n}\n\
    \nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n -->\
    \ /tmp/tmphsqn1cju.rs:8:13\n  |\n8 |         if !has_even_digit(i) {\n  |    \
    \         ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822356
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    x.into_iter().filter(|&i| i.to_string().chars().all(|c| c.to_digit(10).unwrap()\
    \ % 2 == 1)).collect()\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmphtb10p2g.rs:11:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822357
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result: Vec<isize> = Vec::new();\n    for i in x {\n        if\
    \ i < 0 {\n            continue;\n        }\n        let mut all_unique = true;\n\
    \        let mut found_even = false;\n        let mut num = i;\n        while\
    \ num > 0 {\n            let digit = num % 10;\n            if digit % 2 == 0\
    \ {\n                found_even = true;\n                break;\n            }\n\
    \            num /= 10;\n            if num % 10 == digit {\n                all_unique\
    \ = false;\n                break;\n            }\n        }\n        if all_unique\
    \ && !found_even {\n            result.push(i);\n        }\n    }\n    result.sort();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 15]`,\n right: `[1, 15, 33]`', /tmp/tmpbkkexmcf.rs:36:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822357
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    x.into_iter().filter(|x| x.to_string().chars().all(|x| x.to_digit(10).unwrap()\
    \ % 2 == 1)).collect()\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpxslnw5el.rs:11:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822357
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut digits: Vec<isize> = Vec::new();\n    for i in 0..x.len() {\n\
    \        let mut has_even = false;\n        let mut input = x[i];\n        while\
    \ input > 0 {\n            let temp = input % 10;\n            if temp % 2 ==\
    \ 0 {\n                has_even = true;\n                break;\n            }\n\
    \            input /= 10;\n        }\n        if !has_even {\n            digits.push(x[i]);\n\
    \        }\n    }\n    digits.sort();\n    digits\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822357
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    x.into_iter().filter(|&x| x.to_string().chars().any(|x| !x.is_digit(10))).collect()\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[1, 15, 33]`', /tmp/tmpt9qw1gil.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822357
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    x.into_iter().filter(|&y| {\n        let mut z = y;\n        loop {\n\
    \            if z % 2 == 0 {\n                return false;\n            }\n \
    \           z /= 10;\n            if z == 0 {\n                break;\n      \
    \      }\n        }\n        true\n    }).collect()\n}\n\nfn main() {\n    let\
    \ candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]),\
    \ vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmp6u6pv6iy.rs:23:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822357
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut even = HashSet::new();\n    for num in x {\n        let t = num;\n\
    \        let mut num = num;\n        while num > 0 {\n            let digit =\
    \ num % 10;\n            if digit % 2 == 0 {\n                even.insert(t);\n\
    \                break;\n            }\n            num /= 10;\n        }\n  \
    \  }\n    let mut unique = Vec::new();\n    for num in x {\n        if !even.contains(&num)\
    \ {\n            unique.push(num);\n        }\n    }\n    unique.sort();\n   \
    \ unique\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmpasn7d2po.rs:6:20\n  |\n6 |     let mut even = HashSet::new();\n  | \
    \                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659822357
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    x.into_iter().filter(|&i| {\n        i.to_string().chars().all(|c| c.to_digit(10).unwrap()\
    \ % 2 == 1)\n    }).collect::<Vec<isize>>()\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpg517e4hl.rs:13:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822357
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    x.into_iter().filter(|x| {\n        let s = x.to_string();\n        s.bytes().all(|b|\
    \ b % 2 == 49)\n    }).collect::<Vec<isize>>()\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[1, 15, 33]`', /tmp/tmpbji_tf9m.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822357
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    // let even_digits = [2, 4, 6, 8];\n    let mut uniques = vec![];\n \
    \   let mut even_flag = false;\n    for i in x {\n        for n in i.to_string().chars()\
    \ {\n            if n == '2' || n == '4' || n == '6' || n == '8' {\n         \
    \       even_flag = true;\n                break;\n            }\n        }\n\
    \        if !even_flag {\n            uniques.push(i);\n        }\n        even_flag\
    \ = false;\n    }\n    return uniques;\n}\n\nfn main() {\n    let candidate =\
    \ unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmp3s1o4gk5.rs:26:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822357
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let y: Vec<isize> = x.into_iter().filter(|&e| e.to_string().chars().all(|c|\
    \ c.to_digit(10).unwrap() % 2 == 1)).collect();\n    y.sort();\n    y\n}\n\nfn\
    \ main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0596]: cannot borrow `y` as mutable, as it is not declared as mutable\n\
    \ --> /tmp/tmphxnklxvo.rs:7:5\n  |\n6 |     let y: Vec<isize> = x.into_iter().filter(|&e|\
    \ e.to_string().chars().all(|c| c.to_digit(10).unwrap() % 2 == 1)).collect();\n\
    \  |         - help: consider changing this to be mutable: `mut y`\n7 |     y.sort();\n\
    \  |     ^ cannot borrow as mutable\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0596`.\n"
  stdout: ''
  timestamp: 1659822357
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut out = Vec::new();\n    for &i in &x {\n        if i.to_string().chars().all(|c|\
    \ c.to_digit(10).unwrap() % 2 == 1) {\n            out.push(i);\n        }\n \
    \   }\n    out.sort();\n    out\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822357
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut odd_digits = Vec::new();\n    for num in x {\n        let mut\
    \ num = num;\n        let mut is_odd = true;\n        while num > 0 {\n      \
    \      if num % 2 == 0 {\n                is_odd = false;\n                break;\n\
    \            }\n            num /= 10;\n        }\n        if is_odd {\n     \
    \       odd_digits.push(num);\n        }\n    }\n    odd_digits.sort();\n    odd_digits\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 0, 0]`,\n right: `[1, 15, 33]`', /tmp/tmpelev01h6.rs:27:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822357
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    x.into_iter().filter(|&n| n.to_string().chars().all(|c| c.to_digit(10).unwrap()\
    \ % 2 == 1)).collect()\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmp2zfox0sg.rs:11:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822357
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut list = Vec::new();\n    for i in x {\n        let mut flag =\
    \ true;\n        for digit in digits(i) {\n            if digit % 2 == 0 {\n \
    \               flag = false;\n                break;\n            }\n       \
    \ }\n        if flag {\n            list.push(i);\n        }\n    }\n    list.sort();\n\
    \    list\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `digits` in this scope\n --> /tmp/tmpwv6i_qzc.rs:9:22\n\
    \  |\n9 |         for digit in digits(i) {\n  |                      ^^^^^^ not\
    \ found in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822357
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut ret = Vec::new();\n    for n in x {\n        if n.to_string().chars().any(|c|\
    \ c.is_digit(10) && c.to_digit(10).unwrap() % 2 == 0) {\n            continue;\n\
    \        }\n        ret.push(n);\n    }\n    ret.sort();\n    ret\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822357
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result: Vec<isize> = vec![];\n    for i in x {\n        if i.to_string().chars().any(|c|\
    \ c.is_numeric() && c.to_digit(10).unwrap() % 2 == 0) {\n            continue;\n\
    \        }\n        result.push(i);\n    }\n    result.sort();\n    result\n}\n\
    \nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822357
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut res = Vec::new();\n    for x in x {\n        if x.to_string().chars().all(|c|\
    \ !(c.to_digit(10).unwrap() % 2 == 0)) {\n            res.push(x);\n        }\n\
    \    }\n    res.sort();\n    res\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822357
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut y = Vec::new();\n    let mut i = 0;\n    while i < x.len() {\n\
    \        let mut digits: Vec<isize> = Vec::new();\n        let mut m = x[i];\n\
    \        while m > 0 {\n            digits.push(m % 10);\n            m /= 10;\n\
    \        }\n        if digits.iter().filter(|&n| *n % 2 == 0).count() == 0 {\n\
    \            y.push(x[i]);\n        }\n        i += 1;\n    }\n    y.sort();\n\
    \    y\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822357
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    x.into_iter().filter(|&x| x.to_string().chars().all(|x| x.to_digit(10).unwrap()\
    \ % 2 == 1)).collect()\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpnshke_bg.rs:11:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822356
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut a = Vec::new();\n    for num in x {\n        let mut digits =\
    \ num.to_string().chars().collect::<Vec<char>>();\n        let mut b = false;\n\
    \        for i in digits {\n            let i = i.to_string().parse::<isize>().unwrap();\n\
    \            if i % 2 == 0 {\n                b = true;\n                break;\n\
    \            }\n        }\n        if !b {\n            a.push(num);\n       \
    \ }\n    }\n    a.sort();\n    a\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822357
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    x.into_iter().filter(|&x| x.to_string().chars().filter(|&c| c.is_digit(10)\
    \ && c.is_even()).count() == 0).collect()\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_even` found for type `char` in the current\
    \ scope\n --> /tmp/tmpam2a8hxx.rs:6:85\n  |\n6 |     x.into_iter().filter(|&x|\
    \ x.to_string().chars().filter(|&c| c.is_digit(10) && c.is_even()).count() ==\
    \ 0).collect()\n  |                                                          \
    \                           ^^^^^^^ method not found in `char`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659822357
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result: Vec<isize> = Vec::new();\n    for i in x {\n        if\
    \ has_even_digit(i) {\n            continue;\n        }\n        result.push(i);\n\
    \    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate =\
    \ unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n -->\
    \ /tmp/tmpk4l7a40r.rs:8:12\n  |\n8 |         if has_even_digit(i) {\n  |     \
    \       ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822357
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut elements: Vec<isize> = Vec::new();\n    let mut temp: isize;\n\
    \    let mut count: isize;\n    for i in x {\n        temp = i;\n        count\
    \ = 0;\n        while temp > 0 {\n            if temp % 2 == 0 {\n           \
    \     count += 1;\n            }\n            temp /= 10;\n        }\n       \
    \ if count == 0 {\n            elements.push(i);\n        }\n    }\n    elements.sort();\n\
    \    elements\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822357
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    x.into_iter().filter(|&x| x.to_string().chars().any(|c| c.is_numeric()\
    \ && c.to_digit(10).unwrap() % 2 == 1)).collect()\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1422, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpc5gfpn4h.rs:11:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822357
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    // YOUR CODE HERE\n    let mut res = Vec::new();\n    for i in x {\n\
    \        if (!i.to_string().contains(\"2\") && !i.to_string().contains(\"4\")\
    \ && !i.to_string().contains(\"6\") && !i.to_string().contains(\"8\") && !i.to_string().contains(\"\
    0\")) {\n            res.push(i);\n        }\n    }\n    res.sort();\n    res\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822357
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    x.into_iter().filter(|i| {\n        let mut v = *i;\n        while v\
    \ > 0 {\n            if v % 2 == 0 {\n                return false;\n        \
    \    }\n            v /= 10;\n        }\n        true\n    }).collect()\n}\n\n\
    fn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmp8irep1rk.rs:20:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822357
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut res = vec![];\n    for i in x {\n        if has_even_digit(i)\
    \ {\n            continue;\n        } else {\n            res.push(i);\n     \
    \   }\n    }\n    res.sort();\n    res\n}\n\nfn main() {\n    let candidate =\
    \ unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n -->\
    \ /tmp/tmpukx10ych.rs:8:12\n  |\n8 |         if has_even_digit(i) {\n  |     \
    \       ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822357
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    x.into_iter().filter(|&x| !x.to_string().chars().any(|c| c.is_digit(10)\
    \ && c.to_digit(10).unwrap() % 2 == 0)).collect()\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpsh6ikn86.rs:11:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822357
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result: Vec<isize> = Vec::new();\n    for i in x {\n        let\
    \ s = i.to_string();\n        if !s.contains(\"2\") && !s.contains(\"4\") && !s.contains(\"\
    6\") && !s.contains(\"8\") && !s.contains(\"0\") {\n            result.push(i);\n\
    \        }\n    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822358
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut res = vec![];\n    for n in x {\n        if (n / 10 == 0 && n\
    \ % 2 != 0) || (n / 10 != 0 && !has_even_digit(n)) {\n            res.push(n);\n\
    \        }\n    }\n    res.sort();\n    res\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n -->\
    \ /tmp/tmp29nblivo.rs:8:60\n  |\n8 |         if (n / 10 == 0 && n % 2 != 0) ||\
    \ (n / 10 != 0 && !has_even_digit(n)) {\n  |                                 \
    \                           ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659822357
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut y = x.clone();\n    y.sort();\n    let mut l = vec![];\n    for\
    \ i in y {\n        if !contains_even_digit(i) {\n            l.push(i);\n   \
    \     }\n    }\n    l\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `contains_even_digit` in this scope\n\
    \  --> /tmp/tmp3dfbwb_z.rs:10:13\n   |\n10 |         if !contains_even_digit(i)\
    \ {\n   |             ^^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659822357
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n\tx.iter().filter(|&n| {\n\t\tlet s = n.to_string();\n\t\ts.chars().all(|c|\
    \ {\n\t\t\tlet x = c.to_digit(10).unwrap();\n\t\t\tx%2 != 0\n\t\t})\n\t}).cloned().collect()\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpybfips0w.rs:17:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822358
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut v = vec![];\n    for i in x {\n        let mut flag = true;\n\
    \        let mut p = i;\n        while p > 0 {\n            if p % 2 == 0 {\n\
    \                flag = false;\n                break;\n            }\n      \
    \      p /= 10;\n        }\n        if flag {\n            v.push(i);\n      \
    \  }\n    }\n    v.sort();\n    v\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822357
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut res = Vec::new();\n    for num in x {\n        if (num.to_string().chars().all(|c|\
    \ c.to_digit(10).unwrap() % 2 != 0)) {\n            res.push(num);\n        }\n\
    \    }\n    res.sort();\n    res\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822358
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result: Vec<isize> = vec![];\n    for i in x {\n        if !i.to_string().contains(\"\
    2\")\n            && !i.to_string().contains(\"4\")\n            && !i.to_string().contains(\"\
    6\")\n            && !i.to_string().contains(\"8\")\n        {\n            result.push(i);\n\
    \        }\n    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[10]`,\n right: `[]`', /tmp/tmpe2he2d_a.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822358
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    // Your code goes here...\n    let mut unique = Vec::new();\n    for\
    \ i in x {\n        if i.to_string().chars().any(|c| c.is_digit(10) && c.to_digit(10).unwrap()\
    \ % 2 == 0) {\n            continue;\n        }\n        unique.push(i);\n   \
    \ }\n    unique.sort();\n    unique\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822358
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    x.into_iter().filter(|x| {\n        let s = x.to_string();\n        s.chars().all(|c|\
    \ c.to_digit(10).unwrap() % 2 == 1)\n    }).collect()\n}\n\nfn main() {\n    let\
    \ candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]),\
    \ vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpso6tr_c0.rs:14:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822358
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut x: Vec<isize> = x.into_iter().filter(|i| {\n        *i.to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap() as isize).filter(|i| i % 2 == 0).collect::<Vec<isize>>().get(0).is_none()\n\
    \    }).collect();\n    x.sort();\n    x\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `bool` cannot be dereferenced\n --> /tmp/tmpsd7cro2q.rs:7:9\n\
    \  |\n7 |         *i.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize).filter(|i|\
    \ i % 2 == 0).collect::<Vec<isize>>().get(0).is_none()\n  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0614`.\n"
  stdout: ''
  timestamp: 1659822357
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut out: Vec<isize> = Vec::new();\n    for n in x {\n        if all_odd(n)\
    \ {\n            out.push(n);\n        }\n    }\n    out.sort();\n    out\n}\n\
    \nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `all_odd` in this scope\n --> /tmp/tmp6ha7qkoz.rs:8:12\n\
    \  |\n8 |         if all_odd(n) {\n  |            ^^^^^^^ not found in this scope\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822357
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    // Print the vector\n    for i in x {\n        if has_even_digit(i) {\n\
    \            continue;\n        } else {\n            println!(\"{}\", i);\n \
    \       }\n    }\n    return x;\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n -->\
    \ /tmp/tmp9rzkqmio.rs:8:12\n  |\n8 |         if has_even_digit(i) {\n  |     \
    \       ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822357
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmphy6m_4g1.rs:6:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822358
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    // x.iter().filter(|x| *x % 2 != 0).collect()\n    x.iter().filter(|&x|\
    \ !format!(\"{}\", x).contains(\"2\")).collect()\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<isize>` cannot be built from an iterator\
    \ over elements of type `&isize`\n --> /tmp/tmpj71zkvl8.rs:7:59\n  |\n7 |    \
    \ x.iter().filter(|&x| !format!(\"{}\", x).contains(\"2\")).collect()\n  |   \
    \                                                        ^^^^^^^ value of type\
    \ `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n  |\n\
    \  = help: the trait `FromIterator<&isize>` is not implemented for `Vec<isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659822357
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut y = Vec::new();\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            y.push(i);\n        }\n    }\n    y.sort();\n    y\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n -->\
    \ /tmp/tmp6u6oo19b.rs:8:13\n  |\n8 |         if !has_even_digit(i) {\n  |    \
    \         ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822357
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    for i in x {\n        if !contains_even_digit(i)\
    \ {\n            result.push(i);\n        }\n    }\n    result.sort();\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `contains_even_digit` in this scope\n\
    \ --> /tmp/tmppyn7by06.rs:8:13\n  |\n8 |         if !contains_even_digit(i) {\n\
    \  |             ^^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659822357
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    x.into_iter().filter(|&n| n.to_string().chars().all(|c| (c as u8 - '0'\
    \ as u8) % 2 == 1)).collect()\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpty80fh14.rs:11:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822358
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    x.into_iter().filter(|&i| i.to_string().chars().all(|c| c.to_digit(10).unwrap()\
    \ % 2 == 1)).collect()\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmphtb10p2g.rs:11:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822357
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    x.into_iter().filter(|&x| x.to_string().chars().all(|c| c.to_digit(10).unwrap()\
    \ % 2 == 1)).collect()\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpr0q9mxrg.rs:11:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822358
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    x.into_iter().filter(|n| n.to_string().bytes().all(|c| c == b'1' || c\
    \ == b'3' || c == b'5' || c == b'7' || c == b'9')).collect()\n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmp8py2katk.rs:11:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822358
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut v = Vec::new();\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            v.push(i);\n        }\n    }\n    v.sort();\n    v\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n -->\
    \ /tmp/tmp5w0c_m6u.rs:8:13\n  |\n8 |         if !has_even_digit(i) {\n  |    \
    \         ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822357
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    x.into_iter().filter(|&x| {\n        let mut x = x;\n        while x\
    \ > 0 {\n            if x % 2 == 0 {\n                return false;\n        \
    \    }\n            x /= 10;\n        }\n        true\n    }).collect()\n}\n\n\
    fn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpl_hd8zam.rs:20:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822358
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let y = x.iter().filter(|&y| !y.to_string().chars().any(|c| c.is_digit(10)\
    \ && (c.to_digit(10).unwrap() % 2 == 0))).cloned().collect::<Vec<isize>>();\n\
    \    println!(\"{:?}\", y);\n    y\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpbf36fvu5.rs:13:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: '[15, 33, 1]

    '
  timestamp: 1659822358
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result: Vec<isize> = vec![];\n    for xi in x {\n        let\
    \ mut digits = xi;\n        let mut unique = true;\n        while digits > 0 {\n\
    \            let digit = digits % 10;\n            if digit % 2 == 0 {\n     \
    \           unique = false;\n                break;\n            }\n         \
    \   digits /= 10;\n        }\n        if unique {\n            result.push(xi);\n\
    \        }\n    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822358
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = Vec::new();\n    for n in x {\n        let mut n = n;\n\
    \        let mut has_even = false;\n        while n > 0 {\n            if n %\
    \ 2 == 0 {\n                has_even = true;\n                break;\n       \
    \     }\n            n /= 10;\n        }\n        if !has_even {\n           \
    \ result.push(n);\n        }\n    }\n    result.sort();\n    result\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 0, 0]`,\n right: `[1, 15, 33]`', /tmp/tmplfb0psu2.rs:27:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822358
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n\tlet mut result = Vec::new();\n\tfor i in x {\n\t\tif !is_even_digit(i)\
    \ {\n\t\t\tresult.push(i);\n\t\t}\n\t}\n\tresult.sort();\n\tresult\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_even_digit` in this scope\n -->\
    \ /tmp/tmp0rpdoxd6.rs:8:7\n  |\n8 |         if !is_even_digit(i) {\n  |      \
    \       ^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822358
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    x.into_iter().filter(|x| x.to_string().chars().all(|c| c.to_digit(10).unwrap()\
    \ % 2 == 1)).collect()\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmppvdw1h9o.rs:11:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822358
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut output = Vec::new();\n    for i in x {\n        if contains_even_digit(i)\
    \ {\n            continue;\n        }\n        output.push(i);\n    }\n    output.sort();\n\
    \    output\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `contains_even_digit` in this scope\n\
    \ --> /tmp/tmp80oeg18m.rs:8:12\n  |\n8 |         if contains_even_digit(i) {\n\
    \  |            ^^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659822358
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    x.into_iter().filter(|&x| unique_digits_helper(x)).collect()\n}\n\nfn\
    \ main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `unique_digits_helper` in this scope\n\
    \ --> /tmp/tmplsywujnf.rs:6:31\n  |\n6 |     x.into_iter().filter(|&x| unique_digits_helper(x)).collect()\n\
    \  |                               ^^^^^^^^^^^^^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822358
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    x.into_iter().filter(|x| {\n        let s = x.to_string();\n        s.chars().find(|c|\
    \ c.is_digit(10) && c.to_digit(10).unwrap() % 2 == 0).is_none()\n    }).collect::<Vec<isize>>()\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmp7alsgxwr.rs:14:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822358
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    // this is the most functional style approach to this problem\n    //\
    \ I can think of\n    x.into_iter()\n        .filter(|&x| format!(\"{}\", x).chars().find(|&c|\
    \ c % 2 == 0).is_none())\n        .collect::<Vec<isize>>()\n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `char` by `{integer}`\n --> /tmp/tmpcx77cnvz.rs:9:59\n\
    \  |\n9 |         .filter(|&x| format!(\"{}\", x).chars().find(|&c| c % 2 == 0).is_none())\n\
    \  |                                                         - ^ - {integer}\n\
    \  |                                                         |\n  |          \
    \                                               char\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  stdout: ''
  timestamp: 1659822358
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    // your code here\n    let mut result = Vec::new();\n    for i in x {\n\
    \        if !i.to_string().contains(\"2\")\n            && !i.to_string().contains(\"\
    4\")\n            && !i.to_string().contains(\"6\")\n            && !i.to_string().contains(\"\
    8\")\n        {\n            result.push(i);\n        }\n    }\n    result.sort();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[10]`,\n right: `[]`', /tmp/tmpbldri0l7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822358
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    x.into_iter().filter(|&x| x.to_string().chars().all(|c| c == '1' || c\
    \ == '3' || c == '5' || c == '7' || c == '9')).collect()\n}\n\nfn main() {\n \
    \   let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmptgz2fn5j.rs:11:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822358
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    x.into_iter().filter(|&n| n.to_string().chars().filter(|c| c.is_numeric()\
    \ && c.to_digit(10).unwrap() % 2 == 0).count() == 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpctodt7q_.rs:11:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822358
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    // your code here\n    let mut new_vec: Vec<isize> = Vec::new();\n  \
    \  for v in x {\n        if v.to_string().chars().filter(|x| x.to_digit(10).unwrap()\
    \ % 2 == 0).count() == 0 {\n            new_vec.push(v);\n        }\n    }\n \
    \   new_vec.sort();\n    new_vec\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822358
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    x.into_iter().filter(|&x| x.to_string().chars().all(|c| c.to_digit(10).unwrap()\
    \ & 1 == 1)).collect()\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpbax9xqzf.rs:11:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822358
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmphy6m_4g1.rs:6:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822358
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut res = Vec::new();\n    for num in x {\n        if is_unique(num)\
    \ {\n            res.push(num);\n        }\n    }\n    res.sort();\n    res\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_unique` in this scope\n --> /tmp/tmpt5rviuuo.rs:8:12\n\
    \  |\n8 |         if is_unique(num) {\n  |            ^^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822358
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut x: Vec<isize> = x.into_iter().filter(|&x| x.to_string().chars().all(|c|\
    \ c.to_digit(10).unwrap() % 2 == 1)).collect();\n    x.sort();\n    x\n}\n\nfn\
    \ main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822358
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut y: Vec<isize> = Vec::new();\n    for i in x {\n        let mut\
    \ even = false;\n        let mut m = i;\n        while m > 0 {\n            if\
    \ m % 2 == 0 {\n                even = true;\n                break;\n       \
    \     }\n            m /= 10;\n        }\n        if !even {\n            y.push(i);\n\
    \        }\n    }\n    y.sort();\n    y\n}\n\nfn main() {\n    let candidate =\
    \ unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822358
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    x.into_iter().filter(|&x| {\n        let mut cur = x;\n        while\
    \ cur > 0 {\n            if cur % 2 == 0 {\n                return false;\n  \
    \          }\n            cur /= 10;\n        }\n        true\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpvy2xbas5.rs:20:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822358
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut unique_numbers = Vec::new();\n    for number in x {\n       \
    \ let mut is_unique = true;\n        for digit in number.to_string().chars() {\n\
    \            if digit.to_digit(10).unwrap() % 2 == 0 {\n                is_unique\
    \ = false;\n                break;\n            }\n        }\n        if is_unique\
    \ {\n            unique_numbers.push(number);\n        }\n    }\n    unique_numbers.sort();\n\
    \    unique_numbers\n}\n\nfn main() {\n    let candidate = unique_digits;\n  \
    \  assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822358
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n\tlet mut xs = x.clone();\n\txs.sort();\n\tlet mut ys = vec![];\n\tfor x\
    \ in xs {\n\t\tlet mut has_even = false;\n\t\tlet mut t = x;\n\t\twhile t > 0\
    \ {\n\t\t\tif t % 2 == 0 {\n\t\t\t\thas_even = true;\n\t\t\t\tbreak;\n\t\t\t}\n\
    \t\t\tt /= 10;\n\t\t}\n\t\tif !has_even {\n\t\t\tys.push(x);\n\t\t}\n\t}\n\tys\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822358
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result: Vec<isize> = vec![];\n    let mut to_add: Vec<isize>\
    \ = vec![];\n    for number in x {\n        if has_even_digit(number) {\n    \
    \        to_add.push(number);\n        }\n    }\n    to_add.sort();\n    result.append(&mut\
    \ to_add);\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n -->\
    \ /tmp/tmpez2wktk9.rs:9:12\n  |\n9 |         if has_even_digit(number) {\n  |\
    \            ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659822358
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut v = Vec::new();\n    for i in x {\n        if i.to_string().chars().all(|c|\
    \ c.to_digit(10).unwrap() % 2 == 1) {\n            v.push(i);\n        }\n   \
    \ }\n    v.sort();\n    v\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822358
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut res = Vec::new();\n    for num in x {\n        if num.to_string().chars().all(|n|\
    \ n.to_digit(10).unwrap() % 2 != 0) {\n            res.push(num);\n        }\n\
    \    }\n    res.sort();\n    res\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822358
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut r = Vec::new();\n    for xi in x {\n        if has_even_digit(xi)\
    \ {\n            continue;\n        }\n        r.push(xi);\n    }\n    r.sort();\n\
    \    r\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n -->\
    \ /tmp/tmp19jxguov.rs:8:12\n  |\n8 |         if has_even_digit(xi) {\n  |    \
    \        ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822358
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    x.into_iter().filter(|&x| x.to_string().chars().any(|c| c.is_numeric()\
    \ && c.to_digit(10).unwrap() % 2 == 1)).collect()\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1422, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpc5gfpn4h.rs:11:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822357
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    x.into_iter().filter(|n| n.to_string().chars().all(|d| (d as isize -\
    \ 48) % 2 != 0)).collect()\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmp39qtcd4t.rs:11:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822358
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut r: Vec<isize> = Vec::new();\n    for i in x {\n        if unique_digit_check(i)\
    \ {\n            r.push(i);\n        }\n    }\n    r.sort();\n    r\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `unique_digit_check` in this scope\n\
    \ --> /tmp/tmpdr6p9bqe.rs:8:12\n  |\n8 |         if unique_digit_check(i) {\n\
    \  |            ^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659822358
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut v = Vec::new();\n    for i in x {\n        let mut t = i;\n \
    \       while t > 0 {\n            if t % 2 == 0 {\n                v.push(i);\n\
    \                break;\n            }\n            t /= 10;\n        }\n    }\n\
    \    v.sort();\n    v\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmpdzl3jwrq.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822358
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    x.into_iter().filter(|&n| n.to_string().chars().filter(|&d| d.is_digit(10)\
    \ && d.is_even()).count() == 0).collect()\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_even` found for type `char` in the current\
    \ scope\n --> /tmp/tmp8kx7wuh9.rs:6:85\n  |\n6 |     x.into_iter().filter(|&n|\
    \ n.to_string().chars().filter(|&d| d.is_digit(10) && d.is_even()).count() ==\
    \ 0).collect()\n  |                                                          \
    \                           ^^^^^^^ method not found in `char`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659822358
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut ans: Vec<isize> = Vec::new();\n    for i in x {\n        if i.to_string().chars().any(|d|\
    \ d.is_digit(10) && d.to_digit(10).unwrap() % 2 == 0) {\n            continue;\n\
    \        }\n        ans.push(i);\n    }\n    ans.sort();\n    ans\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822358
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result: Vec<isize> = vec![];\n    for i in 0..x.len() {\n   \
    \     if !is_has_even_digit(x[i]) {\n            result.push(x[i]);\n        }\n\
    \    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate =\
    \ unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_has_even_digit` in this scope\n\
    \ --> /tmp/tmpcv6qt5cz.rs:8:13\n  |\n8 |         if !is_has_even_digit(x[i]) {\n\
    \  |             ^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659822358
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n\tlet mut result: Vec<isize> = Vec::new();\n\tfor i in x {\n\t\tif is_all_odd_digit(i)\
    \ {\n\t\t\tresult.push(i);\n\t\t}\n\t}\n\tresult.sort();\n\tresult\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_all_odd_digit` in this scope\n -->\
    \ /tmp/tmprax8vrqp.rs:8:6\n  |\n8 |         if is_all_odd_digit(i) {\n  |    \
    \        ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822358
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut r = Vec::new();\n    for v in x {\n        if v.to_string().chars().all(|c|\
    \ c.to_digit(10).unwrap() % 2 == 1) {\n            r.push(v);\n        }\n   \
    \ }\n    r.sort();\n    r\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822358
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut res = vec![];\n    for i in x {\n        if i.to_string().contains(\"\
    2\") || i.to_string().contains(\"4\") || i.to_string().contains(\"6\") || i.to_string().contains(\"\
    8\") {\n            continue;\n        }\n        res.push(i);\n    }\n    res.sort();\n\
    \    res\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[10]`,\n right: `[]`', /tmp/tmp9zyhp816.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822359
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    return x.iter().filter(|&n| {\n        let mut digits = (n / 10).to_string();\n\
    \        digits.push((n % 10).to_string().chars().next().unwrap());\n        digits.to_string().chars().all(|c|\
    \ c.to_digit(10).unwrap() % 2 == 1)\n    }).cloned().collect();\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33]`,\n right: `[1, 15, 33]`', /tmp/tmpbcteb97n.rs:15:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822359
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    // TODO: Implement Me!\n    unimplemented!()\n}\n\nfn main() {\n    let\
    \ candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]),\
    \ vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmppaif29lz.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822359
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut r = vec![];\n    for n in x {\n        if n.to_string().chars().any(|c|\
    \ c.is_digit(10) && c.to_digit(10).unwrap() % 2 == 0) {\n            continue;\n\
    \        }\n        r.push(n);\n    }\n    r.sort();\n    r\n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822359
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut r = Vec::new();\n    for i in x {\n        if i.to_string().chars().all(|c|\
    \ c != '0' && c != '2' && c != '4' && c != '6' && c != '8') {\n            r.push(i);\n\
    \        }\n    }\n    r.sort();\n    r\n}\n\nfn main() {\n    let candidate =\
    \ unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822359
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result: Vec<isize> = Vec::new();\n    for v in x {\n        if\
    \ v < 10 {\n            result.push(v);\n        } else {\n            let mut\
    \ s = v.to_string();\n            if let Some(n) = s.find('2') {\n           \
    \     continue;\n            } else if let Some(n) = s.find('4') {\n         \
    \       continue;\n            } else if let Some(n) = s.find('6') {\n       \
    \         continue;\n            } else if let Some(n) = s.find('8') {\n     \
    \           continue;\n            } else {\n                result.push(v);\n\
    \            }\n        }\n    }\n    result.sort();\n    result\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[10]`,\n right: `[]`', /tmp/tmp_pkbgmpa.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822359
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    x.into_iter().filter(|x| (1..=9).all(|d| !x.to_string().contains(d.to_string().as_str()))).collect()\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[1, 15, 33]`', /tmp/tmpbv9nbvdv.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822359
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    x.into_iter().filter(|n| n.to_string().chars().all(|c| c.to_digit(10).unwrap()\
    \ % 2 == 1)).collect()\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpaemxn739.rs:11:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822359
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut v: Vec<isize> = vec![];\n    for num in x {\n        if (num\
    \ as f64).log10().fract() == 0.0 {\n            v.push(num);\n        } else {\n\
    \            let mut tmp = num;\n            while tmp != 0 {\n              \
    \  if tmp % 2 == 0 {\n                    break;\n                }\n        \
    \        tmp /= 10;\n            }\n            if tmp == 0 {\n              \
    \  v.push(num);\n            }\n        }\n    }\n    v.sort();\n    v\n}\n\n\
    fn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[10]`,\n right: `[]`', /tmp/tmpd63ckuoe.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822359
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    x.into_iter().filter(|i| i.to_string().bytes().all(|b| b & 1 == 1)).collect()\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpr882fwl9.rs:11:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822359
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    for num in x {\n        if num.to_string().chars().all(|n|\
    \ n.to_digit(10).unwrap() % 2 != 0) {\n            result.push(num);\n       \
    \ }\n    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822359
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut res: Vec<isize> = vec![];\n    for i in x {\n        if !i.to_string().chars().any(|c|\
    \ c.is_digit(10) && (c.to_digit(10).unwrap() % 2 == 0)) {\n            res.push(i);\n\
    \        }\n    }\n    res.sort();\n    res\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822359
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut sol: Vec<isize> = Vec::new();\n    for num in x {\n        let\
    \ mut num_str = num.to_string();\n        let mut no_even = true;\n        while\
    \ num_str.len() > 0 {\n            let dig: usize = num_str.pop().unwrap().to_digit(10).unwrap()\
    \ as usize;\n            if dig % 2 == 0 {\n                no_even = false;\n\
    \                break;\n            }\n        }\n        if no_even {\n    \
    \        sol.push(num);\n        }\n    }\n    sol.sort();\n    sol\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822359
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    // Your code here...\n    let mut result = vec![];\n    for num in x\
    \ {\n        if !num.to_string().chars().any(|c| c.is_numeric() && c.to_digit(10).unwrap()\
    \ % 2 == 0) {\n            result.push(num);\n        }\n    }\n    result.sort();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822359
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    x.into_iter().filter(|x| x.to_string().chars().any(|c| c != '0' && (c.to_digit(10).unwrap()\
    \ & 1) == 0)).collect()\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmp08pzjngz.rs:11:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822359
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    x.into_iter().filter(|&num| {\n        let mut num_vec = Vec::new();\n\
    \        let mut n = num;\n        while n > 0 {\n            num_vec.push(n %\
    \ 10);\n            n /= 10;\n        }\n        !num_vec.iter().any(|&n| n %\
    \ 2 == 0)\n    }).collect::<Vec<isize>>()\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmp7emvxrct.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822359
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    // your code here\n    x.iter().filter(|&x| x.to_string().chars().any(|c|\
    \ c != '2' && c != '4' && c != '6' && c != '8' && c != '0')).cloned().collect()\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1422, 1]`,\n right: `[1, 15, 33]`', /tmp/tmp6y7uunv4.rs:12:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822359
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    x.into_iter().filter(|n| {\n        let mut num = *n;\n        while\
    \ num > 0 {\n            if num % 2 == 0 {\n                return false;\n  \
    \          }\n            num /= 10;\n        }\n        true\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmp4b9f3l0n.rs:20:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822359
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut res = vec![];\n    for n in x {\n        if has_even_digit(n)\
    \ {\n            continue;\n        }\n        res.push(n);\n    }\n    res.sort();\n\
    \    res\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n -->\
    \ /tmp/tmpwy01ptre.rs:8:12\n  |\n8 |         if has_even_digit(n) {\n  |     \
    \       ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822358
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = Vec::new();\n    for v in x {\n        if v.to_string().chars().filter(|x|\
    \ x.is_digit(10) && x.is_even()).count() == 0 {\n            result.push(v);\n\
    \        }\n    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_even` found for reference `&char` in\
    \ the current scope\n --> /tmp/tmp0sz3gcvh.rs:8:65\n  |\n8 |         if v.to_string().chars().filter(|x|\
    \ x.is_digit(10) && x.is_even()).count() == 0 {\n  |                         \
    \                                        ^^^^^^^ method not found in `&char`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659822359
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut res = Vec::new();\n    for num in x {\n        if unique_digit(num)\
    \ {\n            res.push(num);\n        }\n    }\n    res.sort();\n    res\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `unique_digit` in this scope\n --> /tmp/tmpze8tn26o.rs:8:12\n\
    \  |\n8 |         if unique_digit(num) {\n  |            ^^^^^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822358
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let len = x.len();\n    let mut result = Vec::with_capacity(len);\n \
    \   for i in 0..len {\n        let mut digits: Vec<usize> = Vec::new();\n    \
    \    let mut num = x[i];\n        while num > 0 {\n            let digit = (num\
    \ % 10) as usize;\n            if digits.contains(&digit) {\n                break;\n\
    \            }\n            digits.push(digit);\n            num /= 10;\n    \
    \    }\n        if num == 0 {\n            result.push(x[i]);\n        }\n   \
    \ }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 15]`,\n right: `[1, 15, 33]`', /tmp/tmp5z3no3fk.rs:29:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822359
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    x.into_iter().filter(|&i| \n        i.to_string().into_iter().all(|c|\
    \ c == '1' || c == '3' || c == '5' || c == '7' || c == '9')\n    ).collect()\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `into_iter` exists for struct `String`, but its\
    \ trait bounds were not satisfied\n   --> /tmp/tmp6_1tjwjw.rs:7:23\n    |\n7 \
    \  |           i.to_string().into_iter().all(|c| c == '1' || c == '3' || c ==\
    \ '5' || c == '7' || c == '9')\n    |                         ^^^^^^^^^\n    |\n\
    \    = note: the following trait bounds were not satisfied:\n            `String:\
    \ Iterator`\n            which is required by `String: IntoIterator`\n       \
    \     `&String: Iterator`\n            which is required by `&String: IntoIterator`\n\
    \            `&mut String: Iterator`\n            which is required by `&mut String:\
    \ IntoIterator`\n            `str: Sized`\n            which is required by `str:\
    \ IntoIterator`\n            `str: Iterator`\n            which is required by\
    \ `str: IntoIterator`\n            `&str: Iterator`\n            which is required\
    \ by `&str: IntoIterator`\n            `&mut str: Iterator`\n            which\
    \ is required by `&mut str: IntoIterator`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659822359
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut sorted = x.clone();\n    sorted.sort();\n    sorted.iter().filter(|&n|\
    \ n.to_string().chars().any(|c| c.is_digit(10))).cloned().collect()\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 15, 33, 1422]`,\n right: `[1, 15, 33]`', /tmp/tmp3b6nydxh.rs:13:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822359
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    x.into_iter().filter(|v| {\n        let mut n = *v;\n        while n\
    \ > 0 {\n            if n % 2 == 0 {\n                return false;\n        \
    \    }\n            n /= 10;\n        }\n        true\n    }).collect()\n}\n\n\
    fn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpklrxp6a0.rs:20:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822359
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut res = Vec::new();\n    for i in x {\n        if has_even_digit(i)\
    \ {\n            continue;\n        }\n        res.push(i);\n    }\n    res.sort();\n\
    \    res\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n -->\
    \ /tmp/tmph4uy7hce.rs:8:12\n  |\n8 |         if has_even_digit(i) {\n  |     \
    \       ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822356
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    x.into_iter().filter(|&i| i.to_string().chars().all(|d| d.to_digit(10).unwrap()\
    \ % 2 == 1)).collect()\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpbfiqf2q9.rs:11:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822359
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    x.into_iter().filter(|x| !has_even_digit(*x)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n -->\
    \ /tmp/tmpngubpp4u.rs:6:31\n  |\n6 |     x.into_iter().filter(|x| !has_even_digit(*x)).collect()\n\
    \  |                               ^^^^^^^^^^^^^^ not found in this scope\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822359
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut ret = vec![];\n    for i in x {\n        if no_even_digits(i)\
    \ {\n            ret.push(i);\n        }\n    }\n    ret.sort();\n    ret\n}\n\
    \nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `no_even_digits` in this scope\n -->\
    \ /tmp/tmps7o1yonr.rs:8:12\n  |\n8 |         if no_even_digits(i) {\n  |     \
    \       ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822359
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    for n in x {\n        let mut flag = true;\n\
    \        for c in n.to_string().chars() {\n            if c.to_digit(10).unwrap()\
    \ % 2 == 0 {\n                flag = false;\n                break;\n        \
    \    }\n        }\n        if flag {\n            result.push(n);\n        }\n\
    \    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate =\
    \ unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822359
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    return x.into_iter().filter(|n| n.to_string().chars().all(|c| c.to_digit(10).unwrap()\
    \ % 2 == 1)).collect::<Vec<isize>>();\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmps8zilnxh.rs:11:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822359
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    x.into_iter().filter(|&n| n.to_string().chars().all(|c| c.to_digit(10).unwrap()\
    \ % 2 == 1)).collect()\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmp2zfox0sg.rs:11:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822357
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    x.into_iter().filter(|&x| x.to_string().chars().filter(|c| c.is_numeric()\
    \ && c.to_digit(10).unwrap() % 2 == 0).count() == 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpapzn61xr.rs:11:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822359
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    x.into_iter().filter(|&x| x.to_string().chars().any(|c| c.is_digit(10)\
    \ && c.to_digit(10).unwrap() % 2 == 1)).collect()\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1422, 1]`,\n right: `[1, 15, 33]`', /tmp/tmps7e68zd2.rs:11:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822359
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmphy6m_4g1.rs:6:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822358
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut x = x;\n    x.sort();\n    x.iter().filter(|x|\n            \
    \        format!(\"{}\", x).chars().all(|i| i.to_digit(10).unwrap() & 1 == 1)\n\
    \                ).map(|x| *x).collect()\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822359
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    for i in x {\n        if i.to_string().chars().any(|c|\
    \ c.is_digit(10) && c.to_digit(10).unwrap() % 2 == 0) {\n            continue;\n\
    \        } else {\n            result.push(i);\n        }\n    }\n    result.sort();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822359
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    return x.into_iter().filter(|i| {\n        let str_val = format!(\"{}\"\
    , i);\n        str_val.chars().find(|c| {\n            return *c == '2' || *c\
    \ == '4' || *c == '6' || *c == '8';\n        }).is_none()\n    }).collect();\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpwtl1rddc.rs:16:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822359
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    x.into_iter().filter(|&e| {\n        e.to_string().chars().all(|c| c.to_digit(10).unwrap()\
    \ % 2 == 1)\n    }).collect::<Vec<isize>>()\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpv7kbxau7.rs:13:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822359
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = Vec::new();\n    for num in x {\n        if !num.to_string().chars().any(|c|\
    \ c.is_digit(10) && (c.to_digit(10).unwrap() % 2 == 0)) {\n            result.push(num);\n\
    \        }\n    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822359
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    x.into_iter().filter(|&x| x.to_string().chars().any(|x| x.is_digit(10)\
    \ && x.is_numeric() && x.to_digit(10).unwrap() % 2 == 1)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1422, 1]`,\n right: `[1, 15, 33]`', /tmp/tmp_n13exqt.rs:11:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822359
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    // TODO\n    unimplemented!();\n}\n\nfn main() {\n    let candidate =\
    \ unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp3lwoihqh.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822359
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut v = Vec::new();\n    let mut result = Vec::new();\n    for item\
    \ in x {\n        let mut val = item;\n        while val > 0 {\n            let\
    \ rem = val % 10;\n            v.push(rem);\n            val = val / 10;\n   \
    \     }\n        for i in v.iter() {\n            if *i % 2 == 0 {\n         \
    \       break;\n            }\n            result.push(item);\n        }\n   \
    \     v.clear();\n    }\n    result.sort();\n    result.dedup();\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[323]`,\n right: `[]`', /tmp/tmpderm85ns.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822359
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = vec![];\n    for i in x {\n        if i.to_string().chars().any(|c|\
    \ c.is_digit(10) && c.to_digit(10).unwrap() % 2 == 0) {\n            continue;\n\
    \        }\n        result.push(i);\n    }\n    result.sort();\n    result\n}\n\
    \nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822359
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    x.into_iter().filter(|&e| !e.to_string().chars().any(|c| c.is_digit(10)\
    \ && (c.to_digit(10).unwrap() % 2 == 0))).collect()\n}\n\nfn main() {\n    let\
    \ candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]),\
    \ vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmp1_t4x02n.rs:11:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822359
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    x.into_iter().filter(|&x|\n        x.to_string().chars().all(|ch| (ch\
    \ as u8 - '0' as u8) % 2 == 1)\n    ).collect()\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpgjvvwug4.rs:13:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822359
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut digits = Vec::new();\n    for i in x {\n        if i.to_string().chars().any(|x|\
    \ match x {\n            '2' | '4' | '6' | '8' => true,\n            _ => false,\n\
    \        }) {\n            continue;\n        } else {\n            digits.push(i);\n\
    \        }\n    }\n    digits.sort();\n    digits\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[10]`,\n right: `[]`', /tmp/tmpqzu_ivxf.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822359
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut res = vec![];\n    for el in x {\n        if !el.to_string().chars().any(|x|\
    \ x == '2' || x == '4' || x == '6' || x == '8') {\n            res.push(el);\n\
    \        }\n    }\n    res.sort();\n    res\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[10]`,\n right: `[]`', /tmp/tmp4x4kik77.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822359
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    // your code here\n    let mut vec: Vec<isize> = Vec::new();\n    for\
    \ x in x {\n        let mut str_x = x.to_string();\n        let mut flag = true;\n\
    \        for c in str_x.chars() {\n            if c == '2' || c == '4' || c ==\
    \ '6' || c == '8' {\n                flag = false;\n                break;\n \
    \           }\n        }\n        if flag {\n            vec.push(x);\n      \
    \  }\n    }\n    vec.sort();\n    vec\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[10]`,\n right: `[]`', /tmp/tmpwceck3kp.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822359
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut ret = Vec::new();\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            ret.push(i);\n        }\n    }\n    ret.sort();\n    ret\n}\n\
    \nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n -->\
    \ /tmp/tmpt0yj9fej.rs:8:13\n  |\n8 |         if !has_even_digit(i) {\n  |    \
    \         ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822359
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    x.into_iter().filter(|&x| x.to_string().chars().all(|c| c.to_digit(10).unwrap()\
    \ % 2 == 1)).collect()\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpr0q9mxrg.rs:11:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822358
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = Vec::new();\n    for num in x {\n        if !is_even_digit(&num)\
    \ {\n            result.push(num);\n        }\n    }\n    result.sort();\n   \
    \ result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_even_digit` in this scope\n -->\
    \ /tmp/tmpwty1eskb.rs:8:13\n  |\n8 |         if !is_even_digit(&num) {\n  |  \
    \           ^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822359
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut ret: Vec<isize> = Vec::new();\n    for i in &x {\n        if\
    \ let Some(string) = i.to_string().find(|c| c % 2 == 0) {\n            //do nothing\n\
    \        } else {\n            ret.push(*i);\n        }\n    }\n    ret.sort();\n\
    \    ret\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `char` by `{integer}`\n --> /tmp/tmpijr4s7oi.rs:8:56\n\
    \  |\n8 |         if let Some(string) = i.to_string().find(|c| c % 2 == 0) {\n\
    \  |                                                        ^ no implementation\
    \ for `char % {integer}`\n  |\n  = help: the trait `Rem<{integer}>` is not implemented\
    \ for `char`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659822359
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut res = Vec::new();\n    for i in x {\n        if i.to_string().chars().filter(|&x|\
    \ x.is_numeric() && x.to_digit(10).unwrap() % 2 == 0).count() == 0 {\n       \
    \     res.push(i);\n        }\n    }\n    res.sort();\n    res\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822359
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    //x.filter(|n| n.to_string().chars().map(|c| c.to_digit(10).unwrap()).all(|d|\
    \ d % 2 != 0)).collect()\n    x.into_iter().filter(|&n| n.to_string().chars().map(|c|\
    \ c.to_digit(10).unwrap()).all(|d| d % 2 != 0)).collect()\n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpb8ucodvp.rs:12:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822360
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut res = Vec::new();\n    for i in x {\n        if i % 2 != 0 {\n\
    \            res.push(i);\n        }\n    }\n    res.sort();\n    res\n}\n\nfn\
    \ main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[323]`,\n right: `[]`', /tmp/tmps5t_mijk.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822360
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    x.into_iter().filter(|&x| x.to_string().chars().all(|x| x.to_digit(10).unwrap()\
    \ % 2 == 1)).collect()\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpnshke_bg.rs:11:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822356
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    x.into_iter().filter(|&n| !contains_even_digit(n)).collect()\n}\n\nfn\
    \ main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `contains_even_digit` in this scope\n\
    \ --> /tmp/tmp62wzquas.rs:6:32\n  |\n6 |     x.into_iter().filter(|&n| !contains_even_digit(n)).collect()\n\
    \  |                                ^^^^^^^^^^^^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822359
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut u_d: Vec<isize> = vec![];\n    for i in x {\n        if i.to_string().contains('2')\
    \ || i.to_string().contains('4') || i.to_string().contains('6') || i.to_string().contains('8')\
    \ {\n            continue;\n        } else {\n            u_d.push(i);\n     \
    \   }\n    }\n    u_d.sort();\n    u_d\n}\n\nfn main() {\n    let candidate =\
    \ unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[10]`,\n right: `[]`', /tmp/tmpps0msmny.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822360
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut ans = Vec::new();\n    for i in x {\n        if !is_even_digit(i)\
    \ {\n            ans.push(i);\n        }\n    }\n    ans.sort();\n    ans\n}\n\
    \nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_even_digit` in this scope\n -->\
    \ /tmp/tmp5hdy0q2k.rs:8:13\n  |\n8 |         if !is_even_digit(i) {\n  |     \
    \        ^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822359
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    x.into_iter().filter(|n| n.to_string().chars().any(|c| c == '1')).collect()\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 1422, 1]`,\n right: `[1, 15, 33]`', /tmp/tmp7k8mxeyr.rs:11:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822360
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result = Vec::new();\n    for i in x {\n        if i.to_string().chars().all(|c|\
    \ c.to_digit(10).unwrap() % 2 == 1) {\n            result.push(i);\n        }\n\
    \    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate =\
    \ unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822360
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    x.into_iter().filter(|&x| x.to_string().chars().any(|x| x.is_digit(10)\
    \ && x.is_odd())).collect()\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_odd` found for type `char` in the current\
    \ scope\n --> /tmp/tmp2qcnlj7j.rs:6:81\n  |\n6 |     x.into_iter().filter(|&x|\
    \ x.to_string().chars().any(|x| x.is_digit(10) && x.is_odd())).collect()\n  |\
    \                                                                            \
    \     ^^^^^^ method not found in `char`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659822360
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut vec = vec![];\n    for i in x {\n        let mut is_even = false;\n\
    \        let mut val = i;\n        while val > 0 {\n            if val % 2 ==\
    \ 0 {\n                is_even = true;\n                break;\n            }\n\
    \            val /= 10;\n        }\n        if !is_even {\n            vec.push(i);\n\
    \        }\n    }\n    vec.sort();\n    vec\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822360
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    x.into_iter().filter(|&x| x.to_string().chars().all(|c| c.to_digit(10).unwrap()\
    \ % 2 == 1)).collect()\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpr0q9mxrg.rs:11:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822358
- exit_code: 0
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut v = Vec::new();\n    for x in x {\n        if x.to_string().chars().filter(|x|\
    \ x.is_digit(10)).filter(|x| x.to_digit(10).unwrap() % 2 == 0).count() == 0 {\n\
    \            v.push(x);\n        }\n    }\n    v.sort();\n    v\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822360
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut res = Vec::new();\n    for xi in x {\n        if is_unique_digits(xi)\
    \ {\n            res.push(xi);\n        }\n    }\n    res.sort();\n    res\n}\n\
    \nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_unique_digits` in this scope\n -->\
    \ /tmp/tmp_i9t4ard.rs:8:12\n  |\n8 |         if is_unique_digits(xi) {\n  |  \
    \          ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659822359
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    x.into_iter().filter(|&i| {\n        i.to_string().chars().any(|c| c.is_digit(10)\
    \ && (c.to_digit(10).unwrap() % 2 == 1))\n    }).collect()\n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1422, 1]`,\n right: `[1, 15, 33]`', /tmp/tmp0bgprowt.rs:13:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822360
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut res = Vec::new();\n    for num in x {\n        if has_even_digit(num)\
    \ {\n            continue;\n        }\n        res.push(num);\n    }\n    res.sort();\n\
    \    res\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n -->\
    \ /tmp/tmp0u53v31z.rs:8:12\n  |\n8 |         if has_even_digit(num) {\n  |   \
    \         ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822359
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    x.into_iter().filter(|&i| i.to_string().chars().all(|c| c.to_digit(10).unwrap()\
    \ % 2 == 1)).collect()\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmphtb10p2g.rs:11:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822357
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut ans = vec![];\n    for num in x {\n        if !has_even_digit(num)\
    \ {\n            ans.push(num);\n        }\n    }\n    ans.sort();\n    ans\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n -->\
    \ /tmp/tmp11nzrbv3.rs:8:13\n  |\n8 |         if !has_even_digit(num) {\n  |  \
    \           ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822359
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut list = Vec::new();\n    for num in x {\n        if has_even_digit(num)\
    \ {\n            list.push(num);\n        }\n    }\n    list.sort();\n    list\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n -->\
    \ /tmp/tmpt06hu73i.rs:8:12\n  |\n8 |         if has_even_digit(num) {\n  |   \
    \         ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822359
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut result: Vec<isize> = vec![];\n    for num in x {\n        if\
    \ has_even_digit(num) {\n            continue;\n        } else {\n           \
    \ result.push(num);\n        }\n    }\n    result.sort();\n    result\n}\n\nfn\
    \ main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `has_even_digit` in this scope\n -->\
    \ /tmp/tmpjb_8cohi.rs:8:12\n  |\n8 |         if has_even_digit(num) {\n  |   \
    \         ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822359
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    let mut v = Vec::new();\n    for i in x {\n        let mut i = i;\n \
    \       while i > 0 {\n            if i % 2 == 0 {\n                break;\n \
    \           }\n            i /= 10;\n        }\n        if i == 0 {\n        \
    \    v.push(i);\n        }\n    }\n    v.sort();\n    v\n}\n\nfn main() {\n  \
    \  let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 0, 0]`,\n right: `[1, 15, 33]`', /tmp/tmp0_0eoqjy.rs:25:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822360
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n    x.into_iter().filter(|&n| (n / 10) % 2 != 0 && n % 2 != 0).collect()\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33]`,\n right: `[1, 15, 33]`', /tmp/tmponh3c7m6.rs:11:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822360
