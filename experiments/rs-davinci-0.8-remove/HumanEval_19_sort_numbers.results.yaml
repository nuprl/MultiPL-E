language: rs
name: HumanEval_19_sort_numbers
results:
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut num_vec:\
    \ Vec<u8> = numbers\n        .split(' ')\n        .map(|x| {\n            match\
    \ x {\n                \"zero\" => 0,\n                \"one\" => 1,\n       \
    \         \"two\" => 2,\n                \"three\" => 3,\n                \"four\"\
    \ => 4,\n                \"five\" => 5,\n                \"six\" => 6,\n     \
    \           \"seven\" => 7,\n                \"eight\" => 8,\n               \
    \ \"nine\" => 9,\n                _ => panic!(\"Invalid number {}\", x),\n   \
    \         }\n        })\n        .collect();\n    num_vec.sort();\n    let mut\
    \ res = String::new();\n    for i in num_vec {\n        res.push_str(match i {\n\
    \            0 => \"zero\",\n            1 => \"one\",\n            2 => \"two\"\
    ,\n            3 => \"three\",\n            4 => \"four\",\n            5 => \"\
    five\",\n            6 => \"six\",\n            7 => \"seven\",\n            8\
    \ => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"Invalid\
    \ number {}\", i),\n        });\n        res.push(' ');\n    }\n    res.pop();\n\
    \    res\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''Invalid number '', /tmp/tmpkup_rfm0.rs:19:22

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659821377
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let numeral_numbers:\
    \ Vec<i32> = numbers\n        .split(\" \")\n        .map(|numeral| {\n      \
    \      match numeral {\n                \"zero\" => 0,\n                \"one\"\
    \ => 1,\n                \"two\" => 2,\n                \"three\" => 3,\n    \
    \            \"four\" => 4,\n                \"five\" => 5,\n                \"\
    six\" => 6,\n                \"seven\" => 7,\n                \"eight\" => 8,\n\
    \                \"nine\" => 9,\n                _ => panic!(\"Invalid numeral!\"\
    ),\n            }\n        })\n        .collect();\n\n    let mut sorted_numbers\
    \ = numeral_numbers.clone();\n    sorted_numbers.sort();\n\n    let numeral_string:\
    \ Vec<String> = sorted_numbers\n        .iter()\n        .map(|numeral| {\n  \
    \          match numeral {\n                0 => \"zero\",\n                1\
    \ => \"one\",\n                2 => \"two\",\n                3 => \"three\",\n\
    \                4 => \"four\",\n                5 => \"five\",\n            \
    \    6 => \"six\",\n                7 => \"seven\",\n                8 => \"eight\"\
    ,\n                9 => \"nine\",\n                _ => panic!(\"Invalid numeral!\"\
    ),\n            }\n        })\n        .collect();\n\n    numeral_string.join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n  --> /tmp/tmptvcxdke8.rs:44:10\n   |\n44 |  \
    \       .collect();\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&str>`\n   |\n   = help: the trait `FromIterator<&str>`\
    \ is not implemented for `Vec<String>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659821376
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut number_map:\
    \ Vec<(u32, String)> = vec![];\n    let mut result: Vec<String> = vec![];\n\n\
    \    for number in numbers.split(\" \") {\n        match number {\n          \
    \  \"zero\" => number_map.push((0, \"zero\".to_string())),\n            \"one\"\
    \ => number_map.push((1, \"one\".to_string())),\n            \"two\" => number_map.push((2,\
    \ \"two\".to_string())),\n            \"three\" => number_map.push((3, \"three\"\
    .to_string())),\n            \"four\" => number_map.push((4, \"four\".to_string())),\n\
    \            \"five\" => number_map.push((5, \"five\".to_string())),\n       \
    \     \"six\" => number_map.push((6, \"six\".to_string())),\n            \"seven\"\
    \ => number_map.push((7, \"seven\".to_string())),\n            \"eight\" => number_map.push((8,\
    \ \"eight\".to_string())),\n            \"nine\" => number_map.push((9, \"nine\"\
    .to_string())),\n            _ => continue,\n        }\n    }\n\n    number_map.sort_by(|a,\
    \ b| a.cmp(b));\n\n    for item in number_map {\n        result.push(item.1);\n\
    \    }\n\n    result.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821377
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut vec =\
    \ Vec::new();\n    for num in numbers.split_whitespace() {\n        match num\
    \ {\n            \"zero\" => vec.push(0),\n            \"one\" => vec.push(1),\n\
    \            \"two\" => vec.push(2),\n            \"three\" => vec.push(3),\n\
    \            \"four\" => vec.push(4),\n            \"five\" => vec.push(5),\n\
    \            \"six\" => vec.push(6),\n            \"seven\" => vec.push(7),\n\
    \            \"eight\" => vec.push(8),\n            \"nine\" => vec.push(9),\n\
    \            _ => vec.push(0),\n        }\n    }\n    vec.sort();\n    let mut\
    \ result = String::new();\n    for num in vec {\n        match num {\n       \
    \     0 => result += \"zero \",\n            1 => result += \"one \",\n      \
    \      2 => result += \"two \",\n            3 => result += \"three \",\n    \
    \        4 => result += \"four \",\n            5 => result += \"five \",\n  \
    \          6 => result += \"six \",\n            7 => result += \"seven \",\n\
    \            8 => result += \"eight \",\n            9 => result += \"nine \"\
    ,\n            _ => result += \"zero \",\n        }\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821377
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<i32> = numbers\n        .split(' ')\n        .map(|number| match number\
    \ {\n            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\"\
    \ => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n           \
    \ \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n   \
    \         \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    unknown number given: {}\", number),\n        })\n        .collect();\n    numbers.sort();\n\
    \    numbers\n        .iter()\n        .map(|number| match number {\n        \
    \    0 => \"zero\",\n            1 => \"one\",\n            2 => \"two\",\n  \
    \          3 => \"three\",\n            4 => \"four\",\n            5 => \"five\"\
    ,\n            6 => \"six\",\n            7 => \"seven\",\n            8 => \"\
    eight\",\n            9 => \"nine\",\n            _ => panic!(\"invalid number\
    \ given: {}\", number),\n        })\n        .collect::<Vec<&str>>()\n       \
    \ .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''unknown number given: '', /tmp/tmp3yaz67uo.rs:18:18

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659821377
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let nums: Vec<&str>\
    \ = numbers.split_whitespace().collect();\n    nums.into_iter().map(|x| number_to_int(x)).collect::<Vec<u32>>().sort();\n\
    \    nums.into_iter().map(|x| int_to_number(x)).collect::<Vec<&str>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `number_to_int` in this scope\n -->\
    \ /tmp/tmp4wm47__o.rs:6:30\n  |\n6 |     nums.into_iter().map(|x| number_to_int(x)).collect::<Vec<u32>>().sort();\n\
    \  |                              ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `int_to_number` in this scope\n --> /tmp/tmp4wm47__o.rs:7:30\n\
    \  |\n7 |     nums.into_iter().map(|x| int_to_number(x)).collect::<Vec<&str>>().join(\"\
    \ \")\n  |                              ^^^^^^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659821376
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    // Split by space\n\
    \    let numbers: Vec<&str> = numbers.split(\" \").collect();\n    // Map each\
    \ token to a number, using a hashmap for lookup\n    let mut number_map: HashMap<&str,\
    \ u32> = HashMap::new();\n    number_map.insert(\"zero\", 0);\n    number_map.insert(\"\
    one\", 1);\n    number_map.insert(\"two\", 2);\n    number_map.insert(\"three\"\
    , 3);\n    number_map.insert(\"four\", 4);\n    number_map.insert(\"five\", 5);\n\
    \    number_map.insert(\"six\", 6);\n    number_map.insert(\"seven\", 7);\n  \
    \  number_map.insert(\"eight\", 8);\n    number_map.insert(\"nine\", 9);\n   \
    \ // Sort with our hashmap lookup comparator\n    let mut sorted_numbers: Vec<&str>\
    \ = numbers.iter().map(|&i| i).collect();\n    sorted_numbers.sort_by(|&a, &b|\
    \ number_map.get(a).unwrap().cmp(number_map.get(b).unwrap()));\n    // Make a\
    \ string from the sorted vector\n    sorted_numbers.iter().fold(String::new(),\
    \ |acc, x| acc + *x + \" \").trim().to_string()\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashMap` in this scope\n --> /tmp/tmpsjjujxb4.rs:8:25\n\
    \  |\n8 |     let mut number_map: HashMap<&str, u32> = HashMap::new();\n  |  \
    \                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpsjjujxb4.rs:8:46\n\
    \  |\n8 |     let mut number_map: HashMap<&str, u32> = HashMap::new();\n  |  \
    \                                            ^^^^^^^ not found in this scope\n\
    \  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n\
    \  |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0412, E0433.\nFor more information about an error, try `rustc\
    \ --explain E0412`.\n"
  stdout: ''
  timestamp: 1659821376
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut v: Vec<usize>\
    \ = numbers\n        .split_whitespace()\n        .map(|s| match s {\n       \
    \     \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n \
    \           \"three\" => 3,\n            \"four\" => 4,\n            \"five\"\
    \ => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n            \"\
    eight\" => 8,\n            \"nine\" => 9,\n            _ => unreachable!(),\n\
    \        })\n        .collect();\n    v.sort();\n    let mut words: Vec<String>\
    \ = Vec::new();\n    for n in v {\n        match n {\n            0 => words.push(\"\
    zero\".to_string()),\n            1 => words.push(\"one\".to_string()),\n    \
    \        2 => words.push(\"two\".to_string()),\n            3 => words.push(\"\
    three\".to_string()),\n            4 => words.push(\"four\".to_string()),\n  \
    \          5 => words.push(\"five\".to_string()),\n            6 => words.push(\"\
    six\".to_string()),\n            7 => words.push(\"seven\".to_string()),\n   \
    \         8 => words.push(\"eight\".to_string()),\n            9 => words.push(\"\
    nine\".to_string()),\n            _ => unreachable!(),\n        }\n    }\n   \
    \ words.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n   \
    \ assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821377
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut num_vec:\
    \ Vec<usize> = Vec::new();\n    let mut res_vec: Vec<usize> = Vec::new();\n  \
    \  let mut res = String::new();\n\n    let num_translate = |num: &str| -> usize\
    \ {\n        match num {\n            \"zero\" => 0,\n            \"one\" => 1,\n\
    \            \"two\" => 2,\n            \"three\" => 3,\n            \"four\"\
    \ => 4,\n            \"five\" => 5,\n            \"six\" => 6,\n            \"\
    seven\" => 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n     \
    \       _ => 99,\n        }\n    };\n\n    for num in numbers.split_whitespace()\
    \ {\n        num_vec.push(num_translate(num));\n    }\n\n    let num_vec = num_vec.into_iter().filter(|&num|\
    \ num != 99).collect::<Vec<usize>>();\n    res_vec = num_vec.clone();\n    res_vec.sort();\n\
    \n    for num in &res_vec {\n        match num {\n            0 => res.push_str(\"\
    zero \"),\n            1 => res.push_str(\"one \"),\n            2 => res.push_str(\"\
    two \"),\n            3 => res.push_str(\"three \"),\n            4 => res.push_str(\"\
    four \"),\n            5 => res.push_str(\"five \"),\n            6 => res.push_str(\"\
    six \"),\n            7 => res.push_str(\"seven \"),\n            8 => res.push_str(\"\
    eight \"),\n            9 => res.push_str(\"nine \"),\n            _ => {}\n \
    \       }\n    }\n\n    res.trim().to_string()\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821377
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_vector:\
    \ Vec<String> = numbers.split(\" \").map(|x| x.to_string()).collect();\n    numbers_vector.sort();\n\
    \    let mut numbers_string = String::new();\n    for number in numbers_vector\
    \ {\n        numbers_string.push_str(&format!(\"{} \", number));\n    }\n    numbers_string.pop();\n\
    \    numbers_string\n}\n\nfn main() {\n    let candidate = sort_numbers;\n   \
    \ assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"five nine three\"`,\n right: `\"three five nine\"`', /tmp/tmpt4l7ribq.rs:19:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821377
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    numbers\n    \
    \    .split(' ')\n        .map(|num| {\n            match num {\n            \
    \    \"zero\" => 0,\n                \"one\" => 1,\n                \"two\" =>\
    \ 2,\n                \"three\" => 3,\n                \"four\" => 4,\n      \
    \          \"five\" => 5,\n                \"six\" => 6,\n                \"seven\"\
    \ => 7,\n                \"eight\" => 8,\n                \"nine\" => 9,\n   \
    \             _ => 0,\n            }\n        })\n        .sorted()\n        .map(|num|\
    \ match num {\n            0 => \"zero\",\n            1 => \"one\",\n       \
    \     2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n\
    \            5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => \"\
    \",\n        })\n        .collect::<Vec<&str>>()\n        .join(\" \")\n}\n\n\
    fn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted` found for struct `Map` in the current\
    \ scope\n  --> /tmp/tmp6nigy1p4.rs:22:10\n   |\n22 |         .sorted()\n   | \
    \         ^^^^^^ method not found in `Map<std::str::Split<'_, char>, [closure@/tmp/tmp6nigy1p4.rs:7:14:\
    \ 21:10]>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659821376
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let nums: Vec<u32>\
    \ = numbers\n        .split_whitespace()\n        .map(|s| match s {\n       \
    \     \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n \
    \           \"three\" => 3,\n            \"four\" => 4,\n            \"five\"\
    \ => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n            \"\
    eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"shouldn't\
    \ be here\"),\n        })\n        .collect();\n    let nums = nums.clone();\n\
    \    let mut nums: Vec<_> = nums.iter().enumerate().collect();\n    nums.sort_by_key(|(_,\
    \ n)| **n);\n    let mut result = String::new();\n    for (i, num) in nums {\n\
    \        result.push_str(match i {\n            0 => \"zero\",\n            1\
    \ => \"one\",\n            2 => \"two\",\n            3 => \"three\",\n      \
    \      4 => \"four\",\n            5 => \"five\",\n            6 => \"six\",\n\
    \            7 => \"seven\",\n            8 => \"eight\",\n            9 => \"\
    nine\",\n            _ => panic!(\"shouldn't be here\"),\n        });\n      \
    \  result.push(' ');\n    }\n    result.pop();\n    result\n}\n\nfn main() {\n\
    \    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"\
    three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"zero\"`,\n right: `\"three\"`', /tmp/tmpvw3sephj.rs:48:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821377
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut options\
    \ = vec![String::from(\"zero\"),\n                           String::from(\"one\"\
    ),\n                           String::from(\"two\"),\n                      \
    \     String::from(\"three\"),\n                           String::from(\"four\"\
    ),\n                           String::from(\"five\"),\n                     \
    \      String::from(\"six\"),\n                           String::from(\"seven\"\
    ),\n                           String::from(\"eight\"),\n                    \
    \       String::from(\"nine\")];\n    let mut result = String::new();\n    let\
    \ mut index = 0;\n    while index < numbers.len() {\n        let mut index2 =\
    \ 0;\n        let mut temp_start = 0;\n        while index2 < options.len() {\n\
    \            if numbers[index..].starts_with(&options[index2]) {\n           \
    \     result.push_str(&options[index2]);\n                result.push(' ');\n\
    \                temp_start = index + options[index2].len();\n            }\n\
    \            index2 += 1;\n        }\n        index = temp_start;\n    }\n   \
    \ result\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"three \"`,\n right: `\"three\"`', /tmp/tmp64g_3k_r.rs:36:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821377
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut word_numbers:\
    \ Vec<&str> = numbers.split_whitespace().collect();\n    word_numbers.sort_by(|a,\
    \ b| {\n        let num_a = word_to_digit(a);\n        let num_b = word_to_digit(b);\n\
    \        if num_a < num_b {\n            return std::cmp::Ordering::Less;\n  \
    \      } else if num_a > num_b {\n            return std::cmp::Ordering::Greater;\n\
    \        } else {\n            return std::cmp::Ordering::Equal;\n        }\n\
    \    });\n    return word_numbers.join(\" \");\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `word_to_digit` in this scope\n -->\
    \ /tmp/tmpdk8hmzq1.rs:7:21\n  |\n7 |         let num_a = word_to_digit(a);\n \
    \ |                     ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `word_to_digit` in this scope\n --> /tmp/tmpdk8hmzq1.rs:8:21\n\
    \  |\n8 |         let num_b = word_to_digit(b);\n  |                     ^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659821376
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<i32> = numbers\n        .split_whitespace()\n        .map(|numeral| {\n\
    \            match numeral {\n                \"zero\" => 0,\n               \
    \ \"one\" => 1,\n                \"two\" => 2,\n                \"three\" => 3,\n\
    \                \"four\" => 4,\n                \"five\" => 5,\n            \
    \    \"six\" => 6,\n                \"seven\" => 7,\n                \"eight\"\
    \ => 8,\n                \"nine\" => 9,\n                _ => 0,\n           \
    \ }\n        })\n        .collect();\n    numbers.sort();\n    let mut output\
    \ = String::new();\n    for number in numbers {\n        match number {\n    \
    \        0 => output.push_str(\"zero \"),\n            1 => output.push_str(\"\
    one \"),\n            2 => output.push_str(\"two \"),\n            3 => output.push_str(\"\
    three \"),\n            4 => output.push_str(\"four \"),\n            5 => output.push_str(\"\
    five \"),\n            6 => output.push_str(\"six \"),\n            7 => output.push_str(\"\
    seven \"),\n            8 => output.push_str(\"eight \"),\n            9 => output.push_str(\"\
    nine \"),\n            _ => output.push_str(\"zero \"),\n        }\n    }\n  \
    \  output.trim().to_string()\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821377
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut result\
    \ = Vec::new();\n    for s in numbers.split_whitespace() {\n        match s {\n\
    \            \"zero\" => result.push(0),\n            \"one\" => result.push(1),\n\
    \            \"two\" => result.push(2),\n            \"three\" => result.push(3),\n\
    \            \"four\" => result.push(4),\n            \"five\" => result.push(5),\n\
    \            \"six\" => result.push(6),\n            \"seven\" => result.push(7),\n\
    \            \"eight\" => result.push(8),\n            \"nine\" => result.push(9),\n\
    \            _ => {}\n        }\n    }\n    result.sort();\n    result.iter().map(|i|\
    \ match i {\n        0 => \"zero\",\n        1 => \"one\",\n        2 => \"two\"\
    ,\n        3 => \"three\",\n        4 => \"four\",\n        5 => \"five\",\n \
    \       6 => \"six\",\n        7 => \"seven\",\n        8 => \"eight\",\n    \
    \    9 => \"nine\",\n        _ => unreachable!(),\n    }).collect::<Vec<&str>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821377
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<i32> = numbers\n        .split_whitespace()\n        .map(|num| {\n    \
    \        match num {\n                \"zero\" => 0,\n                \"one\"\
    \ => 1,\n                \"two\" => 2,\n                \"three\" => 3,\n    \
    \            \"four\" => 4,\n                \"five\" => 5,\n                \"\
    six\" => 6,\n                \"seven\" => 7,\n                \"eight\" => 8,\n\
    \                \"nine\" => 9,\n                _ => 0,\n            }\n    \
    \    })\n        .collect();\n    nums.sort();\n    nums.iter()\n        .map(|num|\
    \ match num {\n            0 => \"zero\",\n            1 => \"one\",\n       \
    \     2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n\
    \            5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => \"\
    zero\",\n        })\n        .collect::<Vec<&str>>()\n        .join(\" \")\n}\n\
    \nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821377
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let number_mapping\
    \ = [\n        \"zero\",\n        \"one\",\n        \"two\",\n        \"three\"\
    ,\n        \"four\",\n        \"five\",\n        \"six\",\n        \"seven\",\n\
    \        \"eight\",\n        \"nine\",\n    ];\n    let numbers_strings: Vec<&str>\
    \ = numbers.split(' ').collect();\n    let mut numbers_ints: Vec<usize> = Vec::new();\n\
    \    for num in numbers_strings {\n        for (i, numeral) in number_mapping.iter().enumerate()\
    \ {\n            if num == numeral {\n                numbers_ints.push(i);\n\
    \            }\n        }\n    }\n    numbers_ints.sort();\n    let mut sorted_string\
    \ = String::new();\n    for num in numbers_ints {\n        if sorted_string ==\
    \ \"\" {\n            sorted_string.push_str(number_mapping[num]);\n        }\
    \ else {\n            sorted_string.push_str(&format!(\" {}\", number_mapping[num]));\n\
    \        }\n    }\n    sorted_string\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `str` with `&str`\n  --> /tmp/tmpv_l8pttc.rs:21:20\n\
    \   |\n21 |             if num == numeral {\n   |                    ^^ no implementation\
    \ for `str == &str`\n   |\n   = help: the trait `PartialEq<&str>` is not implemented\
    \ for `str`\n   = note: required because of the requirements on the impl of `PartialEq<&&str>`\
    \ for `&str`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659821376
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let numbers =\
    \ numbers.split_whitespace().collect::<Vec<&str>>();\n    let numbers = numbers.iter().map(|&x|\
    \ x.to_string()).collect::<Vec<String>>();\n    let digits = vec![\"zero\", \"\
    one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\",\
    \ \"nine\"];\n    let numbers = numbers.iter().map(|x| digits.iter().position(|&y|\
    \ y == x).unwrap()).collect::<Vec<usize>>();\n    let mut numbers = numbers.iter().map(|&x|\
    \ x.to_string()).collect::<Vec<String>>();\n    numbers.sort();\n    numbers.iter().map(|x|\
    \ digits[x.parse::<usize>().unwrap()].to_string()).collect::<Vec<String>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821377
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<i32> = numbers\n        .split_whitespace()\n        .map(|n| match n {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => unreachable!(),\n\
    \        })\n        .collect();\n    nums.sort();\n    nums.iter()\n        .map(|n|\
    \ match n {\n            0 => \"zero\",\n            1 => \"one\",\n         \
    \   2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n \
    \           5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => unreachable!(),\n\
    \        })\n        .collect::<Vec<&str>>()\n        .join(\" \")\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821377
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<u32> = numbers\n        .split_whitespace()\n        .map(|numeral| match\
    \ numeral {\n            \"zero\" => 0,\n            \"one\" => 1,\n         \
    \   \"two\" => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n \
    \           \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" =>\
    \ 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n            _ =>\
    \ unreachable!(),\n        })\n        .collect();\n    numbers.sort();\n    let\
    \ numbers: Vec<String> = numbers\n        .iter()\n        .map(|number| match\
    \ number {\n            0 => \"zero\",\n            1 => \"one\",\n          \
    \  2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n  \
    \          5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => unreachable!(),\n\
    \        })\n        .map(|numeral| numeral.to_string())\n        .collect();\n\
    \    numbers.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821377
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut x: Vec<u8>\
    \ = vec![];\n    for s in numbers.split(\" \") {\n        x.push(match s {\n \
    \           \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => {\n      \
    \          panic!(\"invalid input\");\n            }\n        });\n    }\n   \
    \ x.sort();\n    let mut s = String::new();\n    for u in x {\n        if !s.is_empty()\
    \ {\n            s += \" \";\n        }\n        s += match u {\n            0\
    \ => \"zero\",\n            1 => \"one\",\n            2 => \"two\",\n       \
    \     3 => \"three\",\n            4 => \"four\",\n            5 => \"five\",\n\
    \            6 => \"six\",\n            7 => \"seven\",\n            8 => \"eight\"\
    ,\n            9 => \"nine\",\n            _ => {\n                panic!(\"invalid\
    \ input\");\n            }\n        };\n    }\n    s\n}\n\nfn main() {\n    let\
    \ candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''invalid input'', /tmp/tmpb9ock_1u.rs:19:17

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659821377
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<i32> = numbers\n        .split_whitespace()\n        .map(|n| convert_to_int(n))\n\
    \        .collect();\n    nums.sort();\n    nums.iter()\n        .map(|n| convert_to_str(n))\n\
    \        .collect::<Vec<String>>()\n        .join(\" \")\n}\n\nfn main() {\n \
    \   let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"\
    three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `convert_to_int` in this scope\n -->\
    \ /tmp/tmp3ujbj9m2.rs:7:18\n  |\n7 |         .map(|n| convert_to_int(n))\n  |\
    \                  ^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find function `convert_to_str` in this scope\n  --> /tmp/tmp3ujbj9m2.rs:11:18\n\
    \   |\n11 |         .map(|n| convert_to_str(n))\n   |                  ^^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659821376
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let numbers: Vec<&str>\
    \ = numbers.split(' ').collect();\n    let mut digits: Vec<u8> = Vec::new();\n\
    \    for number in numbers {\n        digits.push(find_digit(number));\n    }\n\
    \    digits.sort();\n    let mut result = String::new();\n    for d in digits\
    \ {\n        result += find_number(d);\n        result += \" \";\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `find_digit` in this scope\n --> /tmp/tmp5_c_qr11.rs:8:21\n\
    \  |\n8 |         digits.push(find_digit(number));\n  |                     ^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find function `find_number`\
    \ in this scope\n  --> /tmp/tmp5_c_qr11.rs:13:19\n   |\n13 |         result +=\
    \ find_number(d);\n   |                   ^^^^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659821376
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut number_list:\
    \ Vec<&str> = numbers.split(\" \").collect();\n    number_list.sort();\n    let\
    \ number_string: String = number_list.join(\" \");\n    number_string\n}\n\nfn\
    \ main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"five nine three\"`,\n right: `\"three five nine\"`', /tmp/tmplr6qx4ag.rs:15:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821377
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<i32> = Vec::new();\n    for s in numbers.split(\" \") {\n        match s\
    \ {\n            \"zero\" => nums.push(0),\n            \"one\" => nums.push(1),\n\
    \            \"two\" => nums.push(2),\n            \"three\" => nums.push(3),\n\
    \            \"four\" => nums.push(4),\n            \"five\" => nums.push(5),\n\
    \            \"six\" => nums.push(6),\n            \"seven\" => nums.push(7),\n\
    \            \"eight\" => nums.push(8),\n            \"nine\" => nums.push(9),\n\
    \            _ => continue,\n        }\n    }\n    nums.sort();\n    let mut ret_str\
    \ = String::new();\n    for n in nums {\n        match n {\n            0 => ret_str.push_str(\"\
    zero \"),\n            1 => ret_str.push_str(\"one \"),\n            2 => ret_str.push_str(\"\
    two \"),\n            3 => ret_str.push_str(\"three \"),\n            4 => ret_str.push_str(\"\
    four \"),\n            5 => ret_str.push_str(\"five \"),\n            6 => ret_str.push_str(\"\
    six \"),\n            7 => ret_str.push_str(\"seven \"),\n            8 => ret_str.push_str(\"\
    eight \"),\n            9 => ret_str.push_str(\"nine \"),\n            _ => continue,\n\
    \        }\n    }\n    ret_str.pop();\n    ret_str\n}\n\nfn main() {\n    let\
    \ candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821377
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut sorted_numbers:\
    \ Vec<u32> = numbers\n        .split_whitespace()\n        .map(|numeral| {\n\
    \            match numeral {\n                \"zero\" => 0,\n               \
    \ \"one\" => 1,\n                \"two\" => 2,\n                \"three\" => 3,\n\
    \                \"four\" => 4,\n                \"five\" => 5,\n            \
    \    \"six\" => 6,\n                \"seven\" => 7,\n                \"eight\"\
    \ => 8,\n                \"nine\" => 9,\n                _ => panic!(\"This string\
    \ does not contain numbers!\"),\n            }\n        })\n        .collect();\n\
    \    sorted_numbers.sort();\n    sorted_numbers\n        .iter()\n        .map(|num|\
    \ num.to_string())\n        .collect::<Vec<String>>()\n        .join(\" \")\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"3\"`,\n right: `\"three\"`', /tmp/tmp651tpi44.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821377
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<i32> = numbers\n        .split_whitespace()\n        .map(|num| match num\
    \ {\n            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\"\
    \ => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n           \
    \ \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n   \
    \         \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Not a valid numberal input.\"),\n        })\n        .collect();\n    nums.sort();\n\
    \    nums.iter()\n        .map(|num| match num {\n            0 => \"zero\",\n\
    \            1 => \"one\",\n            2 => \"two\",\n            3 => \"three\"\
    ,\n            4 => \"four\",\n            5 => \"five\",\n            6 => \"\
    six\",\n            7 => \"seven\",\n            8 => \"eight\",\n           \
    \ 9 => \"nine\",\n            _ => panic!(\"Not a valid numberal input.\"),\n\
    \        })\n        .collect::<Vec<&str>>()\n        .join(\" \")\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821377
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let numbers =\
    \ numbers.split_whitespace().collect::<Vec<&str>>();\n    let mut sorted_numbers\
    \ = Vec::new();\n    for i in numbers {\n        match i {\n            \"zero\"\
    \ => sorted_numbers.push(0),\n            \"one\" => sorted_numbers.push(1),\n\
    \            \"two\" => sorted_numbers.push(2),\n            \"three\" => sorted_numbers.push(3),\n\
    \            \"four\" => sorted_numbers.push(4),\n            \"five\" => sorted_numbers.push(5),\n\
    \            \"six\" => sorted_numbers.push(6),\n            \"seven\" => sorted_numbers.push(7),\n\
    \            \"eight\" => sorted_numbers.push(8),\n            \"nine\" => sorted_numbers.push(9),\n\
    \            _ => (),\n        }\n    }\n    sorted_numbers.sort();\n    sorted_numbers\n\
    \        .iter()\n        .map(|x| match x {\n            0 => \"zero\",\n   \
    \         1 => \"one\",\n            2 => \"two\",\n            3 => \"three\"\
    ,\n            4 => \"four\",\n            5 => \"five\",\n            6 => \"\
    six\",\n            7 => \"seven\",\n            8 => \"eight\",\n           \
    \ 9 => \"nine\",\n            _ => \"\",\n        })\n        .collect::<Vec<&str>>()\n\
    \        .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821377
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let numbers: Vec<&str>\
    \ = numbers.split(' ').collect();\n    let mut found_numbers: Vec<i32> = Vec::new();\n\
    \    for number in numbers {\n        match number {\n            \"zero\" =>\
    \ found_numbers.push(0),\n            \"one\" => found_numbers.push(1),\n    \
    \        \"two\" => found_numbers.push(2),\n            \"three\" => found_numbers.push(3),\n\
    \            \"four\" => found_numbers.push(4),\n            \"five\" => found_numbers.push(5),\n\
    \            \"six\" => found_numbers.push(6),\n            \"seven\" => found_numbers.push(7),\n\
    \            \"eight\" => found_numbers.push(8),\n            \"nine\" => found_numbers.push(9),\n\
    \            _ => return String::from(\"Error\")\n        }\n    }\n    let mut\
    \ output = String::new();\n    found_numbers.sort();\n    for number in found_numbers\
    \ {\n        match number {\n            0 => output.push_str(\"zero \"),\n  \
    \          1 => output.push_str(\"one \"),\n            2 => output.push_str(\"\
    two \"),\n            3 => output.push_str(\"three \"),\n            4 => output.push_str(\"\
    four \"),\n            5 => output.push_str(\"five \"),\n            6 => output.push_str(\"\
    six \"),\n            7 => output.push_str(\"seven \"),\n            8 => output.push_str(\"\
    eight \"),\n            9 => output.push_str(\"nine \"),\n            _ => return\
    \ String::from(\"Error\")\n        }\n    }\n    output\n}\n\nfn main() {\n  \
    \  let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"\
    three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Error\"`,\n right: `\"\"`', /tmp/tmpr_9e3ns2.rs:44:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821377
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_vec:\
    \ Vec<String> = numbers.split(\" \").map(|s| s.to_string()).collect();\n    numbers_vec.sort_by(|x,\
    \ y| match (x.parse::<u8>(), y.parse::<u8>()) {\n        (Ok(x), Ok(y)) => x.cmp(&y),\n\
    \        _ => x.cmp(&y),\n    });\n    numbers_vec.join(\" \")\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"five nine three\"`,\n right: `\"three five nine\"`', /tmp/tmpv_er7mze.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821377
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<&str> = numbers.split_whitespace().collect();\n    nums.sort_by(|a, b| num_to_numeral(&a).cmp(&num_to_numeral(&b)));\n\
    \    nums.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `num_to_numeral` in this scope\n -->\
    \ /tmp/tmpzrtd3qoy.rs:6:25\n  |\n6 |     nums.sort_by(|a, b| num_to_numeral(&a).cmp(&num_to_numeral(&b)));\n\
    \  |                         ^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `num_to_numeral` in this scope\n --> /tmp/tmpzrtd3qoy.rs:6:49\n\
    \  |\n6 |     nums.sort_by(|a, b| num_to_numeral(&a).cmp(&num_to_numeral(&b)));\n\
    \  |                                                 ^^^^^^^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659821377
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<u8> = numbers\n        .split_whitespace()\n        .map(|x| match x {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => 0,\n     \
    \   })\n        .collect();\n    numbers.sort();\n    numbers\n        .iter()\n\
    \        .map(|x| match x {\n            0 => \"zero\",\n            1 => \"one\"\
    ,\n            2 => \"two\",\n            3 => \"three\",\n            4 => \"\
    four\",\n            5 => \"five\",\n            6 => \"six\",\n            7\
    \ => \"seven\",\n            8 => \"eight\",\n            9 => \"nine\",\n   \
    \         _ => \"\",\n        })\n        .collect::<Vec<&str>>()\n        .join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821377
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    // let numbers\
    \ = numbers.split(\" \").map(|x| x.parse::<u32>().unwrap()).collect::<Vec<u32>>();\n\
    \    let numbers = numbers.split(\" \").map(|x| x.parse::<u32>().unwrap()).collect::<Vec<u32>>();\n\
    \    let mut numbers_sorted = numbers.clone();\n    numbers_sorted.sort();\n \
    \   let numbers_sorted = numbers_sorted.iter().map(|x| x.to_string()).collect::<Vec<String>>().join(\"\
    \ \");\n    let mut numbers_sorted_string = \"\".to_string();\n    for i in 0..numbers.len()\
    \ {\n        for j in 0..numbers.len() {\n            if numbers[i] == numbers_sorted[j].parse::<u32>().unwrap()\
    \ {\n                numbers_sorted_string.push_str(&i.to_string());\n       \
    \         numbers_sorted_string.push_str(\" \");\n            }\n        }\n \
    \   }\n    return numbers_sorted_string;\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmprycimxnl.rs:13:30\n\
    \   |\n13 |             if numbers[i] == numbers_sorted[j].parse::<u32>().unwrap()\
    \ {\n   |                              ^^^^^^^^^^^^^^^^^ `String` cannot be indexed\
    \ by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented for\
    \ `String`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659821377
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut ints:\
    \ Vec<i32> = numbers\n        .split_whitespace()\n        .map(|s| convert_to_int(s))\n\
    \        .collect();\n    ints.sort();\n    let nums: Vec<String> = ints.iter().map(|i|\
    \ convert_to_string(*i)).collect();\n    return nums.join(\" \");\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `convert_to_int` in this scope\n -->\
    \ /tmp/tmpy2r6f9o9.rs:7:18\n  |\n7 |         .map(|s| convert_to_int(s))\n  |\
    \                  ^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find function `convert_to_string` in this scope\n  --> /tmp/tmpy2r6f9o9.rs:10:49\n\
    \   |\n10 |     let nums: Vec<String> = ints.iter().map(|i| convert_to_string(*i)).collect();\n\
    \   |                                                 ^^^^^^^^^^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659821377
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<usize> = numbers\n        .split_whitespace()\n        .map(|s| match s\
    \ {\n            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\"\
    \ => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n           \
    \ \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n   \
    \         \"eight\" => 8,\n            \"nine\" => 9,\n            _ => unreachable!(),\n\
    \        })\n        .collect();\n    nums.sort();\n    format!(\n        \"{}\
    \ {} {} {} {} {} {} {} {} {}\",\n        nums[0],\n        nums[1],\n        nums[2],\n\
    \        nums[3],\n        nums[4],\n        nums[5],\n        nums[6],\n    \
    \    nums[7],\n        nums[8],\n        nums[9]\n    )\n}\n\nfn main() {\n  \
    \  let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"\
    three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpy1i_f50r.rs:24:9

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659821377
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut v = vec![];\n\
    \    for (i, number) in numbers.split_whitespace().enumerate() {\n        match\
    \ number {\n            \"zero\" => v.push(i),\n            \"one\" => v.push(i),\n\
    \            \"two\" => v.push(i),\n            \"three\" => v.push(i),\n    \
    \        \"four\" => v.push(i),\n            \"five\" => v.push(i),\n        \
    \    \"six\" => v.push(i),\n            \"seven\" => v.push(i),\n            \"\
    eight\" => v.push(i),\n            \"nine\" => v.push(i),\n            _ => panic!(\"\
    Invalid value '{}'\", number),\n        }\n    }\n    v.sort();\n    let mut s\
    \ = String::new();\n    for pos in v {\n        let number = numbers.split_whitespace().nth(pos).unwrap();\n\
    \        s.push_str(number);\n        s.push(' ');\n    }\n    s.pop();\n    s\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"five zero four seven nine eight\"`,\n right: `\"zero four five seven eight\
    \ nine\"`', /tmp/tmpc60pfh2i.rs:37:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821377
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    unimplemented!(\"\
    Sort the numbers in the string {:?}\", numbers);\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented: Sort the numbers in the
    string ""'', /tmp/tmpsm__qemh.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659821377
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut sorted\
    \ = numbers.split_whitespace().map(|x| match x {\n        \"zero\" => 0,\n   \
    \     \"one\" => 1,\n        \"two\" => 2,\n        \"three\" => 3,\n        \"\
    four\" => 4,\n        \"five\" => 5,\n        \"six\" => 6,\n        \"seven\"\
    \ => 7,\n        \"eight\" => 8,\n        \"nine\" => 9,\n        _ => panic!(\"\
    Invalid input\"),\n    }).collect::<Vec<i32>>();\n    sorted.sort();\n    sorted.iter().map(|x|\
    \ match x {\n        0 => \"zero\",\n        1 => \"one\",\n        2 => \"two\"\
    ,\n        3 => \"three\",\n        4 => \"four\",\n        5 => \"five\",\n \
    \       6 => \"six\",\n        7 => \"seven\",\n        8 => \"eight\",\n    \
    \    9 => \"nine\",\n        _ => panic!(\"Invalid input\"),\n    }).collect::<Vec<&str>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821377
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut result\
    \ = Vec::new();\n    for num in numbers.split_whitespace() {\n        let number\
    \ = match num {\n            \"zero\" => 0,\n            \"one\" => 1,\n     \
    \       \"two\" => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n\
    \            \"five\" => 5,\n            \"six\" => 6,\n            \"seven\"\
    \ => 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n           \
    \ _ => -1,\n        };\n        if number >= 0 {\n            result.push(number);\n\
    \        }\n    }\n    result.sort();\n    result.iter().map(|num| num.to_string()).collect::<Vec<String>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"3\"`,\n right: `\"three\"`', /tmp/tmp48ndnh8f.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821377
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut sequence:\
    \ Vec<usize> = Vec::new();\n    for number in numbers.split(\" \") {\n       \
    \ match number {\n            \"zero\" => sequence.push(0),\n            \"one\"\
    \ => sequence.push(1),\n            \"two\" => sequence.push(2),\n           \
    \ \"three\" => sequence.push(3),\n            \"four\" => sequence.push(4),\n\
    \            \"five\" => sequence.push(5),\n            \"six\" => sequence.push(6),\n\
    \            \"seven\" => sequence.push(7),\n            \"eight\" => sequence.push(8),\n\
    \            \"nine\" => sequence.push(9),\n            _ => (),\n        }\n\
    \    }\n    sequence.sort();\n    let mut res = String::new();\n    for number\
    \ in sequence {\n        res.push_str(match number {\n            0 => \"zero\"\
    ,\n            1 => \"one\",\n            2 => \"two\",\n            3 => \"three\"\
    ,\n            4 => \"four\",\n            5 => \"five\",\n            6 => \"\
    six\",\n            7 => \"seven\",\n            8 => \"eight\",\n           \
    \ 9 => \"nine\",\n            _ => \"\",\n        });\n        res.push(' ');\n\
    \    }\n    res.pop();\n    res\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821377
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<u32> = numbers\n        .split_whitespace()\n        .map(|n| {\n      \
    \      match n {\n                \"zero\" => 0,\n                \"one\" => 1,\n\
    \                \"two\" => 2,\n                \"three\" => 3,\n            \
    \    \"four\" => 4,\n                \"five\" => 5,\n                \"six\" =>\
    \ 6,\n                \"seven\" => 7,\n                \"eight\" => 8,\n     \
    \           \"nine\" => 9,\n                _ => panic!(\"invalid input\"),\n\
    \            }\n        })\n        .collect();\n    numbers.sort();\n    let\
    \ mut result = String::new();\n    for n in numbers {\n        result.push_str(match\
    \ n {\n            0 => \"zero\",\n            1 => \"one\",\n            2 =>\
    \ \"two\",\n            3 => \"three\",\n            4 => \"four\",\n        \
    \    5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\",\n\
    \            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    invalid input\"),\n        });\n        result.push(' ');\n    }\n    result.pop();\n\
    \    result\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821377
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<&str> = numbers.split_whitespace().collect();\n    numbers.sort_by(|&a,\
    \ &b| match a {\n        \"zero\" => match b {\n            \"zero\" => std::cmp::Ordering::Equal,\n\
    \            _ => std::cmp::Ordering::Less,\n        },\n        \"one\" => match\
    \ b {\n            \"zero\" => std::cmp::Ordering::Greater,\n            \"one\"\
    \ => std::cmp::Ordering::Equal,\n            _ => std::cmp::Ordering::Less,\n\
    \        },\n        \"two\" => match b {\n            \"zero\" | \"one\" => std::cmp::Ordering::Greater,\n\
    \            \"two\" => std::cmp::Ordering::Equal,\n            _ => std::cmp::Ordering::Less,\n\
    \        },\n        \"three\" => match b {\n            \"zero\" | \"one\" |\
    \ \"two\" => std::cmp::Ordering::Greater,\n            \"three\" => std::cmp::Ordering::Equal,\n\
    \            _ => std::cmp::Ordering::Less,\n        },\n        \"four\" => match\
    \ b {\n            \"zero\" | \"one\" | \"two\" | \"three\" => std::cmp::Ordering::Greater,\n\
    \            \"four\" => std::cmp::Ordering::Equal,\n            _ => std::cmp::Ordering::Less,\n\
    \        },\n        \"five\" => match b {\n            \"zero\" | \"one\" | \"\
    two\" | \"three\" | \"four\" => std::cmp::Ordering::Greater,\n            \"five\"\
    \ => std::cmp::Ordering::Equal,\n            _ => std::cmp::Ordering::Less,\n\
    \        },\n        \"six\" => match b {\n            \"zero\" | \"one\" | \"\
    two\" | \"three\" | \"four\" | \"five\" => std::cmp::Ordering::Greater,\n    \
    \        \"six\" => std::cmp::Ordering::Equal,\n            _ => std::cmp::Ordering::Less,\n\
    \        },\n        \"seven\" => match b {\n            \"zero\" | \"one\" |\
    \ \"two\" | \"three\" | \"four\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0765]: unterminated double quote string\n  --> /tmp/tmp2ztlxenl.rs:51:123\n\
    \   |\n51 |       assert_eq!(candidate(String::from(\"six five four three two\
    \ one zero\")), String::from(\"zero one two three four five six\"));\n   |  ___________________________________________________________________________________________________________________________^\n\
    52 | | }\n   | |__^\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0765`.\n"
  stdout: ''
  timestamp: 1659821377
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let words = numbers.split('\
    \ ').collect::<Vec<&str>>();\n    let mut nums = Vec::new();\n    for word in\
    \ words {\n        match word {\n            \"zero\" => nums.push(0),\n     \
    \       \"one\" => nums.push(1),\n            \"two\" => nums.push(2),\n     \
    \       \"three\" => nums.push(3),\n            \"four\" => nums.push(4),\n  \
    \          \"five\" => nums.push(5),\n            \"six\" => nums.push(6),\n \
    \           \"seven\" => nums.push(7),\n            \"eight\" => nums.push(8),\n\
    \            \"nine\" => nums.push(9),\n            _ => panic!(\"Invalid string\"\
    ),\n        }\n    }\n    nums.sort();\n    let mut out = String::new();\n   \
    \ for num in nums {\n        match num {\n            0 => out.push_str(\"zero\
    \ \"),\n            1 => out.push_str(\"one \"),\n            2 => out.push_str(\"\
    two \"),\n            3 => out.push_str(\"three \"),\n            4 => out.push_str(\"\
    four \"),\n            5 => out.push_str(\"five \"),\n            6 => out.push_str(\"\
    six \"),\n            7 => out.push_str(\"seven \"),\n            8 => out.push_str(\"\
    eight \"),\n            9 => out.push_str(\"nine \"),\n            _ => panic!(\"\
    Invalid string\"),\n        }\n    }\n    out\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''Invalid string'', /tmp/tmpmav34254.rs:19:18

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659821377
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let numbers: Vec<&str>\
    \ = numbers.split_whitespace().collect();\n    let mut lookup = HashMap::new();\n\
    \    lookup.insert(\"zero\", 0);\n    lookup.insert(\"one\", 1);\n    lookup.insert(\"\
    two\", 2);\n    lookup.insert(\"three\", 3);\n    lookup.insert(\"four\", 4);\n\
    \    lookup.insert(\"five\", 5);\n    lookup.insert(\"six\", 6);\n    lookup.insert(\"\
    seven\", 7);\n    lookup.insert(\"eight\", 8);\n    lookup.insert(\"nine\", 9);\n\
    \    let mut reverse_lookup = HashMap::new();\n    for (k, v) in &lookup {\n \
    \       reverse_lookup.insert(v, k);\n    }\n    let mut ints: Vec<u8> = numbers.iter().map(|x|\
    \ lookup[x]).collect();\n    ints.sort();\n    let mut strs: Vec<&str> = ints.iter().map(|x|\
    \ reverse_lookup[x]).collect();\n    strs.join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmppub57vzm.rs:6:22\n  |\n6 |     let mut lookup = HashMap::new();\n  |\
    \                      ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashMap`\n  --> /tmp/tmppub57vzm.rs:17:30\n\
    \   |\n17 |     let mut reverse_lookup = HashMap::new();\n   |               \
    \               ^^^^^^^ not found in this scope\n   |\nhelp: consider importing\
    \ this struct\n   |\n1  | use std::collections::HashMap;\n   |\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0433`.\n"
  stdout: ''
  timestamp: 1659821377
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<_> = numbers.split_whitespace().collect();\n    numbers.sort_by_key(|n|\
    \ numeral_to_int(n));\n    numbers.join(\" \")\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `numeral_to_int` in this scope\n -->\
    \ /tmp/tmpmkw3vri2.rs:6:29\n  |\n6 |     numbers.sort_by_key(|n| numeral_to_int(n));\n\
    \  |                             ^^^^^^^^^^^^^^ not found in this scope\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659821377
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<i32> = numbers\n        .split_whitespace()\n        .map(|s| {\n      \
    \      match s {\n                \"zero\" => 0,\n                \"one\" => 1,\n\
    \                \"two\" => 2,\n                \"three\" => 3,\n            \
    \    \"four\" => 4,\n                \"five\" => 5,\n                \"six\" =>\
    \ 6,\n                \"seven\" => 7,\n                \"eight\" => 8,\n     \
    \           \"nine\" => 9,\n                _ => unreachable!(),\n           \
    \ }\n        })\n        .collect();\n    numbers.sort();\n    numbers\n     \
    \   .iter()\n        .map(|n| match n {\n            0 => \"zero\",\n        \
    \    1 => \"one\",\n            2 => \"two\",\n            3 => \"three\",\n \
    \           4 => \"four\",\n            5 => \"five\",\n            6 => \"six\"\
    ,\n            7 => \"seven\",\n            8 => \"eight\",\n            9 =>\
    \ \"nine\",\n            _ => unreachable!(),\n        })\n        .collect::<Vec<&str>>()\n\
    \        .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821377
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    if numbers.is_empty()\
    \ {\n        return numbers;\n    }\n\n    let mut nums: Vec<usize> = Vec::new();\n\
    \    for word in numbers.split_whitespace() {\n        match word {\n        \
    \    \"zero\" => nums.push(0),\n            \"one\" => nums.push(1),\n       \
    \     \"two\" => nums.push(2),\n            \"three\" => nums.push(3),\n     \
    \       \"four\" => nums.push(4),\n            \"five\" => nums.push(5),\n   \
    \         \"six\" => nums.push(6),\n            \"seven\" => nums.push(7),\n \
    \           \"eight\" => nums.push(8),\n            \"nine\" => nums.push(9),\n\
    \            _ => return String::new(),\n        }\n    }\n\n    nums.sort();\n\
    \n    let mut res = String::new();\n    for num in nums {\n        res.push_str(word_for_number(num).as_str());\n\
    \        res.push(' ');\n    }\n\n    res.pop();\n    res\n}\n\nfn main() {\n\
    \    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"\
    three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `word_for_number` in this scope\n  -->\
    \ /tmp/tmpfppoak3p.rs:30:22\n   |\n30 |         res.push_str(word_for_number(num).as_str());\n\
    \   |                      ^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659821377
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<u32> = numbers\n        .split(' ')\n        .map(|x| match x {\n      \
    \      \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n\
    \            \"three\" => 3,\n            \"four\" => 4,\n            \"five\"\
    \ => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n            \"\
    eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"Invalid input\"\
    ),\n        })\n        .collect();\n    nums.sort();\n    nums.iter()\n     \
    \   .map(|x| match x {\n            0 => \"zero\",\n            1 => \"one\",\n\
    \            2 => \"two\",\n            3 => \"three\",\n            4 => \"four\"\
    ,\n            5 => \"five\",\n            6 => \"six\",\n            7 => \"\
    seven\",\n            8 => \"eight\",\n            9 => \"nine\",\n          \
    \  _ => panic!(\"Invalid input\"),\n        })\n        .collect::<Vec<&str>>()\n\
    \        .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''Invalid input'', /tmp/tmp2r4ki7j_.rs:18:18

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659821377
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<u8> = vec![];\n    let mut num_str: Vec<String> = vec![];\n    for num_str\
    \ in numbers.split_whitespace() {\n        let num = match num_str {\n       \
    \     \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n \
    \           \"three\" => 3,\n            \"four\" => 4,\n            \"five\"\
    \ => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n            \"\
    eight\" => 8,\n            \"nine\" => 9,\n            _ => 0,\n        };\n \
    \       nums.push(num);\n        num_str.push(num_str.to_string());\n    }\n \
    \   nums.sort();\n    let mut sorted_num_str: Vec<String> = vec![];\n    for num\
    \ in nums {\n        sorted_num_str.push(num_str[num as usize].to_string());\n\
    \    }\n    sorted_num_str.join(\" \")\n}\n\nfn main() {\n    let candidate =\
    \ sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `push` found for reference `&str` in the\
    \ current scope\n  --> /tmp/tmpzl9r8j4t.rs:22:17\n   |\n22 |         num_str.push(num_str.to_string());\n\
    \   |                 ^^^^ method not found in `&str`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659821377
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let nums: Vec<_>\
    \ = numbers.split_whitespace().collect();\n    let mut num_strings: Vec<String>\
    \ = Vec::new();\n    for num in nums {\n        num_strings.push(get_numeral(num));\n\
    \    }\n    num_strings.sort();\n    let mut sorted_string = String::new();\n\
    \    for num in num_strings {\n        sorted_string.push_str(&num);\n       \
    \ sorted_string.push(' ');\n    }\n    sorted_string.pop();\n    sorted_string\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `get_numeral` in this scope\n --> /tmp/tmpr50rjz_y.rs:8:26\n\
    \  |\n8 |         num_strings.push(get_numeral(num));\n  |                   \
    \       ^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659821377
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let parse_result\
    \ = parse_numbers(&numbers);\n    let numbers = parse_result.ok().unwrap();\n\
    \    let mut sorted_numbers = numbers.clone();\n    sorted_numbers.sort();\n \
    \   join_numbers(&sorted_numbers)\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `parse_numbers` in this scope\n -->\
    \ /tmp/tmpwrq2fs4z.rs:5:24\n  |\n5 |     let parse_result = parse_numbers(&numbers);\n\
    \  |                        ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `join_numbers` in this scope\n --> /tmp/tmpwrq2fs4z.rs:9:5\n\
    \  |\n9 |     join_numbers(&sorted_numbers)\n  |     ^^^^^^^^^^^^ not found in\
    \ this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659821377
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_vec:\
    \ Vec<String> = numbers.split(\" \").map(|s| s.to_string()).collect();\n    numbers_vec.sort_by(|a,\
    \ b| {\n        let (a_ord, b_ord) = (string_to_ordinal(a), string_to_ordinal(b));\n\
    \        a_ord.cmp(&b_ord)\n    });\n    let sorted_numbers = numbers_vec.join(\"\
    \ \");\n    sorted_numbers\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `string_to_ordinal` in this scope\n\
    \ --> /tmp/tmpf9ipd4tp.rs:7:31\n  |\n7 |         let (a_ord, b_ord) = (string_to_ordinal(a),\
    \ string_to_ordinal(b));\n  |                               ^^^^^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find function `string_to_ordinal`\
    \ in this scope\n --> /tmp/tmpf9ipd4tp.rs:7:53\n  |\n7 |         let (a_ord, b_ord)\
    \ = (string_to_ordinal(a), string_to_ordinal(b));\n  |                       \
    \                              ^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659821377
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut split\
    \ = numbers.split_whitespace();\n    let mut v = Vec::new();\n    for s in split\
    \ {\n        match s {\n            \"zero\" => v.push(0),\n            \"one\"\
    \ => v.push(1),\n            \"two\" => v.push(2),\n            \"three\" => v.push(3),\n\
    \            \"four\" => v.push(4),\n            \"five\" => v.push(5),\n    \
    \        \"six\" => v.push(6),\n            \"seven\" => v.push(7),\n        \
    \    \"eight\" => v.push(8),\n            \"nine\" => v.push(9),\n           \
    \ _ => panic!(\"Invalid string: {}\", s),\n        }\n    }\n    v.sort();\n \
    \   v.iter().map(|x| format!(\"{}\", x)).collect::<Vec<String>>().join(\" \")\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"3\"`,\n right: `\"three\"`', /tmp/tmp2dj909y9.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821377
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_vec:\
    \ Vec<String> = numbers.split_whitespace().map(|s| s.to_string()).collect();\n\
    \    let mut num_to_numeral = HashMap::new();\n    num_to_numeral.insert(0, \"\
    zero\");\n    num_to_numeral.insert(1, \"one\");\n    num_to_numeral.insert(2,\
    \ \"two\");\n    num_to_numeral.insert(3, \"three\");\n    num_to_numeral.insert(4,\
    \ \"four\");\n    num_to_numeral.insert(5, \"five\");\n    num_to_numeral.insert(6,\
    \ \"six\");\n    num_to_numeral.insert(7, \"seven\");\n    num_to_numeral.insert(8,\
    \ \"eight\");\n    num_to_numeral.insert(9, \"nine\");\n\n    let mut numeral_to_num\
    \ = HashMap::new();\n    for (&num, &numeral) in &num_to_numeral {\n        numeral_to_num.insert(numeral,\
    \ num);\n    }\n\n    numbers_vec.sort_by(|a, b| {\n        let x = numeral_to_num.get(a).unwrap();\n\
    \        let y = numeral_to_num.get(b).unwrap();\n        x.cmp(y)\n    });\n\n\
    \    numbers_vec.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmp0sgq58qu.rs:6:30\n  |\n6 |     let mut num_to_numeral = HashMap::new();\n\
    \  |                              ^^^^^^^ not found in this scope\n  |\nhelp:\
    \ consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\
    \nerror[E0433]: failed to resolve: use of undeclared type `HashMap`\n  --> /tmp/tmp0sgq58qu.rs:18:30\n\
    \   |\n18 |     let mut numeral_to_num = HashMap::new();\n   |               \
    \               ^^^^^^^ not found in this scope\n   |\nhelp: consider importing\
    \ this struct\n   |\n1  | use std::collections::HashMap;\n   |\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0433`.\n"
  stdout: ''
  timestamp: 1659821377
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut n_list:\
    \ Vec<String> = numbers.split_whitespace().map(|n| n.to_string()).collect();\n\
    \    n_list.sort_by(|a, b| a.partial_cmp(b).unwrap());\n    let mut res = String::new();\n\
    \    for n in n_list {\n        res.push_str(&n);\n        res.push(' ');\n  \
    \  }\n    res.pop();\n    res\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"five nine three\"`,\n right: `\"three five nine\"`', /tmp/tmpocrlco_9.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821377
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut input:\
    \ Vec<String> = numbers.split_whitespace().map(|x| x.to_string()).collect();\n\
    \    input.sort_by(|a, b| NUMBERS.get(a).unwrap().cmp(NUMBERS.get(b).unwrap()));\n\
    \    input.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `NUMBERS` in this scope\n --> /tmp/tmpubr701ow.rs:6:26\n\
    \  |\n6 |     input.sort_by(|a, b| NUMBERS.get(a).unwrap().cmp(NUMBERS.get(b).unwrap()));\n\
    \  |                          ^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `NUMBERS` in this scope\n --> /tmp/tmpubr701ow.rs:6:54\n \
    \ |\n6 |     input.sort_by(|a, b| NUMBERS.get(a).unwrap().cmp(NUMBERS.get(b).unwrap()));\n\
    \  |                                                      ^^^^^^^ not found in\
    \ this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659821377
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<&str> = numbers.split(' ').collect();\n    numbers.sort_by(|a, b| match\
    \ a {\n        \"zero\" => match b {\n            \"zero\" => std::cmp::Ordering::Equal,\n\
    \            _ => std::cmp::Ordering::Less,\n        },\n        \"one\" => match\
    \ b {\n            \"zero\" => std::cmp::Ordering::Greater,\n            \"one\"\
    \ => std::cmp::Ordering::Equal,\n            _ => std::cmp::Ordering::Less,\n\
    \        },\n        \"two\" => match b {\n            \"zero\" | \"one\" => std::cmp::Ordering::Greater,\n\
    \            \"two\" => std::cmp::Ordering::Equal,\n            _ => std::cmp::Ordering::Less,\n\
    \        },\n        \"three\" => match b {\n            \"zero\" | \"one\" |\
    \ \"two\" => std::cmp::Ordering::Greater,\n            \"three\" => std::cmp::Ordering::Equal,\n\
    \            _ => std::cmp::Ordering::Less,\n        },\n        \"four\" => match\
    \ b {\n            \"zero\" | \"one\" | \"two\" | \"three\" => std::cmp::Ordering::Greater,\n\
    \            \"four\" => std::cmp::Ordering::Equal,\n            _ => std::cmp::Ordering::Less,\n\
    \        },\n        \"five\" => match b {\n            \"zero\" | \"one\" | \"\
    two\" | \"three\" | \"four\" => std::cmp::Ordering::Greater,\n            \"five\"\
    \ => std::cmp::Ordering::Equal,\n            _ => std::cmp::Ordering::Less,\n\
    \        },\n        \"six\" => match b {\n            \"zero\" | \"one\" | \"\
    two\" | \"three\" | \"four\" | \"five\" => std::cmp::Ordering::Greater,\n    \
    \        \"six\" => std::cmp::Ordering::Equal,\n            _ => std::cmp::Ordering::Less,\n\
    \        },\n        \"seven\" => match b {\n            \"zero\" | \"one\" |\
    \ \"two\" | \"three\" | \"four\" | \"five\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0765]: unterminated double quote string\n  --> /tmp/tmp3xufkcmz.rs:51:123\n\
    \   |\n51 |       assert_eq!(candidate(String::from(\"six five four three two\
    \ one zero\")), String::from(\"zero one two three four five six\"));\n   |  ___________________________________________________________________________________________________________________________^\n\
    52 | | }\n   | |__^\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0765`.\n"
  stdout: ''
  timestamp: 1659821377
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut arr: Vec<String>\
    \ = numbers.split_whitespace().map(String::from).collect();\n    arr.sort_by(|a,\
    \ b| a.cmp(b));\n    arr.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"five nine three\"`,\n right: `\"three five nine\"`', /tmp/tmppb306ioi.rs:14:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821377
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    unimplemented!(\"\
    Sort the numbers from smallest to largest from: {}\", numbers);\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented: Sort the numbers from smallest
    to largest from: '', /tmp/tmpdior2wt1.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659821377
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut sorted\
    \ = numbers.split_whitespace().map(|x| numeral_to_u32(x)).collect::<Vec<u32>>();\n\
    \    sorted.sort();\n    sorted.iter().map(|x| u32_to_numeral(*x)).collect::<Vec<&str>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `numeral_to_u32` in this scope\n -->\
    \ /tmp/tmpuwsd9_ur.rs:5:57\n  |\n5 |     let mut sorted = numbers.split_whitespace().map(|x|\
    \ numeral_to_u32(x)).collect::<Vec<u32>>();\n  |                             \
    \                            ^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `u32_to_numeral` in this scope\n --> /tmp/tmpuwsd9_ur.rs:7:27\n\
    \  |\n7 |     sorted.iter().map(|x| u32_to_numeral(*x)).collect::<Vec<&str>>().join(\"\
    \ \")\n  |                           ^^^^^^^^^^^^^^ not found in this scope\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659821377
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<u32> = numbers\n        .split_whitespace()\n        .map(|w| number_to_integer(w))\n\
    \        .collect();\n    numbers.sort();\n    numbers\n        .iter()\n    \
    \    .map(|n| integer_to_number(*n))\n        .collect::<Vec<String>>()\n    \
    \    .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `number_to_integer` in this scope\n\
    \ --> /tmp/tmp3xtwuex3.rs:7:18\n  |\n7 |         .map(|w| number_to_integer(w))\n\
    \  |                  ^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `integer_to_number` in this scope\n  --> /tmp/tmp3xtwuex3.rs:12:18\n\
    \   |\n12 |         .map(|n| integer_to_number(*n))\n   |                  ^^^^^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659821377
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let result: Vec<_>\
    \ = numbers\n        .split_whitespace()\n        .map(|s| s.parse::<u8>().unwrap())\n\
    \        .collect();\n    result.iter().map(|s| s.to_string()).collect::<Vec<String>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Result::unwrap()` on an `Err` value:
    ParseIntError { kind: InvalidDigit }'', /tmp/tmpy1wc_wpk.rs:7:34

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659821377
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<u8> = numbers\n        .split_whitespace()\n        .map(|n| match n {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => 0,\n     \
    \   })\n        .collect();\n    numbers.sort();\n    numbers\n        .iter()\n\
    \        .map(|n| match n {\n            0 => \"zero\",\n            1 => \"one\"\
    ,\n            2 => \"two\",\n            3 => \"three\",\n            4 => \"\
    four\",\n            5 => \"five\",\n            6 => \"six\",\n            7\
    \ => \"seven\",\n            8 => \"eight\",\n            9 => \"nine\",\n   \
    \         _ => \"zero\",\n        })\n        .collect::<Vec<&str>>()\n      \
    \  .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821377
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let n = [\"zero\"\
    , \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\"\
    , \"nine\"];\n    let mut v = numbers.split_whitespace().map(|x| n.iter().position(|&r|\
    \ r == x).unwrap()).collect::<Vec<usize>>();\n    v.sort();\n    v.iter().map(|&x|\
    \ n[x]).collect::<Vec<&str>>().join(\" \")\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821377
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut number_values:\
    \ Vec<u8> = vec![];\n    for number in numbers.split_whitespace() {\n        match\
    \ number {\n            \"zero\" => number_values.push(0),\n            \"one\"\
    \ => number_values.push(1),\n            \"two\" => number_values.push(2),\n \
    \           \"three\" => number_values.push(3),\n            \"four\" => number_values.push(4),\n\
    \            \"five\" => number_values.push(5),\n            \"six\" => number_values.push(6),\n\
    \            \"seven\" => number_values.push(7),\n            \"eight\" => number_values.push(8),\n\
    \            \"nine\" => number_values.push(9),\n            _ => (),\n      \
    \  }\n    }\n    number_values.sort();\n    let mut sorted_numbers: Vec<String>\
    \ = vec![];\n    for number in number_values {\n        match number {\n     \
    \       0 => sorted_numbers.push(\"zero\".to_string()),\n            1 => sorted_numbers.push(\"\
    one\".to_string()),\n            2 => sorted_numbers.push(\"two\".to_string()),\n\
    \            3 => sorted_numbers.push(\"three\".to_string()),\n            4 =>\
    \ sorted_numbers.push(\"four\".to_string()),\n            5 => sorted_numbers.push(\"\
    five\".to_string()),\n            6 => sorted_numbers.push(\"six\".to_string()),\n\
    \            7 => sorted_numbers.push(\"seven\".to_string()),\n            8 =>\
    \ sorted_numbers.push(\"eight\".to_string()),\n            9 => sorted_numbers.push(\"\
    nine\".to_string()),\n            _ => (),\n        }\n    }\n    sorted_numbers.join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821378
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let numbers =\
    \ numbers.split(' ');\n    let mut numbers_int = vec![];\n    for number in numbers\
    \ {\n        let mut number_int = 0;\n        match number {\n            \"zero\"\
    \ => number_int = 0,\n            \"one\" => number_int = 1,\n            \"two\"\
    \ => number_int = 2,\n            \"three\" => number_int = 3,\n            \"\
    four\" => number_int = 4,\n            \"five\" => number_int = 5,\n         \
    \   \"six\" => number_int = 6,\n            \"seven\" => number_int = 7,\n   \
    \         \"eight\" => number_int = 8,\n            \"nine\" => number_int = 9,\n\
    \            _ => number_int = 10,\n        }\n        numbers_int.push(number_int);\n\
    \    }\n    numbers_int.sort();\n    numbers_int.to_string()\n}\n\nfn main() {\n\
    \    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"\
    three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `to_string` exists for struct `Vec<{integer}>`,\
    \ but its trait bounds were not satisfied\n   --> /tmp/tmpu_l_m9f7.rs:25:17\n\
    \    |\n25  |       numbers_int.to_string()\n    |                   ^^^^^^^^^\
    \ method cannot be called on `Vec<{integer}>` due to unsatisfied trait bounds\n\
    \    |\n    = note: the following trait bounds were not satisfied:\n         \
    \   `Vec<{integer}>: std::fmt::Display`\n            which is required by `Vec<{integer}>:\
    \ ToString`\n            `[{integer}]: std::fmt::Display`\n            which is\
    \ required by `[{integer}]: ToString`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659821377
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<i32> = numbers\n        .split_whitespace()\n        .map(|numeral| match\
    \ numeral {\n            \"zero\" => 0,\n            \"one\" => 1,\n         \
    \   \"two\" => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n \
    \           \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" =>\
    \ 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n            _ =>\
    \ panic!(\"Invalid numeral!\"),\n        })\n        .collect();\n    numbers.sort();\n\
    \    numbers\n        .iter()\n        .map(|num| match num {\n            0 =>\
    \ \"zero\",\n            1 => \"one\",\n            2 => \"two\",\n          \
    \  3 => \"three\",\n            4 => \"four\",\n            5 => \"five\",\n \
    \           6 => \"six\",\n            7 => \"seven\",\n            8 => \"eight\"\
    ,\n            9 => \"nine\",\n            _ => panic!(\"Invalid number!\"),\n\
    \        })\n        .collect::<Vec<&str>>()\n        .join(\" \")\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821378
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    // TODO: implement\n\
    \    let mut number_list = vec![];\n    for num in numbers.split_whitespace()\
    \ {\n        match num {\n            \"zero\" => number_list.push(0),\n     \
    \       \"one\" => number_list.push(1),\n            \"two\" => number_list.push(2),\n\
    \            \"three\" => number_list.push(3),\n            \"four\" => number_list.push(4),\n\
    \            \"five\" => number_list.push(5),\n            \"six\" => number_list.push(6),\n\
    \            \"seven\" => number_list.push(7),\n            \"eight\" => number_list.push(8),\n\
    \            \"nine\" => number_list.push(9),\n            _ => {}\n        }\n\
    \    }\n    number_list.sort();\n    let mut number_strings = vec![];\n    for\
    \ num in number_list {\n        match num {\n            0 => number_strings.push(\"\
    zero\"),\n            1 => number_strings.push(\"one\"),\n            2 => number_strings.push(\"\
    two\"),\n            3 => number_strings.push(\"three\"),\n            4 => number_strings.push(\"\
    four\"),\n            5 => number_strings.push(\"five\"),\n            6 => number_strings.push(\"\
    six\"),\n            7 => number_strings.push(\"seven\"),\n            8 => number_strings.push(\"\
    eight\"),\n            9 => number_strings.push(\"nine\"),\n            _ => {}\n\
    \        }\n    }\n    number_strings.join(\" \")\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821378
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<u32> = numbers\n        .split_whitespace()\n        .map(|number| match\
    \ number {\n            \"zero\" => 0,\n            \"one\" => 1,\n          \
    \  \"two\" => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n  \
    \          \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" =>\
    \ 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n            _ =>\
    \ panic!(\"Invalid number\"),\n        })\n        .collect();\n    nums.sort();\n\
    \    let nums: Vec<String> = nums\n        .iter()\n        .map(|number| match\
    \ number {\n            0 => \"zero\",\n            1 => \"one\",\n          \
    \  2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n  \
    \          5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => \"\
    \",\n        })\n        .collect();\n    nums.join(\" \")\n}\n\nfn main() {\n\
    \    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"\
    three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n  --> /tmp/tmp161xmcyg.rs:37:10\n   |\n37 |  \
    \       .collect();\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&str>`\n   |\n   = help: the trait `FromIterator<&str>`\
    \ is not implemented for `Vec<String>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659821377
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut sorted\
    \ = numbers.split(' ').map(|n| word_to_numeral(n.to_string())).collect::<Vec<i32>>();\n\
    \    sorted.sort();\n    sorted.iter().map(|x| numeral_to_word(*x)).collect::<Vec<String>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `word_to_numeral` in this scope\n -->\
    \ /tmp/tmp9rubqqdv.rs:5:49\n  |\n5 |     let mut sorted = numbers.split(' ').map(|n|\
    \ word_to_numeral(n.to_string())).collect::<Vec<i32>>();\n  |                \
    \                                 ^^^^^^^^^^^^^^^ not found in this scope\n\n\
    error[E0425]: cannot find function `numeral_to_word` in this scope\n --> /tmp/tmp9rubqqdv.rs:7:27\n\
    \  |\n7 |     sorted.iter().map(|x| numeral_to_word(*x)).collect::<Vec<String>>().join(\"\
    \ \")\n  |                           ^^^^^^^^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659821377
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut nums =\
    \ numbers.split_whitespace()\n        .map(|s| match s {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => 0,\n        })\n        .collect::<Vec<i32>>();\n\
    \    nums.sort();\n    nums.iter()\n        .map(|num| match num {\n         \
    \   0 => \"zero\",\n            1 => \"one\",\n            2 => \"two\",\n   \
    \         3 => \"three\",\n            4 => \"four\",\n            5 => \"five\"\
    ,\n            6 => \"six\",\n            7 => \"seven\",\n            8 => \"\
    eight\",\n            9 => \"nine\",\n            _ => \"\",\n        })\n   \
    \     .collect::<Vec<&str>>()\n        .join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821378
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut map: HashMap<&str,\
    \ i8> = HashMap::new();\n    map.insert(\"zero\", 0);\n    map.insert(\"one\"\
    , 1);\n    map.insert(\"two\", 2);\n    map.insert(\"three\", 3);\n    map.insert(\"\
    four\", 4);\n    map.insert(\"five\", 5);\n    map.insert(\"six\", 6);\n    map.insert(\"\
    seven\", 7);\n    map.insert(\"eight\", 8);\n    map.insert(\"nine\", 9);\n\n\
    \    let mut sorted_numbers: Vec<i8> = vec![];\n    for word in numbers.split_whitespace()\
    \ {\n        sorted_numbers.push(map.get(word).unwrap().clone());\n    }\n   \
    \ sorted_numbers.sort();\n\n    let mut sorted_string = String::new();\n    for\
    \ i in sorted_numbers {\n        let number = if i == 0 {\n            \"zero\"\
    \n        } else if i == 1 {\n            \"one\"\n        } else if i == 2 {\n\
    \            \"two\"\n        } else if i == 3 {\n            \"three\"\n    \
    \    } else if i == 4 {\n            \"four\"\n        } else if i == 5 {\n  \
    \          \"five\"\n        } else if i == 6 {\n            \"six\"\n       \
    \ } else if i == 7 {\n            \"seven\"\n        } else if i == 8 {\n    \
    \        \"eight\"\n        } else {\n            \"nine\"\n        };\n     \
    \   sorted_string.push_str(number);\n        sorted_string.push(' ');\n    }\n\
    \    sorted_string.pop();\n    sorted_string\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashMap` in this scope\n --> /tmp/tmpm_ll4x__.rs:5:18\n\
    \  |\n5 |     let mut map: HashMap<&str, i8> = HashMap::new();\n  |          \
    \        ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n\
    \  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `HashMap`\n --> /tmp/tmpm_ll4x__.rs:5:38\n  |\n5 |  \
    \   let mut map: HashMap<&str, i8> = HashMap::new();\n  |                    \
    \                  ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\n\
    For more information about an error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659821377
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<u32> = vec![];\n    let valid_numbers = vec![\"zero\", \"one\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"];\n \
    \   for number in numbers.split_whitespace() {\n        if valid_numbers.contains(&number)\
    \ {\n            nums.push(valid_numbers.iter().position(|&n| n == number).unwrap()\
    \ as u32);\n        }\n    }\n    nums.sort();\n    nums.iter().map(|n| valid_numbers[*n\
    \ as usize]).collect::<Vec<&str>>().join(\" \")\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821378
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut split\
    \ = numbers.split_whitespace();\n    let mut sorted = split.collect::<Vec<&str>>();\n\
    \    sorted.sort();\n    sorted.join(\" \")\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"five nine three\"`,\n right: `\"three five nine\"`', /tmp/tmpw_xi3x4d.rs:15:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821378
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<i32> = numbers\n        .split_whitespace()\n        .map(|s| match s {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    invalid numberal: {}\", s),\n        })\n        .collect();\n    nums.sort();\n\
    \    nums.iter()\n        .map(|i| match i {\n            0 => \"zero\",\n   \
    \         1 => \"one\",\n            2 => \"two\",\n            3 => \"three\"\
    ,\n            4 => \"four\",\n            5 => \"five\",\n            6 => \"\
    six\",\n            7 => \"seven\",\n            8 => \"eight\",\n           \
    \ 9 => \"nine\",\n            _ => panic!(\"invalid numberal: {}\", i),\n    \
    \    })\n        .collect::<Vec<&str>>()\n        .join(\" \")\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821378
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    unimplemented!(\"\
    Sort {} in order of increasing value.\", numbers);\n}\n\nfn main() {\n    let\
    \ candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented: Sort  in order of increasing
    value.'', /tmp/tmpir8jshan.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659821378
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<u32> = Vec::new();\n    let mut words: Vec<String> = Vec::new();\n    let\
    \ nums_vector: Vec<&str> = numbers.split(\" \").collect();\n    let mut numbers_sorted:\
    \ Vec<String> = Vec::new();\n\n    for number in nums_vector {\n        match\
    \ number {\n            \"zero\" => {\n                nums.push(0);\n       \
    \         words.push(number.to_string());\n            }\n            \"one\"\
    \ => {\n                nums.push(1);\n                words.push(number.to_string());\n\
    \            }\n            \"two\" => {\n                nums.push(2);\n    \
    \            words.push(number.to_string());\n            }\n            \"three\"\
    \ => {\n                nums.push(3);\n                words.push(number.to_string());\n\
    \            }\n            \"four\" => {\n                nums.push(4);\n   \
    \             words.push(number.to_string());\n            }\n            \"five\"\
    \ => {\n                nums.push(5);\n                words.push(number.to_string());\n\
    \            }\n            \"six\" => {\n                nums.push(6);\n    \
    \            words.push(number.to_string());\n            }\n            \"seven\"\
    \ => {\n                nums.push(7);\n                words.push(number.to_string());\n\
    \            }\n            \"eight\" => {\n                nums.push(8);\n  \
    \              words.push(number.to_string());\n            }\n            \"\
    nine\" => {\n                nums.push(9);\n                words.push(number.to_string());\n\
    \            }\n            _ => println!(\"Unrecognized number: {}\", number),\n\
    \        }\n    }\n\n    nums.sort();\n\n    for number in nums {\n        for\
    \ i in 0..words.len() {\n            match number {\n                0 => {\n\
    \                    if words[i] == \"zero\" {\n                        numbers_sorted.push(words[i].to_string());\n\
    \                    }\n                }\n                1 => {\n          \
    \          if words[i] == \"one\" {\n                        numbers_\n}\n\nfn\
    \ main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpn_ng4yre.rs:78:3\n\
    \   |\n4  | fn sort_numbers(numbers: String) -> String {\n   |               \
    \                             - unclosed delimiter\n...\n58 |     for number in\
    \ nums {\n   |                        - unclosed delimiter\n59 |         for i\
    \ in 0..words.len() {\n   |                                 - unclosed delimiter\n\
    60 |             match number {\n   |                          - unclosed delimiter\n\
    ...\n66 |                 1 => {\n   |                      - unclosed delimiter\n\
    67 |                     if words[i] == \"one\" {\n   |                      \
    \                    - this delimiter might not be properly closed...\n68 |  \
    \                       numbers_\n69 | }\n   | - ...as it matches this but it\
    \ has different indentation\n...\n78 | }\n   |   ^\n\nerror[E0425]: cannot find\
    \ value `numbers_` in this scope\n  --> /tmp/tmpn_ng4yre.rs:68:25\n   |\n68 |\
    \                         numbers_\n   |                         ^^^^^^^^ help:\
    \ a local variable with a similar name exists: `numbers`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpn_ng4yre.rs:58:5\n   |\n4  |   fn sort_numbers(numbers:\
    \ String) -> String {\n   |                                       ------ expected\
    \ `String` because of return type\n...\n58 | /     for number in nums {\n59 |\
    \ |         for i in 0..words.len() {\n60 | |             match number {\n61 |\
    \ |                 0 => {\n...  |\n77 | |     assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n78 | | }\n   | |__^ expected struct `String`, found `()`\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659821378
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<i32> = numbers\n        .split(' ')\n        .map(|n| {\n            match\
    \ n {\n                \"zero\" => 0,\n                \"one\" => 1,\n       \
    \         \"two\" => 2,\n                \"three\" => 3,\n                \"four\"\
    \ => 4,\n                \"five\" => 5,\n                \"six\" => 6,\n     \
    \           \"seven\" => 7,\n                \"eight\" => 8,\n               \
    \ \"nine\" => 9,\n                _ => 0,\n            }\n        })\n       \
    \ .collect();\n    numbers.sort();\n    format!(\n        \"{} {} {} {} {} {}\
    \ {} {} {} {}\",\n        match numbers[0] {\n            0 => \"zero\",\n   \
    \         1 => \"one\",\n            2 => \"two\",\n            3 => \"three\"\
    ,\n            4 => \"four\",\n            5 => \"five\",\n            6 => \"\
    six\",\n            7 => \"seven\",\n            8 => \"eight\",\n           \
    \ 9 => \"nine\",\n            _ => \"\",\n        },\n        match numbers[1]\
    \ {\n            0 => \"zero\",\n            1 => \"one\",\n            2 => \"\
    two\",\n            3 => \"three\",\n            4 => \"four\",\n            5\
    \ => \"five\",\n            6 => \"six\",\n            7 => \"seven\",\n     \
    \       8 => \"eight\",\n            9 => \"nine\",\n            _ => \"\",\n\
    \        },\n        match numbers[2] {\n            0 => \"zero\",\n        \
    \    1 => \"one\",\n            2 => \"two\",\n            3 => \"three\",\n \
    \           4 => \"four\",\n            5 => \"five\",\n            6 => \"six\"\
    ,\n            7 => \"seven\",\n            8 => \"eight\",\n            9 =>\
    \ \"nine\",\n            _ => \"\",\n        },\n        match numbers[3] {\n\
    \            0 => \"zero\",\n            1 => \"one\",\n            2 => \"two\"\
    ,\n            3 => \"three\",\n            4 => \"four\",\n            5 => \"\
    five\",\n            6 => \"six\",\n            7 => \"seven\",\n            8\
    \ => \"eight\",\n            9 => \"nine\",\n            _ => \"\",\n        },\n\
    \        match numbers[4] {\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp8synvbj9.rs:88:3\n\
    \   |\n4  | fn sort_numbers(numbers: String) -> String {\n   |               \
    \                             - unclosed delimiter\n...\n24 |     format!(\n \
    \  |            - unclosed delimiter\n...\n88 | }\n   |   ^\n\nerror: expected\
    \ one of `,`, `.`, `?`, or an operator, found keyword `fn`\n  --> /tmp/tmp8synvbj9.rs:81:1\n\
    \   |\n79 | }\n   |  - expected one of `,`, `.`, `?`, or an operator\n80 | \n\
    81 | fn main() {\n   | ^^ unexpected token\n\nerror: aborting due to 2 previous\
    \ errors\n\n"
  stdout: ''
  timestamp: 1659821377
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    unimplemented!(\"\
    Sort the numbers in a string from least to greatest\");\n}\n\nfn main() {\n  \
    \  let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"\
    three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented: Sort the numbers in a string
    from least to greatest'', /tmp/tmpcv06m2ab.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659821378
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let num_order\
    \ = [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\"];\n    let mut vec: Vec<&str> = numbers.split_whitespace().collect();\n\
    \    vec.sort_by(|a, b| num_order.iter().position(|&c| c == a).cmp(&num_order.iter().position(|&c|\
    \ c == b)));\n    vec.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `str` with `&str`\n --> /tmp/tmp91k6t567.rs:7:57\n\
    \  |\n7 |     vec.sort_by(|a, b| num_order.iter().position(|&c| c == a).cmp(&num_order.iter().position(|&c|\
    \ c == b)));\n  |                                                         ^^ no\
    \ implementation for `str == &str`\n  |\n  = help: the trait `PartialEq<&str>`\
    \ is not implemented for `str`\n  = note: required because of the requirements\
    \ on the impl of `PartialEq<&&str>` for `&str`\n\nerror[E0277]: can't compare\
    \ `str` with `&str`\n --> /tmp/tmp91k6t567.rs:7:101\n  |\n7 |     vec.sort_by(|a,\
    \ b| num_order.iter().position(|&c| c == a).cmp(&num_order.iter().position(|&c|\
    \ c == b)));\n  |                                                            \
    \                                         ^^ no implementation for `str == &str`\n\
    \  |\n  = help: the trait `PartialEq<&str>` is not implemented for `str`\n  =\
    \ note: required because of the requirements on the impl of `PartialEq<&&str>`\
    \ for `&str`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659821378
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut nums =\
    \ numbers.split(' ').map(|n| translate_numeral(n)).collect::<Vec<i32>>();\n  \
    \  nums.sort();\n    nums.iter().map(|n| translate_numeral_to_string(*n)).collect::<Vec<String>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `translate_numeral` in this scope\n\
    \ --> /tmp/tmp9ysq1p0j.rs:5:47\n  |\n5 |     let mut nums = numbers.split(' ').map(|n|\
    \ translate_numeral(n)).collect::<Vec<i32>>();\n  |                          \
    \                     ^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `translate_numeral_to_string` in this scope\n --> /tmp/tmp9ysq1p0j.rs:7:25\n\
    \  |\n7 |     nums.iter().map(|n| translate_numeral_to_string(*n)).collect::<Vec<String>>().join(\"\
    \ \")\n  |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659821378
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut nums =\
    \ numbers.split_whitespace().map(|n| number_to_numeral(n)).collect::<Vec<_>>();\n\
    \    nums.sort();\n    nums.iter().map(|&n| numeral_to_number(n)).collect::<Vec<_>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `number_to_numeral` in this scope\n\
    \ --> /tmp/tmpxx01q34s.rs:5:55\n  |\n5 |     let mut nums = numbers.split_whitespace().map(|n|\
    \ number_to_numeral(n)).collect::<Vec<_>>();\n  |                            \
    \                           ^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `numeral_to_number` in this scope\n --> /tmp/tmpxx01q34s.rs:7:26\n\
    \  |\n7 |     nums.iter().map(|&n| numeral_to_number(n)).collect::<Vec<_>>().join(\"\
    \ \")\n  |                          ^^^^^^^^^^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659821378
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<&str> = numbers.split_whitespace().collect();\n    numbers.sort_by(|a, b|\
    \ get_number(a).cmp(&get_number(b)));\n    numbers.join(\" \")\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `get_number` in this scope\n --> /tmp/tmp2vy2tapa.rs:6:28\n\
    \  |\n6 |     numbers.sort_by(|a, b| get_number(a).cmp(&get_number(b)));\n  |\
    \                            ^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `get_number` in this scope\n --> /tmp/tmp2vy2tapa.rs:6:47\n\
    \  |\n6 |     numbers.sort_by(|a, b| get_number(a).cmp(&get_number(b)));\n  |\
    \                                               ^^^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659821378
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut sorted_numbers:\
    \ Vec<i32> = numbers\n        .split_whitespace()\n        .map(|s| match s {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid number {}!\", s),\n        })\n        .collect();\n    sorted_numbers.sort();\n\
    \    sorted_numbers\n        .iter()\n        .map(|x| match x {\n           \
    \ 0 => \"zero\",\n            1 => \"one\",\n            2 => \"two\",\n     \
    \       3 => \"three\",\n            4 => \"four\",\n            5 => \"five\"\
    ,\n            6 => \"six\",\n            7 => \"seven\",\n            8 => \"\
    eight\",\n            9 => \"nine\",\n            _ => panic!(\"Invalid number\
    \ {}!\", x),\n        })\n        .collect::<Vec<&str>>()\n        .join(\" \"\
    )\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821378
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let numbers: Vec<u32>\
    \ =\n        numbers\n            .split(' ')\n            .map(|num| {\n    \
    \            match num {\n                    \"zero\" => 0,\n               \
    \     \"one\" => 1,\n                    \"two\" => 2,\n                    \"\
    three\" => 3,\n                    \"four\" => 4,\n                    \"five\"\
    \ => 5,\n                    \"six\" => 6,\n                    \"seven\" => 7,\n\
    \                    \"eight\" => 8,\n                    \"nine\" => 9,\n   \
    \                 _ => unreachable!(),\n                }\n            })\n  \
    \          .collect();\n\n    format!(\n        \"{} {} {} {} {} {} {} {} {} {}\"\
    ,\n        numbers[0],\n        numbers[1],\n        numbers[2],\n        numbers[3],\n\
    \        numbers[4],\n        numbers[5],\n        numbers[6],\n        numbers[7],\n\
    \        numbers[8],\n        numbers[9]\n    )\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''internal error: entered unreachable code'',
    /tmp/tmppuw50m7k.rs:20:26

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659821378
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let result: Vec<_>\
    \ = numbers\n        .split_whitespace()\n        .map(String::from)\n       \
    \ .map(|s| {\n            match s.as_str() {\n                \"zero\" => \"0\"\
    ,\n                \"one\" => \"1\",\n                \"two\" => \"2\",\n    \
    \            \"three\" => \"3\",\n                \"four\" => \"4\",\n       \
    \         \"five\" => \"5\",\n                \"six\" => \"6\",\n            \
    \    \"seven\" => \"7\",\n                \"eight\" => \"8\",\n              \
    \  \"nine\" => \"9\",\n                _ => \"\",\n            }\n        })\n\
    \        .filter(|s| !s.is_empty())\n        .collect();\n    result.sort();\n\
    \    result.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0596]: cannot borrow `result` as mutable, as it is not declared\
    \ as mutable\n  --> /tmp/tmplf46jmtt.rs:25:5\n   |\n5  |     let result: Vec<_>\
    \ = numbers\n   |         ------ help: consider changing this to be mutable: `mut\
    \ result`\n...\n25 |     result.sort();\n   |     ^^^^^^ cannot borrow as mutable\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0596`.\n"
  stdout: ''
  timestamp: 1659821378
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let numbers: Vec<&str>\
    \ = numbers.split_whitespace().collect();\n    let numbers: Vec<i32> = numbers.iter().map(|&x|\
    \ digit_to_int(x)).collect();\n    let numbers: Vec<&str> = numbers.iter().map(|&x|\
    \ int_to_digit(x)).collect();\n    let numbers: Vec<String> = numbers.iter().map(|&x|\
    \ x.to_string()).collect();\n    numbers.join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `digit_to_int` in this scope\n --> /tmp/tmpkeykmnfb.rs:6:53\n\
    \  |\n6 |     let numbers: Vec<i32> = numbers.iter().map(|&x| digit_to_int(x)).collect();\n\
    \  |                                                     ^^^^^^^^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find function `int_to_digit` in this scope\n\
    \ --> /tmp/tmpkeykmnfb.rs:7:54\n  |\n7 |     let numbers: Vec<&str> = numbers.iter().map(|&x|\
    \ int_to_digit(x)).collect();\n  |                                           \
    \           ^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659821378
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let numbers: Vec<_>\
    \ = numbers.split(' ').collect();\n    let mut map = std::collections::HashMap::new();\n\
    \    map.insert(\"zero\", 0);\n    map.insert(\"one\", 1);\n    map.insert(\"\
    two\", 2);\n    map.insert(\"three\", 3);\n    map.insert(\"four\", 4);\n    map.insert(\"\
    five\", 5);\n    map.insert(\"six\", 6);\n    map.insert(\"seven\", 7);\n    map.insert(\"\
    eight\", 8);\n    map.insert(\"nine\", 9);\n    let mut numbers: Vec<_> = numbers\n\
    \        .iter()\n        .map(|n| map.get(n).unwrap().to_string())\n        .collect();\n\
    \    numbers.sort();\n    numbers.join(\" \")\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmp5bo4i6v9.rs:19:29

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659821378
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    // TODO: implement\
    \ this function!\n    \"\".to_string()\n}\n\nfn main() {\n    let candidate =\
    \ sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"three\"`', /tmp/tmpyh39cd58.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821378
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut map =\
    \ HashMap::new();\n    map.insert(\"zero\", 0);\n    map.insert(\"one\", 1);\n\
    \    map.insert(\"two\", 2);\n    map.insert(\"three\", 3);\n    map.insert(\"\
    four\", 4);\n    map.insert(\"five\", 5);\n    map.insert(\"six\", 6);\n    map.insert(\"\
    seven\", 7);\n    map.insert(\"eight\", 8);\n    map.insert(\"nine\", 9);\n\n\
    \    let result = numbers\n        .split(\" \")\n        .map(|num| map.get(num).unwrap())\n\
    \        .collect::<Vec<&i32>>();\n\n    result.sort();\n\n    let mut iter =\
    \ result.iter();\n    let first = *iter.next().unwrap();\n    iter.fold(String::from(\"\
    \"), |acc, num| acc + &format!(\"{} \", num)) + &first.to_string()\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmpp8sqlj8w.rs:5:19\n  |\n5 |     let mut map = HashMap::new();\n  |  \
    \                 ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659821378
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    numbers\n    \
    \    .split_whitespace()\n        .map(|x| match x {\n            \"zero\" =>\
    \ 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"three\"\
    \ => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n            \"\
    six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n      \
    \      \"nine\" => 9,\n            _ => 0,\n        })\n        .collect::<Vec<i8>>()\n\
    \        .iter()\n        .cloned()\n        .sorted()\n        .map(|x| match\
    \ x {\n            0 => \"zero\",\n            1 => \"one\",\n            2 =>\
    \ \"two\",\n            3 => \"three\",\n            4 => \"four\",\n        \
    \    5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\",\n\
    \            8 => \"eight\",\n            9 => \"nine\",\n            _ => \"\"\
    ,\n        })\n        .collect::<Vec<&str>>()\n        .join(\" \")\n}\n\nfn\
    \ main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted` found for struct `Cloned` in the\
    \ current scope\n  --> /tmp/tmp05w0wo8s.rs:23:10\n   |\n23 |         .sorted()\n\
    \   |          ^^^^^^ method not found in `Cloned<std::slice::Iter<'_, i8>>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659821378
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut res: Vec<usize>\
    \ = Vec::new();\n    let splitted: Vec<&str> = numbers.split_whitespace().collect();\n\
    \    for i in splitted {\n        match i {\n            \"zero\" => res.push(0),\n\
    \            \"one\" => res.push(1),\n            \"two\" => res.push(2),\n  \
    \          \"three\" => res.push(3),\n            \"four\" => res.push(4),\n \
    \           \"five\" => res.push(5),\n            \"six\" => res.push(6),\n  \
    \          \"seven\" => res.push(7),\n            \"eight\" => res.push(8),\n\
    \            \"nine\" => res.push(9),\n            _ => continue,\n        }\n\
    \    }\n    res.sort();\n    let mut result = String::new();\n    for j in res\
    \ {\n        match j {\n            0 => result.push_str(\"zero \"),\n       \
    \     1 => result.push_str(\"one \"),\n            2 => result.push_str(\"two\
    \ \"),\n            3 => result.push_str(\"three \"),\n            4 => result.push_str(\"\
    four \"),\n            5 => result.push_str(\"five \"),\n            6 => result.push_str(\"\
    six \"),\n            7 => result.push_str(\"seven \"),\n            8 => result.push_str(\"\
    eight \"),\n            9 => result.push_str(\"nine \"),\n            _ => continue,\n\
    \        }\n    }\n    let sub = \" \".to_string();\n    result.trim_end_matches(&sub).to_string()\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821378
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut nums =\
    \ vec![];\n    for num in numbers.split(' ') {\n        match num {\n        \
    \    \"zero\" => nums.push(0),\n            \"one\" => nums.push(1),\n       \
    \     \"two\" => nums.push(2),\n            \"three\" => nums.push(3),\n     \
    \       \"four\" => nums.push(4),\n            \"five\" => nums.push(5),\n   \
    \         \"six\" => nums.push(6),\n            \"seven\" => nums.push(7),\n \
    \           \"eight\" => nums.push(8),\n            \"nine\" => nums.push(9),\n\
    \            _ => println!(\"invalid input\"),\n        }\n    }\n    nums.sort();\n\
    \    let mut out = \"\".to_string();\n    for num in nums {\n        match num\
    \ {\n            0 => out.push_str(\"zero \"),\n            1 => out.push_str(\"\
    one \"),\n            2 => out.push_str(\"two \"),\n            3 => out.push_str(\"\
    three \"),\n            4 => out.push_str(\"four \"),\n            5 => out.push_str(\"\
    five \"),\n            6 => out.push_str(\"six \"),\n            7 => out.push_str(\"\
    seven \"),\n            8 => out.push_str(\"eight \"),\n            9 => out.push_str(\"\
    nine \"),\n            _ => println!(\"invalid input\"),\n        }\n    }\n \
    \   out\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"three \"`,\n right: `\"three\"`', /tmp/tmpke6aazf4.rs:44:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: 'invalid input

    '
  timestamp: 1659821378
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<u32> = Vec::new();\n    for number in numbers.split(\" \") {\n        match\
    \ number {\n            \"zero\" => nums.push(0),\n            \"one\" => nums.push(1),\n\
    \            \"two\" => nums.push(2),\n            \"three\" => nums.push(3),\n\
    \            \"four\" => nums.push(4),\n            \"five\" => nums.push(5),\n\
    \            \"six\" => nums.push(6),\n            \"seven\" => nums.push(7),\n\
    \            \"eight\" => nums.push(8),\n            \"nine\" => nums.push(9),\n\
    \            _ => unreachable!(),\n        }\n    }\n    let mut out = nums.clone();\n\
    \    out.sort();\n    let mut out_str = String::new();\n    for num in out {\n\
    \        out_str.push_str(num_to_str(num));\n        out_str.push(' ');\n    }\n\
    \    out_str.pop();\n    out_str\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `num_to_str` in this scope\n  --> /tmp/tmpa5esq92n.rs:25:26\n\
    \   |\n25 |         out_str.push_str(num_to_str(num));\n   |                 \
    \         ^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659821378
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    // Update this\
    \ function to return the correct output!\n    unimplemented!();\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpb60bcowr.rs:6:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659821378
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut ret: Vec<&str>\
    \ = numbers.split_whitespace().collect();\n    ret.sort_by(|a, b| match (a, b)\
    \ {\n        (\"zero\", \"zero\") => std::cmp::Ordering::Equal,\n        (\"zero\"\
    , _) => std::cmp::Ordering::Less,\n        (_, \"zero\") => std::cmp::Ordering::Greater,\n\
    \        (\"one\", \"one\") => std::cmp::Ordering::Equal,\n        (\"one\", _)\
    \ => std::cmp::Ordering::Less,\n        (_, \"one\") => std::cmp::Ordering::Greater,\n\
    \        (\"two\", \"two\") => std::cmp::Ordering::Equal,\n        (\"two\", _)\
    \ => std::cmp::Ordering::Less,\n        (_, \"two\") => std::cmp::Ordering::Greater,\n\
    \        (\"three\", \"three\") => std::cmp::Ordering::Equal,\n        (\"three\"\
    , _) => std::cmp::Ordering::Less,\n        (_, \"three\") => std::cmp::Ordering::Greater,\n\
    \        (\"four\", \"four\") => std::cmp::Ordering::Equal,\n        (\"four\"\
    , _) => std::cmp::Ordering::Less,\n        (_, \"four\") => std::cmp::Ordering::Greater,\n\
    \        (\"five\", \"five\") => std::cmp::Ordering::Equal,\n        (\"five\"\
    , _) => std::cmp::Ordering::Less,\n        (_, \"five\") => std::cmp::Ordering::Greater,\n\
    \        (\"six\", \"six\") => std::cmp::Ordering::Equal,\n        (\"six\", _)\
    \ => std::cmp::Ordering::Less,\n        (_, \"six\") => std::cmp::Ordering::Greater,\n\
    \        (\"seven\", \"seven\") => std::cmp::Ordering::Equal,\n        (\"seven\"\
    , _) => std::cmp::Ordering::Less,\n        (_, \"seven\") => std::cmp::Ordering::Greater,\n\
    \        (\"eight\", \"eight\") => std::cmp::Ordering::Equal,\n        (\"eight\"\
    , _) => std::cmp::Ordering::Less,\n       \n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpmdbjb091.rs:43:3\n\
    \   |\n4  | fn sort_numbers(numbers: String) -> String {\n   |               \
    \                             - unclosed delimiter\n5  |     let mut ret: Vec<&str>\
    \ = numbers.split_whitespace().collect();\n6  |     ret.sort_by(|a, b| match (a,\
    \ b) {\n   |                - unclosed delimiter\n...\n43 | }\n   |   ^\n\nerror:\
    \ expected one of `)`, `,`, `.`, `?`, or an operator, found keyword `fn`\n  -->\
    \ /tmp/tmpmdbjb091.rs:36:1\n   |\n34 | }\n   |  - expected one of `)`, `,`, `.`,\
    \ `?`, or an operator\n35 | \n36 | fn main() {\n   | ^^ unexpected token\n\nerror:\
    \ aborting due to 2 previous errors\n\n"
  stdout: ''
  timestamp: 1659821378
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let num_list:\
    \ Vec<usize> = numbers\n        .split_whitespace()\n        .map(|x| {\n    \
    \        match x {\n                \"zero\" => 0,\n                \"one\" =>\
    \ 1,\n                \"two\" => 2,\n                \"three\" => 3,\n       \
    \         \"four\" => 4,\n                \"five\" => 5,\n                \"six\"\
    \ => 6,\n                \"seven\" => 7,\n                \"eight\" => 8,\n  \
    \              \"nine\" => 9,\n                _ => panic!(\"Invalid input\"),\n\
    \            }\n        })\n        .collect();\n\n    let mut num_list_sorted\
    \ = num_list.clone();\n    num_list_sorted.sort();\n\n    let mut output: Vec<String>\
    \ = Vec::new();\n    for num in num_list_sorted {\n        match num {\n     \
    \       0 => output.push(\"zero\".to_string()),\n            1 => output.push(\"\
    one\".to_string()),\n            2 => output.push(\"two\".to_string()),\n    \
    \        3 => output.push(\"three\".to_string()),\n            4 => output.push(\"\
    four\".to_string()),\n            5 => output.push(\"five\".to_string()),\n  \
    \          6 => output.push(\"six\".to_string()),\n            7 => output.push(\"\
    seven\".to_string()),\n            8 => output.push(\"eight\".to_string()),\n\
    \            9 => output.push(\"nine\".to_string()),\n            _ => panic!(\"\
    Invalid input\"),\n        }\n    }\n\n    output.join(\" \")\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821378
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    numbers\n    \
    \    .split_whitespace()\n        .collect::<Vec<&str>>()\n        .sort_by(|x,\
    \ y| {\n            let nums = [\"zero\", \"one\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\", \"seven\", \"eight\", \"nine\"];\n            let x = nums.iter().position(|&num|\
    \ num == x).unwrap();\n            let y = nums.iter().position(|&num| num ==\
    \ y).unwrap();\n            x.cmp(&y)\n        })\n        .join(\" \")\n}\n\n\
    fn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `str` with `&str`\n  --> /tmp/tmprka2fja8.rs:10:53\n\
    \   |\n10 |             let x = nums.iter().position(|&num| num == x).unwrap();\n\
    \   |                                                     ^^ no implementation\
    \ for `str == &str`\n   |\n   = help: the trait `PartialEq<&str>` is not implemented\
    \ for `str`\n   = note: required because of the requirements on the impl of `PartialEq<&&str>`\
    \ for `&str`\n\nerror[E0277]: can't compare `str` with `&str`\n  --> /tmp/tmprka2fja8.rs:11:53\n\
    \   |\n11 |             let y = nums.iter().position(|&num| num == y).unwrap();\n\
    \   |                                                     ^^ no implementation\
    \ for `str == &str`\n   |\n   = help: the trait `PartialEq<&str>` is not implemented\
    \ for `str`\n   = note: required because of the requirements on the impl of `PartialEq<&&str>`\
    \ for `&str`\n\nerror[E0599]: no method named `join` found for unit type `()`\
    \ in the current scope\n  --> /tmp/tmprka2fja8.rs:14:10\n   |\n14 |         .join(\"\
    \ \")\n   |          ^^^^ method not found in `()`\n\nerror: aborting due to 3\
    \ previous errors\n\nSome errors have detailed explanations: E0277, E0599.\nFor\
    \ more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659821378
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    numbers\n    \
    \    .split_whitespace()\n        .map(|n| match n {\n            \"zero\" =>\
    \ 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"three\"\
    \ => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n            \"\
    six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n      \
    \      \"nine\" => 9,\n            _ => panic!(\"invalid input\"),\n        })\n\
    \        .sorted()\n        .map(|n| match n {\n            0 => \"zero\",\n \
    \           1 => \"one\",\n            2 => \"two\",\n            3 => \"three\"\
    ,\n            4 => \"four\",\n            5 => \"five\",\n            6 => \"\
    six\",\n            7 => \"seven\",\n            8 => \"eight\",\n           \
    \ 9 => \"nine\",\n            _ => panic!(\"invalid input\"),\n        })\n  \
    \      .collect::<Vec<&str>>()\n        .join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted` found for struct `Map` in the current\
    \ scope\n  --> /tmp/tmplnbeuyyh.rs:20:10\n   |\n20 |         .sorted()\n   | \
    \         ^^^^^^ method not found in `Map<SplitWhitespace<'_>, [closure@/tmp/tmplnbeuyyh.rs:7:14:\
    \ 19:10]>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659821378
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut v = numbers.split_whitespace().map(|n|\
    \ {\n        match n {\n            \"zero\" => 0,\n            \"one\" => 1,\n\
    \            \"two\" => 2,\n            \"three\" => 3,\n            \"four\"\
    \ => 4,\n            \"five\" => 5,\n            \"six\" => 6,\n            \"\
    seven\" => 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n     \
    \       _ => 0,\n        }\n    }).collect::<Vec<_>>();\n    v.sort();\n    v.iter().map(|n|\
    \ match n {\n        0 => \"zero\",\n        1 => \"one\",\n        2 => \"two\"\
    ,\n        3 => \"three\",\n        4 => \"four\",\n        5 => \"five\",\n \
    \       6 => \"six\",\n        7 => \"seven\",\n        8 => \"eight\",\n    \
    \    9 => \"nine\",\n        _ => \"\",\n    }).collect::<Vec<_>>().join(\" \"\
    )\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821378
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut ints:\
    \ Vec<u32> = numbers\n        .split_whitespace()\n        .map(|numeral| {\n\
    \            match numeral {\n                \"zero\" => 0,\n               \
    \ \"one\" => 1,\n                \"two\" => 2,\n                \"three\" => 3,\n\
    \                \"four\" => 4,\n                \"five\" => 5,\n            \
    \    \"six\" => 6,\n                \"seven\" => 7,\n                \"eight\"\
    \ => 8,\n                \"nine\" => 9,\n                _ => 0,\n           \
    \ }\n        })\n        .collect();\n    ints.sort();\n    let mut strs: Vec<String>\
    \ = ints\n        .iter()\n        .map(|num| {\n            match num {\n   \
    \             0 => \"zero\",\n                1 => \"one\",\n                2\
    \ => \"two\",\n                3 => \"three\",\n                4 => \"four\"\
    ,\n                5 => \"five\",\n                6 => \"six\",\n           \
    \     7 => \"seven\",\n                8 => \"eight\",\n                9 => \"\
    nine\",\n                _ => \"zero\",\n            }\n        })\n        .map(|s|\
    \ s.to_string())\n        .collect();\n    strs.join(\" \")\n}\n\nfn main() {\n\
    \    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"\
    three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821378
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    numbers\n    \
    \    .split_whitespace()\n        .map(digit)\n        .filter_map(identity)\n\
    \        .map(|d| d.to_string())\n        .collect::<Vec<String>>()\n        .join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `digit` in this scope\n --> /tmp/tmpzcg2dmrq.rs:7:14\n\
    \  |\n7 |         .map(digit)\n  |              ^^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find value `identity` in this scope\n --> /tmp/tmpzcg2dmrq.rs:8:21\n\
    \  |\n8 |         .filter_map(identity)\n  |                     ^^^^^^^^ not\
    \ found in this scope\n  |\nhelp: consider importing this function\n  |\n1 | use\
    \ std::convert::identity;\n  |\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659821378
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_vec:\
    \ Vec<u8> = Vec::new();\n    let mut output = String::new();\n\n    let mut input\
    \ = numbers.split_whitespace();\n    while let Some(numeral) = input.next() {\n\
    \        numbers_vec.push(match numeral {\n            \"zero\" => 0,\n      \
    \      \"one\" => 1,\n            \"two\" => 2,\n            \"three\" => 3,\n\
    \            \"four\" => 4,\n            \"five\" => 5,\n            \"six\" =>\
    \ 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n            \"\
    nine\" => 9,\n            _ => 10,\n        });\n    }\n\n    let mut numbers_vec\
    \ = numbers_vec.iter().filter(|x| **x < 10).collect::<Vec<&u8>>();\n    numbers_vec.sort();\n\
    \n    for num in numbers_vec {\n        match num {\n            0 => output.push_str(\"\
    zero \"),\n            1 => output.push_str(\"one \"),\n            2 => output.push_str(\"\
    two \"),\n            3 => output.push_str(\"three \"),\n            4 => output.push_str(\"\
    four \"),\n            5 => output.push_str(\"five \"),\n            6 => output.push_str(\"\
    six \"),\n            7 => output.push_str(\"seven \"),\n            8 => output.push_str(\"\
    eight \"),\n            9 => output.push_str(\"nine \"),\n            _ => (),\n\
    \        }\n    }\n\n    output.trim().to_string()\n}\n\nfn main() {\n    let\
    \ candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821378
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let numbers =\
    \ numbers.split(' ').collect::<Vec<&str>>();\n    let mut sorted = numbers.clone();\n\
    \    sorted.sort_by(|a, b| get_number(a).cmp(&get_number(b)));\n    sorted.join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `get_number` in this scope\n --> /tmp/tmp5gkue3ss.rs:7:27\n\
    \  |\n7 |     sorted.sort_by(|a, b| get_number(a).cmp(&get_number(b)));\n  | \
    \                          ^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `get_number` in this scope\n --> /tmp/tmp5gkue3ss.rs:7:46\n\
    \  |\n7 |     sorted.sort_by(|a, b| get_number(a).cmp(&get_number(b)));\n  | \
    \                                             ^^^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659821378
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    // Convert to\
    \ a vector of numbers\n    let numbers = numbers\n        .split_whitespace()\n\
    \        .map(|s| s.parse::<i32>().unwrap())\n        .collect::<Vec<i32>>();\n\
    \n    // Sort numbers\n    let mut numbers = numbers;\n    numbers.sort();\n\n\
    \    // Return numbers as a space-delimited string\n    numbers\n        .iter()\n\
    \        .map(|n| n.to_string())\n        .collect::<Vec<String>>()\n        .join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Result::unwrap()` on an `Err` value:
    ParseIntError { kind: InvalidDigit }'', /tmp/tmp2wnumi69.rs:8:35

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659821378
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut num_vec:\
    \ Vec<u32> = vec![];\n    let mut num_str = \"\".to_string();\n    for num in\
    \ numbers.split_whitespace() {\n        num_vec.push(word_to_num(num.to_string()));\n\
    \    }\n    let mut num_vec = num_vec.sort();\n    for num in num_vec {\n    \
    \    num_str = num_str + &num_to_word(num) + \" \";\n    }\n    num_str.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `word_to_num` in this scope\n --> /tmp/tmpiorc_6zy.rs:8:22\n\
    \  |\n8 |         num_vec.push(word_to_num(num.to_string()));\n  |           \
    \           ^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function\
    \ `num_to_word` in this scope\n  --> /tmp/tmpiorc_6zy.rs:12:30\n   |\n12 |   \
    \      num_str = num_str + &num_to_word(num) + \" \";\n   |                  \
    \            ^^^^^^^^^^^ not found in this scope\n\nerror[E0277]: `()` is not\
    \ an iterator\n   --> /tmp/tmpiorc_6zy.rs:11:16\n    |\n11  |     for num in num_vec\
    \ {\n    |                ^^^^^^^ `()` is not an iterator\n    |\n    = help:\
    \ the trait `Iterator` is not implemented for `()`\n    = note: required because\
    \ of the requirements on the impl of `IntoIterator` for `()`\nnote: required by\
    \ `into_iter`\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0425.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659821378
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut sorted_numbers:\
    \ Vec<u8> = numbers\n        .split_whitespace()\n        .map(|w| match w {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => 0,\n     \
    \   })\n        .collect();\n    sorted_numbers.sort();\n    sorted_numbers\n\
    \        .iter()\n        .map(|&w| match w {\n            0 => \"zero\",\n  \
    \          1 => \"one\",\n            2 => \"two\",\n            3 => \"three\"\
    ,\n            4 => \"four\",\n            5 => \"five\",\n            6 => \"\
    six\",\n            7 => \"seven\",\n            8 => \"eight\",\n           \
    \ 9 => \"nine\",\n            _ => \"zero\",\n        })\n        .collect::<Vec<&str>>()\n\
    \        .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821378
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<u8> = Vec::new();\n    let mut n_string = String::new();\n    for i in numbers.split_whitespace()\
    \ {\n        match i {\n            \"zero\" => nums.push(0),\n            \"\
    one\" => nums.push(1),\n            \"two\" => nums.push(2),\n            \"three\"\
    \ => nums.push(3),\n            \"four\" => nums.push(4),\n            \"five\"\
    \ => nums.push(5),\n            \"six\" => nums.push(6),\n            \"seven\"\
    \ => nums.push(7),\n            \"eight\" => nums.push(8),\n            \"nine\"\
    \ => nums.push(9),\n            _ => continue,\n        }\n    }\n    nums.sort();\n\
    \    for i in nums {\n        match i {\n            0 => n_string += \"zero \"\
    ,\n            1 => n_string += \"one \",\n            2 => n_string += \"two\
    \ \",\n            3 => n_string += \"three \",\n            4 => n_string +=\
    \ \"four \",\n            5 => n_string += \"five \",\n            6 => n_string\
    \ += \"six \",\n            7 => n_string += \"seven \",\n            8 => n_string\
    \ += \"eight \",\n            9 => n_string += \"nine \",\n            _ => continue,\n\
    \        }\n    }\n    n_string\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"three \"`,\n right: `\"three\"`', /tmp/tmpurwff4iw.rs:44:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821378
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut parsed_numbers:\
    \ Vec<usize> = numbers\n        .split_whitespace()\n        .map(|s| match s\
    \ {\n            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\"\
    \ => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n           \
    \ \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n   \
    \         \"eight\" => 8,\n            \"nine\" => 9,\n            _ => unreachable!(),\n\
    \        })\n        .collect();\n    parsed_numbers.sort();\n    parsed_numbers\n\
    \        .iter()\n        .map(|n| match n {\n            0 => \"zero\",\n   \
    \         1 => \"one\",\n            2 => \"two\",\n            3 => \"three\"\
    ,\n            4 => \"four\",\n            5 => \"five\",\n            6 => \"\
    six\",\n            7 => \"seven\",\n            8 => \"eight\",\n           \
    \ 9 => \"nine\",\n            _ => unreachable!(),\n        })\n        .collect::<Vec<&str>>()\n\
    \        .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821378
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut v = numbers.split_whitespace().map(|n|\
    \ trans_numeral(n.to_string())).collect::<Vec<u32>>();\n    v.sort();\n    v.iter().map(|n|\
    \ trans_numeral_back(*n)).collect::<Vec<String>>().join(\" \")\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `trans_numeral` in this scope\n -->\
    \ /tmp/tmpx7paoiyg.rs:5:52\n  |\n5 |     let mut v = numbers.split_whitespace().map(|n|\
    \ trans_numeral(n.to_string())).collect::<Vec<u32>>();\n  |                  \
    \                                  ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `trans_numeral_back` in this scope\n --> /tmp/tmpx7paoiyg.rs:7:22\n\
    \  |\n7 |     v.iter().map(|n| trans_numeral_back(*n)).collect::<Vec<String>>().join(\"\
    \ \")\n  |                      ^^^^^^^^^^^^^^^^^^ not found in this scope\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659821378
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    numbers\n    \
    \    .split_whitespace()\n        .map(|x| {\n            match x {\n        \
    \        \"zero\" => 0,\n                \"one\" => 1,\n                \"two\"\
    \ => 2,\n                \"three\" => 3,\n                \"four\" => 4,\n   \
    \             \"five\" => 5,\n                \"six\" => 6,\n                \"\
    seven\" => 7,\n                \"eight\" => 8,\n                \"nine\" => 9,\n\
    \                _ => 0,\n            }\n        })\n        .sorted()\n     \
    \   .map(|x| match x {\n            0 => \"zero\",\n            1 => \"one\",\n\
    \            2 => \"two\",\n            3 => \"three\",\n            4 => \"four\"\
    ,\n            5 => \"five\",\n            6 => \"six\",\n            7 => \"\
    seven\",\n            8 => \"eight\",\n            9 => \"nine\",\n          \
    \  _ => \"zero\",\n        })\n        .collect::<Vec<&str>>()\n        .join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted` found for struct `Map` in the current\
    \ scope\n  --> /tmp/tmpbqqo62j5.rs:22:10\n   |\n22 |         .sorted()\n   | \
    \         ^^^^^^ method not found in `Map<SplitWhitespace<'_>, [closure@/tmp/tmpbqqo62j5.rs:7:14:\
    \ 21:10]>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659821378
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let numbers =\
    \ numbers.split_whitespace().collect::<Vec<&str>>();\n    let sorted = vec![\n\
    \        \"zero\",\n        \"one\",\n        \"two\",\n        \"three\",\n \
    \       \"four\",\n        \"five\",\n        \"six\",\n        \"seven\",\n \
    \       \"eight\",\n        \"nine\",\n    ];\n    let mut result = Vec::new();\n\
    \    for s in sorted {\n        for n in numbers.iter() {\n            if n ==\
    \ s {\n                result.push(s);\n            }\n        }\n    }\n    result.join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&str` with `str`\n  --> /tmp/tmpkjcoj948.rs:21:18\n\
    \   |\n21 |             if n == s {\n   |                  ^^ no implementation\
    \ for `&str == str`\n   |\n   = help: the trait `PartialEq<str>` is not implemented\
    \ for `&str`\n   = note: required because of the requirements on the impl of `PartialEq<&str>`\
    \ for `&&str`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659821378
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let numbers: Vec<&str>\
    \ = numbers.split(' ').collect();\n    let mut nums: Vec<u8> = Vec::new();\n \
    \   for number in numbers {\n        let num = match number {\n            \"\
    zero\" => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n         \
    \   \"three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n\
    \            \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\"\
    \ => 8,\n            \"nine\" => 9,\n            _ => panic!(\"unexpected input\"\
    ),\n        };\n        nums.push(num);\n    }\n    nums.sort();\n    let mut\
    \ words: Vec<&str> = Vec::new();\n    for num in nums {\n        let word = match\
    \ num {\n            0 => \"zero\",\n            1 => \"one\",\n            2\
    \ => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n     \
    \       5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => panic!(\"\
    unexpected input\"),\n        };\n        words.push(word);\n    }\n    words.join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''unexpected input'', /tmp/tmp5fu3fplk.rs:19:18

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659821378
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    numbers\n    \
    \    .split_whitespace()\n        .map(|c| to_number(c).unwrap())\n        .collect::<Vec<i32>>()\n\
    \        .sort();\n    numbers\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `to_number` in this scope\n --> /tmp/tmp06mu8zdb.rs:7:18\n\
    \  |\n7 |         .map(|c| to_number(c).unwrap())\n  |                  ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659821378
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    // TODO: implement\
    \ me\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmppbuahyf2.rs:6:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659821378
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut nums =\
    \ numbers.split_whitespace()\n        .map(|s| match s {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"bad number\")\n       \
    \ })\n        .collect::<Vec<i32>>();\n    nums.sort();\n    nums.iter()\n   \
    \     .map(|n| match n {\n            0 => \"zero\",\n            1 => \"one\"\
    ,\n            2 => \"two\",\n            3 => \"three\",\n            4 => \"\
    four\",\n            5 => \"five\",\n            6 => \"six\",\n            7\
    \ => \"seven\",\n            8 => \"eight\",\n            9 => \"nine\",\n   \
    \         _ => panic!(\"bad number\")\n        })\n        .fold(String::new(),\
    \ |mut acc, s| {\n            acc.push_str(s);\n            acc.push(' ');\n \
    \           acc\n        })\n        .trim()\n        .to_string()\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821378
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmps2lu_l1j.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659821378
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let numbers =\
    \ numbers.split_whitespace().collect::<Vec<&str>>();\n    let numbers = numbers.iter().map(|x|\
    \ to_number(x)).collect::<Vec<u32>>();\n    let mut numbers = numbers.iter().map(|x|\
    \ x.to_string()).collect::<Vec<String>>();\n    numbers.sort();\n    numbers.join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `to_number` in this scope\n --> /tmp/tmpncbmo502.rs:6:42\n\
    \  |\n6 |     let numbers = numbers.iter().map(|x| to_number(x)).collect::<Vec<u32>>();\n\
    \  |                                          ^^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659821378
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let nums = numbers.split_whitespace().map(|x|\
    \ u8::from_str_radix(x, 10).unwrap());\n    let srt: Vec<_> = nums.collect();\n\
    \    let mut ret = String::new();\n    for x in srt.iter() {\n        ret.push_str(&x.to_string());\n\
    \        ret.push(' ');\n    }\n    ret.pop();\n    ret\n}\n\nfn main() {\n  \
    \  let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"\
    three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Result::unwrap()` on an `Err` value:
    ParseIntError { kind: InvalidDigit }'', /tmp/tmpndzmtivq.rs:5:77

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659821378
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let vec: Vec<i32>\
    \ = numbers\n        .split_whitespace()\n        .map(|x| match x {\n       \
    \     \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n \
    \           \"three\" => 3,\n            \"four\" => 4,\n            \"five\"\
    \ => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n            \"\
    eight\" => 8,\n            \"nine\" => 9,\n            _ => -1,\n        })\n\
    \        .filter(|x| *x != -1)\n        .collect();\n    let mut vec: Vec<String>\
    \ = vec.iter().map(|x| x.to_string()).collect();\n    vec.sort();\n    let result:\
    \ String = vec.join(\" \");\n    result\n}\n\nfn main() {\n    let candidate =\
    \ sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"3\"`,\n right: `\"three\"`', /tmp/tmp00ejpemt.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821378
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    numbers\n    \
    \    .split_whitespace()\n        .map(|w| number_from_word(w))\n        .collect::<Vec<u8>>()\n\
    \        .sort()\n        .iter()\n        .map(|n| number_to_word(*n))\n    \
    \    .collect::<Vec<String>>()\n        .join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `number_from_word` in this scope\n -->\
    \ /tmp/tmp9lgb2ark.rs:7:18\n  |\n7 |         .map(|w| number_from_word(w))\n \
    \ |                  ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `number_to_word` in this scope\n  --> /tmp/tmp9lgb2ark.rs:11:18\n\
    \   |\n11 |         .map(|n| number_to_word(*n))\n   |                  ^^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0599]: no method named `iter` found for unit\
    \ type `()` in the current scope\n  --> /tmp/tmp9lgb2ark.rs:10:10\n   |\n10 |\
    \         .iter()\n   |          ^^^^ method not found in `()`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\n\
    For more information about an error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659821378
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_to_sort:\
    \ Vec<i32> = numbers\n        .split_whitespace()\n        .map(|x| decode_number(x))\n\
    \        .collect();\n    numbers_to_sort.sort();\n    numbers_to_sort\n     \
    \   .iter()\n        .map(|x| encode_number(*x))\n        .collect::<Vec<String>>()\n\
    \        .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `decode_number` in this scope\n -->\
    \ /tmp/tmpnzvf76s0.rs:7:18\n  |\n7 |         .map(|x| decode_number(x))\n  | \
    \                 ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find function `encode_number` in this scope\n  --> /tmp/tmpnzvf76s0.rs:12:18\n\
    \   |\n12 |         .map(|x| encode_number(*x))\n   |                  ^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659821378
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    // First let's\
    \ turn the string into a vector of strings\n    let numbers_vec: Vec<&str> = numbers.split_whitespace().collect();\n\
    \    // Now let's assign each string a number\n    let mut numbers_ints: Vec<u32>\
    \ = Vec::new();\n    for number in numbers_vec {\n        match number {\n   \
    \         \"zero\" => numbers_ints.push(0),\n            \"one\" => numbers_ints.push(1),\n\
    \            \"two\" => numbers_ints.push(2),\n            \"three\" => numbers_ints.push(3),\n\
    \            \"four\" => numbers_ints.push(4),\n            \"five\" => numbers_ints.push(5),\n\
    \            \"six\" => numbers_ints.push(6),\n            \"seven\" => numbers_ints.push(7),\n\
    \            \"eight\" => numbers_ints.push(8),\n            \"nine\" => numbers_ints.push(9),\n\
    \            _ => println!(\"Invalid number.\"),\n        }\n    }\n    // Now\
    \ sort the integers\n    numbers_ints.sort();\n    // Now lets turn the integers\
    \ back into strings\n    let mut numbers_strings: Vec<&str> = Vec::new();\n  \
    \  for number in numbers_ints {\n        match number {\n            0 => numbers_strings.push(\"\
    zero\"),\n            1 => numbers_strings.push(\"one\"),\n            2 => numbers_strings.push(\"\
    two\"),\n            3 => numbers_strings.push(\"three\"),\n            4 => numbers_strings.push(\"\
    four\"),\n            5 => numbers_strings.push(\"five\"),\n            6 => numbers_strings.push(\"\
    six\"),\n            7 => numbers_strings.push(\"seven\"),\n            8 => numbers_strings.push(\"\
    eight\"),\n            9 => numbers_strings.push(\"nine\"),\n            _ =>\
    \ println!(\"Invalid number.\"),\n        }\n    }\n    // Now stringify the numbers\n\
    \    numbers_strings.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821379
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut result\
    \ = Vec::new();\n    let mut numbers = numbers.split_whitespace();\n    while\
    \ let Some(number) = numbers.next() {\n        match number {\n            \"\
    zero\" => result.push(0),\n            \"one\" => result.push(1),\n          \
    \  \"two\" => result.push(2),\n            \"three\" => result.push(3),\n    \
    \        \"four\" => result.push(4),\n            \"five\" => result.push(5),\n\
    \            \"six\" => result.push(6),\n            \"seven\" => result.push(7),\n\
    \            \"eight\" => result.push(8),\n            \"nine\" => result.push(9),\n\
    \            _ => panic!(\"Invalid string\"),\n        }\n    }\n    result.sort();\n\
    \    let mut result = result.iter().map(|&x| match x {\n        0 => \"zero\"\
    ,\n        1 => \"one\",\n        2 => \"two\",\n        3 => \"three\",\n   \
    \     4 => \"four\",\n        5 => \"five\",\n        6 => \"six\",\n        7\
    \ => \"seven\",\n        8 => \"eight\",\n        9 => \"nine\",\n        _ =>\
    \ panic!(\"Invalid number\"),\n    });\n    format!(\"{}\", result.collect::<Vec<&str>>().join(\"\
    \ \"))\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821379
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpvc4vzgab.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659821378
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let numbers: Vec<&str>\
    \ = numbers.split(' ').collect();\n    let mut digits: Vec<i32> = numbers.iter().map(|x|\
    \ convert_digit_to_int(x)).collect();\n    digits.sort();\n    digits.iter().map(|x|\
    \ convert_int_to_digit(x)).collect::<Vec<&str>>().join(\" \")\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `convert_digit_to_int` in this scope\n\
    \ --> /tmp/tmpv2q682ij.rs:6:55\n  |\n6 |     let mut digits: Vec<i32> = numbers.iter().map(|x|\
    \ convert_digit_to_int(x)).collect();\n  |                                   \
    \                    ^^^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `convert_int_to_digit` in this scope\n --> /tmp/tmpv2q682ij.rs:8:27\n\
    \  |\n8 |     digits.iter().map(|x| convert_int_to_digit(x)).collect::<Vec<&str>>().join(\"\
    \ \")\n  |                           ^^^^^^^^^^^^^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659821378
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<&str> = numbers.split_whitespace().collect();\n    nums.sort_by(|a, b| number_to_int(*a).cmp(&number_to_int(*b)));\n\
    \    nums.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `number_to_int` in this scope\n -->\
    \ /tmp/tmplifi_75d.rs:6:25\n  |\n6 |     nums.sort_by(|a, b| number_to_int(*a).cmp(&number_to_int(*b)));\n\
    \  |                         ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `number_to_int` in this scope\n --> /tmp/tmplifi_75d.rs:6:48\n\
    \  |\n6 |     nums.sort_by(|a, b| number_to_int(*a).cmp(&number_to_int(*b)));\n\
    \  |                                                ^^^^^^^^^^^^^ not found in\
    \ this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659821378
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<u32> = Vec::new();\n    for word in numbers.split(\" \") {\n        match\
    \ word {\n            \"zero\" => nums.push(0),\n            \"one\" => nums.push(1),\n\
    \            \"two\" => nums.push(2),\n            \"three\" => nums.push(3),\n\
    \            \"four\" => nums.push(4),\n            \"five\" => nums.push(5),\n\
    \            \"six\" => nums.push(6),\n            \"seven\" => nums.push(7),\n\
    \            \"eight\" => nums.push(8),\n            \"nine\" => nums.push(9),\n\
    \            _ => panic!(\"Invalid digit: {}\", word),\n        }\n    }\n   \
    \ let mut sorted = nums.clone();\n    sorted.sort();\n    let mut result = String::new();\n\
    \    for n in sorted {\n        match n {\n            0 => result.push_str(\"\
    zero \"),\n            1 => result.push_str(\"one \"),\n            2 => result.push_str(\"\
    two \"),\n            3 => result.push_str(\"three \"),\n            4 => result.push_str(\"\
    four \"),\n            5 => result.push_str(\"five \"),\n            6 => result.push_str(\"\
    six \"),\n            7 => result.push_str(\"seven \"),\n            8 => result.push_str(\"\
    eight \"),\n            9 => result.push_str(\"nine \"),\n            _ => panic!(\"\
    Invalid digit: {}\", n),\n        }\n    }\n    result.trim().to_string()\n}\n\
    \nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''Invalid digit: '', /tmp/tmp5h6s56yi.rs:18:18

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659821379
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    const NUMBERS:\
    \ &[(&str, usize)] = &[\n        (\"zero\", 0),\n        (\"one\", 1),\n     \
    \   (\"two\", 2),\n        (\"three\", 3),\n        (\"four\", 4),\n        (\"\
    five\", 5),\n        (\"six\", 6),\n        (\"seven\", 7),\n        (\"eight\"\
    , 8),\n        (\"nine\", 9),\n    ];\n\n    let mut sorted = HashMap::new();\n\
    \    for word in numbers.split(' ') {\n        for num in NUMBERS {\n        \
    \    if num.0 == word {\n                sorted.insert(num.1, word);\n       \
    \     }\n        }\n    }\n\n    let mut result = String::new();\n    for (_,\
    \ value) in sorted.iter() {\n        result.push_str(value);\n        result.push('\
    \ ');\n    }\n\n    result.trim().to_string()\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n  -->\
    \ /tmp/tmplpkgre60.rs:18:22\n   |\n18 |     let mut sorted = HashMap::new();\n\
    \   |                      ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashMap;\n   |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659821378
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    numbers\n    \
    \    .split_whitespace()\n        .map(|word| {\n            let mut chars = word.chars();\n\
    \            chars.next().unwrap()\n        })\n        .collect::<Vec<char>>()\n\
    \        .sort();\n    String::from_iter(numbers.chars())\n}\n\nfn main() {\n\
    \    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"\
    three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no function or associated item named `from_iter` found for\
    \ struct `String` in the current scope\n  --> /tmp/tmpd2fhehys.rs:13:13\n   |\n\
    13 |     String::from_iter(numbers.chars())\n   |             ^^^^^^^^^ function\
    \ or associated item not found in `String`\n   |\n   = help: items from traits\
    \ can only be used if the trait is in scope\nhelp: the following trait is implemented\
    \ but not in scope; perhaps add a `use` for it:\n   |\n1  | use std::iter::FromIterator;\n\
    \   |\nhelp: there is an associated function with a similar name\n   |\n13 | \
    \    String::from_utf8(numbers.chars())\n   |             ~~~~~~~~~\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659821378
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<u8> = numbers\n        .split_whitespace()\n        .map(|number| {\n  \
    \          match number {\n                \"zero\" => 0,\n                \"\
    one\" => 1,\n                \"two\" => 2,\n                \"three\" => 3,\n\
    \                \"four\" => 4,\n                \"five\" => 5,\n            \
    \    \"six\" => 6,\n                \"seven\" => 7,\n                \"eight\"\
    \ => 8,\n                \"nine\" => 9,\n                _ => panic!(),\n    \
    \        }\n        })\n        .collect();\n    numbers.sort();\n    numbers\n\
    \        .iter()\n        .map(|number| {\n            match number {\n      \
    \          0 => \"zero\",\n                1 => \"one\",\n                2 =>\
    \ \"two\",\n                3 => \"three\",\n                4 => \"four\",\n\
    \                5 => \"five\",\n                6 => \"six\",\n             \
    \   7 => \"seven\",\n                8 => \"eight\",\n                9 => \"\
    nine\",\n                _ => panic!(),\n            }\n        })\n        .collect::<Vec<&str>>()\n\
    \        .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821379
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<u8> = numbers\n        .split(' ')\n        .map(|numeral| match numeral\
    \ {\n            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\"\
    \ => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n           \
    \ \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n   \
    \         \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    invalid numeral {}\", numeral),\n        })\n        .collect();\n    numbers.sort();\n\
    \    numbers\n        .iter()\n        .map(|num| match num {\n            0 =>\
    \ \"zero\",\n            1 => \"one\",\n            2 => \"two\",\n          \
    \  3 => \"three\",\n            4 => \"four\",\n            5 => \"five\",\n \
    \           6 => \"six\",\n            7 => \"seven\",\n            8 => \"eight\"\
    ,\n            9 => \"nine\",\n            _ => unreachable!(),\n        })\n\
    \        .collect::<Vec<&str>>()\n        .join(\" \")\n}\n\nfn main() {\n   \
    \ let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"\
    three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''invalid numeral '', /tmp/tmpuwxlgzsx.rs:18:18

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659821379
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<_> = numbers.split_whitespace().collect();\n    numbers.sort_by_key(|num|\
    \ match num {\n        \"zero\" => 0,\n        \"one\" => 1,\n        \"two\"\
    \ => 2,\n        \"three\" => 3,\n        \"four\" => 4,\n        \"five\" =>\
    \ 5,\n        \"six\" => 6,\n        \"seven\" => 7,\n        \"eight\" => 8,\n\
    \        \"nine\" => 9,\n        _ => panic!(\"Invalid numberal\"),\n    });\n\
    \    numbers.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpzuvc5ocp.rs:7:9\n  |\n6 |\
    \     numbers.sort_by_key(|num| match num {\n  |                             \
    \        --- this expression has type `&&str`\n7 |         \"zero\" => 0,\n  |\
    \         ^^^^^^ expected `&str`, found `str`\n  |\n  = note:   expected type\
    \ `&&str`\n          found reference `&'static str`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpzuvc5ocp.rs:8:9\n  |\n6 |     numbers.sort_by_key(|num|\
    \ match num {\n  |                                     --- this expression has\
    \ type `&&str`\n7 |         \"zero\" => 0,\n8 |         \"one\" => 1,\n  |   \
    \      ^^^^^ expected `&str`, found `str`\n  |\n  = note:   expected type `&&str`\n\
    \          found reference `&'static str`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpzuvc5ocp.rs:9:9\n  |\n6 |     numbers.sort_by_key(|num| match num\
    \ {\n  |                                     --- this expression has type `&&str`\n\
    ...\n9 |         \"two\" => 2,\n  |         ^^^^^ expected `&str`, found `str`\n\
    \  |\n  = note:   expected type `&&str`\n          found reference `&'static str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpzuvc5ocp.rs:10:9\n   |\n6  | \
    \    numbers.sort_by_key(|num| match num {\n   |                             \
    \        --- this expression has type `&&str`\n...\n10 |         \"three\" =>\
    \ 3,\n   |         ^^^^^^^ expected `&str`, found `str`\n   |\n   = note:   expected\
    \ type `&&str`\n           found reference `&'static str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpzuvc5ocp.rs:11:9\n   |\n6  |     numbers.sort_by_key(|num|\
    \ match num {\n   |                                     --- this expression has\
    \ type `&&str`\n...\n11 |         \"four\" => 4,\n   |         ^^^^^^ expected\
    \ `&str`, found `str`\n   |\n   = note:   expected type `&&str`\n           found\
    \ reference `&'static str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzuvc5ocp.rs:12:9\n\
    \   |\n6  |     numbers.sort_by_key(|num| match num {\n   |                  \
    \                   --- this expression has type `&&str`\n...\n12 |         \"\
    five\" => 5,\n   |         ^^^^^^ expected `&str`, found `str`\n   |\n   = note:\
    \   expe"
  stdout: ''
  timestamp: 1659821378
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let words = numbers.split_whitespace();\n\
    \    let mut all_numbers: Vec<u32> = Vec::new();\n    for num in words {\n   \
    \     all_numbers.push(match num {\n            \"zero\" => 0,\n            \"\
    one\" => 1,\n            \"two\" => 2,\n            \"three\" => 3,\n        \
    \    \"four\" => 4,\n            \"five\" => 5,\n            \"six\" => 6,\n \
    \           \"seven\" => 7,\n            \"eight\" => 8,\n            \"nine\"\
    \ => 9,\n            _ => panic!(\"Invalid argument\"),\n        });\n    }\n\
    \    all_numbers.sort();\n    let mut ret_string = String::new();\n    for num\
    \ in all_numbers {\n        ret_string.push_str(match num {\n            0 =>\
    \ \"zero\",\n            1 => \"one\",\n            2 => \"two\",\n          \
    \  3 => \"three\",\n            4 => \"four\",\n            5 => \"five\",\n \
    \           6 => \"six\",\n            7 => \"seven\",\n            8 => \"eight\"\
    ,\n            9 => \"nine\",\n            _ => panic!(\"Invalid argument\"),\n\
    \        });\n        ret_string.push(' ');\n    }\n    ret_string.pop();\n  \
    \  ret_string\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821379
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut digits:\
    \ Vec<i32> = vec![];\n    for word in numbers.split_whitespace() {\n        digits.push(parse_number(word))\n\
    \    }\n    let mut sorted_digits = digits.clone();\n    sorted_digits.sort();\n\
    \    let mut words: Vec<String> = vec![];\n    for digit in sorted_digits {\n\
    \        words.push(format_number(digit))\n    }\n    return words.join(\" \"\
    );\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `parse_number` in this scope\n --> /tmp/tmp97uny7e8.rs:7:21\n\
    \  |\n7 |         digits.push(parse_number(word))\n  |                     ^^^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find function `format_number`\
    \ in this scope\n  --> /tmp/tmp97uny7e8.rs:13:20\n   |\n13 |         words.push(format_number(digit))\n\
    \   |                    ^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0425`.\n"
  stdout: ''
  timestamp: 1659821378
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    // TODO: Complete\n\
    \    unimplemented!();\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpj3f9jds1.rs:6:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659821379
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    return numbers.split_whitespace()\n\
    \        .map(|s| {\n            match s {\n                \"zero\" => 0,\n \
    \               \"one\" => 1,\n                \"two\" => 2,\n               \
    \ \"three\" => 3,\n                \"four\" => 4,\n                \"five\" =>\
    \ 5,\n                \"six\" => 6,\n                \"seven\" => 7,\n       \
    \         \"eight\" => 8,\n                \"nine\" => 9,\n                _ =>\
    \ 0,\n            }\n        })\n        .collect::<Vec<i32>>()\n        .iter()\n\
    \        .sorted()\n        .map(|i| {\n            match i {\n              \
    \  0 => \"zero\",\n                1 => \"one\",\n                2 => \"two\"\
    ,\n                3 => \"three\",\n                4 => \"four\",\n         \
    \       5 => \"five\",\n                6 => \"six\",\n                7 => \"\
    seven\",\n                8 => \"eight\",\n                9 => \"nine\",\n  \
    \              _ => \"zero\",\n            }\n        })\n        .collect::<Vec<&str>>()\n\
    \        .join(\" \");\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted` found for struct `std::slice::Iter`\
    \ in the current scope\n  --> /tmp/tmp4g92amoj.rs:23:10\n   |\n23 |         .sorted()\n\
    \   |          ^^^^^^ method not found in `std::slice::Iter<'_, i32>`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659821379
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let num_names\
    \ = [\n        \"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    , \"seven\", \"eight\", \"nine\",\n    ];\n    let mut numbers: Vec<usize> =\n\
    \        numbers.split_whitespace().map(|x| num_names.iter().position(|&y| y ==\
    \ x).unwrap()).collect();\n    numbers.sort();\n    numbers.iter().map(|x| num_names[*x]).collect::<Vec<&str>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821379
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<String> = numbers.split(' ').map(|s| s.to_string()).collect();\n    numbers.sort();\n\
    \    numbers.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"five nine three\"`,\n right: `\"three five nine\"`', /tmp/tmpdaolflio.rs:14:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821379
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<&str> = numbers.split_whitespace().collect();\n    numbers.sort_by(|a, b|\
    \ {\n        let num_a = number_to_number(&a);\n        let num_b = number_to_number(&b);\n\
    \        num_a.cmp(&num_b)\n    });\n    numbers.join(\" \")\n}\n\nfn main() {\n\
    \    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"\
    three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `number_to_number` in this scope\n -->\
    \ /tmp/tmpl5w477ze.rs:7:21\n  |\n7 |         let num_a = number_to_number(&a);\n\
    \  |                     ^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `number_to_number` in this scope\n --> /tmp/tmpl5w477ze.rs:8:21\n\
    \  |\n8 |         let num_b = number_to_number(&b);\n  |                     ^^^^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659821378
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    // TODO\n    numbers\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"five zero four seven nine eight\"`,\n right: `\"zero four five seven eight\
    \ nine\"`', /tmp/tmp8azgl68p.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821379
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let sorted_numbers:\
    \ Vec<u32> = numbers\n        .split_whitespace()\n        .map(|number| match\
    \ number {\n            \"zero\" => 0,\n            \"one\" => 1,\n          \
    \  \"two\" => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n  \
    \          \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" =>\
    \ 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n            _ =>\
    \ panic!(\"Not a number: {}\", number),\n        })\n        .collect();\n\n \
    \   let mut result = String::new();\n    for number in sorted_numbers {\n    \
    \    result.push_str(&format!(\"{} \", number));\n    }\n    result.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"3\"`,\n right: `\"three\"`', /tmp/tmpxf1mumdl.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821379
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<String> = numbers.split_whitespace().map(|s| s.to_string()).collect();\n\
    \    nums.sort_by(|a, b| digit_to_int(a).cmp(&digit_to_int(b)));\n    nums.join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `digit_to_int` in this scope\n --> /tmp/tmp0t6pjvtq.rs:6:25\n\
    \  |\n6 |     nums.sort_by(|a, b| digit_to_int(a).cmp(&digit_to_int(b)));\n  |\
    \                         ^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `digit_to_int` in this scope\n --> /tmp/tmp0t6pjvtq.rs:6:46\n\
    \  |\n6 |     nums.sort_by(|a, b| digit_to_int(a).cmp(&digit_to_int(b)));\n  |\
    \                                              ^^^^^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659821379
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut num_string:\
    \ Vec<&str> = numbers.split_whitespace().collect();\n    num_string.sort_by(|a,\
    \ b| number_value(a).cmp(&number_value(b)));\n    num_string.join(\" \")\n}\n\n\
    fn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `number_value` in this scope\n --> /tmp/tmpw8_1g_i0.rs:6:31\n\
    \  |\n6 |     num_string.sort_by(|a, b| number_value(a).cmp(&number_value(b)));\n\
    \  |                               ^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `number_value` in this scope\n --> /tmp/tmpw8_1g_i0.rs:6:52\n\
    \  |\n6 |     num_string.sort_by(|a, b| number_value(a).cmp(&number_value(b)));\n\
    \  |                                                    ^^^^^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659821379
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    unimplemented!();\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpvc4vzgab.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659821378
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<_> = numbers.split_whitespace().collect();\n    numbers.sort_by_key(|&s|\
    \ match s {\n        \"zero\" => 0,\n        \"one\" => 1,\n        \"two\" =>\
    \ 2,\n        \"three\" => 3,\n        \"four\" => 4,\n        \"five\" => 5,\n\
    \        \"six\" => 6,\n        \"seven\" => 7,\n        \"eight\" => 8,\n   \
    \     \"nine\" => 9,\n        _ => unreachable!(),\n    });\n    numbers.join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821379
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmps2lu_l1j.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659821378
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_map:\
    \ HashMap<String, usize> = HashMap::new();\n    let mut numbers_vec: Vec<String>\
    \ = Vec::new();\n    let words = [\"zero\", \"one\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\", \"seven\", \"eight\", \"nine\"];\n    for word in words.iter()\
    \ {\n        numbers_map.insert(word.to_string(), 0);\n    }\n    let words: Vec<&str>\
    \ = numbers.split_whitespace().collect();\n    for word in words.iter() {\n  \
    \      if numbers_map.contains_key(word) {\n            let counter = numbers_map.get_mut(word).unwrap();\n\
    \            *counter += 1;\n        }\n    }\n    for (k, v) in numbers_map.iter()\
    \ {\n        if *v > 0 {\n            numbers_vec.push(k.clone());\n        }\n\
    \    }\n    numbers_vec.sort();\n    let sorted_numbers = numbers_vec.join(\"\
    \ \");\n    sorted_numbers\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashMap` in this scope\n --> /tmp/tmpzf8kitk9.rs:5:26\n\
    \  |\n5 |     let mut numbers_map: HashMap<String, usize> = HashMap::new();\n\
    \  |                          ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpzf8kitk9.rs:5:51\n\
    \  |\n5 |     let mut numbers_map: HashMap<String, usize> = HashMap::new();\n\
    \  |                                                   ^^^^^^^ not found in this\
    \ scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n\
    \  |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0412, E0433.\nFor more information about an error, try `rustc\
    \ --explain E0412`.\n"
  stdout: ''
  timestamp: 1659821379
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut array:\
    \ Vec<&str> = numbers.split(\" \").collect();\n    array.sort_by(|a, b| word_to_number(a).cmp(&word_to_number(b)));\n\
    \    array.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `word_to_number` in this scope\n -->\
    \ /tmp/tmpd9mv3dwq.rs:6:26\n  |\n6 |     array.sort_by(|a, b| word_to_number(a).cmp(&word_to_number(b)));\n\
    \  |                          ^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `word_to_number` in this scope\n --> /tmp/tmpd9mv3dwq.rs:6:49\n\
    \  |\n6 |     array.sort_by(|a, b| word_to_number(a).cmp(&word_to_number(b)));\n\
    \  |                                                 ^^^^^^^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659821379
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut sorted_numbers:\
    \ Vec<u8> = numbers\n        .split_whitespace()\n        .map(|s| get_number(s))\n\
    \        .collect();\n    sorted_numbers.sort();\n    sorted_numbers\n       \
    \ .iter()\n        .map(|num| get_word(*num))\n        .collect::<Vec<String>>()\n\
    \        .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `get_number` in this scope\n --> /tmp/tmp_gta5an6.rs:7:18\n\
    \  |\n7 |         .map(|s| get_number(s))\n  |                  ^^^^^^^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find function `get_word` in this\
    \ scope\n  --> /tmp/tmp_gta5an6.rs:12:20\n   |\n12 |         .map(|num| get_word(*num))\n\
    \   |                    ^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659821379
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<u8> = numbers\n        .split_whitespace()\n        .map(|s| word_to_num(s.to_string()))\n\
    \        .collect();\n    nums.sort();\n    let mut output = String::new();\n\
    \    for num in nums {\n        output.push_str(&num_to_word(num));\n        output.push('\
    \ ');\n    }\n    output.trim().to_string()\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `word_to_num` in this scope\n --> /tmp/tmpvhgy_1ev.rs:7:18\n\
    \  |\n7 |         .map(|s| word_to_num(s.to_string()))\n  |                  ^^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find function `num_to_word`\
    \ in this scope\n  --> /tmp/tmpvhgy_1ev.rs:12:26\n   |\n12 |         output.push_str(&num_to_word(num));\n\
    \   |                          ^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0425`.\n"
  stdout: ''
  timestamp: 1659821379
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    // Only numbers\n\
    \    let vec: Vec<&str> = numbers.split_whitespace().collect();\n    let mut out\
    \ = vec![];\n    let mut numbers: Vec<usize> = vec.iter().map(|s| to_number(s)).collect();\n\
    \    numbers.sort();\n    out.append(&mut numbers.iter().map(|s| to_word(*s)).collect());\n\
    \    out.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n  \
    \  assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `to_number` in this scope\n --> /tmp/tmpf5o44x9e.rs:8:54\n\
    \  |\n8 |     let mut numbers: Vec<usize> = vec.iter().map(|s| to_number(s)).collect();\n\
    \  |                                                      ^^^^^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find function `to_word` in this scope\n\
    \  --> /tmp/tmpf5o44x9e.rs:10:44\n   |\n10 |     out.append(&mut numbers.iter().map(|s|\
    \ to_word(*s)).collect());\n   |                                            ^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659821379
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let num_vec: Vec<i32>\
    \ = numbers\n        .split_whitespace()\n        .map(|n| match n {\n       \
    \     \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n \
    \           \"three\" => 3,\n            \"four\" => 4,\n            \"five\"\
    \ => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n            \"\
    eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"{} is not\
    \ a valid numberal!\", n),\n        })\n        .collect();\n    let sorted_nums\
    \ = num_vec.iter().min().unwrap();\n    format!(\"{}\", sorted_nums)\n}\n\nfn\
    \ main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpo1slfxsp.rs:21:44

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659821379
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut sorted\
    \ = numbers.split_whitespace().collect::<Vec<&str>>();\n    sorted.sort_by(|a,\
    \ b| numbers_to_int(a).cmp(&numbers_to_int(b)));\n    sorted.iter().map(|s| s.to_string()).collect::<Vec<String>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `numbers_to_int` in this scope\n -->\
    \ /tmp/tmp6qsic62d.rs:6:27\n  |\n6 |     sorted.sort_by(|a, b| numbers_to_int(a).cmp(&numbers_to_int(b)));\n\
    \  |                           ^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `numbers_to_int` in this scope\n --> /tmp/tmp6qsic62d.rs:6:50\n\
    \  |\n6 |     sorted.sort_by(|a, b| numbers_to_int(a).cmp(&numbers_to_int(b)));\n\
    \  |                                                  ^^^^^^^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659821379
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let result: Vec<u32>\
    \ = numbers\n        .split_whitespace()\n        .map(|s| {\n            match\
    \ s {\n                \"zero\" => 0,\n                \"one\" => 1,\n       \
    \         \"two\" => 2,\n                \"three\" => 3,\n                \"four\"\
    \ => 4,\n                \"five\" => 5,\n                \"six\" => 6,\n     \
    \           \"seven\" => 7,\n                \"eight\" => 8,\n               \
    \ \"nine\" => 9,\n                _ => unimplemented!(),\n            }\n    \
    \    })\n        .collect();\n    println!(\"{:?}\", result);\n    let sorted\
    \ = result.iter().fold(String::new(), |mut acc, &x| {\n        acc.push_str(&x.to_string());\n\
    \        acc.push(' ');\n        acc\n    });\n    println!(\"{:?}\", sorted);\n\
    \    return sorted;\n}\n\nfn main() {\n    let candidate = sort_numbers;\n   \
    \ assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"3 \"`,\n right: `\"three\"`', /tmp/tmpd3e_dn5h.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: '[]

    ""

    [3]

    "3 "

    '
  timestamp: 1659821379
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<_> = numbers.split_whitespace().collect();\n    numbers.sort_by_key(|&num|\
    \ NUMBERS.get(num).unwrap());\n    numbers.join(\" \")\n}\n\nfn main() {\n   \
    \ let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"\
    three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `NUMBERS` in this scope\n --> /tmp/tmpg8pndi1a.rs:6:32\n\
    \  |\n6 |     numbers.sort_by_key(|&num| NUMBERS.get(num).unwrap());\n  |    \
    \                            ^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659821379
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    // split string\
    \ into iterable vector of strings\n    let mut vec: Vec<&str> = numbers.split(\"\
    \ \").collect();\n    // sort vector\n    vec.sort();\n    // return sorted vector\
    \ into a string\n    return vec.join(\" \");\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"five nine three\"`,\n right: `\"three five nine\"`', /tmp/tmpv4n25rf1.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821379
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let nums = numbers.split_whitespace().map(|s|\
    \ word_to_num(s)).collect::<Vec<u8>>();\n    let mut nums = nums.into_iter().sorted().collect::<Vec<u8>>();\n\
    \    let mut res = String::new();\n    for n in nums {\n        res.push_str(&num_to_word(n));\n\
    \        res.push(' ');\n    }\n    res.pop();\n    res\n}\n\nfn main() {\n  \
    \  let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"\
    three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `word_to_num` in this scope\n --> /tmp/tmpbkmyd1w6.rs:5:51\n\
    \  |\n5 |     let nums = numbers.split_whitespace().map(|s| word_to_num(s)).collect::<Vec<u8>>();\n\
    \  |                                                   ^^^^^^^^^^^ not found in\
    \ this scope\n\nerror[E0425]: cannot find function `num_to_word` in this scope\n\
    \ --> /tmp/tmpbkmyd1w6.rs:9:23\n  |\n9 |         res.push_str(&num_to_word(n));\n\
    \  |                       ^^^^^^^^^^^ not found in this scope\n\nerror[E0599]:\
    \ no method named `sorted` found for struct `std::vec::IntoIter` in the current\
    \ scope\n --> /tmp/tmpbkmyd1w6.rs:6:37\n  |\n6 |     let mut nums = nums.into_iter().sorted().collect::<Vec<u8>>();\n\
    \  |                                     ^^^^^^ method not found in `std::vec::IntoIter<u8>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659821379
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let words = numbers.split_whitespace().collect::<Vec<&str>>();\n\
    \    let mut nums = Vec::new();\n    for w in words {\n        let num = match\
    \ w {\n            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\"\
    \ => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n           \
    \ \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n   \
    \         \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    bad numberal\")\n        };\n        nums.push(num);\n    }\n    nums.sort();\n\
    \    let mut result = String::new();\n    for n in nums {\n        result.push_str(format!(\"\
    {} \", n).as_str());\n    }\n    result.pop();\n    result\n}\n\nfn main() {\n\
    \    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"\
    three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"3\"`,\n right: `\"three\"`', /tmp/tmp9x12z1tl.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821379
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    // numbers.split('\
    \ ').collect::<Vec<&str>>().sort();\n    numbers.split(' ').map(|x| map_to_int(x)).collect::<Vec<_>>().sort();\n\
    \    \"\".to_string()\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `map_to_int` in this scope\n --> /tmp/tmpkvg1sbdo.rs:6:32\n\
    \  |\n6 |     numbers.split(' ').map(|x| map_to_int(x)).collect::<Vec<_>>().sort();\n\
    \  |                                ^^^^^^^^^^ not found in this scope\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659821379
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<i64> = numbers\n        .split_whitespace()\n        .map(|s| to_number(s.to_string()))\n\
    \        .collect();\n    numbers.sort();\n    numbers\n        .iter()\n    \
    \    .map(|&i| to_word(i))\n        .collect::<Vec<String>>()\n        .join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `to_number` in this scope\n --> /tmp/tmpjtbnuwkj.rs:7:18\n\
    \  |\n7 |         .map(|s| to_number(s.to_string()))\n  |                  ^^^^^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find function `to_word` in this\
    \ scope\n  --> /tmp/tmpjtbnuwkj.rs:12:19\n   |\n12 |         .map(|&i| to_word(i))\n\
    \   |                   ^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659821379
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut temp =\
    \ String::new();\n    let nums: Vec<&str> = numbers.split_whitespace().collect();\n\
    \    let mut count = [0u8; 10];\n    for num in nums {\n        match num {\n\
    \            \"zero\" => count[0] += 1,\n            \"one\" => count[1] += 1,\n\
    \            \"two\" => count[2] += 1,\n            \"three\" => count[3] += 1,\n\
    \            \"four\" => count[4] += 1,\n            \"five\" => count[5] += 1,\n\
    \            \"six\" => count[6] += 1,\n            \"seven\" => count[7] += 1,\n\
    \            \"eight\" => count[8] += 1,\n            \"nine\" => count[9] +=\
    \ 1,\n            _ => panic!(\"{} is not a number, numbnuts!\", num),\n     \
    \   }\n    }\n    for (i, num) in count.iter().enumerate() {\n        if *num\
    \ > 0 {\n            let stringified = format!(\"{} \", i);\n            temp.push_str(&stringified.repeat(*num\
    \ as usize));\n        }\n    }\n    temp.trim().to_string()\n}\n\nfn main() {\n\
    \    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"\
    three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"3\"`,\n right: `\"three\"`', /tmp/tmpwmfq90d7.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821379
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut map =\
    \ HashMap::new();\n    map.insert(\"zero\", 0);\n    map.insert(\"one\", 1);\n\
    \    map.insert(\"two\", 2);\n    map.insert(\"three\", 3);\n    map.insert(\"\
    four\", 4);\n    map.insert(\"five\", 5);\n    map.insert(\"six\", 6);\n    map.insert(\"\
    seven\", 7);\n    map.insert(\"eight\", 8);\n    map.insert(\"nine\", 9);\n\n\
    \    let mut numbers: Vec<&str> = numbers.split_whitespace().collect();\n    numbers.sort_by(|a,\
    \ b| map.get(a).unwrap().cmp(map.get(b).unwrap()));\n    numbers.join(\" \")\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmpx0ahrd0d.rs:5:19\n  |\n5 |     let mut map = HashMap::new();\n  |  \
    \                 ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659821379
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut num_vec:\
    \ Vec<u32> = numbers\n        .split_whitespace()\n        .map(|n| number_to_digit(n.to_string()))\n\
    \        .collect();\n    num_vec.sort();\n    num_vec\n        .iter()\n    \
    \    .map(|n| digit_to_number(n.clone()))\n        .collect::<Vec<String>>()\n\
    \        .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `number_to_digit` in this scope\n -->\
    \ /tmp/tmptmjqfani.rs:7:18\n  |\n7 |         .map(|n| number_to_digit(n.to_string()))\n\
    \  |                  ^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `digit_to_number` in this scope\n  --> /tmp/tmptmjqfani.rs:12:18\n\
    \   |\n12 |         .map(|n| digit_to_number(n.clone()))\n   |               \
    \   ^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659821379
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers_vec:\
    \ Vec<&str> = numbers.split(\" \").collect();\n    numbers_vec.sort_by(|a, b|\
    \ number_to_int(a).cmp(&number_to_int(b)));\n    numbers_vec.join(\" \")\n}\n\n\
    fn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `number_to_int` in this scope\n -->\
    \ /tmp/tmpzqw28wte.rs:6:32\n  |\n6 |     numbers_vec.sort_by(|a, b| number_to_int(a).cmp(&number_to_int(b)));\n\
    \  |                                ^^^^^^^^^^^^^ not found in this scope\n\n\
    error[E0425]: cannot find function `number_to_int` in this scope\n --> /tmp/tmpzqw28wte.rs:6:54\n\
    \  |\n6 |     numbers_vec.sort_by(|a, b| number_to_int(a).cmp(&number_to_int(b)));\n\
    \  |                                                      ^^^^^^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659821379
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut ints:\
    \ Vec<_> = numbers\n        .split_whitespace()\n        .map(|s| match s {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    somehow we have an invalid string in our numbers\"),\n        })\n        .collect();\n\
    \    ints.sort();\n    let mut final = String::new();\n    for i in ints {\n \
    \       final.push_str(match i {\n            0 => \"zero\",\n            1 =>\
    \ \"one\",\n            2 => \"two\",\n            3 => \"three\",\n         \
    \   4 => \"four\",\n            5 => \"five\",\n            6 => \"six\",\n  \
    \          7 => \"seven\",\n            8 => \"eight\",\n            9 => \"nine\"\
    ,\n            _ => panic!(\"somehow we have an invalid string in our numbers\"\
    ),\n        });\n        final.push(' ');\n    }\n    final.pop();\n    final\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found reserved keyword `final`\n  --> /tmp/tmpvf0k5m4m.rs:22:13\n\
    \   |\n22 |     let mut final = String::new();\n   |             ^^^^^ expected\
    \ identifier, found reserved keyword\n   |\nhelp: you can escape reserved keywords\
    \ to use them as identifiers\n   |\n22 |     let mut r#final = String::new();\n\
    \   |             ~~~~~~~\n\nerror: expected expression, found reserved keyword\
    \ `final`\n  --> /tmp/tmpvf0k5m4m.rs:24:9\n   |\n24 |         final.push_str(match\
    \ i {\n   |         ^^^^^ expected expression\n\nerror: expected expression, found\
    \ reserved keyword `final`\n  --> /tmp/tmpvf0k5m4m.rs:39:5\n   |\n39 |     final.pop();\n\
    \   |     ^^^^^ expected expression\n\nerror: aborting due to 3 previous errors\n\
    \n"
  stdout: ''
  timestamp: 1659821379
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<String> = numbers.split_whitespace().map(|s| s.to_string()).collect();\n\
    \    numbers.sort_by(|a, b| a.parse::<u32>().unwrap().cmp(&b.parse::<u32>().unwrap()));\n\
    \    numbers.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Result::unwrap()` on an `Err` value:
    ParseIntError { kind: InvalidDigit }'', /tmp/tmpudeima7w.rs:6:45

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659821379
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut vector\
    \ = vec![];\n    for number in numbers.split_whitespace() {\n        let num =\
    \ match number {\n            \"zero\" => 0,\n            \"one\" => 1,\n    \
    \        \"two\" => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n\
    \            \"five\" => 5,\n            \"six\" => 6,\n            \"seven\"\
    \ => 7,\n            \"eight\" => 8,\n            \"nine\" => 9,\n           \
    \ _ => panic!(\"Number out of bounds\"),\n        };\n        vector.push(num);\n\
    \    }\n    vector.sort();\n    let mut out = String::new();\n    for number in\
    \ vector {\n        out.push_str(match number {\n            0 => \"zero\",\n\
    \            1 => \"one\",\n            2 => \"two\",\n            3 => \"three\"\
    ,\n            4 => \"four\",\n            5 => \"five\",\n            6 => \"\
    six\",\n            7 => \"seven\",\n            8 => \"eight\",\n           \
    \ 9 => \"nine\",\n            _ => panic!(\"Number out of bounds\"),\n       \
    \ });\n        out.push(' ');\n    }\n    out.pop();\n    out\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821379
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut num_vector:\
    \ Vec<u32> = numbers\n        .split_whitespace()\n        .map(|s| match s {\n\
    \            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\" =>\
    \ 2,\n            \"three\" => 3,\n            \"four\" => 4,\n            \"\
    five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n       \
    \     \"eight\" => 8,\n            \"nine\" => 9,\n            _ => unreachable!(),\n\
    \        })\n        .collect();\n    num_vector.sort();\n    num_vector\n   \
    \     .iter()\n        .map(|x| match x {\n            0 => \"zero\",\n      \
    \      1 => \"one\",\n            2 => \"two\",\n            3 => \"three\",\n\
    \            4 => \"four\",\n            5 => \"five\",\n            6 => \"six\"\
    ,\n            7 => \"seven\",\n            8 => \"eight\",\n            9 =>\
    \ \"nine\",\n            _ => unreachable!(),\n        })\n        .collect::<Vec<&str>>()\n\
    \        .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821379
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<String> = numbers.split_whitespace().map(String::from).collect();\n    numbers.sort_by(|a,\
    \ b| {\n        let a_num: i32 = match a.as_str() {\n            \"zero\" => 0,\n\
    \            \"one\" => 1,\n            \"two\" => 2,\n            \"three\" =>\
    \ 3,\n            \"four\" => 4,\n            \"five\" => 5,\n            \"six\"\
    \ => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n          \
    \  \"nine\" => 9,\n            _ => panic!(\"not a valid number: {}\", a),\n \
    \       };\n        let b_num: i32 = match b.as_str() {\n            \"zero\"\
    \ => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n            \"\
    three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n      \
    \      \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\" => 8,\n\
    \            \"nine\" => 9,\n            _ => panic!(\"not a valid number: {}\"\
    , b),\n        };\n        a_num.cmp(&b_num)\n    });\n    numbers.join(\" \"\
    )\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821379
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut arr: Vec<u8>\
    \ = numbers.split_whitespace().map(|&x| decode_number(x)).collect();\n    arr.sort();\n\
    \    arr.iter().map(|&x| decode_number(x)).collect::<Vec<_>>().join(\" \")\n}\n\
    \nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `decode_number` in this scope\n -->\
    \ /tmp/tmp9oku4cyt.rs:5:64\n  |\n5 |     let mut arr: Vec<u8> = numbers.split_whitespace().map(|&x|\
    \ decode_number(x)).collect();\n  |                                          \
    \                      ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `decode_number` in this scope\n --> /tmp/tmp9oku4cyt.rs:7:25\n\
    \  |\n7 |     arr.iter().map(|&x| decode_number(x)).collect::<Vec<_>>().join(\"\
    \ \")\n  |                         ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0277]:\
    \ the size for values of type `str` cannot be known at compilation time\n -->\
    \ /tmp/tmp9oku4cyt.rs:5:61\n  |\n5 |     let mut arr: Vec<u8> = numbers.split_whitespace().map(|&x|\
    \ decode_number(x)).collect();\n  |                                          \
    \                   ^ doesn't have a size known at compile-time\n  |\n  = help:\
    \ the trait `Sized` is not implemented for `str`\n  = note: all local variables\
    \ must have a statically known size\n  = help: unsized locals are gated as an\
    \ unstable feature\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0425.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659821379
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmps2lu_l1j.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659821378
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut n: Vec<String>\
    \ = numbers.split_whitespace().map(String::from).collect();\n    n.sort();\n \
    \   n.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"five nine three\"`,\n right: `\"three five nine\"`', /tmp/tmpjd1pfa5h.rs:14:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821379
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<String> = numbers.split_whitespace().map(|s| s.to_string()).collect();\n\
    \    numbers.sort_by(|a, b| number_to_int(a).cmp(&number_to_int(b)));\n    numbers.join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `number_to_int` in this scope\n -->\
    \ /tmp/tmp3d75swox.rs:6:28\n  |\n6 |     numbers.sort_by(|a, b| number_to_int(a).cmp(&number_to_int(b)));\n\
    \  |                            ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `number_to_int` in this scope\n --> /tmp/tmp3d75swox.rs:6:50\n\
    \  |\n6 |     numbers.sort_by(|a, b| number_to_int(a).cmp(&number_to_int(b)));\n\
    \  |                                                  ^^^^^^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659821379
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<u32> = numbers\n        .split_whitespace()\n        .map(|num| match num\
    \ {\n            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\"\
    \ => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n           \
    \ \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n   \
    \         \"eight\" => 8,\n            \"nine\" => 9,\n            _ => unreachable!(),\n\
    \        })\n        .collect();\n    nums.sort();\n    nums.iter()\n        .map(|num|\
    \ match num {\n            0 => \"zero\",\n            1 => \"one\",\n       \
    \     2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n\
    \            5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\"\
    ,\n            8 => \"eight\",\n            9 => \"nine\",\n            _ => unreachable!(),\n\
    \        })\n        .collect::<Vec<&str>>()\n        .join(\" \")\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821379
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut result\
    \ = String::new();\n    let mut nums = numbers.split_whitespace().collect::<Vec<&str>>();\n\
    \    nums.sort_by(|a, b| NUMBERS.get(*a).unwrap().cmp(NUMBERS.get(*b).unwrap()));\n\
    \    for num in nums {\n        result.push_str(num);\n        result.push(' ');\n\
    \    }\n    result.trim().to_string()\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `NUMBERS` in this scope\n --> /tmp/tmppylmf6mi.rs:7:25\n\
    \  |\n7 |     nums.sort_by(|a, b| NUMBERS.get(*a).unwrap().cmp(NUMBERS.get(*b).unwrap()));\n\
    \  |                         ^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `NUMBERS` in this scope\n --> /tmp/tmppylmf6mi.rs:7:54\n \
    \ |\n7 |     nums.sort_by(|a, b| NUMBERS.get(*a).unwrap().cmp(NUMBERS.get(*b).unwrap()));\n\
    \  |                                                      ^^^^^^^ not found in\
    \ this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659821379
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut n: Vec<i32>\
    \ = numbers\n        .split_whitespace()\n        .map(|s| {\n            match\
    \ s {\n                \"zero\" => 0,\n                \"one\" => 1,\n       \
    \         \"two\" => 2,\n                \"three\" => 3,\n                \"four\"\
    \ => 4,\n                \"five\" => 5,\n                \"six\" => 6,\n     \
    \           \"seven\" => 7,\n                \"eight\" => 8,\n               \
    \ \"nine\" => 9,\n                _ => panic!(\"Invalid number: {}\", s),\n  \
    \          }\n        })\n        .collect();\n    n.sort();\n    n.iter()\n \
    \       .map(|&n| match n {\n            0 => \"zero\",\n            1 => \"one\"\
    ,\n            2 => \"two\",\n            3 => \"three\",\n            4 => \"\
    four\",\n            5 => \"five\",\n            6 => \"six\",\n            7\
    \ => \"seven\",\n            8 => \"eight\",\n            9 => \"nine\",\n   \
    \         _ => panic!(\"Invalid number: {}\", n),\n        })\n        .collect::<Vec<&str>>()\n\
    \        .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821379
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut sorted_numbers:\
    \ Vec<usize> = parse_to_numbers(numbers);\n    sorted_numbers.sort();\n    format!(\"\
    {}\", sorted_numbers.iter().fold(String::new(), |mut a, b| {\n        a.push_str(&format!(\"\
    {} \", b));\n        a\n    }))\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `parse_to_numbers` in this scope\n -->\
    \ /tmp/tmplof9_kjt.rs:5:42\n  |\n5 |     let mut sorted_numbers: Vec<usize> =\
    \ parse_to_numbers(numbers);\n  |                                          ^^^^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659821379
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut results\
    \ = numbers.split_whitespace().collect::<Vec<&str>>();\n    let mut i = 0;\n \
    \   while i < results.len() {\n        let j = i + 1;\n        while j < results.len()\
    \ {\n            if compare_numbers(results[i], results[j]) {\n              \
    \  let temp = results[i];\n                results[i] = results[j];\n        \
    \        results[j] = temp;\n            }\n            j += 1;\n        }\n \
    \       i += 1;\n    }\n    results.join(\" \")\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `compare_numbers` in this scope\n  -->\
    \ /tmp/tmpke9d4rwp.rs:10:16\n   |\n10 |             if compare_numbers(results[i],\
    \ results[j]) {\n   |                ^^^^^^^^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659821379
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    // let arr = numbers.split_whitespace().collect::<Vec<&str>>();\n\
    \    // let res = arr.iter().map(|a| a.parse::<i32>().unwrap()).collect::<Vec<i32>>();\n\
    \    // res.sort();\n    // res.iter().map(|a| a.to_string()).collect::<Vec<String>>().join(\"\
    \ \")\n    let mut arr = numbers.split_whitespace().map(|a| match a {\n      \
    \  \"zero\" => 0,\n        \"one\" => 1,\n        \"two\" => 2,\n        \"three\"\
    \ => 3,\n        \"four\" => 4,\n        \"five\" => 5,\n        \"six\" => 6,\n\
    \        \"seven\" => 7,\n        \"eight\" => 8,\n        \"nine\" => 9,\n  \
    \      _ => 0,\n    }).collect::<Vec<i32>>();\n    arr.sort();\n    arr.iter().map(|a|\
    \ match a {\n        0 => \"zero\",\n        1 => \"one\",\n        2 => \"two\"\
    ,\n        3 => \"three\",\n        4 => \"four\",\n        5 => \"five\",\n \
    \       6 => \"six\",\n        7 => \"seven\",\n        8 => \"eight\",\n    \
    \    9 => \"nine\",\n        _ => \"zero\",\n    }).collect::<Vec<&str>>().join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821379
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<&str> = numbers.split_whitespace().collect();\n    nums.sort_by(|a, b| a.cmp(b));\n\
    \    nums.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n \
    \   assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"five nine three\"`,\n right: `\"three five nine\"`', /tmp/tmpmengg4gt.rs:14:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821379
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let num_set =\
    \ split_words(numbers);\n    // convert numeric words to numeric values in an\
    \ array\n    let mut num_array: Vec<u8> = Vec::new();\n    for n in num_set {\n\
    \        let num = from_num_string(n);\n        num_array.push(num);\n    }\n\
    \    // sort the numeric array\n    num_array.sort();\n    // convert sorted array\
    \ to a string of corresponding numeric words\n    let mut num_words: Vec<String>\
    \ = Vec::new();\n    for n in num_array {\n        let word = to_num_string(n);\n\
    \        num_words.push(word);\n    }\n    // compile the sorted words into a\
    \ string\n    let mut sorted_string = String::new();\n    for n in num_words {\n\
    \        sorted_string.push_str(&n);\n        sorted_string.push(' ');\n    }\n\
    \    sorted_string\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `split_words` in this scope\n --> /tmp/tmp8ai5_9cf.rs:5:19\n\
    \  |\n5 |     let num_set = split_words(numbers);\n  |                   ^^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find function `from_num_string`\
    \ in this scope\n --> /tmp/tmp8ai5_9cf.rs:9:19\n  |\n9 |         let num = from_num_string(n);\n\
    \  |                   ^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `to_num_string` in this scope\n  --> /tmp/tmp8ai5_9cf.rs:17:20\n\
    \   |\n17 |         let word = to_num_string(n);\n   |                    ^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to 3 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659821379
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut result\
    \ = String::new();\n    let mut nums: Vec<&str> = numbers.split_whitespace().collect();\n\
    \    nums.sort_by(|&a, &b| digit_value(a).cmp(&digit_value(b)));\n    for num\
    \ in nums {\n        result.push_str(num);\n        result.push(' ');\n    }\n\
    \    result.pop();\n    result\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `digit_value` in this scope\n --> /tmp/tmp633ur8qn.rs:7:27\n\
    \  |\n7 |     nums.sort_by(|&a, &b| digit_value(a).cmp(&digit_value(b)));\n  |\
    \                           ^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `digit_value` in this scope\n --> /tmp/tmp633ur8qn.rs:7:47\n\
    \  |\n7 |     nums.sort_by(|&a, &b| digit_value(a).cmp(&digit_value(b)));\n  |\
    \                                               ^^^^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659821379
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    numbers\n    \
    \    .split_whitespace()\n        .map(|n| number_to_numeral(n))\n        .sorted()\n\
    \        .map(|n| numeral_to_number(n))\n        .collect::<Vec<_>>()\n      \
    \  .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `number_to_numeral` in this scope\n\
    \ --> /tmp/tmpjah3yyv2.rs:7:18\n  |\n7 |         .map(|n| number_to_numeral(n))\n\
    \  |                  ^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `numeral_to_number` in this scope\n --> /tmp/tmpjah3yyv2.rs:9:18\n\
    \  |\n9 |         .map(|n| numeral_to_number(n))\n  |                  ^^^^^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0599]: no method named `sorted` found for\
    \ struct `Map` in the current scope\n --> /tmp/tmpjah3yyv2.rs:8:10\n  |\n8 | \
    \        .sorted()\n  |          ^^^^^^ method not found in `Map<SplitWhitespace<'_>,\
    \ _>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0425, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0425`.\n"
  stdout: ''
  timestamp: 1659821379
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let numbers: Vec<i32>\
    \ = numbers\n        .split(' ')\n        .map(to_number)\n        .collect();\n\
    \    let mut numbers = numbers;\n    numbers.sort();\n    numbers\n        .iter()\n\
    \        .map(to_string)\n        .collect::<Vec<String>>()\n        .join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `to_number` in this scope\n --> /tmp/tmpkk886sdn.rs:7:14\n\
    \  |\n7 |         .map(to_number)\n  |              ^^^^^^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `to_string` in this scope\n  --> /tmp/tmpkk886sdn.rs:13:14\n\
    \   |\n13 |         .map(to_string)\n   |              ^^^^^^^^^ not found in\
    \ this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659821379
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<u8> = numbers\n        .split_whitespace()\n        .map(|word| match word\
    \ {\n            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\"\
    \ => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n           \
    \ \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n   \
    \         \"eight\" => 8,\n            \"nine\" => 9,\n            _ => 0,\n \
    \       })\n        .collect();\n    numbers.sort();\n    numbers\n        .iter()\n\
    \        .map(|n| match n {\n            0 => \"zero\",\n            1 => \"one\"\
    ,\n            2 => \"two\",\n            3 => \"three\",\n            4 => \"\
    four\",\n            5 => \"five\",\n            6 => \"six\",\n            7\
    \ => \"seven\",\n            8 => \"eight\",\n            9 => \"nine\",\n   \
    \         _ => \"zero\",\n        })\n        .collect::<Vec<&str>>()\n      \
    \  .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821379
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut nums:\
    \ Vec<u8> = Vec::new();\n    for word in numbers.split(' ') {\n        match word\
    \ {\n            \"zero\" => nums.push(0),\n            \"one\" => nums.push(1),\n\
    \            \"two\" => nums.push(2),\n            \"three\" => nums.push(3),\n\
    \            \"four\" => nums.push(4),\n            \"five\" => nums.push(5),\n\
    \            \"six\" => nums.push(6),\n            \"seven\" => nums.push(7),\n\
    \            \"eight\" => nums.push(8),\n            \"nine\" => nums.push(9),\n\
    \            _ => (),\n        }\n    }\n    nums.sort();\n    let mut output\
    \ = String::new();\n    for num in nums {\n        match num {\n            0\
    \ => output.push_str(\"zero \"),\n            1 => output.push_str(\"one \"),\n\
    \            2 => output.push_str(\"two \"),\n            3 => output.push_str(\"\
    three \"),\n            4 => output.push_str(\"four \"),\n            5 => output.push_str(\"\
    five \"),\n            6 => output.push_str(\"six \"),\n            7 => output.push_str(\"\
    seven \"),\n            8 => output.push_str(\"eight \"),\n            9 => output.push_str(\"\
    nine \"),\n            _ => (),\n        }\n    }\n    output.trim().to_string()\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821379
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut sort_numbers\
    \ = numbers.split_whitespace().collect::<Vec<&str>>();\n    sort_numbers.sort_by(|a,\
    \ b| number(a).cmp(&number(b)));\n    sort_numbers.join(\" \")\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `number` in this scope\n --> /tmp/tmp9zixjb69.rs:6:33\n\
    \  |\n6 |     sort_numbers.sort_by(|a, b| number(a).cmp(&number(b)));\n  |   \
    \                              ^^^^^^ help: a local variable with a similar name\
    \ exists: `numbers`\n\nerror[E0425]: cannot find function `number` in this scope\n\
    \ --> /tmp/tmp9zixjb69.rs:6:48\n  |\n6 |     sort_numbers.sort_by(|a, b| number(a).cmp(&number(b)));\n\
    \  |                                                ^^^^^^ help: a local variable\
    \ with a similar name exists: `numbers`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659821379
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut s = numbers.split_whitespace().collect::<Vec<&str>>();\n\
    \    s.sort_by(|a, b| a.cmp(b));\n    s.join(\" \")\n}\n\nfn main() {\n    let\
    \ candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"five nine three\"`,\n right: `\"three five nine\"`', /tmp/tmp12muqz90.rs:14:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821379
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numeric_numbers:\
    \ Vec<u8> = vec![];\n    let number_string = numbers.clone();\n    let number_list:\
    \ Vec<&str> = number_string.split_whitespace().collect();\n    for number in number_list\
    \ {\n        match number {\n            \"zero\" => numeric_numbers.push(0),\n\
    \            \"one\" => numeric_numbers.push(1),\n            \"two\" => numeric_numbers.push(2),\n\
    \            \"three\" => numeric_numbers.push(3),\n            \"four\" => numeric_numbers.push(4),\n\
    \            \"five\" => numeric_numbers.push(5),\n            \"six\" => numeric_numbers.push(6),\n\
    \            \"seven\" => numeric_numbers.push(7),\n            \"eight\" => numeric_numbers.push(8),\n\
    \            \"nine\" => numeric_numbers.push(9),\n            _ => panic!(\"\
    The string is not in the correct format\"),\n        }\n    }\n    numeric_numbers.sort();\n\
    \    let mut numeric_string = String::new();\n    for number in numeric_numbers\
    \ {\n        match number {\n            0 => numeric_string.push_str(\"zero \"\
    ),\n            1 => numeric_string.push_str(\"one \"),\n            2 => numeric_string.push_str(\"\
    two \"),\n            3 => numeric_string.push_str(\"three \"),\n            4\
    \ => numeric_string.push_str(\"four \"),\n            5 => numeric_string.push_str(\"\
    five \"),\n            6 => numeric_string.push_str(\"six \"),\n            7\
    \ => numeric_string.push_str(\"seven \"),\n            8 => numeric_string.push_str(\"\
    eight \"),\n            9 => numeric_string.push_str(\"nine \"),\n           \
    \ _ => panic!(\"Failed to find a number match\"),\n        }\n    }\n    numeric_string\n\
    }\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"three \"`,\n right: `\"three\"`', /tmp/tmp8ckv82v3.rs:46:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821379
- exit_code: 101
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let num_map =\
    \ [\n        (\"zero\", 0),\n        (\"one\", 1),\n        (\"two\", 2),\n  \
    \      (\"three\", 3),\n        (\"four\", 4),\n        (\"five\", 5),\n     \
    \   (\"six\", 6),\n        (\"seven\", 7),\n        (\"eight\", 8),\n        (\"\
    nine\", 9),\n    ];\n    let num_map = &num_map[..];\n\n    let v: Vec<&str> =\
    \ numbers.split(' ').collect();\n    let mut num_vec: Vec<u32> = vec![];\n   \
    \ for s in v {\n        num_vec.push(num_map.iter().find(|&&(k, _)| k == s).unwrap().1);\n\
    \    }\n    num_vec.sort();\n    let mut s = String::new();\n    for num in num_vec\
    \ {\n        s.push_str(num_map.iter().find(|&&(_, v)| v == num).unwrap().0);\n\
    \        s.push(' ');\n    }\n    s.pop();\n    s\n}\n\nfn main() {\n    let candidate\
    \ = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\
    \"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"three\"\
    ));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpck2rpgi2.rs:22:61

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659821379
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut number_strings:\
    \ Vec<&str> = numbers.split(' ').collect();\n    number_strings.sort_by(|a, b|\
    \ {\n        if a.len() == b.len() {\n            match (a, b) {\n           \
    \     (\"zero\", \"zero\") => Ordering::Equal,\n                (\"zero\", _)\
    \ => Ordering::Less,\n                (_, \"zero\") => Ordering::Greater,\n  \
    \              (\"one\", \"one\") => Ordering::Equal,\n                (\"one\"\
    , _) => Ordering::Less,\n                (_, \"one\") => Ordering::Greater,\n\
    \                (\"two\", \"two\") => Ordering::Equal,\n                (\"two\"\
    , _) => Ordering::Less,\n                (_, \"two\") => Ordering::Greater,\n\
    \                (\"three\", \"three\") => Ordering::Equal,\n                (\"\
    three\", _) => Ordering::Less,\n                (_, \"three\") => Ordering::Greater,\n\
    \                (\"four\", \"four\") => Ordering::Equal,\n                (\"\
    four\", _) => Ordering::Less,\n                (_, \"four\") => Ordering::Greater,\n\
    \                (\"five\", \"five\") => Ordering::Equal,\n                (\"\
    five\", _) => Ordering::Less,\n                (_, \"five\") => Ordering::Greater,\n\
    \                (\"six\", \"six\") => Ordering::Equal,\n                (\"six\"\
    , _) => Ordering::Less,\n                (_, \"six\") => Ordering::Greater,\n\
    \                (\"seven\", \"seven\") => Ordering::Equal,\n                (\"\
    seven\", _) => Ordering::Less,\n                (_, \"seven\") => Ordering::Greater,\n\
    \                (\"eight\", \"eight\") => Ordering::Equal,\n                (\"\
    eight\", _) => Ordering::Less,\n                (_, \"eight\") => Ordering::Greater,\n\
    \                (\"nine\", \"nine\") => Ordering::Equal,\n                (\"\
    nine\", _) => Ordering::Less,\n                (_, \"nine\") => Ordering::Greater,\n\
    \                (_, _) => Ordering::Equal,\n            }\n        } else {\n\
    \            a.len().cmp(&b.len\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmphzlp5l0b.rs:52:3\n\
    \   |\n4  | fn sort_numbers(numbers: String) -> String {\n   |               \
    \                             - unclosed delimiter\n5  |     let mut number_strings:\
    \ Vec<&str> = numbers.split(' ').collect();\n6  |     number_strings.sort_by(|a,\
    \ b| {\n   |                           -       - unclosed delimiter\n   |    \
    \                       |\n   |                           unclosed delimiter\n\
    ...\n41 |         } else {\n   |                - this delimiter might not be\
    \ properly closed...\n42 |             a.len().cmp(&b.len\n43 | }\n   | - ...as\
    \ it matches this but it has different indentation\n...\n52 | }\n   |   ^\n\n\
    error: mismatched closing delimiter: `}`\n  --> /tmp/tmphzlp5l0b.rs:42:24\n  \
    \ |\n4  | fn sort_numbers(numbers: String) -> String {\n   |                 \
    \                           - closing delimiter possibly meant for this\n...\n\
    42 |             a.len().cmp(&b.len\n   |                        ^ unclosed delimiter\n\
    43 | }\n   | ^ mismatched closing delimiter\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `Ordering`\n --> /tmp/tmphzlp5l0b.rs:9:37\n  |\n9 | \
    \                (\"zero\", \"zero\") => Ordering::Equal,\n  |               \
    \                      ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `Ordering`\n  --> /tmp/tmphzlp5l0b.rs:10:32\n\
    \   |\n10 |                 (\"zero\", _) => Ordering::Less,\n   |           \
    \                     ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `Ordering`\n  --> /tmp/tmphzlp5l0b.rs:11:32\n\
    \   |\n11 |                 (_, \"zero\") => Ordering::Greater,\n   |        \
    \                        ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `Ordering`\n  --> /tmp/tmphzlp5l0b.rs:12:35\n\
    \   |\n12 |                 (\"one\", \"one\") => Ordering::Equal,\n   |     \
    \                              ^^^^^^^^ use of undeclared type `Ordering`\n\n\
    error[E0433]: failed to resolve: use of undeclared t"
  stdout: ''
  timestamp: 1659821379
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let vec: Vec<&str>\
    \ = numbers.split(' ').collect();\n    let mut nums: Vec<u8> = vec.iter().map(|n|\
    \ match n {\n        \"zero\" => 0,\n        \"one\" => 1,\n        \"two\" =>\
    \ 2,\n        \"three\" => 3,\n        \"four\" => 4,\n        \"five\" => 5,\n\
    \        \"six\" => 6,\n        \"seven\" => 7,\n        \"eight\" => 8,\n   \
    \     \"nine\" => 9,\n        _ => panic!(\"Invalid number\"),\n    }).collect();\n\
    \    nums.sort();\n    let nums_str: Vec<String> = nums.iter().map(|n| match n\
    \ {\n        0 => \"zero\",\n        1 => \"one\",\n        2 => \"two\",\n  \
    \      3 => \"three\",\n        4 => \"four\",\n        5 => \"five\",\n     \
    \   6 => \"six\",\n        7 => \"seven\",\n        8 => \"eight\",\n        9\
    \ => \"nine\",\n        _ => panic!(\"Invalid number\"),\n    }).map(|n| n.to_string()).collect();\n\
    \    nums_str.join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    three\")), String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"\
    three five nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp6dn3lslq.rs:7:9\n  |\n6 |\
    \     let mut nums: Vec<u8> = vec.iter().map(|n| match n {\n  |              \
    \                                        - this expression has type `&&str`\n\
    7 |         \"zero\" => 0,\n  |         ^^^^^^ expected `&str`, found `str`\n\
    \  |\n  = note:   expected type `&&str`\n          found reference `&'static str`\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmp6dn3lslq.rs:8:9\n  |\n6 |     let\
    \ mut nums: Vec<u8> = vec.iter().map(|n| match n {\n  |                      \
    \                                - this expression has type `&&str`\n7 |     \
    \    \"zero\" => 0,\n8 |         \"one\" => 1,\n  |         ^^^^^ expected `&str`,\
    \ found `str`\n  |\n  = note:   expected type `&&str`\n          found reference\
    \ `&'static str`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp6dn3lslq.rs:9:9\n\
    \  |\n6 |     let mut nums: Vec<u8> = vec.iter().map(|n| match n {\n  |      \
    \                                                - this expression has type `&&str`\n\
    ...\n9 |         \"two\" => 2,\n  |         ^^^^^ expected `&str`, found `str`\n\
    \  |\n  = note:   expected type `&&str`\n          found reference `&'static str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp6dn3lslq.rs:10:9\n   |\n6  | \
    \    let mut nums: Vec<u8> = vec.iter().map(|n| match n {\n   |              \
    \                                        - this expression has type `&&str`\n\
    ...\n10 |         \"three\" => 3,\n   |         ^^^^^^^ expected `&str`, found\
    \ `str`\n   |\n   = note:   expected type `&&str`\n           found reference\
    \ `&'static str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6dn3lslq.rs:11:9\n\
    \   |\n6  |     let mut nums: Vec<u8> = vec.iter().map(|n| match n {\n   |   \
    \                                                   - this expression has type\
    \ `&&str`\n...\n11 |         \"four\" => 4,\n   |         ^^^^^^ expected `&str`,\
    \ found `str`\n   |\n   = note:   expected type `&&str`\n           found reference\
    \ `&'static str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6dn3lslq.rs:12:9\n\
    \   |\n6  |     let mut nums: Vec<u8> = vec.iter().map(|n| match n {\n   |   \
    \       "
  stdout: ''
  timestamp: 1659821379
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    numbers\n    \
    \    .split_whitespace()\n        .map(|number| match number {\n            \"\
    zero\" => 0,\n            \"one\" => 1,\n            \"two\" => 2,\n         \
    \   \"three\" => 3,\n            \"four\" => 4,\n            \"five\" => 5,\n\
    \            \"six\" => 6,\n            \"seven\" => 7,\n            \"eight\"\
    \ => 8,\n            \"nine\" => 9,\n            _ => unreachable!(),\n      \
    \  })\n        .sorted()\n        .iter()\n        .map(|number| match number\
    \ {\n            0 => \"zero\",\n            1 => \"one\",\n            2 => \"\
    two\",\n            3 => \"three\",\n            4 => \"four\",\n            5\
    \ => \"five\",\n            6 => \"six\",\n            7 => \"seven\",\n     \
    \       8 => \"eight\",\n            9 => \"nine\",\n            _ => unreachable!(),\n\
    \        })\n        .collect::<Vec<&str>>()\n        .join(\" \")\n}\n\nfn main()\
    \ {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted` found for struct `Map` in the current\
    \ scope\n  --> /tmp/tmp1f2iberx.rs:20:10\n   |\n20 |         .sorted()\n   | \
    \         ^^^^^^ method not found in `Map<SplitWhitespace<'_>, [closure@/tmp/tmp1f2iberx.rs:7:14:\
    \ 19:10]>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659821379
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<_> = numbers.split_whitespace().collect();\n    numbers.sort_by_key(|n|\
    \ match n {\n        \"zero\" => 0,\n        \"one\" => 1,\n        \"two\" =>\
    \ 2,\n        \"three\" => 3,\n        \"four\" => 4,\n        \"five\" => 5,\n\
    \        \"six\" => 6,\n        \"seven\" => 7,\n        \"eight\" => 8,\n   \
    \     \"nine\" => 9,\n        _ => unreachable!(),\n    });\n    numbers.join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpx19j6u61.rs:7:9\n  |\n6 |\
    \     numbers.sort_by_key(|n| match n {\n  |                                 \
    \  - this expression has type `&&str`\n7 |         \"zero\" => 0,\n  |       \
    \  ^^^^^^ expected `&str`, found `str`\n  |\n  = note:   expected type `&&str`\n\
    \          found reference `&'static str`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpx19j6u61.rs:8:9\n  |\n6 |     numbers.sort_by_key(|n| match n {\n\
    \  |                                   - this expression has type `&&str`\n7 |\
    \         \"zero\" => 0,\n8 |         \"one\" => 1,\n  |         ^^^^^ expected\
    \ `&str`, found `str`\n  |\n  = note:   expected type `&&str`\n          found\
    \ reference `&'static str`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpx19j6u61.rs:9:9\n\
    \  |\n6 |     numbers.sort_by_key(|n| match n {\n  |                         \
    \          - this expression has type `&&str`\n...\n9 |         \"two\" => 2,\n\
    \  |         ^^^^^ expected `&str`, found `str`\n  |\n  = note:   expected type\
    \ `&&str`\n          found reference `&'static str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpx19j6u61.rs:10:9\n   |\n6  |     numbers.sort_by_key(|n|\
    \ match n {\n   |                                   - this expression has type\
    \ `&&str`\n...\n10 |         \"three\" => 3,\n   |         ^^^^^^^ expected `&str`,\
    \ found `str`\n   |\n   = note:   expected type `&&str`\n           found reference\
    \ `&'static str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpx19j6u61.rs:11:9\n\
    \   |\n6  |     numbers.sort_by_key(|n| match n {\n   |                      \
    \             - this expression has type `&&str`\n...\n11 |         \"four\" =>\
    \ 4,\n   |         ^^^^^^ expected `&str`, found `str`\n   |\n   = note:   expected\
    \ type `&&str`\n           found reference `&'static str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpx19j6u61.rs:12:9\n   |\n6  |     numbers.sort_by_key(|n|\
    \ match n {\n   |                                   - this expression has type\
    \ `&&str`\n...\n12 |         \"five\" => 5,\n   |         ^^^^^^ expected `&str`,\
    \ found `str`\n   |\n   = note:   expected type `&&str`\n           found reference\
    \ `&'"
  stdout: ''
  timestamp: 1659821379
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut split_numbers:\
    \ Vec<i32> = numbers\n        .split_whitespace()\n        .map(number_to_int)\n\
    \        .collect();\n    split_numbers.sort();\n    split_numbers\n        .iter()\n\
    \        .map(|x| int_to_number(*x))\n        .collect::<Vec<String>>()\n    \
    \    .join(\" \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `number_to_int` in this scope\n --> /tmp/tmp4hky_uee.rs:7:14\n\
    \  |\n7 |         .map(number_to_int)\n  |              ^^^^^^^^^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find function `int_to_number` in this\
    \ scope\n  --> /tmp/tmp4hky_uee.rs:12:18\n   |\n12 |         .map(|x| int_to_number(*x))\n\
    \   |                  ^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0425`.\n"
  stdout: ''
  timestamp: 1659821379
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut numbers:\
    \ Vec<&str> = numbers.split(' ').collect();\n    let mut sorted_numbers: Vec<String>\
    \ = vec![];\n    let map = vec![\n        (\"zero\", 0),\n        (\"one\", 1),\n\
    \        (\"two\", 2),\n        (\"three\", 3),\n        (\"four\", 4),\n    \
    \    (\"five\", 5),\n        (\"six\", 6),\n        (\"seven\", 7),\n        (\"\
    eight\", 8),\n        (\"nine\", 9),\n    ];\n    for _i in 0..10 {\n        let\
    \ mut min_value = usize::max_value();\n        let mut min_index = usize::max_value();\n\
    \        for i in 0..numbers.len() {\n            if let Some(index) = map.iter().position(|&(name,\
    \ _value)| name == numbers[i]) {\n                if index < min_value {\n   \
    \                 min_value = index;\n                    min_index = i;\n   \
    \             }\n            }\n        }\n        if min_index != usize::max_value()\
    \ {\n            sorted_numbers.push(numbers[min_index].to_string());\n      \
    \      numbers.remove(min_index);\n        }\n    }\n    sorted_numbers.join(\"\
    \ \")\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821379
- exit_code: 1
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let numbers =\
    \ numbers.split(' ').collect::<Vec<&str>>();\n    let numbers = numbers.iter().map(|&x|\
    \ numeral_to_number(x)).collect::<Vec<usize>>();\n    let mut numbers = numbers.iter().enumerate().collect::<Vec<(usize,\
    \ &usize)>>();\n    numbers.sort_by(|a, b| a.1.cmp(b.1));\n    let mut output\
    \ = String::new();\n    for i in 0..numbers.len() {\n        if i != 0 {\n   \
    \         output.push(' ');\n        }\n        output.push_str(number_to_numeral(numbers[i].0));\n\
    \    }\n    output\n}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")),\
    \ String::from(\"three\"));\n    assert_eq!(candidate(String::from(\"three five\
    \ nine\")), String::from(\"three five nine\"));\n    assert_eq!(candidate(String::from(\"\
    five zero four seven nine eight\")), String::from(\"zero four five seven eight\
    \ nine\"));\n    assert_eq!(candidate(String::from(\"six five four three two one\
    \ zero\")), String::from(\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `numeral_to_number` in this scope\n\
    \ --> /tmp/tmp8rd8r0gn.rs:6:43\n  |\n6 |     let numbers = numbers.iter().map(|&x|\
    \ numeral_to_number(x)).collect::<Vec<usize>>();\n  |                        \
    \                   ^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `number_to_numeral` in this scope\n  --> /tmp/tmp8rd8r0gn.rs:14:25\n\
    \   |\n14 |         output.push_str(number_to_numeral(numbers[i].0));\n   |  \
    \                       ^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0425`.\n"
  stdout: ''
  timestamp: 1659821379
- exit_code: 0
  program: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\nfn sort_numbers(numbers: String) -> String {\n    let mut num: Vec<u32>\
    \ = Vec::new();\n    for i in numbers.split_whitespace() {\n        num.push(match\
    \ i {\n            \"zero\" => 0,\n            \"one\" => 1,\n            \"two\"\
    \ => 2,\n            \"three\" => 3,\n            \"four\" => 4,\n           \
    \ \"five\" => 5,\n            \"six\" => 6,\n            \"seven\" => 7,\n   \
    \         \"eight\" => 8,\n            \"nine\" => 9,\n            _ => panic!(\"\
    Invalid number\"),\n        });\n    }\n    num.sort();\n    let mut out = String::new();\n\
    \    for i in num {\n        out.push_str(match i {\n            0 => \"zero\"\
    ,\n            1 => \"one\",\n            2 => \"two\",\n            3 => \"three\"\
    ,\n            4 => \"four\",\n            5 => \"five\",\n            6 => \"\
    six\",\n            7 => \"seven\",\n            8 => \"eight\",\n           \
    \ 9 => \"nine\",\n            _ => panic!(\"Invalid number\"),\n        });\n\
    \        out.push(' ');\n    }\n    out.pop();\n    out\n}\n\nfn main() {\n  \
    \  let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"\
    three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
    three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
    \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
    six five four three two one zero\")), String::from(\"zero one two three four five\
    \ six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821380
