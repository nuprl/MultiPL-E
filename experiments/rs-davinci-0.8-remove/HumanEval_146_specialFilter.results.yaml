language: rs
name: HumanEval_146_specialFilter
results:
- exit_code: 1
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count = 0;\n    for\
    \ number in nums {\n        if is_odd(first_digit(number)) && is_odd(last_digit(number))\
    \ && number > 10 {\n            count += 1;\n        }\n    }\n    count\n}\n\n\
    fn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_odd` in this scope\n --> /tmp/tmpmsc_mrs8.rs:8:12\n\
    \  |\n8 |         if is_odd(first_digit(number)) && is_odd(last_digit(number))\
    \ && number > 10 {\n  |            ^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `first_digit` in this scope\n --> /tmp/tmpmsc_mrs8.rs:8:19\n\
    \  |\n8 |         if is_odd(first_digit(number)) && is_odd(last_digit(number))\
    \ && number > 10 {\n  |                   ^^^^^^^^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find function `is_odd` in this scope\n --> /tmp/tmpmsc_mrs8.rs:8:43\n\
    \  |\n8 |         if is_odd(first_digit(number)) && is_odd(last_digit(number))\
    \ && number > 10 {\n  |                                           ^^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find function `last_digit` in this scope\n\
    \ --> /tmp/tmpmsc_mrs8.rs:8:50\n  |\n8 |         if is_odd(first_digit(number))\
    \ && is_odd(last_digit(number)) && number > 10 {\n  |                        \
    \                          ^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to 4 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822496
- exit_code: 0
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count = 0;\n    for\
    \ i in nums {\n        if i > 10 && i.to_string().chars().nth(0).unwrap().to_digit(10).unwrap()\
    \ % 2 != 0 && i.to_string().chars().last().unwrap().to_digit(10).unwrap() % 2\
    \ != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822497
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let nums: Vec<isize> = nums.into_iter().filter(|&n|\
    \ n > 10).filter(|&n| {\n        let n = n.abs();\n        n / 10 % 2 != 0 &&\
    \ n % 10 % 2 != 0\n    }).collect();\n    nums.len() as isize\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpb8pfq06z.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 0
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    // Implement your solution\
    \ here\n    let mut count = 0;\n    for n in nums {\n        if n > 10 && n >\
    \ 0 {\n            let mut n = n;\n            let mut last = n % 10;\n      \
    \      let mut first = n;\n            while n > 0 {\n                first =\
    \ n;\n                n = n / 10;\n            }\n            if first % 2 !=\
    \ 0 && last % 2 != 0 {\n                count += 1;\n            }\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822497
- exit_code: 1
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut val = 0;\n    let mut\
    \ index = 0;\n    while index < nums.len() {\n        if first_and_last_digits_odd(&nums[index])\
    \ && nums[index] > 10 {\n            val += 1;\n        }\n        index += 1;\n\
    \    }\n    val\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `first_and_last_digits_odd` in this\
    \ scope\n --> /tmp/tmplf1tpsbs.rs:9:12\n  |\n9 |         if first_and_last_digits_odd(&nums[index])\
    \ && nums[index] > 10 {\n  |            ^^^^^^^^^^^^^^^^^^^^^^^^^ not found in\
    \ this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822496
- exit_code: 1
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    nums.iter().fold(0, |sum, n|\
    \ {\n        if (n > &10) & is_first_digit_odd(n) & is_last_digit_odd(n) {\n \
    \           sum + 1\n        } else {\n            sum\n        }\n    })\n}\n\
    \nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_first_digit_odd` in this scope\n\
    \ --> /tmp/tmpfhg6wppb.rs:7:24\n  |\n7 |         if (n > &10) & is_first_digit_odd(n)\
    \ & is_last_digit_odd(n) {\n  |                        ^^^^^^^^^^^^^^^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find function `is_last_digit_odd`\
    \ in this scope\n --> /tmp/tmpfhg6wppb.rs:7:48\n  |\n7 |         if (n > &10)\
    \ & is_first_digit_odd(n) & is_last_digit_odd(n) {\n  |                      \
    \                          ^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822496
- exit_code: 0
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut counter = 0;\n    for\
    \ num in nums {\n        if num > 10 {\n            let string_num = num.to_string();\n\
    \            let string_num_len = string_num.len();\n            let first_num\
    \ = string_num.chars().nth(0).unwrap();\n            let last_num = string_num.chars().nth(string_num_len\
    \ - 1).unwrap();\n            if first_num.to_digit(10).unwrap() % 2 != 0 && last_num.to_digit(10).unwrap()\
    \ % 2 != 0 {\n                counter += 1;\n            }\n        }\n    }\n\
    \    counter\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822497
- exit_code: 1
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count = 0;\n    for\
    \ n in nums {\n        let nstring = n.to_string();\n        if nstring.len()\
    \ > 1 {\n            if is_first_last_digit_odd(n) {\n                if n > 10\
    \ {\n                    count += 1;\n                }\n            }\n     \
    \   }\n    }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_first_last_digit_odd` in this scope\n\
    \  --> /tmp/tmpau6vvt0c.rs:10:16\n   |\n10 |             if is_first_last_digit_odd(n)\
    \ {\n   |                ^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822496
- exit_code: 1
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    nums.iter().filter(|n| {\n\
    \        let mut digits = vec![];\n        let mut nn = *n;\n        while nn\
    \ > 0 {\n            digits.push(nn % 10);\n            nn /= 10;\n        }\n\
    \        if digits.len() < 2 {\n            return false;\n        }\n       \
    \ digits.iter().all(|d| d % 2 == 1) && n > &10isize\n    }).count() as isize\n\
    }\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp6c_64hsy.rs:9:20\n  |\n9 |\
    \         while nn > 0 {\n  |                    ^\n  |                    |\n\
    \  |                    expected `&isize`, found integer\n  |                \
    \    help: consider borrowing here: `&0`\n\nerror[E0368]: binary assignment operation\
    \ `/=` cannot be applied to type `&isize`\n  --> /tmp/tmp6c_64hsy.rs:11:13\n \
    \  |\n11 |             nn /= 10;\n   |             --^^^^^^\n   |            \
    \ |\n   |             cannot use `/=` on type `&isize`\n   |\nhelp: `/=` can be\
    \ used on `isize`, you can dereference `nn`\n   |\n11 |             *nn /= 10;\n\
    \   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6c_64hsy.rs:16:50\n\
    \   |\n16 |         digits.iter().all(|d| d % 2 == 1) && n > &10isize\n   |  \
    \                                                ^^^^^^^^ expected `&isize`, found\
    \ `isize`\n   |\n   = note: expected reference `&&isize`\n              found\
    \ reference `&isize`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0368.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    return 0;\n}\n\nfn main() {\n\
    \    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]),\
    \ 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp_nn2tqk9.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    // TODO\n    0\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp9smtgh4c.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut cnt: isize = 0;\n \
    \   for i in 0..nums.len() {\n        if nums[i] > 10 {\n            let mut num:\
    \ isize = nums[i];\n            let first_digit: isize = num % 10;\n         \
    \   let last_digit: isize = num % 10;\n            if first_digit % 2 != 0 &&\
    \ last_digit % 2 != 0 {\n                cnt += 1;\n            }\n        }\n\
    \    }\n    cnt\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpkdfe6_5t.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 0
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count = 0;\n    for\
    \ num in nums {\n        if num > 10 {\n            if num % 2 == 1 {\n      \
    \          let mut num = num;\n                let first_digit = num % 10;\n \
    \               while num >= 10 {\n                    num /= 10;\n          \
    \      }\n                if num % 2 == 1 {\n                    count += 1;\n\
    \                }\n            }\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822497
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    0\n}\n\nfn main() {\n    let\
    \ candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n\
    \    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpjglw53ey.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpwlwj7h9n.rs:6:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822497
- exit_code: 1
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut result = 0;\n    for\
    \ i in nums {\n        if i > 10 && last_digit(i) % 2 != 0 && first_digit(i) %\
    \ 2 != 0 {\n            result += 1;\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `last_digit` in this scope\n --> /tmp/tmph8np80he.rs:8:22\n\
    \  |\n8 |         if i > 10 && last_digit(i) % 2 != 0 && first_digit(i) % 2 !=\
    \ 0 {\n  |                      ^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `first_digit` in this scope\n --> /tmp/tmph8np80he.rs:8:48\n\
    \  |\n8 |         if i > 10 && last_digit(i) % 2 != 0 && first_digit(i) % 2 !=\
    \ 0 {\n  |                                                ^^^^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822496
- exit_code: 1
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    nums.iter().filter(|n| {\n\
    \        let string = n.to_string();\n        let first_char = string.chars().next().unwrap();\n\
    \        let last_char = string.chars().last().unwrap();\n        n > &10 && first_char.is_digit(10)\
    \ && last_char.is_digit(10) && first_char.is_odd() && last_char.is_odd()\n   \
    \ }).count() as isize\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp09jahe4x.rs:10:13\n   |\n\
    10 |         n > &10 && first_char.is_digit(10) && last_char.is_digit(10) && first_char.is_odd()\
    \ && last_char.is_odd()\n   |             ^^^ expected `&isize`, found integer\n\
    \   |\n   = note: expected reference `&&isize`\n              found reference\
    \ `&{integer}`\n\nerror[E0599]: no method named `is_odd` found for type `char`\
    \ in the current scope\n  --> /tmp/tmp09jahe4x.rs:10:84\n   |\n10 |         n\
    \ > &10 && first_char.is_digit(10) && last_char.is_digit(10) && first_char.is_odd()\
    \ && last_char.is_odd()\n   |                                                \
    \                                    ^^^^^^ method not found in `char`\n\nerror[E0599]:\
    \ no method named `is_odd` found for type `char` in the current scope\n  --> /tmp/tmp09jahe4x.rs:10:106\n\
    \   |\n10 |         n > &10 && first_char.is_digit(10) && last_char.is_digit(10)\
    \ && first_char.is_odd() && last_char.is_odd()\n   |                         \
    \                                                                            \
    \     ^^^^^^ method not found in `char`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 1
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut x = 0;\n    for i in\
    \ nums {\n        if i > 10 && is_odd(i) && is_odd(i/10) {\n            x += 1;\n\
    \        }\n    }\n    x\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_odd` in this scope\n --> /tmp/tmpvjkyhitf.rs:8:22\n\
    \  |\n8 |         if i > 10 && is_odd(i) && is_odd(i/10) {\n  |              \
    \        ^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function\
    \ `is_odd` in this scope\n --> /tmp/tmpvjkyhitf.rs:8:35\n  |\n8 |         if i\
    \ > 10 && is_odd(i) && is_odd(i/10) {\n  |                                   ^^^^^^\
    \ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822496
- exit_code: 1
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    nums.iter().filter(|x|\n  \
    \      (x / 100 != 0 || x % 10 != 0) &&\n        (x / 100 == 0 || x % 10 == 0)\
    \ &&\n        x.abs() > 10\n    ).count() as isize\n}\n\nfn main() {\n    let\
    \ candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n\
    \    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot divide `&&isize` by `{integer}`\n --> /tmp/tmpcmcsn1lb.rs:7:12\n\
    \  |\n7 |         (x / 100 != 0 || x % 10 != 0) &&\n  |          - ^ --- {integer}\n\
    \  |          |\n  |          &&isize\n  |\nhelp: `/` can be used on `isize`,\
    \ you can dereference `x`\n  |\n7 |         (*x / 100 != 0 || x % 10 != 0) &&\n\
    \  |          +\n\nerror[E0369]: cannot mod `&&isize` by `{integer}`\n --> /tmp/tmpcmcsn1lb.rs:7:28\n\
    \  |\n7 |         (x / 100 != 0 || x % 10 != 0) &&\n  |                      \
    \    - ^ -- {integer}\n  |                          |\n  |                   \
    \       &&isize\n  |\nhelp: `%` can be used on `isize`, you can dereference `x`\n\
    \  |\n7 |         (x / 100 != 0 || *x % 10 != 0) &&\n  |                     \
    \     +\n\nerror[E0369]: cannot divide `&&isize` by `{integer}`\n --> /tmp/tmpcmcsn1lb.rs:8:12\n\
    \  |\n8 |         (x / 100 == 0 || x % 10 == 0) &&\n  |          - ^ --- {integer}\n\
    \  |          |\n  |          &&isize\n  |\nhelp: `/` can be used on `isize`,\
    \ you can dereference `x`\n  |\n8 |         (*x / 100 == 0 || x % 10 == 0) &&\n\
    \  |          +\n\nerror[E0369]: cannot mod `&&isize` by `{integer}`\n --> /tmp/tmpcmcsn1lb.rs:8:28\n\
    \  |\n8 |         (x / 100 == 0 || x % 10 == 0) &&\n  |                      \
    \    - ^ -- {integer}\n  |                          |\n  |                   \
    \       &&isize\n  |\nhelp: `%` can be used on `isize`, you can dereference `x`\n\
    \  |\n8 |         (x / 100 == 0 || *x % 10 == 0) &&\n  |                     \
    \     +\n\nerror: aborting due to 4 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659822496
- exit_code: 0
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count = 0;\n    for\
    \ num in nums {\n        if num > 10 {\n            let str_num = num.to_string();\n\
    \            let first_char = str_num.chars().nth(0).unwrap();\n            let\
    \ last_char = str_num.chars().nth(str_num.len() - 1).unwrap();\n            if\
    \ (first_char == '1' || first_char == '3' || first_char == '5' || first_char ==\
    \ '7' || first_char == '9')\n                && (last_char == '1' || last_char\
    \ == '3' || last_char == '5' || last_char == '7' || last_char == '9') {\n    \
    \            count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn\
    \ main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822497
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpwlwj7h9n.rs:6:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822497
- exit_code: 1
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut i: isize = 0;\n   \
    \ for num in nums {\n        if num > 10 && checkFirstDigit(num) && checkLastDigit(num)\
    \ {\n            i += 1;\n        }\n    }\n    i\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `checkFirstDigit` in this scope\n -->\
    \ /tmp/tmp9tz3rbnj.rs:8:24\n  |\n8 |         if num > 10 && checkFirstDigit(num)\
    \ && checkLastDigit(num) {\n  |                        ^^^^^^^^^^^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find function `checkLastDigit` in this\
    \ scope\n --> /tmp/tmp9tz3rbnj.rs:8:48\n  |\n8 |         if num > 10 && checkFirstDigit(num)\
    \ && checkLastDigit(num) {\n  |                                              \
    \  ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822496
- exit_code: 1
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut res = 0;\n    for num\
    \ in nums {\n        if num > 10 && is_odd(first_digit(num)) && is_odd(last_digit(num))\
    \ {\n            res += 1;\n        }\n    }\n    res\n}\n\nfn main() {\n    let\
    \ candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n\
    \    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_odd` in this scope\n --> /tmp/tmp0tl4o2r2.rs:8:24\n\
    \  |\n8 |         if num > 10 && is_odd(first_digit(num)) && is_odd(last_digit(num))\
    \ {\n  |                        ^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `first_digit` in this scope\n --> /tmp/tmp0tl4o2r2.rs:8:31\n\
    \  |\n8 |         if num > 10 && is_odd(first_digit(num)) && is_odd(last_digit(num))\
    \ {\n  |                               ^^^^^^^^^^^ not found in this scope\n\n\
    error[E0425]: cannot find function `is_odd` in this scope\n --> /tmp/tmp0tl4o2r2.rs:8:52\n\
    \  |\n8 |         if num > 10 && is_odd(first_digit(num)) && is_odd(last_digit(num))\
    \ {\n  |                                                    ^^^^^^ not found in\
    \ this scope\n\nerror[E0425]: cannot find function `last_digit` in this scope\n\
    \ --> /tmp/tmp0tl4o2r2.rs:8:59\n  |\n8 |         if num > 10 && is_odd(first_digit(num))\
    \ && is_odd(last_digit(num)) {\n  |                                          \
    \                 ^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ 4 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659822496
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    // TODO\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp5mx41znp.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822497
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let result = nums.iter().filter(|&x|\
    \ {\n        let s = x.to_string();\n        let b = s.chars().nth(0).unwrap().to_digit(10).unwrap();\n\
    \        let e = s.chars().last().unwrap().to_digit(10).unwrap();\n        let\
    \ first_digit = b % 2 != 0;\n        let last_digit = e % 2 != 0;\n        x >\
    \ &10 && first_digit && last_digit\n    }).collect::<Vec<&isize>>();\n    result.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpy1ddevzm.rs:8:56

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822497
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    fn first_digit(num: isize)\
    \ -> isize {\n        num / 10\n    }\n\n    fn last_digit(num: isize) -> isize\
    \ {\n        num % 10\n    }\n\n    fn is_odd(num: isize) -> bool {\n        num\
    \ % 2 != 0\n    }\n\n    fn combine(first: isize, last: isize) -> bool {\n   \
    \     is_odd(first) && is_odd(last)\n    }\n\n    nums.iter()\n        .filter(|&n|\
    \ n > &10)\n        .filter(|&n| combine(first_digit(*n), last_digit(*n)))\n \
    \       .count() as isize\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpykfidf9h.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut result = 0;\n    for\
    \ n in nums {\n        let first = n / 10;\n        let last = n % 10;\n     \
    \   if n > 10 && (first % 2 != 0 && last % 2 != 0) {\n            result += 1;\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmps55lvi9j.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 1
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    nums.iter().filter(|num| {\n\
    \        *num > 10 && is_first_digit_odd(*num) && is_last_digit_odd(*num)\n  \
    \  }).count() as isize\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_first_digit_odd` in this scope\n\
    \ --> /tmp/tmpttqmkrkr.rs:7:22\n  |\n7 |         *num > 10 && is_first_digit_odd(*num)\
    \ && is_last_digit_odd(*num)\n  |                      ^^^^^^^^^^^^^^^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find function `is_last_digit_odd`\
    \ in this scope\n --> /tmp/tmpttqmkrkr.rs:7:50\n  |\n7 |         *num > 10 &&\
    \ is_first_digit_odd(*num) && is_last_digit_odd(*num)\n  |                   \
    \                               ^^^^^^^^^^^^^^^^^ not found in this scope\n\n\
    error[E0308]: mismatched types\n --> /tmp/tmpttqmkrkr.rs:7:16\n  |\n7 |      \
    \   *num > 10 && is_first_digit_odd(*num) && is_last_digit_odd(*num)\n  |    \
    \            ^^\n  |                |\n  |                expected `&isize`, found\
    \ integer\n  |                help: consider borrowing here: `&10`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 1
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count = 0;\n    for\
    \ num in nums {\n        if num > 10 && first_digit(num) % 2 != 0 && last_digit(num)\
    \ % 2 != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `first_digit` in this scope\n --> /tmp/tmpjzn906j9.rs:8:24\n\
    \  |\n8 |         if num > 10 && first_digit(num) % 2 != 0 && last_digit(num)\
    \ % 2 != 0 {\n  |                        ^^^^^^^^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find function `last_digit` in this scope\n --> /tmp/tmpjzn906j9.rs:8:53\n\
    \  |\n8 |         if num > 10 && first_digit(num) % 2 != 0 && last_digit(num)\
    \ % 2 != 0 {\n  |                                                     ^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count = 0;\n    for\
    \ n in nums {\n        if n > 10 && n % 2 != 0 && n / 10 % 2 != 0 && n % 10 %\
    \ 2 != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmplrkwwqk1.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut result = 0;\n    for\
    \ x in nums {\n        let mut x = x;\n        if x > 10 {\n            let tens\
    \ = x / 10;\n            let ones = x % 10;\n            if tens % 2 != 0 && ones\
    \ % 2 != 0 {\n                result += 1;\n            }\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpyz_5s6og.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 1
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n  let numbers = vec![2, 4, 11,\
    \ 7, 19, 20, 51, 100, 127, 999];\n  numbers.into_iter().filter(|x| {\n    let\
    \ n = x.clone();\n    n > 10 && n.abs() > 9 && n.abs() < 100 && n % 2 == 1\n \
    \ }).count() as isize\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0689]: can't call method `abs` on ambiguous numeric type `{integer}`\n\
    \ --> /tmp/tmpjukwv83v.rs:9:17\n  |\n9 |     n > 10 && n.abs() > 9 && n.abs()\
    \ < 100 && n % 2 == 1\n  |                 ^^^\n  |\nhelp: you must specify a\
    \ type for this binding, like `i32`\n  |\n8 |     let n: i32 = x.clone();\n  |\
    \         ~~~~~~\n\nerror[E0689]: can't call method `abs` on ambiguous numeric\
    \ type `{integer}`\n --> /tmp/tmpjukwv83v.rs:9:32\n  |\n9 |     n > 10 && n.abs()\
    \ > 9 && n.abs() < 100 && n % 2 == 1\n  |                                ^^^\n\
    \  |\nhelp: you must specify a type for this binding, like `i32`\n  |\n8 |   \
    \  let n: i32 = x.clone();\n  |         ~~~~~~\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0689`.\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 1
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    nums.iter().filter(|&x| x >\
    \ &10 && odd(*x as u8) && odd(x.abs() as u8)).count() as isize\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `odd` in this scope\n --> /tmp/tmpn1izc190.rs:6:40\n\
    \  |\n6 |     nums.iter().filter(|&x| x > &10 && odd(*x as u8) && odd(x.abs()\
    \ as u8)).count() as isize\n  |                                        ^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find function `odd` in this scope\n\
    \ --> /tmp/tmpn1izc190.rs:6:57\n  |\n6 |     nums.iter().filter(|&x| x > &10 &&\
    \ odd(*x as u8) && odd(x.abs() as u8)).count() as isize\n  |                 \
    \                                        ^^^ not found in this scope\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 1
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    nums.iter().fold(0, |total,\
    \ &num| {\n        if is_greater_than_10(num) && is_both_digits_odd(num) {\n \
    \           total + 1\n        } else {\n            total\n        }\n    })\n\
    }\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_greater_than_10` in this scope\n\
    \ --> /tmp/tmp_766e_ol.rs:7:12\n  |\n7 |         if is_greater_than_10(num) &&\
    \ is_both_digits_odd(num) {\n  |            ^^^^^^^^^^^^^^^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find function `is_both_digits_odd` in this scope\n\
    \ --> /tmp/tmp_766e_ol.rs:7:39\n  |\n7 |         if is_greater_than_10(num) &&\
    \ is_both_digits_odd(num) {\n  |                                       ^^^^^^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    // your code here\n    let\
    \ mut count = 0;\n    for i in nums {\n        if i > 10 && i % 2 != 0 && i %\
    \ 10 % 2 != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn\
    \ main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmp0lwblj3h.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 1
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    nums.iter().filter(|&n| {\n\
    \        let l = n % 10;\n        let f = n / (10 as isize).pow(get_len(*n) as\
    \ u32 - 1);\n        *n > 10 && l % 2 != 0 && f % 2 != 0\n    }).count() as isize\n\
    }\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `get_len` in this scope\n --> /tmp/tmpz99rrkt_.rs:8:39\n\
    \  |\n8 |         let f = n / (10 as isize).pow(get_len(*n) as u32 - 1);\n  |\
    \                                       ^^^^^^^ not found in this scope\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 0
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count = 0;\n    for\
    \ num in nums {\n        if num > 10 && num > 0 {\n            let mut num_vec\
    \ = Vec::new();\n            let mut x = num;\n            while x > 0 {\n   \
    \             num_vec.push(x % 10);\n                x /= 10;\n            }\n\
    \            num_vec.reverse();\n            if num_vec[0] % 2 != 0 && num_vec[num_vec.len()\
    \ - 1] % 2 != 0 {\n                count += 1;\n            }\n        }\n   \
    \ }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822497
- exit_code: 0
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count = 0;\n    for\
    \ n in nums {\n        if (n > 10) && (n.to_string().chars().nth(0).unwrap().to_digit(10).unwrap()\
    \ % 2 != 0) && (n.to_string().chars().last().unwrap().to_digit(10).unwrap() %\
    \ 2 != 0) {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822497
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count = 0;\n    for\
    \ i in nums {\n        if i > 10 && i % 2 != 0 && i % 10 % 2 != 0 {\n        \
    \    count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpk61_5_6f.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 1
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count = 0;\n    for\
    \ n in nums {\n        if (n > 10) && (get_first_digit(n) % 2 != 0) && (get_last_digit(n)\
    \ % 2 != 0) {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `get_first_digit` in this scope\n -->\
    \ /tmp/tmp_1j9e8nc.rs:8:25\n  |\n8 |         if (n > 10) && (get_first_digit(n)\
    \ % 2 != 0) && (get_last_digit(n) % 2 != 0) {\n  |                         ^^^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find function `get_last_digit`\
    \ in this scope\n --> /tmp/tmp_1j9e8nc.rs:8:58\n  |\n8 |         if (n > 10) &&\
    \ (get_first_digit(n) % 2 != 0) && (get_last_digit(n) % 2 != 0) {\n  |       \
    \                                                   ^^^^^^^^^^^^^^ not found in\
    \ this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 1
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    nums.iter().filter(|&n| {\n\
    \        let d = *n;\n        let mut is_first_odd = false;\n        let mut is_last_odd\
    \ = false;\n        if (d > 10) {\n            if d % 2 == 1 {\n             \
    \   is_first_odd = true;\n            }\n            while d > 10 {\n        \
    \        d /= 10;\n            }\n            if d % 2 == 1 {\n              \
    \  is_last_odd = true;\n            }\n        }\n        is_first_odd && is_last_odd\n\
    \    }).count() as isize\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpzwabuy6a.rs:10:12\n\
    \   |\n10 |         if (d > 10) {\n   |            ^^^^^^^^ help: remove these\
    \ parentheses\n   |\n   = note: `#[warn(unused_parens)]` on by default\n\nerror[E0384]:\
    \ cannot assign twice to immutable variable `d`\n  --> /tmp/tmpzwabuy6a.rs:15:17\n\
    \   |\n7  |         let d = *n;\n   |             -\n   |             |\n   |\
    \             first assignment to `d`\n   |             help: consider making\
    \ this binding mutable: `mut d`\n...\n15 |                 d /= 10;\n   |    \
    \             ^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting\
    \ due to previous error; 1 warning emitted\n\nFor more information about this\
    \ error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    nums.iter().fold(0, |sum, x|\
    \ sum + if x > &10 && (*x % 10) % 2 != 0 && (*x / 10) % 2 != 0 {1} else {0})\n\
    }\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpzin_evwz.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 1
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count = 0;\n    for\
    \ num in nums {\n        if num >= 10 {\n            if isOdd(firstDigit(num))\
    \ && isOdd(lastDigit(num)) {\n                count += 1;\n            }\n   \
    \     }\n    }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `isOdd` in this scope\n --> /tmp/tmpm7rqqkxf.rs:9:16\n\
    \  |\n9 |             if isOdd(firstDigit(num)) && isOdd(lastDigit(num)) {\n \
    \ |                ^^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ function `firstDigit` in this scope\n --> /tmp/tmpm7rqqkxf.rs:9:22\n  |\n9 |\
    \             if isOdd(firstDigit(num)) && isOdd(lastDigit(num)) {\n  |      \
    \                ^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ function `isOdd` in this scope\n --> /tmp/tmpm7rqqkxf.rs:9:42\n  |\n9 |    \
    \         if isOdd(firstDigit(num)) && isOdd(lastDigit(num)) {\n  |          \
    \                                ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `lastDigit` in this scope\n --> /tmp/tmpm7rqqkxf.rs:9:48\n\
    \  |\n9 |             if isOdd(firstDigit(num)) && isOdd(lastDigit(num)) {\n \
    \ |                                                ^^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to 4 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 1
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    nums.iter().filter(|n|\n  \
    \      (n / 10) % 2 != 0 &&\n        *n % 10 % 2 != 0 &&\n        *n > 10\n  \
    \  ).count() as isize\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot divide `&&isize` by `{integer}`\n --> /tmp/tmp3ykv11k3.rs:7:12\n\
    \  |\n7 |         (n / 10) % 2 != 0 &&\n  |          - ^ -- {integer}\n  |   \
    \       |\n  |          &&isize\n  |\nhelp: `/` can be used on `isize`, you can\
    \ dereference `n`\n  |\n7 |         (*n / 10) % 2 != 0 &&\n  |          +\n\n\
    error[E0308]: mismatched types\n --> /tmp/tmp3ykv11k3.rs:9:14\n  |\n9 |      \
    \   *n > 10\n  |              ^^\n  |              |\n  |              expected\
    \ `&isize`, found integer\n  |              help: consider borrowing here: `&10`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0369.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 1
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut res = 0;\n    for i\
    \ in nums {\n        if i > 10 && first_digit(i) % 2 != 0 && last_digit(i) % 2\
    \ != 0 {\n            res += 1;\n        }\n    }\n    res\n}\n\nfn main() {\n\
    \    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]),\
    \ 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `first_digit` in this scope\n --> /tmp/tmpmir90_do.rs:8:22\n\
    \  |\n8 |         if i > 10 && first_digit(i) % 2 != 0 && last_digit(i) % 2 !=\
    \ 0 {\n  |                      ^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `last_digit` in this scope\n --> /tmp/tmpmir90_do.rs:8:49\n\
    \  |\n8 |         if i > 10 && first_digit(i) % 2 != 0 && last_digit(i) % 2 !=\
    \ 0 {\n  |                                                 ^^^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut counter = 0;\n    for\
    \ i in nums {\n        if (i > 10) && (i % 2 != 0) && ((i % 10) % 2 != 0) {\n\
    \            counter += 1;\n        }\n    }\n    counter\n}\n\nfn main() {\n\
    \    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]),\
    \ 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpwaltvy3x.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpwlwj7h9n.rs:6:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822497
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count = 0;\n    for\
    \ i in nums {\n        let first_digit = i / 10;\n        let last_digit = i %\
    \ 10;\n        if i > 10 && first_digit % 2 != 0 && last_digit % 2 != 0 {\n  \
    \          count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let\
    \ candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n\
    \    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpxnhlury0.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count = 0;\n    for\
    \ i in nums {\n        if i > 10 && (i % 10) % 2 != 0 && i / 10 % 2 != 0 {\n \
    \           count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let\
    \ candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n\
    \    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmppumgylqk.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count = 0;\n    for\
    \ num in nums {\n        if num > 10 && (num % 10) % 2 != 0 && num / 10 % 2 !=\
    \ 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]),\
    \ 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpq6hifp22.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 1
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let total = nums.iter().filter(|n|\
    \ {\n        if *n > 10 {\n            let last_digit = *n % 10;\n           \
    \ let first_digit = *n / 10_000;\n\n            (last_digit == 1 || last_digit\
    \ == 3 || last_digit == 5 || last_digit == 7 || last_digit == 9)\n           \
    \     && (first_digit == 1 || first_digit == 3 || first_digit == 5 || first_digit\
    \ == 7 || first_digit == 9)\n        } else {\n            false\n        }\n\
    \    }).count();\n\n    total as isize\n}\n\nfn main() {\n    let candidate =\
    \ specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp6j84xuvm.rs:7:17\n  |\n7 |\
    \         if *n > 10 {\n  |                 ^^\n  |                 |\n  |   \
    \              expected `&isize`, found integer\n  |                 help: consider\
    \ borrowing here: `&10`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count = 0;\n    for\
    \ x in nums {\n        if (x > 10) && (x % 2 != 0) && (x % 10 != 0) {\n      \
    \      count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpj30ttvm4.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    // TODO\n    0\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp9smtgh4c.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 1
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut result = 0;\n    for\
    \ num in nums {\n        if num > 10 && isFirstAndLastDigitOdd(num) {\n      \
    \      result += 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `isFirstAndLastDigitOdd` in this scope\n\
    \ --> /tmp/tmpforyamh5.rs:8:24\n  |\n8 |         if num > 10 && isFirstAndLastDigitOdd(num)\
    \ {\n  |                        ^^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    nums.iter().fold(0, |acc, x|\n\
    \        if x.to_string().chars().nth(0).unwrap().to_digit(10).unwrap() % 2 !=\
    \ 0\n            && x.to_string().chars().last().unwrap().to_digit(10).unwrap()\
    \ % 2 != 0\n            && *x > 10 {\n            acc + 1\n        } else {\n\
    \            acc\n        }\n    )\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpsppk15qr.rs:7:63

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822497
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count = 0;\n    for\
    \ n in nums {\n        let first = n / 10;\n        let last = n % 10;\n     \
    \   if n > 10 && (first % 2 != 0 && last % 2 != 0) {\n            count += 1;\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpjdgloye3.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 1
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count = 0;\n    for\
    \ num in nums {\n        if first_digits_are_odd(num) && last_digits_are_odd(num)\
    \ && num > 10 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn\
    \ main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `first_digits_are_odd` in this scope\n\
    \ --> /tmp/tmpl4p6yd4b.rs:8:12\n  |\n8 |         if first_digits_are_odd(num)\
    \ && last_digits_are_odd(num) && num > 10 {\n  |            ^^^^^^^^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find function `last_digits_are_odd`\
    \ in this scope\n --> /tmp/tmpl4p6yd4b.rs:8:41\n  |\n8 |         if first_digits_are_odd(num)\
    \ && last_digits_are_odd(num) && num > 10 {\n  |                             \
    \            ^^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count = 0;\n    for\
    \ n in nums {\n        let head = n.abs() / 10;\n        let tail = n.abs() %\
    \ 10;\n        if n > 10 && (head % 2 != 0) && (tail % 2 != 0) {\n           \
    \ count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmp6vv7r7p8.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 0
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut num_count = 0;\n  \
    \  for num in nums {\n        let mut digits = Vec::new();\n        if num > 10\
    \ {\n            let mut cur_num = num;\n            while cur_num > 0 {\n   \
    \             digits.push(cur_num % 10);\n                cur_num /= 10;\n   \
    \         }\n            let first_digit = digits[digits.len() - 1];\n       \
    \     let last_digit = digits[0];\n            if first_digit % 2 != 0 && last_digit\
    \ % 2 != 0 {\n                num_count += 1;\n            }\n        }\n    }\n\
    \    num_count\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822497
- exit_code: 0
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count = 0;\n    for\
    \ num in nums {\n        let mut last_digit = num % 10;\n        let mut first_digit\
    \ = num;\n        while first_digit >= 10 {\n            first_digit /= 10;\n\
    \        }\n        if (num > 10) && (first_digit % 2 != 0) && (last_digit % 2\
    \ != 0) {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822497
- exit_code: 1
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let nums = nums.iter().filter(|&n|\
    \ (n > &10) && isOdd(*n % 10) && isOdd(*n / 10_isize.pow(n.to_string().len() as\
    \ u32 - 1))).count() as isize;\n    return nums;\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `isOdd` in this scope\n --> /tmp/tmpqeehqgzt.rs:6:53\n\
    \  |\n6 |     let nums = nums.iter().filter(|&n| (n > &10) && isOdd(*n % 10) &&\
    \ isOdd(*n / 10_isize.pow(n.to_string().len() as u32 - 1))).count() a...\n  |\
    \                                                     ^^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find function `isOdd` in this scope\n --> /tmp/tmpqeehqgzt.rs:6:71\n\
    \  |\n6 |     let nums = nums.iter().filter(|&n| (n > &10) && isOdd(*n % 10) &&\
    \ isOdd(*n / 10_isize.pow(n.to_string().len() as u32 - 1))).count() a...\n  |\
    \                                                                       ^^^^^\
    \ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 1
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count = 0;\n    for\
    \ num in nums {\n        if num > 10 && is_first_digit_odd(num) && is_last_digit_odd(num)\
    \ {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]),\
    \ 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_first_digit_odd` in this scope\n\
    \ --> /tmp/tmp9sry082d.rs:8:24\n  |\n8 |         if num > 10 && is_first_digit_odd(num)\
    \ && is_last_digit_odd(num) {\n  |                        ^^^^^^^^^^^^^^^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find function `is_last_digit_odd`\
    \ in this scope\n --> /tmp/tmp9sry082d.rs:8:51\n  |\n8 |         if num > 10 &&\
    \ is_first_digit_odd(num) && is_last_digit_odd(num) {\n  |                   \
    \                                ^^^^^^^^^^^^^^^^^ not found in this scope\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count = 0;\n    for\
    \ num in nums {\n        if num > 10 {\n            if (num % 10) % 2 != 0 &&\
    \ (num / 10_000) % 2 != 0 {\n                count += 1;\n            }\n    \
    \    }\n    }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpuqoo2neq.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    0\n}\n\nfn main() {\n    let\
    \ candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n\
    \    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpjglw53ey.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    nums.iter().filter(|&x| {\n\
    \        let first = x.abs() / 10;\n        let last = x.abs() % 10;\n       \
    \ x > &10 && first % 2 != 0 && last % 2 != 0\n    }).count() as isize\n}\n\nfn\
    \ main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmp9cd93unw.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    nums.iter().filter(|&&i| i\
    \ % 2 == 1 && nums.iter().filter(|&&i| i > 10).count() as isize == 2)\n      \
    \  .count() as isize\n}\n\nfn main() {\n    let candidate = specialFilter;\n \
    \   assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `2`', /tmp/tmpj7pb5olp.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 1
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    nums.iter().fold(0, |acc, &n|\
    \ acc + if is_first_and_last_odd(n) && n > 10 {1} else {0})\n}\n\nfn main() {\n\
    \    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]),\
    \ 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_first_and_last_odd` in this scope\n\
    \ --> /tmp/tmpd64esidu.rs:6:44\n  |\n6 |     nums.iter().fold(0, |acc, &n| acc\
    \ + if is_first_and_last_odd(n) && n > 10 {1} else {0})\n  |                 \
    \                           ^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for x\
    \ in nums {\n        let first = x / 10;\n        let last = x % 10;\n       \
    \ if x > 10 && first % 2 != 0 && last % 2 != 0 {\n            sum += 1;\n    \
    \    }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmp4y36l961.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 1
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count = 0;\n    for\
    \ i in nums {\n        if i > 10 && first(i) % 2 != 0 && last(i) % 2 != 0 {\n\
    \            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let\
    \ candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n\
    \    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `first` in this scope\n --> /tmp/tmpqr2wc3kz.rs:8:22\n\
    \  |\n8 |         if i > 10 && first(i) % 2 != 0 && last(i) % 2 != 0 {\n  |  \
    \                    ^^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ function `last` in this scope\n --> /tmp/tmpqr2wc3kz.rs:8:43\n  |\n8 |     \
    \    if i > 10 && first(i) % 2 != 0 && last(i) % 2 != 0 {\n  |               \
    \                            ^^^^ not found in this scope\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 0
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    return nums.iter().filter(|&num|\
    \ {\n        let mut first_digit = *num;\n        let mut last_digit = *num;\n\
    \        while first_digit >= 10 {\n            first_digit /= 10;\n        }\n\
    \        last_digit %= 10;\n        *num > 10 && first_digit % 2 == 1 && last_digit\
    \ % 2 == 1\n    }).count() as isize;\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822497
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    nums.iter().fold(0, |acc, x|\
    \ {\n        if *x > 10 && (x / 10 % 2 != 0) && (x % 10 % 2 != 0) {\n        \
    \    acc + 1\n        } else {\n            acc\n        }\n    })\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmphlmkkqt6.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count = 0;\n    for\
    \ num in nums {\n        if (num % 2 != 0) && (num % 10 != 0) && num > 10 {\n\
    \            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let\
    \ candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n\
    \    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpyh60yskh.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count = 0;\n    for\
    \ num in nums {\n        if num % 2 != 0 && num > 10 {\n            if num / 10\
    \ % 2 != 0 && num % 10 % 2 != 0 {\n                count += 1;\n            }\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpyv1zopca.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822498
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let result = nums.iter().filter(|&x|\
    \ {\n        let mut temp = *x;\n        let last_digit = temp % 10;\n       \
    \ let first_digit = temp;\n        while temp >= 10 {\n            temp /= 10;\n\
    \        }\n        return *x > 10 && first_digit % 2 != 0 && last_digit % 2 !=\
    \ 0;\n    });\n    return result.count() as isize;\n}\n\nfn main() {\n    let\
    \ candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n\
    \    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmp8flwghk9.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count = 0;\n    for\
    \ i in nums {\n        if i > 10 && i % 2 != 0 && (i % 10) % 2 != 0 && i / 10\
    \ != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpdb5rl0c8.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822498
- exit_code: 0
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count = 0;\n    for\
    \ num in nums {\n        if num > 10 && num.to_string().len() >= 2 {\n       \
    \     let first = num.to_string().get(0..1).unwrap().parse::<isize>().unwrap();\n\
    \            let last = num.to_string().get((num.to_string().len() - 1)..).unwrap().parse::<isize>().unwrap();\n\
    \            if first % 2 != 0 && last % 2 != 0 {\n                count += 1;\n\
    \            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822498
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    0\n}\n\nfn main() {\n    let\
    \ candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n\
    \    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpjglw53ey.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 1
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    // your code here\n    // for(let\
    \ i=0; i<nums.length; i++){\n    //     let last_digit = nums[i]%10;\n    // \
    \    let first_digit = (nums[i]%100 - last_digit)/10;\n    //     if(nums[i]>10\
    \ && (last_digit==1 || last_digit==3 || last_digit==5 || last_digit==7 || last_digit==9)\
    \ && (first_digit==1 || first_digit==3 || first_digit==5 || first_digit==7 ||\
    \ first_digit==9)){\n    //         count++;\n    //     }\n    // }\n    // return\
    \ count;\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplhkf4x16.rs:5:39\n  |\n5 |\
    \ fn specialFilter(nums: Vec<isize>) -> isize {\n  |    -------------        \
    \              ^^^^^ expected `isize`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    nums.iter().filter(|&n| {\n\
    \        n.to_string().chars().next().unwrap().to_digit(10).unwrap() % 2 != 0\
    \ &&\n        n.to_string().chars().last().unwrap().to_digit(10).unwrap() % 2\
    \ != 0 &&\n        *n > 10\n    }).count() as isize\n}\n\nfn main() {\n    let\
    \ candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n\
    \    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpw15cscpr.rs:7:60

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822498
- exit_code: 0
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    return nums.iter().fold(0,\
    \ |acc, n|\n        if *n > 10\n        && n.to_string().chars().next().unwrap().to_digit(10).unwrap()\
    \ % 2 == 1\n        && n.to_string().chars().rev().next().unwrap().to_digit(10).unwrap()\
    \ % 2 == 1\n        {acc + 1} else {acc}\n    );\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822498
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut k: isize = 0;\n   \
    \ for i in 0..nums.len() {\n        if nums[i] > 10 && nums[i] % 2 != 0 {\n  \
    \          k += 1;\n        }\n    }\n    k\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmp4wr6zqam.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822498
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let is_special = |x: &isize|\
    \ -> bool {\n        let mut s = x.to_string();\n        let first = s.remove(0);\n\
    \        let last = s.pop().unwrap();\n        let first = first.to_digit(10).unwrap();\n\
    \        let last = last.to_digit(10).unwrap();\n        let first = first % 2\
    \ == 1;\n        let last = last % 2 == 1;\n        let greater_than_10 = x >\
    \ &10;\n        return first && last && greater_than_10;\n    };\n    let mut\
    \ count = 0;\n    for x in nums {\n        if is_special(&x) {\n            count\
    \ += 1;\n        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpulu8owq7.rs:9:28

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822498
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let result = nums.iter().filter(|&n|\
    \ {\n        n > &10 && (n % 2 == 1) && ((n / 10) % 2 == 1) && (n % 10 == 1 ||\
    \ n % 10 == 3 || n % 10 == 5 || n % 10 == 7 || n % 10 == 9)\n    }).count();\n\
    \    result as isize\n}\n\nfn main() {\n    let candidate = specialFilter;\n \
    \   assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmp9gxc936d.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822498
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count = 0;\n    for\
    \ num in nums {\n        if num > 10 && num % 2 != 0 && num < 100 {\n        \
    \    count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `2`', /tmp/tmpk_radc93.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822498
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut result = 0;\n    for\
    \ x in nums {\n        if x > 10 && x % 2 != 0 && x % 10 % 2 != 0 && x / 10 %\
    \ 2 != 0 {\n            result += 1;\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmppdvey9qx.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822498
- exit_code: 1
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count = 0;\n    for\
    \ n in nums {\n        if n > 10 && (n % 10) % 2 != 0 && n / 10_isize.pow(digits(n)\
    \ - 1) % 2 != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\n\
    fn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `digits` in this scope\n --> /tmp/tmp8sjqm057.rs:8:60\n\
    \  |\n8 |         if n > 10 && (n % 10) % 2 != 0 && n / 10_isize.pow(digits(n)\
    \ - 1) % 2 != 0 {\n  |                                                       \
    \     ^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count = 0;\n    for\
    \ num in nums {\n        let mut digits = Vec::new();\n        let mut tmp = num;\n\
    \        let first = tmp % 10;\n        tmp /= 10;\n        digits.push(first);\n\
    \        while tmp != 0 {\n            let last = tmp % 10;\n            tmp /=\
    \ 10;\n            digits.push(last);\n        }\n        let max = *digits.iter().max().unwrap();\n\
    \        let min = *digits.iter().min().unwrap();\n        if max > 10 && min\
    \ % 2 != 0 && max % 2 != 0 {\n            count += 1;\n        }\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpzktobdkb.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822498
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut counter = 0;\n    for\
    \ x in nums {\n        if (x as f64 / 10.0).floor() % 2.0 != 0.0 {\n         \
    \   if x % 2 != 0 {\n                counter += 1;\n            }\n        }\n\
    \    }\n    counter\n}\n\nfn main() {\n    let candidate = specialFilter;\n  \
    \  assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `0`', /tmp/tmprpkor9c3.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822498
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let result = nums.iter().filter(|&n|\
    \ {\n        n > &10 && n.abs() % 10 % 2 != 0 && n / 10 % 2 != 0\n    }).count()\
    \ as isize;\n    result\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmp0gtswnau.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822498
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count = 0;\n    for\
    \ i in nums {\n        if i > 10 && i % 2 != 0 && (i / 10) % 2 != 0 && i % 10\
    \ != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpz3x2_rhq.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822498
- exit_code: 1
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    nums.iter().filter(|n| {\n\
    \        // the initial division by 10 would fail if the number was less than\
    \ 10, so we can use that as the base case\n        // for the recursion\n    \
    \    let a = first(*n);\n        let b = last(*n);\n        if *n < 10 {\n   \
    \         a % 2 != 0 && b % 2 != 0\n        } else {\n            a % 2 != 0 &&\
    \ b % 2 != 0 && *n > 10\n        }\n    }).count() as isize\n}\n\nfn main() {\n\
    \    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]),\
    \ 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `first` in this scope\n --> /tmp/tmpqgy8h6qy.rs:9:17\n\
    \  |\n9 |         let a = first(*n);\n  |                 ^^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find function `last` in this scope\n  --> /tmp/tmpqgy8h6qy.rs:10:17\n\
    \   |\n10 |         let b = last(*n);\n   |                 ^^^^ not found in\
    \ this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqgy8h6qy.rs:11:17\n\
    \   |\n11 |         if *n < 10 {\n   |                 ^^\n   |              \
    \   |\n   |                 expected `&isize`, found integer\n   |           \
    \      help: consider borrowing here: `&10`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpqgy8h6qy.rs:14:46\n   |\n14 |             a % 2 != 0 && b % 2 !=\
    \ 0 && *n > 10\n   |                                              ^^\n   |   \
    \                                           |\n   |                          \
    \                    expected `&isize`, found integer\n   |                  \
    \                            help: consider borrowing here: `&10`\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822498
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count = 0;\n    for\
    \ n in nums {\n        if n > 10 && n > 0 {\n            let mut temp = n;\n \
    \           let mut a = temp % 10;\n            temp /= 10;\n            let b\
    \ = temp % 10;\n            if a % 2 != 0 && b % 2 != 0 {\n                count\
    \ += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let\
    \ candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n\
    \    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmp92pjge7h.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822498
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    return 0;\n}\n\nfn main() {\n\
    \    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]),\
    \ 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp_nn2tqk9.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut nums = nums;\n    nums.iter().filter(|&n|\
    \ n > &10 && (*n / 10) % 2 != 0 && *n % 2 != 0).count() as isize\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpb3lbmcqc.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822498
- exit_code: 0
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count = 0;\n    for\
    \ i in nums {\n        let mut m = i;\n        if m < 10 {\n            continue;\n\
    \        }\n\n        let f = m % 10;\n        m /= 10;\n        let mut l = 0;\n\
    \        loop {\n            l = m % 10;\n            m /= 10;\n            if\
    \ m == 0 {\n                break;\n            }\n        }\n\n        if (f\
    \ % 2 != 0) && (l % 2 != 0) {\n            count += 1;\n        }\n    }\n   \
    \ count\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822498
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut result = 0;\n    for\
    \ i in nums {\n        if (i > 10) {\n            if (((i / 10) % 2) == 1) &&\
    \ ((i % 10) % 2 == 1) {\n                result += 1;\n            }\n       \
    \ }\n    }\n    result\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmp5c8ikzqw.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822498
- exit_code: 1
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    nums.iter().filter(|x| {\n\
    \        let n = **x;\n        n > 10 && is_odd(first_digit(n)) && is_odd(last_digit(n))\n\
    \    }).count() as isize\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_odd` in this scope\n --> /tmp/tmp8cu1ro8m.rs:8:19\n\
    \  |\n8 |         n > 10 && is_odd(first_digit(n)) && is_odd(last_digit(n))\n\
    \  |                   ^^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find function `first_digit` in this scope\n --> /tmp/tmp8cu1ro8m.rs:8:26\n \
    \ |\n8 |         n > 10 && is_odd(first_digit(n)) && is_odd(last_digit(n))\n \
    \ |                          ^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `is_odd` in this scope\n --> /tmp/tmp8cu1ro8m.rs:8:45\n\
    \  |\n8 |         n > 10 && is_odd(first_digit(n)) && is_odd(last_digit(n))\n\
    \  |                                             ^^^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find function `last_digit` in this scope\n --> /tmp/tmp8cu1ro8m.rs:8:52\n\
    \  |\n8 |         n > 10 && is_odd(first_digit(n)) && is_odd(last_digit(n))\n\
    \  |                                                    ^^^^^^^^^^ not found in\
    \ this scope\n\nerror: aborting due to 4 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822498
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut res = 0;\n    for x\
    \ in nums {\n        let mut first_digit = x;\n        let mut last_digit = x\
    \ % 10;\n        if (first_digit % 2 == 1) && (last_digit % 2 == 1) && (x > 10)\
    \ {\n            res += 1;\n        }\n        while first_digit > 10 {\n    \
    \        first_digit /= 10;\n        }\n    }\n    res\n}\n\nfn main() {\n   \
    \ let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]),\
    \ 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmprso7gg3l.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822498
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count = 0;\n    for\
    \ num in nums {\n        if num > 10 && (num / 10) % 2 != 0 && num % 2 != 0 {\n\
    \            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let\
    \ candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n\
    \    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmps_76vqoi.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822498
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpwlwj7h9n.rs:6:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822497
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n  let mut result = 0;\n  for i\
    \ in nums {\n    if i > 10 && i % 2 != 0 && (i % 10) % 2 != 0 {\n      result\
    \ += 1;\n    }\n  }\n  result\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpjaxy_jt3.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822498
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    // Your code goes here\n  \
    \  nums.iter().filter(|&n| \n        n.abs() > 10 && n.abs() % 10 % 2 != 0 &&\
    \ n % 10 % 2 != 0).count() as isize\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `1`', /tmp/tmpqgalxon5.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822498
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count = 0;\n    for\
    \ num in nums {\n        if num > 10 && num % 2 != 0 && num / 10 % 2 != 0 && num\
    \ % 10 % 2 != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\n\
    fn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpuwwim95n.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822498
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    0\n}\n\nfn main() {\n    let\
    \ candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n\
    \    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpjglw53ey.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut res = 0;\n    for n\
    \ in nums {\n        if n > 10 && n > 9 && n % 2 == 1 {\n            res += 1;\n\
    \        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpj_uzsvuq.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822498
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    nums.iter().filter(|n| {\n\
    \        **n > 10 && **n % 2 == 1 && **n % 10 == 1\n    }).count() as isize\n\
    }\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpvazu64r0.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822498
- exit_code: 0
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count = 0;\n    for\
    \ i in nums {\n        let string = i.to_string();\n        let first = string.chars().nth(0).unwrap();\n\
    \        let last = string.chars().last().unwrap();\n        if i > 10 && (first.to_digit(10).unwrap()\
    \ % 2 == 1) && (last.to_digit(10).unwrap() % 2 == 1) {\n            count += 1;\n\
    \        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822498
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    // Write your code here\n \
    \   let mut count = 0;\n    for i in nums.iter() {\n        if i > &10 && i %\
    \ 2 != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpj5t5234j.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822498
- exit_code: 0
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count = 0;\n    for\
    \ num in nums {\n        let is_first_digit_odd = num / 10_isize.pow(num.to_string().len()\
    \ as u32 - 1) % 2 != 0;\n        let is_last_digit_odd = num % 10 % 2 != 0;\n\
    \        if num > 10 && is_first_digit_odd && is_last_digit_odd {\n          \
    \  count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822498
- exit_code: 1
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    nums.iter().filter(|&&n| {\n\
    \        n > 10 && n % 2 == 1 && n % 10 == n / 10.pow(n.to_string().len() as u32\
    \ - 1)\n    }).count() as isize\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0689]: can't call method `pow` on ambiguous numeric type `{integer}`\n\
    \ --> /tmp/tmp3mazdf81.rs:7:50\n  |\n7 |         n > 10 && n % 2 == 1 && n % 10\
    \ == n / 10.pow(n.to_string().len() as u32 - 1)\n  |                         \
    \                         ^^^\n  |\nhelp: you must specify a concrete type for\
    \ this numeric value, like `i32`\n  |\n7 |         n > 10 && n % 2 == 1 && n %\
    \ 10 == n / 10_i32.pow(n.to_string().len() as u32 - 1)\n  |                  \
    \                             ~~~~~~\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0689`.\n"
  stdout: ''
  timestamp: 1659822498
- exit_code: 0
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    nums.iter().filter(|&x| {\n\
    \        *x > 10 && x.to_string().chars().next().unwrap().to_digit(10).unwrap()\
    \ % 2 != 0\n    }).filter(|&x| {\n        x.to_string().chars().last().unwrap().to_digit(10).unwrap()\
    \ % 2 != 0\n    }).count() as isize\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822498
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    0\n}\n\nfn main() {\n    let\
    \ candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n\
    \    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpjglw53ey.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 1
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n  let count = \n    nums.iter()\n\
    \        .filter(|&num| (*num > 10) && isFirstAndLastDigitOdd(*num))\n       \
    \ .count();\n  return count as isize;\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `isFirstAndLastDigitOdd` in this scope\n\
    \ --> /tmp/tmpup5g7jya.rs:8:39\n  |\n8 |         .filter(|&num| (*num > 10) &&\
    \ isFirstAndLastDigitOdd(*num))\n  |                                       ^^^^^^^^^^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822498
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut cnt = 0;\n    for num\
    \ in nums {\n        if num > 10 {\n            let mut tmp = num;\n         \
    \   let first = tmp % 10;\n            tmp /= 10;\n            let last = tmp\
    \ % 10;\n            if first % 2 == 1 && last % 2 == 1 {\n                cnt\
    \ += 1;\n            }\n        }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmplhd4tzs6.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822498
- exit_code: 0
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count = 0;\n    for\
    \ num in nums {\n        let mut n = num;\n        let first = n % 10;\n     \
    \   while n >= 10 {\n            n /= 10;\n        }\n        if num > 10 && (first\
    \ % 2 == 1) && (n % 2 == 1) {\n            count += 1;\n        }\n    }\n   \
    \ count\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822498
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count = 0;\n    for\
    \ number in nums {\n        if number > 10 && number % 2 != 0 && number % 10 !=\
    \ 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]),\
    \ 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpjc231s92.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822498
- exit_code: 0
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count = 0;\n    for\
    \ i in nums {\n        if (i > 10) && (i.to_string().chars().next().unwrap().to_digit(10).unwrap()\
    \ % 2 != 0) && (i.to_string().chars().last().unwrap().to_digit(10).unwrap() %\
    \ 2 != 0) {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822498
- exit_code: 0
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    nums.iter().filter(|&x| *x\
    \ > 10 && x.to_string().chars().next().unwrap().to_digit(10).unwrap() % 2 != 0\
    \ && x.to_string().chars().rev().next().unwrap().to_digit(10).unwrap() % 2 !=\
    \ 0).count() as isize\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822498
- exit_code: 1
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut c = 0;\n    for i in\
    \ nums {\n        if i > 10 && is_odd(i / 10) && is_odd(i % 10) {\n          \
    \  c += 1;\n        }\n    }\n    c\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_odd` in this scope\n --> /tmp/tmpttso_jun.rs:8:22\n\
    \  |\n8 |         if i > 10 && is_odd(i / 10) && is_odd(i % 10) {\n  |       \
    \               ^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function\
    \ `is_odd` in this scope\n --> /tmp/tmpttso_jun.rs:8:40\n  |\n8 |         if i\
    \ > 10 && is_odd(i / 10) && is_odd(i % 10) {\n  |                            \
    \            ^^^^^^ not found in this scope\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822498
- exit_code: 1
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    nums.iter().filter(|x| isSpecial(*x)).count()\
    \ as isize\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `isSpecial` in this scope\n --> /tmp/tmpt2ci58om.rs:6:28\n\
    \  |\n6 |     nums.iter().filter(|x| isSpecial(*x)).count() as isize\n  |    \
    \                        ^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659822498
- exit_code: 0
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count = 0;\n    for\
    \ i in 0..nums.len() {\n        if nums[i] > 10 {\n            if nums[i] % 2\
    \ != 0 {\n                let s = nums[i].to_string();\n                let mut\
    \ v: Vec<char> = s.chars().collect();\n                let first = v[0].to_string().parse::<isize>().unwrap();\n\
    \                let last = v[v.len() - 1].to_string().parse::<isize>().unwrap();\n\
    \                if first % 2 != 0 && last % 2 != 0 {\n                    count\
    \ += 1;\n                }\n            }\n        }\n    }\n    count\n}\n\n\
    fn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822498
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    // let mut new_nums: Vec<isize>\
    \ = vec![];\n    let mut new_nums: isize = 0;\n    for num in nums {\n       \
    \ let first = num / 10;\n        let last = num % 10;\n        if num > 10 &&\
    \ first % 2 != 0 && last % 2 != 0 {\n            // new_nums.push(num);\n    \
    \        new_nums += 1;\n        }\n    }\n    // new_nums.len() as isize\n  \
    \  new_nums\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpmyse524j.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822498
- exit_code: 0
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut result = 0;\n    for\
    \ n in nums {\n        let mut first_digit = n;\n        while first_digit >=\
    \ 10 {\n            first_digit /= 10;\n        }\n        let first_odd = first_digit\
    \ % 2 == 1;\n        let last_odd = n % 2 == 1;\n        if n > 10 && first_odd\
    \ && last_odd {\n            result += 1;\n        }\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822498
- exit_code: 1
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut result = 0;\n    for\
    \ n in nums {\n        let fd = n / 10;\n        let ld = n % 10;\n        if\
    \ n > 10 && is_odd(fd) && is_odd(ld) {\n            result += 1;\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = specialFilter;\n   \
    \ assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_odd` in this scope\n  --> /tmp/tmpdv71h9du.rs:10:22\n\
    \   |\n10 |         if n > 10 && is_odd(fd) && is_odd(ld) {\n   |            \
    \          ^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function\
    \ `is_odd` in this scope\n  --> /tmp/tmpdv71h9du.rs:10:36\n   |\n10 |        \
    \ if n > 10 && is_odd(fd) && is_odd(ld) {\n   |                              \
    \      ^^^^^^ not found in this scope\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822498
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    0\n}\n\nfn main() {\n    let\
    \ candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n\
    \    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpjglw53ey.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 1
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count = 0;\n    for\
    \ num in nums {\n        if num > 10 && firstDigitIsOdd(num) && lastDigitIsOdd(num)\
    \ {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]),\
    \ 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `firstDigitIsOdd` in this scope\n -->\
    \ /tmp/tmpk6j3tg4y.rs:8:24\n  |\n8 |         if num > 10 && firstDigitIsOdd(num)\
    \ && lastDigitIsOdd(num) {\n  |                        ^^^^^^^^^^^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find function `lastDigitIsOdd` in this\
    \ scope\n --> /tmp/tmpk6j3tg4y.rs:8:48\n  |\n8 |         if num > 10 && firstDigitIsOdd(num)\
    \ && lastDigitIsOdd(num) {\n  |                                              \
    \  ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822498
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    0\n}\n\nfn main() {\n    let\
    \ candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n\
    \    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpjglw53ey.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 1
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    nums.iter().fold(0, |acc, x|\
    \ if x > &10 && is_first_digit_odd(*x) && is_last_digit_odd(*x) {acc + 1} else\
    \ {acc})\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_first_digit_odd` in this scope\n\
    \ --> /tmp/tmpccuo0esq.rs:6:48\n  |\n6 |     nums.iter().fold(0, |acc, x| if x\
    \ > &10 && is_first_digit_odd(*x) && is_last_digit_odd(*x) {acc + 1} else {acc})\n\
    \  |                                                ^^^^^^^^^^^^^^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find function `is_last_digit_odd` in this\
    \ scope\n --> /tmp/tmpccuo0esq.rs:6:74\n  |\n6 |     nums.iter().fold(0, |acc,\
    \ x| if x > &10 && is_first_digit_odd(*x) && is_last_digit_odd(*x) {acc + 1} else\
    \ {acc})\n  |                                                                \
    \          ^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659822498
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    nums.iter().filter(|&x| {\n\
    \        let mut a = *x;\n        let mut last = a % 10;\n        a /= 10;\n \
    \       let first = a % 10;\n        a /= 10;\n        last > 10 && (first % 2\
    \ != 0) && (last % 2 != 0)\n    }).count() as isize\n}\n\nfn main() {\n    let\
    \ candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n\
    \    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpkzrf_9nn.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822498
- exit_code: 0
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count = 0;\n    for\
    \ num in nums {\n        if num > 10 && num % 2 != 0 && num.to_string().chars().next().unwrap().to_digit(10).unwrap()\
    \ % 2 != 0\n                && num.to_string().chars().last().unwrap().to_digit(10).unwrap()\
    \ % 2 != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822498
- exit_code: 1
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count = 0;\n    for\
    \ i in 0..nums.len() {\n        if (nums[i] > 10) && (getFirstDigit(nums[i]) %\
    \ 2 != 0) && (getLastDigit(nums[i]) % 2 != 0) {\n            count += 1;\n   \
    \     }\n    }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `getFirstDigit` in this scope\n -->\
    \ /tmp/tmpnl_u7iyt.rs:8:31\n  |\n8 |         if (nums[i] > 10) && (getFirstDigit(nums[i])\
    \ % 2 != 0) && (getLastDigit(nums[i]) % 2 != 0) {\n  |                       \
    \        ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function\
    \ `getLastDigit` in this scope\n --> /tmp/tmpnl_u7iyt.rs:8:68\n  |\n8 |      \
    \   if (nums[i] > 10) && (getFirstDigit(nums[i]) % 2 != 0) && (getLastDigit(nums[i])\
    \ % 2 != 0) {\n  |                                                           \
    \         ^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822498
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    nums.iter().fold(0, |sum, &n|\
    \ {\n        if n > 10 && n % 2 == 1 && n / 10 % 2 == 1 && n % 10 == 1 {\n   \
    \         sum + 1\n        } else {\n            sum\n        }\n    })\n}\n\n\
    fn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmplm69_kg8.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822498
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut total: isize = 0;\n\
    \    for num in nums {\n        let first_digit = num / 10;\n        let last_digit\
    \ = num % 10;\n        if num > 10 && first_digit % 2 != 0 && last_digit % 2 !=\
    \ 0 {\n            total += 1;\n        }\n    }\n    total\n}\n\nfn main() {\n\
    \    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]),\
    \ 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpmoi06bar.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822498
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count = 0;\n    for\
    \ i in nums {\n        if i % 2 != 0 && i > 10 {\n            count += 1;\n  \
    \      }\n    }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpu6tvbeuu.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822498
- exit_code: 1
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut cnt = 0;\n    for i\
    \ in nums {\n        let mut s = i.to_string();\n        let first = s.remove(0);\n\
    \        let last = s.pop().unwrap();\n        if i > 10 && first % 2 != 0 &&\
    \ last % 2 != 0 {\n            cnt += 1;\n        }\n    }\n    cnt\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `char` by `{integer}`\n  --> /tmp/tmphcy5kqjl.rs:11:28\n\
    \   |\n11 |         if i > 10 && first % 2 != 0 && last % 2 != 0 {\n   |     \
    \                 ----- ^ - {integer}\n   |                      |\n   |     \
    \                 char\n\nerror[E0369]: cannot mod `char` by `{integer}`\n  -->\
    \ /tmp/tmphcy5kqjl.rs:11:45\n   |\n11 |         if i > 10 && first % 2 != 0 &&\
    \ last % 2 != 0 {\n   |                                        ---- ^ - {integer}\n\
    \   |                                        |\n   |                         \
    \               char\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659822498
- exit_code: 1
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    nums.iter().filter(|x| {\n\
    \        let first_digit = (x.clone() / 10);\n        let last_digit = (x.clone()\
    \ % 10);\n        x > &10 && first_digit % 2 != 0 && last_digit % 2 != 0\n   \
    \ }).count() as isize\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "warning: unnecessary parentheses around assigned value\n --> /tmp/tmp_p4rvqiw.rs:7:27\n\
    \  |\n7 |         let first_digit = (x.clone() / 10);\n  |                   \
    \        ^^^^^^^^^^^^^^^^ help: remove these parentheses\n  |\n  = note: `#[warn(unused_parens)]`\
    \ on by default\n\nwarning: unnecessary parentheses around assigned value\n -->\
    \ /tmp/tmp_p4rvqiw.rs:8:26\n  |\n8 |         let last_digit = (x.clone() % 10);\n\
    \  |                          ^^^^^^^^^^^^^^^^ help: remove these parentheses\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmp_p4rvqiw.rs:9:13\n  |\n9 |    \
    \     x > &10 && first_digit % 2 != 0 && last_digit % 2 != 0\n  |            \
    \ ^^^ expected `&isize`, found integer\n  |\n  = note: expected reference `&&isize`\n\
    \             found reference `&{integer}`\n\nerror: aborting due to previous\
    \ error; 2 warnings emitted\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822498
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count = 0;\n    for\
    \ num in nums {\n        if num > 10 {\n            let first = num / 10;\n  \
    \          let last = num % 10;\n            if first % 2 != 0 && last % 2 !=\
    \ 0 {\n                count += 1;\n            }\n        }\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpd5giw5j3.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822498
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut filtered: Vec<isize>\
    \ = Vec::new();\n    for x in nums {\n        if (x > 10) && (x % 2 != 0) && ((x\
    \ / 10) % 2 != 0) && ((x % 10) % 2 != 0) {\n            filtered.push(x);\n  \
    \      }\n    }\n    filtered.len() as isize\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpx4c1a40p.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822499
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    return 0;\n}\n\nfn main() {\n\
    \    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]),\
    \ 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp_nn2tqk9.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count = 0;\n    for\
    \ i in nums {\n        if (i > 10) && (i % 2 != 0) && ((i % 10) % 2 != 0) {\n\
    \            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let\
    \ candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n\
    \    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpothr1378.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822499
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    nums.iter().filter(|&num| {\n\
    \        // if the first digit is odd, last digit is odd, and the number is greater\
    \ than 10\n        (num.abs() > 10) && (num.abs() / 10 % 2 != 0) && (num.abs()\
    \ % 2 != 0)\n    }).count() as isize\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `1`', /tmp/tmpg92tjnxs.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822499
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count = 0;\n    for\
    \ i in nums {\n        if i % 2 != 0 && i > 10 {\n            let first = i /\
    \ 10;\n            let last = i % 10;\n            if (first % 2 != 0 && last\
    \ % 2 != 0) {\n                count += 1;\n            }\n        }\n    }\n\
    \    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpikehowof.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822499
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut n = 0;\n    for i in\
    \ nums {\n        if i > 10 && i % 2 != 0 && (i % 10) % 2 != 0 {\n           \
    \ n += 1;\n        }\n    }\n    n\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpvon0_2km.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822499
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count = 0;\n    for\
    \ i in nums {\n        if i > 10 && (i % 10 == 1 || i % 10 == 3 || i % 10 == 5\
    \ || i % 10 == 7 || i % 10 == 9)\n            && (i / 10 == 1 || i / 10 == 3 ||\
    \ i / 10 == 5 || i / 10 == 7 || i / 10 == 9) {\n            count += 1;\n    \
    \    }\n    }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpywfff0l9.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822499
- exit_code: 1
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    nums.iter().filter(|&x| x >\
    \ &10 && is_odd(x) && is_odd(last_digit(x))).count() as isize\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_odd` in this scope\n --> /tmp/tmpbyycx7kd.rs:6:40\n\
    \  |\n6 |     nums.iter().filter(|&x| x > &10 && is_odd(x) && is_odd(last_digit(x))).count()\
    \ as isize\n  |                                        ^^^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find function `is_odd` in this scope\n --> /tmp/tmpbyycx7kd.rs:6:53\n\
    \  |\n6 |     nums.iter().filter(|&x| x > &10 && is_odd(x) && is_odd(last_digit(x))).count()\
    \ as isize\n  |                                                     ^^^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find function `last_digit` in this\
    \ scope\n --> /tmp/tmpbyycx7kd.rs:6:60\n  |\n6 |     nums.iter().filter(|&x| x\
    \ > &10 && is_odd(x) && is_odd(last_digit(x))).count() as isize\n  |         \
    \                                                   ^^^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to 3 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822498
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count = 0;\n    for\
    \ i in nums {\n        if i > 10 && i % 2 != 0 && (i % 10) % 2 != 0 && i / 10\
    \ % 2 != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmp79onvced.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822499
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count = 0;\n    for\
    \ x in nums {\n        if x > 10 && x % 2 != 0 && x % 10 != 0 {\n            count\
    \ += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmprqptjbdw.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822499
- exit_code: 1
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    nums.iter().filter(|&x| is_better_than_10(*x)\
    \ && has_odd_digits(*x)).count() as isize\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_better_than_10` in this scope\n\
    \ --> /tmp/tmp9h0nw90u.rs:6:29\n  |\n6 |     nums.iter().filter(|&x| is_better_than_10(*x)\
    \ && has_odd_digits(*x)).count() as isize\n  |                             ^^^^^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find function `has_odd_digits`\
    \ in this scope\n --> /tmp/tmp9h0nw90u.rs:6:54\n  |\n6 |     nums.iter().filter(|&x|\
    \ is_better_than_10(*x) && has_odd_digits(*x)).count() as isize\n  |         \
    \                                             ^^^^^^^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822498
- exit_code: 1
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    nums.iter().filter(|x| {\n\
    \        let firstDigit = x.to_string().chars().next().unwrap().to_digit(10).unwrap();\n\
    \        let lastDigit = x.to_string().chars().last().unwrap().to_digit(10).unwrap();\n\
    \        firstDigit % 2 != 0 && lastDigit % 2 != 0 && *x > 10\n    }).count()\
    \ as isize\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmph0k6qnic.rs:9:59\n  |\n9 |\
    \         firstDigit % 2 != 0 && lastDigit % 2 != 0 && *x > 10\n  |          \
    \                                                 ^^\n  |                    \
    \                                       |\n  |                               \
    \                            expected `&isize`, found integer\n  |           \
    \                                                help: consider borrowing here:\
    \ `&10`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822498
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count = 0;\n    for\
    \ num in nums {\n        if num > 10 {\n            let mut tmp = num;\n     \
    \       let mut d = 1;\n            while tmp > 10 {\n                tmp /= 10;\n\
    \                d *= 10;\n            }\n            let first = tmp;\n     \
    \       let last = num - (first * d);\n            if first % 2 != 0 && last %\
    \ 2 != 0 {\n                count += 1;\n            }\n        }\n    }\n   \
    \ count\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmp43c4efnx.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822499
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count = 0;\n    for\
    \ i in nums {\n        if i > 10 && i%2 != 0 && i%10 != 0 {\n            count\
    \ = count + 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmp1xv5du3r.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822499
- exit_code: 1
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count = 0;\n    for\
    \ num in nums {\n        if num > 10 && first_digit(num) % 2 != 0 && last_digit(num)\
    \ % 2 != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `first_digit` in this scope\n --> /tmp/tmpjzn906j9.rs:8:24\n\
    \  |\n8 |         if num > 10 && first_digit(num) % 2 != 0 && last_digit(num)\
    \ % 2 != 0 {\n  |                        ^^^^^^^^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find function `last_digit` in this scope\n --> /tmp/tmpjzn906j9.rs:8:53\n\
    \  |\n8 |         if num > 10 && first_digit(num) % 2 != 0 && last_digit(num)\
    \ % 2 != 0 {\n  |                                                     ^^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 1
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut result = 0;\n    for\
    \ x in nums {\n        if x > 10 && check(x) {\n            result += 1;\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `check` in this scope\n --> /tmp/tmp0t9hgn5x.rs:8:22\n\
    \  |\n8 |         if x > 10 && check(x) {\n  |                      ^^^^^ not\
    \ found in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822498
- exit_code: 1
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    nums.iter().filter(|x| {\n\
    \        (x / 10) % 2 != 0 && *x % 2 != 0 && x % 10 != 0\n    }).count() as isize\n\
    }\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot divide `&&isize` by `{integer}`\n --> /tmp/tmpe52sjs0n.rs:7:12\n\
    \  |\n7 |         (x / 10) % 2 != 0 && *x % 2 != 0 && x % 10 != 0\n  |       \
    \   - ^ -- {integer}\n  |          |\n  |          &&isize\n  |\nhelp: `/` can\
    \ be used on `isize`, you can dereference `x`\n  |\n7 |         (*x / 10) % 2\
    \ != 0 && *x % 2 != 0 && x % 10 != 0\n  |          +\n\nerror[E0369]: cannot mod\
    \ `&&isize` by `{integer}`\n --> /tmp/tmpe52sjs0n.rs:7:47\n  |\n7 |         (x\
    \ / 10) % 2 != 0 && *x % 2 != 0 && x % 10 != 0\n  |                          \
    \                   - ^ -- {integer}\n  |                                    \
    \         |\n  |                                             &&isize\n  |\nhelp:\
    \ `%` can be used on `isize`, you can dereference `x`\n  |\n7 |         (x / 10)\
    \ % 2 != 0 && *x % 2 != 0 && *x % 10 != 0\n  |                               \
    \              +\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659822498
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut res = 0;\n    for x\
    \ in nums {\n        if x < 10 {\n            continue;\n        }\n        let\
    \ mut x = x;\n        let first = x % 10;\n        x /= 10;\n        let last\
    \ = x % 10;\n        x /= 10;\n        if (first + last) % 2 == 1 {\n        \
    \    res += 1;\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `2`', /tmp/tmp_pgxv9ft.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822499
- exit_code: 1
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut newNums: Vec<isize>\
    \ = vec![];\n    for num in nums {\n        if first_and_last_odd(num) && num\
    \ > 10 {\n            newNums.push(num);\n        }\n    }\n    newNums.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `first_and_last_odd` in this scope\n\
    \ --> /tmp/tmpt52fucsr.rs:8:12\n  |\n8 |         if first_and_last_odd(num) &&\
    \ num > 10 {\n  |            ^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822498
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count = 0;\n    for\
    \ n in nums {\n        if n > 10 && n % 2 != 0 && n / 10 % 2 != 0 && n % 10 %\
    \ 2 != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmplrkwwqk1.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut result = 0;\n    for\
    \ num in nums {\n        if num > 10 && num % 2 != 0 && num / 10 % 2 != 0 && num\
    \ % 10 % 2 != 0 {\n            result += 1;\n        }\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmp70ybvxod.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822499
- exit_code: 0
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n\tlet mut count = 0;\n\tfor i in\
    \ nums {\n\t\tlet j = i.to_string();\n\t\tif i > 10 &&\n\t\t\tj.chars().nth(0).unwrap().to_digit(10).unwrap()\
    \ % 2 != 0 &&\n\t\t\tj.chars().last().unwrap().to_digit(10).unwrap() % 2 != 0\
    \ {\n\t\t\tcount += 1;\n\t\t}\n\t}\n\tcount\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822499
- exit_code: 0
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count = 0;\n    for\
    \ i in nums {\n        if i > 10 && i.to_string().len() > 1 &&\n           i.to_string().chars().nth(0).unwrap().to_digit(10).unwrap()\
    \ % 2 != 0 &&\n           i.to_string().chars().last().unwrap().to_digit(10).unwrap()\
    \ % 2 != 0\n        {\n            count += 1;\n        }\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822499
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    0\n}\n\nfn main() {\n    let\
    \ candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n\
    \    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpjglw53ey.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 1
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    // if nums.len() == 0 {\n \
    \   //     return 0;\n    // }\n    // let mut count = 0;\n    // for i in 0..nums.len()\
    \ {\n    //     if nums[i] > 10 {\n    //         let mut n = nums[i];\n    //\
    \         if n % 2 == 1 {\n    //             n /= 10;\n    //             while\
    \ n != 0 {\n    //                 if n % 2 == 1 {\n    //                   \
    \  count += 1;\n    //                     break;\n    //                 }\n\
    \    //                 n /= 10;\n    //             }\n    //         }\n   \
    \ //     }\n    // }\n    // count\n    nums.iter().filter(|&&x| x > 10 && isValidNumber(x)).count()\
    \ as isize\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `isValidNumber` in this scope\n  -->\
    \ /tmp/tmpu13ng1au.rs:26:40\n   |\n26 |     nums.iter().filter(|&&x| x > 10 &&\
    \ isValidNumber(x)).count() as isize\n   |                                   \
    \     ^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822499
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut res = 0;\n    for i\
    \ in nums {\n        let s = i.to_string();\n        let first = s.chars().nth(0).unwrap().to_digit(10).unwrap();\n\
    \        let last = s.chars().rev().nth(0).unwrap().to_digit(10).unwrap();\n \
    \       if i > 10 && first % 2 != 0 && last % 2 != 0 {\n            res += 1;\n\
    \        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmphefyp1vi.rs:9:60

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822499
- exit_code: 0
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    // code here\n    nums.iter().filter(|&n|\
    \ (n > &10) && (n.to_string().chars().next().unwrap().to_digit(10).unwrap() %\
    \ 2 != 0) && (n.to_string().chars().last().unwrap().to_digit(10).unwrap() % 2\
    \ != 0)).count() as isize\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822499
- exit_code: 0
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    // your code here\n    nums.iter().filter(|&&x|\
    \ x > 10 && x.to_string().chars().next().unwrap().to_digit(10).unwrap() % 2 !=\
    \ 0 && x.to_string().chars().rev().next().unwrap().to_digit(10).unwrap() % 2 !=\
    \ 0).count() as isize\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822499
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count = 0;\n    for\
    \ num in nums {\n        if num > 10 {\n            if (num % 10) % 2 != 0 &&\
    \ (num / 10) % 2 != 0 {\n                count += 1;\n            }\n        }\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmp_9qmlzqd.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822499
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    0\n}\n\nfn main() {\n    let\
    \ candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n\
    \    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpjglw53ey.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    nums.iter().fold(0, |acc, x|\
    \ {\n        if x > &10 && (x / 10) % 2 != 0 && x % 2 != 0 {\n            acc\
    \ + 1\n        } else {\n            acc\n        }\n    })\n}\n\nfn main() {\n\
    \    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]),\
    \ 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpwe8gu4e3.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822499
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut ret = 0;\n    for n\
    \ in nums {\n        if n >= 10 && n % 2 == 1 && n % 10 == 1 {\n            ret\
    \ += 1;\n        }\n    }\n    ret\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp41lr8tef.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822499
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n\tlet mut count = 0;\n\tfor i in\
    \ nums {\n\t\tif i > 10 && (i % 10) % 2 != 0 && i / 10 % 2 != 0 {\n\t\t\tcount\
    \ += 1;\n\t\t}\n\t}\n\tcount\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpcrilqyim.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822499
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut counter = 0;\n    for\
    \ num in nums {\n        if num > 10 && num % 2 != 0 && (num % 10) % 2 != 0 {\n\
    \            counter += 1;\n        }\n    }\n    counter\n}\n\nfn main() {\n\
    \    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]),\
    \ 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpnf1hxctg.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822499
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    0\n}\n\nfn main() {\n    let\
    \ candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n\
    \    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpjglw53ey.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count = 0;\n    for\
    \ num in nums {\n        if num > 10 {\n            let first = num / 10;\n  \
    \          let last = num % 10;\n            if first % 2 != 0 && last % 2 !=\
    \ 0 {\n                count += 1;\n            }\n        }\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpd5giw5j3.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822498
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count = 0;\n    for\
    \ n in nums {\n        if n % 2 != 0 &&\n            n.to_string().chars().next().unwrap().to_digit(10).unwrap()\
    \ % 2 != 0 &&\n            n.to_string().chars().last().unwrap().to_digit(10).unwrap()\
    \ % 2 != 0 &&\n            n > 10 {\n            count += 1;\n        }\n    }\n\
    \    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmp9lsx3fj9.rs:9:64

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822499
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut cnt: isize = 0;\n \
    \   for n in nums {\n        if n > 10 && n % 2 == 1 && n / 10 % 2 == 1 {\n  \
    \          cnt += 1;\n        }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmp794wbad9.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822499
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count = 0;\n    for\
    \ n in nums {\n        let mut first_digit = n / 10;\n        let mut last_digit\
    \ = n % 10;\n        if n > 10 && first_digit % 2 != 0 && last_digit % 2 != 0\
    \ {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]),\
    \ 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmphw9syzw0.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822499
- exit_code: 1
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count = 0;\n    for\
    \ n in nums {\n        let string = n.to_string();\n        let mut split_str\
    \ = string.split(\"\");\n        let first = split_str.next().unwrap();\n    \
    \    let last = split_str.next_back().unwrap();\n        if n > 10 && first.parse::<isize>().unwrap()\
    \ % 2 != 0 && last.parse::<isize>().unwrap() % 2 != 0 {\n            count +=\
    \ 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `next_back` exists for struct `std::str::Split<'_,\
    \ &str>`, but its trait bounds were not satisfied\n   --> /tmp/tmpyca6jm0m.rs:11:30\n\
    \    |\n11  |           let last = split_str.next_back().unwrap();\n    |    \
    \                            ^^^^^^^^^ method cannot be called on `std::str::Split<'_,\
    \ &str>` due to unsatisfied trait bounds\n    |\n    = note: the following trait\
    \ bounds were not satisfied:\n            `StrSearcher<'_, '_>: DoubleEndedSearcher<'_>`\n\
    \            which is required by `std::str::Split<'_, &str>: DoubleEndedIterator`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659822499
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let count = nums.iter().fold(0,\
    \ |acc, &x| {\n        let mut x = x;\n        let mut last = x % 10;\n      \
    \  let mut first = last;\n        while x >= 10 {\n            x /= 10;\n    \
    \    }\n        first = x;\n        if x % 2 != 0 && last % 2 != 0 && x >= 10\
    \ {\n            acc + 1\n        } else {\n            acc\n        }\n    });\n\
    \    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpc6j5bwer.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822499
- exit_code: 1
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count = 0;\n    for\
    \ num in nums {\n        if is_special(num) {\n            count += 1;\n     \
    \   }\n    }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_special` in this scope\n --> /tmp/tmp_7qk9f66.rs:8:12\n\
    \  |\n8 |         if is_special(num) {\n  |            ^^^^^^^^^^ not found in\
    \ this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822499
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    return nums.iter().filter(|&x|\
    \ {\n        if *x > 10 {\n            if *x % 2 == 1 {\n                let mut\
    \ num = *x;\n                num /= 10;\n                while num > 0 {\n   \
    \                 if num == 1 {\n                        return true;\n      \
    \              }\n                    num /= 10;\n                }\n        \
    \    }\n        }\n        return false;\n    }).collect::<Vec<&isize>>().len()\
    \ as isize;\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpm7mla0yz.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822499
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    // write your code here\n \
    \   return 0;\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpp0iv279c.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822499
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let res = nums.iter().filter(|&n|\
    \ {\n        let first = n / 10;\n        let last = n % 10;\n        first %\
    \ 2 != 0 && last % 2 != 0 && *n > 10\n    }).count();\n    res as isize\n}\n\n\
    fn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpv_0sa0wi.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822499
- exit_code: 0
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut counter = 0;\n    for\
    \ i in nums {\n        if i > 10 && (i.to_string().chars().next().unwrap().to_digit(10).unwrap()%2!=0)\
    \ && (i.to_string().chars().last().unwrap().to_digit(10).unwrap()%2!=0) {\n  \
    \          counter+=1;\n        }\n    }\n    counter\n}\n\nfn main() {\n    let\
    \ candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n\
    \    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822499
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    0\n}\n\nfn main() {\n    let\
    \ candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n\
    \    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpjglw53ey.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822497
- exit_code: 1
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let filtered = nums.iter().filter(|&n|\
    \ {\n        let first = n / 10;\n        let last = n % 10;\n        n > &10\
    \ && is_odd(first) && is_odd(last)\n    });\n    return filtered.count() as isize;\n\
    }\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_odd` in this scope\n --> /tmp/tmp2nn1luxu.rs:9:20\n\
    \  |\n9 |         n > &10 && is_odd(first) && is_odd(last)\n  |              \
    \      ^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `is_odd`\
    \ in this scope\n --> /tmp/tmp2nn1luxu.rs:9:37\n  |\n9 |         n > &10 && is_odd(first)\
    \ && is_odd(last)\n  |                                     ^^^^^^ not found in\
    \ this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822499
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count = 0;\n    for\
    \ i in nums {\n        if i > 10 && i % 2 != 0 && (i % 10) % 2 != 0 && (i / 10)\
    \ % 2 != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmp6v__ub5g.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822499
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let filtered_nums: Vec<isize>\
    \ = nums.iter().filter(|&n| {\n        n > &10 &&\n        (*n / 10) % 2 != 0\
    \ &&\n        (*n % 10) % 2 != 0\n    }).cloned().collect();\n    filtered_nums.len()\
    \ as isize\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpb9vchk2h.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822499
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n  nums.iter().filter(|&n| {\n \
    \   let num = *n;\n    let first = (num / 10) % 10;\n    let last = num % 10;\n\
    \    num > 10 && (first % 2 != 0 && last % 2 != 0)\n  }).count() as isize\n}\n\
    \nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmp1o_myfv2.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822499
- exit_code: 0
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    return nums.iter().filter(|&x|\n\
    \        x > &10\n        && x.to_string().chars().nth(0).unwrap().to_digit(10).unwrap()\
    \ % 2 == 1\n        && x.to_string().chars().last().unwrap().to_digit(10).unwrap()\
    \ % 2 == 1\n    ).count() as isize;\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822499
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count = 0;\n    for\
    \ n in nums {\n        if n > 10 && n % 2 != 0 && n % 10 != 0 {\n            count\
    \ += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpg5s0zia3.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822499
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    // Add your code here\n   \
    \ 0\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpkfkpkz53.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822499
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count = 0;\n    for\
    \ i in nums {\n        if i > 10 && i % 2 != 0 && (i / 10) % 2 != 0 && i % 10\
    \ != 0 && i % 10 != 8 {\n            count += 1;\n        }\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpyjoz323h.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822499
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut result = 0;\n    for\
    \ n in nums {\n        if n > 10 && n % 2 != 0 && n % 10 != 0 {\n            result\
    \ += 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `2`', /tmp/tmpmx3s3cvv.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822499
- exit_code: 0
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    // let nums = vec![0, 11, 20,\
    \ 30, 8, 9, 25, 13, 15, 9];\n    let mut cnt = 0;\n    for num in nums {\n   \
    \     if num > 10 && num % 2 == 1 {\n            let mut num_cpy = num;\n    \
    \        let first_digit = num_cpy % 10;\n            while num_cpy > 9 {\n  \
    \              num_cpy /= 10;\n            }\n            if first_digit % 2 ==\
    \ 1 && num_cpy % 2 == 1 {\n                cnt += 1;\n            }\n        }\n\
    \    }\n    cnt\n}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
    \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n  \
    \  assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43,\
    \ -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75,\
    \ 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822499
- exit_code: 0
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count = 0;\n    for\
    \ num in nums {\n        if num > 10 {\n            let last_digit = num % 10;\n\
    \            let mut first_digit = num;\n            while first_digit > 9 {\n\
    \                first_digit /= 10;\n            }\n            if first_digit\
    \ % 2 != 0 && last_digit % 2 != 0 {\n                count += 1;\n           \
    \ }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = specialFilter;\n\
    \    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822499
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut result = 0;\n    for\
    \ i in nums {\n        let first_digit = i.to_string().chars().nth(0).unwrap().to_digit(10).unwrap();\n\
    \        let last_digit = i.to_string().chars().last().unwrap().to_digit(10).unwrap();\n\
    \        if i > 10 && first_digit % 2 != 0 && last_digit % 2 != 0 {\n        \
    \    result += 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15,\
    \ -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33, -2, -3, 45, 21, 109]),\
    \ 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121, 109]), 4);\n    assert_eq!(candidate(vec![71,\
    \ -2, -33, 75, 21, 19]), 3);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmp_1m8i32g.rs:8:78

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822499
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count = 0;\n    for\
    \ num in nums {\n        let first_digit = num / 10;\n        let last_digit =\
    \ num % 10;\n        if num > 10 && (first_digit % 2 != 0) && (last_digit % 2\
    \ != 0) {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmp972lq0il.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822499
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut result = 0;\n    for\
    \ num in nums {\n        if num > 10 {\n            if num % 2 == 1 {\n      \
    \          if (num / 10) % 2 == 1 {\n                    result += 1;\n      \
    \          }\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2, 1, -5]),\
    \ 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmpvr1qhqmd.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822499
- exit_code: 0
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    let mut count = 0;\n    for\
    \ num in nums {\n        if num > 10 && num.to_string().chars().last().unwrap().to_digit(10).unwrap()\
    \ % 2 != 0 \n            && num.to_string().chars().next().unwrap().to_digit(10).unwrap()\
    \ % 2 != 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822499
- exit_code: 101
  program: "/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    fn specialFilter(nums: Vec<isize>) -> isize {\n    nums.iter().filter(|&n| n >\
    \ &10 && (n % 2 == 1 && (*n / 10) % 2 == 1)).count() as isize\n}\n\nfn main()\
    \ {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5, -2,\
    \ 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
    \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125,\
    \ 121, 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n\
    \    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmp4nuqbmd1.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822499
