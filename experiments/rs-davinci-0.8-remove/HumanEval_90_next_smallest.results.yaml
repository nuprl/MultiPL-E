language: rs
name: HumanEval_90_next_smallest
results:
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    unimplemented!()\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpd7l60l62.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823188
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    // TODO: implement me!\n    None\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `None`,\n right: `Some(2)`', /tmp/tmptip5_dtx.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823188
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = None;\n    let mut smallest_2nd = None;\n    for i in\
    \ lst {\n        match smallest {\n            None => smallest = Some(i),\n \
    \           Some(x) => {\n                if i > x {\n                    smallest_2nd\
    \ = smallest;\n                    smallest = Some(i);\n                } else\
    \ if smallest_2nd.is_none() || (i > smallest_2nd.unwrap()) {\n               \
    \     smallest_2nd = Some(i);\n                }\n            }\n        }\n \
    \   }\n    smallest_2nd\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(4)`,\n right: `Some(2)`', /tmp/tmpijzi0iiz.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823188
- exit_code: 0
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \  let mut n = lst.len();\n  if n < 2 {\n    return None;\n  }\n  let mut smallest:\
    \ isize = lst[0];\n  let mut next_smallest: isize = lst[1];\n  for i in 1..n {\n\
    \    if lst[i] < smallest {\n      next_smallest = smallest;\n      smallest =\
    \ lst[i];\n    } else if lst[i] < next_smallest {\n      next_smallest = lst[i];\n\
    \    }\n  }\n  if next_smallest == smallest {\n    return None;\n  }\n  return\
    \ Some(next_smallest);\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823188
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    //let mut lst2 = lst.clone();\n    let mut it = lst.iter();\n    let head\
    \ = it.next();\n    let mut v1 = it.min();\n    let mut v2 = it.min();\n    if\
    \ let Some(h) = head {\n        v1 = v1.and_then(|v| if v < h { Some(v) } else\
    \ { None });\n        v2 = v2.and_then(|v| if v < h { Some(v) } else { None });\n\
    \    }\n    if let Some(v) = v1 {\n        v2 = v2.and_then(|v2| if v2 > v { Some(v2)\
    \ } else { None });\n    }\n    v2\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdhde0b9s.rs:17:5\n   |\n\
    4  | fn next_smallest(lst: Vec<isize>) -> Option<isize> {\n   |              \
    \                        ------------- expected `Option<isize>` because of return\
    \ type\n...\n17 |     v2\n   |     ^^ expected `isize`, found `&isize`\n   |\n\
    \   = note: expected enum `Option<isize>`\n              found enum `Option<&isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659823188
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    // BEGIN\n    let mut res = None;\n    let mut min = None;\n    for n in\
    \ lst {\n        if min.is_none() || n < min.unwrap() {\n            res = min;\n\
    \            min = Some(n);\n        } else if res.is_none() || n < res.unwrap()\
    \ {\n            res = Some(n);\n        }\n    }\n    res\n    // END\n}\n\n\
    fn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmp8lql7xyw.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823188
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    unimplemented!()\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpd7l60l62.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823188
- exit_code: 0
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut vec = lst.clone();\n    vec.sort();\n    let mut len = vec.len();\n\
    \    if len < 2 {\n        return None;\n    }\n    let mut first = 0;\n    let\
    \ mut second = 1;\n    while second < len && vec[first] == vec[second] {\n   \
    \     first += 1;\n        second += 1;\n    }\n    if second == len {\n     \
    \   return None;\n    }\n    return Some(vec[second]);\n}\n\nfn main() {\n   \
    \ let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]),\
    \ Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823188
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    if lst.len() < 2 {\n        return None;\n    }\n    lst.into_iter().min().unwrap()\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpmi_0854x.rs:8:5\n  |\n4 |\
    \ fn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  |                  \
    \                    ------------- expected `Option<isize>` because of return\
    \ type\n...\n8 |     lst.into_iter().min().unwrap()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |     |\n  |     expected enum `Option`, found `isize`\n  |     help: try using\
    \ a variant of the expected enum: `Some(lst.into_iter().min().unwrap())`\n  |\n\
    \  = note: expected enum `Option<isize>`\n             found type `isize`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659823188
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut min = isize::max_value();\n    let mut next_min = isize::max_value();\n\
    \    for i in lst {\n        if i < min {\n            next_min = min;\n     \
    \       min = i;\n        } else if i < next_min {\n            next_min = i;\n\
    \        }\n    }\n    if next_min == isize::max_value() {\n        None\n   \
    \ } else {\n        Some(next_min)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmpcr7bxbcm.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823188
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    if lst.len() < 2 {\n        return None;\n    }\n    let mut v = lst;\n \
    \   v.sort();\n    Some(v[1])\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmp431es8hl.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823188
- exit_code: 0
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    if lst.len() <= 1 {\n        return None;\n    }\n    let mut smallest =\
    \ lst[0];\n    let mut next_smallest = None;\n    for x in lst {\n        if x\
    \ < smallest {\n            next_smallest = Some(smallest);\n            smallest\
    \ = x;\n        } else if let Some(n) = next_smallest {\n            if x < n\
    \ {\n                next_smallest = Some(x);\n            }\n        } else if\
    \ x > smallest {\n            next_smallest = Some(x);\n        }\n    }\n   \
    \ next_smallest\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823188
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut min = lst[0];\n    let mut min2 = lst[0];\n    for x in lst {\n \
    \       if x < min {\n            min2 = min;\n            min = x;\n        }\
    \ else if x < min2 {\n            min2 = x;\n        }\n    }\n    if min2 ==\
    \ min {\n        None\n    } else {\n        Some(min2)\n    }\n}\n\nfn main()\
    \ {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `None`,\n right: `Some(2)`', /tmp/tmpgr_kaflb.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823188
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut lst = lst;\n    lst.sort();\n    let lst_len = lst.len();\n    if\
    \ lst_len > 1 {\n        Some(lst[1])\n    } else {\n        None\n    }\n}\n\n\
    fn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmpu34jaata.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823188
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    // TODO: implement it\n    None\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `None`,\n right: `Some(2)`', /tmp/tmprh_nv5my.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823188
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    unimplemented!()\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpd7l60l62.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823188
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    if lst.len() <= 1 {\n        return None;\n    }\n    let mut smallest =\
    \ lst[0];\n    let mut next_smallest = None;\n    for item in lst.iter() {\n \
    \       if item < &smallest {\n            next_smallest = Some(smallest);\n \
    \           smallest = *item;\n        } else if next_smallest.is_none() || item\
    \ < &next_smallest.unwrap() {\n            next_smallest = Some(*item);\n    \
    \    }\n    }\n    next_smallest\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `Some(2)`', /tmp/tmp5mp7vq7o.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823188
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut i = lst.iter();\n    let mut smallest = i.next().unwrap();\n    let\
    \ mut next_smallest = match i.next() {\n        Some(ns) => ns,\n        None\
    \ => return None,\n    };\n    for elem in i {\n        if elem < smallest {\n\
    \            next_smallest = smallest;\n            smallest = elem;\n       \
    \ } else if elem < next_smallest {\n            next_smallest = elem;\n      \
    \  }\n    }\n    Some(*next_smallest)\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(3)`,\n right: `Some(2)`', /tmp/tmpxh0dq85j.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823188
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    lst.into_iter().fold(None, |acc, next| {\n        match acc {\n         \
    \   None => Some(next),\n            Some(acc) => {\n                if next <\
    \ acc {\n                    Some(next)\n                } else {\n          \
    \          Some(acc)\n                }\n            }\n        }\n    })\n}\n\
    \nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `Some(2)`', /tmp/tmps6mgj9m2.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823188
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    if lst.len() < 2 {\n        return None;\n    }\n    let mut temp = lst;\n\
    \    temp.sort();\n    Some(temp[1])\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmpovlujwor.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823188
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    //let mut sorted_list = lst.clone();\n    //sorted_list.sort();\n    //let\
    \ l = sorted_list.len();\n    //if l < 2 {\n    //    None\n    //} else {\n \
    \   //    Some(sorted_list[1])\n    //}\n    let mut min = None;\n    let mut\
    \ second_min = None;\n    for num in lst {\n        if let Some(x) = min {\n \
    \           if num < x {\n                second_min = min;\n                min\
    \ = Some(num);\n            } else if let Some(y) = second_min {\n           \
    \     if num < y {\n                    second_min = Some(num);\n            \
    \    }\n            } else {\n                second_min = Some(num);\n      \
    \      }\n        } else {\n            min = Some(num);\n        }\n    }\n \
    \   second_min\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmpva508n7p.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823188
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut min = None;\n    let mut min2 = None;\n    for x in lst {\n     \
    \   if min.is_none() || x < min.unwrap() {\n            min2 = min;\n        \
    \    min = Some(x);\n        } else if min2.is_none() || x < min2.unwrap() {\n\
    \            min2 = Some(x);\n        }\n    }\n    min2\n}\n\nfn main() {\n \
    \   let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4,\
    \ 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n \
    \   assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmpecf8dplt.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823188
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    // Unwrap option, then remove smallest value, then get next value of new\
    \ lst.\n    // This will work, but is not ideal.\n    let mut new_lst = lst.clone();\n\
    \    let min = new_lst.iter().min().unwrap();\n    new_lst.remove_item(min);\n\
    \    match new_lst.iter().min() {\n        Some(x) => Some(*x),\n        None\
    \ => None,\n    }\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `remove_item` found for struct `Vec<isize>`\
    \ in the current scope\n --> /tmp/tmpoesrtq2k.rs:9:13\n  |\n9 |     new_lst.remove_item(min);\n\
    \  |             ^^^^^^^^^^^ method not found in `Vec<isize>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659823188
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    // You're not supposed to use any library functions for this one.\n    let\
    \ mut sorted = lst.clone();\n    sorted.sort();\n    if sorted.len() >= 2 {\n\
    \        return Some(sorted[1]);\n    }\n    return None;\n}\n\nfn main() {\n\
    \    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4,\
    \ 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n \
    \   assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmpgovc53xu.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823188
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut lst = lst;\n    lst.sort();\n    match lst.get(1) {\n        Some(v)\
    \ => Some(*v),\n        None => None,\n    }\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmpqg49h9r2.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823188
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = None;\n    let mut next_smallest = None;\n    for item\
    \ in lst {\n        if smallest.is_none() || item < smallest.unwrap() {\n    \
    \        next_smallest = smallest;\n            smallest = Some(item);\n     \
    \   } else if next_smallest.is_none() || item < next_smallest.unwrap() {\n   \
    \         next_smallest = Some(item);\n        }\n    }\n    next_smallest\n}\n\
    \nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmpvi4lrqi3.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823188
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let (min1, min2, _) = lst.iter().fold((None, None, isize::max_value()), |(min1,\
    \ min2, prev), &curr| {\n        if prev < curr {\n            (min1, min2, curr)\n\
    \        } else if min1.is_none() || min1.unwrap() > curr {\n            (Some(curr),\
    \ min1, curr)\n        } else if min2.is_none() || min2.unwrap() > curr {\n  \
    \          (min1, Some(curr), curr)\n        } else {\n            (min1, min2,\
    \ curr)\n        }\n    });\n    min2\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `None`,\n right: `Some(2)`', /tmp/tmpazvn78cc.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823189
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut min = isize::max_value();\n    let mut sec_min = isize::max_value();\n\
    \    for i in lst {\n        if i < min {\n            sec_min = min;\n      \
    \      min = i;\n        } else if i < sec_min {\n            sec_min = i;\n \
    \       }\n    }\n    if sec_min == isize::max_value() {\n        None\n    }\
    \ else {\n        Some(sec_min)\n    }\n}\n\nfn main() {\n    let candidate =\
    \ next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n \
    \   assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmpi3ha4ti_.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823189
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    // Replace this placeholder with your implementation\n    return None;\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `None`,\n right: `Some(2)`', /tmp/tmpmhkeiko0.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823189
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut lst = lst;\n    lst.sort();\n    let first = lst[0];\n    let second\
    \ = lst[1];\n    for i in lst {\n        if i != first && i != second {\n    \
    \        return Some(i);\n        }\n    }\n    None\n}\n\nfn main() {\n    let\
    \ candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(3)`,\n right: `Some(2)`', /tmp/tmpknkbhemu.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823189
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut val: isize = 0;\n    for item in lst {\n        if val == 0 {\n \
    \           val = item;\n        } else if item < val {\n            return Some(val);\n\
    \        } else if item > val {\n            val = item;\n        }\n    }\n \
    \   return None;\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `None`,\n right: `Some(2)`', /tmp/tmprder216v.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823189
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut lst = lst;\n    lst.sort();\n    let mut my_max = isize::min_value();\n\
    \    let mut my_second_max = isize::min_value();\n    for v in lst {\n       \
    \ if v > my_max {\n            my_second_max = my_max;\n            my_max = v;\n\
    \        } else if v > my_second_max {\n            my_second_max = v;\n     \
    \   }\n    }\n    if my_second_max == isize::min_value() {\n        None\n   \
    \ } else {\n        Some(my_second_max)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(4)`,\n right: `Some(2)`', /tmp/tmp6kth1aa1.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823189
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    if lst.len() < 2 {\n        return None;\n    }\n    let mut smallest = isize::MAX;\n\
    \    let mut next_smallest = isize::MAX;\n    for &i in &lst {\n        if i <\
    \ smallest {\n            next_smallest = smallest;\n            smallest = i;\n\
    \        } else if i < next_smallest {\n            next_smallest = i;\n     \
    \   }\n    }\n    if next_smallest == isize::MAX {\n        None\n    } else {\n\
    \        Some(next_smallest)\n    }\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmp9ruwc3uv.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823189
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut clone = lst.clone();\n    clone.sort();\n    if clone.len() <= 1\
    \ {\n        return None;\n    }\n    Some(clone[1])\n}\n\nfn main() {\n    let\
    \ candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmp2w_u_f5u.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823189
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    if lst.len() < 2 {\n        return None;\n    }\n    let mut smallest = lst[0];\n\
    \    let mut next_smallest = lst[1];\n    for &n in lst.iter().skip(2) {\n   \
    \     if n < smallest {\n            next_smallest = smallest;\n            smallest\
    \ = n;\n        } else if n < next_smallest {\n            next_smallest = n;\n\
    \        }\n    }\n    Some(next_smallest)\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(3)`,\n right: `Some(2)`', /tmp/tmprwx0g9u_.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823189
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut min = isize::max_value();\n    let mut second_min = isize::max_value();\n\
    \    for element in lst {\n        if element < min {\n            second_min\
    \ = min;\n            min = element;\n        } else if element < second_min {\n\
    \            second_min = element;\n        }\n    }\n    if second_min == isize::max_value()\
    \ {\n        None\n    } else {\n        Some(second_min)\n    }\n}\n\nfn main()\
    \ {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmpci3u4_wu.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823189
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    match lst.len() {\n        0 => None,\n        1 => None,\n        _ => {\n\
    \            let mut mi = lst[0];\n            let mut smi = lst[1];\n       \
    \     for i in 2..lst.len() {\n                let t = lst[i];\n             \
    \   if t < mi {\n                    smi = mi;\n                    mi = t;\n\
    \                } else if t < smi {\n                    smi = t;\n         \
    \       }\n            }\n            Some(smi)\n        }\n    }\n}\n\nfn main()\
    \ {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(3)`,\n right: `Some(2)`', /tmp/tmpx3zd6h3b.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823189
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut lst_iter = lst.iter();\n    let mut smallest = lst_iter.next().unwrap();\n\
    \    let mut second_smallest = lst_iter.next().unwrap();\n    if second_smallest\
    \ < smallest {\n        let tmp = smallest;\n        smallest = second_smallest;\n\
    \        second_smallest = tmp;\n    }\n    for val in lst_iter {\n        if\
    \ val < smallest {\n            second_smallest = smallest;\n            smallest\
    \ = val;\n        } else if val < second_smallest {\n            second_smallest\
    \ = val;\n        }\n    }\n    if smallest == second_smallest {\n        None\n\
    \    } else {\n        Some(*second_smallest)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmp8d1zebrf.rs:6:40

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823189
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut lst = lst;\n    lst.sort();\n    lst.get(1).cloned()\n}\n\nfn main()\
    \ {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmp02037kt_.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823189
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    unimplemented!()\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpd7l60l62.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823188
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut lst = lst;\n    lst.sort();\n    if lst.len() >= 2 {\n        Some(lst[1])\n\
    \    } else {\n        None\n    }\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmpv1546d95.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823189
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    lst.iter().enumerate().sorted_by(|(_, x), (_, y)| x.cmp(y)).nth(1).map(|(_,\
    \ x)| *x)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sorted_by` found for struct `Enumerate`\
    \ in the current scope\n --> /tmp/tmpvvtxvikj.rs:5:28\n  |\n5 |     lst.iter().enumerate().sorted_by(|(_,\
    \ x), (_, y)| x.cmp(y)).nth(1).map(|(_, x)| *x)\n  |                         \
    \   ^^^^^^^^^ method not found in `Enumerate<std::slice::Iter<'_, isize>>`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659823189
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut sorted = lst.clone();\n    sorted.sort();\n    match sorted.get(1)\
    \ {\n        Some(x) => Some(*x),\n        None => None,\n    }\n}\n\nfn main()\
    \ {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmpx4b1uk18.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823189
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst[0];\n    let mut second_smallest = None;\n    for\
    \ number in lst {\n        if number < smallest {\n            smallest = number;\n\
    \        } else if second_smallest.is_none() || number < second_smallest.unwrap()\
    \ {\n            second_smallest = Some(number);\n        }\n    }\n    second_smallest\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `Some(2)`', /tmp/tmpa_rs5jvt.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823189
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut sorted = lst.clone();\n    sorted.sort();\n    let min = sorted[0];\n\
    \    let second_min = sorted[1];\n    if second_min == min {\n        next_smallest(sorted[1..].to_vec())\n\
    \    } else {\n        Some(second_min)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpzdski177.rs:7:15

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823189
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut min = lst[0];\n    let mut min2 = Option::None;\n    for elem in\
    \ lst.iter() {\n        if *elem < min {\n            min2 = Option::Some(min);\n\
    \            min = *elem;\n        } else if elem < min2.as_ref().unwrap_or(&0)\
    \ {\n            min2 = Option::Some(*elem);\n        }\n    }\n    min2\n}\n\n\
    fn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `None`,\n right: `Some(2)`', /tmp/tmp9q7xplnz.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823189
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    if lst.len() < 2 {\n        return None;\n    }\n    let mut res = lst[0];\n\
    \    let mut next = isize::max_value();\n    for i in 1..lst.len() {\n       \
    \ if lst[i] < res {\n            next = res;\n            res = lst[i];\n    \
    \    } else if lst[i] < next {\n            next = lst[i];\n        }\n    }\n\
    \    if next == isize::max_value() {\n        None\n    } else {\n        Some(next)\n\
    \    }\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmp1x77be02.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823189
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let smallest = lst.iter().min().unwrap();\n    lst.iter().filter(|&x| x !=\
    \ smallest).min()\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpyqsd66nc.rs:6:5\n  |\n4 |\
    \ fn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  |                  \
    \                    ------------- expected `Option<isize>` because of return\
    \ type\n5 |     let smallest = lst.iter().min().unwrap();\n6 |     lst.iter().filter(|&x|\
    \ x != smallest).min()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `isize`, found `&isize`\n  |\n  = note: expected enum `Option<isize>`\n    \
    \         found enum `Option<&isize>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659823189
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    // unimplemented!();\n    let mut lst1 = lst.clone();\n    let length = lst1.len();\n\
    \    if length < 2 {\n        return None;\n    }\n    lst1.sort();\n    return\
    \ Some(lst1[1]);\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmppubt6m5m.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823189
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let len = lst.len();\n    if len < 2 {\n        return None;\n    }\n   \
    \ let mut smallest: isize = lst[0];\n    let mut next_smallest: isize = lst[1];\n\
    \    for elem in lst.iter() {\n        if elem < &smallest {\n            next_smallest\
    \ = smallest;\n            smallest = *elem;\n        } else if elem < &next_smallest\
    \ {\n            next_smallest = *elem;\n        }\n    }\n    Some(next_smallest)\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `Some(2)`', /tmp/tmpv47qzx1h.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823189
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    if lst.len() < 2 {\n        return None;\n    }\n    let mut cur_min = lst[0];\n\
    \    let mut cur_next_min = lst[1];\n    for i in lst {\n        if i <= cur_min\
    \ {\n            cur_min = i;\n        } else if i < cur_next_min {\n        \
    \    cur_next_min = i;\n        }\n    }\n    if cur_min < cur_next_min {\n  \
    \      Some(cur_next_min)\n    } else {\n        None\n    }\n}\n\nfn main() {\n\
    \    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4,\
    \ 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n \
    \   assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `None`,\n right: `Some(2)`', /tmp/tmpx42hrfl9.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823189
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    // your code goes here\n    None\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `None`,\n right: `Some(2)`', /tmp/tmpjjd8bq9x.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823189
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    // TODO\n    None\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `None`,\n right: `Some(2)`', /tmp/tmpn1egdqk7.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823189
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    lst.iter().fold((None, None), |(first, second), val| {\n        if let Some(smallest)\
    \ = first {\n            if val < smallest {\n                (Some(*val), first)\n\
    \            } else if let Some(smallest2) = second {\n                if val\
    \ < smallest2 {\n                    (first, Some(*val))\n                } else\
    \ {\n                    (first, second)\n                }\n            } else\
    \ {\n                (first, Some(*val))\n            }\n        } else {\n  \
    \          (Some(*val), None)\n        }\n    }).1\n}\n\nfn main() {\n    let\
    \ candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp3m4uh9v6.rs:8:23\n  |\n8 |\
    \                 (Some(*val), first)\n  |                       ^^^^\n  |   \
    \                    |\n  |                       expected `&isize`, found `isize`\n\
    \  |                       help: consider borrowing here: `&*val`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp3m4uh9v6.rs:11:34\n   |\n11 |              \
    \       (first, Some(*val))\n   |                                  ^^^^\n   |\
    \                                  |\n   |                                  expected\
    \ `&isize`, found `isize`\n   |                                  help: consider\
    \ borrowing here: `&*val`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3m4uh9v6.rs:16:30\n\
    \   |\n16 |                 (first, Some(*val))\n   |                        \
    \      ^^^^\n   |                              |\n   |                       \
    \       expected `&isize`, found `isize`\n   |                              help:\
    \ consider borrowing here: `&*val`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3m4uh9v6.rs:19:19\n\
    \   |\n19 |             (Some(*val), None)\n   |                   ^^^^\n   |\
    \                   |\n   |                   expected `&isize`, found `isize`\n\
    \   |                   help: consider borrowing here: `&*val`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp3m4uh9v6.rs:5:5\n   |\n4  |   fn next_smallest(lst:\
    \ Vec<isize>) -> Option<isize> {\n   |                                       \
    \ ------------- expected `Option<isize>` because of return type\n5  | /     lst.iter().fold((None,\
    \ None), |(first, second), val| {\n6  | |         if let Some(smallest) = first\
    \ {\n7  | |             if val < smallest {\n8  | |                 (Some(*val),\
    \ first)\n...  |\n20 | |         }\n21 | |     }).1\n   | |________^ expected\
    \ `isize`, found `&isize`\n   |\n   = note: expected enum `Option<isize>`\n  \
    \            found enum `Option<&isize>`\n\nerror: aborting due to 5 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659823189
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut sorted = lst.clone();\n    sorted.sort();\n    sorted.get(1).cloned()\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmp0ugibceu.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823190
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    // First thing that comes to mind is to sort the list and then return the\
    \ second element.\n    // The complexity of sorting will be O(nlogn)\n\n    //\
    \ Another thought is to just go through the list and keep track of the smallest\
    \ and second\n    // smallest elements.\n    // The complexity of this algorithm\
    \ is O(n)\n\n    // Implementation with O(n) complexity\n    let mut smallest\
    \ = lst[0];\n    let mut second_smallest = smallest;\n    for item in lst.iter()\
    \ {\n        if *item < smallest {\n            second_smallest = smallest;\n\
    \            smallest = *item;\n        } else if *item < second_smallest {\n\
    \            second_smallest = *item;\n        }\n    }\n    Some(second_smallest)\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `Some(2)`', /tmp/tmp5gfj6i8z.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823190
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut min1 = std::isize::MAX;\n    let mut min2 = std::isize::MAX;\n  \
    \  for x in lst {\n        if x < min1 {\n            min2 = min1;\n         \
    \   min1 = x;\n        } else if x < min2 {\n            min2 = x;\n        }\n\
    \    }\n    if min2 == std::isize::MAX {\n        None\n    } else {\n       \
    \ Some(min2)\n    }\n}\n\nfn main() {\n    let candidate = next_smallest;\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmpcotus5fk.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823190
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut lst = lst;\n    lst.sort();\n    if lst.len() < 2 {\n        return\
    \ None;\n    }\n    Some(lst[1])\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmpiybxwngq.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823190
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    unimplemented!()\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpd7l60l62.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823188
- exit_code: 0
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    ////////////////////////////////////////////////////////////////////////////////\n\
    \    // Iterate over the list and return the second smallest value; return None\
    \ if\n    // there is no such value.\n    ////////////////////////////////////////////////////////////////////////////////\n\
    \    if lst.len() < 2 {\n        return None;\n    }\n    let mut sorted_lst =\
    \ lst.clone();\n    sorted_lst.sort();\n    let mut lowest = sorted_lst[0];\n\
    \    let mut second_lowest = sorted_lst[1];\n    for i in 0..sorted_lst.len()\
    \ {\n        if sorted_lst[i] == lowest {\n            continue;\n        }\n\
    \        if second_lowest == lowest {\n            second_lowest = sorted_lst[i];\n\
    \        } else if sorted_lst[i] < second_lowest {\n            second_lowest\
    \ = sorted_lst[i];\n        }\n    }\n    if second_lowest == lowest {\n     \
    \   return None;\n    }\n    Some(second_lowest)\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823190
- exit_code: 0
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    if lst.len() < 2 {\n        return None;\n    }\n    let mut smallest = lst[0];\n\
    \    let mut second_smallest = lst[1];\n    for i in 1..lst.len() {\n        if\
    \ lst[i] < smallest {\n            second_smallest = smallest;\n            smallest\
    \ = lst[i];\n        } else if lst[i] < second_smallest {\n            second_smallest\
    \ = lst[i];\n        }\n    }\n    if second_smallest == smallest {\n        None\n\
    \    } else {\n        Some(second_smallest)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823190
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    // Your code here\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpr58pycri.rs:6:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823190
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut min = None;\n    let mut next_min = None;\n    for i in lst {\n \
    \       match min {\n            None => min = Some(i),\n            Some(min_val)\
    \ => {\n                if i < min_val {\n                    next_min = min;\n\
    \                    min = Some(i);\n                } else if next_min.is_none()\
    \ || (next_min.is_some() && i < next_min.unwrap()) {\n                    next_min\
    \ = Some(i);\n                }\n            }\n        }\n    }\n    next_min\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmpwh9iksto.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823190
- exit_code: 0
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut sorted = lst.clone();\n    sorted.sort();\n    sorted.dedup();\n\
    \    sorted.get(1).cloned()\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823190
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    // add code here\n    if lst.len() < 2 {\n        return None;\n    }\n \
    \   let mut lst = lst;\n    lst.sort();\n    Some(lst[1])\n}\n\nfn main() {\n\
    \    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4,\
    \ 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n \
    \   assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmp9pm1drm6.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823190
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    if lst.len() < 2 {\n        return None;\n    }\n    let mut v = lst;\n \
    \   v.sort();\n    Some(v[1])\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmp431es8hl.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823188
- exit_code: 0
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut lst = lst;\n    lst.sort();\n    lst.dedup();\n    if lst.len() <\
    \ 2 {\n        return None;\n    }\n    Some(lst[1])\n}\n\nfn main() {\n    let\
    \ candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823190
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    unimplemented!()\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpd7l60l62.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823188
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \  if lst.len() < 2 {\n    return None;\n  }\n  let mut smallest = lst[0];\n \
    \ let mut next_smallest = isize::max_value();\n  for i in 1..lst.len() {\n   \
    \ if lst[i] < smallest {\n      smallest = lst[i];\n    } else if lst[i] < next_smallest\
    \ {\n      next_smallest = lst[i];\n    }\n  }\n  if next_smallest == isize::max_value()\
    \ {\n    None\n  } else {\n    Some(next_smallest)\n  }\n}\n\nfn main() {\n  \
    \  let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]),\
    \ Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmpzybwjf83.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823190
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    if lst.len() < 2 {\n        return None;\n    }\n    let mut sorted_lst =\
    \ lst.clone();\n    sorted_lst.sort();\n    let mut it = sorted_lst.iter();\n\
    \    if *it.next().unwrap() != *it.next().unwrap() {\n        return it.next().map(|&x|\
    \ x);\n    }\n    None\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(3)`,\n right: `Some(2)`', /tmp/tmps7d27ny6.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823190
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    if lst.len() <= 1 {\n        return None;\n    }\n    let mut min = lst[0];\n\
    \    let mut min2 = min;\n    for i in 1..lst.len() {\n        if lst[i] < min\
    \ {\n            min2 = min;\n            min = lst[i];\n        } else if lst[i]\
    \ < min2 {\n            min2 = lst[i];\n        }\n    }\n    if min2 != min {\n\
    \        Some(min2)\n    } else {\n        None\n    }\n}\n\nfn main() {\n   \
    \ let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]),\
    \ Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `None`,\n right: `Some(2)`', /tmp/tmpybji6b6a.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823190
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let min = lst.iter().min().unwrap();\n    lst.iter().filter(|&x| x != min).min()\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpc093jd99.rs:6:5\n  |\n4 |\
    \ fn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  |                  \
    \                    ------------- expected `Option<isize>` because of return\
    \ type\n5 |     let min = lst.iter().min().unwrap();\n6 |     lst.iter().filter(|&x|\
    \ x != min).min()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`,\
    \ found `&isize`\n  |\n  = note: expected enum `Option<isize>`\n             found\
    \ enum `Option<&isize>`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659823189
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    if lst.len() < 2 {\n        return None;\n    }\n    lst.into_iter().fold(\n\
    \        (None, None),\n        |(first, second), current| {\n            if first.is_none()\
    \ || current < first.unwrap() {\n                (Some(current), first)\n    \
    \        } else if second.is_none() || current < second.unwrap() {\n         \
    \       (first, Some(current))\n            } else {\n                (first,\
    \ second)\n            }\n        },\n    )\n    .1\n}\n\nfn main() {\n    let\
    \ candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmpl29plndt.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823190
- exit_code: 0
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut m = None;\n    let mut n = None;\n    for i in lst {\n        match\
    \ m {\n            None => m = Some(i),\n            Some(mi) => {\n         \
    \       if i < mi {\n                    n = m;\n                    m = Some(i);\n\
    \                } else if i > mi {\n                    match n {\n         \
    \               None => n = Some(i),\n                        Some(ni) => {\n\
    \                            if i < ni {\n                                n =\
    \ Some(i);\n                            }\n                        }\n       \
    \             }\n                }\n            }\n        }\n    }\n    return\
    \ n;\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823190
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    // Implement your solution here\n    None\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `None`,\n right: `Some(2)`', /tmp/tmpiusmceac.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823190
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    use std::cmp::Ordering;\n    if lst.len() < 2 {\n        return None;\n \
    \   }\n    let mut min_num = 0;\n    let mut min_num_pos = 0;\n    let mut sec_min_num\
    \ = 0;\n    let mut sec_min_num_pos = 0;\n    for i in 0..lst.len() {\n      \
    \  if i == 0 {\n            min_num = lst[i];\n            min_num_pos = i;\n\
    \        } else if lst[i] < min_num {\n            sec_min_num = min_num;\n  \
    \          sec_min_num_pos = min_num_pos;\n            min_num = lst[i];\n   \
    \         min_num_pos = i;\n        } else if lst[i] == min_num {\n          \
    \  continue;\n        } else if lst[i] < sec_min_num {\n            sec_min_num\
    \ = lst[i];\n            sec_min_num_pos = i;\n        } else if lst[i] == sec_min_num\
    \ {\n            continue;\n        }\n    }\n    println!(\"{:?}\", sec_min_num);\n\
    \    println!(\"{:?}\", sec_min_num_pos);\n    if sec_min_num_pos == 0 {\n   \
    \     return None;\n    }\n    Some(sec_min_num)\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `None`,\n right: `Some(2)`', /tmp/tmpsz_st2pp.rs:41:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: '0

    0

    '
  timestamp: 1659823190
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut result = None;\n    let mut smallest = None;\n    for i in lst {\n\
    \        if let Some(s) = smallest {\n            if i < s {\n               \
    \ result = smallest;\n                smallest = Some(i);\n            } else\
    \ if result.is_none() || i < result.unwrap() {\n                result = Some(i);\n\
    \            }\n        } else {\n            smallest = Some(i);\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = next_smallest;\n   \
    \ assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmpadrtv7_2.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823190
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    if lst.len() < 2 {\n        return None;\n    }\n    let mut smallest = lst[0];\n\
    \    let mut next_smallest = lst[1];\n    for i in lst.iter() {\n        if *i\
    \ < smallest {\n            next_smallest = smallest;\n            smallest =\
    \ *i;\n        } else if *i < next_smallest {\n            next_smallest = *i;\n\
    \        }\n    }\n    Some(next_smallest)\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `Some(2)`', /tmp/tmpsog8v7pc.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823190
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut sorted_lst = lst.clone();\n    sorted_lst.sort();\n    if sorted_lst.len()\
    \ < 2 {\n        return None;\n    }\n    Some(sorted_lst[1])\n}\n\nfn main()\
    \ {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmplhsu9v55.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823190
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    unimplemented!()\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpd7l60l62.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823188
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    match lst.len() {\n        0 => None,\n        1 => None,\n        2 => {\n\
    \            if lst[0] < lst[1] {\n                Some(lst[1])\n            }\
    \ else {\n                Some(lst[0])\n            }\n        }\n        _ =>\
    \ {\n            // TODO: implement me\n            unimplemented!()\n       \
    \ }\n    }\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmphd9x82v4.rs:17:13

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823190
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    unimplemented!()\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpd7l60l62.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823188
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut lst = lst;\n    lst.sort();\n    if lst.len() < 2 {\n        return\
    \ None;\n    }\n    Some(lst[1])\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmpiybxwngq.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823190
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut sorted = lst.clone();\n    sorted.sort();\n    sorted.into_iter().nth(1)\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmpbivwl6n7.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823190
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut min = None;\n    let mut next_min = None;\n    for &x in &lst {\n\
    \        if let Some(m) = min {\n            if x < m {\n                next_min\
    \ = min;\n                min = Some(x);\n            } else if next_min.is_none()\
    \ || Some(x) < next_min {\n                next_min = Some(x);\n            }\n\
    \        } else {\n            min = Some(x);\n        }\n    }\n    next_min\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmpkh408dxo.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823190
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = isize::max_value();\n    let mut second_smallest = isize::max_value();\n\
    \    for i in lst {\n        if i < smallest {\n            second_smallest =\
    \ smallest;\n            smallest = i;\n        } else if i < second_smallest\
    \ {\n            second_smallest = i;\n        }\n    }\n    if second_smallest\
    \ == isize::max_value() {\n        None\n    } else {\n        Some(second_smallest)\n\
    \    }\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmp5te6ru_m.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823190
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    if lst.len() < 2 {\n        return None;\n    }\n    let mut min = lst[0];\n\
    \    let mut nxt_min = lst[1];\n    for num in lst {\n        if num < min {\n\
    \            nxt_min = min;\n            min = num;\n        } else if num < nxt_min\
    \ {\n            nxt_min = num;\n        }\n    }\n    Some(nxt_min)\n}\n\nfn\
    \ main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `Some(2)`', /tmp/tmpa48dj9xz.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823190
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut v: Vec<isize> = lst.clone();\n    v.sort();\n    v.remove(0);\n \
    \   if v.len() == 0 {\n        None\n    } else {\n        Some(v[0])\n    }\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''removal index (is 0) should be < len (is
    0)'', /tmp/tmpfh8kz54v.rs:7:7

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823190
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    lst.iter().fold((None, None), |acc, &v| match (acc.0, acc.1) {\n        (None,\
    \ None) => (Some(v), None),\n        (Some(m), None) => {\n            if v <\
    \ m {\n                (Some(v), Some(m))\n            } else {\n            \
    \    (Some(m), Some(v))\n            }\n        }\n        (Some(m), Some(n))\
    \ => {\n            if v < m {\n                (Some(v), Some(m))\n         \
    \   } else if v > m && v < n {\n                (Some(m), Some(v))\n         \
    \   } else {\n                (Some(m), Some(n))\n            }\n        }\n \
    \       _ => unreachable!(),\n    }).1\n}\n\nfn main() {\n    let candidate =\
    \ next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n \
    \   assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmpxmi4biyc.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823190
- exit_code: 0
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    lst.clone().into_iter().min().and_then(|m| lst.into_iter().filter(|x| *x\
    \ != m).min())\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823190
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    if lst.len() < 2 {\n        return None;\n    }\n    let mut lst_cloned =\
    \ lst.clone();\n    lst_cloned.sort();\n    for (index, el) in lst_cloned.iter().enumerate()\
    \ {\n        if index == 1 {\n            return Some(*el);\n        }\n    }\n\
    \    None\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmpv7401odv.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823190
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut iter = lst.iter();\n    let mut first = iter.next();\n    let mut\
    \ second = iter.next();\n    for el in iter {\n        if el < first.unwrap()\
    \ {\n            second = first;\n            first = Some(el);\n        } else\
    \ if el < second.unwrap() {\n            second = Some(el);\n        }\n    }\n\
    \    second\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgvb5o61p.rs:16:5\n   |\n\
    4  | fn next_smallest(lst: Vec<isize>) -> Option<isize> {\n   |              \
    \                        ------------- expected `Option<isize>` because of return\
    \ type\n...\n16 |     second\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected enum `Option<isize>`\n              found enum `Option<&isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659823190
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    if lst.len() < 2 {\n        return None;\n    }\n    let mut smallest = isize::max_value();\n\
    \    let mut next_smallest = isize::max_value();\n    for v in lst {\n       \
    \ if v < smallest {\n            next_smallest = smallest;\n            smallest\
    \ = v;\n        } else if v < next_smallest {\n            next_smallest = v;\n\
    \        }\n    }\n    if next_smallest == isize::max_value() {\n        None\n\
    \    } else {\n        Some(next_smallest)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmpsgnmq4jo.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823190
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut lst = lst;\n    lst.sort();\n    if lst.len() > 1 {\n        Some(lst[1])\n\
    \    } else {\n        None\n    }\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmp4y6okxkf.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823191
- exit_code: 0
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut lst = lst;\n    lst.sort();\n    let l = lst.len();\n    if l < 2\
    \ {\n        return None;\n    }\n    let mut last = lst[0];\n    for i in 1..l\
    \ {\n        if lst[i] != last {\n            return Some(lst[i]);\n        }\n\
    \    }\n    None\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823190
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    match lst.len() {\n        0 => None,\n        1 => None,\n        _ => {\n\
    \            let mut lst = lst;\n            lst.sort();\n            Some(lst[1])\n\
    \        }\n    }\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmppv6fwd2s.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823191
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut m = None;\n    let mut n = None;\n    for item in lst {\n       \
    \ match m {\n            None => m = Some(item),\n            Some(i) => {\n \
    \               if item < i {\n                    n = m;\n                  \
    \  m = Some(item);\n                } else if item < n.unwrap_or(i) {\n      \
    \              n = Some(item);\n                }\n            }\n        }\n\
    \    }\n    n\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `None`,\n right: `Some(2)`', /tmp/tmp4b5eu900.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823191
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut v = lst;\n    v.sort();\n    if v.len() < 2 {\n        return None;\n\
    \    } else {\n        return Some(v[1]);\n    }\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmpvynvljxe.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823191
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    if lst.len() <= 1 {\n        return None;\n    }\n    let mut min = lst[0];\n\
    \    let mut second_min = lst[1];\n    for i in 2..lst.len() {\n        if lst[i]\
    \ < min {\n            second_min = min;\n            min = lst[i];\n        }\
    \ else if lst[i] < second_min {\n            second_min = lst[i];\n        }\n\
    \    }\n    Some(second_min)\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(3)`,\n right: `Some(2)`', /tmp/tmpu7dy80iv.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823191
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut sorted = lst.clone();\n    sorted.sort();\n    sorted.get(1).cloned()\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmp0ugibceu.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823190
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    // This can be accomplished either in-place or as a pre-processing step.\n\
    \    // Either way, I assume there will be at least two elements in the input.\n\
    \    //\n    // In-place version:\n    //   Use two pointers.\n    //   Advance\
    \ the first pointer until the second is found.\n    //   Once found, mark the\
    \ second as the minimum.\n    //   Advance the second pointer until it's greater\
    \ than the first.\n    //   Return if there's no 2nd minimum, otherwise return\
    \ the second.\n    //\n    // Pre-processing:\n    //   Sort the list.\n    //\
    \   Return None if the first is None.\n    //   Return the second if there is\
    \ one.\n    //   Return None if it's the same as the first.\n    //   Return the\
    \ second otherwise.\n    //\n\n    // We'll go with the in-place version.\n  \
    \  let mut iter = lst.iter();\n    let mut m = iter.next().unwrap();\n    let\
    \ mut nm = iter.next().unwrap();\n\n    if nm < m {\n        m = nm;\n       \
    \ nm = iter.next().unwrap();\n    }\n\n    for i in iter {\n        if i < m {\n\
    \            m = i;\n        } else if i < nm {\n            nm = i;\n       \
    \ }\n    }\n\n    if nm == m {\n        None\n    } else {\n        Some(nm)\n\
    \    }\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpafcmh57i.rs:44:14\n   |\n\
    44 |         Some(nm)\n   |              ^^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n44 |         Some(*nm)\n\
    \   |              +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659823190
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    unimplemented!()\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpd7l60l62.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823188
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut lst = lst;\n    lst.sort();\n    let l = lst.len();\n    if l < 2\
    \ {\n        return None;\n    }\n    Some(lst[1])\n}\n\nfn main() {\n    let\
    \ candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmpl6mgasxe.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823191
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    unimplemented!()\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpd7l60l62.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823188
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut copy = lst.clone();\n    copy.sort();\n    match copy.get(1) {\n\
    \        Some(n) => Some(*n),\n        None => None,\n    }\n}\n\nfn main() {\n\
    \    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4,\
    \ 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n \
    \   assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmp8tizggg4.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823191
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut lst = lst;\n    lst.sort();\n    if lst.len() < 2 {\n        return\
    \ None;\n    }\n    Some(lst[1])\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmpiybxwngq.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823190
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    unimplemented!();\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpwbq_frc7.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823191
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut result = lst.iter().filter(|x| **x != 0).collect::<Vec<_>>();\n \
    \   result.sort();\n    if result.len() >= 2 {\n        return Some(result[1]);\n\
    \    }\n    None\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmph1vlnsqa.rs:8:21\n  |\n8 |\
    \         return Some(result[1]);\n  |                     ^^^^^^^^^ expected\
    \ `isize`, found `&isize`\n  |\nhelp: consider dereferencing the borrow\n  |\n\
    8 |         return Some(*result[1]);\n  |                     +\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659823190
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    // Variables to store the smallest and second smallest values in the list\n\
    \    let mut smallest = None;\n    let mut next_smallest = None;\n\n    // Iterate\
    \ through the list, updating the smallest/next_smallest variables\n    for item\
    \ in lst {\n        match smallest {\n            Some(x) => {\n             \
    \   if item < x {\n                    // item is smaller than the smallest value,\
    \ so we need to update both variables\n                    next_smallest = Some(x);\n\
    \                    smallest = Some(item);\n                } else if item <\
    \ next_smallest.unwrap_or(x) {\n                    // item is not smaller than\
    \ the smallest value, so we only need to update the next_smallest variable\n \
    \                   next_smallest = Some(item);\n                }\n         \
    \   },\n            None => {\n                // smallest variable hasn't been\
    \ set, so set it now\n                smallest = Some(item);\n            }\n\
    \        }\n    }\n\n    next_smallest\n}\n\nfn main() {\n    let candidate =\
    \ next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n \
    \   assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `None`,\n right: `Some(2)`', /tmp/tmphc30s3zm.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823191
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst[0];\n    let mut next_smallest = None;\n    for item\
    \ in lst {\n        if item < smallest {\n            next_smallest = Some(smallest);\n\
    \            smallest = item;\n        } else if next_smallest.is_none() || item\
    \ < next_smallest.unwrap() {\n            next_smallest = Some(item);\n      \
    \  }\n    }\n    next_smallest\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `Some(2)`', /tmp/tmpirnyx52r.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823191
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    use std::cmp::Ordering;\n    lst.iter().fold((None, None), |(smallest, second_smallest),\
    \ &next| {\n        match next.cmp(&smallest.unwrap_or(next)) {\n            Ordering::Less\
    \ => (Some(next), smallest),\n            Ordering::Equal => (smallest, second_smallest),\n\
    \            Ordering::Greater => {\n                match next.cmp(&second_smallest.unwrap_or(next))\
    \ {\n                    Ordering::Less => (smallest, Some(next)),\n         \
    \           Ordering::Equal => (smallest, second_smallest),\n                \
    \    Ordering::Greater => (smallest, second_smallest),\n                }\n  \
    \          }\n        }\n    }).1\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `None`,\n right: `Some(2)`', /tmp/tmpw9zp3r3w.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823191
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    unimplemented!()\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpd7l60l62.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823188
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut lst = lst;\n    lst.sort();\n    lst.iter().skip(1).next().cloned()\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmplt17zatn.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823191
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut lst = lst;\n    lst.sort();\n    match lst.get(1) {\n        Some(x)\
    \ => Some(*x),\n        None => None,\n    }\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmp3x3v92nq.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823191
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut lst = lst;\n    lst.sort();\n    lst.remove(0);\n    lst.first().cloned()\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''removal index (is 0) should be < len (is
    0)'', /tmp/tmp6cjm7y5n.rs:7:9

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823191
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut min = Option::None;\n    let mut next_min = Option::None;\n    for\
    \ n in lst {\n        match min {\n            Some(m) => {\n                if\
    \ n < m {\n                    next_min = min;\n                    min = Some(n);\n\
    \                } else if let Some(nm) = next_min {\n                    if n\
    \ < nm {\n                        next_min = Some(n);\n                    }\n\
    \                } else {\n                    next_min = Some(n);\n         \
    \       }\n            }\n            None => {\n                min = Some(n);\n\
    \            }\n        }\n    }\n    next_min\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmp0z3e71pj.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823191
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    if lst.len() < 2 {\n        return None;\n    }\n    let mut v = lst;\n \
    \   v.sort();\n    Some(v[1])\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmp431es8hl.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823188
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut lst = lst;\n    lst.sort();\n    match lst.iter().nth(1) {\n    \
    \    Some(n) => Some(*n),\n        None => None,\n    }\n}\n\nfn main() {\n  \
    \  let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]),\
    \ Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmp2ygqtq18.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823191
- exit_code: 0
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    if lst.len() < 2 {\n        return None;\n    }\n    let mut min1 = lst[0];\n\
    \    let mut min2 = lst[1];\n    if min1 > min2 {\n        min1 = lst[1];\n  \
    \      min2 = lst[0];\n    }\n    for &x in &lst[2..] {\n        if x < min1 {\n\
    \            min2 = min1;\n            min1 = x;\n        } else if x < min2 {\n\
    \            min2 = x;\n        }\n    }\n    if min1 == min2 {\n        None\n\
    \    } else {\n        Some(min2)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823191
- exit_code: 0
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    // Find the smallest integer.\n    let mut smallest = None;\n    for &i in\
    \ &lst {\n        match smallest {\n            None    => smallest = Some(i),\n\
    \            Some(s) => if i < s { smallest = Some(i) }\n        }\n    }\n\n\
    \    // Find the next smallest integer.\n    let mut next_smallest = None;\n \
    \   for &i in &lst {\n        match (smallest, next_smallest) {\n            (Some(s),\
    \ _) if i == s => (),\n            (_, None)               => next_smallest =\
    \ Some(i),\n            (_, Some(ns)) if i < ns => next_smallest = Some(i),\n\
    \            _                       => ()\n        }\n    }\n\n    // Return\
    \ the next smallest integer.\n    next_smallest\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823191
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    // TODO implement\n    None\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `None`,\n right: `Some(2)`', /tmp/tmplccsah_k.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823191
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    if lst.len() < 2 {\n        return None;\n    }\n    let mut smallest = lst[0];\n\
    \    let mut second_smallest = lst[1];\n    for i in lst.iter() {\n        if\
    \ *i < smallest {\n            second_smallest = smallest;\n            smallest\
    \ = *i;\n        } else if *i < second_smallest {\n            second_smallest\
    \ = *i;\n        }\n    }\n    Some(second_smallest)\n}\n\nfn main() {\n    let\
    \ candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `Some(2)`', /tmp/tmptl_7btl8.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823191
- exit_code: 0
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut lst = lst;\n    lst.sort();\n    lst.dedup();\n    lst.iter().nth(1).map(|x|\
    \ *x)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823191
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    unimplemented!()\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpd7l60l62.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823188
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut a: Option<isize> = None;\n    let mut b: Option<isize> = None;\n\
    \    for num in lst {\n        if let Some(x) = a {\n            if let Some(y)\
    \ = b {\n                if num < x && num > y {\n                    b = Some(num);\n\
    \                } else if num < y {\n                    b = Some(x);\n     \
    \               a = Some(num);\n                }\n            } else {\n    \
    \            if num < x {\n                    b = Some(x);\n                \
    \    a = Some(num);\n                } else {\n                    b = Some(num);\n\
    \                }\n            }\n        } else {\n            a = Some(num);\n\
    \        }\n    }\n    b\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(4)`,\n right: `Some(2)`', /tmp/tmpw0ags0q2.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823191
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut sorted_list = lst.clone();\n    sorted_list.sort();\n    if sorted_list.len()\
    \ < 2 {\n        return None;\n    } else {\n        return Some(sorted_list[1]);\n\
    \    }\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmpewcqemm0.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823191
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut sorted_lst = lst.clone();\n    sorted_lst.sort();\n    match sorted_lst.len()\
    \ {\n        0 => None,\n        1 => None,\n        _ => Some(sorted_lst[1]),\n\
    \    }\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmpppebl_wv.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823191
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    if lst.len() < 2 {\n        return None;\n    }\n    let mut min = std::isize::MAX;\n\
    \    let mut min2 = std::isize::MAX;\n    for i in lst {\n        if i < min {\n\
    \            min2 = min;\n            min = i;\n        } else if i < min2 {\n\
    \            min2 = i;\n        }\n    }\n    if min2 == std::isize::MAX {\n \
    \       None\n    } else {\n        Some(min2)\n    }\n}\n\nfn main() {\n    let\
    \ candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmppnh49hrz.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823191
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = lst[0];\n    let mut next_smallest = None;\n    for e\
    \ in lst.iter() {\n        if *e < smallest {\n            next_smallest = Some(smallest);\n\
    \            smallest = *e;\n        } else if next_smallest.is_none() || *e <\
    \ next_smallest.unwrap() {\n            next_smallest = Some(*e);\n        }\n\
    \    }\n    next_smallest\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `Some(2)`', /tmp/tmpgat1ivan.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823191
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut lst = lst;\n    lst.sort();\n    // debug!(\"{:?}\", lst);\n    if\
    \ lst.len() > 1 {\n        Some(lst[1])\n    } else {\n        None\n    }\n}\n\
    \nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmpwc5xz21p.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823191
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut lst = lst;\n    lst.sort();\n    if lst.len() > 1 {\n        Some(lst[1])\n\
    \    } else {\n        None\n    }\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmp4y6okxkf.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823191
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut lst = lst;\n    lst.sort();\n    match lst.get(1) {\n        Some(x)\
    \ => Some(*x),\n        None => None,\n    }\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmp3x3v92nq.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823191
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    unimplemented!();\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpwbq_frc7.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823191
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    // check for empty list\n    if lst.len() == 0 {\n        return None;\n\
    \    }\n\n    // check for list of size 1\n    if lst.len() == 1 {\n        return\
    \ None;\n    }\n\n    // initialize next_smallest to the largest possible value\n\
    \    let mut next_smallest = std::isize::MAX;\n\n    // find the smallest element\
    \ in the list\n    let mut smallest = std::isize::MAX;\n    for el in lst {\n\
    \        if el < smallest {\n            smallest = el;\n        }\n    }\n\n\
    \    // iterate over the list and find the 2nd smallest element\n    for el in\
    \ lst {\n        if el < next_smallest && el > smallest {\n            next_smallest\
    \ = el;\n        }\n    }\n\n    // check if we found the 2nd smallest element\
    \ in the list, if not then return None\n    if next_smallest == std::isize::MAX\
    \ {\n        return None;\n    }\n\n    // return the 2nd smallest element\n \
    \   return Some(next_smallest);\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `lst`\n   --> /tmp/tmpm7uq9mc_.rs:27:15\n\
    \    |\n4   | fn next_smallest(lst: Vec<isize>) -> Option<isize> {\n    |    \
    \              --- move occurs because `lst` has type `Vec<isize>`, which does\
    \ not implement the `Copy` trait\n...\n20  |     for el in lst {\n    |      \
    \         ---\n    |               |\n    |               `lst` moved due to this\
    \ implicit call to `.into_iter()`\n    |               help: consider borrowing\
    \ to avoid moving into the for loop: `&lst`\n...\n27  |     for el in lst {\n\
    \    |               ^^^ value used here after move\n    |\nnote: this function\
    \ takes ownership of the receiver `self`, which moves `lst`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  stdout: ''
  timestamp: 1659823191
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut lst = lst;\n    lst.sort();\n    match lst.iter().skip(1).nth(0)\
    \ {\n        Some(x) => Some(*x),\n        None => None,\n    }\n}\n\nfn main()\
    \ {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmporkrmnw4.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823191
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    if lst.len() == 0 {\n        return None;\n    }\n\n    let mut smallest\
    \ = std::isize::MAX;\n    let mut result = None;\n\n    for i in lst {\n     \
    \   if i < smallest {\n            result = Some(smallest);\n            smallest\
    \ = i;\n        } else if i < result.unwrap_or(std::isize::MAX) {\n          \
    \  result = Some(i);\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let\
    \ candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmpwek9msz7.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823191
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut lst = lst;\n    lst.sort();\n    if lst.len() > 1 {\n        return\
    \ Some(lst[1]);\n    }\n    None\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmp80j_826v.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823191
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut iter = lst.into_iter();\n    match iter.next() {\n        None =>\
    \ None,\n        Some(x) => {\n            let mut next = iter.next().unwrap_or(x);\n\
    \            for &y in iter {\n                if y < next {\n               \
    \     next = y;\n                }\n            }\n            if next == x {\n\
    \                None\n            } else {\n                Some(next)\n    \
    \        }\n        }\n    }\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpy_x56lgr.rs:10:17\n   |\n\
    10 |             for &y in iter {\n   |                 ^^    ---- this expression\
    \ has type `isize`\n   |                 |\n   |                 expected `isize`,\
    \ found reference\n   |\n   = note:   expected type `isize`\n           found\
    \ reference `&_`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659823191
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut lst = lst;\n    lst.sort();\n    if lst.len() < 2 {\n        return\
    \ None;\n    }\n\n    Some(lst[1])\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmpc16me1rb.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823191
- exit_code: 0
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut lst = lst;\n    lst.sort();\n    lst.dedup();\n    match lst.len()\
    \ {\n        0 | 1 => None,\n        _ => Some(lst[1]),\n    }\n}\n\nfn main()\
    \ {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823192
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut lst = lst;\n    lst.sort();\n    if lst.len() > 1 {\n        Some(lst[1])\n\
    \    } else {\n        None\n    }\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmp4y6okxkf.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823191
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    if lst.len() < 2 {\n        return None;\n    }\n    // let mut sorted =\
    \ lst.clone();\n    // sorted.sort();\n    // sorted[1]\n    let mut min = lst[0];\n\
    \    let mut next_min = lst[1];\n    if next_min < min {\n        std::mem::swap(&mut\
    \ min, &mut next_min);\n    }\n    for i in 2..lst.len() {\n        if lst[i]\
    \ < min {\n            next_min = min;\n            min = lst[i];\n        } else\
    \ if lst[i] < next_min {\n            next_min = lst[i];\n        }\n    }\n \
    \   Some(next_min)\n}\n\nfn main() {\n    let candidate = next_smallest;\n   \
    \ assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmpir5xzifj.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823192
- exit_code: 0
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    if lst.len() < 2 {\n        return None;\n    }\n    let mut sorted = lst.clone();\n\
    \    sorted.sort();\n    sorted.dedup();\n    let max = sorted.len();\n    if\
    \ max < 2 {\n        return None;\n    }\n    Some(sorted[1])\n}\n\nfn main()\
    \ {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823192
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut next_smallest = None;\n    let mut smallest = None;\n    for x in\
    \ lst {\n        if smallest.is_none() || x < smallest.unwrap() {\n          \
    \  next_smallest = smallest;\n            smallest = Some(x);\n        } else\
    \ if next_smallest.is_none() || x < next_smallest.unwrap() {\n            next_smallest\
    \ = Some(x);\n        }\n    }\n    next_smallest\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmphhgctg3w.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823192
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut min = isize::max_value();\n    let mut next_min = isize::max_value();\n\
    \    for &elem in lst.iter() {\n        if elem < min {\n            next_min\
    \ = min;\n            min = elem;\n        } else if elem < next_min {\n     \
    \       next_min = elem;\n        }\n    }\n    if next_min == isize::max_value()\
    \ {\n        None\n    } else {\n        Some(next_min)\n    }\n}\n\nfn main()\
    \ {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmpa_yzwhqs.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823192
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    unimplemented!();\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpwbq_frc7.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823191
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let min = lst.iter().min().unwrap();\n    if let Some(index) = lst.iter().position(|x|\
    \ x == min) {\n        if index == lst.len() - 1 {\n            None\n       \
    \ } else {\n            Some(lst[index + 1])\n        }\n    } else {\n      \
    \  None\n    }\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(4)`,\n right: `Some(2)`', /tmp/tmpel9v5xvc.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823192
- exit_code: 0
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smaller = None;\n    let mut smaller_idx = 0;\n    let mut second_smaller\
    \ = None;\n    let mut second_smaller_idx = 0;\n    for idx in 0..lst.len() {\n\
    \        if second_smaller == None {\n            if smaller == None {\n     \
    \           smaller = Some(lst[idx]);\n                smaller_idx = idx;\n  \
    \          } else if lst[idx] < smaller.unwrap() {\n                second_smaller\
    \ = Some(smaller.unwrap());\n                second_smaller_idx = smaller_idx;\n\
    \                smaller = Some(lst[idx]);\n                smaller_idx = idx;\n\
    \            } else if lst[idx] > smaller.unwrap() {\n                second_smaller\
    \ = Some(lst[idx]);\n                second_smaller_idx = idx;\n            }\n\
    \        } else if lst[idx] < smaller.unwrap() {\n            second_smaller =\
    \ Some(smaller.unwrap());\n            second_smaller_idx = smaller_idx;\n   \
    \         smaller = Some(lst[idx]);\n            smaller_idx = idx;\n        }\
    \ else if lst[idx] < second_smaller.unwrap() && lst[idx] > smaller.unwrap() {\n\
    \            second_smaller = Some(lst[idx]);\n            second_smaller_idx\
    \ = idx;\n        }\n    }\n    if smaller_idx != second_smaller_idx {\n     \
    \   return second_smaller;\n    } else {\n        return None;\n    }\n}\n\nfn\
    \ main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823192
- exit_code: 0
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut lst = lst;\n    lst.sort();\n    lst.dedup();\n    match lst.len()\
    \ {\n        0 | 1 => None,\n        _ => Some(lst[1]),\n    }\n}\n\nfn main()\
    \ {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823192
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    // The second element is either the first one or the first one plus 1\n \
    \   let mut lst = lst;\n    lst.sort();\n    let second = lst[1];\n    if second\
    \ == lst[0] + 1 {\n        return Some(second);\n    }\n    None\n}\n\nfn main()\
    \ {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 1'', /tmp/tmp550rw10f.rs:8:18

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823192
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut prev = Option::None;\n    let mut smallest = Option::None;\n    for\
    \ elem in lst {\n        match prev {\n            Some(p) => {\n            \
    \    if elem < p {\n                    match smallest {\n                   \
    \     Some(s) => {\n                            if elem < s {\n              \
    \                  return Some(s);\n                            } else {\n   \
    \                             return Some(elem);\n                           \
    \ }\n                        }\n                        None => {\n          \
    \                  smallest = Some(elem);\n                        }\n       \
    \             }\n                }\n            }\n            None => {\n   \
    \             smallest = Some(elem);\n            }\n        }\n        prev =\
    \ Some(elem);\n    }\n    None\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `None`,\n right: `Some(2)`', /tmp/tmp0c7d55me.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823192
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    unimplemented!();\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpwbq_frc7.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823191
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut lst = lst;\n    lst.sort();\n    lst.remove(0);\n    lst.first().cloned()\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''removal index (is 0) should be < len (is
    0)'', /tmp/tmp6cjm7y5n.rs:7:9

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823191
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    // TODO: implement\n    None\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `None`,\n right: `Some(2)`', /tmp/tmpsg3d0zrm.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823192
- exit_code: 0
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut lst = lst;\n    lst.sort();\n    for i in 1..lst.len() {\n      \
    \  if lst[i - 1] != lst[i] {\n            return Some(lst[i]);\n        }\n  \
    \  }\n    None\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823192
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut res = None;\n    let mut min = isize::max_value();\n    for n in\
    \ lst {\n        if n < min {\n            min = n;\n        } else if n < res.unwrap_or(isize::max_value())\
    \ {\n            res = Some(n);\n        }\n    }\n    res\n}\n\nfn main() {\n\
    \    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4,\
    \ 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n \
    \   assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmpmgtzlu_r.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823192
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    unimplemented!();\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpwbq_frc7.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823191
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = None;\n    let mut next_smallest = None;\n    for el in\
    \ lst {\n        match smallest {\n            None => smallest = Some(el),\n\
    \            Some(x) => if el < x {\n                next_smallest = smallest;\n\
    \                smallest = Some(el);\n            } else if next_smallest.is_none()\
    \ || el < next_smallest.unwrap() {\n                next_smallest = Some(el);\n\
    \            }\n        }\n    }\n    next_smallest\n}\n\nfn main() {\n    let\
    \ candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmpnb7lc6ql.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823192
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    if lst.len() < 2 {\n        return None;\n    }\n    let mut small: isize\
    \ = lst[0];\n    let mut second_small: isize = std::isize::MAX;\n    for num in\
    \ lst.iter() {\n        if num <= &small {\n            small = *num;\n      \
    \  } else if num < &second_small {\n            second_small = *num;\n       \
    \ }\n    }\n    if second_small == std::isize::MAX {\n        return None;\n \
    \   }\n    Some(second_small)\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `None`,\n right: `Some(1)`', /tmp/tmpxo33fnv1.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823192
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut lst = lst;\n    lst.sort();\n    if lst.len() > 1 {\n        Some(lst[1])\n\
    \    } else {\n        None\n    }\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmp4y6okxkf.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823191
- exit_code: 0
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    if lst.len() < 2 {\n        return None;\n    }\n    let mut lst2 = lst.clone();\n\
    \    lst2.sort();\n    if lst2[0] == lst2[1] {\n        return next_smallest(lst2[1..].to_vec());\n\
    \    }\n    Some(lst2[1])\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823192
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    if lst.len() <= 1 {\n        return None;\n    }\n    let mut lst_sorted\
    \ = lst.clone();\n    lst_sorted.sort();\n    Some(lst_sorted[1])\n}\n\nfn main()\
    \ {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmp4yivjcy2.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823192
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut lst = lst;\n    lst.sort();\n    if lst.len() >= 2 {\n        Some(lst[1])\n\
    \    } else {\n        None\n    }\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmpv1546d95.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823189
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    if lst.len() < 2 {\n        return None;\n    }\n    let mut min = lst[0];\n\
    \    let mut sec = lst[1];\n    if sec < min {\n        min = lst[1];\n      \
    \  sec = lst[0];\n    }\n    for num in lst.iter().skip(2) {\n        if *num\
    \ < min {\n            sec = min;\n            min = *num;\n        } else if\
    \ *num < sec {\n            sec = *num;\n        }\n    }\n    Some(sec)\n}\n\n\
    fn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmplp64dhoj.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823192
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    if lst.len() < 2 {\n        return None;\n    }\n    let mut lst = lst;\n\
    \    lst.sort();\n    Some(lst[1])\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmpa8p8wx8t.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823192
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    // TODO\n    None\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `None`,\n right: `Some(2)`', /tmp/tmpn1egdqk7.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823189
- exit_code: 0
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    if lst.len() < 2 {\n        return None;\n    }\n    let mut smallest = lst[0];\n\
    \    let mut smallest_idx = 0;\n    let mut second_smallest = None;\n    for (i,\
    \ &x) in lst.iter().enumerate() {\n        if x < smallest {\n            second_smallest\
    \ = Some(smallest);\n            smallest = x;\n            smallest_idx = i;\n\
    \        } else if x != smallest && (second_smallest.is_none() || x < second_smallest.unwrap())\
    \ {\n            second_smallest = Some(x);\n        }\n    }\n    second_smallest\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823192
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut lst = lst;\n    lst.sort();\n    if lst.len() < 2 {\n        return\
    \ None;\n    }\n    Some(lst[1])\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmpiybxwngq.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823190
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut lst = lst;\n    lst.sort();\n    if lst.len() < 2 {\n        return\
    \ None;\n    }\n    let mut first = 0;\n    let mut second = 1;\n    while first\
    \ < lst.len() - 1 && lst[first] == lst[second] {\n        second += 1;\n    }\n\
    \    if second == lst.len() {\n        return None;\n    }\n    Some(lst[second])\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 2 but the
    index is 2'', /tmp/tmpama2adbt.rs:12:50

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823192
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    unimplemented!()\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpd7l60l62.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823188
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \  if lst.len() < 2 {\n    return None;\n  }\n  let mut sorted = lst.clone();\n\
    \  sorted.sort();\n  Some(sorted[1])\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmpiequ8mn5.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823192
- exit_code: 0
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut num_to_return = None;\n    let mut lowest = None;\n    for i in lst\
    \ {\n        match lowest {\n            None => {\n                lowest = Some(i);\n\
    \            }\n            Some(v) => {\n                if v > i {\n       \
    \             num_to_return = lowest;\n                    lowest = Some(i);\n\
    \                } else if i > v && (num_to_return == None || i < num_to_return.unwrap())\
    \ {\n                    num_to_return = Some(i);\n                }\n       \
    \     }\n        }\n    }\n    num_to_return\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823192
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    unimplemented!();\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpwbq_frc7.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823191
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = std::isize::MAX;\n    let mut second_smallest = std::isize::MAX;\n\
    \    for i in lst {\n        if i < smallest {\n            second_smallest =\
    \ smallest;\n            smallest = i;\n        } else if i < second_smallest\
    \ {\n            second_smallest = i;\n        }\n    }\n    if second_smallest\
    \ == std::isize::MAX {\n        None\n    } else {\n        Some(second_smallest)\n\
    \    }\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmpccwiasuy.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823192
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut lst = lst;\n    lst.sort();\n    lst.reverse();\n    if lst.len()\
    \ > 2 {\n        return Some(lst[1]);\n    }\n    return None;\n}\n\nfn main()\
    \ {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(4)`,\n right: `Some(2)`', /tmp/tmpjzcdloy5.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823192
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut small = isize::MAX;\n    let mut next_small = isize::MAX;\n    for\
    \ x in lst {\n        if x < small {\n            next_small = small;\n      \
    \      small = x;\n        } else if x < next_small {\n            next_small\
    \ = x;\n        }\n    }\n    if next_small == isize::MAX {\n        None\n  \
    \  } else {\n        Some(next_small)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmptxh4tvo2.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823192
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut sorted = lst.clone();\n    sorted.sort();\n    if sorted.len() <\
    \ 2 {\n        return None;\n    }\n    Some(sorted[1])\n}\n\nfn main() {\n  \
    \  let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]),\
    \ Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmpxcn_yz9j.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823192
- exit_code: 1
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let min = lst.iter().min().unwrap();\n    let mut next = None;\n    for i\
    \ in lst {\n        if i > *min && (next.is_none() || i < next.unwrap()) {\n \
    \           next = Some(i);\n        }\n    }\n    next\n}\n\nfn main() {\n  \
    \  let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]),\
    \ Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: SyntaxError
  stderr: "error[E0505]: cannot move out of `lst` because it is borrowed\n --> /tmp/tmpw29r5w6k.rs:7:14\n\
    \  |\n5 |     let min = lst.iter().min().unwrap();\n  |               --- borrow\
    \ of `lst` occurs here\n6 |     let mut next = None;\n7 |     for i in lst {\n\
    \  |              ^^^ move out of `lst` occurs here\n8 |         if i > *min &&\
    \ (next.is_none() || i < next.unwrap()) {\n  |                ---- borrow later\
    \ used here\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0505`.\n"
  stdout: ''
  timestamp: 1659823192
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    unimplemented!();\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpwbq_frc7.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823191
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut m = None;\n    let mut n = None;\n    for x in lst {\n        match\
    \ m {\n            None => m = Some(x),\n            Some(y) => {\n          \
    \      if x < y {\n                    n = m;\n                    m = Some(x);\n\
    \                } else if n.is_none() || x < n.unwrap() {\n                 \
    \   n = Some(x);\n                }\n            }\n        }\n    }\n    n\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmpzkb98f83.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823192
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    unimplemented!()\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpd7l60l62.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823188
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    if lst.len() < 2 {\n        return None;\n    }\n    let mut smallest = lst[0];\n\
    \    let mut next_smallest = lst[1];\n    for i in 2..lst.len() {\n        if\
    \ lst[i] < smallest {\n            smallest = lst[i];\n        } else if lst[i]\
    \ < next_smallest {\n            next_smallest = lst[i];\n        }\n    }\n \
    \   if smallest == next_smallest {\n        None\n    } else {\n        Some(next_smallest)\n\
    \    }\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `Some(2)`', /tmp/tmpm82bhnb4.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823192
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    unimplemented!();\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpwbq_frc7.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823191
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut iter = lst.iter();\n    match iter.next() {\n        Some(a) => match\
    \ iter.next() {\n            Some(b) => {\n                let mut smallest =\
    \ if a < b { a } else { b };\n                let mut next_smallest = if a < b\
    \ { b } else { a };\n                for val in iter {\n                    if\
    \ val < &smallest {\n                        next_smallest = smallest;\n     \
    \                   smallest = val;\n                    } else if val < &next_smallest\
    \ {\n                        next_smallest = val;\n                    }\n   \
    \             }\n                Some(*next_smallest)\n            }\n       \
    \     None => None,\n        },\n        None => None,\n    }\n}\n\nfn main()\
    \ {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmp44vqyfb0.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823192
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut lst = lst;\n    lst.sort();\n    if lst.len() > 1 {\n        Some(lst[1])\n\
    \    } else {\n        None\n    }\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmp4y6okxkf.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823191
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut sorted = lst.clone();\n    sorted.sort();\n    sorted.get(1).cloned()\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmp0ugibceu.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823190
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    unimplemented!();\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpwbq_frc7.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823191
- exit_code: 0
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    use std::cmp::Ordering;\n    let mut m = isize::max_value();\n    let mut\
    \ n = isize::max_value();\n    for item in lst {\n        match m.cmp(&item) {\n\
    \            Ordering::Less => {\n                match n.cmp(&item) {\n     \
    \               Ordering::Less => (),\n                    Ordering::Equal =>\
    \ (),\n                    Ordering::Greater => n = item,\n                }\n\
    \            }\n            Ordering::Equal => (),\n            Ordering::Greater\
    \ => {\n                n = m;\n                m = item;\n            }\n   \
    \     }\n    }\n    if n == isize::max_value() {\n        None\n    } else {\n\
    \        Some(n)\n    }\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823192
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    None\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `None`,\n right: `Some(2)`', /tmp/tmpjcnvlwkv.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823192
- exit_code: 0
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    if lst.len() < 2 {\n        return None;\n    }\n    let mut lst2 = lst.clone();\n\
    \    lst2.sort();\n    if lst2[0] == lst2[1] {\n        None\n    } else {\n \
    \       Some(lst2[1])\n    }\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823192
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut min = std::isize::MAX;\n    let mut second_min = std::isize::MAX;\n\
    \    for i in lst {\n        if i < min {\n            second_min = min;\n   \
    \         min = i;\n        } else if i < second_min {\n            second_min\
    \ = i;\n        }\n    }\n    if second_min == std::isize::MAX {\n        None\n\
    \    } else {\n        Some(second_min)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n\
    \    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmp5dvdjgtj.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823192
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut smallest = None;\n    let mut next_smallest = None;\n    for item\
    \ in lst {\n        if let Some(smallest_val) = smallest {\n            if item\
    \ < smallest_val {\n                if let Some(next_smallest_val) = next_smallest\
    \ {\n                    if item < next_smallest_val {\n                     \
    \   next_smallest = Some(item);\n                    }\n                } else\
    \ {\n                    next_smallest = Some(item);\n                }\n    \
    \        } else if item > smallest_val {\n                if let Some(next_smallest_val)\
    \ = next_smallest {\n                    if item < next_smallest_val {\n     \
    \                   next_smallest = Some(item);\n                    }\n     \
    \           } else {\n                    next_smallest = Some(item);\n      \
    \          }\n            }\n        } else {\n            smallest = Some(item);\n\
    \        }\n    }\n    next_smallest\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `Some(2)`', /tmp/tmp4gw_y161.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823192
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    unimplemented!();\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpwbq_frc7.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659823191
- exit_code: 0
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut sorted = lst.clone();\n    sorted.sort();\n    let n = sorted.len();\n\
    \    if n <= 1 {\n        return None;\n    }\n    sorted.dedup();\n    let m\
    \ = sorted.len();\n    if m == 1 {\n        return None;\n    }\n    if m == n\
    \ {\n        return Some(sorted[1]);\n    }\n    sorted.dedup();\n    return Some(sorted[1]);\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823192
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    if lst.len() == 0 {\n        return None;\n    }\n    let mut min = lst[0];\n\
    \    let mut sec_min = None;\n    for i in lst.iter() {\n        if *i < min {\n\
    \            sec_min = Some(min);\n            min = *i;\n        } else if sec_min.is_none()\
    \ || *i < sec_min.unwrap() {\n            sec_min = Some(*i);\n        }\n   \
    \ }\n    sec_min\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `Some(2)`', /tmp/tmpo3rc46ho.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823192
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut lst = lst;\n    lst.sort();\n    if lst.len() >= 2 {\n        Some(lst[1])\n\
    \    } else {\n        None\n    }\n}\n\nfn main() {\n    let candidate = next_smallest;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5,\
    \ 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n\
    \    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35,\
    \ 34, 12, -45]), Some(-35));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmpv1546d95.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823189
- exit_code: 0
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    if lst.len() <= 1 {\n        return None;\n    }\n    let mut first = isize::max_value();\n\
    \    let mut second = isize::max_value();\n    for i in lst {\n        if i <\
    \ first {\n            second = first;\n            first = i;\n        } else\
    \ if i < second && i != first {\n            second = i;\n        }\n    }\n \
    \   if second == isize::max_value() {\n        None\n    } else {\n        Some(second)\n\
    \    }\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823192
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut sorted = lst.clone();\n    sorted.sort();\n    match sorted.get(1)\
    \ {\n        Some(e) => Some(*e),\n        None => None,\n    }\n}\n\nfn main()\
    \ {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `None`', /tmp/tmpzwmjml_z.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823193
- exit_code: 101
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    if lst.len() < 2 {\n        return None;\n    }\n    let mut smallest = lst[0];\n\
    \    let mut second_smallest = None;\n    for elem in lst {\n        if elem <\
    \ smallest {\n            second_smallest = Some(smallest);\n            smallest\
    \ = elem;\n        } else if elem < second_smallest.unwrap_or(smallest) {\n  \
    \          second_smallest = Some(elem);\n        }\n    }\n    return second_smallest;\n\
    }\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `None`,\n right: `Some(2)`', /tmp/tmp0o729izi.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659823193
- exit_code: 0
  program: "/// You are given a list of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n/// Return None if there\
    \ is no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n\
    \    let mut clone = lst.clone();\n    clone.sort();\n    clone.dedup();\n   \
    \ if clone.len() < 2 {\n        None\n    } else {\n        Some(clone[1])\n \
    \   }\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
    \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823192
