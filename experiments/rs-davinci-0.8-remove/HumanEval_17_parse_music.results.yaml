language: rs
name: HumanEval_17_parse_music
results:
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut sum = 0;\n    let mut result = Vec::new();\n\
    \    for s in music_string.split(\" \") {\n        match s {\n            \"o\"\
    \ => {\n                result.push(4);\n                sum += 4;\n         \
    \   }\n            \"o|\" => {\n                result.push(2);\n            \
    \    sum += 2;\n            }\n            \".|\" => {\n                result.push(1);\n\
    \                sum += 1;\n            }\n            _ => {}\n        }\n  \
    \  }\n    result.push(sum);\n    result\n}\n\nfn main() {\n    let candidate =\
    \ parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmpmg8t0x0z.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821615
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut res = Vec::new();\n    let mut it = music_string.chars();\n\
    \    while let Some(c) = it.next() {\n        match c {\n            'o' => {\n\
    \                res.push(4);\n                if let Some('|') = it.next() {\n\
    \                    if let Some('|') = it.next() {\n                        res.push(4);\n\
    \                    }\n                }\n            }\n            'o' => {\n\
    \                res.push(2);\n                if let Some('|') = it.next() {\n\
    \                    if let Some('|') = it.next() {\n                        res.push(2);\n\
    \                    }\n                }\n            }\n            '.' => {\n\
    \                res.push(1);\n                if let Some('|') = it.next() {\n\
    \                    if let Some('|') = it.next() {\n                        res.push(1);\n\
    \                    }\n                }\n            }\n            _ => {}\n\
    \        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 4, 1, 1, 4, 4, 4, 4]`,\n right: `[2, 2, 1, 1, 4, 4, 4, 4]`', /tmp/tmp2mncq0ub.rs:48:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821615
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    music_string.chars().fold(Vec::new(), |mut accum,\
    \ c| {\n        match c {\n            'o' => accum.push(4),\n            'o'\
    \ | '|' => accum.push(2),\n            '.' | '|' => accum.push(1),\n         \
    \   _ => ()\n        }\n        accum\n    })\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 1, 2, 1, 2, 1, 2]`,\n right: `[1, 1, 1, 1]`', /tmp/tmp81ifo7df.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821615
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    music_string.chars().filter_map(|x| match x {\n\
    \        'o' => Some(4),\n        '|' => None,\n        _ => Some(1),\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 1, 4, 1, 4, 1, 4]`,\n right: `[4, 4, 4, 4]`', /tmp/tmp5xbannga.rs:19:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821615
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpe_2zgkkq.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659821615
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpz4n94tui.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659821615
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats: Vec<isize> = Vec::new();\n    let\
    \ mut current_beat: isize = 0;\n    let mut current_note: Option<char> = None;\n\
    \    for c in music_string.chars() {\n        if c == ' ' {\n            continue;\n\
    \        }\n        if c == '.' || c == 'o' {\n            current_note = Some(c);\n\
    \        } else if c == '|' {\n            match current_note {\n            \
    \    Some('o') => {\n                    beats.push(current_beat + 4);\n     \
    \               current_beat = 0;\n                }\n                Some('.')\
    \ => {\n                    beats.push(current_beat + 1);\n                  \
    \  current_beat = 0;\n                }\n                Some(_) => (),\n    \
    \            None => (),\n            }\n        }\n    }\n    beats\n}\n\nfn\
    \ main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpuatrp5vl.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821615
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    // This is a stub. Please implement the function\
    \ and remove this comment.\n    let mut result = Vec::new();\n    for c in music_string.chars()\
    \ {\n        if c == 'o' {\n            result.push(4);\n        } else if c ==\
    \ '|' {\n            result.push(2);\n        } else if c == '.' {\n         \
    \   result.push(1);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 1, 2, 1, 2, 1, 2]`,\n right: `[1, 1, 1, 1]`', /tmp/tmpr5adk0bb.rs:27:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821615
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let chars = music_string.chars().collect::<Vec<char>>();\n\
    \    let mut current_beat = 0;\n    for i in 0..chars.len() {\n        if chars[i]\
    \ == 'o' {\n            result.push(4);\n            current_beat += 4;\n    \
    \    } else if chars[i] == '.' {\n            result.push(1);\n            current_beat\
    \ += 1;\n        } else if chars[i] == '|' {\n            if chars[i - 1] == 'o'\
    \ {\n                current_beat += 2;\n            } else {\n              \
    \  current_beat += 1;\n            }\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 4, 1, 1, 4, 4, 4, 4]`,\n right: `[2, 2, 1, 1, 4, 4, 4, 4]`', /tmp/tmpd5qt40k7.rs:35:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821615
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    music_string.chars().fold(Vec::new(), |mut acc,\
    \ c| {\n        match c {\n            'o' => acc.push(4),\n            'o' |\
    \ '|' => acc.push(2),\n            '.' | '|' => acc.push(1),\n            _ =>\
    \ (),\n        }\n        acc\n    })\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 1, 2, 1, 2, 1, 2]`,\n right: `[1, 1, 1, 1]`', /tmp/tmp7cul1795.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821615
- exit_code: 0
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let\
    \ mut iter = music_string.chars();\n    while let Some(c) = iter.next() {\n  \
    \      if c == 'o' {\n            if let Some(n) = iter.next() {\n           \
    \     if n == '|' {\n                    result.push(2);\n                } else\
    \ {\n                    result.push(4);\n                }\n            } else\
    \ {\n                result.push(4);\n            }\n        } else if c == '.'\
    \ {\n            if let Some(n) = iter.next() {\n                if n == '|' {\n\
    \                    result.push(1);\n                } else {\n             \
    \       // TODO: Handle error\n                }\n            } else {\n     \
    \           // TODO: Handle error\n            }\n        } else {\n         \
    \   // TODO: Handle error\n        }\n    }\n    result\n}\n\nfn main() {\n  \
    \  let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")),\
    \ vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")),\
    \ vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o\
    \ o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821615
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    music_string.chars().map(|ch| match ch {\n    \
    \    'o' => 4,\n        'o' | '.' => 2,\n        '|' => 1,\n        _ => 0,\n\
    \    }).collect()\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 0, 4, 0, 4, 0, 4]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpq73fxr7z.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821615
- exit_code: 0
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let beats = vec![4, 2, 1];\n    let mut music_string\
    \ = music_string.chars();\n    let mut parsed = Vec::new();\n    while let Some(c)\
    \ = music_string.next() {\n        if c == 'o' {\n            match music_string.next()\
    \ {\n                Some('|') => parsed.push(2),\n                _ => parsed.push(4),\n\
    \            }\n        } else if c == '.' {\n            parsed.push(1);\n  \
    \          let _ = music_string.next();\n        }\n    }\n    parsed\n}\n\nfn\
    \ main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821615
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpe_2zgkkq.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659821615
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    // TODO: implement this function.\n    let half_note\
    \ = vec!['o', '.'];\n    let half_note_string = vec![\"o|\", \".|\"];\n    let\
    \ full_note = vec!['O', '-'];\n    let full_note_string = vec![\"O|\", \"-|\"\
    ];\n    let mut ret = Vec::new();\n    for note in music_string.split(\" \") {\n\
    \        let mut beats = 0;\n        for (i, c) in note.chars().enumerate() {\n\
    \            if half_note.contains(&c) {\n                beats += 1;\n      \
    \      } else if full_note.contains(&c) {\n                beats += 2;\n     \
    \       } else if half_note_string.contains(&note[i..i+2]) {\n               \
    \ beats += 1;\n            } else if full_note_string.contains(&note[i..i+2])\
    \ {\n                beats += 2;\n            }\n        }\n        ret.push(beats);\n\
    \    }\n    ret\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp638lsgv8.rs:22:49\n   |\n\
    22 |             } else if half_note_string.contains(&note[i..i+2]) {\n   |  \
    \                                               ^^^^^^^^^^^^^ expected `&str`,\
    \ found `str`\n   |\n   = note: expected reference `&&str`\n              found\
    \ reference `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp638lsgv8.rs:24:49\n\
    \   |\n24 |             } else if full_note_string.contains(&note[i..i+2]) {\n\
    \   |                                                 ^^^^^^^^^^^^^ expected `&str`,\
    \ found `str`\n   |\n   = note: expected reference `&&str`\n              found\
    \ reference `&str`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659821615
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut res = Vec::new();\n    let mut chars =\
    \ music_string.chars();\n    while let Some(c) = chars.next() {\n        match\
    \ c {\n            'o' => {\n                res.push(4);\n                if\
    \ let Some('|') = chars.next() {\n                    // skip '|' if found\n \
    \               }\n            }\n            '.' => {\n                if let\
    \ Some('|') = chars.next() {\n                    res.push(1);\n             \
    \   }\n            }\n            _ => {}\n        }\n    }\n    res\n}\n\nfn\
    \ main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 4, 1, 1, 4, 4, 4, 4]`,\n right: `[2, 2, 1, 1, 4, 4, 4, 4]`', /tmp/tmpw2pf4_ki.rs:35:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821615
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut res = Vec::new();\n    for ch in music_string.chars()\
    \ {\n        match ch {\n            'o' => res.push(4),\n            '|' => res.push(2),\n\
    \            '.' => res.push(1),\n            _ => (),\n        }\n    }\n   \
    \ res\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 1, 2, 1, 2, 1, 2]`,\n right: `[1, 1, 1, 1]`', /tmp/tmpfd2bq08o.rs:25:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821615
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats = Vec::new();\n    let mut beat_count\
    \ = 0;\n    for ch in music_string.chars() {\n        if ch == 'o' {\n       \
    \     beat_count += 4;\n        } else if ch == '|' {\n            beats.push(beat_count);\n\
    \            beat_count = 0;\n        }\n    }\n    beats.push(beat_count);\n\
    \    beats\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmp5f592aq9.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821615
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    unimplemented!(\"Parse music string '{}'\", music_string);\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented: Parse music string '''''',
    /tmp/tmpai3xaemm.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659821615
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut parsed_music: Vec<isize> = Vec::new();\n\
    \    let letters = music_string.chars().filter(|x| !x.is_whitespace()).collect::<Vec<char>>();\n\
    \    for letter in letters {\n        match letter {\n            'o' => parsed_music.push(4),\n\
    \            'o' | '.' => parsed_music.push(1),\n            '|' => (),\n    \
    \        _ => panic!(\"Unrecognized letter in string\"),\n        }\n    }\n \
    \   parsed_music\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 4, 1, 1, 4, 4, 4, 4]`,\n right: `[2, 2, 1, 1, 4, 4, 4, 4]`', /tmp/tmpcs4p9jq8.rs:27:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821615
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut cur_beat\
    \ = 0;\n    for c in music_string.chars() {\n        match c {\n            'o'\
    \ => {\n                result.push(cur_beat);\n                cur_beat = 4;\n\
    \            }\n            'o' | '|' => {\n                result.push(cur_beat);\n\
    \                cur_beat = 2;\n            }\n            '.' | '|' => {\n  \
    \              result.push(cur_beat);\n                cur_beat = 1;\n       \
    \     }\n            _ => {\n                cur_beat += 1;\n            }\n \
    \       }\n    }\n    result\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 5, 5, 5]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpnfwghhdt.rs:36:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821615
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut output = Vec::new();\n    let mut counter\
    \ = 0;\n    let mut slice = \"\";\n    for c in music_string.chars() {\n     \
    \   if c == 'o' {\n            counter += 4;\n            slice = \"\";\n    \
    \    } else if c == '.' {\n            slice += \".\";\n        } else if c ==\
    \ '|' {\n            if slice == \".\" {\n                counter += 1;\n    \
    \        } else {\n                counter += 2;\n            }\n            slice\
    \ = \"\";\n        } else {\n            output.push(counter);\n            counter\
    \ = 0;\n        }\n    }\n    output.push(counter);\n    output\n}\n\nfn main()\
    \ {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0368]: binary assignment operation `+=` cannot be applied to type\
    \ `&str`\n  --> /tmp/tmpafjsbc3u.rs:17:13\n   |\n17 |             slice += \"\
    .\";\n   |             -----^^^^^^^\n   |             |\n   |             cannot\
    \ use `+=` on type `&str`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0368`.\n"
  stdout: ''
  timestamp: 1659821615
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    music_string.split('|').map(|s| s.chars().count()\
    \ as isize).collect()\n}\n\nfn main() {\n    let candidate = parse_music;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmpdux0etln.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821615
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    music_string.split(\" \").filter_map(|m| {\n  \
    \      let m = m.trim();\n        if m.ends_with(\"|\") {\n            Some(match\
    \ m.len() {\n                1 => 1,\n                2 => 2,\n              \
    \  _ => panic!(\"bad input\"),\n            })\n        } else {\n           \
    \ None\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[4, 4, 4, 4]`', /tmp/tmp47n5conj.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821615
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut note\
    \ = String::new();\n    for c in music_string.chars() {\n        if c == 'o' ||\
    \ c == '.' {\n            note.push(c);\n        } else if c == '|' {\n      \
    \      if note == \"o\" {\n                result.push(4);\n            } else\
    \ if note == \"o|\" {\n                result.push(2);\n            } else if\
    \ note == \".|\" {\n                result.push(1);\n            }\n         \
    \   note = String::new();\n        }\n    }\n    result\n}\n\nfn main() {\n  \
    \  let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")),\
    \ vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")),\
    \ vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o\
    \ o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[4, 4, 4, 4]`', /tmp/tmp_d5es51e.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821615
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut res = Vec::new();\n    let mut note_sequence\
    \ = music_string.chars();\n    while let Some(note) = note_sequence.next() {\n\
    \        match note {\n            'o' => {\n                res.push(4);\n  \
    \              if let Some('|') = note_sequence.next() {\n                   \
    \ continue;\n                }\n            }\n            'o' => {\n        \
    \        res.push(2);\n                if let Some('|') = note_sequence.next()\
    \ {\n                    continue;\n                }\n            }\n       \
    \     '.' => {\n                res.push(1);\n                if let Some('|')\
    \ = note_sequence.next() {\n                    continue;\n                }\n\
    \            }\n            _ => continue,\n        }\n    }\n    res\n}\n\nfn\
    \ main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 4, 1, 1, 4, 4, 4, 4]`,\n right: `[2, 2, 1, 1, 4, 4, 4, 4]`', /tmp/tmpl1wvntld.rs:42:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821615
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    music_string.split_whitespace().map(|s| {\n   \
    \     let l = s.chars().count();\n        let beats = s.chars().filter(|c| *c\
    \ == '|').count();\n        let add_beats = match s.chars().last() {\n       \
    \     Some('o') => 4 - beats,\n            Some('|') => 2 - beats,\n         \
    \   _ => 1 - beats,\n        };\n        if l == 1 {\n            return 1;\n\
    \        }\n        add_beats as isize\n    }).collect()\n}\n\nfn main() {\n \
    \   let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")),\
    \ vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")),\
    \ vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o\
    \ o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 1, 1, 1]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpzongeh90.rs:27:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821615
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let\
    \ mut iter = music_string.chars();\n    while let Some(c) = iter.next() {\n  \
    \      if c == 'o' {\n            result.push(4);\n        } else if c == '|'\
    \ {\n            result.push(1);\n        } else if c == '.' {\n            result.push(1);\n\
    \            iter.next();\n        }\n    }\n    result\n}\n\nfn main() {\n  \
    \  let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")),\
    \ vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")),\
    \ vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o\
    \ o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 1, 4, 1, 1, 1, 4, 4, 4, 4]`,\n right: `[2, 2, 1, 1, 4, 4, 4, 4]`', /tmp/tmplvw_vexk.rs:29:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821615
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpe_2zgkkq.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659821615
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    unimplemented!(\"Parse music string: '{}'\", music_string);\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented: Parse music string: '''''',
    /tmp/tmprv0ycm5i.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659821615
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let map = [('o', 4), ('|', 2), ('.', 1)];\n   \
    \ music_string.chars().filter_map(|c| map.iter().find(|&&(a, _)| a == c).map(|&(_,\
    \ v)| v)).collect()\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 1, 2, 1, 2, 1, 2]`,\n right: `[1, 1, 1, 1]`', /tmp/tmp0ycy6va8.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821615
- exit_code: 0
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let beats = [1, 2, 4];\n    let mut result = Vec::new();\n\
    \    let mut note = music_string.chars();\n    while let Some(current) = note.next()\
    \ {\n        match current {\n            'o' => {\n                if let Some('|')\
    \ = note.next() {\n                    result.push(beats[1]);\n              \
    \  } else {\n                    result.push(beats[2]);\n                }\n \
    \           }\n            '.' => {\n                if let Some('|') = note.next()\
    \ {\n                    result.push(beats[0]);\n                }\n         \
    \   }\n            _ => (),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\"\
    )), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")),\
    \ vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")),\
    \ vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o\
    \ o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821615
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_length\
    \ = 0;\n    for ch in music_string.chars() {\n        if ch == 'o' {\n       \
    \     current_length += 4;\n        } else if ch == '|' {\n            result.push(current_length);\n\
    \            current_length = 0;\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[4, 4, 4, 4]`', /tmp/tmp6p4fya_t.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821615
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut i = 0;\n\
    \    while i < music_string.len() {\n        let mut duration = 1;\n        let\
    \ cur_char = music_string.chars().nth(i).unwrap();\n        if cur_char == 'o'\
    \ {\n            duration = 4;\n        } else if cur_char == '.' {\n        \
    \    duration = 1;\n        } else if cur_char == 'o' {\n            duration\
    \ = 2;\n        } else {\n            panic!(\"Unrecognized character!\");\n \
    \       }\n        i += 1;\n        if i < music_string.len() {\n            let\
    \ next_char = music_string.chars().nth(i).unwrap();\n            if next_char\
    \ == '.' {\n                duration += 1;\n            } else if next_char ==\
    \ '|' {\n                duration /= 2;\n            } else {\n              \
    \  panic!(\"Unrecognized character!\");\n            }\n            i += 1;\n\
    \        }\n        result.push(duration);\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''Unrecognized character!'', /tmp/tmpqcgbt4da.rs:31:17

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659821615
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    for c in music_string.chars()\
    \ {\n        if c == 'o' {\n            result.push(4);\n        } else if c ==\
    \ '|' {\n            result.push(-1);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-1, -1, -1, -1]`,\n right: `[1, 1, 1, 1]`', /tmp/tmpf5yvu884.rs:24:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821615
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut sum = 0;\n    let mut result = Vec::new();\n\
    \    for c in music_string.chars() {\n        match c {\n            '|' => {\n\
    \                result.push(sum);\n                sum = 0;\n            }\n\
    \            'o' => sum += 4,\n            '.' => sum += 1,\n            _ =>\
    \ {\n                if sum > 0 {\n                    result.push(sum);\n   \
    \                 sum = 0;\n                }\n            }\n        }\n    }\n\
    \    if sum > 0 {\n        result.push(sum);\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 4, 1, 1, 4, 4, 4, 4]`,\n right: `[2, 2, 1, 1, 4, 4, 4, 4]`', /tmp/tmpo4kpkjni.rs:38:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821615
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let chars: Vec<char> = music_string.chars().collect();\n\
    \    let mut result: Vec<isize> = Vec::new();\n    let mut sum: isize = 0;\n \
    \   for (i, x) in chars.iter().enumerate() {\n        if x == &'o' {\n       \
    \     sum += 4;\n        } else if x == &'|' {\n            result.push(sum);\n\
    \            sum = 0;\n        } else if i == 0 {\n            sum += 2;\n   \
    \     } else if chars[i - 1] == 'o' {\n            sum += 2;\n        } else {\n\
    \            sum += 1;\n        }\n    }\n    result.push(sum);\n    result\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmpb34cxtib.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821615
- exit_code: 0
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats: Vec<isize> = Vec::new();\n    let\
    \ mut notes: Vec<char> = music_string.chars().collect();\n    while notes.len()\
    \ > 0 {\n        match notes.remove(0) {\n            'o' => {\n             \
    \   if notes.len() > 0 && notes[0] == '|' {\n                    notes.remove(0);\n\
    \                    beats.push(2);\n                } else {\n              \
    \      beats.push(4);\n                }\n            }\n            '.' => {\n\
    \                if notes.len() > 0 && notes[0] == '|' {\n                   \
    \ notes.remove(0);\n                    beats.push(1);\n                } else\
    \ {\n                    beats.push(4);\n                }\n            }\n  \
    \          _ => {}\n        }\n    }\n    beats\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821615
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats = vec![];\n    let mut position =\
    \ 0;\n    let mut length = 1;\n    let mut metronome = 0;\n    let mut note =\
    \ false;\n    let mut rest = false;\n    let mut repeat = false;\n    let mut\
    \ bar = false;\n    let mut tune_end = false;\n    let mut duplet = false;\n \
    \   let mut triplet = false;\n    let mut quadruplet = false;\n    let mut repeat_time\
    \ = 0;\n    let mut repeat_count = 0;\n    let mut repeat_len = 0;\n    let mut\
    \ repeat_last = 0;\n    let mut repeat_beats = vec![];\n    let mut repeat_notes\
    \ = vec![];\n    while position < music_string.len() {\n        match music_string.chars().nth(position).unwrap()\
    \ {\n            'o' => {\n                note = true;\n                length\
    \ = 4;\n            }\n            '.' => {\n                note = true;\n  \
    \              length = 1;\n            }\n            'b' => {\n            \
    \    rest = true;\n                length = 1;\n            }\n            '|'\
    \ => {\n                bar = true;\n            }\n            '(' => {\n   \
    \             repeat = true;\n                repeat_time = metronome;\n     \
    \           repeat_beats = beats.clone();\n                repeat_notes = vec![];\n\
    \            }\n            ')' => {\n                repeat = false;\n      \
    \          repeat_len = metronome - repeat_time;\n                repeat_last\
    \ = repeat_time + (repeat_len * repeat_count);\n                while metronome\
    \ < repeat_last {\n                    let mut i = 0;\n                    while\
    \ i < repeat_len {\n                        beats.push(repeat_beats[i]);\n   \
    \                     repeat_notes.push(music_string.chars().nth(i + 1).unwrap());\n\
    \                        i += 1;\n                    }\n                    metronome\
    \ += repeat_len;\n                }\n            }\n            '2' => {\n   \
    \             duplet = true;\n            }\n            '3' => {\n          \
    \      triplet = true;\n            }\n            '4' => {\n                quadruplet\
    \ = true;\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpkrim87b_.rs:81:3\n\
    \   |\n8  | fn parse_music(music_string: String) -> Vec<isize> {\n   |       \
    \                                             - unclosed delimiter\n...\n27 |\
    \     while position < music_string.len() {\n   |                            \
    \             - unclosed delimiter\n28 |         match music_string.chars().nth(position).unwrap()\
    \ {\n   |                                                           - unclosed\
    \ delimiter\n...\n70 |             '4' => {\n   |                    - this delimiter\
    \ might not be properly closed...\n71 |                 quadruplet = true;\n72\
    \ | }\n   | - ...as it matches this but it has different indentation\n...\n81\
    \ | }\n   |   ^\n\nerror: expected identifier, found keyword `fn`\n  --> /tmp/tmpkrim87b_.rs:74:1\n\
    \   |\n74 | fn main() {\n   | ^^ expected identifier, found keyword\n\nerror:\
    \ expected one of `=>`, `@`, `if`, or `|`, found `main`\n  --> /tmp/tmpkrim87b_.rs:74:4\n\
    \   |\n74 | fn main() {\n   |    ^^^^ expected one of `=>`, `@`, `if`, or `|`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpkrim87b_.rs:27:5\n   |\n8  | \
    \  fn parse_music(music_string: String) -> Vec<isize> {\n   |                \
    \                           ---------- expected `Vec<isize>` because of return\
    \ type\n...\n27 | /     while position < music_string.len() {\n28 | |        \
    \ match music_string.chars().nth(position).unwrap() {\n29 | |             'o'\
    \ => {\n30 | |                 note = true;\n...  |\n80 | |     assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n81 | | }\n   | |__^\
    \ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \           found unit type `()`\n\nerror: aborting due to 4 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659821615
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats: Vec<isize> = Vec::new();\n    let\
    \ mut prev_num = 0;\n    for (i, c) in music_string.chars().enumerate() {\n  \
    \      if c == 'o' {\n            prev_num += 4;\n        } else if c == '|' {\n\
    \            if music_string.chars().nth(i-1).unwrap() == '.' {\n            \
    \    prev_num += 1;\n            } else {\n                prev_num += 2;\n  \
    \          }\n        } else if c == '.' || c == 'o' {\n            continue;\n\
    \        } else {\n            beats.push(prev_num);\n            prev_num = 0;\n\
    \        }\n    }\n    beats.push(prev_num);\n    beats\n}\n\nfn main() {\n  \
    \  let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")),\
    \ vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")),\
    \ vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o\
    \ o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmpwr9s5dxx.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821615
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    for\
    \ c in music_string.chars() {\n        match c {\n            'o' => result.push(4),\n\
    \            'o' | '|' => result.push(2),\n            '.' | '|' => result.push(1),\n\
    \            _ => result.push(0),\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 0, 4, 0, 4, 0, 4]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpdzzyi8hj.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821615
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    unimplemented!(\"Write this function\");\n}\n\n\
    fn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented: Write this function'', /tmp/tmpwaee914t.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659821615
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    // this is a horrible hack, but Rust's regex engine\
    \ is far from stable and doesn't support named capturing\n    let re = Regex::new(r\"\
    o(\\|+)?\").unwrap();\n    let mut matches: Vec<_> = re.find_iter(&music_string).collect();\n\
    \    let res: Vec<isize> = matches.drain(..).map(|m| {\n        if m.as_str().len()\
    \ == 1 {\n            4\n        } else {\n            2 * m.as_str().len() as\
    \ isize\n        }\n    }).collect();\n    return res;\n}\n\nfn main() {\n   \
    \ let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")),\
    \ vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")),\
    \ vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o\
    \ o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Regex`\n  -->\
    \ /tmp/tmpbtu1rvgm.rs:10:14\n   |\n10 |     let re = Regex::new(r\"o(\\|+)?\"\
    ).unwrap();\n   |              ^^^^^ use of undeclared type `Regex`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659821615
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats = Vec::new();\n    let mut state\
    \ = State::Start;\n    let mut count = 0;\n    for c in music_string.chars() {\n\
    \        match state {\n            State::Start => {\n                if c ==\
    \ 'o' {\n                    state = State::WholeNote;\n                    count\
    \ = 4;\n                } else if c == '.' {\n                    state = State::QuaterNote;\n\
    \                    count = 1;\n                }\n            }\n          \
    \  State::WholeNote => {\n                if c == '|' {\n                    state\
    \ = State::Start;\n                    beats.push(count);\n                }\n\
    \            }\n            State::QuaterNote => {\n                if c == '|'\
    \ {\n                    state = State::Start;\n                    beats.push(count);\n\
    \                }\n            }\n        }\n    }\n    beats\n}\n\nfn main()\
    \ {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `State`\n  -->\
    \ /tmp/tmpj11tdm4y.rs:10:21\n   |\n10 |     let mut state = State::Start;\n  \
    \ |                     ^^^^^ use of undeclared type `State`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `State`\n  --> /tmp/tmpj11tdm4y.rs:14:13\n\
    \   |\n14 |             State::Start => {\n   |             ^^^^^ use of undeclared\
    \ type `State`\n\nerror[E0433]: failed to resolve: use of undeclared type `State`\n\
    \  --> /tmp/tmpj11tdm4y.rs:16:29\n   |\n16 |                     state = State::WholeNote;\n\
    \   |                             ^^^^^ use of undeclared type `State`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `State`\n  --> /tmp/tmpj11tdm4y.rs:19:29\n\
    \   |\n19 |                     state = State::QuaterNote;\n   |             \
    \                ^^^^^ use of undeclared type `State`\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `State`\n  --> /tmp/tmpj11tdm4y.rs:23:13\n\
    \   |\n23 |             State::WholeNote => {\n   |             ^^^^^ use of undeclared\
    \ type `State`\n\nerror[E0433]: failed to resolve: use of undeclared type `State`\n\
    \  --> /tmp/tmpj11tdm4y.rs:25:29\n   |\n25 |                     state = State::Start;\n\
    \   |                             ^^^^^ use of undeclared type `State`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `State`\n  --> /tmp/tmpj11tdm4y.rs:29:13\n\
    \   |\n29 |             State::QuaterNote => {\n   |             ^^^^^ use of\
    \ undeclared type `State`\n\nerror[E0433]: failed to resolve: use of undeclared\
    \ type `State`\n  --> /tmp/tmpj11tdm4y.rs:31:29\n   |\n31 |                  \
    \   state = State::Start;\n   |                             ^^^^^ use of undeclared\
    \ type `State`\n\nerror: aborting due to 8 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659821615
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    music_string.chars().flat_map(|c| match c {\n \
    \       'o' => vec![4],\n        'o' | '.' => vec![2],\n        '|' => vec![1],\n\
    \        _ => vec![],\n    }).collect()\n}\n\nfn main() {\n    let candidate =\
    \ parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2, 1, 2, 1, 2, 1, 2, 1]`,\n right: `[1, 1, 1, 1]`', /tmp/tmpcb5y68k2.rs:21:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821615
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n\tlet mut music_vector: Vec<isize> = Vec::new();\n\t\
    let mut characters = music_string.chars();\n\twhile let Some(c) = characters.next()\
    \ {\n\t\tif c == 'o' {\n\t\t\tmusic_vector.push(4);\n\t\t} else if c == '.' {\n\
    \t\t\tmusic_vector.push(1);\n\t\t} else if c == '|' {\n\t\t\tif let Some(c) =\
    \ characters.next() {\n\t\t\t\tif c == 'o' {\n\t\t\t\t\tmusic_vector.push(2);\n\
    \t\t\t\t} else if c == '.' {\n\t\t\t\t\tmusic_vector.push(1);\n\t\t\t\t}\n\t\t\
    \t}\n\t\t}\n\t}\n\tmusic_vector\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 4, 1, 1, 4, 4, 4, 4]`,\n right: `[2, 2, 1, 1, 4, 4, 4, 4]`', /tmp/tmpuo6_a9_s.rs:34:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821615
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut ret: Vec<isize> = Vec::new();\n    for\
    \ ch in music_string.chars() {\n        match ch {\n            'o' => ret.push(4),\n\
    \            'o' => ret.push(2),\n            '.' => ret.push(1),\n          \
    \  _ => {}\n        }\n    }\n    ret\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 4, 1, 1, 4, 4, 4, 4]`,\n right: `[2, 2, 1, 1, 4, 4, 4, 4]`', /tmp/tmphg7_s4cs.rs:26:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821615
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut res = Vec::new();\n    let mut notes =\
    \ music_string.chars();\n    while let Some(n) = notes.next() {\n        match\
    \ n {\n            'o' => {\n                if let Some(n) = notes.next() {\n\
    \                    if n == '|' {\n                        res.push(2);\n   \
    \                 } else {\n                        res.push(4);\n           \
    \         }\n                } else {\n                    res.push(4);\n    \
    \            }\n            }\n            '.' => {\n                if let Some(n)\
    \ = notes.next() {\n                    if n == '|' {\n                      \
    \  res.push(1);\n                    } else {\n                        panic!(\"\
    invalid music string\");\n                    }\n                } else {\n  \
    \                  panic!(\"invalid music string\");\n                }\n    \
    \        }\n            _ => panic!(\"invalid music string\"),\n        }\n  \
    \  }\n    res\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''invalid music string'', /tmp/tmpi2z4z76e.rs:35:18

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659821615
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut vec = Vec::new();\n    let mut temp = String::new();\n\
    \    for e in music_string.chars() {\n        match e {\n            'o' => {\n\
    \                temp.push(e);\n                vec.push(4);\n            }\n\
    \            '.' => {\n                temp.push(e);\n                vec.push(1);\n\
    \            }\n            '|' => {\n                temp.push(e);\n        \
    \        vec.push(2);\n            }\n            _ => {\n                vec.push(0);\n\
    \            }\n        }\n    }\n    return vec;\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 0, 4, 0, 4, 0, 4]`,\n right: `[4, 4, 4, 4]`', /tmp/tmp6h7nke2b.rs:36:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821615
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beat_count = 0;\n    let mut results =\
    \ Vec::new();\n    let mut index = 0;\n    for character in music_string.chars()\
    \ {\n        match character {\n            'o' => {\n                if index\
    \ == 0 {\n                    results.push(4);\n                } else {\n   \
    \                 results[index-1] = 4;\n                }\n                index\
    \ += 1;\n            },\n            '|' => {\n                beat_count += 1;\n\
    \            },\n            '.' => {\n                beat_count += 1;\n    \
    \            results.push(beat_count);\n                beat_count = 0;\n    \
    \            index += 1;\n            },\n            _ => (),\n        }\n  \
    \  }\n    return results;\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 1 but the
    index is 1'', /tmp/tmpik41v280.rs:18:21

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659821615
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut chars\
    \ = music_string.chars();\n    while let Some(c) = chars.next() {\n        if\
    \ c == 'o' {\n            result.push(4);\n        } else if c == '.' {\n    \
    \        result.push(1);\n        } else if c == '|' {\n            chars.next();\n\
    \            continue;\n        } else {\n            panic!(\"Unexpected symbol\
    \ found: {}\", c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''Unexpected symbol found:  '', /tmp/tmp905koudu.rs:20:13

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659821615
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let note_to_beat_mapping = vec![\n        (String::from(\"\
    o\"), 4),\n        (String::from(\"o|\"), 2),\n        (String::from(\".|\"),\
    \ 1),\n    ];\n\n    let mut total_beats = 0;\n    let mut beats = Vec::new();\n\
    \n    for ch in music_string.split('|') {\n        let (_ch, beat) = note_to_beat_mapping.iter().find(|(key,\
    \ _beat)| *key == ch).unwrap();\n        total_beats += beat;\n        beats.push(beat);\n\
    \    }\n\n    println!(\"{}\", total_beats);\n    beats\n}\n\nfn main() {\n  \
    \  let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")),\
    \ vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")),\
    \ vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o\
    \ o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6im76u99.rs:25:5\n   |\n\
    8  | fn parse_music(music_string: String) -> Vec<isize> {\n   |              \
    \                           ---------- expected `Vec<isize>` because of return\
    \ type\n...\n25 |     beats\n   |     ^^^^^ expected `isize`, found `&{integer}`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&{integer}>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659821615
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut b = 0;\n    music_string.chars().map(|c|\
    \ {\n        b = match c {\n            'o' => 4,\n            'o' | '|' => 2,\n\
    \            '.' | '|' => 1,\n            _ => b,\n        };\n        b\n   \
    \ }).collect()\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 4, 4, 4, 4, 4, 4]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpd3j69mk8.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821616
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    use std::collections::HashMap;\n    let mut beats:\
    \ Vec<isize> = Vec::new();\n    let mut beat_map: HashMap<char, isize> = HashMap::new();\n\
    \    beat_map.insert('o', 4);\n    beat_map.insert('.', 1);\n    for (i, c) in\
    \ music_string.chars().enumerate() {\n        if c == '|' {\n            beats.push(beat_map[&music_string.chars().nth(i\
    \ - 1).unwrap()]);\n        }\n    }\n    beats\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpvczwbhr4.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821616
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let notes = music_string.split('|');\n\
    \    for note in notes {\n        match note {\n            \"o\" => result.push(4),\n\
    \            \"o.\" => result.push(2),\n            \".o\" => result.push(2),\n\
    \            \"o..\" => result.push(1),\n            \".o.\" => result.push(1),\n\
    \            \"..o\" => result.push(1),\n            _ => result.push(0),\n  \
    \      }\n    }\n    result\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmp22z0r4qv.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821616
- exit_code: 0
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut output: Vec<isize> = Vec::new();\n    for\
    \ i in music_string.split(' ') {\n        if i == \"o\" {\n            output.push(4);\n\
    \        } else if i == \"o|\" {\n            output.push(2);\n        } else\
    \ if i == \".|\" {\n            output.push(1);\n        }\n    }\n    output\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821616
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats = vec![];\n    for c in music_string.chars()\
    \ {\n        match c {\n            'o' => beats.push(4),\n            'o' | '|'\
    \ => beats.push(2),\n            '.' | '|' => beats.push(1),\n            _ =>\
    \ (),\n        }\n    }\n    beats\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 1, 2, 1, 2, 1, 2]`,\n right: `[1, 1, 1, 1]`', /tmp/tmpt2s6nkyb.rs:25:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821616
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    music_string.chars().map(\n        |c| match c\
    \ {\n            'o' => 4,\n            '|' => 1,\n            '.' => 1,\n   \
    \         _ => 0,\n        }\n    ).collect()\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 0, 4, 0, 4, 0, 4]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpwmt0_97i.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821616
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats: Vec<isize> = Vec::new();\n    let\
    \ mut beat_counter: isize = 0;\n    for c in music_string.chars() {\n        if\
    \ c == 'o' {\n            beat_counter += 4;\n        } else if c == '|' {\n \
    \           beats.push(beat_counter);\n            beat_counter = 0;\n       \
    \ } else {\n            beat_counter += 1;\n        }\n    }\n    beats.push(beat_counter);\n\
    \    beats\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmpefilncxi.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821616
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpe_2zgkkq.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659821615
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let\
    \ mut i = 0;\n    while i < music_string.len() {\n        let mut this_char =\
    \ music_string.chars().nth(i).unwrap();\n        let mut this_string = this_char.to_string();\n\
    \        if this_char == 'o' {\n            result.push(4);\n            i +=\
    \ 1;\n        } else if this_char == '|' {\n            i += 1;\n            continue;\n\
    \        } else {\n            i += 1;\n            this_char = music_string.chars().nth(i).unwrap();\n\
    \            this_string.push(this_char);\n            if this_string == \"o|\"\
    \ {\n                result.push(2);\n            } else if this_string == \"\
    .|\" {\n                result.push(1);\n            }\n            i += 1;\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpgqtx248i.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821616
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n\tlet mut res: Vec<isize> = Vec::new();\n\t\n\tfor\
    \ i in music_string.chars() {\n\t\tmatch i {\n\t\t\t'o' => res.push(4),\n\t\t\t\
    'o' => res.push(2),\n\t\t\t'.' => res.push(1),\n\t\t\t_ => res.push(0),\n\t\t\
    }\n\t}\n\tres\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 0, 4, 0, 4, 0, 4]`,\n right: `[4, 4, 4, 4]`', /tmp/tmps7_vvdrk.rs:25:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821616
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    unimplemented!(\"Parse music string '{}' and return\
    \ the note duration\", music_string);\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented: Parse music string ''''
    and return the note duration'', /tmp/tmpvandn_1q.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659821616
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let map: HashMap<char, isize> = [\n        ('o',\
    \ 4),\n        ('|', 2),\n        ('.', 1),\n    ].iter().cloned().collect();\n\
    \n    let mut count = 0;\n    let mut result = Vec::new();\n    for char in music_string.chars()\
    \ {\n        if let Some(value) = map.get(&char) {\n            count += value;\n\
    \        } else {\n            result.push(count);\n            count = 0;\n \
    \       }\n    }\n    result.push(count);\n    result\n}\n\nfn main() {\n    let\
    \ candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashMap` in this scope\n --> /tmp/tmpq5r43hwz.rs:9:14\n\
    \  |\n9 |     let map: HashMap<char, isize> = [\n  |              ^^^^^^^ not\
    \ found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use\
    \ std::collections::HashMap;\n  |\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0412`.\n"
  stdout: ''
  timestamp: 1659821616
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    // TODO: parse music string and return vector of\
    \ beats!\n    let mut res = Vec::new();\n    let mut beats = 0;\n    for m in\
    \ music_string.split(\"|\") {\n        match m {\n            \"o\" => {\n   \
    \             res.push(4);\n                beats += 4;\n            }\n     \
    \       \"oo\" => {\n                res.push(2);\n                res.push(2);\n\
    \                beats += 4;\n            }\n            \"ooo\" => {\n      \
    \          res.push(1);\n                res.push(1);\n                res.push(1);\n\
    \                beats += 3;\n            }\n            \"oooo\" => {\n     \
    \           res.push(1);\n                res.push(1);\n                res.push(1);\n\
    \                res.push(1);\n                beats += 4;\n            }\n  \
    \          \".\" => {\n                res.push(1);\n                beats +=\
    \ 1;\n            }\n            _ => println!(\"Unrecognized character in music\
    \ string!\"),\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpjzzcqucw.rs:49:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: 'Unrecognized character in music string!

    Unrecognized character in music string!

    '
  timestamp: 1659821616
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let parts = music_string.split(|c| c == 'o' ||\
    \ c == '.' || c == '|').collect::<Vec<&str>>();\n    let mut ret = Vec::new();\n\
    \    for i in 0..parts.len() {\n        if parts[i] == \"o\" {\n            ret.push(4);\n\
    \        } else if parts[i] == \"o|\" {\n            ret.push(2);\n        } else\
    \ if parts[i] == \".|\" {\n            ret.push(1);\n        }\n    }\n    ret\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[4, 4, 4, 4]`', /tmp/tmp5x0h_i7n.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821616
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut arr: Vec<isize> = Vec::new();\n    let\
    \ mut new_arr: Vec<char> = Vec::new();\n    let mut index = 0;\n    let mut count\
    \ = 0;\n    let mut counter = 0;\n    let mut position = 0;\n    let mut prev\
    \ = '.';\n    let mut check = false;\n    let music_string = music_string.chars().collect::<Vec<char>>();\n\
    \    for i in 0..music_string.len() {\n        if music_string[i] == '.' {\n \
    \           if prev == 'o' {\n                if index != 0 {\n              \
    \      arr.push(counter);\n                    count = 0;\n                  \
    \  counter = 0;\n                    prev = '.';\n                    new_arr.clear();\n\
    \                    index = 0;\n                }\n            }\n          \
    \  if i == 0 {\n                position = i;\n            }\n            if music_string[i]\
    \ == '|' {\n                if check {\n                    arr.push(1);\n   \
    \                 counter = 0;\n                    prev = '.';\n            \
    \        new_arr.clear();\n                    index = 0;\n                  \
    \  check = false;\n                }\n                counter += 1;\n        \
    \        count += 1;\n                prev = '.';\n                check = true;\n\
    \            } else {\n                counter += 1;\n                count +=\
    \ 1;\n                prev = '.';\n            }\n        } else if music_string[i]\
    \ == 'o' {\n            if prev == '.' {\n                if i != 0 {\n      \
    \              if count != 0 {\n                        arr.push(counter);\n \
    \                       counter = 0;\n                        count = 0;\n   \
    \                     prev = 'o';\n                        new_arr.clear();\n\
    \                        index = 0;\n                    }\n                }\n\
    \            }\n            if i == 0 {\n                position = i;\n     \
    \       }\n            if music_string[i] == '|' {\n                if check {\n\
    \                    arr.push(4);\n                    counter = 0;\n        \
    \            prev = 'o';\n                    new_arr.clear();\n             \
    \       index = 0;\n                    check = false;\n                }\n  \
    \              counter += 4;\n                count += 4;\n                prev\
    \ = 'o';\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpk6tog2pf.rs:88:3\n\
    \   |\n8  | fn parse_music(music_string: String) -> Vec<isize> {\n   |       \
    \                                             - unclosed delimiter\n...\n18 |\
    \     for i in 0..music_string.len() {\n   |                                 \
    \   - unclosed delimiter\n...\n51 |         } else if music_string[i] == 'o' {\n\
    \   |                                          - unclosed delimiter\n...\n67 |\
    \             if music_string[i] == '|' {\n   |                              \
    \         - this delimiter might not be properly closed...\n...\n79 | }\n   |\
    \ - ...as it matches this but it has different indentation\n...\n88 | }\n   |\
    \   ^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpk6tog2pf.rs:18:5\n   |\n\
    8  |   fn parse_music(music_string: String) -> Vec<isize> {\n   |            \
    \                               ---------- expected `Vec<isize>` because of return\
    \ type\n...\n18 | /     for i in 0..music_string.len() {\n19 | |         if music_string[i]\
    \ == '.' {\n20 | |             if prev == 'o' {\n21 | |                 if index\
    \ != 0 {\n...  |\n87 | |     assert_eq!(candidate(String::from(\"o| .| o| .| o\
    \ o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n88 | | }\n   | |__^ expected struct\
    \ `Vec`, found `()`\n   |\n   = note: expected struct `Vec<isize>`\n         \
    \  found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659821616
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpe_2zgkkq.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659821615
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut output: Vec<isize> = Vec::new();\n    let\
    \ mut current_length: isize = 4;\n    let mut cursor: usize = 0;\n    for c in\
    \ music_string.chars() {\n        if c == '|' {\n            output.push(current_length);\n\
    \            current_length = 4;\n            cursor += 1;\n        } else if\
    \ c == '.' {\n            current_length /= 2;\n        }\n    }\n    output\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpo04g_gbg.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821616
- exit_code: -1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut i = 0;\n\
    \    while i < music_string.len() {\n        match music_string.chars().nth(i).unwrap()\
    \ {\n            'o' => {\n                result.push(4);\n                i\
    \ += 1;\n            }\n            'o' => {\n                result.push(2);\n\
    \                i += 2;\n            }\n            '.' => {\n              \
    \  result.push(1);\n                i += 2;\n            }\n            _ => {}\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659821621
- exit_code: -1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats = Vec::new();\n    let mut i = 0;\n\
    \    while i < music_string.len() {\n        let mut count = 0;\n        let mut\
    \ chars_left = music_string.len() - i;\n        while (chars_left > 0) &&\n  \
    \            (music_string.chars().nth(i).unwrap() == 'o') {\n            count\
    \ += 1;\n            i += 1;\n            chars_left -= 1;\n        }\n      \
    \  if (chars_left > 0) &&\n           (music_string.chars().nth(i).unwrap() ==\
    \ '|') {\n            i += 1;\n            chars_left -= 1;\n        }\n     \
    \   if count > 0 {\n            beats.push(if count == 1 { 2 } else { 4 });\n\
    \        } else {\n            beats.push(1);\n        }\n    }\n    beats\n}\n\
    \nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659821621
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let\
    \ o = &music_string[..music_string.len() - 1];\n    for sym in o.chars() {\n \
    \       match sym {\n            'o' => result.push(4),\n            '|' => result.push(1),\n\
    \            _ => continue,\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\"\
    )), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")),\
    \ vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")),\
    \ vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o\
    \ o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmpfyihzlgz.rs:10:29

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659821616
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    for\
    \ c in music_string.chars() {\n        match c {\n            'o' => result.push(4),\n\
    \            '|' => (),\n            '.' => result.push(1),\n            _ =>\
    \ panic!(\"unknown character\"),\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''unknown character'', /tmp/tmp36fza8_j.rs:15:18

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659821616
- exit_code: -1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let chars: Vec<char>\
    \ = music_string.chars().collect();\n    let mut i = 0;\n    while i < chars.len()\
    \ {\n        if chars[i] == 'o' {\n            result.push(4);\n            i\
    \ += 1;\n        } else if chars[i] == 'o' && chars[i + 1] == '|' {\n        \
    \    result.push(2);\n            i += 2;\n        } else if chars[i] == '.' &&\
    \ chars[i + 1] == '|' {\n            result.push(1);\n            i += 2;\n  \
    \      }\n    }\n    result\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659821621
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut ret: Vec<isize> = Vec::new();\n    let\
    \ mut last_char: char = '\\0';\n    let mut last_last_char: char = '\\0';\n  \
    \  let mut beats: isize = 0;\n    for c in music_string.chars() {\n        if\
    \ c == '|' {\n            if last_char == '.' {\n                beats += 1;\n\
    \            } else if last_char == 'o' {\n                beats += 2;\n     \
    \       }\n            ret.push(beats);\n            beats = 0;\n        } else\
    \ if c == '.' || c == 'o' {\n            if last_char == 'o' && last_last_char\
    \ == '|' {\n                beats += 2;\n            }\n            if last_char\
    \ == '.' && last_last_char == '|' {\n                beats += 1;\n           \
    \ }\n        }\n        last_last_char = last_char;\n        last_char = c;\n\
    \    }\n    if last_char == 'o' {\n        ret.push(beats + 2);\n    } else if\
    \ last_char == '.' {\n        ret.push(beats + 1);\n    } else {\n        ret.push(beats);\n\
    \    }\n    ret\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmporlw1ok0.rs:45:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821616
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    for ch in music_string.chars()\
    \ {\n        if ch == 'o' {\n            result.push(4);\n        } else if ch\
    \ == '.' {\n            result.push(1);\n        } else if ch == '|' {\n     \
    \       result.push(0);\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 0, 1, 0, 1, 0, 1, 0]`,\n right: `[1, 1, 1, 1]`', /tmp/tmp4btr0izn.rs:26:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821616
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpe_2zgkkq.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659821615
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let\
    \ mut sum: isize = 0;\n    for ch in music_string.chars() {\n        if ch ==\
    \ 'o' {\n            sum += 4;\n        } else if ch == '|' {\n            result.push(sum);\n\
    \            sum = 0;\n        } else {\n            sum += 1;\n        }\n  \
    \  }\n    result.push(sum);\n    result\n}\n\nfn main() {\n    let candidate =\
    \ parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmpanvk76yd.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821616
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    music_string.chars().fold(vec![], |mut acc, c|\
    \ {\n        match c {\n            'o' => acc.push(4),\n            'o' | '|'\
    \ => acc.push(2),\n            '.' | '|' => acc.push(1),\n            _ => {}\n\
    \        }\n        acc\n    })\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 1, 2, 1, 2, 1, 2]`,\n right: `[1, 1, 1, 1]`', /tmp/tmpqsnwokyd.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821616
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut vec = Vec::new();\n    let mut index =\
    \ 0;\n    for i in music_string.chars() {\n        if i == 'o' {\n           \
    \ vec.push(4);\n        } else if i == '|' {\n            if music_string.chars().nth(index\
    \ - 1).unwrap() == 'o' {\n                vec.push(2);\n            } else {\n\
    \                vec.push(1);\n            }\n        }\n        index += 1;\n\
    \    }\n    vec\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 2, 4, 2, 1, 1, 4, 4, 4, 4]`,\n right: `[2, 2, 1, 1, 4, 4, 4, 4]`', /tmp/tmppe2gddfh.rs:31:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821616
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpz4n94tui.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659821615
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut duration\
    \ = 0;\n    for ch in music_string.chars() {\n        match ch {\n           \
    \ 'o' => {\n                duration += 4;\n            }\n            'o' | '|'\
    \ => {\n                result.push(duration);\n                duration = 0;\n\
    \            }\n            '.' => {}\n            _ => {\n                panic!(\"\
    Unexpected character\")\n            }\n        }\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''Unexpected character'', /tmp/tmp0929xc75.rs:22:17

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659821616
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut r: Vec<isize> = Vec::new();\n    for mut\
    \ b in music_string.split(\" \") {\n        if &b[..1] == \"o\" {\n          \
    \  r.push(4);\n        } else if &b[..2] == \"o|\" {\n            r.push(2);\n\
    \        } else if &b[..2] == \".|\" {\n            r.push(1);\n        }\n  \
    \  }\n    r\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''byte index 1 is out of bounds of ``'', /tmp/tmp4kclcmxk.rs:11:13

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659821616
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    music_string.chars().fold(vec![], |mut acc, c|\
    \ {\n        match c {\n            'o' => acc.push(4),\n            'o' | '|'\
    \ => acc.push(2),\n            '.' | '|' => acc.push(1),\n            _ => (),\n\
    \        }\n        acc\n    })\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 1, 2, 1, 2, 1, 2]`,\n right: `[1, 1, 1, 1]`', /tmp/tmpd8ygugoa.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821616
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut iter\
    \ = music_string.chars();\n    while let Some(c) = iter.next() {\n        match\
    \ c {\n            'o' => {\n                result.push(4);\n               \
    \ iter.next();\n            }\n            '.' => {\n                result.push(1);\n\
    \                iter.next();\n            }\n            _ => {}\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 4, 1, 1, 4, 4, 4, 4]`,\n right: `[2, 2, 1, 1, 4, 4, 4, 4]`', /tmp/tmps283asvw.rs:32:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821616
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats: Vec<isize> = Vec::new();\n    let\
    \ mut notes = music_string.chars();\n    loop {\n        match notes.next() {\n\
    \            Some('o') => beats.push(4),\n            Some('o') => beats.push(4),\n\
    \            Some('o') => beats.push(4),\n            Some('o') => beats.push(4),\n\
    \            Some('o') => beats.push(4),\n            Some('o') => beats.push(4),\n\
    \            Some('o') => beats.push(4),\n            Some('o') => beats.push(4),\n\
    \            Some('o') => beats.push(4),\n            Some('o') => beats.push(4),\n\
    \            Some('o') => beats.push(4),\n            Some('o') => beats.push(4),\n\
    \            Some('o') => beats.push(4),\n            Some('o') => beats.push(4),\n\
    \            Some('o') => beats.push(4),\n            Some('o') => beats.push(4),\n\
    \            Some('o') => beats.push(4),\n            Some('o') => beats.push(4),\n\
    \            Some('o') => beats.push(4),\n            Some('o') => beats.push(4),\n\
    \            Some('o') => beats.push(4),\n            Some('o') => beats.push(4),\n\
    \            Some('o') => beats.push(4),\n            Some('o') => beats.push(4),\n\
    \            Some('o') => beats.push(4),\n            Some('o') => beats.push(4),\n\
    \            Some('o') => beats.push(4),\n            Some('o') => beats.push(4),\n\
    \            Some('o') => beats.push(4),\n            Some('o') => beats.push(4),\n\
    \            Some('o') => beats.push(4),\n            Some('o') => beats.push(4),\n\
    \            Some('o') => beats.push(4),\n            Some('o') => beats.push(4),\n\
    \            Some('o') => beats.push(4),\n            Some('o') => beats.push(4),\n\
    \            Some\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp1z95bf04.rs:59:3\n\
    \   |\n8  | fn parse_music(music_string: String) -> Vec<isize> {\n   |       \
    \                                             - unclosed delimiter\n...\n11 |\
    \     loop {\n   |          - unclosed delimiter\n12 |         match notes.next()\
    \ {\n   |                            - this delimiter might not be properly closed...\n\
    ...\n50 | }\n   | - ...as it matches this but it has different indentation\n...\n\
    59 | }\n   |   ^\n\nerror: expected one of `=>`, `@`, `if`, or `|`, found `}`\n\
    \  --> /tmp/tmp1z95bf04.rs:50:1\n   |\n49 |             Some\n   |           \
    \      - expected one of `=>`, `@`, `if`, or `|`\n50 | }\n   | ^ unexpected token\n\
    \nerror: aborting due to 2 previous errors\n\n"
  stdout: ''
  timestamp: 1659821616
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpe_2zgkkq.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659821615
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    music_string.replace(\"o\", \"oooo\").replace(\"\
    .\", \"o|o|\").split(\"|\").map(|s| {\n        s.chars().count() as isize\n  \
    \  }).collect()\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmp7fw11luq.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821616
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let steps = music_string.chars().collect::<Vec<char>>();\n\
    \    let mut all_steps = Vec::new();\n    let mut current_step = Vec::new();\n\
    \    for i in 0..steps.len() {\n        if steps[i] == '\\n' {\n            all_steps.push(current_step);\n\
    \            current_step = Vec::new();\n        } else {\n            current_step.push(steps[i]);\n\
    \        }\n    }\n    all_steps.push(current_step);\n    let mut beats = Vec::new();\n\
    \    for s in all_steps {\n        let mut c = 0;\n        for i in 0..s.len()\
    \ {\n            if s[i] == '.' {\n                c += 1;\n            } else\
    \ if s[i] == 'o' {\n                c += 4;\n            } else if s[i] == '|'\
    \ {\n                beats.push(c);\n                c = 0;\n            }\n \
    \       }\n        beats.push(c);\n    }\n    beats\n}\n\nfn main() {\n    let\
    \ candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmpt9grd63x.rs:41:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821616
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    if music_string.len() == 0 {\n        return vec![];\n\
    \    }\n    let mut beats: Vec<isize> = vec![];\n    for c in music_string.chars()\
    \ {\n        let beat = match c {\n            'o' => 4,\n            '|' => 2,\n\
    \            '.' => 1,\n            _ => 0,\n        };\n        if let Some(last_beat)\
    \ = beats.last_mut() {\n            *last_beat += beat;\n        } else {\n  \
    \          beats.push(beat);\n        }\n    }\n    return beats;\n}\n\nfn main()\
    \ {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[16]`,\n right: `[4, 4, 4, 4]`', /tmp/tmplyxcybsr.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821616
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut tempo: Vec<isize> = Vec::new();\n    let\
    \ mut aux: String = String::new();\n    for i in music_string.chars() {\n    \
    \    if (i != '.') && (i != '|') && (i != 'o') {\n            if aux == \"o\"\
    .to_string() {\n                tempo.push(4);\n            } else if aux == \"\
    o|\".to_string() {\n                tempo.push(2);\n            } else if aux\
    \ == \".|\".to_string() {\n                tempo.push(1);\n            }\n   \
    \         aux = i.to_string();\n        } else {\n            aux.push(i);\n \
    \       }\n    }\n    if aux == \"o\".to_string() {\n        tempo.push(4);\n\
    \    } else if aux == \"o|\".to_string() {\n        tempo.push(2);\n    } else\
    \ if aux == \".|\".to_string() {\n        tempo.push(1);\n    }\n    tempo\n}\n\
    \nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4]`,\n right: `[4, 4, 4, 4]`', /tmp/tmp8mq0xhha.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821616
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats = Vec::new();\n    for m in music_string.chars()\
    \ {\n        let v = match m {\n            'o' => 4,\n            'o' | '|' =>\
    \ 2,\n            '.' | '|' => 1,\n            _ => 0,\n        };\n        beats.push(v);\n\
    \    }\n    beats\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 0, 4, 0, 4, 0, 4]`,\n right: `[4, 4, 4, 4]`', /tmp/tmp50xmnyp7.rs:25:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821616
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats: Vec<isize> = Vec::new();\n    let\
    \ mut total_beats: isize = 0;\n    let mut index: usize = 0;\n    let chars: Vec<char>\
    \ = music_string.chars().collect();\n    while index < chars.len() {\n       \
    \ if chars[index] == 'o' {\n            beats.push(4);\n            total_beats\
    \ += 4;\n            index += 1;\n        } else if chars[index] == 'o' && chars[index\
    \ + 1] == '|' {\n            beats.push(2);\n            total_beats += 2;\n \
    \           index += 2;\n        } else if chars[index] == '.' && chars[index\
    \ + 1] == '|' {\n            beats.push(1);\n            total_beats += 1;\n \
    \           index += 2;\n        } else {\n            panic!(\"Got unexpected\
    \ note: {}\", chars[index]);\n        }\n    }\n    return beats;\n}\n\nfn main()\
    \ {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''Got unexpected note:  '', /tmp/tmp3gd9y4lm.rs:27:13

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659821616
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpz4n94tui.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659821615
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut l = Vec::new();\n    for c in music_string.chars()\
    \ {\n        match c {\n            'o' => l.push(4),\n            '|' => l.push(1),\n\
    \            _ => continue,\n        }\n    }\n    l\n}\n\nfn main() {\n    let\
    \ candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 1, 4, 1, 1, 1, 4, 4, 4, 4]`,\n right: `[2, 2, 1, 1, 4, 4, 4, 4]`', /tmp/tmp1yapwe7s.rs:25:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821616
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut res = Vec::new();\n    let mut temp_vec\
    \ = Vec::new();\n    let chars = music_string.chars().collect::<Vec<char>>();\n\
    \    let mut i = 0;\n    while i < chars.len() {\n        if chars[i] == 'o' {\n\
    \            let j = i;\n            temp_vec.push(4);\n            i += 1;\n\
    \            if i < chars.len() && chars[i] == '|' {\n                i += 1;\n\
    \            }\n            if i < chars.len() && chars[i] == ' ' {\n        \
    \        i += 1;\n            }\n            else {\n                i = j;\n\
    \            }\n        }\n        else if chars[i] == '.' {\n            let\
    \ j = i;\n            temp_vec.push(1);\n            i += 1;\n            if i\
    \ < chars.len() && chars[i] == '|' {\n                i += 1;\n            }\n\
    \            if i < chars.len() && chars[i] == ' ' {\n                i += 1;\n\
    \            }\n            else {\n                i = j;\n            }\n  \
    \      }\n        else if chars[i] == ' ' {\n            let temp_sum = temp_vec.iter().sum();\n\
    \            if temp_sum == 4 {\n                res.push(4);\n            }\n\
    \            else if temp_sum == 2 {\n                res.push(2);\n         \
    \   }\n            else if temp_sum == 1 {\n                res.push(1);\n   \
    \         }\n            temp_vec.clear();\n            i += 1;\n        }\n \
    \       else {\n            i += 1;\n        }\n    }\n    if !temp_vec.is_empty()\
    \ {\n        let temp_sum = temp_vec.iter().sum();\n        if temp_sum == 4 {\n\
    \            res.push(4);\n        }\n        else if temp_sum == 2 {\n      \
    \      res.push(2);\n        }\n        else if temp_sum == 1 {\n            res.push(1);\n\
    \        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmpl7xqwivh.rs:43:17\n\
    \   |\n43 |             let temp_sum = temp_vec.iter().sum();\n   |          \
    \       ^^^^^^^^ consider giving `temp_sum` a type\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659821616
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut output = Vec::new();\n    for char in music_string.chars()\
    \ {\n        let add = match char {\n            'o' => 4,\n            'o' |\
    \ '.' => 2,\n            '|' => 1,\n            _ => 0,\n        };\n        let\
    \ last = output.last().unwrap_or(&0);\n        output.push(last + add);\n    }\n\
    \    output\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 4, 8, 8, 12, 12, 16]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpt2qsyl_h.rs:26:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821616
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut res = Vec::new();\n    for c in music_string.chars()\
    \ {\n        match c {\n            'o' => res.push(4),\n            '|' => res.pop(),\n\
    \            _ => continue,\n        }\n    }\n    res\n}\n\nfn main() {\n   \
    \ let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")),\
    \ vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")),\
    \ vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o\
    \ o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: `match` arms have incompatible types\n  --> /tmp/tmpe5l9eflj.rs:13:20\n\
    \   |\n11 | /         match c {\n12 | |             'o' => res.push(4),\n   |\
    \ |                    ----------- this is found to be of type `()`\n13 | |  \
    \           '|' => res.pop(),\n   | |                    ^^^^^^^^^ expected `()`,\
    \ found enum `Option`\n14 | |             _ => continue,\n15 | |         }\n \
    \  | |_________- `match` arms have incompatible types\n   |\n   = note: expected\
    \ type `()`\n              found enum `Option<{integer}>`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659821616
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    music_string.chars().collect::<Vec<char>>().windows(2).map(|chars|\
    \ {\n        match chars {\n            ['o', '|'] => 2,\n            ['.', '|']\
    \ => 1,\n            ['o', _] => 4,\n            _ => panic!(\"Unexpected char\
    \ sequence {}\", chars.iter().collect::<String>()),\n        }\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''Unexpected char sequence  o'', /tmp/tmpvkofxgdd.rs:14:18

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659821616
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    // TODO: finish implementation\n    let mut result\
    \ = Vec::new();\n    let mut bits = music_string.chars();\n    loop {\n      \
    \  let n = bits.next();\n        match n {\n            Some('o') => {\n     \
    \           if bits.next() == Some('|') {\n                    result.push(2);\n\
    \                } else {\n                    result.push(4);\n             \
    \   }\n            }\n            Some('.') => {\n                if bits.next()\
    \ == Some('|') {\n                    result.push(1);\n                } else\
    \ {\n                    break;\n                }\n            }\n          \
    \  Some('|') => {\n                continue;\n            }\n            _ =>\
    \ {\n                break;\n            }\n        }\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1]`,\n right: `[1, 1, 1, 1]`', /tmp/tmpisycwife.rs:44:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821616
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut music: Vec<isize> = Vec::new();\n    let\
    \ mut index = 0;\n    while index < music_string.len() {\n        let c = music_string.chars().nth(index).unwrap();\n\
    \        if c == 'o' {\n            music.push(4);\n            index += 1;\n\
    \        } else if c == '.' {\n            let next = music_string.chars().nth(index\
    \ + 1).unwrap();\n            if next == '|' {\n                music.push(1);\n\
    \                index += 2;\n            } else {\n                panic!(\"\
    Invalid music string\");\n            }\n        } else if c == 'o' {\n      \
    \      let next = music_string.chars().nth(index + 1).unwrap();\n            if\
    \ next == '|' {\n                music.push(2);\n                index += 2;\n\
    \            } else {\n                panic!(\"Invalid music string\");\n   \
    \         }\n        } else {\n            panic!(\"Invalid music string\");\n\
    \        }\n    }\n    music\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''Invalid music string'', /tmp/tmpkwnv_r6f.rs:33:13

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659821616
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    unimplemented!(\"Parsing: '{}'\", music_string);\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented: Parsing: '''''', /tmp/tmplgjgsl97.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659821616
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    music_string.lines().flat_map(|line| {\n      \
    \  line.split(' ').flat_map(|notes| {\n            notes.chars().map(|char| match\
    \ char {\n                'o' => 4,\n                'o' | '|' => 2,\n       \
    \         '.' | '|' => 1,\n                _ => 0,\n            })\n        })\n\
    \    }).collect()\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 1, 2, 1, 2, 1, 2]`,\n right: `[1, 1, 1, 1]`', /tmp/tmp_duxhj32.rs:25:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821616
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    music_string.chars().map(|x| {\n        match x\
    \ {\n            'o' => 4,\n            'o' => 2,\n            '.' => 1,\n   \
    \         _ => 0,\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 0, 4, 0, 4, 0, 4]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpsqlu609p.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821616
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpe_2zgkkq.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659821615
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut chars\
    \ = music_string.chars();\n    while let Some(c) = chars.next() {\n        match\
    \ c {\n            'o' => result.push(4),\n            '.' => result.push(1),\n\
    \            '|' => (),\n            _ => panic!(\"Invalid character\")\n    \
    \    }\n    }\n    result\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''Invalid character'', /tmp/tmpz4vb_75d.rs:16:18

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659821617
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats = vec![];\n    for c in music_string.chars()\
    \ {\n        match c {\n            'o' => beats.push(4),\n            'o' | '|'\
    \ => beats.push(2),\n            '.' | '|' => beats.push(1),\n            _ =>\
    \ beats.push(0),\n        }\n    }\n    beats\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 0, 4, 0, 4, 0, 4]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpoggiq06h.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821617
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpe_2zgkkq.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659821615
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_value\
    \ = 0;\n    for c in music_string.chars() {\n        if c == 'o' {\n         \
    \   result.push(current_value);\n            current_value = 0;\n            result.push(4);\n\
    \        } else if c == '|' {\n            current_value += 1;\n        }\n  \
    \  }\n    result.push(current_value);\n    result\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmpnxdv3dvm.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821617
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let\
    \ mut notes: Vec<char> = music_string.chars().collect();\n    let mut note: Vec<char>\
    \ = Vec::new();\n    for i in 0..notes.len() {\n        if notes[i] == '|' {\n\
    \            if note.contains(&'.') {\n                result.push(1);\n     \
    \       } else if note.contains(&'o') {\n                result.push(2);\n   \
    \         } else {\n                result.push(4);\n            }\n         \
    \   note.clear();\n        } else {\n            note.push(notes[i]);\n      \
    \  }\n    }\n    result\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpm5ac3qey.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821617
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut b: Vec<isize> = Vec::new();\n    let mut\
    \ s: String = String::new();\n    for c in music_string.chars() {\n        if\
    \ c == 'o' {\n            b.push(4);\n        } else if c == '.' {\n         \
    \   b.push(1);\n        } else if c == '|' {\n            b.push(2);\n       \
    \ }\n    }\n    return b;\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 1, 2, 1, 2, 1, 2]`,\n right: `[1, 1, 1, 1]`', /tmp/tmpu_384ylz.rs:27:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821617
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    music_string.split('|').map(|note| match note {\n\
    \        \"o\" | \"o\\n\" => 4,\n        _ => 1,\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1]`,\n right: `[]`', /tmp/tmplod_q7f3.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821617
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    use std::collections::HashMap;\n    let mut music\
    \ = Vec::new();\n    let mut count = 0;\n    let mut map = HashMap::new();\n \
    \   map.insert(\"o\", 4);\n    map.insert(\"o|\", 2);\n    map.insert(\".|\",\
    \ 1);\n    while count < music_string.len() {\n        if let Some(x) = map.get(&music_string[count..count\
    \ + 2]) {\n            music.push(*x);\n            count += 2;\n        } else\
    \ if let Some(x) = map.get(&music_string[count..count + 1]) {\n            music.push(*x);\n\
    \            count += 1;\n        } else {\n            count += 1;\n        }\n\
    \    }\n    music\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''byte index 8 is out of bounds of `o o o o`'',
    /tmp/tmpnktj00l9.rs:17:35

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659821617
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    return music_string.replace(\"o|\", \".\")\n  \
    \                     .replace(\"o\", \"....\")\n                       .chars()\n\
    \                       .map(|c| {\n                           if c == '.' { 1\
    \ } else { 0 }\n                       })\n                       .collect::<Vec<isize>>();\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1]`,\n right: `[4, 4,\
    \ 4, 4]`', /tmp/tmpaisdpt2q.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821617
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut length: isize = 4;\n    let mut res: Vec<isize>\
    \ = Vec::new();\n    let mut str = String::new();\n    for c in music_string.chars()\
    \ {\n        if c != ' ' {\n            str.push(c);\n        } else {\n     \
    \       let v: Vec<char> = str.chars().collect();\n            for s in v {\n\
    \                if s == '.' {\n                    length = length / 2;\n   \
    \             } else if s == '|' {\n                    res.push(length);\n  \
    \                  length = 4;\n                }\n            }\n           \
    \ str = String::new();\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpulds6j5g.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821617
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    unimplemented!(\"Parse the music string: {}\",\
    \ music_string);\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented: Parse the music string:
    '', /tmp/tmp9t6twfao.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659821617
- exit_code: 0
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut vec = Vec::new();\n    let temp = music_string.split(\"\
    \ \");\n    for x in temp {\n        let mut temp = x.chars();\n        let mut\
    \ temp2 = String::new();\n        loop {\n            let y = temp.next();\n \
    \           if y.is_none() {\n                break;\n            }\n        \
    \    temp2.push(y.unwrap());\n        }\n        if temp2 == \"o\" {\n       \
    \     vec.push(4);\n        } else if temp2 == \"o|\" {\n            vec.push(2);\n\
    \        } else if temp2 == \".|\" {\n            vec.push(1);\n        }\n  \
    \  }\n    vec\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821617
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut res = Vec::new();\n    let mut cnt = 0;\n\
    \    for c in music_string.chars() {\n        if c == 'o' {\n            cnt +=\
    \ 4;\n        } else if c == '|' {\n            res.push(cnt);\n            cnt\
    \ = 0;\n        } else {\n            cnt += 1;\n        }\n    }\n    res.push(cnt);\n\
    \    res\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmpycqbefs7.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821617
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    use std::collections::VecDeque;\n    let mut buffer\
    \ = music_string.as_bytes().iter().fold(VecDeque::new(), |mut acc, c| {\n    \
    \    acc.push_back(*c);\n        acc\n    });\n    let mut result = Vec::new();\n\
    \    while !buffer.is_empty() {\n        let note = buffer.pop_front().unwrap();\n\
    \        if note == b'o' {\n            result.push(4);\n        } else if note\
    \ == b'.' {\n            let next = buffer.pop_front().unwrap();\n           \
    \ if next == b'|' {\n                result.push(1);\n            } else {\n \
    \               result.push(0);\n            }\n        } else if note == b'o'\
    \ {\n            let next = buffer.pop_front().unwrap();\n            if next\
    \ == b'|' {\n                result.push(2);\n            } else {\n         \
    \       result.push(0);\n            }\n        } else {\n            result.push(0);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 0, 4, 0, 4, 0, 4]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpis0dllra.rs:43:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821617
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    music_string.replace(\"o||\", \"o|.|\").replace(\"\
    |\", \"\").replace(\"o\", \"4\").replace(\".\", \"1\").split(\"\").fold(vec![],\
    \ |mut v, c| {\n        if c.len() > 0 {\n            v.push(c.parse::<isize>().unwrap());\n\
    \        }\n        v\n    })\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Result::unwrap()` on an `Err` value:
    ParseIntError { kind: InvalidDigit }'', /tmp/tmpoi1cu5ya.rs:11:39

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659821617
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats: Vec<isize> = Vec::new();\n    let\
    \ mut last_char: char = ' ';\n    let mut duration: isize = 0;\n    for c in music_string.chars()\
    \ {\n        match c {\n            '|' => {\n                if last_char ==\
    \ 'o' {\n                    duration = 4;\n                } else if last_char\
    \ == '.' {\n                    duration = 1;\n                } else {\n    \
    \                panic!(\"Illegal music string.\");\n                }\n     \
    \           beats.push(duration);\n                duration = 0;\n           \
    \ }\n            'o' => {\n                last_char = 'o';\n            }\n \
    \           '.' => {\n                last_char = '.';\n            }\n      \
    \      _ => {}\n        }\n    }\n    beats\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[4, 4, 4, 4]`', /tmp/tmp40kxa2k4.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821617
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let string_len = music_string.len();\n    if string_len\
    \ == 0 {\n        return vec![];\n    }\n    let mut sum = 0;\n    let mut res:\
    \ Vec<isize> = vec![];\n    for symbol in music_string.chars() {\n        if symbol\
    \ == 'o' {\n            sum += 4;\n        } else if symbol == '|' {\n       \
    \     res.push(sum);\n            sum = 0;\n        } else {\n            sum\
    \ += 1;\n        }\n    }\n    res.push(sum);\n    res\n}\n\nfn main() {\n   \
    \ let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")),\
    \ vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")),\
    \ vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o\
    \ o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[19]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpq_7t4doc.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821617
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    vec![]\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[4, 4, 4, 4]`', /tmp/tmp5h6y8g13.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821617
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let notes = music_string.chars();\n    let mut\
    \ result: Vec<isize> = Vec::new();\n    let mut char_count = 0;\n    for c in\
    \ notes {\n        match c {\n            '.' => {\n                if char_count\
    \ == 0 {\n                    result.push(1);\n                } else {\n    \
    \                let index = result.len() - 1;\n                    result[index]\
    \ += 1;\n                }\n            }\n            'o' => {\n            \
    \    if char_count == 0 {\n                    result.push(4);\n             \
    \   } else {\n                    let index = result.len() - 1;\n            \
    \        result[index] += 4;\n                }\n            }\n            '|'\
    \ => {\n                char_count += 1;\n            }\n            _ => {}\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4]`,\n right: `[1, 1, 1, 1]`', /tmp/tmpqpompdct.rs:43:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821617
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    // Your code here!\n    unimplemented!();\n}\n\n\
    fn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpwevqvcsw.rs:10:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659821617
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut music_notes = vec![];\n    let chars: Vec<char>\
    \ = music_string.chars().collect();\n    let mut count = 0;\n    for c in chars\
    \ {\n        if c == 'o' {\n            music_notes.push(4);\n            count\
    \ += 4;\n        } else if c == '|' {\n            count += 1;\n        } else\
    \ if c == '.' {\n            count = 0;\n        }\n    }\n    music_notes\n}\n\
    \nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[1, 1, 1, 1]`', /tmp/tmp4k4n1atd.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821617
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut res = Vec::new();\n    for c in music_string.chars()\
    \ {\n        if c == 'o' {\n            res.push(4);\n        } else if c == '|'\
    \ {\n            res.push(-1);\n        }\n    }\n    res\n}\n\nfn main() {\n\
    \    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\"\
    )), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")),\
    \ vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")),\
    \ vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o\
    \ o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-1, -1, -1, -1]`,\n right: `[1, 1, 1, 1]`', /tmp/tmp9jm4qvrx.rs:24:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821617
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut beats\
    \ = 0;\n    for c in music_string.chars() {\n        if c == 'o' {\n         \
    \   result.push(4);\n            beats += 4;\n        } else if c == '|' {\n \
    \           result.push(1);\n            beats += 1;\n        } else if c == '.'\
    \ {\n            result.push(0);\n        }\n    }\n    //println!(\"Beats: {}\"\
    , beats);\n    result\n}\n\nfn main() {\n    let candidate = parse_music;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 1, 0, 1, 0, 1, 0, 1]`,\n right: `[1, 1, 1, 1]`', /tmp/tmpgtdyve7z.rs:30:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821617
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut res = Vec::new();\n    let mut buf = Vec::new();\n\
    \    for c in music_string.chars() {\n        match c {\n            '|' => {\n\
    \                let value = buf.iter().cloned().fold(0, |acc, x| acc * 10 + x);\n\
    \                buf.clear();\n                res.push(value as isize);\n   \
    \         }\n            'o' => {\n                buf.push(4);\n            }\n\
    \            '.' => {\n                buf.push(1);\n            }\n         \
    \   '-' => {\n                buf.push(2);\n            }\n            _ => (),\n\
    \        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[4, 4, 4, 4]`', /tmp/tmp081gt_20.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821617
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut ret: Vec<isize> = Vec::new();\n    let\
    \ mut it = music_string.chars();\n    loop {\n        match it.next() {\n    \
    \        Some('o') => {\n                ret.push(4);\n                match it.next()\
    \ {\n                    Some('|') => (),\n                    Some(c) => panic!(\"\
    bad char {}, expected |\", c),\n                    None => (),\n            \
    \    }\n            }\n            Some('.') => {\n                ret.push(1);\n\
    \                match it.next() {\n                    Some('|') => (),\n   \
    \                 Some(c) => panic!(\"bad char {}, expected |\", c),\n       \
    \             None => (),\n                }\n            }\n            Some('o')\
    \ => {\n                ret.push(2);\n                match it.next() {\n    \
    \                Some('|') => (),\n                    Some(c) => panic!(\"bad\
    \ char {}, expected |\", c),\n                    None => (),\n              \
    \  }\n            }\n            Some(c) => panic!(\"bad char {}\", c),\n    \
    \        None => break,\n        }\n    }\n    ret\n}\n\nfn main() {\n    let\
    \ candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''bad char  , expected |'', /tmp/tmpqxuosyzq.rs:17:32

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659821617
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    music_string.chars().map(|c| {\n        match c\
    \ {\n            'o' => 4,\n            '|' => 1,\n            '.' => 0,\n   \
    \         _ => -1,\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, -1, 4, -1, 4, -1, 4]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpubfn5qru.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821617
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut iter = music_string.split(\" \");\n   \
    \ let mut result = Vec::new();\n    while let Some(value) = iter.next() {\n  \
    \      let value = value.replace(\"|\", \"\");\n        match value.as_str() {\n\
    \            \"o\" => result.push(4),\n            \"o\" => result.push(2),\n\
    \            \".\" => result.push(1),\n            _ => panic!(\"Not an actual\
    \ note!\"),\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''Not an actual note!'', /tmp/tmpb6pf2718.rs:17:18

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659821617
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let\
    \ mut accumulator: isize = 0;\n    for c in music_string.chars() {\n        match\
    \ c {\n            'o' => {\n                accumulator += 4;\n            }\n\
    \            'o' | '|' => {\n                accumulator += 2;\n            }\n\
    \            '.' | '|' => {\n                accumulator += 1;\n            }\n\
    \            ' ' => {\n                result.push(accumulator);\n           \
    \     accumulator = 0;\n            }\n            _ => {}\n        }\n    }\n\
    \    result.push(accumulator);\n    result\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmpnuj68gsr.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821617
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    for note in music_string.chars()\
    \ {\n        match note {\n            'o' => result.push(4),\n            'o'\
    \ | '|' => result.push(2),\n            '.' | '|' => result.push(1),\n       \
    \     _ => (),\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 1, 2, 1, 2, 1, 2]`,\n right: `[1, 1, 1, 1]`', /tmp/tmpkn7gwdzy.rs:25:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821617
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut last_bar\
    \ = false;\n    for c in music_string.chars() {\n        match c {\n         \
    \   'o' => {\n                if last_bar {\n                    result.push(2);\n\
    \                } else {\n                    result.push(4);\n             \
    \   }\n                last_bar = false;\n            }\n            '|' => {\n\
    \                last_bar = true;\n            }\n            _ => {}\n      \
    \  }\n    }\n    result\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[1, 1, 1, 1]`', /tmp/tmpysti3n8j.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821617
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut vector: Vec<isize> = Vec::new();\n    let\
    \ mut last_note: usize = 0;\n    for note in music_string.chars() {\n        match\
    \ note {\n            'o' => {\n                vector.push(4);\n            \
    \    last_note = 4;\n            }\n            'o' | '|' => {\n             \
    \   vector.push(2);\n                last_note = 2;\n            }\n         \
    \   '.' | '|' => {\n                vector.push(1);\n                last_note\
    \ = 1;\n            }\n            '\\\\' => {\n                vector.push(last_note);\n\
    \            }\n            _ => (),\n        }\n    }\n    vector\n}\n\nfn main()\
    \ {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpj68a19rb.rs:26:29\n   |\n\
    26 |                 vector.push(last_note);\n   |                           \
    \  ^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize`\
    \ to an `isize` and panic if the converted value doesn't fit\n   |\n26 |     \
    \            vector.push(last_note.try_into().unwrap());\n   |               \
    \              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659821617
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpe_2zgkkq.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659821615
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n\tlet mut music_string = music_string;\n\tlet mut parsed_music:\
    \ Vec<isize> = Vec::new();\n\tlet mut beat: isize = 0;\n\twhile music_string.len()\
    \ > 0 {\n\t\tif music_string.starts_with(\"o\") {\n\t\t\tparsed_music.push(4 -\
    \ beat);\n\t\t\tbeat = 0;\n\t\t\tmusic_string = music_string.chars().skip(1).collect();\n\
    \t\t} else if music_string.starts_with(\"o|\") {\n\t\t\tparsed_music.push(2 -\
    \ beat);\n\t\t\tbeat = 0;\n\t\t\tmusic_string = music_string.chars().skip(2).collect();\n\
    \t\t} else if music_string.starts_with(\".|\") {\n\t\t\tparsed_music.push(1 -\
    \ beat);\n\t\t\tbeat = 0;\n\t\t\tmusic_string = music_string.chars().skip(2).collect();\n\
    \t\t} else if music_string.starts_with('|') {\n\t\t\tbeat = 0;\n\t\t\tmusic_string\
    \ = music_string.chars().skip(1).collect();\n\t\t} else {\n\t\t\tbeat += 1;\n\t\
    \t\tmusic_string = music_string.chars().skip(1).collect();\n\t\t}\n\t}\n\tparsed_music\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 3, 3, 3]`,\n right: `[4, 4, 4, 4]`', /tmp/tmptb4n8qxx.rs:39:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821617
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let\
    \ mut i = 0;\n    let mut is_last_digit = false;\n    for c in music_string.chars()\
    \ {\n        match c {\n            'o' => {\n                result.push(4);\n\
    \                is_last_digit = true;\n            }\n            '.' => {\n\
    \                result.push(1);\n                is_last_digit = true;\n    \
    \        }\n            '.' => {\n                if is_last_digit {\n       \
    \             result[i] = result[i] / 2;\n                } else {\n         \
    \           result.push(1);\n                    result[i] = result[i] / 2;\n\
    \                }\n                is_last_digit = true;\n            }\n   \
    \         '|' => {\n                if is_last_digit {\n                    result[i]\
    \ = result[i] / 2;\n                } else {\n                    result.push(1);\n\
    \                    result[i] = result[i] / 2;\n                }\n         \
    \       is_last_digit = false;\n            }\n            _ => {\n          \
    \      result.push(0);\n                is_last_digit = false;\n            }\n\
    \        }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 0, 4, 0, 4, 0, 4]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpinux2sux.rs:53:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821617
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let\
    \ mut sum = 0;\n    for char in music_string.chars() {\n        match char {\n\
    \            'o' => {\n                result.push(4 - sum);\n               \
    \ sum = 0;\n            }\n            '|' => {\n                sum += 1;\n \
    \           }\n            '.' => {\n                result.push(1 - sum);\n \
    \               sum = 0;\n            }\n            _ => {}\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 0, 0, 0]`,\n right: `[1, 1, 1, 1]`', /tmp/tmpo3_2r849.rs:34:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821617
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    // Your code goes here!\n    let mut sum = 0;\n\
    \    let mut result = Vec::new();\n    let input: Vec<char> = music_string.chars().collect();\n\
    \    for i in input {\n        match i {\n            'o' => {\n             \
    \   sum += 4;\n                result.push(4);\n            }\n            '|'\
    \ => {\n                if sum == 0 {\n                    sum += 2;\n       \
    \             result.push(2);\n                } else {\n                    sum\
    \ = 0;\n                }\n            }\n            '.' => {\n             \
    \   sum += 1;\n                result.push(1);\n            }\n            _ =>\
    \ {}\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 4, 1, 1, 4, 4, 4, 4]`,\n right: `[2, 2, 1, 1, 4, 4, 4, 4]`', /tmp/tmpbfqnekuq.rs:42:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821617
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpe_2zgkkq.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659821615
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut length: Vec<isize> = Vec::new();\n    let\
    \ mut is_whole: bool = false;\n    let mut is_half: bool = false;\n    let mut\
    \ is_quarter: bool = false;\n    let mut whole_counter: isize = 0;\n    let mut\
    \ half_counter: isize = 0;\n    let mut quarter_counter: isize = 0;\n    for note\
    \ in music_string.chars() {\n        if note == 'o' {\n            if is_half\
    \ {\n                length.push(half_counter * 2);\n                half_counter\
    \ = 0;\n                is_half = false;\n            }\n            if is_quarter\
    \ {\n                length.push(quarter_counter);\n                quarter_counter\
    \ = 0;\n                is_quarter = false;\n            }\n            is_whole\
    \ = true;\n            whole_counter += 1;\n        } else if note == 'o' && note\
    \ == '|' {\n            if is_whole {\n                length.push(whole_counter\
    \ * 4);\n                whole_counter = 0;\n                is_whole = false;\n\
    \            }\n            if is_quarter {\n                length.push(quarter_counter);\n\
    \                quarter_counter = 0;\n                is_quarter = false;\n \
    \           }\n            is_half = true;\n            half_counter += 1;\n \
    \       } else if note == '.' && note == '|' {\n            if is_whole {\n  \
    \              length.push(whole_counter * 4);\n                whole_counter\
    \ = 0;\n                is_whole = false;\n            }\n            if is_half\
    \ {\n                length.push(half_counter * 2);\n                half_counter\
    \ = 0;\n                is_half = false;\n            }\n            is_quarter\
    \ = true;\n            quarter_counter += 1;\n        }\n    }\n    if is_whole\
    \ {\n        length.push(whole_counter * 4);\n    }\n    if is_half {\n      \
    \  length.push(half_counter * 2);\n    }\n    if is_quarter {\n        length.push(quarter_counter);\n\
    \    }\n    length\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[16]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpe1t4cosl.rs:73:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821617
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let chars: Vec<char>\
    \ = music_string.chars().collect();\n    let mut i = 0;\n    while i < chars.len()\
    \ {\n        match chars[i] {\n            'o' => {\n                result.push(4);\n\
    \                i += 1;\n            }\n            'o' if chars[i + 1] == '|'\
    \ => {\n                result.push(2);\n                i += 2;\n           \
    \ }\n            '.' if chars[i + 1] == '|' => {\n                result.push(1);\n\
    \                i += 2;\n            }\n            _ => {\n                i\
    \ += 1;\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 4, 1, 1, 4, 4, 4, 4]`,\n right: `[2, 2, 1, 1, 4, 4, 4, 4]`', /tmp/tmpo8ub6yln.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821617
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let chars = music_string.chars().collect::<Vec<char>>();\n\
    \    let mut pos = 0;\n    while pos < chars.len() {\n        let c = chars[pos];\n\
    \        match c {\n            'o' => {\n                result.push(4);\n  \
    \              pos += 1;\n            }\n            'o' => {\n              \
    \  result.push(2);\n                pos += 2;\n            }\n            '.'\
    \ => {\n                result.push(1);\n                pos += 2;\n         \
    \   }\n            _ => {\n                result.push(1);\n                pos\
    \ += 1;\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 1, 4, 1, 4, 1, 4]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpiarb0agf.rs:39:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821617
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut output = Vec::new();\n    let mut index\
    \ = 0;\n    while index < music_string.len() {\n        let current_char = music_string.chars().nth(index).unwrap();\n\
    \        if current_char == 'o' {\n            output.push(4);\n            index\
    \ += 1;\n        } else if current_char == 'o' {\n            output.push(2);\n\
    \            index += 2;\n        } else if current_char == '.' {\n          \
    \  output.push(1);\n            index += 2;\n        } else {\n            index\
    \ += 1;\n        }\n    }\n    output\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 4, 1, 1, 4, 4, 4, 4]`,\n right: `[2, 2, 1, 1, 4, 4, 4, 4]`', /tmp/tmpzbk39fwr.rs:34:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821617
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    unimplemented!(\"Return the number of beats for\
    \ each note in the music string '{}'\", music_string);\n}\n\nfn main() {\n   \
    \ let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")),\
    \ vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")),\
    \ vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o\
    \ o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented: Return the number of beats
    for each note in the music string '''''', /tmp/tmp16btngx8.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659821617
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    unimplemented!(\"I don't think I'd enjoy listening\
    \ to: {:?}\", music_string);\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented: I don''t think I''d enjoy
    listening to: ""'', /tmp/tmpsx1petuh.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659821617
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    unimplemented!(\"fn parse_music(music_string: {})\
    \ -> Vec<isize>\", music_string);\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented: fn parse_music(music_string:
    ) -> Vec<isize>'', /tmp/tmpyxvzh_67.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659821617
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let\
    \ split_string: Vec<&str> = music_string.split(' ').collect();\n    for i in split_string\
    \ {\n        match i {\n            \"o\" => result.push(4),\n            \"o|\"\
    \ => result.push(2),\n            \".|\" => result.push(1),\n            _ =>\
    \ result.push(0),\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmpoh9vlksv.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821617
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpe_2zgkkq.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659821615
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut vec: Vec<isize> = Vec::new();\n    for\
    \ c in music_string.chars() {\n        let beat = match c {\n            'o' =>\
    \ 4,\n            '|' => -2,\n            '.' => 1,\n            _ => 0,\n   \
    \     };\n        vec.push(beat);\n    }\n    vec\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 0, 4, 0, 4, 0, 4]`,\n right: `[4, 4, 4, 4]`', /tmp/tmphjmizwpm.rs:25:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821617
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    music_string.split('.').map(|s| {\n        match\
    \ s {\n            \"o\" => 4,\n            \"o|\" => 2,\n            \"|\" =>\
    \ 1,\n            _ => 0,\n        }\n    }).collect()\n}\n\nfn main() {\n   \
    \ let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")),\
    \ vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")),\
    \ vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o\
    \ o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmpbsvdxr8h.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821618
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    unimplemented!(\"Parse the music string '{}'\"\
    , music_string);\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented: Parse the music string '''''',
    /tmp/tmph2fde8fv.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659821618
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats: Vec<isize> = Vec::new();\n    let\
    \ mut last_state = 'o';\n    for ch in music_string.chars() {\n        match ch\
    \ {\n            'o' => {\n                if last_state == 'o' {\n          \
    \          beats.push(4);\n                } else {\n                    beats.push(2);\n\
    \                }\n                last_state = 'o';\n            }\n       \
    \     '.' => {\n                if last_state == 'o' {\n                    beats.push(1);\n\
    \                } else {\n                    beats.push(0);\n              \
    \  }\n                last_state = '.';\n            }\n            '|' => {\n\
    \                last_state = '|';\n            }\n            _ => (),\n    \
    \    }\n    }\n    beats\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 0, 0, 0]`,\n right: `[1, 1, 1, 1]`', /tmp/tmp0d8et6ud.rs:42:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821618
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut beats\
    \ = 4;\n    for c in music_string.chars() {\n        match c {\n            'o'\
    \ => {\n                result.push(beats);\n                beats = 4;\n    \
    \        }\n            '|' => {\n                beats /= 2;\n            }\n\
    \            '.' => {\n                result.push(beats);\n                beats\
    \ = 4;\n            }\n            _ => {}\n        }\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 2, 2, 2]`,\n right: `[1, 1, 1, 1]`', /tmp/tmp7ma_l65p.rs:34:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821618
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let whole_note = 4;\n    let half_note = 2;\n \
    \   let quarter_note = 1;\n\n    music_string\n        .split(' ')\n        .map(|x|\
    \ match x {\n            \"o\" => whole_note,\n            \"o|\" => half_note,\n\
    \            \".|\" => quarter_note,\n            _ => panic!(\"Can't parse note:\
    \ {}\", x),\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''Can''t parse note: '', /tmp/tmpg9cw708m.rs:19:18

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659821618
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut notes: Vec<char> = music_string.chars().collect();\n\
    \    let mut i = 0;\n    let mut result: Vec<isize> = Vec::new();\n    while i\
    \ < notes.len() {\n        match notes[i] {\n            'o' => {\n          \
    \      result.push(4);\n                i += 1;\n            }\n            '.'\
    \ => {\n                if notes[i + 1] == '|' {\n                    result.push(1);\n\
    \                    i += 2;\n                } else {\n                    i\
    \ += 1;\n                }\n            }\n            'o' => {\n            \
    \    if notes[i + 1] == '|' {\n                    result.push(2);\n         \
    \           i += 2;\n                } else {\n                    i += 1;\n \
    \               }\n            }\n            _ => {\n                i += 1;\n\
    \            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 4, 1, 1, 4, 4, 4, 4]`,\n right: `[2, 2, 1, 1, 4, 4, 4, 4]`', /tmp/tmppw98hqm4.rs:47:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821618
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    music_string.split('|').map(|x| match x {\n   \
    \     \"o\" => 4,\n        \"oo\" => 2,\n        \"o.\" => 1,\n        \"..\"\
    \ => 1,\n        \"...\" => 1,\n        _ => 0,\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmpnko_cuov.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821618
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut noten = Vec::new();\n    let mut current_note\
    \ = 0;\n    for c in music_string.chars() {\n        match c {\n            'o'\
    \ => current_note += 4,\n            '|' => {\n                noten.push(current_note);\n\
    \                current_note = 0;\n            }\n            '.' => current_note\
    \ += 1,\n            _ => {\n                println!(\"Char '{}' konnte nicht\
    \ gelesen werden\", c);\n            }\n        }\n    }\n    noten\n}\n\nfn main()\
    \ {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[4, 4, 4, 4]`', /tmp/tmp2_by1rwq.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: 'Char '' '' konnte nicht gelesen werden

    Char '' '' konnte nicht gelesen werden

    Char '' '' konnte nicht gelesen werden

    '
  timestamp: 1659821618
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut index\
    \ = 0;\n    let mut s = music_string.chars();\n    while let Some(c) = s.next()\
    \ {\n        match c {\n            'o' => {\n                result.push(4);\n\
    \                if let Some('|') = s.next() {\n                    if let Some('|')\
    \ = s.next() {\n                        result.push(0);\n                    }\n\
    \                }\n            }\n            '.' => {\n                result.push(1);\n\
    \                if let Some('|') = s.next() {\n                    if let Some('|')\
    \ = s.next() {\n                        result.push(0);\n                    }\n\
    \                }\n            }\n            _ => (),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 4, 1, 1, 4, 4, 4, 4]`,\n right: `[2, 2, 1, 1, 4, 4, 4, 4]`', /tmp/tmpyayvkk0z.rs:41:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821618
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    music_string.chars().filter_map(|ch| match ch {\n\
    \        'o' => Some(4),\n        '|' => None,\n        '.' => Some(1),\n    \
    \    _ => None,\n    }).scan(0, |state, ch| {\n        *state += ch;\n       \
    \ Some(*state)\n    }).collect()\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 8, 12, 16]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpb5chggtz.rs:23:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821618
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let whole_note = (1..5).collect::<Vec<_>>();\n\
    \    let half_note = (1..3).collect::<Vec<_>>();\n    let quarter_note = vec![1];\n\
    \n    let note_to_beat = [\n        (Regex::new(r\"o\").unwrap(), whole_note),\n\
    \        (Regex::new(r\"o\\|\").unwrap(), half_note),\n        (Regex::new(r\"\
    \\.\\|\").unwrap(), quarter_note),\n    ];\n\n    note_to_beat\n        .iter()\n\
    \        .flat_map(|(regex, notes)| {\n            regex\n                .find_iter(&music_string)\n\
    \                .map(|find| (find.start(), notes.to_vec()))\n        })\n   \
    \     .sorted_by_key(|(start, _)| *start)\n        .flat_map(|(_, notes)| notes)\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Regex`\n  -->\
    \ /tmp/tmpisuwd9om.rs:14:10\n   |\n14 |         (Regex::new(r\"o\").unwrap(),\
    \ whole_note),\n   |          ^^^^^ use of undeclared type `Regex`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `Regex`\n  --> /tmp/tmpisuwd9om.rs:15:10\n\
    \   |\n15 |         (Regex::new(r\"o\\|\").unwrap(), half_note),\n   |       \
    \   ^^^^^ use of undeclared type `Regex`\n\nerror[E0433]: failed to resolve: use\
    \ of undeclared type `Regex`\n  --> /tmp/tmpisuwd9om.rs:16:10\n   |\n16 |    \
    \     (Regex::new(r\"\\.\\|\").unwrap(), quarter_note),\n   |          ^^^^^ use\
    \ of undeclared type `Regex`\n\nerror: aborting due to 3 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659821618
- exit_code: 1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let half_note = \"o|\";\n    let quarter_note =\
    \ \".|\";\n    let mut ret = Vec::new();\n    let mut start = 0;\n    let mut\
    \ end = 0;\n    let len = music_string.len();\n    while end < len {\n       \
    \ if end+2 < len && &music_string[end..end+2] == half_note {\n            ret.push(2);\n\
    \            end += 2;\n        } else if end+2 < len && &music_string[end..end+2]\
    \ == quarter_note {\n            ret.push(1);\n            end += 2;\n       \
    \ } else if music_string[end..end+1] == \"o\" {\n            ret.push(4);\n  \
    \          end += 1;\n        } else {\n            panic!(\"Invalid music string\"\
    );\n        }\n    }\n    ret\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `str` with `&str`\n  --> /tmp/tmp24_8gsb7.rs:22:44\n\
    \   |\n22 |         } else if music_string[end..end+1] == \"o\" {\n   |      \
    \                                      ^^ no implementation for `str == &str`\n\
    \   |\n   = help: the trait `PartialEq<&str>` is not implemented for `str`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659821618
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beat = 0;\n    let mut result = Vec::new();\n\
    \    for c in music_string.chars() {\n        match c {\n            'o' => {\n\
    \                beat += 4;\n                result.push(4);\n            }\n\
    \            '|' => {\n                beat += 1;\n                result.push(1);\n\
    \            }\n            '.' => {\n                beat += 1;\n           \
    \     result.push(1);\n            }\n            _ => {}\n        }\n    }\n\
    \    // println!(\"Number of beats: {}\", beat);\n    result\n}\n\nfn main() {\n\
    \    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\"\
    )), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")),\
    \ vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")),\
    \ vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o\
    \ o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 1, 1, 1, 1, 1, 1, 1]`,\n right: `[1, 1, 1, 1]`', /tmp/tmpemb5laoi.rs:36:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821618
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats: Vec<isize> = Vec::new();\n    let\
    \ mut beat: isize = 0;\n    for c in music_string.chars() {\n        match c {\n\
    \            'o' => { beat += 4; },\n            'o' | '|' => { beat += 2; },\n\
    \            '.' | '|' => { beat += 1; },\n            _ => (),\n        }\n \
    \       beats.push(beat);\n    }\n    beats\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 4, 8, 8, 12, 12, 16]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpb080eebk.rs:26:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821618
- exit_code: -1
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let music_string = music_string.chars().collect::<Vec<char>>();\n\
    \    let mut r: Vec<isize> = Vec::new();\n    let mut beat = 0;\n    while beat\
    \ < music_string.len() {\n        if music_string[beat] == 'o' {\n           \
    \ r.push(4);\n            beat += 1;\n        } else if music_string[beat] ==\
    \ 'o' && music_string[beat + 1] == '|' {\n            r.push(2);\n           \
    \ beat += 2;\n        } else if music_string[beat] == '.' && music_string[beat\
    \ + 1] == '|' {\n            r.push(1);\n            beat += 2;\n        }\n \
    \   }\n    r\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659821623
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n\tmusic_string.lines().flat_map(|line|\n\t\tline.chars().filter_map(|ch|\
    \ match ch {\n\t\t\t'o' => Some(4),\n\t\t\t'.' => Some(1),\n\t\t\t'|' => None,\n\
    \t\t\t_ => panic!(\"Unknown symbol in input: '{}'\", ch),\n\t\t})).collect()\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''Unknown symbol in input: '' '''', /tmp/tmpqtmpm4nt.rs:14:18

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659821618
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let notes = vec!['o', 'o', 'o', 'o', '.', '.',\
    \ '.', '.'];\n    let beats = vec![4, 4, 4, 4, 1, 1, 1, 1];\n    let mut values\
    \ = vec![];\n    let beat_string: Vec<char> = music_string.chars().collect();\n\
    \    let mut i = 0;\n    while i < beat_string.len() {\n        if beat_string[i]\
    \ == '.' {\n            values.push(1);\n            i += 2;\n        } else {\n\
    \            if beat_string[i + 1] == '|' {\n                values.push(2);\n\
    \                i += 3;\n            } else {\n                values.push(4);\n\
    \                i += 1;\n            }\n        }\n    }\n    values\n}\n\nfn\
    \ main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 7 but the
    index is 7'', /tmp/tmp8dbplhhc.rs:19:16

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659821618
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut note_lengths = Vec::new();\n    let mut\
    \ total_offset = 0;\n    let mut last_note_was_sharp = false;\n    let num_of_notes\
    \ = music_string.len();\n    for (i, ch) in music_string.chars().enumerate() {\n\
    \        if ch == '#' {\n            last_note_was_sharp = true;\n           \
    \ continue;\n        }\n        let offset = if last_note_was_sharp { 1 } else\
    \ { 0 };\n        last_note_was_sharp = false;\n        match ch {\n         \
    \   'o' => {\n                note_lengths.push(4 + offset);\n               \
    \ total_offset += 4;\n            }\n            '|' => {\n                if\
    \ (i + 1) < num_of_notes && music_string.chars().nth(i + 1).unwrap() == '.' {\n\
    \                    note_lengths.push(1 + offset);\n                    total_offset\
    \ += 1;\n                } else {\n                    note_lengths.push(2 + offset);\n\
    \                    total_offset += 2;\n                }\n            }\n  \
    \          '.' => {\n                if i > 0 && music_string.chars().nth(i -\
    \ 1).unwrap() == '|' {\n                    continue;\n                } else\
    \ {\n                    note_lengths.push(1 + offset);\n                    total_offset\
    \ += 1;\n                }\n            }\n            _ => {}\n        }\n  \
    \  }\n    note_lengths\n}\n\nfn main() {\n    let candidate = parse_music;\n \
    \   assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 1, 2, 1, 2, 1, 2]`,\n right: `[1, 1, 1, 1]`', /tmp/tmpb5qfynrt.rs:52:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821618
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut res = Vec::new();\n    for i in music_string.chars()\
    \ {\n        match i {\n            'o' => res.push(4),\n            '|' => {\n\
    \                let last = res.pop().unwrap();\n                res.push(last\
    \ / 2);\n            }\n            '.' => {\n                let last = res.pop().unwrap();\n\
    \                res.push(last / 4);\n            }\n            _ => (),\n  \
    \      }\n    }\n    res\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmp777su2vw.rs:18:38

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659821618
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut r = vec![];\n    let mut c = 0;\n    for\
    \ ch in music_string.chars() {\n        if ch == 'o' {\n            c += 4;\n\
    \        } else if ch == '|' {\n            if c != 0 {\n                r.push(c);\n\
    \                c = 0;\n            }\n        }\n    }\n    if c != 0 {\n  \
    \      r.push(c);\n    }\n    r\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[16]`,\n right: `[4, 4, 4, 4]`', /tmp/tmp56_3p7vx.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821618
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut total_beats: isize = 0;\n    let mut beats_list:\
    \ Vec<isize> = Vec::new();\n    for char in music_string.chars() {\n        if\
    \ char == 'o' {\n            total_beats += 4;\n            beats_list.push(4);\n\
    \        } else if char == 'o' {\n            total_beats += 2;\n            beats_list.push(2);\n\
    \        } else if char == 'o' {\n            total_beats += 1;\n            beats_list.push(1);\n\
    \        }\n    }\n    beats_list\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[1, 1, 1, 1]`', /tmp/tmpm8bqa66q.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821618
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpe_2zgkkq.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659821615
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats: Vec<isize> = Vec::new();\n    let\
    \ mut buffer = music_string.chars();\n    let mut curr_char = buffer.next();\n\
    \    while curr_char != None {\n        if curr_char.unwrap() == 'o' {\n     \
    \       beats.push(4);\n            curr_char = buffer.next();\n        } else\
    \ if curr_char.unwrap() == '.' {\n            beats.push(1);\n            curr_char\
    \ = buffer.next();\n            curr_char = buffer.next();\n        } else {\n\
    \            panic!(\"Input format error\");\n        }\n    }\n    beats\n}\n\
    \nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''Input format error'', /tmp/tmp_dp3l3ql.rs:21:13

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659821618
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    for c in music_string.chars()\
    \ {\n        match c {\n            'o' => result.push(4),\n            '|' =>\
    \ result.push(1),\n            _ => (),\n        }\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 1, 4, 1, 1, 1, 4, 4, 4, 4]`,\n right: `[2, 2, 1, 1, 4, 4, 4, 4]`', /tmp/tmp3dhz0bzk.rs:25:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821618
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    for c in music_string.chars()\
    \ {\n        if c == 'o' {\n            result.push(4);\n        } else if c ==\
    \ '|' {\n            if let Some(el) = result.last_mut() {\n                *el\
    \ /= 2;\n            }\n        } else if c == '.' {\n            result.push(1);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 0, 0, 0]`,\n right: `[1, 1, 1, 1]`', /tmp/tmpzwt4hnb8.rs:28:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821618
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let chars: Vec<char> = music_string.chars().collect();\n\
    \    let mut iter = chars.iter();\n    let mut counter = 0;\n    let mut list:\
    \ Vec<isize> = Vec::new();\n    loop {\n        match iter.next() {\n        \
    \    Some(c) => {\n                if c == &'o' {\n                    counter\
    \ += 4;\n                } else if c == &'o' && iter.next() == Some(&'|') {\n\
    \                    counter += 2;\n                } else if c == &'.' && iter.next()\
    \ == Some(&'|') {\n                    counter += 1;\n                } else {\n\
    \                    if counter != 0 {\n                        list.push(counter);\n\
    \                        counter = 0;\n                    }\n               \
    \ }\n            }\n            None => {\n                if counter != 0 {\n\
    \                    list.push(counter);\n                }\n                break;\n\
    \            }\n        }\n    }\n    list\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 4, 1, 1, 4, 4, 4, 4]`,\n right: `[2, 2, 1, 1, 4, 4, 4, 4]`', /tmp/tmpv78gzuth.rs:45:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821618
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats = Vec::new();\n    let mut chars\
    \ = music_string.chars();\n    while let Some(ch) = chars.next() {\n        if\
    \ ch == 'o' {\n            beats.push(4);\n            if chars.next() == Some('|')\
    \ {\n                beats.push(2);\n            }\n        } else if ch == '.'\
    \ {\n            beats.push(1);\n            chars.next();\n        }\n    }\n\
    \    beats\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 2, 4, 2, 1, 1, 4, 4, 4, 4]`,\n right: `[2, 2, 1, 1, 4, 4, 4, 4]`', /tmp/tmpj491f6ww.rs:30:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821618
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats = Vec::new();\n    for c in music_string.chars()\
    \ {\n        match c {\n            'o' => beats.push(4),\n            'o' | '|'\
    \ => beats.push(2),\n            '.' | '|' => beats.push(1),\n            _ =>\
    \ (),\n        }\n    }\n    beats\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 1, 2, 1, 2, 1, 2]`,\n right: `[1, 1, 1, 1]`', /tmp/tmpgw3bh4mg.rs:25:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821618
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    music_string.chars().map(|c| match c {\n      \
    \  'o' => 4,\n        '|' => 1,\n        '.' => 0,\n        _ => -1,\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, -1, 4, -1, 4, -1, 4]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpfgee0j4n.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821618
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut counter\
    \ = 0;\n    for c in music_string.chars() {\n        if c == 'o' {\n         \
    \   counter += 4;\n        } else if c == '|' {\n            if counter > 0 {\n\
    \                result.push(counter);\n                counter = 0;\n       \
    \     }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpd2sqcxik.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821618
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut beats: Vec<isize> = Vec::new();\n    let\
    \ mut line_iter = music_string.lines();\n    while let Some(line) = line_iter.next()\
    \ {\n        let mut iter = line.chars();\n        while let Some(c) = iter.next()\
    \ {\n            match c {\n                'o' => {\n                    if let\
    \ Some('|') = iter.next() {\n                        beats.push(2);\n        \
    \            } else {\n                        beats.push(4);\n              \
    \      }\n                }\n                '.' => {\n                    if\
    \ let Some('|') = iter.next() {\n                        beats.push(1);\n    \
    \                } else {\n                        panic!(\"Unsupported character\
    \ '.' in music string\");\n                    }\n                }\n        \
    \        c => panic!(\"Unsupported character {} in music string\", c),\n     \
    \       }\n        }\n    }\n    beats\n}\n\nfn main() {\n    let candidate =\
    \ parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''Unsupported character   in music string'',
    /tmp/tmp4zf73upp.rs:29:22

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659821618
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    music_string.chars().map(|x| {\n        match x\
    \ {\n            'o' => 4,\n            'o' => 2,\n            '.' => 1,\n   \
    \         _ => 0,\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 0, 4, 0, 4, 0, 4]`,\n right: `[4, 4, 4, 4]`', /tmp/tmpsqlu609p.rs:22:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821616
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut vec: Vec<isize> = Vec::new();\n    for\
    \ c in music_string.chars() {\n        if c == 'o' {\n            vec.push(4);\n\
    \        } else if c == '|' {\n            vec.push(1);\n        }\n    }\n  \
    \  vec\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 1, 4, 1, 1, 1, 4, 4, 4, 4]`,\n right: `[2, 2, 1, 1, 4, 4, 4, 4]`', /tmp/tmpao35nugk.rs:25:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821618
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n\tlet mut base_val: isize = 4;\n\tlet mut res: Vec<isize>\
    \ = Vec::new();\n\tfor ch in music_string.chars() {\n\t\tmatch ch {\n\t\t\t'o'\
    \ => {\n\t\t\t\tres.push(base_val);\n\t\t\t},\n\t\t\t'o' | '|' => {\n\t\t\t\t\
    base_val /= 2;\n\t\t\t\tres.push(base_val);\n\t\t\t},\n\t\t\t'.' => {\n\t\t\t\t\
    base_val = 4;\n\t\t\t\tres.push(base_val);\n\t\t\t},\n\t\t\t_ => (),\n\t\t}\n\t\
    }\n\tres\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 2, 4, 2, 4, 2, 4, 2]`,\n right: `[1, 1, 1, 1]`', /tmp/tmph_bp_xza.rs:34:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821618
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpe_2zgkkq.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659821615
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let beats = vec![0, 1, 2, 3, 4];\n    let len =\
    \ music_string.len();\n    let mut res = Vec::with_capacity(len);\n    for i in\
    \ 0..len {\n        match &music_string[i..i + 1] {\n            \"o\" => res.push(4),\n\
    \            \"o|\" => res.push(2),\n            \".|\" => res.push(1),\n    \
    \        _ => res.push(0),\n        }\n    }\n    res\n}\n\nfn main() {\n    let\
    \ candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 0, 4, 0, 4, 0, 4]`,\n right: `[4, 4, 4, 4]`', /tmp/tmp39x5cc28.rs:26:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821618
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    unimplemented!(\"Parse music string {:?}\", music_string);\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented: Parse music string ""'',
    /tmp/tmp3twut2dp.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659821618
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let\
    \ mut length: isize = 0;\n    for (i, c) in music_string.chars().enumerate() {\n\
    \        if i == 0 {\n            length = match c {\n                'o' => 4,\n\
    \                '.' => 1,\n                _ => 0,\n            };\n        }\n\
    \        if c == '|' {\n            result.push(length);\n            length =\
    \ 0;\n        } else {\n            length += match c {\n                'o' =>\
    \ 4,\n                '.' => 1,\n                _ => 0,\n            };\n   \
    \     }\n    }\n    result.push(length);\n    result\n}\n\nfn main() {\n    let\
    \ candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmpjrlt413p.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821618
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut current_note\
    \ = String::new();\n    for note in music_string.chars() {\n        if note ==\
    \ '|' {\n            match current_note.as_str() {\n                \"o\" => result.push(4),\n\
    \                \"o\" => result.push(2),\n                \".\" => result.push(1),\n\
    \                _ => (),\n            }\n            current_note = String::new();\n\
    \        } else {\n            current_note.push(note);\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[4, 4, 4, 4]`', /tmp/tmp3cwkmffg.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821618
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut output = Vec::new();\n    for i in music_string.split_whitespace()\
    \ {\n        let mut current = i.to_string();\n        if current.ends_with(\"\
    o\") {\n            output.push(4);\n            current.pop();\n        }\n \
    \       while current.ends_with(\"|\") {\n            output.push(1);\n      \
    \      current.pop();\n        }\n    }\n    output\n}\n\nfn main() {\n    let\
    \ candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 1, 1, 1, 4, 4, 4, 4]`,\n right: `[2, 2, 1, 1, 4, 4, 4, 4]`', /tmp/tmpo_9i4edu.rs:29:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821618
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let\
    \ mut acc = 0;\n    for c in music_string.chars() {\n        if c == 'o' {\n \
    \           result.push(acc);\n            acc = 0;\n            result.push(4);\n\
    \        } else if c == '|' {\n            result.push(acc);\n            acc\
    \ = 0;\n        } else if c == '.' {\n            acc += 1;\n        }\n    }\n\
    \    result.push(acc);\n    result\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmpd2tpqnhs.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821618
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let notes: Vec<&str> = music_string.split(\"|\"\
    ).collect();\n    let mut durations: Vec<isize> = Vec::new();\n    for note in\
    \ notes {\n        let duration = match note {\n            \"o\" => 4,\n    \
    \        \"o.\" => 2,\n            \"..\" => 1,\n            _ => 0,\n       \
    \ };\n        durations.push(duration);\n    }\n    durations\n}\n\nfn main()\
    \ {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmphyb0ex98.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821618
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    music_string.chars().fold(vec![], |mut acc, ch|\
    \ {\n        match ch {\n            'o' => acc.push(4),\n            'o' => acc.push(2),\n\
    \            '.' => acc.push(1),\n            _ => ()\n        }\n        acc\n\
    \    })\n}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 4, 1, 1, 4, 4, 4, 4]`,\n right: `[2, 2, 1, 1, 4, 4, 4, 4]`', /tmp/tmpx7wvejuc.rs:25:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821618
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut cnt: isize = 0;\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    for ch in music_string.chars() {\n        if ch == 'o' {\n\
    \            cnt += 4;\n        } else if ch == '|' {\n            result.push(cnt);\n\
    \            cnt = 0;\n        } else {\n            cnt += 1;\n        }\n  \
    \  }\n    result.push(cnt);\n    result\n}\n\nfn main() {\n    let candidate =\
    \ parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0]`,\n right: `[]`', /tmp/tmpgwvf4x30.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821618
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    music_string.split(\" \").map(|x|\n        match\
    \ x {\n            \"o\" => 4,\n            \"o|\" => 2,\n            \".|\" =>\
    \ 1,\n            _ => panic!(\"Unknown note\")\n        }\n    ).collect()\n\
    }\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''Unknown note'', /tmp/tmp1z_jvsz4.rs:14:18

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659821618
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let\
    \ mut counter = 1;\n    let music_string = music_string.replace(\"|\", \"\");\n\
    \    for c in music_string.chars() {\n        if c == 'o' {\n            result.push(counter\
    \ * 4);\n        } else if c == '.' {\n            result.push(counter);\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = parse_music;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"\
    o o o o\")), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .|\
    \ .| .|\")), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o|\
    \ .| .| o o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4, 4, 1, 1, 4, 4, 4, 4]`,\n right: `[2, 2, 1, 1, 4, 4, 4, 4]`', /tmp/tmpguy5yd8c.rs:27:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821618
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate\
    \ = parse_music;\n    assert_eq!(candidate(String::from(\"\")), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(String::from(\"o o o o\")), vec![4, 4, 4, 4]);\n   \
    \ assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1, 1, 1, 1]);\n  \
    \  assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2, 2, 1,\
    \ 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o o| o\
    \ o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpe_2zgkkq.rs:9:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659821615
- exit_code: 101
  program: "/// Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfn parse_music(music_string:\
    \ String) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut idx =\
    \ 0;\n    for ch in music_string.chars() {\n        if ch == '.' {\n         \
    \   result.push(1);\n            idx += 1;\n        } else if ch == 'o' {\n  \
    \          result.push(4);\n            idx += 1;\n        } else if ch == '|'\
    \ {\n            result[idx - 1] /= 2;\n        }\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\"\
    )), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\"\
    )), vec![1, 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o\
    \ o o o\")), vec![2, 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"\
    o| .| o| .| o o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 0, 0, 0]`,\n right: `[1, 1, 1, 1]`', /tmp/tmptmbg3hcj.rs:29:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659821618
