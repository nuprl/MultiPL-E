name: HumanEval_97_multiply
language: rs
prompt: "/// Complete the function that takes two integers and returns \n/// the product\
  \ of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n\
  fn multiply(a: isize, b: isize) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = multiply;\n    assert_eq!(candidate(148,\
  \ 412), 16);\n    assert_eq!(candidate(19, 28), 72);\n    assert_eq!(candidate(2020,\
  \ 1851), 0);\n    assert_eq!(candidate(14, -15), 20);\n    assert_eq!(candidate(76,\
  \ 67), 42);\n    assert_eq!(candidate(17, 27), 49);\n    assert_eq!(candidate(0,\
  \ 1), 0);\n    assert_eq!(candidate(0, 0), 0);\n}\n"
completions: ["    let mut product = 1;\n    for d in vec![a, b] {\n        if d <\
    \ 10 {\n            product *= d;\n        } else {\n            let mut d = d;\n\
    \            while d >= 10 {\n                d /= 10;\n            }\n      \
    \      product *= d;\n        }\n    }\n    product", '    (a % 10) * (b % 10)',
  '    (a % 10) * (b % 10)', '    (a % 10) * (b % 10)', '    (a * b) % 10', '    (a
    % 10) * (b % 10)', '    a * b % 10', '    (a % 10) * (b % 10)', '    a * b', '    (a
    % 10) * (b % 10)', '    (a % 10) * (b % 10)', '    return (a%10) * (b%10);', '    a
    * b', '    (a % 10) * (b % 10)', "    let x = a % 10;\n    let y = b % 10;\n \
    \   x * y", "    let mut a = a;\n    let mut b = b;\n    let mut c = 1;\n    while\
    \ a != 0 {\n        c *= a % 10;\n        a /= 10;\n    }\n    while b != 0 {\n\
    \        c *= b % 10;\n        b /= 10;\n    }\n    c", "    let a_str = a.to_string();\n\
    \    let b_str = b.to_string();\n    let a_unit_digit = a_str.chars().last().unwrap().to_digit(10).unwrap()\
    \ as isize;\n    let b_unit_digit = b_str.chars().last().unwrap().to_digit(10).unwrap()\
    \ as isize;\n    a_unit_digit * b_unit_digit", '    a % 10 * b % 10', '    (a
    % 10) * (b % 10)', '  a % 10 * b % 10', "    let mut prod = a * b;\n    prod %=\
    \ 10;\n    prod", '  (a % 10) * (b % 10)', "    let unit_digit = |n: isize| n\
    \ % 10;\n    unit_digit(a) * unit_digit(b)", "    let a = a % 10;\n    let b =\
    \ b % 10;\n    a * b", '    (a % 10) * (b % 10)', '    unimplemented!();', '    (a
    % 10) * (b % 10)', "    let a: String = a.to_string();\n    let b: String = b.to_string();\n\
    \    let a: isize = a.chars().next().unwrap().to_digit(10).unwrap() as isize;\n\
    \    let b: isize = b.chars().next().unwrap().to_digit(10).unwrap() as isize;\n\
    \    a * b", '    a % 10 * b % 10', '    (a % 10) * (b % 10)', "    let a_digits\
    \ = a.to_string().chars().map(|d| d.to_digit(10).unwrap() as isize).collect::<Vec<isize>>();\n\
    \    let b_digits = b.to_string().chars().map(|d| d.to_digit(10).unwrap() as isize).collect::<Vec<isize>>();\n\
    \    a_digits[a_digits.len() - 1] * b_digits[b_digits.len() - 1]", '    (a % 10)
    * (b % 10)', "    // a*b should have a length of 2, so we calculate a % 10\n \
    \   // and b % 10, which should be the unit digits, and then\n    // we multiply\
    \ them.\n    (a % 10) * (b % 10)", "    let a = a as u8;\n    let b = b as u8;\n\
    \    let a = a % 10;\n    let b = b % 10;\n    return (a as isize) * (b as isize);",
  '    a * b % 10', '    a * b % 10', '    (a % 10) * (b % 10)', '  (a % 10) * (b
    % 10)', "    //\n    (a * b) % 10", "    let x = a.abs();\n    let y = b.abs();\n\
    \    let x2 = x % 10;\n    let y2 = y % 10;\n    x2 * y2", '    (a % 10) * (b
    % 10)', "    let a_unit = a % 10;\n    let b_unit = b % 10;\n    return a_unit\
    \ * b_unit;", "    if a == 0 || b == 0 {\n        return 0;\n    }\n\n    let\
    \ mut a = a;\n    let mut b = b;\n\n    while a > 10 {\n        a /= 10;\n   \
    \ }\n\n    while b > 10 {\n        b /= 10;\n    }\n\n    a * b", '    (a % 10)
    * (b % 10)', "  let a_str = a.to_string();\n  let b_str = b.to_string();\n  let\
    \ mut a_last_digit = a_str.chars().last().unwrap().to_digit(10).unwrap();\n  let\
    \ mut b_last_digit = b_str.chars().last().unwrap().to_digit(10).unwrap();\n  a_last_digit\
    \ as isize * b_last_digit as isize", '    (a % 10) * (b % 10)', "    let m = a\
    \ % 10;\n    let n = b % 10;\n    return m * n;", "    let x = a % 10;\n    let\
    \ y = b % 10;\n    x * y", "    // the unit digit of an integer is the number\
    \ we get\n    // by keeping just the ones-place digit.\n    // For example, the\
    \ unit digit of 127 is 7.\n    // The unit digit of -127 is 7.\n    (a * b) %\
    \ 10", '    a * b', '    (a % 10) * (b % 10)', '    (a % 10) * (b % 10)', "  \
    \  let a = a % 10;\n    let b = b % 10;\n    return a * b;", '    (a % 10) * (b
    % 10)', "    let a_10 = a / 10;\n    let a_1 = a % 10;\n    let b_10 = b / 10;\n\
    \    let b_1 = b % 10;\n    a_1 * b_1", "    let mut count = 0;\n    let mut temp\
    \ = a;\n    while temp >= 10 {\n        temp = temp / 10;\n        count += 1;\n\
    \    }\n    a / 10isize.pow(count) * b", '    (a % 10) * (b % 10)', "    let a_str\
    \ = a.to_string();\n    let b_str = b.to_string();\n    let x: isize = a_str.chars().rev().nth(0).unwrap().to_digit(10).unwrap()\
    \ as isize;\n    let y: isize = b_str.chars().rev().nth(0).unwrap().to_digit(10).unwrap()\
    \ as isize;\n    x * y", '    return (a % 10) * (b % 10);', "    let a = a.abs();\n\
    \    let b = b.abs();\n    let a_unit = a % 10;\n    let b_unit = b % 10;\n  \
    \  a_unit * b_unit", '    (a % 10) * (b % 10)', "    let a_str = a.to_string();\n\
    \    let b_str = b.to_string();\n    let a_unit_digit = a_str.get(a_str.len()\
    \ - 1..a_str.len()).unwrap().parse::<isize>().unwrap();\n    let b_unit_digit\
    \ = b_str.get(b_str.len() - 1..b_str.len()).unwrap().parse::<isize>().unwrap();\n\
    \    a_unit_digit * b_unit_digit", '    return a.abs() % 10 * b.abs() % 10;',
  "    let mut product = a * b;\n    while product > 9 {\n        product /= 10;\n\
    \    }\n    product", '    (a % 10) * (b % 10)', '    (a % 10) * (b % 10)', " \
    \   let mut product = 0;\n    let mut a = a;\n    let mut b = b;\n    for _ in\
    \ 0..9 {\n        product += a % 10 * b % 10;\n        a /= 10;\n        b /=\
    \ 10;\n    }\n    product", '    (a % 10) * (b % 10)', "    //your code here\n\
    \    let mut result = a * b;\n    while result > 9 {\n        result = result\
    \ / 10;\n    }\n    result", '  return (a % 10) * (b % 10);', '    a % 10 * b
    % 10', '    (a % 10) * (b % 10)', "    let a = a % 10;\n    let b = b % 10;\n\
    \    return a * b;", '    (a % 10) * (b % 10)', "    let units = |n: isize| {\n\
    \        n % 10\n    };\n    units(a) * units(b)", '    return a.abs() % 10 *
    b.abs() % 10;', '  return a % 10 * b % 10;', "  let c = a * b;\n  c % 10", '  (a
    % 10) * (b % 10)', "    let a = a % 10;\n    let b = b % 10;\n    a * b", "  \
    \  let a_last = a % 10;\n    let b_last = b % 10;\n    a_last * b_last", "  let\
    \ a_last = a % 10;\n  let b_last = b % 10;\n  a_last * b_last", "    let a = a.abs();\n\
    \    let b = b.abs();\n    let a_last = a % 10;\n    let b_last = b % 10;\n  \
    \  a_last * b_last", "    let a = a % 10;\n    let b = b % 10;\n    a * b", '    (a
    % 10) * (b % 10)', '    (a % 10) * (b % 10)', "  let (a, b) = (a % 10, b % 10);\n\
    \  a * b", '    (a%10) * (b%10)', "  let mut temp = a;\n  if a > 9 {\n    temp\
    \ = a % 10;\n  }\n  let mut temp2 = b;\n  if b > 9 {\n    temp2 = b % 10;\n  }\n\
    \  return temp * temp2;", "    let a_right = a % 10;\n    let b_right = b % 10;\n\
    \    a_right * b_right", "    let res = a * b;\n    let string_res = res.to_string();\n\
    \    let len = string_res.len();\n    let unit_digit = &string_res[len - 1..len];\n\
    \    let unit_digit_isize = unit_digit.parse::<isize>().unwrap();\n    unit_digit_isize",
  "    let a = a % 10;\n    let b = b % 10;\n    a * b", '    (a * b) % 10', '    ((a
    % 10) * (b % 10)) as isize', "    let a_u: isize = a % 10;\n    let b_u: isize\
    \ = b % 10;\n    return a_u * b_u;", '    return (a % 10) * (b % 10);', "  let\
    \ s = (a % 10) * (b % 10);\n  s", '    return (a%10) * (b%10);', '    (a % 10)
    * (b % 10)', '    (a % 10) * (b % 10)', "    let res = a * b;\n    res % 10",
  "    let a = a % 10;\n    let b = b % 10;\n    a * b", '  (a % 10) * (b % 10)',
  "    let x = a % 10;\n    let y = b % 10;\n    x * y", "  let a = a.abs();\n  let\
    \ b = b.abs();\n  (a % 10) * (b % 10)", '    a.abs() % 10 * b.abs() % 10', '    return
    (a % 10) * (b % 10);', '    a * b', "    let a: isize = a % 10;\n    let b: isize\
    \ = b % 10;\n    a * b", '    (a % 10) * (b % 10)', '    (a % 10) * (b % 10)',
  "    let a = a % 10;\n    let b = b % 10;\n    (a * b)", "    let s = a * b;\n \
    \   s % 10", "    //((a % 10) * (b % 10)) as isize\n    (a % 10) * (b % 10)",
  '    a.abs() * b.abs() % 10', '  (a % 10) * (b % 10)', '    (a % 10) * (b % 10)',
  "    let a = a % 10;\n    let b = b % 10;\n    a * b", "    let a = a % 10;\n  \
    \  let b = b % 10;\n    a * b", "    if a == 0 || b == 0 {\n        return 0;\n\
    \    }\n    a.abs() % 10 * b.abs() % 10", "    let mut result = 1;\n    for mut\
    \ digit in [a, b].iter() {\n        digit = digit % 10;\n        if digit == 0\
    \ {\n            continue;\n        }\n        result *= digit;\n    }\n    result",
  '    (a % 10) * (b % 10)', "    let mut product = a * b;\n    while product > 9\
    \ {\n        product /= 10;\n    }\n    product", '    unimplemented!()', "  \
    \  let aa = a % 10;\n    let bb = b % 10;\n    aa * bb", "    if a == 0 || b ==\
    \ 0 {\n        return 0;\n    }\n    let a = a.abs();\n    let b = b.abs();\n\
    \    let mut res = 1;\n    while a > 0 || b > 0 {\n        res *= a % 10;\n  \
    \      res *= b % 10;\n        a /= 10;\n        b /= 10;\n    }\n    res", '    a
    * b', '    (a % 10) * (b % 10)', '    (a % 10) * (b % 10)', '    (a * b) % 10',
  '    a*b % 10', '    (a % 10) * (b % 10)', '    (a % 10) * (b % 10)', "    let a\
    \ = a.abs();\n    let b = b.abs();\n    let a_unit = a % 10;\n    let b_unit =\
    \ b % 10;\n    a_unit * b_unit", '    (a % 10) * (b % 10)', '  a * b % 10', '    a
    % 10 * b % 10', '    (a % 10) * (b % 10)', '    (a % 10) * (b % 10)', "    let\
    \ a_units = a % 10;\n    let b_units = b % 10;\n    a_units * b_units", "    let\
    \ mut res = a * b;\n    while res > 9 {\n        res /= 10;\n    }\n    res",
  '    return (a % 10) * (b % 10);', "    let a = a % 10;\n    let b = b % 10;\n \
    \   a * b", '    (a % 10) * (b % 10)', '    (a%10)*(b%10)', '    (a * b) % 10',
  '    (a * b) % 10', '    (a % 10) * (b % 10)', '    (a % 10) * (b % 10)', '    return
    (a%10)*(b%10);', "    let prod = a * b;\n    prod % 10", '    (a % 10) * (b %
    10)', '    (a % 10) * (b % 10)', '  return (a % 10) * (b % 10);', '    (a % 10)
    * (b % 10)', '    (a % 10) * (b % 10)', '    (a % 10) * (b % 10)', '    (a % 10)
    * (b % 10)', '    (a % 10) * (b % 10)', '    (a % 10) * (b % 10)', "    // Your\
    \ code goes here!\n    let (mut a, mut b) = (a, b);\n    if a < 0 { a = -a; }\n\
    \    if b < 0 { b = -b; }\n    let a = a % 10;\n    let b = b % 10;\n    return\
    \ a * b;", "    let a_right = a % 10;\n    let b_right = b % 10;\n    a_right\
    \ * b_right", '    (a % 10) * (b % 10)', '    (a % 10) * (b % 10)', '    return
    (a % 10) * (b % 10);', "    let str_a = a.to_string();\n    let str_b = b.to_string();\n\
    \    let last_digit_a = str_a.chars().last().unwrap().to_digit(10).unwrap() as\
    \ isize;\n    let last_digit_b = str_b.chars().last().unwrap().to_digit(10).unwrap()\
    \ as isize;\n    last_digit_a * last_digit_b", "  let mut n = a;\n  let mut res\
    \ = 0;\n  for _ in 0..b {\n    res += n;\n  }\n  let mut last_digit = 0;\n  while\
    \ res > 0 {\n    last_digit = res % 10;\n    res /= 10;\n  }\n  last_digit", " \
    \   let a = a % 10;\n    let b = b % 10;\n    a * b", '    (a * b) % 10', "  \
    \  let mut num = a * b;\n    while num > 9 {\n        num /= 10;\n    }\n    num",
  "  let product: isize = a * b;\n  let nums: Vec<char> = product.to_string().chars().collect();\n\
    \  let first_num: isize = nums[0].to_string().parse().unwrap();\n  let second_num:\
    \ isize = nums[1].to_string().parse().unwrap();\n  first_num * second_num", " \
    \   if a == 0 || b == 0 { return 0; }\n    if a == 1 { return b % 10; }\n    if\
    \ b == 1 { return a % 10; }\n    (a % 10) * (b % 10)", "    let product = a *\
    \ b;\n    let unit_digit = product % 10;\n    unit_digit", "    let product =\
    \ a * b;\n    let digits: Vec<char> = product.to_string().chars().collect();\n\
    \    digits[digits.len() - 1].to_digit(10).unwrap() as isize", "    let mut x\
    \ = a;\n    let mut y = b;\n    if x < 0 {\n        x = x * -1;\n    }\n    if\
    \ y < 0 {\n        y = y * -1;\n    }\n    x = x % 10;\n    y = y % 10;\n    return\
    \ x * y;", "    if a < 0 {\n        multiply(-a, b)\n    } else if b < 0 {\n \
    \       multiply(a, -b)\n    } else {\n        (a % 10) * (b % 10)\n    }", '    a
    * b', "    let mut sum = 0;\n    for i in a..=b {\n        sum += i;\n    }\n\
    \    return sum;", "    let mut a = a.abs();\n    let mut b = b.abs();\n    let\
    \ mut answer = 0;\n    loop {\n        if a == 0 || b == 0 {\n            break;\n\
    \        }\n        answer += a % 10 * b % 10;\n        a /= 10;\n        b /=\
    \ 10;\n    }\n    answer", '    a * b % 10', "    let a = a % 10;\n    let b =\
    \ b % 10;\n    a * b", "    let product = a * b;\n    let h = product / 10;\n\
    \    product - h * 10", "    let mut c = a * b;\n    while c >= 10 {\n       \
    \ c /= 10;\n    }\n    c", "    let res = a * b;\n    return res.to_string().chars().rev().next().unwrap().to_digit(10).unwrap()\
    \ as isize;", "    // Your code here!\n    let mut prod = a * b;\n    while prod\
    \ >= 10 {\n        prod /= 10;\n    }\n    prod", "    if a == 0 || b == 0 {\n\
    \        return 0;\n    }\n    (a % 10) * (b % 10)", '    a.to_string().chars().last().unwrap().to_digit(10).unwrap()
    as isize * b.to_string().chars().last().unwrap().to_digit(10).unwrap() as isize',
  "    let a: Vec<char> = a.to_string().chars().collect();\n    let b: Vec<char> =\
    \ b.to_string().chars().collect();\n    let mut a_unit = a[a.len() - 1].to_digit(10).unwrap()\
    \ as isize;\n    let mut b_unit = b[b.len() - 1].to_digit(10).unwrap() as isize;\n\
    \    a_unit * b_unit", "    let a = a % 10;\n    let b = b % 10;\n    a * b",
  "    let a = a % 10;\n    let b = b % 10;\n    a * b", "    // Two arguments a and\
    \ b\n    let _a = a % 10;\n    let _b = b % 10;\n    // get the unit digits, ie:\n\
    \    // 1234 % 10 == 4\n    _a * _b\n    // multiply them and return the result",
  '    a.abs() * b.abs() % 10', '    (a % 10) * (b % 10)', '    (a % 10) * (b % 10)',
  "    if a == 0 || b == 0 {\n        return 0;\n    }\n    let a_unit = a % 10;\n\
    \    let b_unit = b % 10;\n    return a_unit * b_unit;", "    // a * b is `isize`\n\
    \    (a * b) % 10", "    let a = a.abs();\n    let b = b.abs();\n    let mut res\
    \ = 1;\n    for _ in 0..a {\n        res *= b;\n    }\n    res", '    (a % 10)
    * (b % 10)', '    (a % 10) * (b % 10)', "    let a_last_digit = a % 10;\n    let\
    \ b_last_digit = b % 10;\n    let result = a_last_digit * b_last_digit;\n    result"]
stop_tokens:
- "\n}"
