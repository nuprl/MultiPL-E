language: rs
name: HumanEval_14_all_prefixes
results:
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut v = Vec::new();\n\
    \    let chars: Vec<char> = string.chars().collect();\n    for i in 0..chars.len()\
    \ {\n        v.push(chars[0..i].iter().collect());\n    }\n    v\n}\n\nfn main()\
    \ {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmplpw_pd77.rs:14:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822566
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for n in 1..string.len() {\n        prefixes.push(string[0..n].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpg0deyc0p.rs:13:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822566
- exit_code: 0
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(String::from(&string[0..=i]));\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822566
- exit_code: 0
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    string\n     \
    \   .chars()\n        .scan(String::new(), |acc, c| {\n            acc.push(c);\n\
    \            Some(acc.clone())\n        })\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822566
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut vec =\
    \ Vec::new();\n    for i in 0..string.len() + 1 {\n        vec.push(String::from(&string[0..i]));\n\
    \    }\n    vec\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\"]`,\n right: `[]`', /tmp/tmp3d8xld3i.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822567
- exit_code: -1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut chars = string.chars();\n    while let Some(c) =\
    \ chars.next() {\n        prefixes.push(format!(\"{}\", c));\n    }\n    let mut\
    \ full_prefixes = Vec::new();\n    for prefix in prefixes {\n        full_prefixes.push(prefix.clone());\n\
    \        full_prefixes.append(&mut all_prefixes(prefix));\n    }\n    full_prefixes\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659822572
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let string = format!(\"\
    <{}>\", string);\n    let mut output = Vec::new();\n    for i in 0..string.len()\
    \ {\n        output.push(string[..i].to_string());\n    }\n    output\n}\n\nfn\
    \ main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"<\"]`,\n right: `[]`', /tmp/tmpq_izb3d0.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822567
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut ret =\
    \ Vec::new();\n    for j in 0..string.len() + 1 {\n        let sub_string = &string[0..j];\n\
    \        ret.push(sub_string.to_string());\n    }\n    ret\n}\n\nfn main() {\n\
    \    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\"\
    )), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")),\
    \ vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\"]`,\n right: `[]`', /tmp/tmpgjjl_l83.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822566
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let s = string.as_str();\n\
    \    let length = s.len();\n    let mut result = Vec::with_capacity(length);\n\
    \    for i in 0..length {\n        result.push(s[0..i].to_string());\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpfu9o9ug6.rs:15:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822566
- exit_code: 0
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    let chars: Vec<char> = string.chars().collect();\n    for\
    \ len in 1..string.len() + 1 {\n        result.push(chars[0..len].iter().collect());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822566
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let char_vec:\
    \ Vec<char> = string.chars().collect();\n    let mut prefixes: Vec<String> = Vec::new();\n\
    \    for (start, _) in char_vec.iter().enumerate() {\n        let new_string:\
    \ String = char_vec[start..].iter().collect();\n        prefixes.push(new_string);\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"sdfgh\", \"dfgh\", \"fgh\", \"gh\", \"h\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmplatpk6p7.rs:15:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822567
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let input = string.as_bytes();\n    for start in 0..input.len()\
    \ {\n        prefixes.push(String::from_utf8(input[0..start].to_vec()).unwrap());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp87ymcka0.rs:14:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822566
- exit_code: 0
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut vec =\
    \ Vec::new();\n    let mut accumulator = String::new();\n    for c in string.chars()\
    \ {\n        accumulator.push(c);\n        vec.push(accumulator.clone());\n  \
    \  }\n    vec\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822566
- exit_code: 0
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::with_capacity(string.len());\n    for i in 0..string.len() {\n      \
    \  prefixes.push(string[0..=i].to_string());\n    }\n    prefixes\n}\n\nfn main()\
    \ {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822566
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    (0..string.len()).map(|l|\
    \ &string[..l]).collect()\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n --> /tmp/tmpy7wn1aki.rs:3:45\n  |\n3 |     (0..string.len()).map(|l|\
    \ &string[..l]).collect()\n  |                                             ^^^^^^^\
    \ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&str>`\n\
    \  |\n  = help: the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659822566
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpvnh111vh.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822567
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut res =\
    \ Vec::new();\n    for i in 0..string.len() {\n        res.push(string[0..i].to_string());\n\
    \    }\n    res\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmprw8ggi53.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822566
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    for i in 0..string.len() {\n        result.push(string[0..i].to_string());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpsezyme69.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822566
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut v = Vec::new();\n\
    \    for i in 0..string.len() + 1 {\n        v.push(string[0..i].to_string());\n\
    \    }\n    v\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\"]`,\n right: `[]`', /tmp/tmptzx8x0wi.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822566
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let str_vec: Vec<char>\
    \ = string.chars().collect();\n    let mut vec: Vec<String> = Vec::new();\n  \
    \  for i in 0..str_vec.len() {\n        vec.push(str_vec[0..i].iter().collect());\n\
    \    }\n    vec\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmppazry6sz.rs:14:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822566
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut ret =\
    \ Vec::new();\n    for len in 1..string.len() {\n        ret.push(string[0..len].to_string());\n\
    \    }\n    ret.push(string);\n    ret\n}\n\nfn main() {\n    let candidate =\
    \ all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\"]`,\n right: `[]`', /tmp/tmpzy6xmmny.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822567
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    (0..string.len()).map(|i|\
    \ &string[..i]).map(|s| s.to_string()).collect()\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmprx71gj7t.rs:9:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822566
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    for i in 0..string.len() + 1 {\n        result.push(string[0..i].to_string());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\"]`,\n right: `[]`', /tmp/tmpp4cx2l9j.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822566
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut strs =\
    \ Vec::new();\n    let mut chars = string.chars();\n    while let Some(ch) = chars.next()\
    \ {\n        strs.push(ch.to_string());\n    }\n    strs\n}\n\nfn main() {\n \
    \   let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\"\
    )), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")),\
    \ vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"]`,\n right: `[\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp9dccndcd.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822567
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    (0..string.len()\
    \ + 1)\n        .map(|x| string.get(0..x).unwrap().to_string())\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\"]`,\n right: `[]`', /tmp/tmpcm0t3w4k.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822567
- exit_code: 0
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::with_capacity(string.len());\n    for i in 0..string.len() {\n      \
    \  prefixes.push(string[0..i + 1].to_string());\n    }\n    prefixes\n}\n\nfn\
    \ main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822567
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut p = vec![];\n\
    \    for i in 0..string.len() {\n        p.push(string[0..i].to_string());\n \
    \   }\n    p\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpkknc5h64.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822567
- exit_code: 0
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut results\
    \ = Vec::new();\n    for len in 1..string.len() + 1 {\n        results.push(string[0..len].to_string());\n\
    \    }\n    results\n}\n\nfn main() {\n    let candidate = all_prefixes;\n   \
    \ assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822567
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    // Create a vector\
    \ of all prefixes of the string\n    let prefixes: Vec<String> = (0..string.len())\n\
    \        .map(|i| string[0..i].to_string())\n        .collect();\n\n    // Make\
    \ sure the vector is in order from longest to shortest\n    prefixes.iter().rev().cloned().collect()\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfg\", \"asdf\", \"asd\", \"as\", \"a\", \"\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmprpk793ah.rs:15:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822567
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut results\
    \ = Vec::new();\n    for i in 0..string.len() {\n        results.push(String::from(&string[0..i]));\n\
    \    }\n    results\n}\n\nfn main() {\n    let candidate = all_prefixes;\n   \
    \ assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpx2y8wqrn.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822567
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    for i in 0..string.len() {\n        result.push(string[0..i].to_string());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpsezyme69.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822566
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut v = Vec::new();\n\
    \    for i in 0..string.len() {\n        v.push(string[0..i].to_string());\n \
    \   }\n    v\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpysrq70ja.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822567
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut res =\
    \ Vec::new();\n    for i in 0..string.len() + 1 {\n        res.push(string[0..i].to_string());\n\
    \    }\n    res\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\"]`,\n right: `[]`', /tmp/tmpkodi5rn4.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822567
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut res =\
    \ Vec::new();\n    for i in 0..string.len() {\n        res.push(string[0..i].to_string());\n\
    \    }\n    res\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmprw8ggi53.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822566
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    // Append input\
    \ string as the last element\n    (0..string.len() + 1)\n        .map(|idx| string[0..idx].to_string())\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = all_prefixes;\n   \
    \ assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\"]`,\n right: `[]`', /tmp/tmplf_airhf.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822567
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    (0..string.len()).into_iter().map(|i|\
    \ string[..i].to_string()).collect()\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp4noy9owl.rs:9:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822567
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    (0..string.len()).map(|i|\
    \ string[..i].to_string()).collect()\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp7uurmrmi.rs:9:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822567
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut chars = string.chars();\n    while let Some(char)\
    \ = chars.next() {\n        prefixes.push(char.to_string());\n    }\n    prefixes\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"]`,\n right: `[\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1r205zok.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822567
- exit_code: 0
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut results\
    \ = Vec::new();\n    for i in 0..string.len() {\n        results.push(string[0..=i].to_string());\n\
    \    }\n    results\n}\n\nfn main() {\n    let candidate = all_prefixes;\n   \
    \ assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822567
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut all_prefixes\
    \ = Vec::<String>::new();\n    for i in 0..string.len() {\n        all_prefixes.push(string[0..i].to_string());\n\
    \    }\n    all_prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpq4qnss5d.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822567
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut out =\
    \ Vec::with_capacity(string.len());\n    for i in 0..string.len() {\n        out.push(string[0..i].to_string());\n\
    \    }\n    out\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpjb84a4ad.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822567
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    let chars: Vec<char> = string.chars().collect();\n    for\
    \ i in 0..string.len() {\n        result.push(chars[0..i].iter().collect());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpxssoj749.rs:14:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822567
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    (0..string.len()\
    \ + 1)\n        .map(|i| string[..i].to_string())\n        .collect()\n}\n\nfn\
    \ main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\"]`,\n right: `[]`', /tmp/tmpxo325cet.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822567
- exit_code: 0
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    let mut prefix = String::new();\n    for c in string.chars()\
    \ {\n        prefix.push(c);\n        result.push(prefix.clone());\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822567
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    (0..string.len()\
    \ + 1)\n        .map(|i| string[..i].to_string())\n        .collect()\n}\n\nfn\
    \ main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\"]`,\n right: `[]`', /tmp/tmpxo325cet.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822567
- exit_code: 0
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut current_string = String::new();\n    for byte in\
    \ string.bytes() {\n        current_string.push(byte as char);\n        prefixes.push(current_string.clone());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822567
- exit_code: 0
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    let string = string.as_str();\n    for len in 1..string.len()\
    \ + 1 {\n        result.push(string[..len].to_string());\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822567
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut current_char = 0;\n    while current_char < string.len()\
    \ {\n        let current_prefix = &string[0..current_char];\n        prefixes.push(current_prefix.to_string());\n\
    \        current_char += 1;\n    }\n    prefixes\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpnu0uoir1.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822567
- exit_code: 0
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    string\n     \
    \   .chars()\n        .scan(String::new(), |state, c| {\n            state.push(c);\n\
    \            Some(state.clone())\n        })\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822567
- exit_code: 0
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut res =\
    \ Vec::new();\n    for i in 0..string.len() {\n        res.push(string[0..i +\
    \ 1].to_string());\n    }\n    res\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822567
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut v = Vec::new();\n\
    \    for pos in 0..string.len() {\n        v.push(string[0..pos].to_string());\n\
    \    }\n    v\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpt81pnpk9.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822567
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut all_prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        all_prefixes.push(string[0..i].to_string());\n\
    \    }\n    all_prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpmhblif6t.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822567
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut all_prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        all_prefixes.push(String::from(&string[0..i]));\n\
    \    }\n    all_prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp5ygmhs_6.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822567
- exit_code: 0
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut out =\
    \ Vec::new();\n    let len = string.len();\n    for i in 0..len {\n        out.push(string[0..i\
    \ + 1].to_string());\n    }\n    out\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822567
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpvnh111vh.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822567
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpvnh111vh.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822567
- exit_code: 0
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for idx in 0..string.len() {\n        prefixes.push(String::from(&string[0..idx\
    \ + 1]));\n    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822567
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    (0..string.len()).map(|i|\
    \ string[..i].to_string()).collect()\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp7uurmrmi.rs:9:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822567
- exit_code: 0
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    let mut pref = String::new();\n    for c in string.chars()\
    \ {\n        pref.push(c);\n        result.push(pref.clone());\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822567
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() + 1 {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\"]`,\n right: `[]`', /tmp/tmpk8cwq_r8.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822567
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpvnh111vh.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822567
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let prefixes =\
    \ Vec::new();\n    let mut c = string.chars();\n    while let Some(a) = c.next()\
    \ {\n        let mut b = prefixes.clone();\n        let mut aa = String::new();\n\
    \        aa.push(a);\n        b.push(aa);\n        for f in &b {\n           \
    \ println!(\"{}\", f);\n        }\n    }\n    prefixes\n}\n\nfn main() {\n   \
    \ let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")),\
    \ vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`',\
    \ /tmp/tmp2n0rb6mi.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: 'a

    s

    d

    f

    g

    h

    '
  timestamp: 1659822567
- exit_code: 0
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    for i in 0..string.len() {\n        result.push(string[0..i\
    \ + 1].to_string());\n    }\n    result\n}\n\nfn main() {\n    let candidate =\
    \ all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822567
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let chars: Vec<char>\
    \ = string.chars().collect();\n    (0..chars.len()).map(|i| chars[0..i].iter().collect()).collect()\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpcagd_2ia.rs:10:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822567
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut list =\
    \ Vec::<String>::new();\n    for i in 0..(string.len() + 1) {\n        list.push(string[0..i].to_string());\n\
    \    }\n    list\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\"]`,\n right: `[]`', /tmp/tmptv8t6tvg.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822567
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    for i in 0..string.len() {\n        result.push(string[0..i].to_string());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpsezyme69.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822566
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    (0..string.len()).map(|i|\
    \ string[..i].to_string()).collect()\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp7uurmrmi.rs:9:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822567
- exit_code: 0
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut prefix = String::new();\n    let mut length = 0;\n\
    \    while length < string.len() {\n        prefix.push(string.chars().nth(length).unwrap());\n\
    \        prefixes.push(prefix.clone());\n        length += 1;\n    }\n    prefixes\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822567
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    let chars: Vec<char> = string.chars().collect();\n    for\
    \ i in 0..chars.len() {\n        result.push(chars[0..i].iter().collect());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp3gc5dfvv.rs:14:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822568
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    for i in 0..string.len() {\n        result.push(string[0..i].to_string());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpsezyme69.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822566
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() + 1 {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\"]`,\n right: `[]`', /tmp/tmpk8cwq_r8.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822567
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut res =\
    \ Vec::new();\n    let chars = string.chars().collect::<Vec<char>>();\n    for\
    \ i in 0..chars.len() {\n        res.push(chars[0..i].iter().collect());\n   \
    \ }\n    res\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpius7ulcs.rs:14:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822568
- exit_code: 0
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut output\
    \ = Vec::new();\n    let len = string.len();\n    for i in 0..len {\n        output.push(string[0..(i\
    \ + 1)].to_string());\n    }\n    output\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822568
- exit_code: 0
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let string = &string[..];\n\
    \    let mut prefixes = Vec::with_capacity(string.len());\n    for len in 1..=string.len()\
    \ {\n        prefixes.push(string[..len].to_string());\n    }\n    prefixes\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822568
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let chars = string.chars();\n    for i in 0..chars.count()\
    \ {\n        let mut prefix = String::new();\n        let mut it = chars.clone();\n\
    \        for _ in 0..i {\n            prefix.push(it.next().unwrap());\n     \
    \   }\n        prefixes.push(prefix);\n    }\n    prefixes\n}\n\nfn main() {\n\
    \    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\"\
    )), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")),\
    \ vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `chars`\n   --> /tmp/tmpau4a3_7j.rs:7:22\n\
    \    |\n4   |     let chars = string.chars();\n    |         ----- move occurs\
    \ because `chars` has type `Chars<'_>`, which does not implement the `Copy` trait\n\
    5   |     for i in 0..chars.count() {\n    |                       ------- `chars`\
    \ moved due to this method call\n6   |         let mut prefix = String::new();\n\
    7   |         let mut it = chars.clone();\n    |                      ^^^^^ value\
    \ borrowed here after move\n    |\nnote: this function takes ownership of the\
    \ receiver `self`, which moves `chars`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659822567
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    let mut chars = string.chars();\n    while let Some(ch) =\
    \ chars.next() {\n        result.push(ch.to_string());\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"]`,\n right: `[\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpp3i7yubm.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822568
- exit_code: 0
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    for i in 0..string.len() {\n        result.push(string[0..=i].to_string());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822567
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    for i in 0..string.len() {\n        result.push(string[0..i].to_string());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpsezyme69.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822566
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let length = string.len();\n\
    \    (0..length).map(|i| string[0..i].to_string()).collect()\n}\n\nfn main() {\n\
    \    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\"\
    )), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")),\
    \ vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp5ayhgbz7.rs:10:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822568
- exit_code: 0
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::<String>::new();\n    for i in 0..string.len() {\n        result.push(string[0..=i].to_string());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822568
- exit_code: 0
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    let mut current = String::new();\n    for c in string.chars()\
    \ {\n        current.push(c);\n        result.push(current.clone());\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822568
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let len = string.len();\n\
    \    let mut output = Vec::with_capacity(len);\n    for i in 0..len {\n      \
    \  output.push(string[0..i].to_string());\n    }\n    output\n}\n\nfn main() {\n\
    \    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\"\
    )), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")),\
    \ vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmprofovav3.rs:14:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822568
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let len = string.len();\n\
    \    (0..len).map(|i| string[0..i].to_string()).collect()\n}\n\nfn main() {\n\
    \    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\"\
    )), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")),\
    \ vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpq1id31c0.rs:10:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822568
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n+    let mut prefixes\
    \ = Vec::new();\n+    let chars: Vec<char> = string.chars().collect();\n+    for\
    \ length in 1..=chars.len() {\n+        prefixes.push(chars[0..length].iter().collect());\n\
    +    }\n+    prefixes\n+}\n+\n+/// Takes a trie and a prefix, returns a list of\
    \ all possible completions of the prefix.\n+fn complete(trie: &Trie, prefix: String)\
    \ -> Vec<String> {\n+    let mut completions = Vec::new();\n+    let mut node\
    \ = trie.root;\n+    let mut chars = prefix.chars();\n+    let mut char = chars.next();\n\
    +    while let Some(next_char) = char {\n+        match node.children.get(&next_char)\
    \ {\n+            Some(next_node) => {\n+                node = next_node;\n+\
    \                char = chars.next();\n+            }\n+            None => return\
    \ completions,\n+        }\n+    }\n+    completions.extend(complete_dfs(node,\
    \ prefix));\n+    completions\n+}\n+\n+/// Recursive helper function for complete().\n\
    +fn complete_dfs(node: &Box<Node>, current_string: String) -> Vec<String> {\n\
    +    let mut completions = Vec::new();\n+    if node.is_end {\n+        completions.push(current_string);\n\
    +    }\n+    for (char, next_node) in &node.children {\n+        let next_string\
    \ = format!(\"{}{}\", current_string, char);\n+        completions.extend(complete_dfs(next_node,\
    \ next_string));\n+    }\n+    completions\n+}\n+\n+/// Remove a word from the\
    \ trie, return its old value.\n+fn remove_word(trie: &mut Trie, word: String)\
    \ -> Option<String> {\n+    if word.is_empty() {\n+        return None;\n+   \
    \ }\n+    let mut node = trie.root;\n+    let mut chars = word.chars();\n}\n\n\
    fn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `+`\n --> /tmp/tmpiguazw_2.rs:3:1\n \
    \ |\n3 | +    let mut prefixes = Vec::new();\n  | ^ expected expression\n\nerror:\
    \ expected item, found `+`\n  --> /tmp/tmpiguazw_2.rs:10:1\n   |\n10 | +\n   |\
    \ ^ expected item\n\nerror: aborting due to 2 previous errors\n\n"
  stdout: ''
  timestamp: 1659822567
- exit_code: 0
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..=i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822568
- exit_code: 0
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    for index in 0..string.len() {\n        result.push(string[0..index\
    \ + 1].to_string());\n    }\n    result\n}\n\nfn main() {\n    let candidate =\
    \ all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822568
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for index in 0..string.len() {\n        prefixes.push(String::from(&string[0..index]));\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpzave46y8.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822568
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    (0..string.len()).map(|l|\
    \ string[0..l].to_string()).collect()\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpn1huwg9r.rs:9:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822568
- exit_code: 0
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i\
    \ + 1].to_string());\n    }\n    prefixes\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822568
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for s in string.split(\"\") {\n        if s.len() > 0 {\n\
    \            prefixes.push(s.to_string());\n        }\n    }\n    prefixes\n}\n\
    \nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"]`,\n right: `[\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpspb6hov5.rs:15:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822568
- exit_code: 0
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut all_prefixes\
    \ = Vec::new();\n    for length in 1..string.len() + 1 {\n        all_prefixes.push(String::from(&string[..length]));\n\
    \    }\n    all_prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822568
- exit_code: 0
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i\
    \ + 1].to_string());\n    }\n    prefixes\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822568
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut current_pos\
    \ = 0;\n    let mut prefixes = Vec::new();\n    for c in string.chars() {\n  \
    \      prefixes.push(string[..current_pos].to_string());\n        current_pos\
    \ += c.len_utf8();\n    }\n    prefixes\n}\n\nfn main() {\n    let candidate =\
    \ all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpk8q7p7ne.rs:15:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822568
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    for i in 0..string.len() {\n        result.push(string[0..i].to_string());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpsezyme69.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822566
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    (0..=string.len())\n\
    \        .map(|len| string[..len].to_string())\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\"]`,\n right: `[]`', /tmp/tmpf2jabssi.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822568
- exit_code: 0
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut index\
    \ = 0;\n    let mut result = Vec::new();\n    for ch in string.chars() {\n   \
    \     index += 1;\n        result.push(string[0..index].to_string());\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822568
- exit_code: 0
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut l = Vec::new();\n\
    \    let bytes = string.into_bytes();\n    for i in 0..bytes.len() {\n       \
    \ l.push(String::from_utf8(bytes[0..i + 1].to_vec()).unwrap());\n    }\n    l\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822568
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut res =\
    \ Vec::new();\n    let chars = string.chars().collect::<Vec<char>>();\n    for\
    \ i in 0..chars.len() {\n        res.push(chars[0..i].iter().collect());\n   \
    \ }\n    res\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpius7ulcs.rs:14:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822568
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    for i in 0..string.len() + 1 {\n        result.push(String::from(&string[0..i]));\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\"]`,\n right: `[]`', /tmp/tmpxtmt0_xz.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822568
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let len = string.len();\n\
    \    (0..len).map(|i| string[0..i].to_string()).collect()\n}\n\nfn main() {\n\
    \    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\"\
    )), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")),\
    \ vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpq1id31c0.rs:10:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822568
- exit_code: 0
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut list =\
    \ Vec::new();\n    for i in 0..string.len() {\n        list.push(string[0..=i].to_string());\n\
    \    }\n    list\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822568
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpvnh111vh.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822567
- exit_code: 0
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    let mut prefix = String::new();\n    for ch in string.chars()\
    \ {\n        prefix.push(ch);\n        result.push(prefix.clone());\n    }\n \
    \   result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822568
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let string_len\
    \ = string.len();\n    let mut output: Vec<String> = Vec::new();\n    for x in\
    \ 0..string_len {\n        output.push(string[0..x].to_string());\n    }\n   \
    \ output\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpu8dnyc9n.rs:14:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822568
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    for i in 0..string.len() {\n        result.push(string[0..i].to_string());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpsezyme69.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822566
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    for i in 0..=string.len() {\n        result.push(string[0..i].to_string());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\"]`,\n right: `[]`', /tmp/tmpqle26bcb.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822568
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut v = Vec::new();\n\
    \    for i in 0..string.len() {\n        v.push(string[0..i].to_string());\n \
    \   }\n    v\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpysrq70ja.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822567
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() + 1 {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\"]`,\n right: `[]`', /tmp/tmpk8cwq_r8.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822567
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(String::from(&string[0..i]));\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpsswjl186.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822568
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let len = string.len();\n\
    \    let mut prefixes = Vec::new();\n    for i in 0..len + 1 {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\"]`,\n right: `[]`', /tmp/tmpz_joicz0.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822568
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let bytes = string.as_bytes();\n    for length in 1..bytes.len()\
    \ {\n        prefixes.push(String::from_utf8(bytes[0..length].to_vec()).unwrap());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp7atdltkg.rs:14:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822568
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    (0..string.len()\
    \ + 1)\n        .map(|i| string[..i].to_string())\n        .collect()\n}\n\nfn\
    \ main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\"]`,\n right: `[]`', /tmp/tmpxo325cet.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822567
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    for i in 0..string.len() {\n        result.push(string[0..i].to_string());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpsezyme69.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822566
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut v = Vec::new();\n\
    \    for i in 0..(string.len() + 1) {\n        v.push(string[0..i].to_string());\n\
    \    }\n    v\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\"]`,\n right: `[]`', /tmp/tmpzu1jmv1x.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822568
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpvnh111vh.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822567
- exit_code: 0
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    string\n     \
    \   .chars()\n        .map(|c| c.to_string())\n        .scan(String::new(), |state,\
    \ s| {\n            state.push_str(&s);\n            Some(state.clone())\n   \
    \     })\n        .collect()\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822568
- exit_code: 0
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    let mut prefix = String::new();\n    for c in string.chars()\
    \ {\n        prefix.push(c);\n        result.push(prefix.clone());\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822567
- exit_code: 0
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i\
    \ + 1].to_string());\n    }\n    prefixes\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822568
- exit_code: 0
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..=i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822568
- exit_code: 0
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    for i in 0..string.len() {\n        result.push(String::from(&string[0..=i]));\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822568
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut chars = string.chars();\n    while let Some(c) =\
    \ chars.next() {\n        prefixes.push(c.to_string());\n        while let Some(c)\
    \ = chars.next() {\n            let len = prefixes.len();\n            prefixes[len\
    \ - 1].push(c);\n        }\n    }\n    prefixes\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\"]`,\n right: `[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]`', /tmp/tmphwe5d6gj.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1659822568
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut res =\
    \ Vec::new();\n    let chars = string.chars().collect::<Vec<char>>();\n    for\
    \ i in 0..(chars.len() + 1) {\n        res.push(String::from_iter(&chars[0..i]));\n\
    \    }\n    res\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no function or associated item named `from_iter` found for\
    \ struct `String` in the current scope\n --> /tmp/tmpde2z8857.rs:6:26\n  |\n6\
    \ |         res.push(String::from_iter(&chars[0..i]));\n  |                  \
    \        ^^^^^^^^^ function or associated item not found in `String`\n  |\n  =\
    \ help: items from traits can only be used if the trait is in scope\nhelp: the\
    \ following trait is implemented but not in scope; perhaps add a `use` for it:\n\
    \  |\n1 | use std::iter::FromIterator;\n  |\nhelp: there is an associated function\
    \ with a similar name\n  |\n6 |         res.push(String::from_utf8(&chars[0..i]));\n\
    \  |                          ~~~~~~~~~\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659822568
- exit_code: 0
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut prefix = String::new();\n    for c in string.chars()\
    \ {\n        prefix.push(c);\n        prefixes.push(prefix.clone());\n    }\n\
    \    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822568
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut vec =\
    \ Vec::new();\n    for i in 0..string.len() {\n        vec.push(string[0..i].to_string());\n\
    \    }\n    vec\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp5dtm_c4j.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822568
- exit_code: 0
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    let mut prefix = String::new();\n    for character in string.chars()\
    \ {\n        prefix.push(character);\n        result.push(prefix.clone());\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822568
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpvnh111vh.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822567
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let prefixes =\
    \ string.split(\"\").filter(|s| s != &\"\").collect::<Vec<&str>>();\n    let mut\
    \ results = Vec::new();\n    for prefix in prefixes {\n        results.push(prefix.to_string());\n\
    \    }\n    results\n}\n\nfn main() {\n    let candidate = all_prefixes;\n   \
    \ assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"]`,\n right: `[\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmprw7smrfi.rs:14:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822568
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::with_capacity(string.len());\n    for i in 0..string.len() {\n      \
    \  prefixes.push(string[0..i].to_string());\n    }\n    prefixes\n}\n\nfn main()\
    \ {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpy9f6ms22.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822568
- exit_code: 0
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut res =\
    \ Vec::new();\n    let mut curr = String::new();\n    for character in string.chars()\
    \ {\n        curr.push(character);\n        res.push(curr.clone());\n    }\n \
    \   res\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822568
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    let chars: Vec<char> = string.chars().collect();\n    for\
    \ i in 0..chars.len() {\n        result.push(chars[0..i].iter().collect());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp3gc5dfvv.rs:14:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822568
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut all_prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        all_prefixes.push(string[0..i].to_string());\n\
    \    }\n    all_prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpmhblif6t.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822567
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    let length = string.len();\n    for i in 0..length {\n  \
    \      result.push(string[0..i].to_string());\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpqv6r1cax.rs:14:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822568
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    (0..=string.len())\n\
    \        .map(|prefix_len| string[..prefix_len].to_string())\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\"]`,\n right: `[]`', /tmp/tmpk3jql8iw.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822568
- exit_code: 0
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    let mut prefix = String::new();\n    for c in string.chars()\
    \ {\n        prefix.push(c);\n        result.push(prefix.clone());\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822567
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    for i in 0..string.len() {\n        result.push(string[0..i].to_string());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpsezyme69.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822566
- exit_code: 0
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    for (i, _) in string.char_indices() {\n        result.push(string[..i\
    \ + 1].to_string());\n    }\n    result\n}\n\nfn main() {\n    let candidate =\
    \ all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822568
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::with_capacity(string.len());\n    for i in 0..=string.len() {\n     \
    \   prefixes.push(string[0..i].to_string());\n    }\n    prefixes\n}\n\nfn main()\
    \ {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\"]`,\n right: `[]`', /tmp/tmp13oeg0kc.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822568
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prev =\
    \ Vec::new();\n    for c in string.chars() {\n        let mut new = prev.clone();\n\
    \        new.push(c);\n        prev = new;\n    }\n    prev\n}\n\nfn main() {\n\
    \    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\"\
    )), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")),\
    \ vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpw3y0wine.rs:9:5\n  |\n2 |\
    \ fn all_prefixes(string: String) -> Vec<String> {\n  |                      \
    \              ----------- expected `Vec<String>` because of return type\n...\n\
    9 |     prev\n  |     ^^^^ expected struct `String`, found `char`\n  |\n  = note:\
    \ expected struct `Vec<String>`\n             found struct `Vec<char>`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822568
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    string\n     \
    \   .as_bytes()\n        .windows(1)\n        .map(|word| String::from_utf8(word.to_vec()).unwrap())\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = all_prefixes;\n   \
    \ assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"]`,\n right: `[\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp64s23s4v.rs:13:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822568
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpvnh111vh.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822567
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut vec =\
    \ Vec::new();\n    let length = string.len();\n    for i in 0..length {\n    \
    \    vec.push(string[0..i].to_string());\n    }\n    vec\n}\n\nfn main() {\n \
    \   let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\"\
    )), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")),\
    \ vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpl62rp3qh.rs:14:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822568
- exit_code: 0
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let chars: Vec<char>\
    \ = string.chars().collect();\n    let mut out = Vec::with_capacity(chars.len());\n\
    \    for (i, _) in chars.iter().enumerate() {\n        out.push(chars[0..i + 1].iter().collect());\n\
    \    }\n    out\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822568
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    (0..string.len()).map(|i|\
    \ string[..i].to_string()).collect()\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp7uurmrmi.rs:9:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822567
- exit_code: 0
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut results\
    \ = Vec::new();\n    let chars: Vec<char> = string.chars().collect();\n    for\
    \ i in 0..chars.len() {\n        results.push(chars[0..i + 1].iter().collect());\n\
    \    }\n    results\n}\n\nfn main() {\n    let candidate = all_prefixes;\n   \
    \ assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822568
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpvnh111vh.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822567
- exit_code: 0
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut current_length\
    \ = 1;\n    let mut result = Vec::new();\n    while current_length <= string.len()\
    \ {\n        result.push(string[0..current_length].to_string());\n        current_length\
    \ += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822568
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpvnh111vh.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822567
- exit_code: 0
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    let mut temp = String::new();\n    for c in string.chars()\
    \ {\n        temp.push(c);\n        result.push(temp.clone());\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822568
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let length = string.len();\n\
    \    (0..length)\n        .map(|i| string[0..i].to_string())\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp_7tienxk.rs:12:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822568
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for start in 0..string.len() {\n        prefixes.push(string[..start].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp7z723us6.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822569
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let n = string.len();\n\
    \    (0..n).map(|i| string[0..i].to_string()).collect()\n}\n\nfn main() {\n  \
    \  let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")),\
    \ vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpip0lg0yb.rs:10:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822569
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut ret =\
    \ Vec::<String>::new();\n    for i in 0..string.len() {\n        ret.push(string[0..i].to_string());\n\
    \    }\n    ret\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpu1d2qw2c.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822569
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    (0..string.len()).map(|i|\
    \ string[..i].to_string()).collect()\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp7uurmrmi.rs:9:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822567
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut out =\
    \ Vec::new();\n    for i in 0..(string.len() + 1) {\n        out.push(string[0..i].to_string());\n\
    \    }\n    out\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\"]`,\n right: `[]`', /tmp/tmpf_i1c4nw.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822569
- exit_code: 0
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut ret =\
    \ Vec::new();\n    for i in 0..string.len() {\n        ret.push(string[0..i +\
    \ 1].to_string());\n    }\n    ret\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822569
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut res =\
    \ Vec::new();\n    for i in 0..string.len() {\n        res.push(string[0..i].to_string());\n\
    \    }\n    res\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmprw8ggi53.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822566
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpvnh111vh.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822567
- exit_code: 0
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    let chars: Vec<char> = string.chars().collect();\n    for\
    \ len in 1..chars.len() + 1 {\n        result.push(chars[0..len].iter().collect::<String>());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822569
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut all_prefixes\
    \ = Vec::new();\n    for pos in 0..(string.len() + 1) {\n        all_prefixes.push(string[0..pos].to_string());\n\
    \    }\n    all_prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\"]`,\n right: `[]`', /tmp/tmpdachg5l1.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822569
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let chars: Vec<char>\
    \ = string.chars().collect();\n    let l = chars.len();\n    let mut prefixes:\
    \ Vec<String> = Vec::new();\n    for i in 0..l {\n        let p = chars[0..i].iter().collect();\n\
    \        prefixes.push(p);\n    }\n    prefixes\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpe_aipixc.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822569
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut ret =\
    \ Vec::<String>::new();\n    for i in 0..string.len() {\n        ret.push(string[0..i].to_string());\n\
    \    }\n    ret\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpu1d2qw2c.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822569
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpvnh111vh.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822567
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    for i in 0..string.len() {\n        result.push(string[0..i].to_string());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpsezyme69.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822566
- exit_code: 0
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut output\
    \ = Vec::new();\n    let str_len = string.len();\n    if str_len > 0 {\n     \
    \   for len in 1..=str_len {\n            output.push(string[0..len].to_string());\n\
    \        }\n    }\n    output\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822569
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    for i in 0..string.len() {\n        result.push(string[0..i].to_string());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpsezyme69.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822566
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpvnh111vh.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822567
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let chars: Vec<char>\
    \ = string.chars().collect();\n    let mut prefixes: Vec<String> = Vec::new();\n\
    \    for i in 0..chars.len() {\n        let sub = chars[0..i].iter().collect();\n\
    \        prefixes.push(sub);\n    }\n    prefixes\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmprc4gu4bw.rs:15:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822569
- exit_code: 0
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut count = 0;\n    for _ in string.chars() {\n     \
    \   count += 1;\n        prefixes.push(string[..count].to_string());\n    }\n\
    \    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822569
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let bytes = string.as_bytes();\n    for i in 0..bytes.len()\
    \ {\n        prefixes.push(bytes[0..i + 1].to_vec());\n    }\n    prefixes\n}\n\
    \nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp5u9t6dtp.rs:8:5\n  |\n2 |\
    \ fn all_prefixes(string: String) -> Vec<String> {\n  |                      \
    \              ----------- expected `Vec<String>` because of return type\n...\n\
    8 |     prefixes\n  |     ^^^^^^^^ expected struct `String`, found struct `Vec`\n\
    \  |\n  = note: expected struct `Vec<String>`\n             found struct `Vec<Vec<u8>>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822569
- exit_code: 0
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    string\n     \
    \   .chars()\n        .enumerate()\n        .map(|(i, _)| string[..i + 1].to_string())\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = all_prefixes;\n   \
    \ assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822569
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut all_prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        all_prefixes.push(string[0..i].to_string());\n\
    \    }\n    all_prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpmhblif6t.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822567
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(String::from(&string[0..i]));\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpsswjl186.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822568
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    for start in 0..string.len() {\n        result.push(string[..start].to_string());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp5ayhpn_g.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822569
- exit_code: 0
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    (0..string.len()).map(|i|\
    \ &string[..=i]).map(|s| s.to_string()).collect()\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822569
- exit_code: 0
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prev =\
    \ String::new();\n    string\n        .chars()\n        .map(|ch| {\n        \
    \    prev.push(ch);\n            prev.clone()\n        })\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822569
- exit_code: 0
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    let mut current = String::new();\n    for c in string.chars()\
    \ {\n        current.push(c);\n        result.push(current.clone());\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822568
- exit_code: 0
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut output\
    \ = Vec::new();\n    for len in 1..string.len() + 1 {\n        output.push(string[0..len].to_string());\n\
    \    }\n    output\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822569
- exit_code: 0
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    string\n     \
    \   .chars()\n        .scan(String::new(), |state, c| {\n            state.push(c);\n\
    \            Some(state.clone())\n        })\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822567
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for prefix_length in 1..string.len() {\n        prefixes.push(string[0..prefix_length].to_string());\n\
    \    }\n    prefixes.push(string);\n    prefixes\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\"]`,\n right: `[]`', /tmp/tmpdb8ya0uc.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822569
- exit_code: 0
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut output\
    \ = Vec::new();\n    let mut current_prefix = String::new();\n    for c in string.chars()\
    \ {\n        current_prefix.push(c);\n        output.push(current_prefix.clone());\n\
    \    }\n    output\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822569
- exit_code: 0
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    let length = string.len();\n    for i in 0..length {\n  \
    \      result.push(string[0..=i].to_string());\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822569
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let s = string.as_str();\n\
    \    let mut list = Vec::new();\n    for i in 0..s.len() {\n        list.push(s[0..i].to_string());\n\
    \    }\n    list\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpu9mekke0.rs:14:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822569
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut res =\
    \ Vec::new();\n    for i in 0..string.len() {\n        res.push(string[0..i].to_string());\n\
    \    }\n    res\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmprw8ggi53.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822566
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let length = string.len();\n\
    \    (0..length).map(|i| string[0..i].to_string()).collect()\n}\n\nfn main() {\n\
    \    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\"\
    )), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")),\
    \ vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp5ayhgbz7.rs:10:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822568
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let chars: Vec<char>\
    \ = string.chars().collect();\n    (0..chars.len()).map(|i| chars[0..i].iter().collect()).collect()\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpcagd_2ia.rs:10:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822567
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    (0..string.len()\
    \ + 1)\n        .map(|len| {\n            let end = cmp::min(len, string.len());\n\
    \            string[0..end].to_string()\n        })\n        .collect()\n}\n\n\
    fn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `cmp`\n\
    \ --> /tmp/tmprnmdf1py.rs:5:23\n  |\n5 |             let end = cmp::min(len, string.len());\n\
    \  |                       ^^^ use of undeclared crate or module `cmp`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659822569
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    let chars: Vec<char> = string.chars().collect();\n    for\
    \ i in 0..chars.len() {\n        result.push(chars[0..i].iter().collect());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp3gc5dfvv.rs:14:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822568
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    for i in 0..string.len() {\n        result.push(string[0..i].to_string());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpsezyme69.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822566
- exit_code: 0
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    for len in 1..string.len() + 1 {\n        result.push(string[0..len].to_string());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822569
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut string\
    \ = string;\n    let mut result = Vec::new();\n    while !string.is_empty() {\n\
    \        result.push(string.clone());\n        string.pop();\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpeshslr9w.rs:15:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822569
- exit_code: 0
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut output\
    \ = Vec::new();\n    let mut current_string = String::new();\n    for c in string.chars()\
    \ {\n        current_string.push(c);\n        output.push(current_string.clone());\n\
    \    }\n    output\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822569
- exit_code: 0
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut prefix = String::new();\n    for ch in string.chars()\
    \ {\n        prefix.push(ch);\n        prefixes.push(prefix.clone());\n    }\n\
    \    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822569
- exit_code: 0
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    for i in 0..string.len() {\n        result.push(string[0..i\
    \ + 1].to_string());\n    }\n    result\n}\n\nfn main() {\n    let candidate =\
    \ all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822567
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() + 1 {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\"]`,\n right: `[]`', /tmp/tmpk8cwq_r8.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822567
- exit_code: 0
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    for i in 0..string.len() {\n        result.push(string[0..=i].to_string());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822567
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut output\
    \ = Vec::new();\n    for i in 0..string.len() {\n        output.push(string[0..i].to_string());\n\
    \    }\n    output\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpmnjx5gas.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822569
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpvnh111vh.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822567
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut all_prefixes\
    \ = Vec::new();\n    for i in 0..string.len() + 1 {\n        all_prefixes.push(string[0..i].to_string());\n\
    \    }\n    all_prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\"]`,\n right: `[]`', /tmp/tmpe_asl7z1.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822569
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpvnh111vh.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822567
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut out =\
    \ Vec::new();\n    for i in 0..string.len() {\n        out.push(string[0..i].to_string());\n\
    \    }\n    out\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp_g2bm9zp.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822569
