name: HumanEval_8_sum_product
language: rs
prompt: "/// For a given list of integers, return a tuple consisting of a sum and\
  \ a product of all the integers in a list.\n/// Empty sum should be equal to 0 and\
  \ empty product should be equal to 1.\nfn sum_product(numbers: Vec<isize>) -> (isize,\
  \ isize) {\n"
tests: "}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
  \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
  \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
  \ (10, 10));\n}\n"
completions: ["    let (mut sum, mut product) = (0, 1);\n    for num in numbers {\n\
    \        sum += num;\n        product *= num;\n    }\n    (sum, product)", " \
    \   (\n        numbers.iter().sum(),\n        numbers.iter().product()\n    )",
  "    let (mut sum, mut product) = (0, 1);\n    for n in numbers {\n        sum +=\
    \ n;\n        product *= n;\n    }\n    (sum, product)", "    let mut sum = 0;\n\
    \    let mut product = 1;\n    for number in numbers {\n        sum += number;\n\
    \        product *= number;\n    }\n    (sum, product)", "    let mut sum = 0;\n\
    \    let mut product = 1;\n    for i in numbers {\n        sum += i;\n       \
    \ product *= i;\n    }\n    (sum, product)", "    if numbers.is_empty() {\n  \
    \      return (0, 1);\n    }\n    numbers.iter().fold((0, 1), |acc, &item| (acc.0\
    \ + item, acc.1 * item))", '    numbers.iter().fold((0, 1), |acc, n| (acc.0 +
    n, acc.1 * n))', "    let sum = numbers.iter().sum();\n    let product = if numbers.len()\
    \ == 0 { 1 } else { numbers.iter().product() };\n    (sum, product)", '    (numbers.iter().sum(),
    numbers.iter().product())', '    numbers.iter().fold((0, 1), |acc, x| (acc.0 +
    x, acc.1 * x))', "    let mut sum = 0;\n    let mut product = 1;\n    for n in\
    \ numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)",
  "    // let mut sum = 0;\n    // let mut product = 1;\n    //\n    // for num in\
    \ numbers {\n    //     sum += num;\n    //     product *= num;\n    // }\n  \
    \  //\n    // (sum, product)\n\n    // let sum = numbers.iter().fold(0, |acc,\
    \ &x| acc + x);\n    // let product = numbers.iter().fold(1, |acc, &x| acc * x);\n\
    \    //\n    // (sum, product)\n\n    numbers.iter().fold((0, 1), |(sum, product),\
    \ &num| (sum + num, product * num))", '    unimplemented!()', '    numbers.iter().fold((0,
    1), |acc, x| (acc.0 + x, acc.1 * x))', '    (numbers.iter().sum(), numbers.iter().product())',
  "    if numbers.is_empty() {\n        return (0, 1);\n    }\n\n    let sum = numbers.iter().sum();\n\
    \    let product = numbers.iter().product();\n\n    (sum, product)", "    let\
    \ sum = numbers.iter().fold(0, |acc, x| acc + x);\n    let product = numbers.iter().fold(1,\
    \ |acc, x| acc * x);\n    (sum, product)", "    // Write your code here\n    let\
    \ sum = numbers.iter().fold(0, |a, &b| a + b);\n    let product = numbers.iter().fold(1,\
    \ |a, &b| a * b);\n    (sum, product)", "    let mut sum = 0;\n    let mut product\
    \ = 1;\n    for i in numbers {\n        sum += i;\n        product *= i;\n   \
    \ }\n    (sum, product)", "    // TODO: implement the function\n    unimplemented!();",
  "    let sum = numbers.iter().sum();\n    let product = numbers.iter().product();\n\
    \    (sum, product)", "    let len = numbers.len();\n    match len {\n       \
    \ 0 => (0, 1),\n        _ => (numbers.iter().sum(), numbers.iter().product()),\n\
    \    }", "    let mut s = 0;\n    let mut p = 1;\n    for n in numbers {\n   \
    \     s += n;\n        p *= n;\n    }\n    (s, p)", "    let mut sum = 0;\n  \
    \  let mut product = 1;\n    for i in numbers {\n        sum += i;\n        product\
    \ *= i;\n    }\n    (sum, product)", "    let sum = numbers.iter().fold(0, |acc,\
    \ &n| acc + n);\n    let product = numbers.iter().fold(1, |acc, &n| acc * n);\n\
    \    (sum, product)", "    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ i in numbers {\n        sum += i;\n        product *= i;\n    }\n    (sum, product)",
  '    (numbers.iter().fold(0, |acc, num| acc + num), numbers.iter().fold(1, |acc,
    num| acc * num))', '    (numbers.iter().sum(), numbers.iter().product())', " \
    \   (\n        numbers.iter().sum(),\n        numbers.iter().product(),\n    )",
  "    (\n        numbers.iter().sum(),\n        numbers.iter().product()\n    )",
  "    // Implement me!\n    let mut sum = 0;\n    let mut product = 1;\n    for number\
    \ in numbers {\n        sum += number;\n        product *= number;\n    }\n  \
    \  (sum, product)", "    let sum = numbers.iter().fold(0, |sum, num| sum + num);\n\
    \    let product = numbers.iter().fold(1, |prod, num| prod * num);\n    (sum,\
    \ product)", '    (numbers.iter().sum(), numbers.iter().product())', '    (numbers.iter().sum(),
    numbers.iter().product())', "    // TODO\n    unimplemented!();", "    let mut\
    \ sum = 0;\n    let mut product = 1;\n    for n in numbers {\n        sum += n;\n\
    \        product *= n;\n    }\n    (sum, product)", '    (numbers.iter().sum(),
    numbers.iter().product())', "    let mut sum = 0;\n    let mut product = 1;\n\
    \    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n   \
    \ (sum, product)", '    (0, 1)', "    let mut product = 1;\n    let mut sum =\
    \ 0;\n    for i in numbers {\n        product *= i;\n        sum += i;\n    }\n\
    \    (sum, product)", "    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)",
  "    let sum = numbers.iter().fold(0, |sum, num| sum + num);\n    let product =\
    \ numbers.iter().fold(1, |product, num| product * num);\n    (sum, product)",
  "    let sum = numbers.iter().fold(0, |acc, x| acc + x);\n    let product = numbers.iter().fold(1,\
    \ |acc, x| acc * x);\n    (sum, product)", '    unimplemented!();', "    let mut\
    \ res = (0, 1);\n    for n in numbers {\n        res.0 += n;\n        res.1 *=\
    \ n;\n    }\n    res", "    (\n        numbers.iter().sum(),\n        numbers.iter().product(),\n\
    \    )", "    let res = numbers.iter().fold((0, 1), |acc, &x| (acc.0 + x, acc.1\
    \ * x));\n    (res.0, res.1)", "    let mut sum = 0;\n    let mut product = 1;\n\
    \    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n   \
    \ (sum, product)", "    let mut sum = 0;\n    let mut product = 1;\n    for i\
    \ in numbers {\n        sum += i;\n        product *= i;\n    }\n    (sum, product)",
  "    let sum = numbers.iter().fold(0, |acc, v| acc + v);\n    let prod = numbers.iter().fold(1,\
    \ |acc, v| acc * v);\n    (sum, prod)", '    numbers.iter().fold((0, 1), |(sum,
    product), &number| (sum + number, product * number))', "    let mut sum = 0;\n\
    \    let mut product = 1;\n    for i in numbers {\n        sum += i;\n       \
    \ product *= i;\n    }\n    (sum, product)", "    let sum = numbers.iter().fold(0,\
    \ |acc, &x| acc + x);\n    let product = numbers.iter().fold(1, |acc, &x| acc\
    \ * x);\n    (sum, product)", '    (numbers.iter().sum(), numbers.iter().product())',
  "    let mut sum = 0;\n    let mut product = 1;\n    for n in numbers {\n      \
    \  sum += n;\n        product *= n;\n    }\n    (sum, product)", "    let mut\
    \ sum = 0;\n    let mut product = 1;\n    for number in numbers {\n        sum\
    \ += number;\n        product *= number;\n    }\n    (sum, product)", "  // TODO\n\
    \  let (sum, product) = (numbers.iter().fold(0, |sum, i| sum + i), numbers.iter().fold(1,\
    \ |prod, i| prod * i));\n  (sum, product)", "    let mut prod = 1;\n    let mut\
    \ sum = 0;\n    for i in numbers {\n        prod *= i;\n        sum += i;\n  \
    \  }\n    (sum, prod)", '    (numbers.iter().sum(), numbers.iter().product())',
  '    numbers.iter().fold((0, 1), |acc, n| (acc.0 + n, acc.1 * n))', "    let sum\
    \ = numbers.iter().sum();\n    let product = if numbers.is_empty() {\n       \
    \ 1\n    } else {\n        numbers.iter().product()\n    };\n    (sum, product)",
  "    let sum = if numbers.is_empty() {\n        0\n    } else {\n        numbers.iter().fold(0,\
    \ |sum, i| sum + i)\n    };\n    let product = if numbers.is_empty() {\n     \
    \   1\n    } else {\n        numbers.iter().fold(1, |prod, i| prod * i)\n    };\n\
    \    (sum, product)", "    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)",
  "    let sum = numbers.iter().fold(0, |acc, &x| acc + x);\n    let product = numbers.iter().fold(1,\
    \ |acc, &x| acc * x);\n    (sum, product)", "    let product = numbers.iter().fold(1,\
    \ |acc, &x| acc * x);\n    let sum = numbers.iter().fold(0, |acc, &x| acc + x);\n\
    \    (sum, product)", "    let sum = numbers.iter().fold(0, |acc, x| acc + x);\n\
    \    let product = numbers.iter().fold(1, |acc, x| acc * x);\n    (sum, product)",
  '    unimplemented!();', '    (0, 1)', "    let mut sum = 0;\n    let mut product\
    \ = 1;\n    for num in numbers {\n        sum += num;\n        product *= num;\n\
    \    }\n    (sum, product)", '    (0, 1)', "    let mut sum = 0;\n    let mut\
    \ product = 1;\n    for number in numbers {\n        sum += number;\n        product\
    \ *= number;\n    }\n    (sum, product)", "    let mut s = 0;\n    let mut p =\
    \ 1;\n    for x in numbers {\n        s += x;\n        p *= x;\n    }\n    (s,\
    \ p)", "    (\n        numbers.iter().fold(0, |sum, n| sum + n),\n        numbers.iter().fold(1,\
    \ |prod, n| prod * n),\n    )", '    unimplemented!();', "    let sum = numbers.iter().sum();\n\
    \    let product = numbers.iter().product();\n    (sum, product)", "    let mut\
    \ product = 1;\n    let mut sum = 0;\n    for num in numbers {\n        product\
    \ *= num;\n        sum += num;\n    }\n    (sum, product)", "    let mut sum =\
    \ 0;\n    let mut product = 1;\n    for i in numbers {\n        sum += i;\n  \
    \      product *= i;\n    }\n    (sum, product)", "    let sum = numbers.iter().sum();\n\
    \    let product = numbers.iter().product();\n    (sum, product)", "    let mut\
    \ sum = 0;\n    let mut product = 1;\n    for num in numbers {\n        sum +=\
    \ num;\n        product *= num;\n    }\n    (sum, product)", "    if numbers.is_empty()\
    \ {\n        return (0, 1);\n    }\n    let mut sum = 0;\n    let mut product\
    \ = 1;\n    for number in numbers {\n        sum += number;\n        product *=\
    \ number;\n    }\n    (sum, product)", '    numbers.iter().fold((0, 1), |acc,
    &x| (acc.0 + x, acc.1 * x))', "    let sum = numbers.iter().sum();\n    let product\
    \ = numbers.iter().product();\n    (sum, product)", "    if numbers.is_empty()\
    \ {\n        return (0, 1);\n    }\n    numbers.iter().fold((0, 1), |(s, p), n|\
    \ (s + n, p * n))", "    let sum = numbers.iter().fold(0, |acc, x| acc + x);\n\
    \    let product = numbers.iter().fold(1, |acc, x| acc * x);\n    (sum, product)",
  "    let mut s = 0;\n    let mut p = 1;\n    for n in numbers {\n        s += n;\n\
    \        p *= n;\n    }\n    (s, p)", "    let mut sum = 0;\n    let mut product\
    \ = 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n   \
    \ }\n    (sum, product)", "    if numbers.is_empty() {\n        return (0, 1);\n\
    \    }\n    let sum = numbers.iter().sum();\n    let product = numbers.iter().product();\n\
    \    (sum, product)", '    unimplemented!()', "    let mut sum = 0;\n    let mut\
    \ product = 1;\n    for x in numbers {\n        sum += x;\n        product *=\
    \ x;\n    }\n    (sum, product)", "    (numbers.iter().fold(0, |sum, n| sum +\
    \ n),\n     numbers.iter().fold(1, |prod, n| prod * n))", "    let sum = numbers.iter().fold(0,\
    \ |sum, x| sum + x);\n    let product = numbers.iter().fold(1, |product, x| product\
    \ * x);\n    (sum, product)", "    let (sum, product) = numbers.iter().fold((0,\
    \ 1), |tup, elem| {\n        (tup.0 + elem, tup.1 * elem)\n    });\n    (sum,\
    \ product)", "    let mut s: isize = 0;\n    let mut p: isize = 1;\n    for n\
    \ in numbers {\n        s += n;\n        p *= n;\n    }\n    (s, p)", '    unimplemented!();',
  '    (numbers.iter().sum(), numbers.iter().product())', '    numbers.iter().fold((0,
    1), |acc, x| (acc.0 + x, acc.1 * x))', '    (numbers.iter().sum(), numbers.iter().product())',
  '    (numbers.iter().sum(), numbers.iter().product())', '    unimplemented!()',
  '    numbers.iter().fold((0, 1), |(acc1, acc2), x| (acc1 + x, acc2 * x))', '    (numbers.iter().fold(0,
    |sum, v| sum + v), numbers.iter().fold(1, |prod, v| prod * v))', "    let sum\
    \ = numbers.iter().fold(0, |acc, &cur| acc + cur);\n    let product = numbers.iter().fold(1,\
    \ |acc, &cur| acc * cur);\n    (sum, product)", '    numbers.iter().fold((0, 1),
    |acc, x| (acc.0 + x, acc.1 * x))', "    let sum = numbers.iter().fold(0, |acc,\
    \ cur| acc + cur);\n    let product = numbers.iter().fold(1, |acc, cur| acc *\
    \ cur);\n    (sum, product)", "    let sum = numbers.iter().fold(0, |acc, &x|\
    \ acc + x);\n    let product = numbers.iter().fold(1, |acc, &x| acc * x);\n  \
    \  (sum, product)", '    unimplemented!()', '    numbers.iter().fold((0, 1), |(sum,
    product), i| (sum + i, product * i))', "    let (mut sum, mut product) = (0, 1);\n\
    \    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n   \
    \ (sum, product)", "    let mut sum = 0;\n    let mut product = 1;\n    for i\
    \ in numbers {\n        sum += i;\n        product *= i;\n    }\n    (sum, product)",
  "    let mut sum = 0;\n    let mut product = 1;\n    for number in numbers {\n \
    \       sum += number;\n        product *= number;\n    }\n    (sum, product)",
  '    numbers.iter().fold((0, 1), |acc, n| (acc.0 + n, acc.1 * n))', '    numbers.iter().fold((0,
    1), |(acc, acc1), &n| (acc + n, acc1 * n))', '    unimplemented!()', "    let\
    \ mut sum = 0;\n    let mut product = 1;\n    for n in numbers {\n        sum\
    \ += n;\n        product *= n;\n    }\n    (sum, product)", "    if numbers.is_empty()\
    \ {\n        return (0, 1);\n    }\n\n    let sum = numbers.iter().sum();\n  \
    \  let product = numbers.iter().product();\n\n    (sum, product)", "    let sum\
    \ = numbers.iter().fold(0, |a, &b| a + b);\n    let product = numbers.iter().fold(1,\
    \ |a, &b| a * b);\n    (sum, product)", "    let mut sum = 0;\n    let mut product\
    \ = 1;\n    for num in numbers {\n        sum += num;\n        product *= num;\n\
    \    }\n    (sum, product)", "    let mut sum = 0;\n    let mut product = 1;\n\
    \    for i in &numbers {\n        sum += i;\n        product *= i;\n    }\n  \
    \  (sum, product)", "    // TODO: replace with your code\n    unimplemented!()",
  "    let mut sum = 0;\n    let mut product = 1;\n    for number in numbers {\n \
    \       sum += number;\n        product *= number;\n    }\n    (sum, product)",
  '    (numbers.iter().sum(), numbers.iter().product())', '    (numbers.iter().fold(0,
    |acc, i| acc + i), numbers.iter().fold(1, |acc, i| acc * i))', '    unimplemented!()',
  "    let sum = numbers.iter().sum();\n    let product = numbers.iter().product();\n\
    \    (sum, product)", "    let s = numbers.iter().fold(0, |acc, x| acc + x);\n\
    \    let p = numbers.iter().fold(1, |acc, x| acc * x);\n    (s, p)", "    let\
    \ (sum, product) = numbers.iter().fold((0, 1), |(sum, product), x| (sum + x, product\
    \ * x));\n    (sum, product)", "    (\n        numbers.iter().fold(0, |acc, x|\
    \ acc + x),\n        numbers.iter().fold(1, |acc, x| acc * x),\n    )", "    if\
    \ numbers.is_empty() {\n        return (0, 1);\n    }\n    let mut sum = 0;\n\
    \    let mut product = 1;\n    for i in numbers {\n        sum += i;\n       \
    \ product *= i;\n    }\n    (sum, product)", '    (numbers.iter().sum(), numbers.iter().product())',
  "    let sum = numbers.iter().sum();\n    let product = numbers.iter().product();\n\
    \    (sum, product)", "    let sum = numbers.iter().fold(0, |sum, x| sum + x);\n\
    \    let product = numbers.iter().fold(1, |product, x| product * x);\n    (sum,\
    \ product)", "    let mut sum = 0;\n    let mut product = 1;\n    for num in numbers\
    \ {\n        sum += num;\n        product *= num;\n    }\n    (sum, product)",
  "    let empty_vector = Vec::new();\n    if numbers.is_empty() {\n        return\
    \ (0, 1);\n    } else {\n        let mut sum = 0;\n        let mut product = 1;\n\
    \        for num in numbers {\n            sum += num;\n            product *=\
    \ num;\n        }\n        return (sum, product);\n    }", '    unimplemented!()',
  "    let sum = numbers.iter().sum();\n    let product = numbers.iter().product();\n\
    \    (sum, product)", "    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ num in numbers {\n        sum += num;\n        product *= num;\n    }\n    (sum,\
    \ product)", '    unimplemented!();', "    (\n        numbers.iter().fold(0, |acc,\
    \ x| acc + x),\n        numbers.iter().fold(1, |acc, x| acc * x),\n    )", " \
    \   (\n        numbers.iter().sum(),\n        numbers.iter().product(),\n    )",
  '    (numbers.iter().sum(), numbers.iter().product())', "    let mut sum = 0;\n\
    \    let mut product = 1;\n    for i in numbers {\n        sum += i;\n       \
    \ product *= i;\n    }\n    (sum, product)", '    unimplemented!();', "    let\
    \ sum = numbers.iter().sum();\n    let product = numbers.iter().product();\n \
    \   (sum, product)", "    let sum = numbers.iter().sum();\n    let product = numbers.iter().product();\n\
    \    (sum, product)", '    numbers.iter().fold((0, 1), |acc, n| (acc.0 + n, acc.1
    * n))', "    let sum = numbers.iter().sum();\n    let product = if sum == 0 {\
    \ 1 } else { numbers.iter().product() };\n    (sum, product)", "    let mut sum\
    \ = 0;\n    let mut product = 1;\n    for n in numbers {\n        sum += n;\n\
    \        product *= n;\n    }\n    (sum, product)", "    if numbers.is_empty()\
    \ {\n        return (0, 1);\n    }\n\n    let mut product = 1;\n    let mut sum\
    \ = 0;\n\n    for n in numbers {\n        product *= n;\n        sum += n;\n \
    \   }\n\n    (sum, product)", "    let mut sum = 0;\n    let mut product = 1;\n\
    \    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n   \
    \ (sum, product)", '    (numbers.iter().sum(), numbers.iter().product())', '    numbers.iter().fold((0,
    1), |acc, x| (acc.0 + x, acc.1 * x))', "  if numbers.len() == 0 {\n    return\
    \ (0, 1);\n  }\n  (numbers.iter().fold(0, |acc, &val| acc + val), numbers.iter().fold(1,\
    \ |acc, &val| acc * val))", '    numbers.iter().fold((0, 1), |(sum, product),
    &current| (sum + current, product * current))', "    if numbers.is_empty() {\n\
    \        return (0, 1);\n    }\n\n    numbers.iter().fold((0, 1), |acc, &x| (acc.0\
    \ + x, acc.1 * x))", "    let mut sum = 0;\n    let mut product = 1;\n    for\
    \ n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)",
  '    numbers.iter().fold((0, 1), |acc, number| (acc.0 + number, acc.1 * number))',
  '    unimplemented!()', "    let (mut sum, mut product) = (0, 1);\n    for number\
    \ in numbers {\n        sum += number;\n        product *= number;\n    }\n  \
    \  (sum, product)", "    (numbers.iter().fold(0, |sum, x| sum + x),\n    numbers.iter().fold(1,\
    \ |prod, x| prod * x))", '    (numbers.iter().sum(), numbers.iter().product())',
  '    (numbers.iter().sum(), numbers.iter().product())', '    numbers.iter().fold((0,
    1), |(sum, prod), num| (sum + num, prod * num))', "    (numbers.iter().fold(0,\
    \ |acc, x| acc + x),\n     numbers.iter().fold(1, |acc, x| acc * x))", "    let\
    \ mut sum = 0;\n    let mut product = 1;\n    for i in numbers {\n        sum\
    \ += i;\n        product *= i;\n    }\n    (sum, product)", "    let mut sum =\
    \ 0;\n    let mut product = 1;\n    for i in numbers {\n        sum += i;\n  \
    \      product *= i;\n    }\n    (sum, product)", "    let mut sum = 0;\n    let\
    \ mut product = 1;\n    for i in numbers {\n        sum += i;\n        product\
    \ *= i;\n    }\n    (sum, product)", "    let sum = numbers.iter().sum();\n  \
    \  let product = numbers.iter().product();\n    (sum, product)", "    let sum\
    \ = numbers.iter().sum();\n    let product = numbers.iter().product();\n    (sum,\
    \ product)", '    (numbers.iter().sum(), numbers.iter().product())', "    let\
    \ sum = numbers.iter().fold(0, |acc, x| acc + x);\n    let product = numbers.iter().fold(1,\
    \ |acc, x| acc * x);\n    (sum, product)", '    unimplemented!()', "    (\n  \
    \      numbers.iter().fold(0, |acc, x| acc + x),\n        numbers.iter().fold(1,\
    \ |acc, x| acc * x),\n    )", '    numbers.iter().fold((0, 1), |acc, n| (acc.0
    + n, acc.1 * n))', "    let sum = numbers.iter().fold(0, |sum, n| sum + n);\n\
    \    let product = numbers.iter().fold(1, |product, n| product * n);\n    (sum,\
    \ product)", "    (\n        numbers.iter().fold(0, |acc, &x| acc + x),\n    \
    \    numbers.iter().fold(1, |acc, &x| acc * x),\n    )", "    let sum = numbers.iter().fold(0,\
    \ |acc, x| acc + x);\n    let product = numbers.iter().fold(1, |acc, x| acc *\
    \ x);\n    (sum, product)", "    let sum = numbers.iter().sum();\n    let product\
    \ = if numbers.is_empty() {\n        1\n    } else {\n        numbers.iter().product()\n\
    \    };\n    (sum, product)", '    numbers.iter().fold((0, 1), |(s, p), &n| (s
    + n, p * n))', "    let mut res = (0, 1);\n    for x in numbers {\n        res.0\
    \ += x;\n        res.1 *= x;\n    }\n    res", "    (\n        sum(numbers.clone()),\n\
    \        product(numbers.clone()),\n    )", "    // TODO\n    let mut sum: isize\
    \ = 0;\n    let mut product: isize = 1;\n    for i in numbers.iter() {\n     \
    \   sum += i;\n        product *= i;\n    }\n    (sum, product)", '    numbers.iter().fold((0,
    1), |acc, &x| (acc.0 + x, acc.1 * x))', '    (numbers.iter().sum(), numbers.iter().product())',
  "    let product = numbers.iter().fold(1, |acc, &x| acc * x);\n    let sum = numbers.iter().fold(0,\
    \ |acc, &x| acc + x);\n    (sum, product)", "    let mut sum = 0;\n    let mut\
    \ product = 1;\n    for x in numbers {\n        sum += x;\n        product *=\
    \ x;\n    }\n    (sum, product)", '    (numbers.iter().sum(), numbers.iter().product())',
  '    (0, 1)', "    // TODO: sum_product\n    (0, 0)", "    // YOUR SOLUTION HERE\n\
    \    unimplemented!()", "    let sum = numbers.iter().fold(0, |a, b| a + b);\n\
    \    let product = numbers.iter().fold(1, |a, b| a * b);\n    (sum, product)",
  "    let (s, p) = numbers.iter().fold((0, 1), |(sum, product), i| (sum + i, product\
    \ * i));\n    (s, p)", '    unimplemented!()', '    numbers.iter().fold((0, 1),
    |acc, x| (acc.0 + x, acc.1 * x))', "    // TODO\n    let mut sum: isize = 0;\n\
    \    let mut product: isize = 1;\n    for n in numbers.iter() {\n        sum +=\
    \ n;\n        product *= n;\n    }\n    return (sum, product);", '    unimplemented!()',
  "    (\n        numbers.iter().fold(0, |acc, x| acc + x),\n        numbers.iter().fold(1,\
    \ |acc, x| acc * x),\n    )", "    let mut sum = 0;\n    let mut product = 1;\n\
    \    for i in numbers {\n        sum += i;\n        product *= i;\n    }\n   \
    \ (sum, product)", "    let mut sum = 0;\n    let mut product = 1;\n    for num\
    \ in numbers {\n        sum += num;\n        product *= num;\n    }\n    (sum,\
    \ product)", '    numbers.iter().fold((0, 1), |acc, x| (acc.0 + x, acc.1 * x))',
  "    let is_empty = numbers.is_empty();\n    let sum = numbers.iter().sum();\n \
    \   let product = if is_empty { 1 } else { numbers.iter().product() };\n    (sum,\
    \ product)"]
stop_tokens:
- "\n}"
