name: HumanEval_146_specialFilter
language: rs
prompt: "/// Write a function that takes an array of numbers as input and returns\
  \ \n/// the number of elements in the array that are greater than 10 and both \n\
  /// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
  fn specialFilter(nums: Vec<isize>) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = specialFilter;\n    assert_eq!(candidate(vec![5,\
  \ -2, 1, -5]), 0);\n    assert_eq!(candidate(vec![15, -73, 14, -15]), 1);\n    assert_eq!(candidate(vec![33,\
  \ -2, -3, 45, 21, 109]), 2);\n    assert_eq!(candidate(vec![43, -12, 93, 125, 121,\
  \ 109]), 4);\n    assert_eq!(candidate(vec![71, -2, -33, 75, 21, 19]), 3);\n   \
  \ assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(Vec::<isize>::new()),\
  \ 0);\n}\n"
completions: ["    let mut count = 0;\n    for number in nums {\n        if is_odd(first_digit(number))\
    \ && is_odd(last_digit(number)) && number > 10 {\n            count += 1;\n  \
    \      }\n    }\n    count", "    let mut count = 0;\n    for i in nums {\n  \
    \      if i > 10 && i.to_string().chars().nth(0).unwrap().to_digit(10).unwrap()\
    \ % 2 != 0 && i.to_string().chars().last().unwrap().to_digit(10).unwrap() % 2\
    \ != 0 {\n            count += 1;\n        }\n    }\n    count", "    let nums:\
    \ Vec<isize> = nums.into_iter().filter(|&n| n > 10).filter(|&n| {\n        let\
    \ n = n.abs();\n        n / 10 % 2 != 0 && n % 10 % 2 != 0\n    }).collect();\n\
    \    nums.len() as isize", "    // Implement your solution here\n    let mut count\
    \ = 0;\n    for n in nums {\n        if n > 10 && n > 0 {\n            let mut\
    \ n = n;\n            let mut last = n % 10;\n            let mut first = n;\n\
    \            while n > 0 {\n                first = n;\n                n = n\
    \ / 10;\n            }\n            if first % 2 != 0 && last % 2 != 0 {\n   \
    \             count += 1;\n            }\n        }\n    }\n    count", "    let\
    \ mut val = 0;\n    let mut index = 0;\n    while index < nums.len() {\n     \
    \   if first_and_last_digits_odd(&nums[index]) && nums[index] > 10 {\n       \
    \     val += 1;\n        }\n        index += 1;\n    }\n    val", "    nums.iter().fold(0,\
    \ |sum, n| {\n        if (n > &10) & is_first_digit_odd(n) & is_last_digit_odd(n)\
    \ {\n            sum + 1\n        } else {\n            sum\n        }\n    })",
  "    let mut counter = 0;\n    for num in nums {\n        if num > 10 {\n      \
    \      let string_num = num.to_string();\n            let string_num_len = string_num.len();\n\
    \            let first_num = string_num.chars().nth(0).unwrap();\n           \
    \ let last_num = string_num.chars().nth(string_num_len - 1).unwrap();\n      \
    \      if first_num.to_digit(10).unwrap() % 2 != 0 && last_num.to_digit(10).unwrap()\
    \ % 2 != 0 {\n                counter += 1;\n            }\n        }\n    }\n\
    \    counter", "    let mut count = 0;\n    for n in nums {\n        let nstring\
    \ = n.to_string();\n        if nstring.len() > 1 {\n            if is_first_last_digit_odd(n)\
    \ {\n                if n > 10 {\n                    count += 1;\n          \
    \      }\n            }\n        }\n    }\n    count", "    nums.iter().filter(|n|\
    \ {\n        let mut digits = vec![];\n        let mut nn = *n;\n        while\
    \ nn > 0 {\n            digits.push(nn % 10);\n            nn /= 10;\n       \
    \ }\n        if digits.len() < 2 {\n            return false;\n        }\n   \
    \     digits.iter().all(|d| d % 2 == 1) && n > &10isize\n    }).count() as isize",
  '    return 0;', "    // TODO\n    0", "    let mut cnt: isize = 0;\n    for i in\
    \ 0..nums.len() {\n        if nums[i] > 10 {\n            let mut num: isize =\
    \ nums[i];\n            let first_digit: isize = num % 10;\n            let last_digit:\
    \ isize = num % 10;\n            if first_digit % 2 != 0 && last_digit % 2 !=\
    \ 0 {\n                cnt += 1;\n            }\n        }\n    }\n    cnt", " \
    \   let mut count = 0;\n    for num in nums {\n        if num > 10 {\n       \
    \     if num % 2 == 1 {\n                let mut num = num;\n                let\
    \ first_digit = num % 10;\n                while num >= 10 {\n               \
    \     num /= 10;\n                }\n                if num % 2 == 1 {\n     \
    \               count += 1;\n                }\n            }\n        }\n   \
    \ }\n    count", '    0', '    unimplemented!()', "    let mut result = 0;\n \
    \   for i in nums {\n        if i > 10 && last_digit(i) % 2 != 0 && first_digit(i)\
    \ % 2 != 0 {\n            result += 1;\n        }\n    }\n    result", "    nums.iter().filter(|n|\
    \ {\n        let string = n.to_string();\n        let first_char = string.chars().next().unwrap();\n\
    \        let last_char = string.chars().last().unwrap();\n        n > &10 && first_char.is_digit(10)\
    \ && last_char.is_digit(10) && first_char.is_odd() && last_char.is_odd()\n   \
    \ }).count() as isize", "    let mut x = 0;\n    for i in nums {\n        if i\
    \ > 10 && is_odd(i) && is_odd(i/10) {\n            x += 1;\n        }\n    }\n\
    \    x", "    nums.iter().filter(|x|\n        (x / 100 != 0 || x % 10 != 0) &&\n\
    \        (x / 100 == 0 || x % 10 == 0) &&\n        x.abs() > 10\n    ).count()\
    \ as isize", "    let mut count = 0;\n    for num in nums {\n        if num >\
    \ 10 {\n            let str_num = num.to_string();\n            let first_char\
    \ = str_num.chars().nth(0).unwrap();\n            let last_char = str_num.chars().nth(str_num.len()\
    \ - 1).unwrap();\n            if (first_char == '1' || first_char == '3' || first_char\
    \ == '5' || first_char == '7' || first_char == '9')\n                && (last_char\
    \ == '1' || last_char == '3' || last_char == '5' || last_char == '7' || last_char\
    \ == '9') {\n                count += 1;\n            }\n        }\n    }\n  \
    \  count", '    unimplemented!()', "    let mut i: isize = 0;\n    for num in\
    \ nums {\n        if num > 10 && checkFirstDigit(num) && checkLastDigit(num) {\n\
    \            i += 1;\n        }\n    }\n    i", "    let mut res = 0;\n    for\
    \ num in nums {\n        if num > 10 && is_odd(first_digit(num)) && is_odd(last_digit(num))\
    \ {\n            res += 1;\n        }\n    }\n    res", "    // TODO\n    unimplemented!()",
  "    let result = nums.iter().filter(|&x| {\n        let s = x.to_string();\n  \
    \      let b = s.chars().nth(0).unwrap().to_digit(10).unwrap();\n        let e\
    \ = s.chars().last().unwrap().to_digit(10).unwrap();\n        let first_digit\
    \ = b % 2 != 0;\n        let last_digit = e % 2 != 0;\n        x > &10 && first_digit\
    \ && last_digit\n    }).collect::<Vec<&isize>>();\n    result.len() as isize",
  "    fn first_digit(num: isize) -> isize {\n        num / 10\n    }\n\n    fn last_digit(num:\
    \ isize) -> isize {\n        num % 10\n    }\n\n    fn is_odd(num: isize) -> bool\
    \ {\n        num % 2 != 0\n    }\n\n    fn combine(first: isize, last: isize)\
    \ -> bool {\n        is_odd(first) && is_odd(last)\n    }\n\n    nums.iter()\n\
    \        .filter(|&n| n > &10)\n        .filter(|&n| combine(first_digit(*n),\
    \ last_digit(*n)))\n        .count() as isize", "    let mut result = 0;\n   \
    \ for n in nums {\n        let first = n / 10;\n        let last = n % 10;\n \
    \       if n > 10 && (first % 2 != 0 && last % 2 != 0) {\n            result +=\
    \ 1;\n        }\n    }\n    result", "    nums.iter().filter(|num| {\n       \
    \ *num > 10 && is_first_digit_odd(*num) && is_last_digit_odd(*num)\n    }).count()\
    \ as isize", "    let mut count = 0;\n    for num in nums {\n        if num >\
    \ 10 && first_digit(num) % 2 != 0 && last_digit(num) % 2 != 0 {\n            count\
    \ += 1;\n        }\n    }\n    count", "    let mut count = 0;\n    for n in nums\
    \ {\n        if n > 10 && n % 2 != 0 && n / 10 % 2 != 0 && n % 10 % 2 != 0 {\n\
    \            count += 1;\n        }\n    }\n    count", "    let mut result =\
    \ 0;\n    for x in nums {\n        let mut x = x;\n        if x > 10 {\n     \
    \       let tens = x / 10;\n            let ones = x % 10;\n            if tens\
    \ % 2 != 0 && ones % 2 != 0 {\n                result += 1;\n            }\n \
    \       }\n    }\n    result", "  let numbers = vec![2, 4, 11, 7, 19, 20, 51,\
    \ 100, 127, 999];\n  numbers.into_iter().filter(|x| {\n    let n = x.clone();\n\
    \    n > 10 && n.abs() > 9 && n.abs() < 100 && n % 2 == 1\n  }).count() as isize",
  '    nums.iter().filter(|&x| x > &10 && odd(*x as u8) && odd(x.abs() as u8)).count()
    as isize', "    nums.iter().fold(0, |total, &num| {\n        if is_greater_than_10(num)\
    \ && is_both_digits_odd(num) {\n            total + 1\n        } else {\n    \
    \        total\n        }\n    })", "    // your code here\n    let mut count\
    \ = 0;\n    for i in nums {\n        if i > 10 && i % 2 != 0 && i % 10 % 2 !=\
    \ 0 {\n            count += 1;\n        }\n    }\n    count", "    nums.iter().filter(|&n|\
    \ {\n        let l = n % 10;\n        let f = n / (10 as isize).pow(get_len(*n)\
    \ as u32 - 1);\n        *n > 10 && l % 2 != 0 && f % 2 != 0\n    }).count() as\
    \ isize", "    let mut count = 0;\n    for num in nums {\n        if num > 10\
    \ && num > 0 {\n            let mut num_vec = Vec::new();\n            let mut\
    \ x = num;\n            while x > 0 {\n                num_vec.push(x % 10);\n\
    \                x /= 10;\n            }\n            num_vec.reverse();\n   \
    \         if num_vec[0] % 2 != 0 && num_vec[num_vec.len() - 1] % 2 != 0 {\n  \
    \              count += 1;\n            }\n        }\n    }\n    count", "   \
    \ let mut count = 0;\n    for n in nums {\n        if (n > 10) && (n.to_string().chars().nth(0).unwrap().to_digit(10).unwrap()\
    \ % 2 != 0) && (n.to_string().chars().last().unwrap().to_digit(10).unwrap() %\
    \ 2 != 0) {\n            count += 1;\n        }\n    }\n    count", "    let mut\
    \ count = 0;\n    for i in nums {\n        if i > 10 && i % 2 != 0 && i % 10 %\
    \ 2 != 0 {\n            count += 1;\n        }\n    }\n    count", "    let mut\
    \ count = 0;\n    for n in nums {\n        if (n > 10) && (get_first_digit(n)\
    \ % 2 != 0) && (get_last_digit(n) % 2 != 0) {\n            count += 1;\n     \
    \   }\n    }\n    count", "    nums.iter().filter(|&n| {\n        let d = *n;\n\
    \        let mut is_first_odd = false;\n        let mut is_last_odd = false;\n\
    \        if (d > 10) {\n            if d % 2 == 1 {\n                is_first_odd\
    \ = true;\n            }\n            while d > 10 {\n                d /= 10;\n\
    \            }\n            if d % 2 == 1 {\n                is_last_odd = true;\n\
    \            }\n        }\n        is_first_odd && is_last_odd\n    }).count()\
    \ as isize", '    nums.iter().fold(0, |sum, x| sum + if x > &10 && (*x % 10) %
    2 != 0 && (*x / 10) % 2 != 0 {1} else {0})', "    let mut count = 0;\n    for\
    \ num in nums {\n        if num >= 10 {\n            if isOdd(firstDigit(num))\
    \ && isOdd(lastDigit(num)) {\n                count += 1;\n            }\n   \
    \     }\n    }\n    count", "    nums.iter().filter(|n|\n        (n / 10) % 2\
    \ != 0 &&\n        *n % 10 % 2 != 0 &&\n        *n > 10\n    ).count() as isize",
  "    let mut res = 0;\n    for i in nums {\n        if i > 10 && first_digit(i)\
    \ % 2 != 0 && last_digit(i) % 2 != 0 {\n            res += 1;\n        }\n   \
    \ }\n    res", "    let mut counter = 0;\n    for i in nums {\n        if (i >\
    \ 10) && (i % 2 != 0) && ((i % 10) % 2 != 0) {\n            counter += 1;\n  \
    \      }\n    }\n    counter", '    unimplemented!()', "    let mut count = 0;\n\
    \    for i in nums {\n        let first_digit = i / 10;\n        let last_digit\
    \ = i % 10;\n        if i > 10 && first_digit % 2 != 0 && last_digit % 2 != 0\
    \ {\n            count += 1;\n        }\n    }\n    count", "    let mut count\
    \ = 0;\n    for i in nums {\n        if i > 10 && (i % 10) % 2 != 0 && i / 10\
    \ % 2 != 0 {\n            count += 1;\n        }\n    }\n    count", "    let\
    \ mut count = 0;\n    for num in nums {\n        if num > 10 && (num % 10) % 2\
    \ != 0 && num / 10 % 2 != 0 {\n            count += 1;\n        }\n    }\n   \
    \ count", "    let total = nums.iter().filter(|n| {\n        if *n > 10 {\n  \
    \          let last_digit = *n % 10;\n            let first_digit = *n / 10_000;\n\
    \n            (last_digit == 1 || last_digit == 3 || last_digit == 5 || last_digit\
    \ == 7 || last_digit == 9)\n                && (first_digit == 1 || first_digit\
    \ == 3 || first_digit == 5 || first_digit == 7 || first_digit == 9)\n        }\
    \ else {\n            false\n        }\n    }).count();\n\n    total as isize",
  "    let mut count = 0;\n    for x in nums {\n        if (x > 10) && (x % 2 != 0)\
    \ && (x % 10 != 0) {\n            count += 1;\n        }\n    }\n    count", " \
    \   // TODO\n    0", "    let mut result = 0;\n    for num in nums {\n       \
    \ if num > 10 && isFirstAndLastDigitOdd(num) {\n            result += 1;\n   \
    \     }\n    }\n    result", "    nums.iter().fold(0, |acc, x|\n        if x.to_string().chars().nth(0).unwrap().to_digit(10).unwrap()\
    \ % 2 != 0\n            && x.to_string().chars().last().unwrap().to_digit(10).unwrap()\
    \ % 2 != 0\n            && *x > 10 {\n            acc + 1\n        } else {\n\
    \            acc\n        }\n    )", "    let mut count = 0;\n    for n in nums\
    \ {\n        let first = n / 10;\n        let last = n % 10;\n        if n > 10\
    \ && (first % 2 != 0 && last % 2 != 0) {\n            count += 1;\n        }\n\
    \    }\n    count", "    let mut count = 0;\n    for num in nums {\n        if\
    \ first_digits_are_odd(num) && last_digits_are_odd(num) && num > 10 {\n      \
    \      count += 1;\n        }\n    }\n    count", "    let mut count = 0;\n  \
    \  for n in nums {\n        let head = n.abs() / 10;\n        let tail = n.abs()\
    \ % 10;\n        if n > 10 && (head % 2 != 0) && (tail % 2 != 0) {\n         \
    \   count += 1;\n        }\n    }\n    count", "    let mut num_count = 0;\n \
    \   for num in nums {\n        let mut digits = Vec::new();\n        if num >\
    \ 10 {\n            let mut cur_num = num;\n            while cur_num > 0 {\n\
    \                digits.push(cur_num % 10);\n                cur_num /= 10;\n\
    \            }\n            let first_digit = digits[digits.len() - 1];\n    \
    \        let last_digit = digits[0];\n            if first_digit % 2 != 0 && last_digit\
    \ % 2 != 0 {\n                num_count += 1;\n            }\n        }\n    }\n\
    \    num_count", "    let mut count = 0;\n    for num in nums {\n        let mut\
    \ last_digit = num % 10;\n        let mut first_digit = num;\n        while first_digit\
    \ >= 10 {\n            first_digit /= 10;\n        }\n        if (num > 10) &&\
    \ (first_digit % 2 != 0) && (last_digit % 2 != 0) {\n            count += 1;\n\
    \        }\n    }\n    count", "    let nums = nums.iter().filter(|&n| (n > &10)\
    \ && isOdd(*n % 10) && isOdd(*n / 10_isize.pow(n.to_string().len() as u32 - 1))).count()\
    \ as isize;\n    return nums;", "    let mut count = 0;\n    for num in nums {\n\
    \        if num > 10 && is_first_digit_odd(num) && is_last_digit_odd(num) {\n\
    \            count += 1;\n        }\n    }\n    count", "    let mut count = 0;\n\
    \    for num in nums {\n        if num > 10 {\n            if (num % 10) % 2 !=\
    \ 0 && (num / 10_000) % 2 != 0 {\n                count += 1;\n            }\n\
    \        }\n    }\n    count", '    0', "    nums.iter().filter(|&x| {\n     \
    \   let first = x.abs() / 10;\n        let last = x.abs() % 10;\n        x > &10\
    \ && first % 2 != 0 && last % 2 != 0\n    }).count() as isize", "    nums.iter().filter(|&&i|\
    \ i % 2 == 1 && nums.iter().filter(|&&i| i > 10).count() as isize == 2)\n    \
    \    .count() as isize", '    nums.iter().fold(0, |acc, &n| acc + if is_first_and_last_odd(n)
    && n > 10 {1} else {0})', "    let mut sum = 0;\n    for x in nums {\n       \
    \ let first = x / 10;\n        let last = x % 10;\n        if x > 10 && first\
    \ % 2 != 0 && last % 2 != 0 {\n            sum += 1;\n        }\n    }\n    sum",
  "    let mut count = 0;\n    for i in nums {\n        if i > 10 && first(i) % 2\
    \ != 0 && last(i) % 2 != 0 {\n            count += 1;\n        }\n    }\n    count",
  "    return nums.iter().filter(|&num| {\n        let mut first_digit = *num;\n \
    \       let mut last_digit = *num;\n        while first_digit >= 10 {\n      \
    \      first_digit /= 10;\n        }\n        last_digit %= 10;\n        *num\
    \ > 10 && first_digit % 2 == 1 && last_digit % 2 == 1\n    }).count() as isize;",
  "    nums.iter().fold(0, |acc, x| {\n        if *x > 10 && (x / 10 % 2 != 0) &&\
    \ (x % 10 % 2 != 0) {\n            acc + 1\n        } else {\n            acc\n\
    \        }\n    })", "    let mut count = 0;\n    for num in nums {\n        if\
    \ (num % 2 != 0) && (num % 10 != 0) && num > 10 {\n            count += 1;\n \
    \       }\n    }\n    count", "    let mut count = 0;\n    for num in nums {\n\
    \        if num % 2 != 0 && num > 10 {\n            if num / 10 % 2 != 0 && num\
    \ % 10 % 2 != 0 {\n                count += 1;\n            }\n        }\n   \
    \ }\n    count", "    let result = nums.iter().filter(|&x| {\n        let mut\
    \ temp = *x;\n        let last_digit = temp % 10;\n        let first_digit = temp;\n\
    \        while temp >= 10 {\n            temp /= 10;\n        }\n        return\
    \ *x > 10 && first_digit % 2 != 0 && last_digit % 2 != 0;\n    });\n    return\
    \ result.count() as isize;", "    let mut count = 0;\n    for i in nums {\n  \
    \      if i > 10 && i % 2 != 0 && (i % 10) % 2 != 0 && i / 10 != 0 {\n       \
    \     count += 1;\n        }\n    }\n    count", "    let mut count = 0;\n   \
    \ for num in nums {\n        if num > 10 && num.to_string().len() >= 2 {\n   \
    \         let first = num.to_string().get(0..1).unwrap().parse::<isize>().unwrap();\n\
    \            let last = num.to_string().get((num.to_string().len() - 1)..).unwrap().parse::<isize>().unwrap();\n\
    \            if first % 2 != 0 && last % 2 != 0 {\n                count += 1;\n\
    \            }\n        }\n    }\n    count", '    0', "    // your code here\n\
    \    // for(let i=0; i<nums.length; i++){\n    //     let last_digit = nums[i]%10;\n\
    \    //     let first_digit = (nums[i]%100 - last_digit)/10;\n    //     if(nums[i]>10\
    \ && (last_digit==1 || last_digit==3 || last_digit==5 || last_digit==7 || last_digit==9)\
    \ && (first_digit==1 || first_digit==3 || first_digit==5 || first_digit==7 ||\
    \ first_digit==9)){\n    //         count++;\n    //     }\n    // }\n    // return\
    \ count;", "    nums.iter().filter(|&n| {\n        n.to_string().chars().next().unwrap().to_digit(10).unwrap()\
    \ % 2 != 0 &&\n        n.to_string().chars().last().unwrap().to_digit(10).unwrap()\
    \ % 2 != 0 &&\n        *n > 10\n    }).count() as isize", "    return nums.iter().fold(0,\
    \ |acc, n|\n        if *n > 10\n        && n.to_string().chars().next().unwrap().to_digit(10).unwrap()\
    \ % 2 == 1\n        && n.to_string().chars().rev().next().unwrap().to_digit(10).unwrap()\
    \ % 2 == 1\n        {acc + 1} else {acc}\n    );", "    let mut k: isize = 0;\n\
    \    for i in 0..nums.len() {\n        if nums[i] > 10 && nums[i] % 2 != 0 {\n\
    \            k += 1;\n        }\n    }\n    k", "    let is_special = |x: &isize|\
    \ -> bool {\n        let mut s = x.to_string();\n        let first = s.remove(0);\n\
    \        let last = s.pop().unwrap();\n        let first = first.to_digit(10).unwrap();\n\
    \        let last = last.to_digit(10).unwrap();\n        let first = first % 2\
    \ == 1;\n        let last = last % 2 == 1;\n        let greater_than_10 = x >\
    \ &10;\n        return first && last && greater_than_10;\n    };\n    let mut\
    \ count = 0;\n    for x in nums {\n        if is_special(&x) {\n            count\
    \ += 1;\n        }\n    }\n    return count;", "    let result = nums.iter().filter(|&n|\
    \ {\n        n > &10 && (n % 2 == 1) && ((n / 10) % 2 == 1) && (n % 10 == 1 ||\
    \ n % 10 == 3 || n % 10 == 5 || n % 10 == 7 || n % 10 == 9)\n    }).count();\n\
    \    result as isize", "    let mut count = 0;\n    for num in nums {\n      \
    \  if num > 10 && num % 2 != 0 && num < 100 {\n            count += 1;\n     \
    \   }\n    }\n    count", "    let mut result = 0;\n    for x in nums {\n    \
    \    if x > 10 && x % 2 != 0 && x % 10 % 2 != 0 && x / 10 % 2 != 0 {\n       \
    \     result += 1;\n        }\n    }\n    result", "    let mut count = 0;\n \
    \   for n in nums {\n        if n > 10 && (n % 10) % 2 != 0 && n / 10_isize.pow(digits(n)\
    \ - 1) % 2 != 0 {\n            count += 1;\n        }\n    }\n    count", "  \
    \  let mut count = 0;\n    for num in nums {\n        let mut digits = Vec::new();\n\
    \        let mut tmp = num;\n        let first = tmp % 10;\n        tmp /= 10;\n\
    \        digits.push(first);\n        while tmp != 0 {\n            let last =\
    \ tmp % 10;\n            tmp /= 10;\n            digits.push(last);\n        }\n\
    \        let max = *digits.iter().max().unwrap();\n        let min = *digits.iter().min().unwrap();\n\
    \        if max > 10 && min % 2 != 0 && max % 2 != 0 {\n            count += 1;\n\
    \        }\n    }\n    count", "    let mut counter = 0;\n    for x in nums {\n\
    \        if (x as f64 / 10.0).floor() % 2.0 != 0.0 {\n            if x % 2 !=\
    \ 0 {\n                counter += 1;\n            }\n        }\n    }\n    counter",
  "    let result = nums.iter().filter(|&n| {\n        n > &10 && n.abs() % 10 % 2\
    \ != 0 && n / 10 % 2 != 0\n    }).count() as isize;\n    result", "    let mut\
    \ count = 0;\n    for i in nums {\n        if i > 10 && i % 2 != 0 && (i / 10)\
    \ % 2 != 0 && i % 10 != 0 {\n            count += 1;\n        }\n    }\n    count",
  "    nums.iter().filter(|n| {\n        // the initial division by 10 would fail\
    \ if the number was less than 10, so we can use that as the base case\n      \
    \  // for the recursion\n        let a = first(*n);\n        let b = last(*n);\n\
    \        if *n < 10 {\n            a % 2 != 0 && b % 2 != 0\n        } else {\n\
    \            a % 2 != 0 && b % 2 != 0 && *n > 10\n        }\n    }).count() as\
    \ isize", "    let mut count = 0;\n    for n in nums {\n        if n > 10 && n\
    \ > 0 {\n            let mut temp = n;\n            let mut a = temp % 10;\n \
    \           temp /= 10;\n            let b = temp % 10;\n            if a % 2\
    \ != 0 && b % 2 != 0 {\n                count += 1;\n            }\n        }\n\
    \    }\n    count", '    return 0;', "    let mut nums = nums;\n    nums.iter().filter(|&n|\
    \ n > &10 && (*n / 10) % 2 != 0 && *n % 2 != 0).count() as isize", "    let mut\
    \ count = 0;\n    for i in nums {\n        let mut m = i;\n        if m < 10 {\n\
    \            continue;\n        }\n\n        let f = m % 10;\n        m /= 10;\n\
    \        let mut l = 0;\n        loop {\n            l = m % 10;\n           \
    \ m /= 10;\n            if m == 0 {\n                break;\n            }\n \
    \       }\n\n        if (f % 2 != 0) && (l % 2 != 0) {\n            count += 1;\n\
    \        }\n    }\n    count", "    let mut result = 0;\n    for i in nums {\n\
    \        if (i > 10) {\n            if (((i / 10) % 2) == 1) && ((i % 10) % 2\
    \ == 1) {\n                result += 1;\n            }\n        }\n    }\n   \
    \ result", "    nums.iter().filter(|x| {\n        let n = **x;\n        n > 10\
    \ && is_odd(first_digit(n)) && is_odd(last_digit(n))\n    }).count() as isize",
  "    let mut res = 0;\n    for x in nums {\n        let mut first_digit = x;\n \
    \       let mut last_digit = x % 10;\n        if (first_digit % 2 == 1) && (last_digit\
    \ % 2 == 1) && (x > 10) {\n            res += 1;\n        }\n        while first_digit\
    \ > 10 {\n            first_digit /= 10;\n        }\n    }\n    res", "    let\
    \ mut count = 0;\n    for num in nums {\n        if num > 10 && (num / 10) % 2\
    \ != 0 && num % 2 != 0 {\n            count += 1;\n        }\n    }\n    count",
  '    unimplemented!()', "  let mut result = 0;\n  for i in nums {\n    if i > 10\
    \ && i % 2 != 0 && (i % 10) % 2 != 0 {\n      result += 1;\n    }\n  }\n  result",
  "    // Your code goes here\n    nums.iter().filter(|&n| \n        n.abs() > 10\
    \ && n.abs() % 10 % 2 != 0 && n % 10 % 2 != 0).count() as isize", "    let mut\
    \ count = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && num\
    \ / 10 % 2 != 0 && num % 10 % 2 != 0 {\n            count += 1;\n        }\n \
    \   }\n    count", '    0', "    let mut res = 0;\n    for n in nums {\n     \
    \   if n > 10 && n > 9 && n % 2 == 1 {\n            res += 1;\n        }\n   \
    \ }\n    res", "    nums.iter().filter(|n| {\n        **n > 10 && **n % 2 == 1\
    \ && **n % 10 == 1\n    }).count() as isize", "    let mut count = 0;\n    for\
    \ i in nums {\n        let string = i.to_string();\n        let first = string.chars().nth(0).unwrap();\n\
    \        let last = string.chars().last().unwrap();\n        if i > 10 && (first.to_digit(10).unwrap()\
    \ % 2 == 1) && (last.to_digit(10).unwrap() % 2 == 1) {\n            count += 1;\n\
    \        }\n    }\n    count", "    // Write your code here\n    let mut count\
    \ = 0;\n    for i in nums.iter() {\n        if i > &10 && i % 2 != 0 {\n     \
    \       count += 1;\n        }\n    }\n    count", "    let mut count = 0;\n \
    \   for num in nums {\n        let is_first_digit_odd = num / 10_isize.pow(num.to_string().len()\
    \ as u32 - 1) % 2 != 0;\n        let is_last_digit_odd = num % 10 % 2 != 0;\n\
    \        if num > 10 && is_first_digit_odd && is_last_digit_odd {\n          \
    \  count += 1;\n        }\n    }\n    count", "    nums.iter().filter(|&&n| {\n\
    \        n > 10 && n % 2 == 1 && n % 10 == n / 10.pow(n.to_string().len() as u32\
    \ - 1)\n    }).count() as isize", "    nums.iter().filter(|&x| {\n        *x >\
    \ 10 && x.to_string().chars().next().unwrap().to_digit(10).unwrap() % 2 != 0\n\
    \    }).filter(|&x| {\n        x.to_string().chars().last().unwrap().to_digit(10).unwrap()\
    \ % 2 != 0\n    }).count() as isize", '    0', "  let count = \n    nums.iter()\n\
    \        .filter(|&num| (*num > 10) && isFirstAndLastDigitOdd(*num))\n       \
    \ .count();\n  return count as isize;", "    let mut cnt = 0;\n    for num in\
    \ nums {\n        if num > 10 {\n            let mut tmp = num;\n            let\
    \ first = tmp % 10;\n            tmp /= 10;\n            let last = tmp % 10;\n\
    \            if first % 2 == 1 && last % 2 == 1 {\n                cnt += 1;\n\
    \            }\n        }\n    }\n    cnt", "    let mut count = 0;\n    for num\
    \ in nums {\n        let mut n = num;\n        let first = n % 10;\n        while\
    \ n >= 10 {\n            n /= 10;\n        }\n        if num > 10 && (first %\
    \ 2 == 1) && (n % 2 == 1) {\n            count += 1;\n        }\n    }\n    count",
  "    let mut count = 0;\n    for number in nums {\n        if number > 10 && number\
    \ % 2 != 0 && number % 10 != 0 {\n            count += 1;\n        }\n    }\n\
    \    count", "    let mut count = 0;\n    for i in nums {\n        if (i > 10)\
    \ && (i.to_string().chars().next().unwrap().to_digit(10).unwrap() % 2 != 0) &&\
    \ (i.to_string().chars().last().unwrap().to_digit(10).unwrap() % 2 != 0) {\n \
    \           count += 1;\n        }\n    }\n    count", '    nums.iter().filter(|&x|
    *x > 10 && x.to_string().chars().next().unwrap().to_digit(10).unwrap() % 2 !=
    0 && x.to_string().chars().rev().next().unwrap().to_digit(10).unwrap() % 2 !=
    0).count() as isize', "    let mut c = 0;\n    for i in nums {\n        if i >\
    \ 10 && is_odd(i / 10) && is_odd(i % 10) {\n            c += 1;\n        }\n \
    \   }\n    c", '    nums.iter().filter(|x| isSpecial(*x)).count() as isize', " \
    \   let mut count = 0;\n    for i in 0..nums.len() {\n        if nums[i] > 10\
    \ {\n            if nums[i] % 2 != 0 {\n                let s = nums[i].to_string();\n\
    \                let mut v: Vec<char> = s.chars().collect();\n               \
    \ let first = v[0].to_string().parse::<isize>().unwrap();\n                let\
    \ last = v[v.len() - 1].to_string().parse::<isize>().unwrap();\n             \
    \   if first % 2 != 0 && last % 2 != 0 {\n                    count += 1;\n  \
    \              }\n            }\n        }\n    }\n    count", "    // let mut\
    \ new_nums: Vec<isize> = vec![];\n    let mut new_nums: isize = 0;\n    for num\
    \ in nums {\n        let first = num / 10;\n        let last = num % 10;\n   \
    \     if num > 10 && first % 2 != 0 && last % 2 != 0 {\n            // new_nums.push(num);\n\
    \            new_nums += 1;\n        }\n    }\n    // new_nums.len() as isize\n\
    \    new_nums", "    let mut result = 0;\n    for n in nums {\n        let mut\
    \ first_digit = n;\n        while first_digit >= 10 {\n            first_digit\
    \ /= 10;\n        }\n        let first_odd = first_digit % 2 == 1;\n        let\
    \ last_odd = n % 2 == 1;\n        if n > 10 && first_odd && last_odd {\n     \
    \       result += 1;\n        }\n    }\n    result", "    let mut result = 0;\n\
    \    for n in nums {\n        let fd = n / 10;\n        let ld = n % 10;\n   \
    \     if n > 10 && is_odd(fd) && is_odd(ld) {\n            result += 1;\n    \
    \    }\n    }\n    result", '    0', "    let mut count = 0;\n    for num in nums\
    \ {\n        if num > 10 && firstDigitIsOdd(num) && lastDigitIsOdd(num) {\n  \
    \          count += 1;\n        }\n    }\n    count", '    0', '    nums.iter().fold(0,
    |acc, x| if x > &10 && is_first_digit_odd(*x) && is_last_digit_odd(*x) {acc +
    1} else {acc})', "    nums.iter().filter(|&x| {\n        let mut a = *x;\n   \
    \     let mut last = a % 10;\n        a /= 10;\n        let first = a % 10;\n\
    \        a /= 10;\n        last > 10 && (first % 2 != 0) && (last % 2 != 0)\n\
    \    }).count() as isize", "    let mut count = 0;\n    for num in nums {\n  \
    \      if num > 10 && num % 2 != 0 && num.to_string().chars().next().unwrap().to_digit(10).unwrap()\
    \ % 2 != 0\n                && num.to_string().chars().last().unwrap().to_digit(10).unwrap()\
    \ % 2 != 0 {\n            count += 1;\n        }\n    }\n    count", "    let\
    \ mut count = 0;\n    for i in 0..nums.len() {\n        if (nums[i] > 10) && (getFirstDigit(nums[i])\
    \ % 2 != 0) && (getLastDigit(nums[i]) % 2 != 0) {\n            count += 1;\n \
    \       }\n    }\n    count", "    nums.iter().fold(0, |sum, &n| {\n        if\
    \ n > 10 && n % 2 == 1 && n / 10 % 2 == 1 && n % 10 == 1 {\n            sum +\
    \ 1\n        } else {\n            sum\n        }\n    })", "    let mut total:\
    \ isize = 0;\n    for num in nums {\n        let first_digit = num / 10;\n   \
    \     let last_digit = num % 10;\n        if num > 10 && first_digit % 2 != 0\
    \ && last_digit % 2 != 0 {\n            total += 1;\n        }\n    }\n    total",
  "    let mut count = 0;\n    for i in nums {\n        if i % 2 != 0 && i > 10 {\n\
    \            count += 1;\n        }\n    }\n    count", "    let mut cnt = 0;\n\
    \    for i in nums {\n        let mut s = i.to_string();\n        let first =\
    \ s.remove(0);\n        let last = s.pop().unwrap();\n        if i > 10 && first\
    \ % 2 != 0 && last % 2 != 0 {\n            cnt += 1;\n        }\n    }\n    cnt",
  "    nums.iter().filter(|x| {\n        let first_digit = (x.clone() / 10);\n   \
    \     let last_digit = (x.clone() % 10);\n        x > &10 && first_digit % 2 !=\
    \ 0 && last_digit % 2 != 0\n    }).count() as isize", "    let mut count = 0;\n\
    \    for num in nums {\n        if num > 10 {\n            let first = num / 10;\n\
    \            let last = num % 10;\n            if first % 2 != 0 && last % 2 !=\
    \ 0 {\n                count += 1;\n            }\n        }\n    }\n    count",
  "    let mut filtered: Vec<isize> = Vec::new();\n    for x in nums {\n        if\
    \ (x > 10) && (x % 2 != 0) && ((x / 10) % 2 != 0) && ((x % 10) % 2 != 0) {\n \
    \           filtered.push(x);\n        }\n    }\n    filtered.len() as isize",
  '    return 0;', "    let mut count = 0;\n    for i in nums {\n        if (i > 10)\
    \ && (i % 2 != 0) && ((i % 10) % 2 != 0) {\n            count += 1;\n        }\n\
    \    }\n    count", "    nums.iter().filter(|&num| {\n        // if the first\
    \ digit is odd, last digit is odd, and the number is greater than 10\n       \
    \ (num.abs() > 10) && (num.abs() / 10 % 2 != 0) && (num.abs() % 2 != 0)\n    }).count()\
    \ as isize", "    let mut count = 0;\n    for i in nums {\n        if i % 2 !=\
    \ 0 && i > 10 {\n            let first = i / 10;\n            let last = i % 10;\n\
    \            if (first % 2 != 0 && last % 2 != 0) {\n                count +=\
    \ 1;\n            }\n        }\n    }\n    count", "    let mut n = 0;\n    for\
    \ i in nums {\n        if i > 10 && i % 2 != 0 && (i % 10) % 2 != 0 {\n      \
    \      n += 1;\n        }\n    }\n    n", "    let mut count = 0;\n    for i in\
    \ nums {\n        if i > 10 && (i % 10 == 1 || i % 10 == 3 || i % 10 == 5 || i\
    \ % 10 == 7 || i % 10 == 9)\n            && (i / 10 == 1 || i / 10 == 3 || i /\
    \ 10 == 5 || i / 10 == 7 || i / 10 == 9) {\n            count += 1;\n        }\n\
    \    }\n    count", '    nums.iter().filter(|&x| x > &10 && is_odd(x) && is_odd(last_digit(x))).count()
    as isize', "    let mut count = 0;\n    for i in nums {\n        if i > 10 &&\
    \ i % 2 != 0 && (i % 10) % 2 != 0 && i / 10 % 2 != 0 {\n            count += 1;\n\
    \        }\n    }\n    count", "    let mut count = 0;\n    for x in nums {\n\
    \        if x > 10 && x % 2 != 0 && x % 10 != 0 {\n            count += 1;\n \
    \       }\n    }\n    count", '    nums.iter().filter(|&x| is_better_than_10(*x)
    && has_odd_digits(*x)).count() as isize', "    nums.iter().filter(|x| {\n    \
    \    let firstDigit = x.to_string().chars().next().unwrap().to_digit(10).unwrap();\n\
    \        let lastDigit = x.to_string().chars().last().unwrap().to_digit(10).unwrap();\n\
    \        firstDigit % 2 != 0 && lastDigit % 2 != 0 && *x > 10\n    }).count()\
    \ as isize", "    let mut count = 0;\n    for num in nums {\n        if num >\
    \ 10 {\n            let mut tmp = num;\n            let mut d = 1;\n         \
    \   while tmp > 10 {\n                tmp /= 10;\n                d *= 10;\n \
    \           }\n            let first = tmp;\n            let last = num - (first\
    \ * d);\n            if first % 2 != 0 && last % 2 != 0 {\n                count\
    \ += 1;\n            }\n        }\n    }\n    count", "    let mut count = 0;\n\
    \    for i in nums {\n        if i > 10 && i%2 != 0 && i%10 != 0 {\n         \
    \   count = count + 1;\n        }\n    }\n    count", "    let mut count = 0;\n\
    \    for num in nums {\n        if num > 10 && first_digit(num) % 2 != 0 && last_digit(num)\
    \ % 2 != 0 {\n            count += 1;\n        }\n    }\n    count", "    let\
    \ mut result = 0;\n    for x in nums {\n        if x > 10 && check(x) {\n    \
    \        result += 1;\n        }\n    }\n    result", "    nums.iter().filter(|x|\
    \ {\n        (x / 10) % 2 != 0 && *x % 2 != 0 && x % 10 != 0\n    }).count() as\
    \ isize", "    let mut res = 0;\n    for x in nums {\n        if x < 10 {\n  \
    \          continue;\n        }\n        let mut x = x;\n        let first = x\
    \ % 10;\n        x /= 10;\n        let last = x % 10;\n        x /= 10;\n    \
    \    if (first + last) % 2 == 1 {\n            res += 1;\n        }\n    }\n \
    \   res", "    let mut newNums: Vec<isize> = vec![];\n    for num in nums {\n\
    \        if first_and_last_odd(num) && num > 10 {\n            newNums.push(num);\n\
    \        }\n    }\n    newNums.len() as isize", "    let mut count = 0;\n    for\
    \ n in nums {\n        if n > 10 && n % 2 != 0 && n / 10 % 2 != 0 && n % 10 %\
    \ 2 != 0 {\n            count += 1;\n        }\n    }\n    count", "    let mut\
    \ result = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0 && num\
    \ / 10 % 2 != 0 && num % 10 % 2 != 0 {\n            result += 1;\n        }\n\
    \    }\n    result", "\tlet mut count = 0;\n\tfor i in nums {\n\t\tlet j = i.to_string();\n\
    \t\tif i > 10 &&\n\t\t\tj.chars().nth(0).unwrap().to_digit(10).unwrap() % 2 !=\
    \ 0 &&\n\t\t\tj.chars().last().unwrap().to_digit(10).unwrap() % 2 != 0 {\n\t\t\
    \tcount += 1;\n\t\t}\n\t}\n\tcount", "    let mut count = 0;\n    for i in nums\
    \ {\n        if i > 10 && i.to_string().len() > 1 &&\n           i.to_string().chars().nth(0).unwrap().to_digit(10).unwrap()\
    \ % 2 != 0 &&\n           i.to_string().chars().last().unwrap().to_digit(10).unwrap()\
    \ % 2 != 0\n        {\n            count += 1;\n        }\n    }\n    count",
  '    0', "    // if nums.len() == 0 {\n    //     return 0;\n    // }\n    // let\
    \ mut count = 0;\n    // for i in 0..nums.len() {\n    //     if nums[i] > 10\
    \ {\n    //         let mut n = nums[i];\n    //         if n % 2 == 1 {\n   \
    \ //             n /= 10;\n    //             while n != 0 {\n    //         \
    \        if n % 2 == 1 {\n    //                     count += 1;\n    //     \
    \                break;\n    //                 }\n    //                 n /=\
    \ 10;\n    //             }\n    //         }\n    //     }\n    // }\n    //\
    \ count\n    nums.iter().filter(|&&x| x > 10 && isValidNumber(x)).count() as isize",
  "    let mut res = 0;\n    for i in nums {\n        let s = i.to_string();\n   \
    \     let first = s.chars().nth(0).unwrap().to_digit(10).unwrap();\n        let\
    \ last = s.chars().rev().nth(0).unwrap().to_digit(10).unwrap();\n        if i\
    \ > 10 && first % 2 != 0 && last % 2 != 0 {\n            res += 1;\n        }\n\
    \    }\n    res", "    // code here\n    nums.iter().filter(|&n| (n > &10) &&\
    \ (n.to_string().chars().next().unwrap().to_digit(10).unwrap() % 2 != 0) && (n.to_string().chars().last().unwrap().to_digit(10).unwrap()\
    \ % 2 != 0)).count() as isize", "    // your code here\n    nums.iter().filter(|&&x|\
    \ x > 10 && x.to_string().chars().next().unwrap().to_digit(10).unwrap() % 2 !=\
    \ 0 && x.to_string().chars().rev().next().unwrap().to_digit(10).unwrap() % 2 !=\
    \ 0).count() as isize", "    let mut count = 0;\n    for num in nums {\n     \
    \   if num > 10 {\n            if (num % 10) % 2 != 0 && (num / 10) % 2 != 0 {\n\
    \                count += 1;\n            }\n        }\n    }\n    count", '    0',
  "    nums.iter().fold(0, |acc, x| {\n        if x > &10 && (x / 10) % 2 != 0 &&\
    \ x % 2 != 0 {\n            acc + 1\n        } else {\n            acc\n     \
    \   }\n    })", "    let mut ret = 0;\n    for n in nums {\n        if n >= 10\
    \ && n % 2 == 1 && n % 10 == 1 {\n            ret += 1;\n        }\n    }\n  \
    \  ret", "\tlet mut count = 0;\n\tfor i in nums {\n\t\tif i > 10 && (i % 10) %\
    \ 2 != 0 && i / 10 % 2 != 0 {\n\t\t\tcount += 1;\n\t\t}\n\t}\n\tcount", "    let\
    \ mut counter = 0;\n    for num in nums {\n        if num > 10 && num % 2 != 0\
    \ && (num % 10) % 2 != 0 {\n            counter += 1;\n        }\n    }\n    counter",
  '    0', "    let mut count = 0;\n    for num in nums {\n        if num > 10 {\n\
    \            let first = num / 10;\n            let last = num % 10;\n       \
    \     if first % 2 != 0 && last % 2 != 0 {\n                count += 1;\n    \
    \        }\n        }\n    }\n    count", "    let mut count = 0;\n    for n in\
    \ nums {\n        if n % 2 != 0 &&\n            n.to_string().chars().next().unwrap().to_digit(10).unwrap()\
    \ % 2 != 0 &&\n            n.to_string().chars().last().unwrap().to_digit(10).unwrap()\
    \ % 2 != 0 &&\n            n > 10 {\n            count += 1;\n        }\n    }\n\
    \    count", "    let mut cnt: isize = 0;\n    for n in nums {\n        if n >\
    \ 10 && n % 2 == 1 && n / 10 % 2 == 1 {\n            cnt += 1;\n        }\n  \
    \  }\n    cnt", "    let mut count = 0;\n    for n in nums {\n        let mut\
    \ first_digit = n / 10;\n        let mut last_digit = n % 10;\n        if n >\
    \ 10 && first_digit % 2 != 0 && last_digit % 2 != 0 {\n            count += 1;\n\
    \        }\n    }\n    count", "    let mut count = 0;\n    for n in nums {\n\
    \        let string = n.to_string();\n        let mut split_str = string.split(\"\
    \");\n        let first = split_str.next().unwrap();\n        let last = split_str.next_back().unwrap();\n\
    \        if n > 10 && first.parse::<isize>().unwrap() % 2 != 0 && last.parse::<isize>().unwrap()\
    \ % 2 != 0 {\n            count += 1;\n        }\n    }\n    count", "    let\
    \ count = nums.iter().fold(0, |acc, &x| {\n        let mut x = x;\n        let\
    \ mut last = x % 10;\n        let mut first = last;\n        while x >= 10 {\n\
    \            x /= 10;\n        }\n        first = x;\n        if x % 2 != 0 &&\
    \ last % 2 != 0 && x >= 10 {\n            acc + 1\n        } else {\n        \
    \    acc\n        }\n    });\n    count", "    let mut count = 0;\n    for num\
    \ in nums {\n        if is_special(num) {\n            count += 1;\n        }\n\
    \    }\n    count", "    return nums.iter().filter(|&x| {\n        if *x > 10\
    \ {\n            if *x % 2 == 1 {\n                let mut num = *x;\n       \
    \         num /= 10;\n                while num > 0 {\n                    if\
    \ num == 1 {\n                        return true;\n                    }\n  \
    \                  num /= 10;\n                }\n            }\n        }\n \
    \       return false;\n    }).collect::<Vec<&isize>>().len() as isize;", "   \
    \ // write your code here\n    return 0;", "    let res = nums.iter().filter(|&n|\
    \ {\n        let first = n / 10;\n        let last = n % 10;\n        first %\
    \ 2 != 0 && last % 2 != 0 && *n > 10\n    }).count();\n    res as isize", "  \
    \  let mut counter = 0;\n    for i in nums {\n        if i > 10 && (i.to_string().chars().next().unwrap().to_digit(10).unwrap()%2!=0)\
    \ && (i.to_string().chars().last().unwrap().to_digit(10).unwrap()%2!=0) {\n  \
    \          counter+=1;\n        }\n    }\n    counter", '    0', "    let filtered\
    \ = nums.iter().filter(|&n| {\n        let first = n / 10;\n        let last =\
    \ n % 10;\n        n > &10 && is_odd(first) && is_odd(last)\n    });\n    return\
    \ filtered.count() as isize;", "    let mut count = 0;\n    for i in nums {\n\
    \        if i > 10 && i % 2 != 0 && (i % 10) % 2 != 0 && (i / 10) % 2 != 0 {\n\
    \            count += 1;\n        }\n    }\n    count", "    let filtered_nums:\
    \ Vec<isize> = nums.iter().filter(|&n| {\n        n > &10 &&\n        (*n / 10)\
    \ % 2 != 0 &&\n        (*n % 10) % 2 != 0\n    }).cloned().collect();\n    filtered_nums.len()\
    \ as isize", "  nums.iter().filter(|&n| {\n    let num = *n;\n    let first =\
    \ (num / 10) % 10;\n    let last = num % 10;\n    num > 10 && (first % 2 != 0\
    \ && last % 2 != 0)\n  }).count() as isize", "    return nums.iter().filter(|&x|\n\
    \        x > &10\n        && x.to_string().chars().nth(0).unwrap().to_digit(10).unwrap()\
    \ % 2 == 1\n        && x.to_string().chars().last().unwrap().to_digit(10).unwrap()\
    \ % 2 == 1\n    ).count() as isize;", "    let mut count = 0;\n    for n in nums\
    \ {\n        if n > 10 && n % 2 != 0 && n % 10 != 0 {\n            count += 1;\n\
    \        }\n    }\n    count", "    // Add your code here\n    0", "    let mut\
    \ count = 0;\n    for i in nums {\n        if i > 10 && i % 2 != 0 && (i / 10)\
    \ % 2 != 0 && i % 10 != 0 && i % 10 != 8 {\n            count += 1;\n        }\n\
    \    }\n    count", "    let mut result = 0;\n    for n in nums {\n        if\
    \ n > 10 && n % 2 != 0 && n % 10 != 0 {\n            result += 1;\n        }\n\
    \    }\n    result", "    // let nums = vec![0, 11, 20, 30, 8, 9, 25, 13, 15,\
    \ 9];\n    let mut cnt = 0;\n    for num in nums {\n        if num > 10 && num\
    \ % 2 == 1 {\n            let mut num_cpy = num;\n            let first_digit\
    \ = num_cpy % 10;\n            while num_cpy > 9 {\n                num_cpy /=\
    \ 10;\n            }\n            if first_digit % 2 == 1 && num_cpy % 2 == 1\
    \ {\n                cnt += 1;\n            }\n        }\n    }\n    cnt", " \
    \   let mut count = 0;\n    for num in nums {\n        if num > 10 {\n       \
    \     let last_digit = num % 10;\n            let mut first_digit = num;\n   \
    \         while first_digit > 9 {\n                first_digit /= 10;\n      \
    \      }\n            if first_digit % 2 != 0 && last_digit % 2 != 0 {\n     \
    \           count += 1;\n            }\n        }\n    }\n    count", "    let\
    \ mut result = 0;\n    for i in nums {\n        let first_digit = i.to_string().chars().nth(0).unwrap().to_digit(10).unwrap();\n\
    \        let last_digit = i.to_string().chars().last().unwrap().to_digit(10).unwrap();\n\
    \        if i > 10 && first_digit % 2 != 0 && last_digit % 2 != 0 {\n        \
    \    result += 1;\n        }\n    }\n    result", "    let mut count = 0;\n  \
    \  for num in nums {\n        let first_digit = num / 10;\n        let last_digit\
    \ = num % 10;\n        if num > 10 && (first_digit % 2 != 0) && (last_digit %\
    \ 2 != 0) {\n            count += 1;\n        }\n    }\n    count", "    let mut\
    \ result = 0;\n    for num in nums {\n        if num > 10 {\n            if num\
    \ % 2 == 1 {\n                if (num / 10) % 2 == 1 {\n                    result\
    \ += 1;\n                }\n            }\n        }\n    }\n    result", "  \
    \  let mut count = 0;\n    for num in nums {\n        if num > 10 && num.to_string().chars().last().unwrap().to_digit(10).unwrap()\
    \ % 2 != 0 \n            && num.to_string().chars().next().unwrap().to_digit(10).unwrap()\
    \ % 2 != 0 {\n            count += 1;\n        }\n    }\n    count", '    nums.iter().filter(|&n|
    n > &10 && (n % 2 == 1 && (*n / 10) % 2 == 1)).count() as isize']
stop_tokens:
- "\n}"
