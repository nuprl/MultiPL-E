name: HumanEval_92_any_int
language: rs
prompt: "/// Create a function that takes 3 numbers.\n/// Returns true if one of the\
  \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
  /// Returns false in any other cases.\n/// Examples\nfn any_int(x: isize, y: isize,\
  \ z: isize) -> bool {\n"
tests: "}\n\nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2,\
  \ 3, 1), true);\n    assert_eq!(candidate(2.5, 2, 3), false);\n    assert_eq!(candidate(1.5,\
  \ 5, 3.5), false);\n    assert_eq!(candidate(2, 6, 2), false);\n    assert_eq!(candidate(4,\
  \ 2, 2), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4,\
  \ 6, 2), true);\n    assert_eq!(candidate(2, 1, 1), true);\n    assert_eq!(candidate(3,\
  \ 4, 7), true);\n    assert_eq!(candidate(3.0, 4, 7), false);\n}\n"
completions: ['    (x == y + z) || (y == x + z) || (z == x + y)', '    x == y + z
    || y == x + z || z == x + y', '    unimplemented!()', '    x == y + z || y ==
    x + z || z == x + y', "    match (x, y, z) {\n        (a, b, c) if a + b == c\
    \ => true,\n        (a, b, c) if a + c == b => true,\n        (a, b, c) if b +\
    \ c == a => true,\n        _ => false,\n    }", "    let sum: isize = x + y +\
    \ z;\n    (x % 2 == 0 && y % 2 == 0 && z % 2 == 0) && (sum % 2 == 0)", '    x
    == y + z || y == x + z || z == x + y', "    if x == 0 || y == 0 || z == 0 {\n\
    \        return false;\n    }\n    if x + y == z || x + z == y || y + z == x {\n\
    \        return true;\n    }\n    false", '    (x + y == z) | (x + z == y) | (y
    + z == x)', "    // Your code here\n\n    unimplemented!()", "    let s: isize\
    \ = x + y + z;\n    if s % 3 == 0 {\n        return true;\n    }\n    false",
  '    (x + y == z) || (x + z == y) || (y + z == x)', '    x + y == z || x + z ==
    y || y + z == x', '    return (x + y == z) || (x + z == y) || (y + z == x);',
  "    if x + y == z || x + z == y || y + z == x {\n        return true;\n    } else\
    \ {\n        return false;\n    }", '    x == y + z || y == x + z || z == x +
    y', "    if (x == y + z) || (y == x + z) || (z == x + y) {\n        return true;\n\
    \    }\n    return false;", '    x + y == z || x + z == y || y + z == x', "  \
    \  if x % 1 == 0 && y % 1 == 0 && z % 1 == 0 {\n        (x + y == z) || (x + z\
    \ == y) || (y + z == x)\n    } else {\n        false\n    }", "  if x == y + z\
    \ {\n    return true;\n  } else if y == x + z {\n    return true;\n  } else if\
    \ z == x + y {\n    return true;\n  } else {\n    return false;\n  }", "    if\
    \ x == 0 || y == 0 || z == 0 {\n        return false;\n    }\n    if x + y ==\
    \ z || x + z == y || y + z == x {\n        return true;\n    }\n    false", " \
    \   let mut nums = vec![x, y, z];\n    nums.sort();\n    if nums[2] == nums[0]\
    \ + nums[1] {\n        true\n    } else {\n        false\n    }", '    (x + y
    == z || x + z == y || y + z == x) && x.is_integer() && y.is_integer() && z.is_integer()',
  '    x.abs() + y.abs() == z.abs() || x.abs() + z.abs() == y.abs() || y.abs() + z.abs()
    == x.abs()', '    vec![x, y, z].into_iter().sum::<isize>() == 3', "    //return\
    \ (x + y == z) | (x + z == y) | (y + z == x);\n    // Or...\n    //return [x,\
    \ y, z].into_iter().combinations(2).any(|p| p[0] + p[1] == ([x, y, z] - p).unwrap());\n\
    \    // Or...\n    //let mut s = vec![x, y, z];\n    //s.sort();\n    //return\
    \ s[0] + s[1] == s[2];\n    // Or...\n    return x + y == z | x + z == y | y +\
    \ z == x;", '    x == y + z || y == x + z || z == x + y', '    x == y + z || y
    == x + z || z == x + y', "    (x + y == z || x + z == y || y + z == x) &&\n  \
    \  (x.is_i32() && y.is_i32() && z.is_i32())", '    (x + y == z) || (x + z == y)
    || (y + z == x)', "    let s = x + y + z;\n    if s % 3 == 0 {\n        return\
    \ true;\n    } else {\n        return false;\n    }", "    let sum: isize = x\
    \ + y + z;\n    if sum % 3 == 0 {\n        return true;\n    } else {\n      \
    \  return false;\n    }", "    let mut a = [x, y, z];\n    a.sort();\n    a[0]\
    \ + a[1] == a[2]", "    if x == y + z || y == x + z || z == x + y {\n        true\n\
    \    } else {\n        false\n    }", '    x + y == z || x + z == y || y + z ==
    x', '    (x == y + z) || (y == x + z) || (z == x + y)', "    if x + y == z {\n\
    \        return true;\n    }\n    if x + z == y {\n        return true;\n    }\n\
    \    if y + z == x {\n        return true;\n    }\n    return false;", "    if\
    \ x == y + z || x + y == z || x + z == y {\n        true\n    } else {\n     \
    \   false\n    }", '    x + y == z || x + z == y || y + z == x', '    return x
    == y + z || y == x + z || z == x + y;', "    let sum = x + y + z;\n    let x =\
    \ x.abs();\n    let y = y.abs();\n    let z = z.abs();\n    return (sum % 3 ==\
    \ 0) && (x % 1 == 0) && (y % 1 == 0) && (z % 1 == 0);", "    let s = x + y + z;\n\
    \    if s % 3 == 0 {\n        return true;\n    }\n    false", "    if x % 1 ==\
    \ 0 && y % 1 == 0 && z % 1 == 0 {\n        let mut nums = [x, y, z];\n       \
    \ nums.sort();\n        nums[0] + nums[1] == nums[2]\n    } else {\n        false\n\
    \    }", "  let mut arr: [isize; 3] = [x, y, z];\n  arr.sort();\n  if arr[0] +\
    \ arr[1] == arr[2] {\n    return true;\n  }\n  return false;", "  if is_integer(x\
    \ + y, z) { return true; }\n  if is_integer(x + z, y) { return true; }\n  if is_integer(y\
    \ + z, x) { return true; }\n  false", '    return x + y == z || x + z == y ||
    y + z == x;', "    let sum = x + y + z;\n    if sum % 3 == 0 {\n        sum ==\
    \ x || sum == y || sum == z\n    } else {\n        false\n    }", "  // your code\
    \ here\n  if x == 0 || y == 0 || z == 0 {\n    false\n  } else {\n    match (x\
    \ + y, x + z, y + z) {\n      (x, _, _) if x % 1 == 0 => true,\n      (_, x, _)\
    \ if x % 1 == 0 => true,\n      (_, _, x) if x % 1 == 0 => true,\n      _ => false,\n\
    \    }\n  }", '    x == y + z || y == x + z || z == x + y', '    x + y == z ||
    x + z == y || y + z == x', '    x.is_integer() && y.is_integer() && z.is_integer()
    && (x + y == z || x + z == y || y + z == x)', '    x == y + z || y == x + z ||
    z == x + y', "    if x + y == z || x + z == y || y + z == x {\n        return\
    \ true;\n    } else {\n        return false;\n    }", '    (x + y == z || x +
    z == y || y + z == x) && (x.is_integer() && y.is_integer() && z.is_integer())',
  "    // TODO\n    true", "  let sum: isize = x + y + z;\n  if sum % 3 == 0 {\n \
    \   true\n  } else {\n    false\n  }", '    (x == y + z) || (y == x + z) || (z
    == x + y)', "    let arr = [x, y, z];\n    let mut max = 0;\n    let mut sum =\
    \ 0;\n    for i in 0..3 {\n        if arr[i] > max {\n            max = arr[i];\n\
    \        }\n        sum += arr[i];\n    }\n    if sum - max == max {\n       \
    \ return true;\n    }\n    false", "    if x == y + z || y == x + z || z == x\
    \ + y {\n        true\n    } else {\n        false\n    }", "  let mut arr = [x,\
    \ y, z];\n  arr.sort();\n  (arr[0] + arr[1]) == arr[2]", "    let sum: isize =\
    \ x + y + z;\n    sum % 3 == 0", "    let x_y_sum = x + y;\n    let x_z_sum =\
    \ x + z;\n    let y_z_sum = y + z;\n    (x_y_sum == z || x_z_sum == y || y_z_sum\
    \ == x) && (x.is_integer() && y.is_integer() && z.is_integer())", "    if x ==\
    \ y + z || y == x + z || z == x + y {\n        true\n    } else {\n        false\n\
    \    }", '    x == y + z || y == x + z || z == x + y', '  x + y == z || x + z
    == y || y + z == x', "    if x + y == z || x + z == y || y + z == x {\n      \
    \  true\n    } else {\n        false\n    }", "    if x == y + z || y == x + z\
    \ || z == x + y {\n        true\n    } else {\n        false\n    }", '    x ==
    y + z || y == x + z || z == x + y', '    x + y == z || x + z == y || y + z ==
    x', "    let some_fn = |x: isize, y: isize, z: isize|\n        if x == y+z ||\
    \ y == x+z || z == x+y {\n            true\n        } else {\n            false\n\
    \        };\n    some_fn(x, y, z)", '    x == y + z || y == x + z || z == x +
    y', "    if x + y == z || x + z == y || y + z == x {\n        true\n    } else\
    \ {\n        false\n    }", "    if x + y == z || x + z == y || y + z == x {\n\
    \        return true;\n    }\n    false", "  if x + y == z {\n    return true;\n\
    \  }\n  if x + z == y {\n    return true;\n  }\n  if y + z == x {\n    return\
    \ true;\n  }\n  return false;", "    if x + y == z || x + z == y || y + z == x\
    \ {\n        true\n    } else {\n        false\n    }", '    x == y + z || y ==
    x + z || z == x + y', "    if x == 0 || y == 0 || z == 0 {\n        return false;\n\
    \    }\n    let sum = x + y + z;\n    if x == sum || y == sum || z == sum {\n\
    \        return true;\n    }\n    return false;", "    if x.is_integer() && y.is_integer()\
    \ && z.is_integer() {\n        if x + y == z || x + z == y || y + z == x {\n \
    \           return true;\n        }\n    }\n    false", '    x + y == z || x +
    z == y || y + z == x', "    if x == y + z || y == x + z || z == x + y {\n    \
    \    return true;\n    }\n    false", '    x == y + z || y == x + z || z == x
    + y', "    let a = x + y;\n    let b = x + z;\n    let c = y + z;\n    if a ==\
    \ z {\n        true\n    } else if b == y {\n        true\n    } else if c ==\
    \ x {\n        true\n    } else {\n        false\n    }", '    (x + y == z) ||
    (x + z == y) || (y + z == x)', "    if x == y + z || y == x + z || z == x + y\
    \ {\n        true\n    } else {\n        false\n    }", '    (x % 1 == 0) && (y
    % 1 == 0) && (z % 1 == 0) && (x + y == z || x + z == y || y + z == x)', "    let\
    \ sum = x + y + z;\n    let xyz = vec![x, y, z];\n    if xyz.contains(&sum) {\n\
    \        return true;\n    }\n    return false;", '    x + y == z || x + z ==
    y || y + z == x', "    if x + y == z || x + z == y || y + z == x {\n        return\
    \ true;\n    } else {\n        return false;\n    }", '    (x + y == z) || (x
    + z == y) || (y + z == x)', "    if x + y == z {\n        return true;\n    }\
    \ else if x + z == y {\n        return true;\n    } else if y + z == x {\n   \
    \     return true;\n    } else {\n        return false;\n    }", '    vec![x,
    y, z].iter().combinations(2).any(|pair| pair.iter().sum::<isize>() == *pair.iter().max().unwrap())',
  '    (x + y == z) || (x + z == y) || (y + z == x)', "    let sum = x + y + z;\n\
    \    match (x.is_integer(), y.is_integer(), z.is_integer()) {\n        (true,\
    \ true, true) => {\n            if sum % 3 == 0 {\n                true\n    \
    \        } else {\n                false\n            }\n        }\n        _\
    \ => false,\n    }", "    let sum = x + y + z;\n    if sum % 3 == 0 {\n      \
    \  return true;\n    }\n    false", "    // TODO\n    false", '    x + y == z
    || x + z == y || y + z == x', '    (x + y == z) || (x + z == y) || (y + z == x)',
  "    //    (x + y == z) || (x + z == y) || (y + z == x)\n    [x, y, z].iter().combinations(2).map(|comb|\
    \ comb.iter().sum::<isize>()).any(|sum| sum == *[x, y, z].iter().max().unwrap())",
  '  unimplemented!()', "    let sum = x + y + z;\n    let arr = [x, y, z];\n    let\
    \ mut c = 0;\n    let mut i = 0;\n    while i < 3 {\n        if arr[i] == sum\
    \ / 2 {\n            c += 1;\n        }\n        i += 1;\n    }\n    if c == 1\
    \ {\n        return true;\n    }\n    false", '    x + y == z || x + z == y ||
    y + z == x', "    let mut sum = x + y + z;\n    if sum % 3 == 0 && sum != 0 {\n\
    \        true\n    } else {\n        false\n    }", "    let sum = x + y + z;\n\
    \    return sum % 3 == 0;", "    fn sum(n1: isize, n2: isize) -> isize {\n   \
    \     n1 + n2\n    }\n    sum(x, y) == z || sum(x, z) == y || sum(y, z) == x",
  "    if x + y == z {\n        return true;\n    } else if x + z == y {\n       \
    \ return true;\n    } else if y + z == x {\n        return true;\n    } else {\n\
    \        return false;\n    }", "    match x {\n        x if x + y == z => true,\n\
    \        x if x + z == y => true,\n        _ => false,\n    }", '    (x == y +
    z) || (y == x + z) || (z == x + y)', "    match (x, y, z) {\n        (x, y, z)\
    \ if x == y + z || y == x + z || z == x + y => true,\n        _ => false,\n  \
    \  }", "    //if x.is_integer() && y.is_integer() && z.is_integer() && (x + y\
    \ == z || x + z == y || y + z == x) {\n    //    true\n    //} else {\n    //\
    \    false\n    //}\n    // or\n    x.is_integer() && y.is_integer() && z.is_integer()\
    \ && (x + y == z || x + z == y || y + z == x)", '    x == y + z || y == x + z
    || z == x + y', "    if x == y + z || y == x + z || z == x + y {\n        return\
    \ true;\n    }\n    false", "    return if x + y == z || x + z == y || y + z ==\
    \ x {\n        true\n    } else {\n        false\n    };", '    x == y + z ||
    y == x + z || z == x + y', "    if x == y + z || y == x + z || z == x + y {\n\
    \        return true;\n    }\n    false", "    // exercise\n    if x + y == z\
    \ {\n        return true;\n    }\n    if x + z == y {\n        return true;\n\
    \    }\n    if y + z == x {\n        return true;\n    }\n    false", "    //\
    \ TODO: Implement solution\n    let eq = |a: isize, b: isize, c: isize| -> bool\
    \ {\n        match (a, b, c) {\n            (a, b, c) if a == b + c || b == a\
    \ + c || c == a + b => true,\n            _ => false,\n        }\n    };\n   \
    \ eq(x, y, z)", "    if (x + y == z) || (x + z == y) || (y + z == x) {\n     \
    \   return true;\n    } else {\n        return false;\n    }", '    x == y + z
    || y == x + z || z == x + y', "    if (x + y == z) || (x + z == y) || (y + z ==\
    \ x) {\n        true\n    } else {\n        false\n    }", "  if (x + y == z ||\
    \ x + z == y || y + z == x) && x % 1 == 0 && y % 1 == 0 && z % 1 == 0 {\n    true\n\
    \  } else {\n    false\n  }", "    // Write code here\n    if (x + y == z) ||\
    \ (x + z == y) || (y + z == x) {\n        true\n    } else {\n        false\n\
    \    }", "    if x + y == z {\n        return true;\n    }\n    if x + z == y\
    \ {\n        return true;\n    }\n    if y + z == x {\n        return true;\n\
    \    }\n    false", "    if (x % 1 == 0 && y % 1 == 0 && z % 1 == 0) {\n     \
    \   if (x + y == z || x + z == y || y + z == x) {\n            return true;\n\
    \        }\n    }\n    return false;", "    if x + y == z || x + z == y || y +\
    \ z == x {\n        true\n    } else {\n        false\n    }", '    x + y == z
    || x + z == y || y + z == x', "    if x == y + z || y == x + z || z == x + y {\n\
    \        true\n    } else {\n        false\n    }", "    match (x, y, z) {\n \
    \       (m, n, p) if m == n + p || n == m + p || p == m + n => true,\n       \
    \ _ => false,\n    }", "    // if x == 0 || y == 0 || z == 0 {\n    //     return\
    \ false;\n    // }\n    // else {\n    //     if x + y == z || x + z == y || y\
    \ + z == x {\n    //         return true;\n    //     }\n    //     else {\n \
    \   //         return false;\n    //     }\n    // }\n    return x != 0 && y !=\
    \ 0 && z != 0 && (x + y == z || x + z == y || y + z == x);", "    let sum = x\
    \ + y + z;\n    if sum % 3 == 0 {\n        return true;\n    }\n    false", '    (x
    + y == z || x + z == y || y + z == x) && x.is_integer() && y.is_integer() && z.is_integer()',
  "    let a = x + y;\n    let b = x + z;\n    let c = y + z;\n    if x == a && y\
    \ == b && z == c {\n        return true;\n    }\n    return false;", '    x +
    y == z || x + z == y || y + z == x', '    (x == y + z) || (y == x + z) || (z ==
    x + y)', "    let sum = x + y + z;\n    if x == sum / 3 || y == sum / 3 || z ==\
    \ sum / 3 {\n        return true;\n    }\n    false", '    x + y == z || x + z
    == y || y + z == x', "    if x == y + z || y == x + z || z == x + y {\n      \
    \  true\n    } else {\n        false\n    }", "    if x + y == z {\n        return\
    \ true;\n    }\n    if x + z == y {\n        return true;\n    }\n    if y + z\
    \ == x {\n        return true;\n    }\n    false", "    if (x + y == z) | (x +\
    \ z == y) | (y + z == x) {\n        return true;\n    }\n    false", "    if (x\
    \ != 0 && x % 1 == 0) && (y != 0 && y % 1 == 0) && (z != 0 && z % 1 == 0) {\n\
    \        if x + y == z || x + z == y || y + z == x {\n            return true;\n\
    \        }\n    }\n    false", "    fn eq(x: isize, y: isize, z: isize) -> bool\
    \ {\n        let sum: isize = x + y;\n        sum == z\n    }\n    eq(x, y, z)\
    \ || eq(x, z, y) || eq(y, z, x)", '    x.is_integer() && y.is_integer() && z.is_integer()
    && (x == y + z || y == x + z || z == x + y)', "    if x + y == z {\n        return\
    \ true;\n    } else if x + z == y {\n        return true;\n    } else if y + z\
    \ == x {\n        return true;\n    } else {\n        return false;\n    }", " \
    \   if x == y + z || y == x + z || z == x + y {\n        return true;\n    } else\
    \ {\n        return false;\n    }", "    if x.is_integer() == false || y.is_integer()\
    \ == false || z.is_integer() == false {\n        return false;\n    }\n    if\
    \ x == y + z || y == x + z || z == x + y {\n        return true;\n    }\n    false",
  "    if (x + y == z || x + z == y || y + z == x) && (x.is_integer() && y.is_integer()\
    \ && z.is_integer()) {\n        true\n    } else {\n        false\n    }", '    x
    == y + z || y == x + z || z == x + y', "    if x == y + z || x + y == z || x +\
    \ z == y {\n        return true;\n    }\n    return false;", "    fn any_eq(x:\
    \ isize, y: isize, z: isize) -> bool {\n        x == y || x == z || y == z\n \
    \   }\n    any_eq(x, y, z) && x == x as i64 as isize && y == y as i64 as isize\
    \ && z == z as i64 as isize", "    if x + y == z || x + z == y || y + z == x {\n\
    \        true\n    } else {\n        false\n    }", '    (x == y + z) || (y ==
    x + z) || (z == x + y)', '    x == y + z || y == x + z || z == x + y', "    match\
    \ (x, y, z) {\n        (xx, yy, zz) if xx + yy == zz || xx + zz == yy || yy +\
    \ zz == xx => true,\n        _ => false,\n    }", "    if x + y == z || x + z\
    \ == y || y + z == x {\n        true\n    } else {\n        false\n    }", " \
    \   //((x + y) == z) || ((x + z) == y) || ((y + z) == x)\n    ((x.is_integer())\
    \ && (y.is_integer()) && (z.is_integer())) && (((x + y) == z) || ((x + z) == y)\
    \ || ((y + z) == x))", '    x + y == z || x + z == y || y + z == x', "    let\
    \ x = x as usize;\n    let y = y as usize;\n    let z = z as usize;\n    let sum\
    \ = x + y + z;\n    if sum % 3 == 0 {\n        true\n    } else {\n        false\n\
    \    }", "    if (x + y == z) || (x + z == y) || (y + z == x) {\n        true\n\
    \    } else {\n        false\n    }", '    (x+y==z || x+z==y || y+z==x) && x.is_integer()
    && y.is_integer() && z.is_integer()', '    x == y + z || y == x + z || z == x
    + y', '    x + y == z || x + z == y || y + z == x', "    let a = [x, y, z];\n\
    \    let mut i = 0;\n    while i < a.len() {\n        let mut j = 0;\n       \
    \ while j < a.len() {\n            let mut k = 0;\n            while k < a.len()\
    \ {\n                if i != j && i != k && j != k {\n                    if a[i]\
    \ == a[j] + a[k] {\n                        return true;\n                   \
    \ }\n                }\n                k += 1;\n            }\n            j\
    \ += 1;\n        }\n        i += 1;\n    }\n    false", "    let s = x + y + z;\n\
    \    if (x == s - y - z) || (y == s - x - z) || (z == s - x - y) {\n        true\n\
    \    } else {\n        false\n    }", "    let mut v = vec![x, y, z];\n    v.sort();\n\
    \    let is_int = |x: &isize| x.is_integer();\n    let sum = |x: &isize, y: &isize|\
    \ x + y;\n    if v.iter().all(is_int) {\n        return v[0] == sum(&v[1], &v[2])\
    \ || v[1] == sum(&v[0], &v[2]) || v[2] == sum(&v[0], &v[1]);\n    }\n    false",
  "    if x == y + z || y == x + z || z == x + y {\n        true\n    } else {\n \
    \       false\n    }", '    return (x+y==z || x+z==y || y+z==x) && x.is_integer()
    && y.is_integer() && z.is_integer();', "    if x.is_integer() && y.is_integer()\
    \ && z.is_integer() {\n        let sum: isize = x + y + z;\n        if sum ==\
    \ x || sum == y || sum == z {\n            return true;\n        }\n    }\n  \
    \  false", '    (x + y == z) || (x + z == y) || (y + z == x)', "    let mut res\
    \ = false;\n    if x == y + z || y == x + z || z == x + y {\n        res = true;\n\
    \    }\n    res", '    x == y + z || y == x + z || z == x + y', '    x.eq(&(y
    + z)) || y.eq(&(x + z)) || z.eq(&(x + y))', "    //! --- Examples\n    //! ```\n\
    \    //! any_int(1, 1, 2) == true\n    //! any_int(1, 2, 2) == false\n    //!\
    \ any_int(1, 2, 3) == false\n    //! any_int(1.0, 2.0, 3.0) == false\n    //!\
    \ ```\n    x == y + z || y == x + z || z == x + y", '    (x + y == z) || (x +
    z == y) || (y + z == x)', "    let sum_all = x + y + z;\n    if sum_all % 3 ==\
    \ 0 {\n        true\n    } else {\n        false\n    }", "    // ((x + y) ==\
    \ z || (x + z) == y || (y + z) == x) && (x % 1 == 0) && (y % 1 == 0) && (z % 1\
    \ == 0)\n    (x + y == z) || (x + z == y) || (y + z == x)", '    x+y == z || x+z
    == y || y+z == x', "    // assume x is always the largest number, and z is the\
    \ smallest\n    return (x + y == z) || (x + z == y) || (y + z == x);", "    if\
    \ x == y + z || y == x + z || z == x + y {\n        true\n    } else {\n     \
    \   false\n    }", "    // if x == y + z || y == x + z || z == x + y {\n    //\
    \     true\n    // } else {\n    //     false\n    // }\n    x == y + z || y ==\
    \ x + z || z == x + y", "    if x != 0 && y != 0 && z != 0 {\n        (x + y ==\
    \ z) || (x + z == y) || (y + z == x)\n    } else {\n        false\n    }", " \
    \   if x + y == z || x + z == y || y + z == x {\n        true\n    } else {\n\
    \        false\n    }", "    if x == y + z || x + y == z || x + z == y {\n   \
    \     true\n    } else {\n        false\n    }", "    if (x == y + z) || (y ==\
    \ x + z) || (z == x + y) {\n        return true;\n    }\n    return false;", " \
    \   if x == y + z || y == x + z || z == x + y {\n        true\n    } else {\n\
    \        false\n    }", '    (x == y + z) || (y == x + z) || (z == x + y)', '    (x
    + y == z) || (x + z == y) || (y + z == x)', "    if x + y == z || x + z == y ||\
    \ y + z == x {\n        true\n    } else {\n        false\n    }", '    (x ==
    y + z) || (y == x + z) || (z == x + y)', '    x == y + z || y == x + z || z ==
    x + y', "    if x + y == z {\n        return true;\n    }\n    if x + z == y {\n\
    \        return true;\n    }\n    if y + z == x {\n        return true;\n    }\n\
    \    return false;", "    let mut res = false;\n    if x == y + z {\n        res\
    \ = true;\n    } else if y == x + z {\n        res = true;\n    } else if z ==\
    \ x + y {\n        res = true;\n    }\n    res", "    let sum = x + y + z;\n \
    \   let mut new_vec = vec![x, y, z];\n    new_vec.sort();\n    new_vec[0] + new_vec[1]\
    \ == new_vec[2] && (x == sum - y - z || y == sum - x - z || z == sum - x - y)",
  "    if (x+y == z || x+z == y || y+z == x) && (x%1 == 0) && (y%1 == 0) && (z%1 ==\
    \ 0) {\n        true\n    } else {\n        false\n    }", "    if x == y + z\
    \ || y == x + z || z == x + y {\n        true\n    } else {\n        false\n \
    \   }", "    let mut sum = x + y + z;\n    if sum % 3 == 0 {\n        sum /= 3;\n\
    \        if x == sum && y == sum && z == sum {\n            return false;\n  \
    \      }\n        return true;\n    }\n    false", '    x == y + z || y == x +
    z || z == x + y', "    if x == y + z || x + y == z || x + z == y {\n        true\n\
    \    } else {\n        false\n    }", "    let sum = x + y + z;\n    if x == 0\
    \ || y == 0 || z == 0 {\n        false\n    } else if sum % 3 == 0 {\n       \
    \ true\n    } else {\n        false\n    }", "    let vec = vec![x, y, z];\n \
    \   let mut sum = 0;\n    let mut final = false;\n    for i in vec {\n       \
    \ if i % 1 == 0 {\n            sum += 1;\n        }\n    }\n    if sum == 3 {\n\
    \        let mut vec2 = vec.clone();\n        vec2.sort();\n        let x = vec2[0];\n\
    \        let y = vec2[1];\n        let z = vec2[2];\n        if (x + y) == z ||\
    \ (x + z) == y || (y + z) == x {\n            final = true;\n        }\n    }\n\
    \    final", "    let mut result = false;\n    if x + y == z || x + z == y ||\
    \ y + z == x {\n        result = true;\n    }\n    result", "    let x = if x\
    \ % 2 == 0 { x } else { 0 };\n    let y = if y % 2 == 0 { y } else { 0 };\n  \
    \  let z = if z % 2 == 0 { z } else { 0 };\n    x + y == z || x + z == y || y\
    \ + z == x"]
stop_tokens:
- "\n}"
