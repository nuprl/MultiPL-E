name: HumanEval_130_tri
language: rs
prompt: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
  \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
  \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\nfn tri(n: isize)\
  \ -> Vec<isize> {\n"
tests: "}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1,\
  \ 3, 2.0, 8.0]);\n    assert_eq!(candidate(4), vec![1, 3, 2.0, 8.0, 3.0]);\n   \
  \ assert_eq!(candidate(5), vec![1, 3, 2.0, 8.0, 3.0, 15.0]);\n    assert_eq!(candidate(6),\
  \ vec![1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]);\n    assert_eq!(candidate(7), vec![1, 3,\
  \ 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]);\n    assert_eq!(candidate(8), vec![1, 3, 2.0,\
  \ 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]);\n    assert_eq!(candidate(9), vec![1, 3, 2.0,\
  \ 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]);\n    assert_eq!(candidate(20), vec![1,\
  \ 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0,\
  \ 9.0, 99.0, 10.0, 120.0, 11.0]);\n    assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1),\
  \ vec![1, 3]);\n}\n"
completions: ["    let mut arr = vec![1,1,1];\n    while arr.len() < n as usize {\n\
    \        arr.push(arr[arr.len()-1] + arr[arr.len()-2] + arr[arr.len()-3]);\n \
    \   }\n    arr", "    match n {\n        0 => vec![0],\n        1 => vec![0, 1],\n\
    \        2 => vec![0, 1, 1],\n        _ => {\n            let mut seq = tri(n\
    \ - 1);\n            seq.push(seq[n as usize - 1] + seq[n as usize - 2] + seq[n\
    \ as usize - 3]);\n            seq\n        }\n    }", "    match n {\n      \
    \  0 => vec![],\n        _ => (1..=n).scan(\n            (0, 0, 1),\n        \
    \    |acc, _| {\n                *acc = (acc.1, acc.2, acc.0 + acc.1 + acc.2);\n\
    \                Some(acc.0)\n            },\n        ).collect(),\n    }", " \
    \   let mut idx = 0;\n    let mut cur = vec![0, 0, 1];\n    loop {\n        let\
    \ next = cur[idx] + cur[idx + 1] + cur[idx + 2];\n        cur.push(next);\n  \
    \      idx += 1;\n        if cur.len() == n as usize {\n            break;\n \
    \       }\n    }\n    cur", "    let mut vec = vec![1,1,1];\n    for i in 3..n\
    \ {\n        vec.push(vec[i-1] + vec[i-2] + vec[i-3]);\n    }\n    vec", "   \
    \ let mut tri = vec![0, 0, 1];\n    for i in 3..n {\n        tri.push(tri[i -\
    \ 1] + tri[i - 2] + tri[i - 3]);\n    }\n    tri", "    let mut tri: Vec<isize>\
    \ = vec![1; n as usize];\n    for i in 2..n {\n        tri[i as usize] = tri[(i\
    \ - 1) as usize] + tri[(i - 2) as usize] + tri[(i - 3) as usize];\n    }\n   \
    \ tri", "    let mut res = vec![0, 1, 1];\n    let mut i = 3;\n    while i <=\
    \ n {\n        res.push(res[i - 1] + res[i - 2] + res[i - 3]);\n        i += 1;\n\
    \    }\n    res", "    let mut memo = vec![0,1,1];\n    for i in 3..n {\n    \
    \    memo.push(memo[i-1] + memo[i-2] + memo[i-3]);\n    }\n    memo", "    if\
    \ n < 3 {\n        let mut v = Vec::new();\n        for i in 0..n {\n        \
    \    v.push(1);\n        }\n        return v;\n    }\n\n    let mut fibs = tri(n\
    \ - 1);\n    fibs.push(fibs[fibs.len() - 3] + fibs[fibs.len() - 2] + fibs[fibs.len()\
    \ - 1]);\n    fibs", "    let mut seq = vec![0, 1, 1];\n    for i in 3..(n+1)\
    \ {\n        seq.push(seq[i as usize - 1] + seq[i as usize - 2] + seq[i as usize\
    \ - 3]);\n    }\n    seq", "    let mut n1 = 0;\n    let mut n2 = 0;\n    let\
    \ mut n3 = 1;\n    let mut result = vec![0, 0, 1];\n    for _ in 0..n {\n    \
    \    let n4 = n1 + n2 + n3;\n        result.push(n4);\n        n1 = n2;\n    \
    \    n2 = n3;\n        n3 = n4;\n    }\n    result", "    match n {\n        0\
    \ => vec![0],\n        1 => vec![0, 1],\n        2 => vec![0, 1, 1],\n       \
    \ n => {\n            let mut res = tri(n - 1);\n            res.push(res[res.len()\
    \ - 1] + res[res.len() - 2] + res[res.len() - 3]);\n            res\n        }\n\
    \    }", "    if n < 3 {\n        vec![1; n as usize]\n    } else {\n        let\
    \ mut v = vec![1, 1, 1];\n        for _ in 0..n - 3 {\n            v.push(v[v.len()\
    \ - 3] + v[v.len() - 2] + v[v.len() - 1]);\n        }\n        v\n    }", "  \
    \  match n {\n        1 => vec![0],\n        2 => vec![0, 1],\n        3 => vec![0,\
    \ 1, 1],\n        _ => {\n            let mut tri = tri(n - 1);\n            tri.push(tri[tri.len()\
    \ - 1] + tri[tri.len() - 2] + tri[tri.len() - 3]);\n            tri\n        }\n\
    \    }", "    let mut memo = vec![0; n as usize];\n    for i in 1..n {\n     \
    \   match i {\n            1 => memo[i as usize] = 1,\n            2 => memo[i\
    \ as usize] = 1,\n            _ => memo[i as usize] = memo[(i - 1) as usize] +\
    \ memo[(i - 2) as usize] + memo[(i - 3) as usize],\n        }\n    }\n    memo",
  "    let mut acc = vec![0; n as usize];\n    if n >= 1 {\n        acc[0] = 1;\n\
    \    }\n    if n >= 2 {\n        acc[1] = 1;\n    }\n    if n >= 3 {\n       \
    \ acc[2] = 2;\n    }\n    for i in 3..acc.len() {\n        acc[i] = acc[i - 1]\
    \ + acc[i - 2] + acc[i - 3];\n    }\n    acc", "    if n == 0 {\n        vec![]\n\
    \    } else if n == 1 {\n        vec![1]\n    } else if n == 2 {\n        vec![1,\
    \ 1]\n    } else {\n        let mut v = tri(n - 1);\n        v.push(v[n - 3] +\
    \ v[n - 2] + v[n - 1]);\n        v\n    }", "    let mut tri = vec![0, 0, 1];\n\
    \    while tri.len() < n as usize {\n        tri.push(tri[tri.len() - 3] + tri[tri.len()\
    \ - 2] + tri[tri.len() - 1]);\n    }\n    tri.truncate(n as usize);\n    tri",
  "    let mut v = vec![0, 1, 1];\n    while v.len() < n as usize {\n        v.push(v[v.len()\
    \ - 3] + v[v.len() - 2] + v[v.len() - 1]);\n    }\n    v", "    let mut f = vec![0,\
    \ 0, 1];\n    for i in 3..n+1 {\n        f.push(f[i as usize - 1] + f[i as usize\
    \ - 2] + f[i as usize - 3]);\n    }\n    f", "    let mut tri = vec![1, 1, 2];\n\
    \    while tri.len() < n as usize {\n        tri.push(tri[tri.len() - 1] + tri[tri.len()\
    \ - 2] + tri[tri.len() - 3]);\n    }\n    tri", "    if n <= 3 {\n        vec![1;\
    \ n as usize]\n    } else {\n        let mut vec = vec![1, 1, 1];\n        for\
    \ _ in 3..n {\n            vec.push(vec[vec.len() - 3] + vec[vec.len() - 2] +\
    \ vec[vec.len() - 1]);\n        }\n        vec\n    }", "    let mut a: Vec<isize>\
    \ = vec![0, 1, 1];\n    for i in 0..(n - 3) {\n        a.push(a[i] + a[i + 1]\
    \ + a[i + 2]);\n    }\n    a", "    (0..n)\n        .scan(\n            (0, 1,\
    \ 1),\n            |(a, b, c), _| {\n                let t = *a + *b + *c;\n \
    \               *a = *b;\n                *b = *c;\n                *c = t;\n\
    \                Some(t)\n            },\n        )\n        .collect()", "  \
    \  if n < 2 {\n        vec![0; n as usize]\n    } else if n == 2 {\n        vec![0,\
    \ 1]\n    } else {\n        let mut vec = vec![0, 1, 1];\n        for _ in 3..n\
    \ {\n            vec.push(vec[vec.len() - 3] + vec[vec.len() - 2] + vec[vec.len()\
    \ - 1]);\n        }\n        vec\n    }", "    let mut v = vec![1, 1, 2];\n  \
    \  let mut i = 3;\n    while i <= n {\n        v.push(v[i - 1] + v[i - 2] + v[i\
    \ - 3]);\n        i += 1;\n    }\n    v", "    let mut v = vec![0; (n + 1) as\
    \ usize];\n    v[0] = 0;\n    v[1] = 0;\n    v[2] = 1;\n    for i in 3..(n + 1)\
    \ {\n        v[i as usize] = v[(i - 1) as usize] + v[(i - 2) as usize] + v[(i\
    \ - 3) as usize];\n    }\n    v", "    let mut arr = vec![0, 1, 1];\n    for i\
    \ in 3..=n {\n        arr.push(arr[i as usize - 1] + arr[i as usize - 2] + arr[i\
    \ as usize - 3]);\n    }\n    arr", "    let mut v: Vec<isize> = vec![0, 1, 1];\n\
    \    for i in 3..n {\n        v.push(v[i - 1] + v[i - 2] + v[i - 3]);\n    }\n\
    \    v", "    let mut a = vec![0, 1, 1];\n    let mut i = 2;\n    while i < n\
    \ {\n        a.push(a[i] + a[i - 1] + a[i - 2]);\n        i += 1;\n    }\n   \
    \ a", "    if n == 0 {\n        return vec![];\n    }\n    if n == 1 {\n     \
    \   return vec![1];\n    }\n    if n == 2 {\n        return vec![1, 1];\n    }\n\
    \    let mut v = vec![0; n as usize];\n    v[0] = 1;\n    v[1] = 1;\n    v[2]\
    \ = 2;\n    for i in 3..v.len() {\n        v[i] = v[i - 1] + v[i - 2] + v[i -\
    \ 3];\n    }\n    v", "    let mut v: Vec<isize> = vec![0, 1, 1];\n    for i in\
    \ 3..(n + 1) {\n        v.push(v[i - 1] + v[i - 2] + v[i - 3]);\n    }\n    v",
  "    if n < 2 {\n        vec![0; n as usize]\n    } else if n == 2 {\n        vec![0,\
    \ 1]\n    } else {\n        let mut res = vec![0, 1, 1];\n        for i in 3..n\
    \ {\n            res.push(res[i as usize - 1] + res[i as usize - 2] + res[i as\
    \ usize - 3]);\n        }\n        res\n    }", "    match n {\n        0 => vec![0],\n\
    \        1 => vec![0, 1],\n        2 => vec![0, 1, 1],\n        _ => {\n     \
    \       let mut v = tri(n - 1);\n            v.push(v[n as usize - 3] + v[n as\
    \ usize - 2] + v[n as usize - 1]);\n            v\n        }\n    }", "    let\
    \ mut v: Vec<isize> = vec![0, 1, 1];\n    for i in 3..n {\n        v.push(v[i\
    \ - 1] + v[i - 2] + v[i - 3]);\n    }\n    v", "    let mut t = vec![0, 0, 1];\n\
    \    for _ in 3..n+1 {\n        let c = t[0] + t[1] + t[2];\n        t[0] = t[1];\n\
    \        t[1] = t[2];\n        t[2] = c;\n    }\n    t", "    let mut a = vec![0,\
    \ 1, 1];\n    for _ in 3..n {\n        let len = a.len();\n        a.push(a[len\
    \ - 1] + a[len - 2] + a[len - 3]);\n    }\n    a", "    if n == 0 { return vec![]\
    \ }\n    if n == 1 { return vec![1] }\n    if n == 2 { return vec![1, 1] }\n \
    \   let mut v = vec![1, 1, 1];\n    for _ in 3..n {\n        let x = v[0] + v[1]\
    \ + v[2];\n        v = vec![v[1], v[2], x];\n    }\n    v", "    let mut v = vec![1,\
    \ 1, 2];\n    for _ in 1..n {\n        let a = v[0];\n        let b = v[1];\n\
    \        let c = v[2];\n        v.push(a + b + c);\n        v.remove(0);\n   \
    \ }\n    v", "    if n < 3 {\n        return vec![0; n as usize];\n    }\n   \
    \ let mut result = vec![0, 1, 1];\n    for i in 3..n {\n        result.push(result[i\
    \ as usize - 3] + result[i as usize - 2] + result[i as usize - 1]);\n    }\n \
    \   result", "    let mut v = vec![1, 1, 2];\n    for i in 3..n {\n        v.push(v[i-1]\
    \ + v[i-2] + v[i-3]);\n    }\n    v", "    let mut v = vec![1,1,1];\n    for i\
    \ in 3..n {\n        v.push(v[i as usize - 1] + v[i as usize - 2] + v[i as usize\
    \ - 3]);\n    }\n    v", "    if n == 0 {\n        vec![]\n    } else if n ==\
    \ 1 {\n        vec![1]\n    } else if n == 2 {\n        vec![1, 1]\n    } else\
    \ {\n        let mut result = vec![1, 1, 1];\n        for i in 3..n {\n      \
    \      result.push(result[i-1] + result[i-2] + result[i-3]);\n        }\n    \
    \    result\n    }", "    let mut v = vec![0; (n + 1) as usize];\n    v[0] = 0;\n\
    \    v[1] = 1;\n    v[2] = 1;\n    for i in 3..(n + 1) {\n        v[i as usize]\
    \ = v[(i - 1) as usize] + v[(i - 2) as usize] + v[(i - 3) as usize];\n    }\n\
    \    v", "    match n {\n        0 => vec![],\n        1 => vec![0],\n       \
    \ 2 => vec![0, 1],\n        3 => vec![0, 1, 1],\n        _ => {\n            let\
    \ mut t = tri(n - 1);\n            t.push(t[t.len() - 1] + t[t.len() - 2] + t[t.len()\
    \ - 3]);\n            t\n        }\n    }", "    if n == 0 {\n        return vec![];\n\
    \    }\n    if n <= 3 {\n        return vec![1; n as usize];\n    }\n    let mut\
    \ res = vec![1, 1, 1];\n    for _ in 3..n {\n        let len = res.len();\n  \
    \      res.push(res[len - 1] + res[len - 2] + res[len - 3]);\n    }\n    res",
  "    if n == 0 {\n        return vec![];\n    } else if n == 1 {\n        return\
    \ vec![1];\n    } else if n == 2 {\n        return vec![1, 1];\n    } else if\
    \ n == 3 {\n        return vec![1, 1, 2];\n    } else {\n        let mut res =\
    \ vec![];\n        let mut x = 1;\n        let mut y = 1;\n        let mut z =\
    \ 2;\n        res.push(x);\n        res.push(y);\n        res.push(z);\n     \
    \   for _ in 3..n {\n            let tmp = x + y + z;\n            x = y;\n  \
    \          y = z;\n            z = tmp;\n            res.push(z);\n        }\n\
    \        return res;\n    }", "    let mut n = n as usize;\n    let mut tri =\
    \ vec![1; n];\n    for i in 3..n {\n        tri[i] = tri[i - 1] + tri[i - 2] +\
    \ tri[i - 3];\n    }\n    tri", "    if n < 1 {\n        panic!(\"N must be greater\
    \ than zero\");\n    }\n    let mut v: Vec<isize> = Vec::new();\n    v.push(0);\n\
    \    if n == 1 {\n        return v;\n    }\n    v.push(1);\n    if n == 2 {\n\
    \        return v;\n    }\n    v.push(1);\n    if n == 3 {\n        return v;\n\
    \    }\n    let mut i = 3;\n    while i < n {\n        v.push(v[i - 1] + v[i -\
    \ 2] + v[i - 3]);\n        i += 1;\n    }\n    v", "    let mut a = vec![0, 1,\
    \ 1];\n    while a.len() <= n as usize {\n        a.push(a[a.len() - 1] + a[a.len()\
    \ - 2] + a[a.len() - 3]);\n    }\n    a", "    let mut tri = vec![1, 1, 2];\n\
    \    for i in 3..n {\n        tri.push(tri[i - 1] + tri[i - 2] + tri[i - 3]);\n\
    \    }\n    tri", "    let mut result = vec![0; n as usize];\n    for i in 0..n\
    \ {\n        if i <= 1 {\n            result[i as usize] = i as isize;\n     \
    \   } else if i == 2 {\n            result[i as usize] = 1;\n        } else {\n\
    \            result[i as usize] = result[(i - 1) as usize] + result[(i - 2) as\
    \ usize] + result[(i - 3) as usize];\n        }\n    }\n    result", "    let\
    \ mut vec = vec![1,1,1];\n    for i in 3..n {\n        vec.push(vec[i as usize\
    \ -1] + vec[i as usize -2] + vec[i as usize -3]);\n    }\n    vec", "    let mut\
    \ v = vec![0; n as usize];\n    for i in 0..n {\n        if i == 0 {\n       \
    \     v[i as usize] = 0;\n        } else if i == 1 {\n            v[i as usize]\
    \ = 1;\n        } else if i == 2 {\n            v[i as usize] = 1;\n        }\
    \ else {\n            v[i as usize] = v[(i - 1) as usize] + v[(i - 2) as usize]\
    \ + v[(i - 3) as usize];\n        }\n    }\n    v", "    match n {\n        0\
    \ => vec![],\n        1 => vec![0],\n        2 => vec![0, 1],\n        3 => vec![0,\
    \ 1, 1],\n        _ => {\n            let mut sequence = tri(n - 1);\n       \
    \     sequence.push(sequence[n as usize - 2] + sequence[n as usize - 3] + sequence[n\
    \ as usize - 4]);\n            sequence\n        }\n    }", "    let mut res =\
    \ vec![0, 1, 1];\n    for i in 2..n {\n        res.push(res[i - 2] + res[i - 1]\
    \ + res[i]);\n    }\n    res", "    let mut seq = vec![0; n as usize];\n    if\
    \ n == 0 {\n        return seq;\n    }\n    seq[0] = 1;\n    if n == 1 {\n   \
    \     return seq;\n    }\n    seq[1] = 1;\n    if n == 2 {\n        return seq;\n\
    \    }\n    seq[2] = 2;\n    if n == 3 {\n        return seq;\n    }\n    for\
    \ i in 3..n {\n        seq[i as usize] = seq[(i - 1) as usize] + seq[(i - 2) as\
    \ usize] + seq[(i - 3) as usize];\n    }\n    seq", "    let mut vec = vec![1,\
    \ 1, 1];\n    for i in 3..n {\n        vec.push(vec[i - 1] + vec[i - 2] + vec[i\
    \ - 3]);\n    }\n    vec", "    if n <= 0 {\n        return vec![];\n    }\n \
    \   if n == 1 {\n        return vec![1];\n    }\n    if n == 2 {\n        return\
    \ vec![1, 1];\n    }\n    if n == 3 {\n        return vec![1, 1, 2];\n    }\n\
    \    let mut v = vec![1, 1, 2];\n    for _ in 3..n {\n        let t = v[0] + v[1]\
    \ + v[2];\n        v.push(t);\n        v.remove(0);\n    }\n    v", "    match\
    \ n {\n        0 => vec![],\n        1 => vec![0],\n        2 => vec![0, 0],\n\
    \        3 => vec![0, 0, 1],\n        _ => {\n            let mut seq = tri(n\
    \ - 1);\n            seq.push(seq[n as usize - 3] + seq[n as usize - 2] + seq[n\
    \ as usize - 1]);\n            seq\n        }\n    }", "\tlet mut v: Vec<isize>\
    \ = vec![0, 1, 1];\n\tif n < 3 { v.pop(); return v; }\n\tfor i in 3..n+1 {\n\t\
    \tv.push(v[i as usize - 3] + v[i as usize - 2] + v[i as usize - 1]);\n\t}\n\tv",
  "    let mut arr = vec![0, 1, 1];\n    for i in 3..n+1 {\n        arr.push(arr[i\
    \ as usize - 1] + arr[i as usize - 2] + arr[i as usize - 3]);\n    }\n    arr",
  "    let mut res = vec![1, 1, 2];\n    for i in 3..=n {\n        res.push(res[i\
    \ as usize - 1] + res[i as usize - 2] + res[i as usize - 3]);\n    }\n    res",
  "    let mut tri = vec![0; n as usize];\n    tri[0] = 0;\n    tri[1] = 1;\n    tri[2]\
    \ = 1;\n    for i in 3..n {\n        tri[i as usize] = tri[(i - 1) as usize] +\
    \ tri[(i - 2) as usize] + tri[(i - 3) as usize];\n    }\n    tri", "    if n ==\
    \ 0 {\n        vec![]\n    } else if n == 1 {\n        vec![1]\n    } else if\
    \ n == 2 {\n        vec![1, 1]\n    } else {\n        let mut nums = vec![1, 1,\
    \ 1];\n        for i in 3..n {\n            nums.push(nums[(i - 3) as usize] +\
    \ nums[(i - 2) as usize] + nums[(i - 1) as usize]);\n        }\n        nums\n\
    \    }", "    if n == 0 { return vec![] }\n    if n == 1 { return vec![1] }\n\
    \    if n == 2 { return vec![1, 1] }\n    let mut v = vec![1, 1, 1];\n    while\
    \ v.len() < n as usize {\n        v.push(v[v.len() - 1] + v[v.len() - 2] + v[v.len()\
    \ - 3]);\n    }\n    v", "    let mut ans = vec![0, 1, 1];\n    for i in 3..n\
    \ {\n        ans.push(ans[i - 1] + ans[i - 2] + ans[i - 3]);\n    }\n    ans",
  "    let mut a = vec![0, 0, 1];\n    for _ in 3..n {\n        a.push(a[a.len() -\
    \ 3] + a[a.len() - 2] + a[a.len() - 1]);\n    }\n    a", "    if n <= 0 {\n  \
    \      return vec![];\n    }\n    let mut v: Vec<isize> = vec![0; n as usize];\n\
    \    v[0] = 0;\n    if n >= 2 {\n        v[1] = 1;\n    }\n    if n >= 3 {\n \
    \       v[2] = 1;\n    }\n    for i in 3..n {\n        v[i as usize] = v[(i -\
    \ 1) as usize] + v[(i - 2) as usize] + v[(i - 3) as usize];\n    }\n    v", " \
    \   let mut vec = vec![0, 1, 1];\n    if n < 4 {\n        return vec[0..n as usize].to_vec();\n\
    \    }\n\n    while vec.len() < n as usize {\n        let new = vec[vec.len()\
    \ - 3] + vec[vec.len() - 2] + vec[vec.len() - 1];\n        vec.push(new);\n  \
    \  }\n\n    vec", "    let mut v = vec![0, 1, 1];\n    while v.len() < n as usize\
    \ {\n        v.push(v[v.len() - 3] + v[v.len() - 2] + v[v.len() - 1]);\n    }\n\
    \    v", "    if n < 0 {\n        return vec![];\n    }\n    if n == 0 {\n   \
    \     return vec![0];\n    }\n    if n == 1 {\n        return vec![0, 0];\n  \
    \  }\n    if n == 2 {\n        return vec![0, 0, 1];\n    }\n    if n == 3 {\n\
    \        return vec![0, 0, 1, 1];\n    }\n    if n == 4 {\n        return vec![0,\
    \ 0, 1, 1, 2];\n    }\n    if n == 5 {\n        return vec![0, 0, 1, 1, 2, 4];\n\
    \    }\n    let mut v = vec![0, 0, 1, 1, 2, 4];\n    while v.len() < (n as usize)\
    \ + 1 {\n        let l = v.len();\n        v.push(v[l - 1] + v[l - 2] + v[l -\
    \ 3]);\n    }\n    v", "    if n < 0 {\n        panic!(\"invalid value\")\n  \
    \  }\n    if n == 0 {\n        return vec![];\n    }\n    if n == 1 {\n      \
    \  return vec![0];\n    }\n    if n == 2 {\n        return vec![0, 1];\n    }\n\
    \    let mut v = vec![0, 1, 1];\n    for i in 3..n {\n        v.push(v[i - 1]\
    \ + v[i - 2] + v[i - 3]);\n    }\n    v", "    let mut v: Vec<isize> = vec![0,\
    \ 1, 1];\n    for i in 3..(n + 1) {\n        v.push(v[i - 1] + v[i - 2] + v[i\
    \ - 3]);\n    }\n    v", "    match n {\n        0 => vec![],\n        1 => vec![0],\n\
    \        2 => vec![0, 0],\n        3 => vec![0, 0, 1],\n        _ => {\n     \
    \       let mut res = tri(n - 1);\n            res.push(res[n as usize - 3] +\
    \ res[n as usize - 2] + res[n as usize - 1]);\n            res\n        }\n  \
    \  }", "    let mut fib = vec![1, 1, 2];\n    let mut i = 3;\n    while i < n\
    \ {\n        fib.push(fib[i - 1] + fib[i - 2] + fib[i - 3]);\n        i += 1;\n\
    \    }\n    fib", '    vec![0, 0, 1]', "    let mut rtn = vec![0, 1, 1];\n   \
    \ while rtn.len() < n as usize {\n        rtn.push(rtn[rtn.len() - 3] + rtn[rtn.len()\
    \ - 2] + rtn[rtn.len() - 1]);\n    }\n    rtn", "    let mut vec = vec![1; n as\
    \ usize];\n    for i in 2..vec.len() {\n        vec[i] = vec[i - 1] + vec[i -\
    \ 2] + vec[i - 3];\n    }\n    vec", "    let (mut f1, mut f2, mut f3) = (0, 1,\
    \ 1);\n    let mut result = vec![];\n    for _ in 0..n {\n        result.push(f1);\n\
    \        let tmp = f1 + f2 + f3;\n        f1 = f2;\n        f2 = f3;\n       \
    \ f3 = tmp;\n    }\n    result", "    match n {\n        0 => vec![],\n      \
    \  1 => vec![0],\n        2 => vec![0, 0],\n        3 => vec![0, 0, 1],\n    \
    \    _ => {\n            let mut result = tri(n - 1);\n            result.push(result[result.len()\
    \ - 3] + result[result.len() - 2] + result[result.len() - 1]);\n            result\n\
    \        }\n    }", "    let mut x = vec![1, 2, 4];\n    while x.len() < n as\
    \ usize {\n        x.push(x[x.len() - 3] + x[x.len() - 2] + x[x.len() - 1]);\n\
    \    }\n    x", "    let mut a: Vec<isize> = vec![0, 1, 1];\n    for _ in 3..n\
    \ {\n        let p = a.len() - 1;\n        a.push(a[p - 2] + a[p - 1] + a[p]);\n\
    \    }\n    a", "    let mut a = 0;\n    let mut b = 1;\n    let mut c = 1;\n\
    \    let mut t = vec![0,1,1];\n    for _ in 0..n {\n        a = b;\n        b\
    \ = c;\n        c = a + b + c;\n        t.push(c);\n    }\n    t", "    match\
    \ n {\n        1 => vec![1],\n        2 => vec![1, 1],\n        3 => vec![1, 1,\
    \ 2],\n        _ => {\n            let mut result = tri(n - 1);\n            result.push(result[n\
    \ as usize - 2] + result[n as usize - 3] + result[n as usize - 4]);\n        \
    \    result\n        }\n    }", "    let mut result = vec![0, 1, 1];\n    if n\
    \ < 4 {\n        return result[0..n as usize].to_vec();\n    }\n\n    for i in\
    \ 3..n {\n        result.push(result[i as usize - 1] + result[i as usize - 2]\
    \ + result[i as usize - 3]);\n    }\n    result", "    let mut a: isize = 0;\n\
    \    let mut b: isize = 1;\n    let mut c: isize = 1;\n    let mut d: isize =\
    \ 0;\n    let mut y: Vec<isize> = Vec::new();\n    if n == 0 {\n        y.push(a);\n\
    \    } else if n == 1 {\n        y.push(a);\n        y.push(b);\n    } else if\
    \ n == 2 {\n        y.push(a);\n        y.push(b);\n        y.push(c);\n    }\
    \ else {\n        y.push(a);\n        y.push(b);\n        y.push(c);\n       \
    \ for _i in 0..n-2 {\n            d = a + b + c;\n            y.push(d);\n   \
    \         a = b;\n            b = c;\n            c = d;\n        }\n    }\n \
    \   y", "    let mut a: Vec<isize> = vec![1, 1, 1];\n    for _ in 0..n - 3 {\n\
    \        a.push(a[a.len() - 1] + a[a.len() - 2] + a[a.len() - 3]);\n    }\n  \
    \  a", "    let mut t = vec![1, 1, 2];\n    for i in 3..n {\n        t.push(t[i\
    \ - 1] + t[i - 2] + t[i - 3]);\n    }\n    t", "    if n <= 0 {\n        Vec::new()\n\
    \    } else if n == 1 {\n        vec![1]\n    } else if n == 2 {\n        vec![1,\
    \ 1]\n    } else if n == 3 {\n        vec![1, 1, 2]\n    } else {\n        let\
    \ mut ret = tri(n - 1);\n        ret.push(ret[n as usize - 4] + ret[n as usize\
    \ - 3] + ret[n as usize - 2]);\n        ret\n    }", "    let mut res = vec![0,\
    \ 0, 1];\n    for i in 3..n {\n        res.push(res[i - 1] + res[i - 2] + res[i\
    \ - 3]);\n    }\n    res", "    if n == 0 {\n        vec![]\n    } else if n ==\
    \ 1 {\n        vec![1]\n    } else if n == 2 {\n        vec![1, 1]\n    } else\
    \ {\n        let mut v = vec![1, 1, 1];\n        for i in 3..n {\n           \
    \ v.push(v[i - 1] + v[i - 2] + v[i - 3]);\n        }\n        v\n    }", "   \
    \ let mut fib = [0, 1, 1];\n    (1..n).map(|_| {\n        let tmp = fib[0] + fib[1]\
    \ + fib[2];\n        fib[0] = fib[1];\n        fib[1] = fib[2];\n        fib[2]\
    \ = tmp;\n        tmp\n    }).collect()", "    if n <= 3 {\n        let mut ret\
    \ = Vec::new();\n        for _ in 0..n {\n            ret.push(1);\n        }\n\
    \        return ret;\n    }\n    let mut a = tri(n - 1);\n    a.push(a[a.len()\
    \ - 1] + a[a.len() - 2] + a[a.len() - 3]);\n    a", "    if n == 0 { return vec![0]\
    \ }\n    if n == 1 { return vec![0, 1] }\n    if n == 2 { return vec![0, 1, 1]\
    \ }\n    let mut v = vec![0, 1, 1];\n    for _ in 2..n {\n        let x = v[v.len()\
    \ - 1] + v[v.len() - 2] + v[v.len() - 3];\n        v.push(x);\n    }\n    v",
  "    let mut t = vec![0; n as usize];\n    t[0] = 0;\n    t[1] = 1;\n    t[2] =\
    \ 1;\n    for i in 3..n {\n        t[i as usize] = t[(i - 1) as usize] + t[(i\
    \ - 2) as usize] + t[(i - 3) as usize];\n    }\n    t", "    if n == 0 {\n   \
    \     vec![]\n    } else if n == 1 {\n        vec![1]\n    } else if n == 2 {\n\
    \        vec![1, 1]\n    } else {\n        let mut v = tri(n - 1);\n        v.push(v[v.len()\
    \ - 3] + v[v.len() - 2] + v[v.len() - 1]);\n        v\n    }", "    let mut v\
    \ = vec![0, 0, 1];\n    for i in 3..n {\n        v.push(v[i - 1] + v[i - 2] +\
    \ v[i - 3]);\n    }\n    v", "    match n {\n        0 => vec![0],\n        1\
    \ => vec![0, 0],\n        2 => vec![0, 0, 1],\n        _ => {\n            let\
    \ mut v = tri(n - 1);\n            v.push(v[v.len() - 1] + v[v.len() - 2] + v[v.len()\
    \ - 3]);\n            v\n        }\n    }", "    let mut v = vec![0, 1, 1];\n\
    \    while v.len() < n as usize {\n        v.push(v[v.len() - 3] + v[v.len() -\
    \ 2] + v[v.len() - 1]);\n    }\n    v", "    let mut s: Vec<isize> = vec![1, 1,\
    \ 1];\n    for _ in 3..n {\n        s.push(s[s.len() - 3] + s[s.len() - 2] + s[s.len()\
    \ - 1]);\n    }\n    s", "    let mut vec = vec![0, 1, 1];\n    if n <= 3 {\n\
    \        return vec[0..n as usize].to_vec();\n    }\n    let mut i = 3;\n    while\
    \ i < n {\n        vec.push(vec[i as usize - 1] + vec[i as usize - 2] + vec[i\
    \ as usize - 3]);\n        i += 1;\n    }\n    vec", "    (0..n)\n        .map(|n|\
    \ match n {\n            0 => 0,\n            1 => 1,\n            2 => 1,\n \
    \           n => tri(n - 1)[n - 1] + tri(n - 1)[n - 2] + tri(n - 1)[n - 3],\n\
    \        })\n        .collect()", "    if n < 3 {\n        vec![0, 1, 1]\n   \
    \ } else {\n        let mut vec = tri(n - 1);\n        vec.push(vec[n as usize\
    \ - 1] + vec[n as usize - 2] + vec[n as usize - 3]);\n        vec\n    }", " \
    \   let mut v = vec![1, 1, 2];\n    while v.len() < n as usize {\n        v.push(v[v.len()\
    \ - 3] + v[v.len() - 2] + v[v.len() - 1]);\n    }\n    v", "    let mut i = 0;\n\
    \    let mut v = vec![0, 1, 1];\n    while i < n {\n        v.push(v[i as usize]\
    \ + v[(i + 1) as usize] + v[(i + 2) as usize]);\n        i += 1;\n    }\n    v",
  "    let mut v: Vec<isize> = vec![0, 1, 1];\n    let mut i = 3;\n    while i <=\
    \ n {\n        v.push(v[i - 1] + v[i - 2] + v[i - 3]);\n        i += 1;\n    }\n\
    \    v", "    let mut v = vec![0, 1, 1];\n    for _ in 3..n {\n        let tmp\
    \ = v[v.len() - 1] + v[v.len() - 2] + v[v.len() - 3];\n        v.push(tmp);\n\
    \    }\n    v", "    let mut cache = vec![];\n    cache.push(0);\n    cache.push(1);\n\
    \    cache.push(1);\n    for i in 3..n {\n        cache.push(cache[i as usize\
    \ - 1] + cache[i as usize - 2] + cache[i as usize - 3]);\n    }\n    cache", "\t\
    if n <= 2 {\n\t\tvec![1; n as usize]\n\t} else {\n\t\tlet mut vec = vec![1, 1,\
    \ 1];\n\t\tfor _ in 3..n {\n\t\t\tvec.push(vec[vec.len() - 3] + vec[vec.len()\
    \ - 2] + vec[vec.len() - 1]);\n\t\t}\n\t\tvec\n\t}", "    let mut res = vec![1,\
    \ 1, 2];\n    if n < res.len() as isize {\n        return vec![res[n as usize\
    \ - 1]];\n    }\n    for i in res.len()..n as usize {\n        res.push(res[i\
    \ - 1] + res[i - 2] + res[i - 3]);\n    }\n    res", "    let mut tribonacci =\
    \ vec![0; n as usize];\n    for i in 0..n {\n        if i < 3 {\n            tribonacci[i\
    \ as usize] = 1;\n        } else {\n            tribonacci[i as usize] = tribonacci[(i\
    \ - 1) as usize] + tribonacci[(i - 2) as usize] + tribonacci[(i - 3) as usize];\n\
    \        }\n    }\n    tribonacci", "    match n {\n        0 => vec![],\n   \
    \     1 => vec![0],\n        2 => vec![0, 1],\n        _ => {\n            let\
    \ mut res = tri(n - 1);\n            res.push(res[res.len() - 3] + res[res.len()\
    \ - 2] + res[res.len() - 1]);\n            res\n        }\n    }", "    let mut\
    \ memo = vec![0; n as usize + 1];\n    for i in 0..n {\n        if i < 2 {\n \
    \           memo[i as usize] = 0;\n        } else if i == 2 {\n            memo[i\
    \ as usize] = 1;\n        } else {\n            memo[i as usize] = memo[(i - 1)\
    \ as usize] + memo[(i - 2) as usize] + memo[(i - 3) as usize];\n        }\n  \
    \  }\n    return memo;", "\tif n == 0 {\n\t\treturn vec![];\n\t}\n\tlet mut a:\
    \ Vec<isize> = vec![0; n as usize];\n\ta[0] = 0;\n\ta[1] = 1;\n\ta[2] = 1;\n\t\
    for i in 3..n {\n\t\ta[i as usize] = a[(i - 1) as usize] + a[(i - 2) as usize]\
    \ + a[(i - 3) as usize];\n\t}\n\ta", "    if n <= 2 {\n        vec![0; n as usize]\n\
    \    } else {\n        let mut v = vec![0, 1, 1];\n        while v.len() < n as\
    \ usize {\n            v.push(v[v.len() - 1] + v[v.len() - 2] + v[v.len() - 3]);\n\
    \        }\n        v\n    }", "    match n {\n        n if n <= 0 => vec![],\n\
    \        1 => vec![0],\n        2 => vec![0, 1],\n        _ => {\n           \
    \ let mut result = vec![0, 1, 1];\n            while result.len() < n as usize\
    \ {\n                let next = result[result.len() - 3] + result[result.len()\
    \ - 2] + result[result.len() - 1];\n                result.push(next);\n     \
    \       }\n            result\n        }\n    }", "    let mut out = vec![0, 1,\
    \ 1];\n    for _ in 3..n {\n        let a = out[out.len() - 3];\n        let b\
    \ = out[out.len() - 2];\n        let c = out[out.len() - 1];\n        out.push(a\
    \ + b + c);\n    }\n    out", "    match n {\n        1 => vec![1],\n        2\
    \ => vec![1, 1],\n        3 => vec![1, 1, 2],\n        _ => {\n            let\
    \ mut vec = tri(n - 1);\n            vec.push(vec[vec.len() - 1] + vec[vec.len()\
    \ - 2] + vec[vec.len() - 3]);\n            vec\n        }\n    }", "    let mut\
    \ vec = vec![0, 1, 1];\n    for i in 3..n {\n        vec.push(vec[i - 1] + vec[i\
    \ - 2] + vec[i - 3]);\n    }\n    vec", "    if n < 3 {\n        vec![0; n as\
    \ usize]\n    } else {\n        let mut ans = tri(n - 1);\n        ans.push(ans[(n\
    \ - 3) as usize] + ans[(n - 2) as usize] + ans[(n - 1) as usize]);\n        ans\n\
    \    }", "    let mut v: Vec<isize> = vec![0,1,1];\n    for _ in 3..n {\n    \
    \    v.push(v[v.len()-1] + v[v.len()-2] + v[v.len()-3]);\n    }\n    v", "   \
    \ if n <= 2 { return vec![1, 1, 2] }\n    let mut v = vec![1, 1, 2];\n    while\
    \ v.len() < n as usize {\n        v.push(v[v.len() - 1] + v[v.len() - 2] + v[v.len()\
    \ - 3]);\n    }\n    v", "    let mut t: Vec<isize> = vec![0, 1, 1];\n    for\
    \ i in 3..n {\n        t.push(t[i - 1] + t[i - 2] + t[i - 3]);\n    }\n    t",
  "    match n {\n        0 => vec![],\n        1 => vec![0],\n        2 => vec![0,\
    \ 1],\n        _ => {\n            let mut res = tri(n - 1);\n            res.push(res[res.len()\
    \ - 3] + res[res.len() - 2] + res[res.len() - 1]);\n            res\n        }\n\
    \    }", "    match n {\n        0 => vec![],\n        1 => vec![0],\n       \
    \ 2 => vec![0, 1],\n        _ => {\n            let mut v = tri(n - 1);\n    \
    \        v.push(v[n as usize - 3] + v[n as usize - 2] + v[n as usize - 1]);\n\
    \            v\n        }\n    }", "    let mut v: Vec<isize> = vec![0, 1, 1];\n\
    \    let mut i = 3;\n    while i <= n {\n        v.push(v[i - 1] + v[i - 2] +\
    \ v[i - 3]);\n        i += 1;\n    }\n    v", "    let mut a = vec![1,1,1];\n\
    \    while a.len() < n as usize {\n        a.push(a[a.len()-1] + a[a.len()-2]\
    \ + a[a.len()-3]);\n    }\n    a", "\tif n == 0 { return vec![]; }\n\tif n ==\
    \ 1 { return vec![0]; }\n\tif n == 2 { return vec![0,1]; }\n\tlet mut out = vec![0,1,1];\n\
    \tfor i in 3..n {\n\t\tout.push(out[i-1] + out[i-2] + out[i-3]);\n\t}\n\tout",
  "    let mut v = vec![0, 1, 1];\n    while v.len() < n as usize {\n        v.push(v[v.len()\
    \ - 3] + v[v.len() - 2] + v[v.len() - 1]);\n    }\n    v", "    let mut v = vec![1,\
    \ 1, 2];\n    if n <= 3 {\n        let mut x = vec![1; n as usize];\n        return\
    \ x;\n    }\n    for i in 3..n {\n        v.push(v[i as usize - 1] + v[i as usize\
    \ - 2] + v[i as usize - 3]);\n    }\n    v", "    let mut vec = vec![0, 1, 1];\n\
    \    for i in 3..(n+1) {\n        vec.push(vec[i as usize - 1] + vec[i as usize\
    \ - 2] + vec[i as usize - 3]);\n    }\n    vec", "    let mut v: Vec<isize> =\
    \ vec![0,1,1];\n    for i in 0..n {\n        v.push(v[i as usize] + v[(i+1) as\
    \ usize] + v[(i+2) as usize]);\n    }\n    v", "    if n <= 0 { return vec![];\
    \ }\n    let mut f = vec![0; n as usize];\n    f[0] = 0;\n    f[1] = 1;\n    f[2]\
    \ = 1;\n    for i in 3..n {\n        f[i as usize] = f[(i-1) as usize] + f[(i-2)\
    \ as usize] + f[(i-3) as usize];\n    }\n    f", "    let mut res = vec![0; n\
    \ as usize];\n    res[0] = 0;\n    res[1] = 1;\n    res[2] = 1;\n    for i in\
    \ 3..n {\n        res[i as usize] = res[(i - 1) as usize] + res[(i - 2) as usize]\
    \ + res[(i - 3) as usize];\n    }\n    res", "    if n < 3 {\n        vec![1;\
    \ n as usize]\n    } else {\n        let mut result = tri(n - 1);\n        result.push(result[(n\
    \ - 3) as usize] + result[(n - 2) as usize] + result[(n - 1) as usize]);\n   \
    \     result\n    }", "    let mut a = vec![0, 1, 1];\n    for _ in 3..n+1 {\n\
    \        let new_a = a[a.len()-1] + a[a.len()-2] + a[a.len()-3];\n        a.push(new_a);\n\
    \    }\n    a", "    if n == 0 { return vec![]; }\n    if n == 1 { return vec![0];\
    \ }\n    if n == 2 { return vec![0, 0]; }\n    if n == 3 { return vec![0, 0, 1];\
    \ }\n    let mut ret = vec![0, 0, 1];\n    for i in 4..(n+1) {\n        let last\
    \ = ret[ret.len()-1];\n        let second_last = ret[ret.len()-2];\n        let\
    \ third_last = ret[ret.len()-3];\n        ret.push(last + second_last + third_last);\n\
    \    }\n    ret", "    let mut ts = vec![0, 0, 1];\n    for _ in 0..n-3 {\n  \
    \      let last = ts.len() - 1;\n        ts.push(ts[last-2] + ts[last-1] + ts[last]);\n\
    \    }\n    ts", "    let mut t = vec![1,1,1];\n    for _ in 3..n {\n        t.push(t[t.len()-1]\
    \ + t[t.len()-2] + t[t.len()-3]);\n    }\n    t", "    let mut tribonacci: Vec<isize>\
    \ = vec![0, 1, 1];\n    tribonacci.reserve(n as usize);\n    for i in 3..n {\n\
    \        tribonacci.push(tribonacci[i as usize - 3] + tribonacci[i as usize -\
    \ 2] + tribonacci[i as usize - 1]);\n    }\n    tribonacci", "    if n <= 0 {\n\
    \        vec![]\n    } else if n <= 2 {\n        vec![0; n as usize]\n    } else\
    \ {\n        let mut v = vec![0, 0, 1];\n        while v.len() < n as usize {\n\
    \            v.push(v[v.len() - 1] + v[v.len() - 2] + v[v.len() - 3]);\n     \
    \   }\n        v\n    }", "    match n {\n        0 => vec![0],\n        1 =>\
    \ vec![0, 1],\n        2 => vec![0, 1, 1],\n        3 => vec![0, 1, 1, 2],\n \
    \       _ => {\n            let mut xs = tri(n - 1);\n            let l = xs.len();\n\
    \            xs.push(xs[l - 1] + xs[l - 2] + xs[l - 3]);\n            xs\n   \
    \     }\n    }", "    // iterative function\n    let mut f = vec![0, 1, 1];\n\
    \    for i in 3..n+1 {\n        f.push(f[i-1] + f[i-2] + f[i-3]);\n    }\n   \
    \ f", "    if n == 0 {\n        return vec![];\n    } else if n == 1 {\n     \
    \   return vec![1];\n    } else if n == 2 {\n        return vec![1, 1];\n    }\
    \ else if n == 3 {\n        return vec![1, 1, 2];\n    }\n    let mut tri = vec![1,\
    \ 1, 2];\n    let mut i = 3;\n    loop {\n        let next = tri[i - 1] + tri[i\
    \ - 2] + tri[i - 3];\n        if next < 0 {\n            panic!(\"Integer overflow\"\
    );\n        }\n        tri.push(next);\n        i += 1;\n        if i == n {\n\
    \            break;\n        }\n    }\n    tri", "    if n <= 2 {\n        vec![0;\
    \ n as usize]\n    } else {\n        let mut arr = tri(n - 1);\n        let last\
    \ = arr.len() - 1;\n        arr.push(arr[last - 2] + arr[last - 1] + arr[last]);\n\
    \        arr\n    }", "    let mut acc = vec![0, 1, 1];\n    let mut i = 3;\n\
    \    while i <= n {\n        acc.push(acc[i - 1] + acc[i - 2] + acc[i - 3]);\n\
    \        i += 1;\n    }\n    acc", "    let mut v = vec![1,1,1];\n    for i in\
    \ 0..n {\n        v.push(v[i as usize] + v[(i+1) as usize] + v[(i+2) as usize]);\n\
    \    }\n    v", "    let mut result = vec![0, 1, 1];\n    for i in 3..n {\n  \
    \      result.push(result[i - 1] + result[i - 2] + result[i - 3]);\n    }\n  \
    \  result", "    if n <= 2 {\n        vec![1; n as usize]\n    } else {\n    \
    \    let mut v = tri(n - 1);\n        v.push(v[v.len() - 3] + v[v.len() - 2] +\
    \ v[v.len() - 1]);\n        v\n    }", "    let mut t = vec![0, 1, 1];\n    for\
    \ i in 3..n {\n        t.push(t[i - 1] + t[i - 2] + t[i - 3]);\n    }\n    t",
  "    if n == 0 {\n        vec![]\n    } else if n == 1 {\n        vec![1]\n    }\
    \ else if n == 2 {\n        vec![1, 1]\n    } else {\n        let mut res = vec![1,\
    \ 1, 1];\n        let mut sum = 3;\n        while res.len() < n as usize {\n \
    \           res.push(sum);\n            sum = res[res.len() - 1] + res[res.len()\
    \ - 2] + res[res.len() - 3];\n        }\n        res\n    }", "    (0..n+1).fold(vec![0,\
    \ 0, 1], |v, _| {\n        let next = v[v.len()-1] + v[v.len()-2] + v[v.len()-3];\n\
    \        let mut v = v.clone();\n        v.push(next);\n        v\n    })", " \
    \   if n < 0 {\n        panic!(\"n must be greater than or equal to 0\");\n  \
    \  }\n    if n == 0 {\n        return vec![];\n    }\n    if n == 1 {\n      \
    \  return vec![0];\n    }\n    if n == 2 {\n        return vec![0, 1];\n    }\n\
    \    let mut trib = vec![0, 1, 1];\n    for i in 3..n {\n        trib.push(trib[i\
    \ - 1] + trib[i - 2] + trib[i - 3]);\n    }\n    trib", "    let mut a = vec![1,\
    \ 1, 1];\n    for _ in 3..n {\n        let b = a[0] + a[1] + a[2];\n        a.remove(0);\n\
    \        a.push(b);\n    }\n    a", "    let mut v = vec![0, 1, 1];\n    let mut\
    \ i = 3;\n    loop {\n        if i == n {\n            break;\n        }\n   \
    \     v.push(v[i - 1] + v[i - 2] + v[i - 3]);\n        i += 1;\n    }\n    v",
  "    let mut a = 0;\n    let mut b = 1;\n    let mut c = 1;\n    let mut i = 0;\n\
    \    let mut result = vec![];\n    while i < n {\n        result.push(a);\n  \
    \      a = b;\n        b = c;\n        c = a + b + c;\n        i += 1;\n    }\n\
    \    result", "\tlet mut x = Vec::with_capacity(n as usize);\n\tfor i in 0..n\
    \ {\n\t\tif i == 0 {\n\t\t\tx.push(0);\n\t\t} else if i == 1 {\n\t\t\tx.push(1);\n\
    \t\t} else if i == 2 {\n\t\t\tx.push(1);\n\t\t} else {\n\t\t\tx.push(x[(i-1) as\
    \ usize] + x[(i-2) as usize] + x[(i-3) as usize]);\n\t\t}\n\t}\n\tx", "    let\
    \ mut result = vec![0, 1, 1];\n    for i in 3..n {\n        result.push(result[i\
    \ - 1] + result[i - 2] + result[i - 3]);\n    }\n    result", "    let mut vec\
    \ = vec![1, 1, 2];\n    for i in 3..n {\n        vec.push(vec[i - 1] + vec[i -\
    \ 2] + vec[i - 3]);\n    }\n    vec", "    let mut result = vec![0, 1, 1];\n \
    \   for i in 3..n + 1 {\n        result.push(result[i as usize - 3] + result[i\
    \ as usize - 2] + result[i as usize - 1]);\n    }\n    result", "    if n < 3\
    \ {\n        vec![1, 1, 2]\n    } else {\n        let mut v = tri(n - 1);\n  \
    \      v.push(v[n as usize - 3] + v[n as usize - 2] + v[n as usize - 1]);\n  \
    \      v\n    }", "    let mut v = vec![0, 1, 1];\n    let mut c = 3;\n    while\
    \ c < n {\n        v.push(v[c - 1] + v[c - 2] + v[c - 3]);\n        c += 1;\n\
    \    }\n    v", "    let mut v: Vec<isize> = vec![0, 1, 1];\n    for i in 0..n-3\
    \ {\n        v.push(v[i] + v[i+1] + v[i+2]);\n    }\n    v", "    if n < 3 {\n\
    \        vec![1, 1, 2][..n as usize].to_vec()\n    } else {\n        let mut v\
    \ = tri(n - 1);\n        v.push(v[n as usize - 2] + v[n as usize - 3] + v[n as\
    \ usize - 4]);\n        v\n    }", "    match n {\n        0 => vec![],\n    \
    \    1 => vec![0],\n        2 => vec![0, 0],\n        3 => vec![0, 0, 1],\n  \
    \      _ => {\n            let mut v = tri(n - 1);\n            v.push(v[n as\
    \ usize - 3] + v[n as usize - 2] + v[n as usize - 1]);\n            v\n      \
    \  }\n    }", "    if n <= 0 {\n        return vec![];\n    }\n    let mut v =\
    \ vec![1, 1, 1];\n    for _ in 3..n {\n        let next = v[v.len() - 3] + v[v.len()\
    \ - 2] + v[v.len() - 1];\n        v.push(next);\n    }\n    v", "    if n < 3\
    \ {\n        vec![0, 1, 1][..n as usize].to_vec()\n    } else {\n        let mut\
    \ v = tri(n - 1);\n        v.push(v[v.len() - 1] + v[v.len() - 2] + v[v.len()\
    \ - 3]);\n        v\n    }", "    let mut v = vec![0; 3];\n    v[0] = 0;\n   \
    \ v[1] = 1;\n    v[2] = 1;\n    let mut tmp = 0;\n    for i in 3..n {\n      \
    \  tmp = v[i - 1] + v[i - 2] + v[i - 3];\n        v.push(tmp);\n    }\n    v",
  "    (0..n).map(|x| {\n        if x < 3 { 1 } else { tri(n)[x-1] + tri(n)[x-2] +\
    \ tri(n)[x-3] }\n    }).collect()", "    if n == 0 { return vec![0]; }\n    if\
    \ n == 1 { return vec![0, 1]; }\n    if n == 2 { return vec![0, 1, 1]; }\n   \
    \ let mut v = vec![0, 1, 1];\n    for i in 0..n-2 {\n        v.push(v[i] + v[i+1]\
    \ + v[i+2]);\n    }\n    v", "    let mut v = vec![1, 1, 2];\n    while v.len()\
    \ <= n as usize {\n        v.push(v[v.len() - 3] + v[v.len() - 2] + v[v.len()\
    \ - 1]);\n    }\n    v", "    let mut f = Vec::new();\n    f.push(0);\n    f.push(1);\n\
    \    f.push(1);\n    while f.len() <= n as usize {\n        f.push(f[f.len() -\
    \ 1] + f[f.len() - 2] + f[f.len() - 3]);\n    }\n    f", "    let mut t = vec![1,1,1];\n\
    \    for i in 3..n+1 {\n        t.push(t[i as usize - 1] + t[i as usize - 2] +\
    \ t[i as usize - 3]);\n    }\n    t", "    let mut v = vec![1, 1, 2];\n    for\
    \ _ in 3..n {\n        let sum = v[0] + v[1] + v[2];\n        v.remove(0);\n \
    \       v.push(sum);\n    }\n    v", "    match n {\n        0 => vec![],\n  \
    \      1 => vec![0],\n        2 => vec![0, 0],\n        3 => vec![0, 0, 1],\n\
    \        _ => {\n            let mut v = tri(n - 1);\n            v.push(v[v.len()\
    \ - 1] + v[v.len() - 2] + v[v.len() - 3]);\n            v\n        }\n    }",
  "    let mut acc = vec![0, 1, 1];\n    let mut i = 3;\n    while i <= n {\n    \
    \    acc.push(acc[i-1] + acc[i-2] + acc[i-3]);\n        i += 1;\n    }\n    acc",
  "    let mut vs = vec![0, 0, 1];\n    for _ in 0..n {\n        let tn = vs[vs.len()\
    \ - 3] + vs[vs.len() - 2] + vs[vs.len() - 1];\n        vs.push(tn);\n    }\n \
    \   vs", "    let mut a = vec![0, 0, 1];\n    for _ in 0..n {\n        let len\
    \ = a.len();\n        a.push(a[len - 3] + a[len - 2] + a[len - 1]);\n    }\n \
    \   a", "    let mut result = vec![0, 1, 1];\n    for i in 3..=n {\n        result.push(result[i\
    \ as usize - 3] + result[i as usize - 2] + result[i as usize - 1]);\n    }\n \
    \   result", "    let mut f1 = 0;\n    let mut f2 = 1;\n    let mut f3 = 1;\n\
    \    let mut result = vec![f1, f2, f3];\n    for _ in 0..n-3 {\n        let f4\
    \ = f1 + f2 + f3;\n        f1 = f2;\n        f2 = f3;\n        f3 = f4;\n    \
    \    result.push(f4);\n    }\n    result", "    match n {\n        0 => Vec::new(),\n\
    \        1 => vec![0],\n        2 => vec![0, 1],\n        3 => vec![0, 1, 1],\n\
    \        _ => {\n            let mut list = tri(n - 1);\n            list.push(list[n\
    \ as usize - 2] + list[n as usize - 3] + list[n as usize - 4]);\n            list\n\
    \        }\n    }", "    let mut res = vec![0, 1, 1];\n    for i in 3..=n {\n\
    \        res.push(res[i - 1] + res[i - 2] + res[i - 3]);\n    }\n    res", " \
    \   vec![1, 1, 2]\n        .into_iter()\n        .chain(std::iter::repeat(1).take(n\
    \ as usize - 3))\n        .scan(vec![1, 1, 2], |state, item| {\n            let\
    \ &[a, b, c] = state;\n            let next = a + b + c;\n            state.push(next);\n\
    \            Some(next)\n        })\n        .collect()", "    let mut a = vec![0,\
    \ 1, 1];\n    while a.len() < n as usize {\n        a.push(a[a.len() - 3] + a[a.len()\
    \ - 2] + a[a.len() - 1]);\n    }\n    a", "    let mut result = vec![0; n as usize];\n\
    \    for i in 0..n {\n        if i == 0 {\n            result[i as usize] = 0;\n\
    \        } else if i == 1 {\n            result[i as usize] = 1;\n        } else\
    \ if i == 2 {\n            result[i as usize] = 1;\n        } else {\n       \
    \     result[i as usize] = result[(i - 1) as usize] + result[(i - 2) as usize]\
    \ + result[(i - 3) as usize];\n        }\n    }\n    result", "    if n <= 3 {\n\
    \        let mut result = Vec::new();\n        for i in 0..n {\n            result.push(1);\n\
    \        }\n        return result;\n    }\n    let mut v = tri(n - 1);\n    v.push(v[n\
    \ - 4] + v[n - 3] + v[n - 2]);\n    v", "    let mut v = vec![0, 0, 1];\n    while\
    \ v.len() < n as usize {\n        v.push(v[v.len() - 3] + v[v.len() - 2] + v[v.len()\
    \ - 1]);\n    }\n    v", "    if n == 0 { return vec![] }\n    if n == 1 { return\
    \ vec![1] }\n    if n == 2 { return vec![1, 1] }\n    let mut t = vec![1, 1, 1];\n\
    \    for _ in 3..n {\n        let a = t[t.len() - 3];\n        let b = t[t.len()\
    \ - 2];\n        let c = t[t.len() - 1];\n        t.push(a + b + c);\n    }\n\
    \    t", "    match n {\n        0 => vec![],\n        1 => vec![0],\n       \
    \ 2 => vec![0, 0],\n        3 => vec![0, 0, 1],\n        _ => {\n            let\
    \ mut tri = tri(n - 1);\n            tri.push(tri[tri.len() - 1] + tri[tri.len()\
    \ - 2] + tri[tri.len() - 3]);\n            tri\n        }\n    }", "    let mut\
    \ f: Vec<isize> = vec![0, 1, 1];\n    if n > 2 {\n        for i in 3..n+1 {\n\
    \            f.push(f[i-1] + f[i-2] + f[i-3]);\n        }\n    }\n    f", "  \
    \  let mut arr = vec![0, 1, 1];\n    for _ in 3..=n {\n        let len = arr.len();\n\
    \        arr.push(arr[len - 1] + arr[len - 2] + arr[len - 3]);\n    }\n    arr",
  "    let mut a: Vec<isize> = vec![1, 1, 1];\n    if n < 3 {\n        a.truncate(n\
    \ as usize);\n        return a;\n    }\n    for i in 3..n {\n        a.push(a[(i\
    \ - 1) as usize] + a[(i - 2) as usize] + a[(i - 3) as usize]);\n    }\n    a",
  "    if n == 0 {\n        vec![]\n    } else if n == 1 {\n        vec![1]\n    }\
    \ else if n == 2 {\n        vec![1, 1]\n    } else {\n        let mut a = vec![1,\
    \ 1, 1];\n        let mut i = 3;\n        while i < n {\n            a.push(a[i\
    \ - 1] + a[i - 2] + a[i - 3]);\n            i += 1;\n        }\n        a\n  \
    \  }", "\tlet mut r = vec![0,1,1];\n\tfor _ in 3..n {\n\t\tr.push(r[r.len()-1]+r[r.len()-2]+r[r.len()-3]);\n\
    \t}\n\tr", "    let mut result = vec![0; n as usize];\n    result[0] = 0;\n  \
    \  result[1] = 1;\n    result[2] = 1;\n    for i in 3..n {\n        result[i as\
    \ usize] = result[(i - 1) as usize] + result[(i - 2) as usize] + result[(i - 3)\
    \ as usize];\n    }\n    result", "    if n < 3 {\n        vec![1, 1, 2][..n as\
    \ usize].to_vec()\n    } else {\n        let mut v = tri(n - 1);\n        v.push(v[n\
    \ as usize - 3] + v[n as usize - 2] + v[n as usize - 1]);\n        v\n    }",
  "    let mut t: Vec<isize> = vec![1, 1, 1];\n    for i in 3..n {\n        t.push(t[i\
    \ - 1] + t[i - 2] + t[i - 3]);\n    }\n    t", "    let mut v: Vec<isize> = vec![0,\
    \ 1, 1];\n    for _ in 3..n {\n        let last = v.len() - 1;\n        v.push(v[last\
    \ - 2] + v[last - 1] + v[last]);\n    }\n    v"]
stop_tokens:
- "\n}"
