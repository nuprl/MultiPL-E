name: HumanEval_17_parse_music
language: rs
prompt: "/// Input to this function is a string representing musical notes in a special\
  \ ASCII format.\n/// Your task is to parse this string and return list of integers\
  \ corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n\
  /// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n\
  /// '.|' - quater note, lasts one beat\nfn parse_music(music_string: String) ->\
  \ Vec<isize> {\n"
tests: "}\n\nfn main() {\n    let candidate = parse_music;\n    assert_eq!(candidate(String::from(\"\
  \")), Vec::<isize>::new());\n    assert_eq!(candidate(String::from(\"o o o o\")),\
  \ vec![4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\".| .| .| .|\")), vec![1,\
  \ 1, 1, 1]);\n    assert_eq!(candidate(String::from(\"o| o| .| .| o o o o\")), vec![2,\
  \ 2, 1, 1, 4, 4, 4, 4]);\n    assert_eq!(candidate(String::from(\"o| .| o| .| o\
  \ o| o o|\")), vec![2, 1, 2, 1, 4, 2, 4, 2]);\n}\n"
completions: ["    let mut sum = 0;\n    let mut result = Vec::new();\n    for s in\
    \ music_string.split(\" \") {\n        match s {\n            \"o\" => {\n   \
    \             result.push(4);\n                sum += 4;\n            }\n    \
    \        \"o|\" => {\n                result.push(2);\n                sum +=\
    \ 2;\n            }\n            \".|\" => {\n                result.push(1);\n\
    \                sum += 1;\n            }\n            _ => {}\n        }\n  \
    \  }\n    result.push(sum);\n    result", "    let mut res = Vec::new();\n   \
    \ let mut it = music_string.chars();\n    while let Some(c) = it.next() {\n  \
    \      match c {\n            'o' => {\n                res.push(4);\n       \
    \         if let Some('|') = it.next() {\n                    if let Some('|')\
    \ = it.next() {\n                        res.push(4);\n                    }\n\
    \                }\n            }\n            'o' => {\n                res.push(2);\n\
    \                if let Some('|') = it.next() {\n                    if let Some('|')\
    \ = it.next() {\n                        res.push(2);\n                    }\n\
    \                }\n            }\n            '.' => {\n                res.push(1);\n\
    \                if let Some('|') = it.next() {\n                    if let Some('|')\
    \ = it.next() {\n                        res.push(1);\n                    }\n\
    \                }\n            }\n            _ => {}\n        }\n    }\n   \
    \ res", "    music_string.chars().fold(Vec::new(), |mut accum, c| {\n        match\
    \ c {\n            'o' => accum.push(4),\n            'o' | '|' => accum.push(2),\n\
    \            '.' | '|' => accum.push(1),\n            _ => ()\n        }\n   \
    \     accum\n    })", "    music_string.chars().filter_map(|x| match x {\n   \
    \     'o' => Some(4),\n        '|' => None,\n        _ => Some(1),\n    }).collect()",
  '    unimplemented!()', '    unimplemented!();', "    let mut beats: Vec<isize>\
    \ = Vec::new();\n    let mut current_beat: isize = 0;\n    let mut current_note:\
    \ Option<char> = None;\n    for c in music_string.chars() {\n        if c == '\
    \ ' {\n            continue;\n        }\n        if c == '.' || c == 'o' {\n \
    \           current_note = Some(c);\n        } else if c == '|' {\n          \
    \  match current_note {\n                Some('o') => {\n                    beats.push(current_beat\
    \ + 4);\n                    current_beat = 0;\n                }\n          \
    \      Some('.') => {\n                    beats.push(current_beat + 1);\n   \
    \                 current_beat = 0;\n                }\n                Some(_)\
    \ => (),\n                None => (),\n            }\n        }\n    }\n    beats",
  "    // This is a stub. Please implement the function and remove this comment.\n\
    \    let mut result = Vec::new();\n    for c in music_string.chars() {\n     \
    \   if c == 'o' {\n            result.push(4);\n        } else if c == '|' {\n\
    \            result.push(2);\n        } else if c == '.' {\n            result.push(1);\n\
    \        }\n    }\n    result", "    let mut result = Vec::new();\n    let chars\
    \ = music_string.chars().collect::<Vec<char>>();\n    let mut current_beat = 0;\n\
    \    for i in 0..chars.len() {\n        if chars[i] == 'o' {\n            result.push(4);\n\
    \            current_beat += 4;\n        } else if chars[i] == '.' {\n       \
    \     result.push(1);\n            current_beat += 1;\n        } else if chars[i]\
    \ == '|' {\n            if chars[i - 1] == 'o' {\n                current_beat\
    \ += 2;\n            } else {\n                current_beat += 1;\n          \
    \  }\n        }\n    }\n    result", "    music_string.chars().fold(Vec::new(),\
    \ |mut acc, c| {\n        match c {\n            'o' => acc.push(4),\n       \
    \     'o' | '|' => acc.push(2),\n            '.' | '|' => acc.push(1),\n     \
    \       _ => (),\n        }\n        acc\n    })", "    let mut result: Vec<isize>\
    \ = Vec::new();\n    let mut iter = music_string.chars();\n    while let Some(c)\
    \ = iter.next() {\n        if c == 'o' {\n            if let Some(n) = iter.next()\
    \ {\n                if n == '|' {\n                    result.push(2);\n    \
    \            } else {\n                    result.push(4);\n                }\n\
    \            } else {\n                result.push(4);\n            }\n      \
    \  } else if c == '.' {\n            if let Some(n) = iter.next() {\n        \
    \        if n == '|' {\n                    result.push(1);\n                }\
    \ else {\n                    // TODO: Handle error\n                }\n     \
    \       } else {\n                // TODO: Handle error\n            }\n     \
    \   } else {\n            // TODO: Handle error\n        }\n    }\n    result",
  "    music_string.chars().map(|ch| match ch {\n        'o' => 4,\n        'o' |\
    \ '.' => 2,\n        '|' => 1,\n        _ => 0,\n    }).collect()", "    let beats\
    \ = vec![4, 2, 1];\n    let mut music_string = music_string.chars();\n    let\
    \ mut parsed = Vec::new();\n    while let Some(c) = music_string.next() {\n  \
    \      if c == 'o' {\n            match music_string.next() {\n              \
    \  Some('|') => parsed.push(2),\n                _ => parsed.push(4),\n      \
    \      }\n        } else if c == '.' {\n            parsed.push(1);\n        \
    \    let _ = music_string.next();\n        }\n    }\n    parsed", '    unimplemented!()',
  "    // TODO: implement this function.\n    let half_note = vec!['o', '.'];\n  \
    \  let half_note_string = vec![\"o|\", \".|\"];\n    let full_note = vec!['O',\
    \ '-'];\n    let full_note_string = vec![\"O|\", \"-|\"];\n    let mut ret = Vec::new();\n\
    \    for note in music_string.split(\" \") {\n        let mut beats = 0;\n   \
    \     for (i, c) in note.chars().enumerate() {\n            if half_note.contains(&c)\
    \ {\n                beats += 1;\n            } else if full_note.contains(&c)\
    \ {\n                beats += 2;\n            } else if half_note_string.contains(&note[i..i+2])\
    \ {\n                beats += 1;\n            } else if full_note_string.contains(&note[i..i+2])\
    \ {\n                beats += 2;\n            }\n        }\n        ret.push(beats);\n\
    \    }\n    ret", "    let mut res = Vec::new();\n    let mut chars = music_string.chars();\n\
    \    while let Some(c) = chars.next() {\n        match c {\n            'o' =>\
    \ {\n                res.push(4);\n                if let Some('|') = chars.next()\
    \ {\n                    // skip '|' if found\n                }\n           \
    \ }\n            '.' => {\n                if let Some('|') = chars.next() {\n\
    \                    res.push(1);\n                }\n            }\n        \
    \    _ => {}\n        }\n    }\n    res", "    let mut res = Vec::new();\n   \
    \ for ch in music_string.chars() {\n        match ch {\n            'o' => res.push(4),\n\
    \            '|' => res.push(2),\n            '.' => res.push(1),\n          \
    \  _ => (),\n        }\n    }\n    res", "    let mut beats = Vec::new();\n  \
    \  let mut beat_count = 0;\n    for ch in music_string.chars() {\n        if ch\
    \ == 'o' {\n            beat_count += 4;\n        } else if ch == '|' {\n    \
    \        beats.push(beat_count);\n            beat_count = 0;\n        }\n   \
    \ }\n    beats.push(beat_count);\n    beats", "    unimplemented!(\"Parse music\
    \ string '{}'\", music_string);", "    let mut parsed_music: Vec<isize> = Vec::new();\n\
    \    let letters = music_string.chars().filter(|x| !x.is_whitespace()).collect::<Vec<char>>();\n\
    \    for letter in letters {\n        match letter {\n            'o' => parsed_music.push(4),\n\
    \            'o' | '.' => parsed_music.push(1),\n            '|' => (),\n    \
    \        _ => panic!(\"Unrecognized letter in string\"),\n        }\n    }\n \
    \   parsed_music", "    let mut result = Vec::new();\n    let mut cur_beat = 0;\n\
    \    for c in music_string.chars() {\n        match c {\n            'o' => {\n\
    \                result.push(cur_beat);\n                cur_beat = 4;\n     \
    \       }\n            'o' | '|' => {\n                result.push(cur_beat);\n\
    \                cur_beat = 2;\n            }\n            '.' | '|' => {\n  \
    \              result.push(cur_beat);\n                cur_beat = 1;\n       \
    \     }\n            _ => {\n                cur_beat += 1;\n            }\n \
    \       }\n    }\n    result", "    let mut output = Vec::new();\n    let mut\
    \ counter = 0;\n    let mut slice = \"\";\n    for c in music_string.chars() {\n\
    \        if c == 'o' {\n            counter += 4;\n            slice = \"\";\n\
    \        } else if c == '.' {\n            slice += \".\";\n        } else if\
    \ c == '|' {\n            if slice == \".\" {\n                counter += 1;\n\
    \            } else {\n                counter += 2;\n            }\n        \
    \    slice = \"\";\n        } else {\n            output.push(counter);\n    \
    \        counter = 0;\n        }\n    }\n    output.push(counter);\n    output",
  "    music_string.split('|').map(|s| s.chars().count() as isize).collect()", " \
    \   music_string.split(\" \").filter_map(|m| {\n        let m = m.trim();\n  \
    \      if m.ends_with(\"|\") {\n            Some(match m.len() {\n           \
    \     1 => 1,\n                2 => 2,\n                _ => panic!(\"bad input\"\
    ),\n            })\n        } else {\n            None\n        }\n    }).collect()",
  "    let mut result = Vec::new();\n    let mut note = String::new();\n    for c\
    \ in music_string.chars() {\n        if c == 'o' || c == '.' {\n            note.push(c);\n\
    \        } else if c == '|' {\n            if note == \"o\" {\n              \
    \  result.push(4);\n            } else if note == \"o|\" {\n                result.push(2);\n\
    \            } else if note == \".|\" {\n                result.push(1);\n   \
    \         }\n            note = String::new();\n        }\n    }\n    result",
  "    let mut res = Vec::new();\n    let mut note_sequence = music_string.chars();\n\
    \    while let Some(note) = note_sequence.next() {\n        match note {\n   \
    \         'o' => {\n                res.push(4);\n                if let Some('|')\
    \ = note_sequence.next() {\n                    continue;\n                }\n\
    \            }\n            'o' => {\n                res.push(2);\n         \
    \       if let Some('|') = note_sequence.next() {\n                    continue;\n\
    \                }\n            }\n            '.' => {\n                res.push(1);\n\
    \                if let Some('|') = note_sequence.next() {\n                 \
    \   continue;\n                }\n            }\n            _ => continue,\n\
    \        }\n    }\n    res", "    music_string.split_whitespace().map(|s| {\n\
    \        let l = s.chars().count();\n        let beats = s.chars().filter(|c|\
    \ *c == '|').count();\n        let add_beats = match s.chars().last() {\n    \
    \        Some('o') => 4 - beats,\n            Some('|') => 2 - beats,\n      \
    \      _ => 1 - beats,\n        };\n        if l == 1 {\n            return 1;\n\
    \        }\n        add_beats as isize\n    }).collect()", "    let mut result:\
    \ Vec<isize> = Vec::new();\n    let mut iter = music_string.chars();\n    while\
    \ let Some(c) = iter.next() {\n        if c == 'o' {\n            result.push(4);\n\
    \        } else if c == '|' {\n            result.push(1);\n        } else if\
    \ c == '.' {\n            result.push(1);\n            iter.next();\n        }\n\
    \    }\n    result", '    unimplemented!()', "    unimplemented!(\"Parse music\
    \ string: '{}'\", music_string);", "    let map = [('o', 4), ('|', 2), ('.', 1)];\n\
    \    music_string.chars().filter_map(|c| map.iter().find(|&&(a, _)| a == c).map(|&(_,\
    \ v)| v)).collect()", "    let beats = [1, 2, 4];\n    let mut result = Vec::new();\n\
    \    let mut note = music_string.chars();\n    while let Some(current) = note.next()\
    \ {\n        match current {\n            'o' => {\n                if let Some('|')\
    \ = note.next() {\n                    result.push(beats[1]);\n              \
    \  } else {\n                    result.push(beats[2]);\n                }\n \
    \           }\n            '.' => {\n                if let Some('|') = note.next()\
    \ {\n                    result.push(beats[0]);\n                }\n         \
    \   }\n            _ => (),\n        }\n    }\n    result", "    let mut result\
    \ = Vec::new();\n    let mut current_length = 0;\n    for ch in music_string.chars()\
    \ {\n        if ch == 'o' {\n            current_length += 4;\n        } else\
    \ if ch == '|' {\n            result.push(current_length);\n            current_length\
    \ = 0;\n        }\n    }\n    result", "    let mut result = Vec::new();\n   \
    \ let mut i = 0;\n    while i < music_string.len() {\n        let mut duration\
    \ = 1;\n        let cur_char = music_string.chars().nth(i).unwrap();\n       \
    \ if cur_char == 'o' {\n            duration = 4;\n        } else if cur_char\
    \ == '.' {\n            duration = 1;\n        } else if cur_char == 'o' {\n \
    \           duration = 2;\n        } else {\n            panic!(\"Unrecognized\
    \ character!\");\n        }\n        i += 1;\n        if i < music_string.len()\
    \ {\n            let next_char = music_string.chars().nth(i).unwrap();\n     \
    \       if next_char == '.' {\n                duration += 1;\n            } else\
    \ if next_char == '|' {\n                duration /= 2;\n            } else {\n\
    \                panic!(\"Unrecognized character!\");\n            }\n       \
    \     i += 1;\n        }\n        result.push(duration);\n    }\n    result",
  "    let mut result = Vec::new();\n    for c in music_string.chars() {\n       \
    \ if c == 'o' {\n            result.push(4);\n        } else if c == '|' {\n \
    \           result.push(-1);\n        }\n    }\n    result", "    let mut sum\
    \ = 0;\n    let mut result = Vec::new();\n    for c in music_string.chars() {\n\
    \        match c {\n            '|' => {\n                result.push(sum);\n\
    \                sum = 0;\n            }\n            'o' => sum += 4,\n     \
    \       '.' => sum += 1,\n            _ => {\n                if sum > 0 {\n \
    \                   result.push(sum);\n                    sum = 0;\n        \
    \        }\n            }\n        }\n    }\n    if sum > 0 {\n        result.push(sum);\n\
    \    }\n    result", "    let chars: Vec<char> = music_string.chars().collect();\n\
    \    let mut result: Vec<isize> = Vec::new();\n    let mut sum: isize = 0;\n \
    \   for (i, x) in chars.iter().enumerate() {\n        if x == &'o' {\n       \
    \     sum += 4;\n        } else if x == &'|' {\n            result.push(sum);\n\
    \            sum = 0;\n        } else if i == 0 {\n            sum += 2;\n   \
    \     } else if chars[i - 1] == 'o' {\n            sum += 2;\n        } else {\n\
    \            sum += 1;\n        }\n    }\n    result.push(sum);\n    result",
  "    let mut beats: Vec<isize> = Vec::new();\n    let mut notes: Vec<char> = music_string.chars().collect();\n\
    \    while notes.len() > 0 {\n        match notes.remove(0) {\n            'o'\
    \ => {\n                if notes.len() > 0 && notes[0] == '|' {\n            \
    \        notes.remove(0);\n                    beats.push(2);\n              \
    \  } else {\n                    beats.push(4);\n                }\n         \
    \   }\n            '.' => {\n                if notes.len() > 0 && notes[0] ==\
    \ '|' {\n                    notes.remove(0);\n                    beats.push(1);\n\
    \                } else {\n                    beats.push(4);\n              \
    \  }\n            }\n            _ => {}\n        }\n    }\n    beats", "    let\
    \ mut beats = vec![];\n    let mut position = 0;\n    let mut length = 1;\n  \
    \  let mut metronome = 0;\n    let mut note = false;\n    let mut rest = false;\n\
    \    let mut repeat = false;\n    let mut bar = false;\n    let mut tune_end =\
    \ false;\n    let mut duplet = false;\n    let mut triplet = false;\n    let mut\
    \ quadruplet = false;\n    let mut repeat_time = 0;\n    let mut repeat_count\
    \ = 0;\n    let mut repeat_len = 0;\n    let mut repeat_last = 0;\n    let mut\
    \ repeat_beats = vec![];\n    let mut repeat_notes = vec![];\n    while position\
    \ < music_string.len() {\n        match music_string.chars().nth(position).unwrap()\
    \ {\n            'o' => {\n                note = true;\n                length\
    \ = 4;\n            }\n            '.' => {\n                note = true;\n  \
    \              length = 1;\n            }\n            'b' => {\n            \
    \    rest = true;\n                length = 1;\n            }\n            '|'\
    \ => {\n                bar = true;\n            }\n            '(' => {\n   \
    \             repeat = true;\n                repeat_time = metronome;\n     \
    \           repeat_beats = beats.clone();\n                repeat_notes = vec![];\n\
    \            }\n            ')' => {\n                repeat = false;\n      \
    \          repeat_len = metronome - repeat_time;\n                repeat_last\
    \ = repeat_time + (repeat_len * repeat_count);\n                while metronome\
    \ < repeat_last {\n                    let mut i = 0;\n                    while\
    \ i < repeat_len {\n                        beats.push(repeat_beats[i]);\n   \
    \                     repeat_notes.push(music_string.chars().nth(i + 1).unwrap());\n\
    \                        i += 1;\n                    }\n                    metronome\
    \ += repeat_len;\n                }\n            }\n            '2' => {\n   \
    \             duplet = true;\n            }\n            '3' => {\n          \
    \      triplet = true;\n            }\n            '4' => {\n                quadruplet\
    \ = true;", "    let mut beats: Vec<isize> = Vec::new();\n    let mut prev_num\
    \ = 0;\n    for (i, c) in music_string.chars().enumerate() {\n        if c ==\
    \ 'o' {\n            prev_num += 4;\n        } else if c == '|' {\n          \
    \  if music_string.chars().nth(i-1).unwrap() == '.' {\n                prev_num\
    \ += 1;\n            } else {\n                prev_num += 2;\n            }\n\
    \        } else if c == '.' || c == 'o' {\n            continue;\n        } else\
    \ {\n            beats.push(prev_num);\n            prev_num = 0;\n        }\n\
    \    }\n    beats.push(prev_num);\n    beats", "    let mut result: Vec<isize>\
    \ = Vec::new();\n    for c in music_string.chars() {\n        match c {\n    \
    \        'o' => result.push(4),\n            'o' | '|' => result.push(2),\n  \
    \          '.' | '|' => result.push(1),\n            _ => result.push(0),\n  \
    \      }\n    }\n    result", '    unimplemented!("Write this function");', " \
    \   // this is a horrible hack, but Rust's regex engine is far from stable and\
    \ doesn't support named capturing\n    let re = Regex::new(r\"o(\\|+)?\").unwrap();\n\
    \    let mut matches: Vec<_> = re.find_iter(&music_string).collect();\n    let\
    \ res: Vec<isize> = matches.drain(..).map(|m| {\n        if m.as_str().len() ==\
    \ 1 {\n            4\n        } else {\n            2 * m.as_str().len() as isize\n\
    \        }\n    }).collect();\n    return res;", "    let mut beats = Vec::new();\n\
    \    let mut state = State::Start;\n    let mut count = 0;\n    for c in music_string.chars()\
    \ {\n        match state {\n            State::Start => {\n                if\
    \ c == 'o' {\n                    state = State::WholeNote;\n                \
    \    count = 4;\n                } else if c == '.' {\n                    state\
    \ = State::QuaterNote;\n                    count = 1;\n                }\n  \
    \          }\n            State::WholeNote => {\n                if c == '|' {\n\
    \                    state = State::Start;\n                    beats.push(count);\n\
    \                }\n            }\n            State::QuaterNote => {\n      \
    \          if c == '|' {\n                    state = State::Start;\n        \
    \            beats.push(count);\n                }\n            }\n        }\n\
    \    }\n    beats", "    music_string.chars().flat_map(|c| match c {\n       \
    \ 'o' => vec![4],\n        'o' | '.' => vec![2],\n        '|' => vec![1],\n  \
    \      _ => vec![],\n    }).collect()", "\tlet mut music_vector: Vec<isize> =\
    \ Vec::new();\n\tlet mut characters = music_string.chars();\n\twhile let Some(c)\
    \ = characters.next() {\n\t\tif c == 'o' {\n\t\t\tmusic_vector.push(4);\n\t\t\
    } else if c == '.' {\n\t\t\tmusic_vector.push(1);\n\t\t} else if c == '|' {\n\t\
    \t\tif let Some(c) = characters.next() {\n\t\t\t\tif c == 'o' {\n\t\t\t\t\tmusic_vector.push(2);\n\
    \t\t\t\t} else if c == '.' {\n\t\t\t\t\tmusic_vector.push(1);\n\t\t\t\t}\n\t\t\
    \t}\n\t\t}\n\t}\n\tmusic_vector", "    let mut ret: Vec<isize> = Vec::new();\n\
    \    for ch in music_string.chars() {\n        match ch {\n            'o' =>\
    \ ret.push(4),\n            'o' => ret.push(2),\n            '.' => ret.push(1),\n\
    \            _ => {}\n        }\n    }\n    ret", "    let mut res = Vec::new();\n\
    \    let mut notes = music_string.chars();\n    while let Some(n) = notes.next()\
    \ {\n        match n {\n            'o' => {\n                if let Some(n) =\
    \ notes.next() {\n                    if n == '|' {\n                        res.push(2);\n\
    \                    } else {\n                        res.push(4);\n        \
    \            }\n                } else {\n                    res.push(4);\n \
    \               }\n            }\n            '.' => {\n                if let\
    \ Some(n) = notes.next() {\n                    if n == '|' {\n              \
    \          res.push(1);\n                    } else {\n                      \
    \  panic!(\"invalid music string\");\n                    }\n                }\
    \ else {\n                    panic!(\"invalid music string\");\n            \
    \    }\n            }\n            _ => panic!(\"invalid music string\"),\n  \
    \      }\n    }\n    res", "    let mut vec = Vec::new();\n    let mut temp =\
    \ String::new();\n    for e in music_string.chars() {\n        match e {\n   \
    \         'o' => {\n                temp.push(e);\n                vec.push(4);\n\
    \            }\n            '.' => {\n                temp.push(e);\n        \
    \        vec.push(1);\n            }\n            '|' => {\n                temp.push(e);\n\
    \                vec.push(2);\n            }\n            _ => {\n           \
    \     vec.push(0);\n            }\n        }\n    }\n    return vec;", "    let\
    \ mut beat_count = 0;\n    let mut results = Vec::new();\n    let mut index =\
    \ 0;\n    for character in music_string.chars() {\n        match character {\n\
    \            'o' => {\n                if index == 0 {\n                    results.push(4);\n\
    \                } else {\n                    results[index-1] = 4;\n       \
    \         }\n                index += 1;\n            },\n            '|' => {\n\
    \                beat_count += 1;\n            },\n            '.' => {\n    \
    \            beat_count += 1;\n                results.push(beat_count);\n   \
    \             beat_count = 0;\n                index += 1;\n            },\n \
    \           _ => (),\n        }\n    }\n    return results;", "    let mut result\
    \ = Vec::new();\n    let mut chars = music_string.chars();\n    while let Some(c)\
    \ = chars.next() {\n        if c == 'o' {\n            result.push(4);\n     \
    \   } else if c == '.' {\n            result.push(1);\n        } else if c ==\
    \ '|' {\n            chars.next();\n            continue;\n        } else {\n\
    \            panic!(\"Unexpected symbol found: {}\", c);\n        }\n    }\n \
    \   result", "    let note_to_beat_mapping = vec![\n        (String::from(\"o\"\
    ), 4),\n        (String::from(\"o|\"), 2),\n        (String::from(\".|\"), 1),\n\
    \    ];\n\n    let mut total_beats = 0;\n    let mut beats = Vec::new();\n\n \
    \   for ch in music_string.split('|') {\n        let (_ch, beat) = note_to_beat_mapping.iter().find(|(key,\
    \ _beat)| *key == ch).unwrap();\n        total_beats += beat;\n        beats.push(beat);\n\
    \    }\n\n    println!(\"{}\", total_beats);\n    beats", "    let mut b = 0;\n\
    \    music_string.chars().map(|c| {\n        b = match c {\n            'o' =>\
    \ 4,\n            'o' | '|' => 2,\n            '.' | '|' => 1,\n            _\
    \ => b,\n        };\n        b\n    }).collect()", "    use std::collections::HashMap;\n\
    \    let mut beats: Vec<isize> = Vec::new();\n    let mut beat_map: HashMap<char,\
    \ isize> = HashMap::new();\n    beat_map.insert('o', 4);\n    beat_map.insert('.',\
    \ 1);\n    for (i, c) in music_string.chars().enumerate() {\n        if c == '|'\
    \ {\n            beats.push(beat_map[&music_string.chars().nth(i - 1).unwrap()]);\n\
    \        }\n    }\n    beats", "    let mut result = Vec::new();\n    let notes\
    \ = music_string.split('|');\n    for note in notes {\n        match note {\n\
    \            \"o\" => result.push(4),\n            \"o.\" => result.push(2),\n\
    \            \".o\" => result.push(2),\n            \"o..\" => result.push(1),\n\
    \            \".o.\" => result.push(1),\n            \"..o\" => result.push(1),\n\
    \            _ => result.push(0),\n        }\n    }\n    result", "    let mut\
    \ output: Vec<isize> = Vec::new();\n    for i in music_string.split(' ') {\n \
    \       if i == \"o\" {\n            output.push(4);\n        } else if i == \"\
    o|\" {\n            output.push(2);\n        } else if i == \".|\" {\n       \
    \     output.push(1);\n        }\n    }\n    output", "    let mut beats = vec![];\n\
    \    for c in music_string.chars() {\n        match c {\n            'o' => beats.push(4),\n\
    \            'o' | '|' => beats.push(2),\n            '.' | '|' => beats.push(1),\n\
    \            _ => (),\n        }\n    }\n    beats", "    music_string.chars().map(\n\
    \        |c| match c {\n            'o' => 4,\n            '|' => 1,\n       \
    \     '.' => 1,\n            _ => 0,\n        }\n    ).collect()", "    let mut\
    \ beats: Vec<isize> = Vec::new();\n    let mut beat_counter: isize = 0;\n    for\
    \ c in music_string.chars() {\n        if c == 'o' {\n            beat_counter\
    \ += 4;\n        } else if c == '|' {\n            beats.push(beat_counter);\n\
    \            beat_counter = 0;\n        } else {\n            beat_counter +=\
    \ 1;\n        }\n    }\n    beats.push(beat_counter);\n    beats", '    unimplemented!()',
  "    let mut result: Vec<isize> = Vec::new();\n    let mut i = 0;\n    while i <\
    \ music_string.len() {\n        let mut this_char = music_string.chars().nth(i).unwrap();\n\
    \        let mut this_string = this_char.to_string();\n        if this_char ==\
    \ 'o' {\n            result.push(4);\n            i += 1;\n        } else if this_char\
    \ == '|' {\n            i += 1;\n            continue;\n        } else {\n   \
    \         i += 1;\n            this_char = music_string.chars().nth(i).unwrap();\n\
    \            this_string.push(this_char);\n            if this_string == \"o|\"\
    \ {\n                result.push(2);\n            } else if this_string == \"\
    .|\" {\n                result.push(1);\n            }\n            i += 1;\n\
    \        }\n    }\n    result", "\tlet mut res: Vec<isize> = Vec::new();\n\t\n\
    \tfor i in music_string.chars() {\n\t\tmatch i {\n\t\t\t'o' => res.push(4),\n\t\
    \t\t'o' => res.push(2),\n\t\t\t'.' => res.push(1),\n\t\t\t_ => res.push(0),\n\t\
    \t}\n\t}\n\tres", "    unimplemented!(\"Parse music string '{}' and return the\
    \ note duration\", music_string);", "    let map: HashMap<char, isize> = [\n \
    \       ('o', 4),\n        ('|', 2),\n        ('.', 1),\n    ].iter().cloned().collect();\n\
    \n    let mut count = 0;\n    let mut result = Vec::new();\n    for char in music_string.chars()\
    \ {\n        if let Some(value) = map.get(&char) {\n            count += value;\n\
    \        } else {\n            result.push(count);\n            count = 0;\n \
    \       }\n    }\n    result.push(count);\n    result", "    // TODO: parse music\
    \ string and return vector of beats!\n    let mut res = Vec::new();\n    let mut\
    \ beats = 0;\n    for m in music_string.split(\"|\") {\n        match m {\n  \
    \          \"o\" => {\n                res.push(4);\n                beats +=\
    \ 4;\n            }\n            \"oo\" => {\n                res.push(2);\n \
    \               res.push(2);\n                beats += 4;\n            }\n   \
    \         \"ooo\" => {\n                res.push(1);\n                res.push(1);\n\
    \                res.push(1);\n                beats += 3;\n            }\n  \
    \          \"oooo\" => {\n                res.push(1);\n                res.push(1);\n\
    \                res.push(1);\n                res.push(1);\n                beats\
    \ += 4;\n            }\n            \".\" => {\n                res.push(1);\n\
    \                beats += 1;\n            }\n            _ => println!(\"Unrecognized\
    \ character in music string!\"),\n        }\n    }\n    res", "    let parts =\
    \ music_string.split(|c| c == 'o' || c == '.' || c == '|').collect::<Vec<&str>>();\n\
    \    let mut ret = Vec::new();\n    for i in 0..parts.len() {\n        if parts[i]\
    \ == \"o\" {\n            ret.push(4);\n        } else if parts[i] == \"o|\" {\n\
    \            ret.push(2);\n        } else if parts[i] == \".|\" {\n          \
    \  ret.push(1);\n        }\n    }\n    ret", "    let mut arr: Vec<isize> = Vec::new();\n\
    \    let mut new_arr: Vec<char> = Vec::new();\n    let mut index = 0;\n    let\
    \ mut count = 0;\n    let mut counter = 0;\n    let mut position = 0;\n    let\
    \ mut prev = '.';\n    let mut check = false;\n    let music_string = music_string.chars().collect::<Vec<char>>();\n\
    \    for i in 0..music_string.len() {\n        if music_string[i] == '.' {\n \
    \           if prev == 'o' {\n                if index != 0 {\n              \
    \      arr.push(counter);\n                    count = 0;\n                  \
    \  counter = 0;\n                    prev = '.';\n                    new_arr.clear();\n\
    \                    index = 0;\n                }\n            }\n          \
    \  if i == 0 {\n                position = i;\n            }\n            if music_string[i]\
    \ == '|' {\n                if check {\n                    arr.push(1);\n   \
    \                 counter = 0;\n                    prev = '.';\n            \
    \        new_arr.clear();\n                    index = 0;\n                  \
    \  check = false;\n                }\n                counter += 1;\n        \
    \        count += 1;\n                prev = '.';\n                check = true;\n\
    \            } else {\n                counter += 1;\n                count +=\
    \ 1;\n                prev = '.';\n            }\n        } else if music_string[i]\
    \ == 'o' {\n            if prev == '.' {\n                if i != 0 {\n      \
    \              if count != 0 {\n                        arr.push(counter);\n \
    \                       counter = 0;\n                        count = 0;\n   \
    \                     prev = 'o';\n                        new_arr.clear();\n\
    \                        index = 0;\n                    }\n                }\n\
    \            }\n            if i == 0 {\n                position = i;\n     \
    \       }\n            if music_string[i] == '|' {\n                if check {\n\
    \                    arr.push(4);\n                    counter = 0;\n        \
    \            prev = 'o';\n                    new_arr.clear();\n             \
    \       index = 0;\n                    check = false;\n                }\n  \
    \              counter += 4;\n                count += 4;\n                prev\
    \ = 'o';", '    unimplemented!()', "    let mut output: Vec<isize> = Vec::new();\n\
    \    let mut current_length: isize = 4;\n    let mut cursor: usize = 0;\n    for\
    \ c in music_string.chars() {\n        if c == '|' {\n            output.push(current_length);\n\
    \            current_length = 4;\n            cursor += 1;\n        } else if\
    \ c == '.' {\n            current_length /= 2;\n        }\n    }\n    output",
  "    let mut result = Vec::new();\n    let mut i = 0;\n    while i < music_string.len()\
    \ {\n        match music_string.chars().nth(i).unwrap() {\n            'o' =>\
    \ {\n                result.push(4);\n                i += 1;\n            }\n\
    \            'o' => {\n                result.push(2);\n                i += 2;\n\
    \            }\n            '.' => {\n                result.push(1);\n      \
    \          i += 2;\n            }\n            _ => {}\n        }\n    }\n   \
    \ result", "    let mut beats = Vec::new();\n    let mut i = 0;\n    while i <\
    \ music_string.len() {\n        let mut count = 0;\n        let mut chars_left\
    \ = music_string.len() - i;\n        while (chars_left > 0) &&\n             \
    \ (music_string.chars().nth(i).unwrap() == 'o') {\n            count += 1;\n \
    \           i += 1;\n            chars_left -= 1;\n        }\n        if (chars_left\
    \ > 0) &&\n           (music_string.chars().nth(i).unwrap() == '|') {\n      \
    \      i += 1;\n            chars_left -= 1;\n        }\n        if count > 0\
    \ {\n            beats.push(if count == 1 { 2 } else { 4 });\n        } else {\n\
    \            beats.push(1);\n        }\n    }\n    beats", "    let mut result:\
    \ Vec<isize> = Vec::new();\n    let o = &music_string[..music_string.len() - 1];\n\
    \    for sym in o.chars() {\n        match sym {\n            'o' => result.push(4),\n\
    \            '|' => result.push(1),\n            _ => continue,\n        }\n \
    \   }\n    result", "    let mut result: Vec<isize> = Vec::new();\n    for c in\
    \ music_string.chars() {\n        match c {\n            'o' => result.push(4),\n\
    \            '|' => (),\n            '.' => result.push(1),\n            _ =>\
    \ panic!(\"unknown character\"),\n        }\n    }\n    result", "    let mut\
    \ result = Vec::new();\n    let chars: Vec<char> = music_string.chars().collect();\n\
    \    let mut i = 0;\n    while i < chars.len() {\n        if chars[i] == 'o' {\n\
    \            result.push(4);\n            i += 1;\n        } else if chars[i]\
    \ == 'o' && chars[i + 1] == '|' {\n            result.push(2);\n            i\
    \ += 2;\n        } else if chars[i] == '.' && chars[i + 1] == '|' {\n        \
    \    result.push(1);\n            i += 2;\n        }\n    }\n    result", "  \
    \  let mut ret: Vec<isize> = Vec::new();\n    let mut last_char: char = '\\0';\n\
    \    let mut last_last_char: char = '\\0';\n    let mut beats: isize = 0;\n  \
    \  for c in music_string.chars() {\n        if c == '|' {\n            if last_char\
    \ == '.' {\n                beats += 1;\n            } else if last_char == 'o'\
    \ {\n                beats += 2;\n            }\n            ret.push(beats);\n\
    \            beats = 0;\n        } else if c == '.' || c == 'o' {\n          \
    \  if last_char == 'o' && last_last_char == '|' {\n                beats += 2;\n\
    \            }\n            if last_char == '.' && last_last_char == '|' {\n \
    \               beats += 1;\n            }\n        }\n        last_last_char\
    \ = last_char;\n        last_char = c;\n    }\n    if last_char == 'o' {\n   \
    \     ret.push(beats + 2);\n    } else if last_char == '.' {\n        ret.push(beats\
    \ + 1);\n    } else {\n        ret.push(beats);\n    }\n    ret", "    let mut\
    \ result = Vec::new();\n    for ch in music_string.chars() {\n        if ch ==\
    \ 'o' {\n            result.push(4);\n        } else if ch == '.' {\n        \
    \    result.push(1);\n        } else if ch == '|' {\n            result.push(0);\n\
    \        }\n    }\n    result", '    unimplemented!()', "    let mut result: Vec<isize>\
    \ = Vec::new();\n    let mut sum: isize = 0;\n    for ch in music_string.chars()\
    \ {\n        if ch == 'o' {\n            sum += 4;\n        } else if ch == '|'\
    \ {\n            result.push(sum);\n            sum = 0;\n        } else {\n \
    \           sum += 1;\n        }\n    }\n    result.push(sum);\n    result", " \
    \   music_string.chars().fold(vec![], |mut acc, c| {\n        match c {\n    \
    \        'o' => acc.push(4),\n            'o' | '|' => acc.push(2),\n        \
    \    '.' | '|' => acc.push(1),\n            _ => {}\n        }\n        acc\n\
    \    })", "    let mut vec = Vec::new();\n    let mut index = 0;\n    for i in\
    \ music_string.chars() {\n        if i == 'o' {\n            vec.push(4);\n  \
    \      } else if i == '|' {\n            if music_string.chars().nth(index - 1).unwrap()\
    \ == 'o' {\n                vec.push(2);\n            } else {\n             \
    \   vec.push(1);\n            }\n        }\n        index += 1;\n    }\n    vec",
  '    unimplemented!();', "    let mut result = Vec::new();\n    let mut duration\
    \ = 0;\n    for ch in music_string.chars() {\n        match ch {\n           \
    \ 'o' => {\n                duration += 4;\n            }\n            'o' | '|'\
    \ => {\n                result.push(duration);\n                duration = 0;\n\
    \            }\n            '.' => {}\n            _ => {\n                panic!(\"\
    Unexpected character\")\n            }\n        }\n    }\n    result", "    let\
    \ mut r: Vec<isize> = Vec::new();\n    for mut b in music_string.split(\" \")\
    \ {\n        if &b[..1] == \"o\" {\n            r.push(4);\n        } else if\
    \ &b[..2] == \"o|\" {\n            r.push(2);\n        } else if &b[..2] == \"\
    .|\" {\n            r.push(1);\n        }\n    }\n    r", "    music_string.chars().fold(vec![],\
    \ |mut acc, c| {\n        match c {\n            'o' => acc.push(4),\n       \
    \     'o' | '|' => acc.push(2),\n            '.' | '|' => acc.push(1),\n     \
    \       _ => (),\n        }\n        acc\n    })", "    let mut result = Vec::new();\n\
    \    let mut iter = music_string.chars();\n    while let Some(c) = iter.next()\
    \ {\n        match c {\n            'o' => {\n                result.push(4);\n\
    \                iter.next();\n            }\n            '.' => {\n         \
    \       result.push(1);\n                iter.next();\n            }\n       \
    \     _ => {}\n        }\n    }\n    result", "    let mut beats: Vec<isize> =\
    \ Vec::new();\n    let mut notes = music_string.chars();\n    loop {\n       \
    \ match notes.next() {\n            Some('o') => beats.push(4),\n            Some('o')\
    \ => beats.push(4),\n            Some('o') => beats.push(4),\n            Some('o')\
    \ => beats.push(4),\n            Some('o') => beats.push(4),\n            Some('o')\
    \ => beats.push(4),\n            Some('o') => beats.push(4),\n            Some('o')\
    \ => beats.push(4),\n            Some('o') => beats.push(4),\n            Some('o')\
    \ => beats.push(4),\n            Some('o') => beats.push(4),\n            Some('o')\
    \ => beats.push(4),\n            Some('o') => beats.push(4),\n            Some('o')\
    \ => beats.push(4),\n            Some('o') => beats.push(4),\n            Some('o')\
    \ => beats.push(4),\n            Some('o') => beats.push(4),\n            Some('o')\
    \ => beats.push(4),\n            Some('o') => beats.push(4),\n            Some('o')\
    \ => beats.push(4),\n            Some('o') => beats.push(4),\n            Some('o')\
    \ => beats.push(4),\n            Some('o') => beats.push(4),\n            Some('o')\
    \ => beats.push(4),\n            Some('o') => beats.push(4),\n            Some('o')\
    \ => beats.push(4),\n            Some('o') => beats.push(4),\n            Some('o')\
    \ => beats.push(4),\n            Some('o') => beats.push(4),\n            Some('o')\
    \ => beats.push(4),\n            Some('o') => beats.push(4),\n            Some('o')\
    \ => beats.push(4),\n            Some('o') => beats.push(4),\n            Some('o')\
    \ => beats.push(4),\n            Some('o') => beats.push(4),\n            Some('o')\
    \ => beats.push(4),\n            Some", '    unimplemented!()', "    music_string.replace(\"\
    o\", \"oooo\").replace(\".\", \"o|o|\").split(\"|\").map(|s| {\n        s.chars().count()\
    \ as isize\n    }).collect()", "    let steps = music_string.chars().collect::<Vec<char>>();\n\
    \    let mut all_steps = Vec::new();\n    let mut current_step = Vec::new();\n\
    \    for i in 0..steps.len() {\n        if steps[i] == '\\n' {\n            all_steps.push(current_step);\n\
    \            current_step = Vec::new();\n        } else {\n            current_step.push(steps[i]);\n\
    \        }\n    }\n    all_steps.push(current_step);\n    let mut beats = Vec::new();\n\
    \    for s in all_steps {\n        let mut c = 0;\n        for i in 0..s.len()\
    \ {\n            if s[i] == '.' {\n                c += 1;\n            } else\
    \ if s[i] == 'o' {\n                c += 4;\n            } else if s[i] == '|'\
    \ {\n                beats.push(c);\n                c = 0;\n            }\n \
    \       }\n        beats.push(c);\n    }\n    beats", "    if music_string.len()\
    \ == 0 {\n        return vec![];\n    }\n    let mut beats: Vec<isize> = vec![];\n\
    \    for c in music_string.chars() {\n        let beat = match c {\n         \
    \   'o' => 4,\n            '|' => 2,\n            '.' => 1,\n            _ =>\
    \ 0,\n        };\n        if let Some(last_beat) = beats.last_mut() {\n      \
    \      *last_beat += beat;\n        } else {\n            beats.push(beat);\n\
    \        }\n    }\n    return beats;", "    let mut tempo: Vec<isize> = Vec::new();\n\
    \    let mut aux: String = String::new();\n    for i in music_string.chars() {\n\
    \        if (i != '.') && (i != '|') && (i != 'o') {\n            if aux == \"\
    o\".to_string() {\n                tempo.push(4);\n            } else if aux ==\
    \ \"o|\".to_string() {\n                tempo.push(2);\n            } else if\
    \ aux == \".|\".to_string() {\n                tempo.push(1);\n            }\n\
    \            aux = i.to_string();\n        } else {\n            aux.push(i);\n\
    \        }\n    }\n    if aux == \"o\".to_string() {\n        tempo.push(4);\n\
    \    } else if aux == \"o|\".to_string() {\n        tempo.push(2);\n    } else\
    \ if aux == \".|\".to_string() {\n        tempo.push(1);\n    }\n    tempo", " \
    \   let mut beats = Vec::new();\n    for m in music_string.chars() {\n       \
    \ let v = match m {\n            'o' => 4,\n            'o' | '|' => 2,\n    \
    \        '.' | '|' => 1,\n            _ => 0,\n        };\n        beats.push(v);\n\
    \    }\n    beats", "    let mut beats: Vec<isize> = Vec::new();\n    let mut\
    \ total_beats: isize = 0;\n    let mut index: usize = 0;\n    let chars: Vec<char>\
    \ = music_string.chars().collect();\n    while index < chars.len() {\n       \
    \ if chars[index] == 'o' {\n            beats.push(4);\n            total_beats\
    \ += 4;\n            index += 1;\n        } else if chars[index] == 'o' && chars[index\
    \ + 1] == '|' {\n            beats.push(2);\n            total_beats += 2;\n \
    \           index += 2;\n        } else if chars[index] == '.' && chars[index\
    \ + 1] == '|' {\n            beats.push(1);\n            total_beats += 1;\n \
    \           index += 2;\n        } else {\n            panic!(\"Got unexpected\
    \ note: {}\", chars[index]);\n        }\n    }\n    return beats;", '    unimplemented!();',
  "    let mut l = Vec::new();\n    for c in music_string.chars() {\n        match\
    \ c {\n            'o' => l.push(4),\n            '|' => l.push(1),\n        \
    \    _ => continue,\n        }\n    }\n    l", "    let mut res = Vec::new();\n\
    \    let mut temp_vec = Vec::new();\n    let chars = music_string.chars().collect::<Vec<char>>();\n\
    \    let mut i = 0;\n    while i < chars.len() {\n        if chars[i] == 'o' {\n\
    \            let j = i;\n            temp_vec.push(4);\n            i += 1;\n\
    \            if i < chars.len() && chars[i] == '|' {\n                i += 1;\n\
    \            }\n            if i < chars.len() && chars[i] == ' ' {\n        \
    \        i += 1;\n            }\n            else {\n                i = j;\n\
    \            }\n        }\n        else if chars[i] == '.' {\n            let\
    \ j = i;\n            temp_vec.push(1);\n            i += 1;\n            if i\
    \ < chars.len() && chars[i] == '|' {\n                i += 1;\n            }\n\
    \            if i < chars.len() && chars[i] == ' ' {\n                i += 1;\n\
    \            }\n            else {\n                i = j;\n            }\n  \
    \      }\n        else if chars[i] == ' ' {\n            let temp_sum = temp_vec.iter().sum();\n\
    \            if temp_sum == 4 {\n                res.push(4);\n            }\n\
    \            else if temp_sum == 2 {\n                res.push(2);\n         \
    \   }\n            else if temp_sum == 1 {\n                res.push(1);\n   \
    \         }\n            temp_vec.clear();\n            i += 1;\n        }\n \
    \       else {\n            i += 1;\n        }\n    }\n    if !temp_vec.is_empty()\
    \ {\n        let temp_sum = temp_vec.iter().sum();\n        if temp_sum == 4 {\n\
    \            res.push(4);\n        }\n        else if temp_sum == 2 {\n      \
    \      res.push(2);\n        }\n        else if temp_sum == 1 {\n            res.push(1);\n\
    \        }\n    }\n    res", "    let mut output = Vec::new();\n    for char in\
    \ music_string.chars() {\n        let add = match char {\n            'o' => 4,\n\
    \            'o' | '.' => 2,\n            '|' => 1,\n            _ => 0,\n   \
    \     };\n        let last = output.last().unwrap_or(&0);\n        output.push(last\
    \ + add);\n    }\n    output", "    let mut res = Vec::new();\n    for c in music_string.chars()\
    \ {\n        match c {\n            'o' => res.push(4),\n            '|' => res.pop(),\n\
    \            _ => continue,\n        }\n    }\n    res", "    music_string.chars().collect::<Vec<char>>().windows(2).map(|chars|\
    \ {\n        match chars {\n            ['o', '|'] => 2,\n            ['.', '|']\
    \ => 1,\n            ['o', _] => 4,\n            _ => panic!(\"Unexpected char\
    \ sequence {}\", chars.iter().collect::<String>()),\n        }\n    }).collect()",
  "    // TODO: finish implementation\n    let mut result = Vec::new();\n    let mut\
    \ bits = music_string.chars();\n    loop {\n        let n = bits.next();\n   \
    \     match n {\n            Some('o') => {\n                if bits.next() ==\
    \ Some('|') {\n                    result.push(2);\n                } else {\n\
    \                    result.push(4);\n                }\n            }\n     \
    \       Some('.') => {\n                if bits.next() == Some('|') {\n      \
    \              result.push(1);\n                } else {\n                   \
    \ break;\n                }\n            }\n            Some('|') => {\n     \
    \           continue;\n            }\n            _ => {\n                break;\n\
    \            }\n        }\n    }\n    result", "    let mut music: Vec<isize>\
    \ = Vec::new();\n    let mut index = 0;\n    while index < music_string.len()\
    \ {\n        let c = music_string.chars().nth(index).unwrap();\n        if c ==\
    \ 'o' {\n            music.push(4);\n            index += 1;\n        } else if\
    \ c == '.' {\n            let next = music_string.chars().nth(index + 1).unwrap();\n\
    \            if next == '|' {\n                music.push(1);\n              \
    \  index += 2;\n            } else {\n                panic!(\"Invalid music string\"\
    );\n            }\n        } else if c == 'o' {\n            let next = music_string.chars().nth(index\
    \ + 1).unwrap();\n            if next == '|' {\n                music.push(2);\n\
    \                index += 2;\n            } else {\n                panic!(\"\
    Invalid music string\");\n            }\n        } else {\n            panic!(\"\
    Invalid music string\");\n        }\n    }\n    music", "    unimplemented!(\"\
    Parsing: '{}'\", music_string);", "    music_string.lines().flat_map(|line| {\n\
    \        line.split(' ').flat_map(|notes| {\n            notes.chars().map(|char|\
    \ match char {\n                'o' => 4,\n                'o' | '|' => 2,\n \
    \               '.' | '|' => 1,\n                _ => 0,\n            })\n   \
    \     })\n    }).collect()", "    music_string.chars().map(|x| {\n        match\
    \ x {\n            'o' => 4,\n            'o' => 2,\n            '.' => 1,\n \
    \           _ => 0,\n        }\n    }).collect()", '    unimplemented!()', " \
    \   let mut result = Vec::new();\n    let mut chars = music_string.chars();\n\
    \    while let Some(c) = chars.next() {\n        match c {\n            'o' =>\
    \ result.push(4),\n            '.' => result.push(1),\n            '|' => (),\n\
    \            _ => panic!(\"Invalid character\")\n        }\n    }\n    result",
  "    let mut beats = vec![];\n    for c in music_string.chars() {\n        match\
    \ c {\n            'o' => beats.push(4),\n            'o' | '|' => beats.push(2),\n\
    \            '.' | '|' => beats.push(1),\n            _ => beats.push(0),\n  \
    \      }\n    }\n    beats", '    unimplemented!()', "    let mut result = Vec::new();\n\
    \    let mut current_value = 0;\n    for c in music_string.chars() {\n       \
    \ if c == 'o' {\n            result.push(current_value);\n            current_value\
    \ = 0;\n            result.push(4);\n        } else if c == '|' {\n          \
    \  current_value += 1;\n        }\n    }\n    result.push(current_value);\n  \
    \  result", "    let mut result: Vec<isize> = Vec::new();\n    let mut notes:\
    \ Vec<char> = music_string.chars().collect();\n    let mut note: Vec<char> = Vec::new();\n\
    \    for i in 0..notes.len() {\n        if notes[i] == '|' {\n            if note.contains(&'.')\
    \ {\n                result.push(1);\n            } else if note.contains(&'o')\
    \ {\n                result.push(2);\n            } else {\n                result.push(4);\n\
    \            }\n            note.clear();\n        } else {\n            note.push(notes[i]);\n\
    \        }\n    }\n    result", "    let mut b: Vec<isize> = Vec::new();\n   \
    \ let mut s: String = String::new();\n    for c in music_string.chars() {\n  \
    \      if c == 'o' {\n            b.push(4);\n        } else if c == '.' {\n \
    \           b.push(1);\n        } else if c == '|' {\n            b.push(2);\n\
    \        }\n    }\n    return b;", "    music_string.split('|').map(|note| match\
    \ note {\n        \"o\" | \"o\\n\" => 4,\n        _ => 1,\n    }).collect()",
  "    use std::collections::HashMap;\n    let mut music = Vec::new();\n    let mut\
    \ count = 0;\n    let mut map = HashMap::new();\n    map.insert(\"o\", 4);\n \
    \   map.insert(\"o|\", 2);\n    map.insert(\".|\", 1);\n    while count < music_string.len()\
    \ {\n        if let Some(x) = map.get(&music_string[count..count + 2]) {\n   \
    \         music.push(*x);\n            count += 2;\n        } else if let Some(x)\
    \ = map.get(&music_string[count..count + 1]) {\n            music.push(*x);\n\
    \            count += 1;\n        } else {\n            count += 1;\n        }\n\
    \    }\n    music", "    return music_string.replace(\"o|\", \".\")\n        \
    \               .replace(\"o\", \"....\")\n                       .chars()\n \
    \                      .map(|c| {\n                           if c == '.' { 1\
    \ } else { 0 }\n                       })\n                       .collect::<Vec<isize>>();",
  "    let mut length: isize = 4;\n    let mut res: Vec<isize> = Vec::new();\n   \
    \ let mut str = String::new();\n    for c in music_string.chars() {\n        if\
    \ c != ' ' {\n            str.push(c);\n        } else {\n            let v: Vec<char>\
    \ = str.chars().collect();\n            for s in v {\n                if s ==\
    \ '.' {\n                    length = length / 2;\n                } else if s\
    \ == '|' {\n                    res.push(length);\n                    length\
    \ = 4;\n                }\n            }\n            str = String::new();\n \
    \       }\n    }\n    res", '    unimplemented!("Parse the music string: {}",
    music_string);', "    let mut vec = Vec::new();\n    let temp = music_string.split(\"\
    \ \");\n    for x in temp {\n        let mut temp = x.chars();\n        let mut\
    \ temp2 = String::new();\n        loop {\n            let y = temp.next();\n \
    \           if y.is_none() {\n                break;\n            }\n        \
    \    temp2.push(y.unwrap());\n        }\n        if temp2 == \"o\" {\n       \
    \     vec.push(4);\n        } else if temp2 == \"o|\" {\n            vec.push(2);\n\
    \        } else if temp2 == \".|\" {\n            vec.push(1);\n        }\n  \
    \  }\n    vec", "    let mut res = Vec::new();\n    let mut cnt = 0;\n    for\
    \ c in music_string.chars() {\n        if c == 'o' {\n            cnt += 4;\n\
    \        } else if c == '|' {\n            res.push(cnt);\n            cnt = 0;\n\
    \        } else {\n            cnt += 1;\n        }\n    }\n    res.push(cnt);\n\
    \    res", "    use std::collections::VecDeque;\n    let mut buffer = music_string.as_bytes().iter().fold(VecDeque::new(),\
    \ |mut acc, c| {\n        acc.push_back(*c);\n        acc\n    });\n    let mut\
    \ result = Vec::new();\n    while !buffer.is_empty() {\n        let note = buffer.pop_front().unwrap();\n\
    \        if note == b'o' {\n            result.push(4);\n        } else if note\
    \ == b'.' {\n            let next = buffer.pop_front().unwrap();\n           \
    \ if next == b'|' {\n                result.push(1);\n            } else {\n \
    \               result.push(0);\n            }\n        } else if note == b'o'\
    \ {\n            let next = buffer.pop_front().unwrap();\n            if next\
    \ == b'|' {\n                result.push(2);\n            } else {\n         \
    \       result.push(0);\n            }\n        } else {\n            result.push(0);\n\
    \        }\n    }\n    result", "    music_string.replace(\"o||\", \"o|.|\").replace(\"\
    |\", \"\").replace(\"o\", \"4\").replace(\".\", \"1\").split(\"\").fold(vec![],\
    \ |mut v, c| {\n        if c.len() > 0 {\n            v.push(c.parse::<isize>().unwrap());\n\
    \        }\n        v\n    })", "    let mut beats: Vec<isize> = Vec::new();\n\
    \    let mut last_char: char = ' ';\n    let mut duration: isize = 0;\n    for\
    \ c in music_string.chars() {\n        match c {\n            '|' => {\n     \
    \           if last_char == 'o' {\n                    duration = 4;\n       \
    \         } else if last_char == '.' {\n                    duration = 1;\n  \
    \              } else {\n                    panic!(\"Illegal music string.\"\
    );\n                }\n                beats.push(duration);\n               \
    \ duration = 0;\n            }\n            'o' => {\n                last_char\
    \ = 'o';\n            }\n            '.' => {\n                last_char = '.';\n\
    \            }\n            _ => {}\n        }\n    }\n    beats", "    let string_len\
    \ = music_string.len();\n    if string_len == 0 {\n        return vec![];\n  \
    \  }\n    let mut sum = 0;\n    let mut res: Vec<isize> = vec![];\n    for symbol\
    \ in music_string.chars() {\n        if symbol == 'o' {\n            sum += 4;\n\
    \        } else if symbol == '|' {\n            res.push(sum);\n            sum\
    \ = 0;\n        } else {\n            sum += 1;\n        }\n    }\n    res.push(sum);\n\
    \    res", '    vec![]', "    let notes = music_string.chars();\n    let mut result:\
    \ Vec<isize> = Vec::new();\n    let mut char_count = 0;\n    for c in notes {\n\
    \        match c {\n            '.' => {\n                if char_count == 0 {\n\
    \                    result.push(1);\n                } else {\n             \
    \       let index = result.len() - 1;\n                    result[index] += 1;\n\
    \                }\n            }\n            'o' => {\n                if char_count\
    \ == 0 {\n                    result.push(4);\n                } else {\n    \
    \                let index = result.len() - 1;\n                    result[index]\
    \ += 4;\n                }\n            }\n            '|' => {\n            \
    \    char_count += 1;\n            }\n            _ => {}\n        }\n    }\n\
    \    result", "    // Your code here!\n    unimplemented!();", "    let mut music_notes\
    \ = vec![];\n    let chars: Vec<char> = music_string.chars().collect();\n    let\
    \ mut count = 0;\n    for c in chars {\n        if c == 'o' {\n            music_notes.push(4);\n\
    \            count += 4;\n        } else if c == '|' {\n            count += 1;\n\
    \        } else if c == '.' {\n            count = 0;\n        }\n    }\n    music_notes",
  "    let mut res = Vec::new();\n    for c in music_string.chars() {\n        if\
    \ c == 'o' {\n            res.push(4);\n        } else if c == '|' {\n       \
    \     res.push(-1);\n        }\n    }\n    res", "    let mut result = Vec::new();\n\
    \    let mut beats = 0;\n    for c in music_string.chars() {\n        if c ==\
    \ 'o' {\n            result.push(4);\n            beats += 4;\n        } else\
    \ if c == '|' {\n            result.push(1);\n            beats += 1;\n      \
    \  } else if c == '.' {\n            result.push(0);\n        }\n    }\n    //println!(\"\
    Beats: {}\", beats);\n    result", "    let mut res = Vec::new();\n    let mut\
    \ buf = Vec::new();\n    for c in music_string.chars() {\n        match c {\n\
    \            '|' => {\n                let value = buf.iter().cloned().fold(0,\
    \ |acc, x| acc * 10 + x);\n                buf.clear();\n                res.push(value\
    \ as isize);\n            }\n            'o' => {\n                buf.push(4);\n\
    \            }\n            '.' => {\n                buf.push(1);\n         \
    \   }\n            '-' => {\n                buf.push(2);\n            }\n   \
    \         _ => (),\n        }\n    }\n    res", "    let mut ret: Vec<isize> =\
    \ Vec::new();\n    let mut it = music_string.chars();\n    loop {\n        match\
    \ it.next() {\n            Some('o') => {\n                ret.push(4);\n    \
    \            match it.next() {\n                    Some('|') => (),\n       \
    \             Some(c) => panic!(\"bad char {}, expected |\", c),\n           \
    \         None => (),\n                }\n            }\n            Some('.')\
    \ => {\n                ret.push(1);\n                match it.next() {\n    \
    \                Some('|') => (),\n                    Some(c) => panic!(\"bad\
    \ char {}, expected |\", c),\n                    None => (),\n              \
    \  }\n            }\n            Some('o') => {\n                ret.push(2);\n\
    \                match it.next() {\n                    Some('|') => (),\n   \
    \                 Some(c) => panic!(\"bad char {}, expected |\", c),\n       \
    \             None => (),\n                }\n            }\n            Some(c)\
    \ => panic!(\"bad char {}\", c),\n            None => break,\n        }\n    }\n\
    \    ret", "    music_string.chars().map(|c| {\n        match c {\n          \
    \  'o' => 4,\n            '|' => 1,\n            '.' => 0,\n            _ => -1,\n\
    \        }\n    }).collect()", "    let mut iter = music_string.split(\" \");\n\
    \    let mut result = Vec::new();\n    while let Some(value) = iter.next() {\n\
    \        let value = value.replace(\"|\", \"\");\n        match value.as_str()\
    \ {\n            \"o\" => result.push(4),\n            \"o\" => result.push(2),\n\
    \            \".\" => result.push(1),\n            _ => panic!(\"Not an actual\
    \ note!\"),\n        }\n    }\n    result", "    let mut result: Vec<isize> =\
    \ Vec::new();\n    let mut accumulator: isize = 0;\n    for c in music_string.chars()\
    \ {\n        match c {\n            'o' => {\n                accumulator += 4;\n\
    \            }\n            'o' | '|' => {\n                accumulator += 2;\n\
    \            }\n            '.' | '|' => {\n                accumulator += 1;\n\
    \            }\n            ' ' => {\n                result.push(accumulator);\n\
    \                accumulator = 0;\n            }\n            _ => {}\n      \
    \  }\n    }\n    result.push(accumulator);\n    result", "    let mut result =\
    \ Vec::new();\n    for note in music_string.chars() {\n        match note {\n\
    \            'o' => result.push(4),\n            'o' | '|' => result.push(2),\n\
    \            '.' | '|' => result.push(1),\n            _ => (),\n        }\n \
    \   }\n    result", "    let mut result = Vec::new();\n    let mut last_bar =\
    \ false;\n    for c in music_string.chars() {\n        match c {\n           \
    \ 'o' => {\n                if last_bar {\n                    result.push(2);\n\
    \                } else {\n                    result.push(4);\n             \
    \   }\n                last_bar = false;\n            }\n            '|' => {\n\
    \                last_bar = true;\n            }\n            _ => {}\n      \
    \  }\n    }\n    result", "    let mut vector: Vec<isize> = Vec::new();\n    let\
    \ mut last_note: usize = 0;\n    for note in music_string.chars() {\n        match\
    \ note {\n            'o' => {\n                vector.push(4);\n            \
    \    last_note = 4;\n            }\n            'o' | '|' => {\n             \
    \   vector.push(2);\n                last_note = 2;\n            }\n         \
    \   '.' | '|' => {\n                vector.push(1);\n                last_note\
    \ = 1;\n            }\n            '\\\\' => {\n                vector.push(last_note);\n\
    \            }\n            _ => (),\n        }\n    }\n    vector", '    unimplemented!()',
  "\tlet mut music_string = music_string;\n\tlet mut parsed_music: Vec<isize> = Vec::new();\n\
    \tlet mut beat: isize = 0;\n\twhile music_string.len() > 0 {\n\t\tif music_string.starts_with(\"\
    o\") {\n\t\t\tparsed_music.push(4 - beat);\n\t\t\tbeat = 0;\n\t\t\tmusic_string\
    \ = music_string.chars().skip(1).collect();\n\t\t} else if music_string.starts_with(\"\
    o|\") {\n\t\t\tparsed_music.push(2 - beat);\n\t\t\tbeat = 0;\n\t\t\tmusic_string\
    \ = music_string.chars().skip(2).collect();\n\t\t} else if music_string.starts_with(\"\
    .|\") {\n\t\t\tparsed_music.push(1 - beat);\n\t\t\tbeat = 0;\n\t\t\tmusic_string\
    \ = music_string.chars().skip(2).collect();\n\t\t} else if music_string.starts_with('|')\
    \ {\n\t\t\tbeat = 0;\n\t\t\tmusic_string = music_string.chars().skip(1).collect();\n\
    \t\t} else {\n\t\t\tbeat += 1;\n\t\t\tmusic_string = music_string.chars().skip(1).collect();\n\
    \t\t}\n\t}\n\tparsed_music", "    let mut result: Vec<isize> = Vec::new();\n \
    \   let mut i = 0;\n    let mut is_last_digit = false;\n    for c in music_string.chars()\
    \ {\n        match c {\n            'o' => {\n                result.push(4);\n\
    \                is_last_digit = true;\n            }\n            '.' => {\n\
    \                result.push(1);\n                is_last_digit = true;\n    \
    \        }\n            '.' => {\n                if is_last_digit {\n       \
    \             result[i] = result[i] / 2;\n                } else {\n         \
    \           result.push(1);\n                    result[i] = result[i] / 2;\n\
    \                }\n                is_last_digit = true;\n            }\n   \
    \         '|' => {\n                if is_last_digit {\n                    result[i]\
    \ = result[i] / 2;\n                } else {\n                    result.push(1);\n\
    \                    result[i] = result[i] / 2;\n                }\n         \
    \       is_last_digit = false;\n            }\n            _ => {\n          \
    \      result.push(0);\n                is_last_digit = false;\n            }\n\
    \        }\n        i += 1;\n    }\n    result", "    let mut result: Vec<isize>\
    \ = Vec::new();\n    let mut sum = 0;\n    for char in music_string.chars() {\n\
    \        match char {\n            'o' => {\n                result.push(4 - sum);\n\
    \                sum = 0;\n            }\n            '|' => {\n             \
    \   sum += 1;\n            }\n            '.' => {\n                result.push(1\
    \ - sum);\n                sum = 0;\n            }\n            _ => {}\n    \
    \    }\n    }\n    result", "    // Your code goes here!\n    let mut sum = 0;\n\
    \    let mut result = Vec::new();\n    let input: Vec<char> = music_string.chars().collect();\n\
    \    for i in input {\n        match i {\n            'o' => {\n             \
    \   sum += 4;\n                result.push(4);\n            }\n            '|'\
    \ => {\n                if sum == 0 {\n                    sum += 2;\n       \
    \             result.push(2);\n                } else {\n                    sum\
    \ = 0;\n                }\n            }\n            '.' => {\n             \
    \   sum += 1;\n                result.push(1);\n            }\n            _ =>\
    \ {}\n        }\n    }\n    result", '    unimplemented!()', "    let mut length:\
    \ Vec<isize> = Vec::new();\n    let mut is_whole: bool = false;\n    let mut is_half:\
    \ bool = false;\n    let mut is_quarter: bool = false;\n    let mut whole_counter:\
    \ isize = 0;\n    let mut half_counter: isize = 0;\n    let mut quarter_counter:\
    \ isize = 0;\n    for note in music_string.chars() {\n        if note == 'o' {\n\
    \            if is_half {\n                length.push(half_counter * 2);\n  \
    \              half_counter = 0;\n                is_half = false;\n         \
    \   }\n            if is_quarter {\n                length.push(quarter_counter);\n\
    \                quarter_counter = 0;\n                is_quarter = false;\n \
    \           }\n            is_whole = true;\n            whole_counter += 1;\n\
    \        } else if note == 'o' && note == '|' {\n            if is_whole {\n \
    \               length.push(whole_counter * 4);\n                whole_counter\
    \ = 0;\n                is_whole = false;\n            }\n            if is_quarter\
    \ {\n                length.push(quarter_counter);\n                quarter_counter\
    \ = 0;\n                is_quarter = false;\n            }\n            is_half\
    \ = true;\n            half_counter += 1;\n        } else if note == '.' && note\
    \ == '|' {\n            if is_whole {\n                length.push(whole_counter\
    \ * 4);\n                whole_counter = 0;\n                is_whole = false;\n\
    \            }\n            if is_half {\n                length.push(half_counter\
    \ * 2);\n                half_counter = 0;\n                is_half = false;\n\
    \            }\n            is_quarter = true;\n            quarter_counter +=\
    \ 1;\n        }\n    }\n    if is_whole {\n        length.push(whole_counter *\
    \ 4);\n    }\n    if is_half {\n        length.push(half_counter * 2);\n    }\n\
    \    if is_quarter {\n        length.push(quarter_counter);\n    }\n    length",
  "    let mut result = Vec::new();\n    let chars: Vec<char> = music_string.chars().collect();\n\
    \    let mut i = 0;\n    while i < chars.len() {\n        match chars[i] {\n \
    \           'o' => {\n                result.push(4);\n                i += 1;\n\
    \            }\n            'o' if chars[i + 1] == '|' => {\n                result.push(2);\n\
    \                i += 2;\n            }\n            '.' if chars[i + 1] == '|'\
    \ => {\n                result.push(1);\n                i += 2;\n           \
    \ }\n            _ => {\n                i += 1;\n            }\n        }\n \
    \   }\n    result", "    let mut result = Vec::new();\n    let chars = music_string.chars().collect::<Vec<char>>();\n\
    \    let mut pos = 0;\n    while pos < chars.len() {\n        let c = chars[pos];\n\
    \        match c {\n            'o' => {\n                result.push(4);\n  \
    \              pos += 1;\n            }\n            'o' => {\n              \
    \  result.push(2);\n                pos += 2;\n            }\n            '.'\
    \ => {\n                result.push(1);\n                pos += 2;\n         \
    \   }\n            _ => {\n                result.push(1);\n                pos\
    \ += 1;\n            }\n        }\n    }\n    result", "    let mut output = Vec::new();\n\
    \    let mut index = 0;\n    while index < music_string.len() {\n        let current_char\
    \ = music_string.chars().nth(index).unwrap();\n        if current_char == 'o'\
    \ {\n            output.push(4);\n            index += 1;\n        } else if current_char\
    \ == 'o' {\n            output.push(2);\n            index += 2;\n        } else\
    \ if current_char == '.' {\n            output.push(1);\n            index +=\
    \ 2;\n        } else {\n            index += 1;\n        }\n    }\n    output",
  "    unimplemented!(\"Return the number of beats for each note in the music string\
    \ '{}'\", music_string);", "    unimplemented!(\"I don't think I'd enjoy listening\
    \ to: {:?}\", music_string);", '    unimplemented!("fn parse_music(music_string:
    {}) -> Vec<isize>", music_string);', "    let mut result: Vec<isize> = Vec::new();\n\
    \    let split_string: Vec<&str> = music_string.split(' ').collect();\n    for\
    \ i in split_string {\n        match i {\n            \"o\" => result.push(4),\n\
    \            \"o|\" => result.push(2),\n            \".|\" => result.push(1),\n\
    \            _ => result.push(0),\n        }\n    }\n    result", '    unimplemented!()',
  "    let mut vec: Vec<isize> = Vec::new();\n    for c in music_string.chars() {\n\
    \        let beat = match c {\n            'o' => 4,\n            '|' => -2,\n\
    \            '.' => 1,\n            _ => 0,\n        };\n        vec.push(beat);\n\
    \    }\n    vec", "    music_string.split('.').map(|s| {\n        match s {\n\
    \            \"o\" => 4,\n            \"o|\" => 2,\n            \"|\" => 1,\n\
    \            _ => 0,\n        }\n    }).collect()", "    unimplemented!(\"Parse\
    \ the music string '{}'\", music_string);", "    let mut beats: Vec<isize> = Vec::new();\n\
    \    let mut last_state = 'o';\n    for ch in music_string.chars() {\n       \
    \ match ch {\n            'o' => {\n                if last_state == 'o' {\n \
    \                   beats.push(4);\n                } else {\n               \
    \     beats.push(2);\n                }\n                last_state = 'o';\n \
    \           }\n            '.' => {\n                if last_state == 'o' {\n\
    \                    beats.push(1);\n                } else {\n              \
    \      beats.push(0);\n                }\n                last_state = '.';\n\
    \            }\n            '|' => {\n                last_state = '|';\n    \
    \        }\n            _ => (),\n        }\n    }\n    beats", "    let mut result\
    \ = Vec::new();\n    let mut beats = 4;\n    for c in music_string.chars() {\n\
    \        match c {\n            'o' => {\n                result.push(beats);\n\
    \                beats = 4;\n            }\n            '|' => {\n           \
    \     beats /= 2;\n            }\n            '.' => {\n                result.push(beats);\n\
    \                beats = 4;\n            }\n            _ => {}\n        }\n \
    \   }\n    result", "    let whole_note = 4;\n    let half_note = 2;\n    let\
    \ quarter_note = 1;\n\n    music_string\n        .split(' ')\n        .map(|x|\
    \ match x {\n            \"o\" => whole_note,\n            \"o|\" => half_note,\n\
    \            \".|\" => quarter_note,\n            _ => panic!(\"Can't parse note:\
    \ {}\", x),\n        })\n        .collect()", "    let mut notes: Vec<char> =\
    \ music_string.chars().collect();\n    let mut i = 0;\n    let mut result: Vec<isize>\
    \ = Vec::new();\n    while i < notes.len() {\n        match notes[i] {\n     \
    \       'o' => {\n                result.push(4);\n                i += 1;\n \
    \           }\n            '.' => {\n                if notes[i + 1] == '|' {\n\
    \                    result.push(1);\n                    i += 2;\n          \
    \      } else {\n                    i += 1;\n                }\n            }\n\
    \            'o' => {\n                if notes[i + 1] == '|' {\n            \
    \        result.push(2);\n                    i += 2;\n                } else\
    \ {\n                    i += 1;\n                }\n            }\n         \
    \   _ => {\n                i += 1;\n            }\n        }\n    }\n    result",
  "    music_string.split('|').map(|x| match x {\n        \"o\" => 4,\n        \"\
    oo\" => 2,\n        \"o.\" => 1,\n        \"..\" => 1,\n        \"...\" => 1,\n\
    \        _ => 0,\n    }).collect()", "    let mut noten = Vec::new();\n    let\
    \ mut current_note = 0;\n    for c in music_string.chars() {\n        match c\
    \ {\n            'o' => current_note += 4,\n            '|' => {\n           \
    \     noten.push(current_note);\n                current_note = 0;\n         \
    \   }\n            '.' => current_note += 1,\n            _ => {\n           \
    \     println!(\"Char '{}' konnte nicht gelesen werden\", c);\n            }\n\
    \        }\n    }\n    noten", "    let mut result = Vec::new();\n    let mut\
    \ index = 0;\n    let mut s = music_string.chars();\n    while let Some(c) = s.next()\
    \ {\n        match c {\n            'o' => {\n                result.push(4);\n\
    \                if let Some('|') = s.next() {\n                    if let Some('|')\
    \ = s.next() {\n                        result.push(0);\n                    }\n\
    \                }\n            }\n            '.' => {\n                result.push(1);\n\
    \                if let Some('|') = s.next() {\n                    if let Some('|')\
    \ = s.next() {\n                        result.push(0);\n                    }\n\
    \                }\n            }\n            _ => (),\n        }\n    }\n  \
    \  result", "    music_string.chars().filter_map(|ch| match ch {\n        'o'\
    \ => Some(4),\n        '|' => None,\n        '.' => Some(1),\n        _ => None,\n\
    \    }).scan(0, |state, ch| {\n        *state += ch;\n        Some(*state)\n \
    \   }).collect()", "    let whole_note = (1..5).collect::<Vec<_>>();\n    let\
    \ half_note = (1..3).collect::<Vec<_>>();\n    let quarter_note = vec![1];\n\n\
    \    let note_to_beat = [\n        (Regex::new(r\"o\").unwrap(), whole_note),\n\
    \        (Regex::new(r\"o\\|\").unwrap(), half_note),\n        (Regex::new(r\"\
    \\.\\|\").unwrap(), quarter_note),\n    ];\n\n    note_to_beat\n        .iter()\n\
    \        .flat_map(|(regex, notes)| {\n            regex\n                .find_iter(&music_string)\n\
    \                .map(|find| (find.start(), notes.to_vec()))\n        })\n   \
    \     .sorted_by_key(|(start, _)| *start)\n        .flat_map(|(_, notes)| notes)\n\
    \        .collect()", "    let half_note = \"o|\";\n    let quarter_note = \"\
    .|\";\n    let mut ret = Vec::new();\n    let mut start = 0;\n    let mut end\
    \ = 0;\n    let len = music_string.len();\n    while end < len {\n        if end+2\
    \ < len && &music_string[end..end+2] == half_note {\n            ret.push(2);\n\
    \            end += 2;\n        } else if end+2 < len && &music_string[end..end+2]\
    \ == quarter_note {\n            ret.push(1);\n            end += 2;\n       \
    \ } else if music_string[end..end+1] == \"o\" {\n            ret.push(4);\n  \
    \          end += 1;\n        } else {\n            panic!(\"Invalid music string\"\
    );\n        }\n    }\n    ret", "    let mut beat = 0;\n    let mut result = Vec::new();\n\
    \    for c in music_string.chars() {\n        match c {\n            'o' => {\n\
    \                beat += 4;\n                result.push(4);\n            }\n\
    \            '|' => {\n                beat += 1;\n                result.push(1);\n\
    \            }\n            '.' => {\n                beat += 1;\n           \
    \     result.push(1);\n            }\n            _ => {}\n        }\n    }\n\
    \    // println!(\"Number of beats: {}\", beat);\n    result", "    let mut beats:\
    \ Vec<isize> = Vec::new();\n    let mut beat: isize = 0;\n    for c in music_string.chars()\
    \ {\n        match c {\n            'o' => { beat += 4; },\n            'o' |\
    \ '|' => { beat += 2; },\n            '.' | '|' => { beat += 1; },\n         \
    \   _ => (),\n        }\n        beats.push(beat);\n    }\n    beats", "    let\
    \ music_string = music_string.chars().collect::<Vec<char>>();\n    let mut r:\
    \ Vec<isize> = Vec::new();\n    let mut beat = 0;\n    while beat < music_string.len()\
    \ {\n        if music_string[beat] == 'o' {\n            r.push(4);\n        \
    \    beat += 1;\n        } else if music_string[beat] == 'o' && music_string[beat\
    \ + 1] == '|' {\n            r.push(2);\n            beat += 2;\n        } else\
    \ if music_string[beat] == '.' && music_string[beat + 1] == '|' {\n          \
    \  r.push(1);\n            beat += 2;\n        }\n    }\n    r", "\tmusic_string.lines().flat_map(|line|\n\
    \t\tline.chars().filter_map(|ch| match ch {\n\t\t\t'o' => Some(4),\n\t\t\t'.'\
    \ => Some(1),\n\t\t\t'|' => None,\n\t\t\t_ => panic!(\"Unknown symbol in input:\
    \ '{}'\", ch),\n\t\t})).collect()", "    let notes = vec!['o', 'o', 'o', 'o',\
    \ '.', '.', '.', '.'];\n    let beats = vec![4, 4, 4, 4, 1, 1, 1, 1];\n    let\
    \ mut values = vec![];\n    let beat_string: Vec<char> = music_string.chars().collect();\n\
    \    let mut i = 0;\n    while i < beat_string.len() {\n        if beat_string[i]\
    \ == '.' {\n            values.push(1);\n            i += 2;\n        } else {\n\
    \            if beat_string[i + 1] == '|' {\n                values.push(2);\n\
    \                i += 3;\n            } else {\n                values.push(4);\n\
    \                i += 1;\n            }\n        }\n    }\n    values", "    let\
    \ mut note_lengths = Vec::new();\n    let mut total_offset = 0;\n    let mut last_note_was_sharp\
    \ = false;\n    let num_of_notes = music_string.len();\n    for (i, ch) in music_string.chars().enumerate()\
    \ {\n        if ch == '#' {\n            last_note_was_sharp = true;\n       \
    \     continue;\n        }\n        let offset = if last_note_was_sharp { 1 }\
    \ else { 0 };\n        last_note_was_sharp = false;\n        match ch {\n    \
    \        'o' => {\n                note_lengths.push(4 + offset);\n          \
    \      total_offset += 4;\n            }\n            '|' => {\n             \
    \   if (i + 1) < num_of_notes && music_string.chars().nth(i + 1).unwrap() == '.'\
    \ {\n                    note_lengths.push(1 + offset);\n                    total_offset\
    \ += 1;\n                } else {\n                    note_lengths.push(2 + offset);\n\
    \                    total_offset += 2;\n                }\n            }\n  \
    \          '.' => {\n                if i > 0 && music_string.chars().nth(i -\
    \ 1).unwrap() == '|' {\n                    continue;\n                } else\
    \ {\n                    note_lengths.push(1 + offset);\n                    total_offset\
    \ += 1;\n                }\n            }\n            _ => {}\n        }\n  \
    \  }\n    note_lengths", "    let mut res = Vec::new();\n    for i in music_string.chars()\
    \ {\n        match i {\n            'o' => res.push(4),\n            '|' => {\n\
    \                let last = res.pop().unwrap();\n                res.push(last\
    \ / 2);\n            }\n            '.' => {\n                let last = res.pop().unwrap();\n\
    \                res.push(last / 4);\n            }\n            _ => (),\n  \
    \      }\n    }\n    res", "    let mut r = vec![];\n    let mut c = 0;\n    for\
    \ ch in music_string.chars() {\n        if ch == 'o' {\n            c += 4;\n\
    \        } else if ch == '|' {\n            if c != 0 {\n                r.push(c);\n\
    \                c = 0;\n            }\n        }\n    }\n    if c != 0 {\n  \
    \      r.push(c);\n    }\n    r", "    let mut total_beats: isize = 0;\n    let\
    \ mut beats_list: Vec<isize> = Vec::new();\n    for char in music_string.chars()\
    \ {\n        if char == 'o' {\n            total_beats += 4;\n            beats_list.push(4);\n\
    \        } else if char == 'o' {\n            total_beats += 2;\n            beats_list.push(2);\n\
    \        } else if char == 'o' {\n            total_beats += 1;\n            beats_list.push(1);\n\
    \        }\n    }\n    beats_list", '    unimplemented!()', "    let mut beats:\
    \ Vec<isize> = Vec::new();\n    let mut buffer = music_string.chars();\n    let\
    \ mut curr_char = buffer.next();\n    while curr_char != None {\n        if curr_char.unwrap()\
    \ == 'o' {\n            beats.push(4);\n            curr_char = buffer.next();\n\
    \        } else if curr_char.unwrap() == '.' {\n            beats.push(1);\n \
    \           curr_char = buffer.next();\n            curr_char = buffer.next();\n\
    \        } else {\n            panic!(\"Input format error\");\n        }\n  \
    \  }\n    beats", "    let mut result = Vec::new();\n    for c in music_string.chars()\
    \ {\n        match c {\n            'o' => result.push(4),\n            '|' =>\
    \ result.push(1),\n            _ => (),\n        }\n    }\n    result", "    let\
    \ mut result = Vec::new();\n    for c in music_string.chars() {\n        if c\
    \ == 'o' {\n            result.push(4);\n        } else if c == '|' {\n      \
    \      if let Some(el) = result.last_mut() {\n                *el /= 2;\n    \
    \        }\n        } else if c == '.' {\n            result.push(1);\n      \
    \  }\n    }\n    result", "    let chars: Vec<char> = music_string.chars().collect();\n\
    \    let mut iter = chars.iter();\n    let mut counter = 0;\n    let mut list:\
    \ Vec<isize> = Vec::new();\n    loop {\n        match iter.next() {\n        \
    \    Some(c) => {\n                if c == &'o' {\n                    counter\
    \ += 4;\n                } else if c == &'o' && iter.next() == Some(&'|') {\n\
    \                    counter += 2;\n                } else if c == &'.' && iter.next()\
    \ == Some(&'|') {\n                    counter += 1;\n                } else {\n\
    \                    if counter != 0 {\n                        list.push(counter);\n\
    \                        counter = 0;\n                    }\n               \
    \ }\n            }\n            None => {\n                if counter != 0 {\n\
    \                    list.push(counter);\n                }\n                break;\n\
    \            }\n        }\n    }\n    list", "    let mut beats = Vec::new();\n\
    \    let mut chars = music_string.chars();\n    while let Some(ch) = chars.next()\
    \ {\n        if ch == 'o' {\n            beats.push(4);\n            if chars.next()\
    \ == Some('|') {\n                beats.push(2);\n            }\n        } else\
    \ if ch == '.' {\n            beats.push(1);\n            chars.next();\n    \
    \    }\n    }\n    beats", "    let mut beats = Vec::new();\n    for c in music_string.chars()\
    \ {\n        match c {\n            'o' => beats.push(4),\n            'o' | '|'\
    \ => beats.push(2),\n            '.' | '|' => beats.push(1),\n            _ =>\
    \ (),\n        }\n    }\n    beats", "    music_string.chars().map(|c| match c\
    \ {\n        'o' => 4,\n        '|' => 1,\n        '.' => 0,\n        _ => -1,\n\
    \    }).collect()", "    let mut result = Vec::new();\n    let mut counter = 0;\n\
    \    for c in music_string.chars() {\n        if c == 'o' {\n            counter\
    \ += 4;\n        } else if c == '|' {\n            if counter > 0 {\n        \
    \        result.push(counter);\n                counter = 0;\n            }\n\
    \        }\n    }\n    result", "    let mut beats: Vec<isize> = Vec::new();\n\
    \    let mut line_iter = music_string.lines();\n    while let Some(line) = line_iter.next()\
    \ {\n        let mut iter = line.chars();\n        while let Some(c) = iter.next()\
    \ {\n            match c {\n                'o' => {\n                    if let\
    \ Some('|') = iter.next() {\n                        beats.push(2);\n        \
    \            } else {\n                        beats.push(4);\n              \
    \      }\n                }\n                '.' => {\n                    if\
    \ let Some('|') = iter.next() {\n                        beats.push(1);\n    \
    \                } else {\n                        panic!(\"Unsupported character\
    \ '.' in music string\");\n                    }\n                }\n        \
    \        c => panic!(\"Unsupported character {} in music string\", c),\n     \
    \       }\n        }\n    }\n    beats", "    music_string.chars().map(|x| {\n\
    \        match x {\n            'o' => 4,\n            'o' => 2,\n           \
    \ '.' => 1,\n            _ => 0,\n        }\n    }).collect()", "    let mut vec:\
    \ Vec<isize> = Vec::new();\n    for c in music_string.chars() {\n        if c\
    \ == 'o' {\n            vec.push(4);\n        } else if c == '|' {\n         \
    \   vec.push(1);\n        }\n    }\n    vec", "\tlet mut base_val: isize = 4;\n\
    \tlet mut res: Vec<isize> = Vec::new();\n\tfor ch in music_string.chars() {\n\t\
    \tmatch ch {\n\t\t\t'o' => {\n\t\t\t\tres.push(base_val);\n\t\t\t},\n\t\t\t'o'\
    \ | '|' => {\n\t\t\t\tbase_val /= 2;\n\t\t\t\tres.push(base_val);\n\t\t\t},\n\t\
    \t\t'.' => {\n\t\t\t\tbase_val = 4;\n\t\t\t\tres.push(base_val);\n\t\t\t},\n\t\
    \t\t_ => (),\n\t\t}\n\t}\n\tres", '    unimplemented!()', "    let beats = vec![0,\
    \ 1, 2, 3, 4];\n    let len = music_string.len();\n    let mut res = Vec::with_capacity(len);\n\
    \    for i in 0..len {\n        match &music_string[i..i + 1] {\n            \"\
    o\" => res.push(4),\n            \"o|\" => res.push(2),\n            \".|\" =>\
    \ res.push(1),\n            _ => res.push(0),\n        }\n    }\n    res", '    unimplemented!("Parse
    music string {:?}", music_string);', "    let mut result: Vec<isize> = Vec::new();\n\
    \    let mut length: isize = 0;\n    for (i, c) in music_string.chars().enumerate()\
    \ {\n        if i == 0 {\n            length = match c {\n                'o'\
    \ => 4,\n                '.' => 1,\n                _ => 0,\n            };\n\
    \        }\n        if c == '|' {\n            result.push(length);\n        \
    \    length = 0;\n        } else {\n            length += match c {\n        \
    \        'o' => 4,\n                '.' => 1,\n                _ => 0,\n     \
    \       };\n        }\n    }\n    result.push(length);\n    result", "    let\
    \ mut result = Vec::new();\n    let mut current_note = String::new();\n    for\
    \ note in music_string.chars() {\n        if note == '|' {\n            match\
    \ current_note.as_str() {\n                \"o\" => result.push(4),\n        \
    \        \"o\" => result.push(2),\n                \".\" => result.push(1),\n\
    \                _ => (),\n            }\n            current_note = String::new();\n\
    \        } else {\n            current_note.push(note);\n        }\n    }\n  \
    \  result", "    let mut output = Vec::new();\n    for i in music_string.split_whitespace()\
    \ {\n        let mut current = i.to_string();\n        if current.ends_with(\"\
    o\") {\n            output.push(4);\n            current.pop();\n        }\n \
    \       while current.ends_with(\"|\") {\n            output.push(1);\n      \
    \      current.pop();\n        }\n    }\n    output", "    let mut result: Vec<isize>\
    \ = Vec::new();\n    let mut acc = 0;\n    for c in music_string.chars() {\n \
    \       if c == 'o' {\n            result.push(acc);\n            acc = 0;\n \
    \           result.push(4);\n        } else if c == '|' {\n            result.push(acc);\n\
    \            acc = 0;\n        } else if c == '.' {\n            acc += 1;\n \
    \       }\n    }\n    result.push(acc);\n    result", "    let notes: Vec<&str>\
    \ = music_string.split(\"|\").collect();\n    let mut durations: Vec<isize> =\
    \ Vec::new();\n    for note in notes {\n        let duration = match note {\n\
    \            \"o\" => 4,\n            \"o.\" => 2,\n            \"..\" => 1,\n\
    \            _ => 0,\n        };\n        durations.push(duration);\n    }\n \
    \   durations", "    music_string.chars().fold(vec![], |mut acc, ch| {\n     \
    \   match ch {\n            'o' => acc.push(4),\n            'o' => acc.push(2),\n\
    \            '.' => acc.push(1),\n            _ => ()\n        }\n        acc\n\
    \    })", "    let mut cnt: isize = 0;\n    let mut result: Vec<isize> = Vec::new();\n\
    \    for ch in music_string.chars() {\n        if ch == 'o' {\n            cnt\
    \ += 4;\n        } else if ch == '|' {\n            result.push(cnt);\n      \
    \      cnt = 0;\n        } else {\n            cnt += 1;\n        }\n    }\n \
    \   result.push(cnt);\n    result", "    music_string.split(\" \").map(|x|\n \
    \       match x {\n            \"o\" => 4,\n            \"o|\" => 2,\n       \
    \     \".|\" => 1,\n            _ => panic!(\"Unknown note\")\n        }\n   \
    \ ).collect()", "    let mut result: Vec<isize> = Vec::new();\n    let mut counter\
    \ = 1;\n    let music_string = music_string.replace(\"|\", \"\");\n    for c in\
    \ music_string.chars() {\n        if c == 'o' {\n            result.push(counter\
    \ * 4);\n        } else if c == '.' {\n            result.push(counter);\n   \
    \     }\n    }\n    result", '    unimplemented!()', "    let mut result = Vec::new();\n\
    \    let mut idx = 0;\n    for ch in music_string.chars() {\n        if ch ==\
    \ '.' {\n            result.push(1);\n            idx += 1;\n        } else if\
    \ ch == 'o' {\n            result.push(4);\n            idx += 1;\n        } else\
    \ if ch == '|' {\n            result[idx - 1] /= 2;\n        }\n    }\n    result"]
stop_tokens:
- "\n}"
