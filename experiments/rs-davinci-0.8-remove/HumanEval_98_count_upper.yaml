name: HumanEval_98_count_upper
language: rs
prompt: "/// Given a string s, count the number of uppercase vowels in even indices.\n\
  /// For example:\nfn count_upper(s: String) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = count_upper;\n    assert_eq!(candidate(String::from(\"\
  aBCdEf\")), 1);\n    assert_eq!(candidate(String::from(\"abcdefg\")), 0);\n    assert_eq!(candidate(String::from(\"\
  dBBE\")), 0);\n    assert_eq!(candidate(String::from(\"B\")), 0);\n    assert_eq!(candidate(String::from(\"\
  U\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
  EEEE\")), 2);\n}\n"
completions: ["    // Write code here\n    0", "    s.chars()\n        .enumerate()\n\
    \        .filter(|&(i, ch)| (i + 1) % 2 == 0 && ch.is_uppercase())\n        .count()\
    \ as isize", "    s.chars()\n        .enumerate()\n        .filter(|(i, c)| i\
    \ % 2 == 0 && is_upper(c))\n        .count() as isize", "    let mut count = 0;\n\
    \    for (idx, ch) in s.chars().enumerate() {\n        if idx % 2 == 0 && ch.is_uppercase()\
    \ {\n            count += 1;\n        }\n    }\n    count", "    s.chars()\n \
    \       .enumerate()\n        .filter(|&(i, c)| i % 2 == 0 && c.is_uppercase())\n\
    \        .count() as isize", "    s.chars()\n        .enumerate()\n        .filter(|&(idx,\
    \ ch)| {\n            if idx % 2 == 0 {\n                return ch.is_ascii_uppercase()\
    \ && \"AEIOU\".contains(ch);\n            } else {\n                return false;\n\
    \            }\n        })\n        .count() as isize", "    let mut count = 0;\n\
    \    for (i, c) in s.chars().enumerate() {\n        if i % 2 == 0 && is_upper(c)\
    \ {\n            count += 1;\n        }\n    }\n    count", "    let mut count\
    \ = 0;\n    for (index, ch) in s.chars().enumerate() {\n        if ch.is_uppercase()\
    \ && index % 2 == 0 {\n            count += 1;\n        }\n    }\n    count",
  "    s.chars()\n        .enumerate()\n        .filter(|(i, ch)| i % 2 == 0 && ch.is_uppercase())\n\
    \        .count() as isize", "    // Your code here\n    let mut i = 0;\n    for\
    \ c in s.chars() {\n        match c {\n            'A' | 'E' | 'I' | 'O' | 'U'\
    \ => {\n                if i % 2 == 0 {\n                    i += 1;\n       \
    \         }\n            }\n            _ => {}\n        }\n    }\n    i", " \
    \   s.chars()\n        .enumerate()\n        .filter(|(n, c)| n % 2 == 0 && c.is_ascii_uppercase())\n\
    \        .count() as isize", "    s.chars()\n        .filter(|c| c.is_ascii_uppercase())\n\
    \        .map(|c| match c {\n            'A' | 'E' | 'I' | 'O' | 'U' => 1,\n \
    \           _ => 0,\n        })\n        .sum()", "    let mut cnt = 0;\n    for\
    \ c in s.chars() {\n        if c.is_uppercase() {\n            cnt += 1;\n   \
    \     }\n    }\n    cnt", "    s.chars()\n        .enumerate()\n        .filter(|(i,\
    \ c)| i % 2 == 0 && c.is_uppercase())\n        .count() as isize", "    let v\
    \ = s.chars()\n        .enumerate()\n        .filter(|&(i, c)| i % 2 == 0 && c.is_uppercase())\n\
    \        .count();\n    v as isize", "    let mut count = 0;\n    let vowels =\
    \ \"AEIOU\".to_string();\n    for (i, c) in s.chars().enumerate() {\n        if\
    \ i % 2 == 0 && vowels.contains(c) {\n            count += 1;\n        }\n   \
    \ }\n    count", '    return 0;', '    unimplemented!()', "    s.chars()\n   \
    \     .enumerate()\n        .filter(|(i, c)| c.is_ascii_uppercase() && (i % 2\
    \ == 0))\n        .count() as isize", "    s.chars()\n        .enumerate()\n \
    \       .filter(|(i, c)| c.is_uppercase() && i % 2 == 0)\n        .count() as\
    \ isize", '    0', "    let mut count = 0;\n    for (i, c) in s.chars().enumerate()\
    \ {\n        if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n  \
    \      }\n    }\n    count", "    s.chars()\n        .enumerate()\n        .filter(|&(idx,\
    \ ch)| idx % 2 == 0 && ch.is_uppercase())\n        .count() as isize", "    let\
    \ mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n        if i % 2\
    \ == 0 && c.is_uppercase() {\n            count += 1;\n        }\n    }\n    count",
  "    s.chars()\n        .filter(|c| \"AEIOU\".contains(*c))\n        .zip(0..)\n\
    \        .filter(|(_, i)| i % 2 == 0)\n        .count() as isize", '    return
    s.chars().enumerate().filter(|&(i,c)| c.is_uppercase() && i % 2 == 0).count()
    as isize;', "    let chars = s.chars();\n    let sum: isize = chars.enumerate()\n\
    \        .filter(|x| x.0 % 2 == 0)\n        .filter(|x| x.1.is_uppercase())\n\
    \        .count() as isize;\n    sum", "    s.chars()\n        .enumerate()\n\
    \        .filter(|&(i, c)| i % 2 == 0 && c.is_ascii_uppercase())\n        .count()\
    \ as isize", "    let mut count = 0;\n    for (i, c) in s.chars().enumerate()\
    \ {\n        if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n  \
    \      }\n    }\n    count", "    let mut count = 0;\n    for (i, c) in s.chars().enumerate()\
    \ {\n        if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n  \
    \      }\n    }\n    count", "    s.chars()\n        .enumerate()\n        .filter(|(i,\
    \ c)| (i & 1) == 0 && c.is_uppercase())\n        .count() as isize", "    s.chars()\n\
    \        .enumerate()\n        .filter(|&(i, c)| c.is_uppercase() && i % 2 ==\
    \ 0)\n        .count() as isize", "    let mut r = 0;\n    for (i, c) in s.chars().enumerate()\
    \ {\n        if c.is_uppercase() && i % 2 == 0 {\n            r += 1;\n      \
    \  }\n    }\n    r", "    s.chars()\n        .enumerate()\n        .filter(|(i,\
    \ c)| c.is_uppercase() && i % 2 == 0)\n        .count() as isize", "    let evens\
    \ = str::chars(s)\n        .enumerate()\n        .filter(|&(i, _)| i % 2 == 0)\n\
    \        .map(|(_, c)| c);\n    let uppers = evens.filter(|c| c.is_uppercase());\n\
    \    str::count(uppers)", "    let mut count = 0;\n    for (i, c) in s.chars().enumerate()\
    \ {\n        if (i % 2 == 0) && (c == 'A' || c == 'E' || c == 'I' || c == 'O'\
    \ || c == 'U') {\n            count += 1;\n        }\n    }\n    count", "   \
    \ let mut acc = 0;\n    for (index, c) in s.chars().enumerate() {\n        if\
    \ index % 2 == 0 && c.is_uppercase() {\n            acc += 1;\n        }\n   \
    \ }\n    acc", "    let mut count = 0;\n    let mut i = 0;\n    for v in s.chars()\
    \ {\n        if (i % 2 == 0) && v.is_uppercase() {\n            count += 1;\n\
    \        }\n        i += 1;\n    }\n    count", "    s.chars()\n        .enumerate()\n\
    \        .filter(|&(i, c)| i % 2 == 0 && c.is_uppercase())\n        .count() as\
    \ isize", '    return s.chars().filter(|ch| ch.is_uppercase()).count() as isize;',
  "    s.chars()\n        .enumerate()\n        .filter(|&(i, c)| i % 2 == 0 && c.is_uppercase())\n\
    \        .count() as isize", "    let mut count = 0;\n    for (i, c) in s.chars().enumerate()\
    \ {\n        if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n  \
    \      }\n    }\n    count", "    s.chars()\n        .enumerate()\n        .filter(|(i,\
    \ c)| c.is_ascii_uppercase() && i % 2 == 0)\n        .count() as isize", "   \
    \ s.chars()\n        .enumerate()\n        .filter(|(i, c)| c.is_uppercase() &&\
    \ *i % 2 == 0)\n        .count() as isize", "    let mut count = 0;\n    for (i,\
    \ ch) in s.chars().enumerate() {\n        if i % 2 == 0 && ch.is_uppercase() {\n\
    \            count += 1;\n        }\n    }\n    count", '    0', "    s.chars()\n\
    \        .enumerate()\n        .filter(|&(i, c)| {\n            c.is_ascii_uppercase()\
    \ && i % 2 == 0\n        })\n        .count() as isize", "    /// Given a string,\
    \ count the vowels in even indices.\n    fn count_even_vowels(s: &str) -> isize\
    \ {\n        s.chars()\n            .enumerate()\n            .fold(0, |acc, (i,\
    \ c)| {\n                if i % 2 == 0 && c.is_ascii_uppercase() && is_vowel(c)\
    \ {\n                    acc + 1\n                } else {\n                 \
    \   acc\n                }\n            })\n    }\n\n    count_even_vowels(&s)",
  "    s.char_indices()\n        .filter(|(i, c)| (i % 2 == 0) && (c.is_uppercase()))\n\
    \        .count() as isize", "    s.chars()\n        .enumerate()\n        .filter(|(i,\
    \ c)| i % 2 == 0 && is_upper(c))\n        .count() as isize", "    s.chars()\n\
    \        .enumerate()\n        .filter(|&(index, ch)| ch.is_uppercase() && index\
    \ % 2 == 0)\n        .count() as isize", "    // TODO\n    let mut count = 0;\n\
    \    for c in s.chars() {\n        count += c.is_uppercase() as i8;\n    }\n \
    \   return count as isize;", "    return s.chars().enumerate().fold(0, |acc, c|\
    \ {\n        let (i, ch) = c;\n        if (i % 2 == 0) && ch.is_uppercase() {\n\
    \            acc + 1\n        } else {\n            acc\n        }\n    });",
  "    s.chars()\n        .enumerate()\n        .filter(|(i, c)| (i & 1) == 0 && c.is_uppercase())\n\
    \        .count() as isize", "    let mut count = 0;\n    let mut chars = s.chars();\n\
    \    while let Some(c) = chars.next() {\n        if c.is_uppercase() && c.is_vowel()\
    \ {\n            count += 1;\n        }\n        chars.next();\n    }\n    count",
  "    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n        if i\
    \ % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n    }\n\
    \    count", "    let mut count = 0;\n    for (i, ch) in s.chars().enumerate()\
    \ {\n        if i % 2 == 0 && ch.is_uppercase() {\n            count += 1;\n \
    \       }\n    }\n    count", "    let mut count = 0;\n    let mut is_even = true;\n\
    \    for i in s.chars() {\n        if is_even && is_vowel(i) && is_upper(i) {\n\
    \            count += 1;\n        }\n        is_even = !is_even;\n    }\n    count",
  "    // let mut count = 0;\n    // let mut index = 0;\n    // let upper = [\"A\"\
    , \"E\", \"I\", \"O\", \"U\"];\n    // let chars = s.chars();\n    // let mut\
    \ iter = chars.into_iter();\n    // while let Some(c) = iter.next() {\n    //\
    \     if upper.contains(&c.to_string()) && index % 2 == 0 {\n    //         count\
    \ += 1;\n    //     }\n    //     index += 1;\n    // }\n    // count\n    s.chars()\n\
    \        .enumerate()\n        .filter(|x| \"AEIOU\".contains(x.1) && x.0 % 2\
    \ == 0)\n        .count() as isize", "    let mut n = 0;\n    for (i, c) in s.chars().enumerate()\
    \ {\n        if i % 2 == 0 && c.is_uppercase() {\n            n += 1;\n      \
    \  }\n    }\n    n", "    let vowels = vec!['A', 'E', 'I', 'O', 'U'];\n    let\
    \ mut count = 0;\n    for (index, ch) in s.chars().enumerate() {\n        if vowels.contains(&ch)\
    \ && index % 2 == 0 {\n            count += 1;\n        }\n    }\n    count",
  "    let mut result = 0;\n    let mut iter = s.chars();\n    let mut is_even = true;\n\
    \    while let Some(c) = iter.next() {\n        is_even = !is_even;\n        match\
    \ c {\n            'A' | 'E' | 'I' | 'O' | 'U' => if is_even { result += 1; },\n\
    \            _ => { },\n        }\n    }\n    result", "    s.chars()\n      \
    \  .enumerate()\n        .map(|(i, c)| if i % 2 == 0 && is_upper_vowel(c) { 1\
    \ } else { 0 })\n        .sum()", "    s.chars()\n        .enumerate()\n     \
    \   .filter(|(i, c)| i % 2 == 0 && c.is_ascii_uppercase())\n        .count() as\
    \ isize", "    s.chars()\n        .enumerate()\n        .map(|(i, c)| (i, c))\n\
    \        .filter(|&(i, c)| i % 2 == 0 && c.is_uppercase())\n        .count() as\
    \ isize", "    let vowels = vec!['A', 'E', 'I', 'O', 'U'];\n    let mut i = 0;\n\
    \    let mut count = 0;\n    for c in s.chars() {\n        if i % 2 == 0 && vowels.contains(&c)\
    \ {\n            count += 1;\n        }\n        i += 1;\n    }\n    count", '    s.bytes().fold(0,
    |acc, x| acc + (is_upper_vowel(x) as isize))', "    let mut count = 0;\n    for\
    \ (i, ch) in s.chars().enumerate() {\n        match i % 2 == 0 && ch.is_uppercase()\
    \ {\n            true => count += 1,\n            false => continue,\n       \
    \ }\n    }\n    count", "    s.chars()\n        .enumerate()\n        .filter(|&(i,\
    \ c)| i % 2 == 0 && c.is_ascii_uppercase())\n        .count() as isize", "   \
    \ // This is the same as:\n    // \"aAeEiIoOuU\".chars().filter(|&c| s.chars().filter(|&c|\
    \ c.is_uppercase()).count() % 2 == 0).count() as isize\n    s.chars().filter(|&c|\
    \ \"aAeEiIoOuU\".contains(c)).count() as isize", "    let mut count = 0;\n   \
    \ for (index, letter) in s.chars().enumerate() {\n        if index % 2 == 0 &&\
    \ letter.is_uppercase() {\n            count += 1;\n        }\n    }\n    count",
  '    unimplemented!();', '    return s.chars().filter(|x| x.is_uppercase()).count()
    as isize;', "    s.chars()\n        .enumerate()\n        .map(|(i, c)| if i %\
    \ 2 == 0 && c.is_uppercase() { 1 } else { 0 })\n        .sum()", "    let vowels\
    \ = vec!['A', 'E', 'I', 'O', 'U'];\n    let mut cnt = 0;\n    for (i, c) in s.chars().enumerate()\
    \ {\n        if i % 2 == 0 && vowels.contains(&c) {\n            cnt += 1;\n \
    \       }\n    }\n    cnt", "    let mut count = 0;\n    for c in s.chars() {\n\
    \        if c.is_uppercase() {\n            count += 1;\n        }\n    }\n  \
    \  count", "    let mut v = 0;\n    for (i, c) in s.chars().enumerate() {\n  \
    \      let n = c.to_digit(10).unwrap();\n        if (i % 2 == 0) && (n == 5 ||\
    \ n == 9) {\n            v += 1;\n        }\n    }\n    v", "    s.chars()\n \
    \       .enumerate()\n        .filter(|(i, ch)| i % 2 == 0 && ch.is_uppercase())\n\
    \        .count() as isize", "    let mut res = 0;\n    for (i, c) in s.chars().enumerate()\
    \ {\n        if i % 2 == 0 && is_upper(c) {\n            res += 1;\n        }\n\
    \    }\n    res", "    s.chars()\n        .enumerate()\n        .filter(|(i, c)|\
    \ i % 2 == 0 && is_upper(c))\n        .count() as isize", "    return s.chars().enumerate().fold(0,\
    \ |count, (i, c)|\n        count + (c.is_uppercase() && i % 2 == 0) as isize\n\
    \    );", "    let mut count = 0;\n    let chars: Vec<char> = s.chars().collect();\n\
    \    for (i, c) in chars.iter().enumerate() {\n        match i % 2 {\n       \
    \     0 => {\n                match c {\n                    'A' | 'E' | 'I' |\
    \ 'O' | 'U' => count += 1,\n                    _ => (),\n                }\n\
    \            }\n            _ => (),\n        }\n    }\n    count", "    let vowels\
    \ = ['A', 'E', 'I', 'O', 'U'];\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate()\
    \ {\n        if vowels.contains(&c) && i % 2 == 0 {\n            count += 1;\n\
    \        }\n    }\n    count", "    s.chars()\n        .enumerate()\n        .filter(|(i,\
    \ c)| i % 2 == 0 && c.is_uppercase())\n        .count() as isize", "    let mut\
    \ count = 0;\n    for (i, c) in s.chars().enumerate() {\n        if i % 2 == 0\
    \ && c.is_uppercase() {\n            count += 1;\n        }\n    }\n    count",
  "    s.chars()\n        .enumerate()\n        .filter(|(i, c)| i % 2 == 0 && c.is_ascii_uppercase())\n\
    \        .count() as isize", "    let mut c: isize = 0;\n    let vowels = vec!['A',\
    \ 'E', 'I', 'O', 'U'];\n    for (i, _) in s.chars().enumerate() {\n        if\
    \ i % 2 == 0 && vowels.contains(&s.chars().nth(i).unwrap()) {\n            c +=\
    \ 1;\n        }\n    }\n    c", "    let mut cnt = 0;\n    for (i, c) in s.chars().enumerate()\
    \ {\n        if i % 2 == 0 && (c == 'A' || c == 'E' || c == 'I' || c == 'O' ||\
    \ c == 'U') {\n            cnt += 1;\n        }\n    }\n    cnt", "    s.chars()\n\
    \        .enumerate()\n        .filter(|&(i, c)| i % 2 == 0 && is_upper_vowel(c))\n\
    \        .count() as isize", "    s.chars()\n        .enumerate()\n        .filter(|&(i,\
    \ c)| i % 2 == 0 && c.is_uppercase())\n        .count() as isize", "    let mut\
    \ count = 0;\n    for (idx, c) in s.chars().enumerate() {\n        if \"AEIOU\"\
    .contains(c) && idx % 2 == 0 {\n            count += 1;\n        }\n    }\n  \
    \  count", "    let vowels = ['A', 'E', 'I', 'O', 'U'];\n    let mut count = 0;\n\
    \    for (i, c) in s.chars().enumerate() {\n        if i % 2 == 0 && vowels.contains(&c)\
    \ {\n            count += 1;\n        }\n    }\n    count", "    return s.chars().enumerate().fold(0,\
    \ |acc, (i, c)| {\n        if i % 2 == 0 && is_upper_vowel(c) {\n            acc\
    \ + 1\n        } else {\n            acc\n        }\n    });", "    if s.len()\
    \ == 0 {\n        return 0;\n    }\n    let mut i = 0;\n    let mut res = 0;\n\
    \    for c in s.chars() {\n        if i % 2 == 0 && is_upper_vowel(c) {\n    \
    \        res += 1;\n        }\n        i += 1;\n    }\n    res", "    s.chars()\n\
    \        .enumerate()\n        .filter(|&(i, c)| is_even(i) && is_upper(c))\n\
    \        .count() as isize", "    s.chars()\n        .enumerate()\n        .map(|(i,\
    \ c)| (i, c))\n        .filter(|&(i, c)| c.is_uppercase() && i % 2 == 0)\n   \
    \     .count() as isize", "    //s.chars().enumerate().filter(|(i, c)| i % 2 ==\
    \ 0 && is_vowel(c)).count() as isize\n    s.chars().enumerate().fold(0, |acc,\
    \ (i, c)| if i % 2 == 0 && is_vowel(c) { acc + 1 } else { acc })", "    let mut\
    \ count = 0;\n    for (i, c) in s.chars().enumerate() {\n        if i % 2 == 0\
    \ && c.is_uppercase() {\n            count += 1;\n        }\n    }\n    count",
  "    let vowels = HashSet::from_iter(vec![\"A\", \"E\", \"I\", \"O\", \"U\"]);\n\
    \    let mut even = true;\n    let mut count = 0;\n    for c in s.chars() {\n\
    \        if even && vowels.contains(&c.to_string().as_str()) {\n            count\
    \ += 1;\n        }\n        even = !even;\n    }\n    count", "    s.chars()\n\
    \        .enumerate()\n        .filter(|(i, c)| {\n            i % 2 == 0 && [\"\
    A\", \"E\", \"I\", \"O\", \"U\"].contains(&c.to_uppercase().collect::<String>().as_str())\n\
    \        })\n        .count() as isize", "    if s.len() == 0 {\n        return\
    \ 0;\n    }\n    let mut counter = 0;\n    let mut s = s.as_bytes();\n    for\
    \ i in (0..s.len()).step_by(2) {\n        if i == s.len() - 1 {\n            if\
    \ is_uppercase(s[i]) {\n                counter += 1;\n            }\n       \
    \ } else {\n            if is_uppercase(s[i]) && is_uppercase(s[i + 1]) {\n  \
    \              counter += 1;\n            }\n        }\n    }\n    counter", " \
    \   s.chars()\n        .enumerate()\n        .filter(|(i, c)| is_upper_vowel(*c)\
    \ && i % 2 == 0)\n        .count() as isize", "    let mut count = 0;\n    for\
    \ (i, c) in s.chars().enumerate() {\n        if (i % 2 == 0) && c.is_uppercase()\
    \ {\n            count += 1;\n        }\n    }\n    count", "    let (mut odd,\
    \ mut even) = (false, false);\n    s.chars().filter(|c| {\n        match *c {\n\
    \            'A' => {\n                odd = !odd;\n                odd\n    \
    \        }\n            'E' => {\n                odd = !odd;\n              \
    \  odd\n            }\n            'I' => {\n                odd = !odd;\n   \
    \             odd\n            }\n            'O' => {\n                odd =\
    \ !odd;\n                odd\n            }\n            'U' => {\n          \
    \      odd = !odd;\n                odd\n            }\n            _ => false,\n\
    \        }\n    }).count() as isize", "    let mut count = 0;\n    for i in 0..s.len()\
    \ {\n        let c = s.chars().nth(i).unwrap();\n        if i % 2 == 0 && c.is_ascii_uppercase()\
    \ && ['A', 'E', 'I', 'O', 'U'].contains(&c) {\n            count += 1;\n     \
    \   }\n    }\n    count", "    s.chars()\n        .enumerate()\n        .map(|(i,\
    \ c)| if i % 2 == 0 && c.is_uppercase() { 1 } else { 0 })\n        .sum()", " \
    \   let mut out = 0;\n    let c = s.chars();\n    for (i, x) in c.enumerate()\
    \ {\n        if i % 2 == 0 && x.is_uppercase() {\n            out += 1;\n    \
    \    }\n    }\n    out", "    let mut n = 0;\n    for c in s.chars() {\n     \
    \   if \"AEIOU\".contains(c) {\n            n += 1;\n        }\n    }\n    n",
  "    let mut count = 0;\n    let vowels = vec!['A', 'E', 'I', 'O', 'U'];\n    for\
    \ (i, c) in s.chars().enumerate() {\n        if i % 2 == 0 && vowels.contains(&c)\
    \ {\n            count += 1;\n        }\n    }\n    count", '    0', "    let\
    \ mut counter = 0;\n    for c in s.chars() {\n        if c.is_alphabetic() &&\
    \ c.is_uppercase() {\n            counter += 1;\n        }\n    }\n    counter",
  "    s.chars()\n        .enumerate()\n        .filter(|x| x.0 % 2 == 0)\n      \
    \  .map(|x| if x.1.is_uppercase() { 1 } else { 0 })\n        .sum()", "    s.chars()\n\
    \        .enumerate()\n        .filter(|(i, c)| c.is_ascii_uppercase() && i %\
    \ 2 == 0)\n        .count() as isize", "    let mut cnt = 0;\n    for c in s.chars()\
    \ {\n        if is_upper_vowel(c) {\n            cnt += 1;\n        }\n    }\n\
    \    cnt", "    let vowels = ['A', 'E', 'I', 'O', 'U'];\n    let mut count = 0;\n\
    \    for (i, c) in s.chars().enumerate() {\n        if vowels.contains(&c) &&\
    \ i % 2 == 0 {\n            count += 1;\n        }\n    }\n    count", '    unimplemented!();',
  "    let mut count = 0;\n    let vowels = vec!['A', 'E', 'I', 'O', 'U'];\n    for\
    \ (i, ch) in s.chars().enumerate() {\n        if i % 2 == 0 && vowels.contains(&ch)\
    \ {\n            count += 1;\n        }\n    }\n    count", "    let mut count\
    \ = 0;\n    let vowels = ['A', 'E', 'I', 'O', 'U'];\n    for (i, c) in s.chars().enumerate()\
    \ {\n        if vowels.contains(&c) && i % 2 == 0 {\n            count += 1;\n\
    \        }\n    }\n    count", "    let vowels = ['A', 'E', 'I', 'O', 'U'];\n\
    \    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n        if\
    \ i % 2 == 0 && vowels.contains(&c) {\n            count += 1;\n        }\n  \
    \  }\n    count", "    s.chars()\n        .enumerate()\n        .filter(|&(i,\
    \ c)| i % 2 == 0 && c.is_uppercase())\n        .count() as isize", "    // let\
    \ lc = s.to_lowercase(); // this would be a problem...\n    let lc = s.chars().map(|c|\
    \ c.to_lowercase().next().unwrap()).collect::<String>();\n    println!(\"{}\"\
    , lc);\n    // s.chars().filter(|c| is_vowel(*c)).filter(|c| *c == *c.to_uppercase().next().unwrap()).count()\
    \ as isize\n    s.chars().enumerate().filter(|&(i, c)| is_vowel(lc.chars().nth(i).unwrap())\
    \ && c == c.to_uppercase().next().unwrap()).count() as isize", "    // Define\
    \ your function here\n    //  (let's print the input to see what it is)\n    println!(\"\
    \\n{}\", s);\n    // Then return 1 more than the length\n    1 + s.len() as isize",
  "    s.chars()\n        .enumerate()\n        .filter(|(i, c)| *i % 2 == 0 && is_vowel_uppercase(*c))\n\
    \        .count() as isize", "    s.chars()\n        .enumerate()\n        .filter(|&(i,\
    \ c)| is_vowel(c) && i % 2 == 0)\n        .count() as isize", "    s.chars()\n\
    \        .enumerate()\n        .map(|(i, c)| (i, c))\n        .filter(|&(i, c)|\
    \ i % 2 == 0 && c.is_ascii_uppercase())\n        .count() as isize", "    let\
    \ mut count = 0;\n    let vowels = vec!['A', 'E', 'I', 'O', 'U'];\n    for (i,\
    \ c) in s.chars().enumerate() {\n        if i % 2 == 0 && vowels.contains(&c)\
    \ {\n            count += 1;\n        }\n    }\n    count", "    let mut result\
    \ = 0;\n    for (idx, ch) in s.chars().enumerate() {\n        if ch.is_uppercase()\
    \ && idx % 2 == 0 {\n            result += 1;\n        }\n    }\n    result",
  "    s.as_bytes()\n        .iter()\n        .enumerate()\n        .filter(|&(idx,\
    \ &c)| idx % 2 == 0 && char::from(c).is_uppercase())\n        .count() as isize",
  "    // for c in s.chars() {\n    //     if c.is_uppercase() && is_vowel(c) {\n\
    \    //         cnt += 1;\n    //     }\n    // }\n    return 0;", "    let mut\
    \ count = 0;\n    let vowels = vec!['A', 'E', 'I', 'O', 'U'];\n    for (i, c)\
    \ in s.chars().enumerate() {\n        if vowels.contains(&c) && i % 2 == 0 {\n\
    \            count += 1;\n        }\n    }\n    count", "    s.chars()\n     \
    \   .enumerate()\n        .map(|(i, c)| match (i % 2 == 0, c.is_uppercase()) {\n\
    \            (true, true) => 1,\n            _ => 0,\n        })\n        .sum()",
  "    s.chars()\n        .enumerate()\n        .filter(|(i, c)| i % 2 == 0 && c.is_uppercase())\n\
    \        .count() as isize", "    let vowels = vec!['A', 'E', 'I', 'O', 'U'];\n\
    \    s.chars()\n        .enumerate()\n        .map(|(i, c)| if vowels.contains(&c)\
    \ && i % 2 == 0 { 1 } else { 0 })\n        .sum()", "    s.chars()\n        .enumerate()\n\
    \        .filter(|(i, c)| i % 2 == 0 && c.is_uppercase())\n        .count() as\
    \ isize", "    s.chars()\n        .enumerate()\n        .filter(|&(i, c)| c.is_uppercase()\
    \ && i % 2 == 0)\n        .count() as isize", "    s.chars()\n        .enumerate()\n\
    \        .filter(|&(i, c)| i % 2 == 0 && c.is_ascii_uppercase())\n        .count()\
    \ as isize", "    s.chars()\n        .enumerate()\n        .filter(|&(i, _)| i\
    \ % 2 == 0)\n        .map(|(_, c)| if is_upper(c) { 1 } else { 0 })\n        .sum()",
  "    s.chars()\n        .enumerate()\n        .filter(|&(i, c)| c.is_uppercase()\
    \ && i % 2 == 0)\n        .count() as isize", "    s.chars()\n        .enumerate()\n\
    \        .map(|(idx, c)| (idx, c))\n        .filter(|(idx, c)| c.is_ascii_uppercase()\
    \ && idx % 2 == 0)\n        .count() as isize", "    let mut c: isize = 0;\n \
    \   for (i, _ch) in s.chars().enumerate() {\n        if (i % 2 == 0) && (s.chars().nth(i).unwrap().is_uppercase())\
    \ {\n            c += 1;\n        }\n    }\n    c", "    let mut count = 0;\n\
    \    for (i, c) in s.chars().enumerate() {\n        if c.is_uppercase() && i %\
    \ 2 == 0 {\n            count += 1;\n        }\n    }\n    count", "    s.chars()\n\
    \        .enumerate()\n        .filter(|&(i, ch)| i % 2 == 0 && ch.is_uppercase())\n\
    \        .count() as isize", "    s.chars()\n        .enumerate()\n        .filter(|&(i,\
    \ c)| i % 2 == 0 && c.is_uppercase())\n        .count() as isize", "    let mut\
    \ n: isize = 0;\n    for (i, c) in s.chars().enumerate() {\n        if is_upper(c)\
    \ && i % 2 == 0 {\n            n += 1;\n        }\n    }\n    n", "    s.chars()\n\
    \        .enumerate()\n        .filter(|&(i, c)| i % 2 == 0 && is_vowel(c) &&\
    \ c.is_uppercase())\n        .count() as isize", "    let mut count = 0;\n   \
    \ for (index, ch) in s.chars().enumerate() {\n        if index % 2 == 0 && ch.is_uppercase()\
    \ {\n            count += 1;\n        }\n    }\n    count", "    let mut count\
    \ = 0;\n    for (i, c) in s.chars().enumerate() {\n        if c.is_uppercase()\
    \ && i % 2 == 0 {\n            count += 1;\n        }\n    }\n    count", "  \
    \  if s.len() == 0 {\n        return 0;\n    }\n    let mut c = 0;\n    for (i,\
    \ ch) in s.chars().enumerate() {\n        if i % 2 == 0 && ch.is_uppercase() {\n\
    \            c += 1;\n        }\n    }\n    c", "    s.char_indices()\n      \
    \  .filter(|&(idx, c)| idx % 2 == 0 && c.is_uppercase())\n        .count() as\
    \ isize", "    s.chars()\n        .enumerate()\n        .filter(|&(i, c)| c.is_uppercase()\
    \ && i % 2 == 0)\n        .count() as isize", "    let mut sum = 0;\n    for (idx,\
    \ ch) in s.chars().enumerate() {\n        if idx % 2 == 0 && ch.is_uppercase()\
    \ {\n            sum += 1;\n        }\n    }\n    sum", "    let mut counter =\
    \ 0;\n    for (i, c) in s.chars().enumerate() {\n        if c.is_uppercase() &&\
    \ i % 2 == 0 {\n            counter += 1;\n        }\n    }\n    counter", " \
    \   let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n        if\
    \ i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n        }\n    }\n\
    \    count", "    s.chars()\n        .enumerate()\n        .filter(|&(i, _)| i\
    \ % 2 == 0)\n        .filter(|&(_, c)| c.is_uppercase())\n        .count() as\
    \ isize", "    // let it = s.chars();\n    // let mut count = 0;\n    // for (i,\
    \ c) in it.enumerate() {\n    //     if i % 2 == 0 && is_upper_vowel(c) {\n  \
    \  //         count += 1;\n    //     }\n    // }\n    // count\n\n    s.chars()\n\
    \        .enumerate()\n        .filter(|&(i, _)| i % 2 == 0)\n        .map(|(_,\
    \ c)| c)\n        .filter(|c| is_upper_vowel(*c))\n        .count() as isize",
  "    return s.chars().enumerate().fold(0, |count, (i, c)| {\n        if i % 2 ==\
    \ 0 && is_upper(c) {\n            count + 1\n        } else {\n            count\n\
    \        }\n    });", "    let v = \"AEIOU\";\n    s.chars()\n        .enumerate()\n\
    \        .map(|(i, c)| c.is_uppercase() && v.contains(c) && i % 2 == 0)\n    \
    \    .filter(|v| *v)\n        .count() as isize", "    let vowels = \"AEIOU\"\
    ;\n    let mut ret = 0;\n    for (i, c) in s.chars().enumerate() {\n        if\
    \ i % 2 == 0 && vowels.contains(c) {\n            ret += 1;\n        }\n    }\n\
    \    ret", "    s.chars()\n        .enumerate()\n        .filter(|(i, c)| i %\
    \ 2 == 0 && is_upper(c))\n        .count() as isize", "    s.chars()\n       \
    \ .enumerate()\n        .filter(|&(i, c)| i % 2 == 0 && is_vowel(c))\n       \
    \ .count() as isize", "    let mut count = 0;\n    for (i, c) in s.chars().enumerate()\
    \ {\n        if i % 2 == 0 && (c == 'A' || c == 'E' || c == 'I' || c == 'O' ||\
    \ c == 'U') {\n            count += 1;\n        }\n    }\n    count", "    let\
    \ mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n        if c.is_ascii_uppercase()\
    \ && i % 2 == 0 {\n            count += 1;\n        }\n    }\n    count", "  \
    \  s.chars()\n        .enumerate()\n        .filter(|(i, c)| {\n            is_upper(c)\
    \ && *i % 2 == 0\n        })\n        .count() as isize", "    let vowels = \"\
    AEIOU\";\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n\
    \        if i % 2 == 0 && vowels.contains(c) {\n            count += 1;\n    \
    \    }\n    }\n    count", "    s.chars()\n        .enumerate()\n        .filter(|&(i,\
    \ _)| i % 2 == 0)\n        .filter(|&(_, c)| c.is_uppercase())\n        .count()\
    \ as isize", "    let mut count = 0;\n    for (i, c) in s.chars().enumerate()\
    \ {\n        if c.is_uppercase() && i % 2 == 0 {\n            count += 1;\n  \
    \      }\n    }\n    count", "    let v = vec!['A', 'E', 'I', 'O', 'U'];\n   \
    \ s.chars()\n        .enumerate()\n        .filter(|&(i, c)| i % 2 == 0 && v.contains(&c))\n\
    \        .count() as isize", "    s.chars()\n        .enumerate()\n        .filter(|(i,\
    \ c)| i % 2 == 0 && is_upper_vowel(*c))\n        .count() as isize", "    return\
    \ s.chars().enumerate().filter(|&(i, c)| (i % 2 == 0) && (c == 'A' || c == 'E'\
    \ || c == 'I' || c == 'O' || c == 'U')).count() as isize;", "    let mut result\
    \ = 0;\n    for (index, item) in s.chars().enumerate() {\n        if item.is_uppercase()\
    \ && index % 2 == 0 {\n            result += 1;\n        }\n    }\n    result",
  "    let mut count = 0;\n    for (index, character) in s.chars().enumerate() {\n\
    \        if character.is_uppercase() && index % 2 == 0 {\n            count +=\
    \ 1;\n        }\n    }\n    count", "    s.chars()\n        .enumerate()\n   \
    \     .filter(|(i, c)| c.is_ascii_uppercase() && i % 2 == 0)\n        .count()\
    \ as isize", "    s.chars()\n        .enumerate()\n        .filter(|(i, c)| *i\
    \ % 2 == 0 && c.is_uppercase())\n        .count() as isize", "    let mut cnt\
    \ = 0;\n    for (i, ch) in s.chars().enumerate() {\n        if i % 2 == 0 && ch.is_uppercase()\
    \ {\n            cnt += 1;\n        }\n    }\n    cnt", "    let vowels = ['A',\
    \ 'E', 'I', 'O', 'U'];\n    let mut count = 0;\n    for c in s.chars() {\n   \
    \     if vowels.contains(&c) {\n            count += 1;\n        }\n    }\n  \
    \  count", "    s.chars()\n        .enumerate()\n        .map(|(i, c)| if i %\
    \ 2 == 0 && is_upper_vowel(c) { 1 } else { 0 })\n        .sum()", "    let vowels\
    \ = vec![\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let res = s.chars().enumerate().fold(0,\
    \ |acc, (idx, ch)| {\n        if idx % 2 == 0 && vowels.contains(&ch.to_string().as_str())\
    \ {\n            acc + 1\n        } else {\n            acc\n        }\n    });\n\
    \    res as isize", "    s.chars()\n        .filter(|&c| c.is_uppercase())\n \
    \       .count() as isize", "    return (0..s.len())\n        .filter(|x| is_upper(s.chars().nth(*x).unwrap()))\n\
    \        .filter(|x| is_vowel(s.chars().nth(*x).unwrap()))\n        .filter(|x|\
    \ *x % 2 == 0)\n        .count() as isize;", "    let mut count = 0;\n    for\
    \ (i, c) in s.chars().enumerate() {\n        if c.is_uppercase() && i % 2 == 0\
    \ {\n            count += 1;\n        }\n    }\n    count", '    unimplemented!()',
  "    let mut result = 0;\n    for (index, c) in s.chars().enumerate() {\n      \
    \  if c.is_uppercase() && index % 2 == 0 {\n            result += 1;\n       \
    \ }\n    }\n    result", "    let s = s.as_str();\n    let mut count = 0;\n  \
    \  for (i, ch) in s.chars().enumerate() {\n        if i % 2 == 0 && ch.is_uppercase()\
    \ {\n            count += 1;\n        }\n    }\n    count", "    s.chars()\n \
    \       .enumerate()\n        .filter(|&(i, c)| i % 2 == 0 && c.is_ascii_uppercase())\n\
    \        .count() as isize", "    let mut count = 0;\n    let vowels = vec!['A',\
    \ 'E', 'I', 'O', 'U'];\n    for i in s.chars().enumerate() {\n        if i.0 %\
    \ 2 == 0 && vowels.contains(&i.1) {\n            count += 1;\n        }\n    }\n\
    \    count", "    let mut count = 0;\n    for (i, x) in s.chars().enumerate()\
    \ {\n        if (i & 1) == 0 && (x == 'A' || x == 'E' || x == 'I' || x == 'O'\
    \ || x == 'U') {\n            count += 1;\n        }\n    }\n    count", "   \
    \ let n = s.len();\n    let mut count = 0;\n    for i in 0..n {\n        let c\
    \ = s.chars().nth(i).unwrap();\n        if (i + 1) % 2 == 0 && c.is_uppercase()\
    \ && is_vowel(c) {\n            count += 1;\n        }\n    }\n    count", " \
    \   let mut result = 0;\n    for (i, c) in s.chars().enumerate() {\n        if\
    \ i % 2 == 0 && is_upper(c) {\n            result += 1;\n        }\n    }\n  \
    \  result", "    // TODO: Replace this with your code\n    unimplemented!();",
  "    s.chars()\n        .enumerate()\n        .filter(|&(i, c)| i % 2 == 0 && c.is_uppercase())\n\
    \        .count() as isize", "    s.chars()\n        .enumerate()\n        .filter(|&(i,\
    \ c)| i % 2 == 0 && c.is_uppercase())\n        .count() as isize", "    s.chars()\n\
    \        .enumerate()\n        .map(|(i, c)| {\n            let is_even = i %\
    \ 2 == 0;\n            (is_even, c.is_uppercase())\n        })\n        .filter(|(is_even,\
    \ is_uppercase)| *is_even && *is_uppercase)\n        .count() as isize", "   \
    \ let mut count = 0;\n    let is_uppercase = |c: char| c.is_uppercase();\n   \
    \ let is_vowel = |c: char| c == 'A' || c == 'E' || c == 'I' || c == 'O' || c ==\
    \ 'U';\n    let is_upper_vowel = |c: char| is_uppercase(c) && is_vowel(c);\n \
    \   for (index, c) in s.chars().enumerate() {\n        if index % 2 == 0 && is_upper_vowel(c)\
    \ {\n            count += 1;\n        }\n    }\n    count", "    // TODO: You\
    \ can use count_chars\n    return 0;", "    let map = vec!['A', 'E', 'I', 'O',\
    \ 'U'];\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n \
    \       if map.contains(&c) && i % 2 == 0 {\n            count += 1;\n       \
    \ }\n    }\n    count", "    let mut count = 0;\n    for (i, c) in s.chars().enumerate()\
    \ {\n        if i % 2 == 0 && c.is_uppercase() {\n            count += 1;\n  \
    \      }\n    }\n    count", "    s.chars()\n        .enumerate()\n        .filter(|(i,\
    \ c)| c.is_ascii_uppercase() && *i % 2 == 0)\n        .count() as isize", "  \
    \  let mut vowels = 0;\n    for (i, c) in s.chars().enumerate() {\n        if\
    \ (i as isize % 2 == 0) && (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c\
    \ == 'U') {\n            vowels += 1;\n        }\n    }\n    vowels", "    let\
    \ vowels = [0,0,0,0,0];\n    for (i, c) in s.chars().enumerate() {\n        let\
    \ char = c.to_ascii_uppercase();\n        let mut index = 0;\n        match char\
    \ {\n            'A' => index = 0,\n            'E' => index = 1,\n          \
    \  'I' => index = 2,\n            'O' => index = 3,\n            'U' => index\
    \ = 4,\n            _ => continue,\n        }\n        vowels[index] += 1;\n \
    \   }\n    vowels.iter().sum()", "    s.chars()\n        .enumerate()\n      \
    \  .filter(|&(i, c)| i % 2 == 0 && c.is_uppercase())\n        .count() as isize"]
stop_tokens:
- "\n}"
