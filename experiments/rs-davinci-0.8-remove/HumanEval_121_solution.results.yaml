language: rs
name: HumanEval_121_solution
results:
- exit_code: 1
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i, _)| i % 2 ==\
    \ 0).filter(|(_, n)| n % 2 != 0).map(|(_, n)| n).sum()\n}\n\nfn main() {\n   \
    \ let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n --> /tmp/tmply_nqhzo.rs:8:74\n\
    \  |\n8 |     lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).filter(|(_, n)|\
    \ n % 2 != 0).map(|(_, n)| n).sum()\n  |                                     \
    \                                   - ^ - {integer}\n  |                     \
    \                                                   |\n  |                   \
    \                                                     &&isize\n  |\nhelp: `%`\
    \ can be used on `isize`, you can dereference `n`\n  |\n8 |     lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, n)| *n % 2 != 0).map(|(_, n)| n).sum()\n  |    \
    \                                                                    +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659822478
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    // Your code here!\n    let mut sum = 0;\n    for\
    \ (index, item) in lst.iter().enumerate() {\n        if index % 2 == 0 && item\
    \ % 2 != 0 {\n            sum += item;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822479
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|x| x.0 % 2 == 0 &&\
    \ x.1 % 2 != 0).map(|x| x.1).sum()\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822479
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().fold(0, |sum, (idx, el)|\
    \ {\n        if idx % 2 == 0 && el % 2 != 0 {\n            sum + el\n        }\
    \ else {\n            sum\n        }\n    })\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822479
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().fold(0, |acc, (idx, x)| {\n\
    \        if idx % 2 == 0 && *x % 2 != 0 {\n            acc + x\n        } else\
    \ {\n            acc\n        }\n    })\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822479
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let even = lst.iter().enumerate().filter(|&(i, _)|\
    \ i % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum();\n    even\n\
    }\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822479
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().fold(0, |acc, (idx, v)| if\
    \ idx % 2 == 0 { acc + v } else { acc })\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmplbp985po.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822479
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n  let mut count = 0;\n  for (i, x) in lst.iter().enumerate()\
    \ {\n    if i % 2 == 0 && x % 2 != 0 {\n      count += x;\n    }\n  }\n  count\n\
    }\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822479
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i, _)| *i % 2 ==\
    \ 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpyobd6grt.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822479
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (idx, elem) in lst.iter().enumerate()\
    \ {\n        if idx % 2 == 0 && elem % 2 != 0 {\n            sum += elem;\n  \
    \      }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n  \
    \  assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822479
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|x| x.0 % 2 == 0).map(|x|\
    \ x.1 % 2 == 1).filter(|x| *x).count() as isize\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `12`', /tmp/tmpz9862okg.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822479
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut iter = lst.iter();\n    let mut sum = 0;\n\
    \    loop {\n        match iter.next() {\n            Some(x) => {\n         \
    \       sum += x;\n                match iter.next() {\n                    Some(_)\
    \ => continue,\n                    None => break,\n                }\n      \
    \      }\n            None => break,\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmppk4mmycm.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822479
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut res = 0;\n    for (i, n) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 0 && n % 2 != 0 {\n            res += n;\n        }\n\
    \    }\n    res\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822479
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, item) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 0 && item % 2 != 0 {\n            sum += item;\n    \
    \    }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822479
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i, _)| i % 2 ==\
    \ 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpeaellvo7.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822479
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, el) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 0 && el % 2 != 0 {\n            sum += el;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822479
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut s = 0;\n    for (i, x) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 0 && x % 2 != 0 {\n            s += x;\n        }\n \
    \   }\n    s\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822479
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().fold(0, |sum, (index, item)|\
    \ {\n        if index % 2 == 0 && item % 2 != 0 {\n            sum + item\n  \
    \      } else {\n            sum\n        }\n    })\n}\n\nfn main() {\n    let\
    \ candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n  \
    \  assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822479
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut res = 0;\n    for (i, x) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 0 && x % 2 != 0 {\n            res += x;\n        }\n\
    \    }\n    res\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822479
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().fold(0, |acc, (i, x)| {\n\
    \        if i % 2 == 0 && x % 2 != 0 {\n            acc + x\n        } else {\n\
    \            acc\n        }\n    })\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822479
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut odd_sum = 0;\n    for i in 0..lst.len()\
    \ {\n        if i % 2 == 0 && lst[i] % 2 != 0 {\n            odd_sum += lst[i];\n\
    \        }\n    }\n    odd_sum\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822479
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = false;\n    let mut result = 0;\n\
    \    for &i in lst.iter() {\n        if even {\n            result += i;\n   \
    \     }\n        even = !even;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `12`', /tmp/tmp9hzmy0lc.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822479
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i, _)| i % 2 ==\
    \ 0).filter(|&(_, &x)| x % 2 == 1).map(|(_, &x)| x).sum()\n}\n\nfn main() {\n\
    \    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822479
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i, _)| (i % 2) ==\
    \ 0).filter(|(_, &x)| x % 2 != 0).map(|(_, &x)| x).sum()\n}\n\nfn main() {\n \
    \   let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822479
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n  lst.iter().enumerate().fold(0, |acc, (i, item)| {\n\
    \    if i % 2 == 0 && item % 2 != 0 {\n      acc + item\n    } else {\n      acc\n\
    \    }\n  })\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822479
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i, _)| i % 2 ==\
    \ 0).filter(|(_, &x)| x % 2 == 1).map(|(_, &x)| x).sum()\n}\n\nfn main() {\n \
    \   let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822479
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x) in lst.iter().enumerate()\
    \ {\n        if (i + 1) % 2 == 0 && x % 2 != 0 {\n            sum += x;\n    \
    \    }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `12`', /tmp/tmpr2kacb42.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822479
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut s = 0;\n    for i in 0..lst.len() {\n  \
    \      if i % 2 == 0 && lst[i] % 2 != 0 {\n            s += lst[i];\n        }\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822479
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i, _)| i % 2 ==\
    \ 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n  \
    \  let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822479
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i, _)| i % 2 ==\
    \ 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpacm7my0c.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822479
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut total = 0;\n    for (i, &x) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 0 && x % 2 != 0 {\n            total += x;\n        }\n\
    \    }\n    total\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822479
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, n) in lst.iter().enumerate()\
    \ {\n        if n % 2 != 0 && i % 2 == 0 {\n            sum += n;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822479
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().fold(0, |sum, (i, &n)| {\n\
    \        if i % 2 == 0 && n % 2 != 0 {\n            sum + n\n        } else {\n\
    \            sum\n        }\n    })\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822479
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut res = 0;\n    for (i, n) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 0 && n % 2 != 0 {\n            res += n;\n        }\n\
    \    }\n    res\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822479
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    // Your code here\n    0\n}\n\nfn main() {\n   \
    \ let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `12`', /tmp/tmpqxf107sr.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822479
- exit_code: 1
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,_)| i%2 == 0).map(|(_,x)|\
    \ x).filter(|x| x%2 == 1).sum()\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n --> /tmp/tmpvy8xbati.rs:8:80\n\
    \  |\n8 |     lst.iter().enumerate().filter(|(i,_)| i%2 == 0).map(|(_,x)| x).filter(|x|\
    \ x%2 == 1).sum()\n  |                                                       \
    \                        -^- {integer}\n  |                                  \
    \                                             |\n  |                         \
    \                                                      &&isize\n  |\nhelp: `%`\
    \ can be used on `isize`, you can dereference `x`\n  |\n8 |     lst.iter().enumerate().filter(|(i,_)|\
    \ i%2 == 0).map(|(_,x)| x).filter(|x| *x%2 == 1).sum()\n  |                  \
    \                                                             +\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  stdout: ''
  timestamp: 1659822479
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, j) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 0 && j % 2 != 0 {\n            sum += j;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822479
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, j) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 0 && j % 2 != 0 {\n            sum += j;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822479
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    return lst.iter().enumerate().filter(|&(i, _)| i\
    \ % 2 == 0).filter(|&(_, v)| v % 2 != 0).map(|(_, v)| v).sum();\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822479
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in 1..lst.len() {\n\
    \        if i % 2 == 0 {\n            sum += lst[i];\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `12`', /tmp/tmp8zmterq_.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822480
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i, _)| *i % 2 ==\
    \ 0).map(|(_, n)| *n).sum()\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpca882jff.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822480
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut it = lst.iter();\n    let mut odd_sum =\
    \ 0;\n    loop {\n        let b = it.next();\n        let c = it.next();\n   \
    \     match (b, c) {\n            (Some(b), Some(c)) => {\n                if\
    \ b % 2 == 1 {\n                    odd_sum += b;\n                }\n       \
    \         if c % 2 == 1 {\n                    odd_sum += c;\n               \
    \ }\n            }\n            (Some(b), None) => {\n                if b % 2\
    \ == 1 {\n                    odd_sum += b;\n                }\n            }\n\
    \            _ => break,\n        }\n    }\n    odd_sum\n}\n\nfn main() {\n  \
    \  let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `13`,\n right: `12`', /tmp/tmpp_mb7x0d.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822480
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    // return lst.iter().enumerate().filter(|&(i,_)|\
    \ i % 2 == 0).map(|(_, v)| v).filter(|&v| v % 2 == 1).sum();\n    return lst.iter().step_by(2).filter(|&&v|\
    \ v % 2 == 1).sum();\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822479
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().fold(0, |acc, (i, v)| {\n\
    \        if i % 2 == 0 && *v % 2 != 0 {\n            acc + v\n        } else {\n\
    \            acc\n        }\n    })\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822480
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n  let lst_len = lst.len();\n  if lst_len == 0 {\n  \
    \  return 0;\n  }\n  let mut sum = 0;\n  for (i, item) in lst.iter().enumerate()\
    \ {\n    if i % 2 == 0 && item % 2 != 0 {\n      sum += item;\n    }\n  }\n  sum\n\
    }\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822480
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i, _)| i % 2 ==\
    \ 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpacm7my0c.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822479
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, val) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 0 && val % 2 != 0 {\n            sum += val;\n      \
    \  }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822480
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i, _)| i % 2 ==\
    \ 0).map(|(_, &v)| v).sum()\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmp1zwdo1aa.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822480
- exit_code: 1
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    return lst.iter().enumerate().filter(|(i, x)| x\
    \ % 2 == 1 && i % 2 == 0).map(|(_, x)| x).sum();\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n --> /tmp/tmpgpkloxut.rs:8:53\n\
    \  |\n8 |     return lst.iter().enumerate().filter(|(i, x)| x % 2 == 1 && i %\
    \ 2 == 0).map(|(_, x)| x).sum();\n  |                                        \
    \           - ^ - {integer}\n  |                                             \
    \      |\n  |                                                   &&isize\n  |\n\
    help: `%` can be used on `isize`, you can dereference `x`\n  |\n8 |     return\
    \ lst.iter().enumerate().filter(|(i, x)| *x % 2 == 1 && i % 2 == 0).map(|(_, x)|\
    \ x).sum();\n  |                                                   +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659822479
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut num: isize = 0;\n    for (idx, e) in lst.iter().enumerate()\
    \ {\n        if idx % 2 == 0 && e % 2 != 0 {\n            num += e;\n        }\n\
    \    }\n    num\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822480
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut total = 0;\n    for i in 0..lst.len() {\n\
    \        if i % 2 == 0 && lst[i] % 2 != 0 {\n            total += lst[i];\n  \
    \      }\n    }\n    total\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822480
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut result = 0;\n    for (i, el) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 0 && el % 2 != 0 {\n            result += el;\n     \
    \   }\n    }\n    result\n}\n\nfn main() {\n    let candidate = solution;\n  \
    \  assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822480
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n  let mut sum = 0;\n  for (i, n) in lst.iter().enumerate()\
    \ {\n    if i % 2 == 0 && n % 2 != 0 {\n      sum += n;\n    }\n  }\n  sum\n}\n\
    \nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822480
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in 1..lst.len() {\n\
    \        if i % 2 == 0 {\n            sum += lst[i];\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `12`', /tmp/tmp8zmterq_.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822480
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut ans = 0;\n    for (i, v) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 0 && v % 2 != 0 {\n            ans += v;\n        }\n\
    \    }\n    ans\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822480
- exit_code: 1
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    // \u5947\u6570\u7684\u5076\u6570\u4F4D\u7684\u548C\
    \n    let mut v = vec![];\n    for (i, v) in lst.iter().enumerate() {\n      \
    \  if i % 2 == 0 && v % 2 != 0 {\n            v.push(v);\n        }\n    }\n \
    \   v.iter().sum()\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `push` found for reference `&isize` in the\
    \ current scope\n  --> /tmp/tmpkb32y3i2.rs:12:15\n   |\n12 |             v.push(v);\n\
    \   |               ^^^^ method not found in `&isize`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659822480
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i, _)| i % 2 ==\
    \ 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n  \
    \  let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822479
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().filter(|&n| n % 2 == 1).enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, &n)| n).sum()\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `12`', /tmp/tmp32h5dgi9.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822480
- exit_code: 1
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i, _)| i % 2 ==\
    \ 0).filter(|(_, v)| v % 2 != 0).map(|(_, v)| v).sum()\n}\n\nfn main() {\n   \
    \ let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n --> /tmp/tmphmhvhst8.rs:8:74\n\
    \  |\n8 |     lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).filter(|(_, v)|\
    \ v % 2 != 0).map(|(_, v)| v).sum()\n  |                                     \
    \                                   - ^ - {integer}\n  |                     \
    \                                                   |\n  |                   \
    \                                                     &&isize\n  |\nhelp: `%`\
    \ can be used on `isize`, you can dereference `v`\n  |\n8 |     lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, v)| *v % 2 != 0).map(|(_, v)| v).sum()\n  |    \
    \                                                                    +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659822480
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n  let mut sum = 0;\n  for (i, n) in lst.iter().enumerate()\
    \ {\n    if i % 2 == 0 && n % 2 != 0 {\n      sum += n;\n    }\n  }\n  sum\n}\n\
    \nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822480
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut result = 0;\n    for (i, item) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 0 && item % 2 != 0 {\n            result += item;\n \
    \       }\n    }\n    result\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822480
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 0 && x % 2 != 0 {\n            sum += x;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822480
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    return lst.iter().enumerate().filter(|&(index, _)|\
    \ index % 2 == 0).filter(|&(_, val)| val % 2 != 0).map(|(_, val)| val).sum();\n\
    }\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822480
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i, _)| i % 2 ==\
    \ 0).filter(|&(_, n)| n % 2 != 0).map(|(_, n)| n).sum()\n}\n\nfn main() {\n  \
    \  let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822480
- exit_code: 1
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n  let (even, odd) = lst.into_iter().enumerate().partition(|(i,\
    \ _)| i % 2 == 0);\n  even.filter(|(_, n)| n % 2 != 0).map(|(_, n)| n).sum::<isize>()\
    \ +\n  odd.filter(|(_, n)| n % 2 == 0).map(|(_, n)| n).sum::<isize>()\n}\n\nfn\
    \ main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed for `(B, B)`\n --> /tmp/tmpdp36799z.rs:9:3\n\
    \  |\n8 |   let (even, odd) = lst.into_iter().enumerate().partition(|(i, _)| i\
    \ % 2 == 0);\n  |       ----------- consider giving this pattern the explicit\
    \ type `(B, B)`, with the type parameters specified\n9 |   even.filter(|(_, n)|\
    \ n % 2 != 0).map(|(_, n)| n).sum::<isize>() +\n  |   ^^^^ cannot infer type\n\
    \  |\n  = note: type must be known at this point\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659822480
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 0 && x % 2 != 0 {\n            sum += x;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822480
- exit_code: 1
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i, _)| i % 2 ==\
    \ 0).filter(|(_, num)| num % 2 != 0).map(|(_, num)| num).sum()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n --> /tmp/tmpudqe3672.rs:8:78\n\
    \  |\n8 |     lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).filter(|(_, num)|\
    \ num % 2 != 0).map(|(_, num)| num).sum()\n  |                               \
    \                                           --- ^ - {integer}\n  |           \
    \                                                               |\n  |       \
    \                                                                   &&isize\n\
    \  |\nhelp: `%` can be used on `isize`, you can dereference `num`\n  |\n8 |  \
    \   lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).filter(|(_, num)| *num\
    \ % 2 != 0).map(|(_, num)| num).sum()\n  |                                   \
    \                                       +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659822480
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, num) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 0 && num % 2 != 0 {\n            sum += num;\n      \
    \  }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822480
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let lst_len = lst.len();\n    lst.iter().fold(0,\
    \ |sum, value| {\n        if (lst_len - lst.iter().position(|&n| n == *value).unwrap()\
    \ - 1) % 2 == 0 && *value % 2 != 0 {\n            sum + *value\n        } else\
    \ {\n            sum\n        }\n    })\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `12`', /tmp/tmp641kb7a7.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822480
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (idx, x) in lst.iter().enumerate()\
    \ {\n        if idx % 2 == 0 && x % 2 != 0 {\n            sum += x;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822480
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().filter(|&x| x % 2 == 1).enumerate().filter(|(a,\
    \ _)| a % 2 == 0).map(|(_, y)| y).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `12`', /tmp/tmpyvbhdevn.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822480
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut total = 0;\n    for (i, x) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 0 && x % 2 != 0 {\n            total += x;\n        }\n\
    \    }\n    total\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822480
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().filter(|&n| n % 2 == 1)\n        .enumerate()\n\
    \        .filter(|&(i, _)| i % 2 == 0)\n        .map(|(_, n)| n)\n        .sum()\n\
    }\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `12`', /tmp/tmpu0b_ilcz.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822480
- exit_code: 1
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n  lst.iter().step_by(2).filter(|x| x % 2 != 0).sum()\n\
    }\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n --> /tmp/tmpcu05hx0e.rs:8:38\n\
    \  |\n8 |   lst.iter().step_by(2).filter(|x| x % 2 != 0).sum()\n  |          \
    \                          - ^ - {integer}\n  |                              \
    \      |\n  |                                    &&isize\n  |\nhelp: `%` can be\
    \ used on `isize`, you can dereference `x`\n  |\n8 |   lst.iter().step_by(2).filter(|x|\
    \ *x % 2 != 0).sum()\n  |                                    +\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  stdout: ''
  timestamp: 1659822480
- exit_code: 1
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|x| x.0 % 2 == 0).map(|x|\
    \ x.1).filter(|x| x % 2 != 0).sum()\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n --> /tmp/tmpzrjzhra1.rs:8:79\n\
    \  |\n8 |     lst.iter().enumerate().filter(|x| x.0 % 2 == 0).map(|x| x.1).filter(|x|\
    \ x % 2 != 0).sum()\n  |                                                     \
    \                        - ^ - {integer}\n  |                                \
    \                                             |\n  |                         \
    \                                                    &&isize\n  |\nhelp: `%` can\
    \ be used on `isize`, you can dereference `x`\n  |\n8 |     lst.iter().enumerate().filter(|x|\
    \ x.0 % 2 == 0).map(|x| x.1).filter(|x| *x % 2 != 0).sum()\n  |              \
    \                                                               +\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0369`.\n"
  stdout: ''
  timestamp: 1659822480
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut s = 0;\n    for (i, j) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 0 && j % 2 != 0 {\n            s += j;\n        }\n \
    \   }\n    s\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822480
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().step_by(2).sum()\n}\n\nfn main() {\n\
    \    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpo9ar_9af.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822480
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(idx, _)| idx %\
    \ 2 == 0).filter(|&(_, &val)| val % 2 != 0).map(|(_, &val)| val).sum()\n}\n\n\
    fn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822480
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i, _)| i % 2 ==\
    \ 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n  \
    \  let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822479
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut res = 0;\n    for (idx, &i) in lst.iter().enumerate()\
    \ {\n        if idx % 2 == 0 && i % 2 != 0 {\n            res += i;\n        }\n\
    \    }\n    res\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822480
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 0 && x % 2 != 0 {\n            sum += x;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822480
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().fold(0, |acc, (i, x)| {\n\
    \        if i % 2 == 0 && x % 2 != 0 {\n            acc + x\n        } else {\n\
    \            acc\n        }\n    })\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822479
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i, v)| i % 2 ==\
    \ 0 && v % 2 != 0).map(|(_, v)| v).sum()\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822480
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for n in lst.iter().step_by(2)\
    \ {\n        if n % 2 != 0 {\n            sum += n;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822480
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (index, value) in lst.iter().enumerate()\
    \ {\n        if index % 2 == 0 && value % 2 != 0 {\n            sum += value;\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822480
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, v) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 0 && v % 2 != 0 {\n            sum += v;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822480
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut result = 0;\n    for (index, item) in lst.iter().enumerate()\
    \ {\n        if index % 2 == 0 && item % 2 != 0 {\n            result += item;\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822481
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in 1..lst.len() {\n\
    \        if i % 2 == 0 {\n            sum += lst[i];\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `12`', /tmp/tmp8zmterq_.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822480
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, v) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 0 && v % 2 != 0 {\n            sum += v;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822480
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut acc = 0;\n    for (index, item) in lst.iter().enumerate()\
    \ {\n        if index % 2 == 0 && item % 2 != 0 {\n            acc += item;\n\
    \        }\n    }\n    acc\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822480
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut accumulator = 0;\n    for (i, item) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 0 && item % 2 != 0 {\n            accumulator += item;\n\
    \        }\n    }\n    accumulator\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822481
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut lst = lst;\n    lst.sort();\n    lst.iter().step_by(2).sum()\n\
    }\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmpyayrv8ab.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822481
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut result = 0;\n    for i in 0..lst.len() {\n\
    \        if i % 2 == 0 && lst[i] % 2 != 0 {\n            result += lst[i];\n \
    \       }\n    }\n    result\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822481
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    // your solution here\n    return 0;\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `12`', /tmp/tmpo1in4f_q.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822481
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i, _)| i % 2 ==\
    \ 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n  \
    \  let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822479
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut res = 0;\n    for (i, n) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 0 && n % 2 != 0 {\n            res += n;\n        }\n\
    \    }\n    res\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822479
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i, &x)| x % 2 ==\
    \ 1 && i % 2 == 0).map(|(_, &x)| x).sum()\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822481
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    // Your code here\n    let mut lst = lst;\n    lst.sort();\n\
    \    let mut sum = 0;\n    for i in (0..lst.len()).step_by(2) {\n        sum +=\
    \ lst[i];\n    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n \
    \   assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmps556xkyk.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822481
- exit_code: 1
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().filter(|n| n % 2 == 1).enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, n)| n).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n --> /tmp/tmprvg6pb57.rs:8:29\n\
    \  |\n8 |     lst.iter().filter(|n| n % 2 == 1).enumerate().filter(|(i, _)| i\
    \ % 2 == 0).map(|(_, n)| n).sum()\n  |                           - ^ - {integer}\n\
    \  |                           |\n  |                           &&isize\n  |\n\
    help: `%` can be used on `isize`, you can dereference `n`\n  |\n8 |     lst.iter().filter(|n|\
    \ *n % 2 == 1).enumerate().filter(|(i, _)| i % 2 == 0).map(|(_, n)| n).sum()\n\
    \  |                           +\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659822481
- exit_code: 1
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().filter(|x| (x % 2) == 1).enumerate().filter(|(i,\
    \ _)| i % 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n --> /tmp/tmpfgwkw31t.rs:8:30\n\
    \  |\n8 |     lst.iter().filter(|x| (x % 2) == 1).enumerate().filter(|(i, _)|\
    \ i % 2 == 0).map(|(_, x)| x).sum()\n  |                            - ^ - {integer}\n\
    \  |                            |\n  |                            &&isize\n  |\n\
    help: `%` can be used on `isize`, you can dereference `x`\n  |\n8 |     lst.iter().filter(|x|\
    \ (*x % 2) == 1).enumerate().filter(|(i, _)| i % 2 == 0).map(|(_, x)| x).sum()\n\
    \  |                            +\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659822481
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i, x)| i % 2 ==\
    \ 0 && x % 2 != 0).map(|(_, &x)| x).sum()\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822481
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i, _)| i % 2 ==\
    \ 0).filter(|&(_, &e)| e % 2 != 0).map(|(_, &e)| e).sum()\n}\n\nfn main() {\n\
    \    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822481
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i, _)| i % 2 ==\
    \ 0).filter(|&(_, x)| x % 2 != 0).map(|(_, &x)| x).sum()\n}\n\nfn main() {\n \
    \   let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822481
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 0 && x % 2 != 0 {\n            sum += x;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822480
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut ret = 0;\n    for (i, item) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 0 && item % 2 != 0 {\n            ret += item;\n    \
    \    }\n    }\n    ret\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822481
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n  lst.iter().enumerate().filter(|x| x.0 % 2 == 0 &&\
    \ x.1 % 2 != 0).map(|x| x.1).sum()\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822481
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i, _)| i % 2 ==\
    \ 0).map(|(_, &n)| n).sum()\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpym9fi0ke.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822481
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in 0..lst.len() {\n\
    \        if i % 2 == 0 && lst[i] % 2 != 0 {\n            sum += lst[i];\n    \
    \    }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822481
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().fold(0, |acc, (i, e)| if\
    \ i % 2 == 0 { acc + e } else { acc })\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmp9wza9jup.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822481
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, v) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 0 && v % 2 != 0 {\n            sum += v;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822480
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().fold(0, |acc, (i, &n)| {\n\
    \        if i % 2 == 0 && n % 2 != 0 {\n            acc + n\n        } else {\n\
    \            acc\n        }\n    })\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822481
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i, _)| i % 2 ==\
    \ 0).map(|(_, &n)| n).sum()\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpgaj8b5b0.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822481
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i, _)| i % 2 ==\
    \ 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n  \
    \  let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822479
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i, _)| i % 2 ==\
    \ 0).filter(|&(_, &x)| x % 2 == 1).map(|(_, &x)| x).sum()\n}\n\nfn main() {\n\
    \    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822479
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut odd_sum = 0;\n    for (i, x) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 0 && x % 2 != 0 {\n            odd_sum += x;\n      \
    \  }\n    }\n    odd_sum\n}\n\nfn main() {\n    let candidate = solution;\n  \
    \  assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822481
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in 0..lst.len() {\n\
    \        if i % 2 == 0 && lst[i] % 2 != 0 {\n            sum += lst[i];\n    \
    \    }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822481
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, &n) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 0 && n % 2 != 0 {\n            sum += n;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822481
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut result = 0;\n    for (i, e) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 0 && e % 2 != 0 {\n            result += e;\n       \
    \ }\n    }\n    result\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822481
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(index, _)| index\
    \ % 2 == 0).filter(|&(_, x)| x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822481
- exit_code: 1
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i, n)| n % 2 ==\
    \ 1 && i % 2 == 0).map(|(_, n)| n).sum()\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n --> /tmp/tmpaikhcst9.rs:8:46\n\
    \  |\n8 |     lst.iter().enumerate().filter(|(i, n)| n % 2 == 1 && i % 2 == 0).map(|(_,\
    \ n)| n).sum()\n  |                                            - ^ - {integer}\n\
    \  |                                            |\n  |                       \
    \                     &&isize\n  |\nhelp: `%` can be used on `isize`, you can\
    \ dereference `n`\n  |\n8 |     lst.iter().enumerate().filter(|(i, n)| *n % 2\
    \ == 1 && i % 2 == 0).map(|(_, n)| n).sum()\n  |                             \
    \               +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659822481
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i,_)| i%2==0).map(|(_,n)|\
    \ n).sum()\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmp1shnusrq.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822481
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut ans = 0;\n    for i in 0..lst.len() {\n\
    \        if i % 2 == 0 && lst[i] % 2 != 0 {\n            ans += lst[i];\n    \
    \    }\n    }\n    ans\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822481
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i, _)| i % 2 ==\
    \ 0).filter(|&(_, v)| v % 2 != 0).map(|(_, v)| v).sum()\n}\n\nfn main() {\n  \
    \  let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822481
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 0;\n    for\
    \ i in 0..lst.len() {\n        if i % 2 == 0 {\n            even += lst[i];\n\
    \        } else {\n            odd += lst[i];\n        }\n    }\n    odd - even\n\
    }\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-3`,\n right: `12`', /tmp/tmpsvp9nkh5.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822481
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().fold(0, |acc, (i, n)| acc\
    \ + n * (i & 1) as isize)\n}\n\nfn main() {\n    let candidate = solution;\n \
    \   assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `12`', /tmp/tmp__ymp8w6.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822481
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut result = 0;\n    for i in 0..lst.len() {\n\
    \        if i%2==0 && lst[i]%2==1 {\n            result += lst[i];\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822481
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|x| x.0 % 2 == 0 &&\
    \ x.1 % 2 != 0).map(|x| x.1).sum()\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822479
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut odd_sum = 0;\n    for (i, v) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 0 && v % 2 != 0 {\n            odd_sum += v;\n      \
    \  }\n    }\n    odd_sum\n}\n\nfn main() {\n    let candidate = solution;\n  \
    \  assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822481
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let res = lst.iter().enumerate().filter(|(i, v)|\
    \ *i % 2 == 0 && *v % 2 != 0).map(|(_, v)| v).sum();\n    res\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822482
- exit_code: 1
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    //! Create a vector to hold the odd numbered elements.\n\
    \    let mut odds = Vec::new();\n    //! Create a vector to hold the even numbered\
    \ elements.\n    let mut evens = Vec::new();\n    //! Populate the vectors with\
    \ odd and even numbered elements.\n    for (i, &item) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 0 {\n            evens.push(item);\n        } else {\n\
    \            odds.push(item);\n        }\n    }\n    //! Filter the odds vector\
    \ to remove the evens and add them up.\n    return odds.into_iter().filter(|&x|\
    \ x % 2 != 0).sum();\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0753]: expected outer doc comment\n  --> /tmp/tmpc4c6_4ti.rs:10:5\n\
    \   |\n10 |     //! Create a vector to hold the even numbered elements.\n   |\
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note:\
    \ inner doc comments like this (starting with `//!` or `/*!`) can only appear\
    \ before items\n\nerror[E0753]: expected outer doc comment\n  --> /tmp/tmpc4c6_4ti.rs:12:5\n\
    \   |\n12 |     //! Populate the vectors with odd and even numbered elements.\n\
    \   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n\
    \   = note: inner doc comments like this (starting with `//!` or `/*!`) can only\
    \ appear before items\n\nerror[E0753]: expected outer doc comment\n  --> /tmp/tmpc4c6_4ti.rs:20:5\n\
    \   |\n20 |     //! Filter the odds vector to remove the evens and add them up.\n\
    \   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  \
    \ |\n   = note: inner doc comments like this (starting with `//!` or `/*!`) can\
    \ only appear before items\n\nwarning: unused doc comment\n  --> /tmp/tmpc4c6_4ti.rs:10:5\n\
    \   |\n10 |     //! Create a vector to hold the even numbered elements.\n   |\
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n11 |     let mut\
    \ evens = Vec::new();\n   |     --------------------------- rustdoc does not generate\
    \ documentation for statements\n   |\n   = note: `#[warn(unused_doc_comments)]`\
    \ on by default\n   = help: use `//` for a plain comment\n\nwarning: unused doc\
    \ comment\n  --> /tmp/tmpc4c6_4ti.rs:12:5\n   |\n12 |       //! Populate the vectors\
    \ with odd and even numbered elements.\n   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    13 | /     for (i, &item) in lst.iter().enumerate() {\n14 | |         if i % 2\
    \ == 0 {\n15 | |             evens.push(item);\n16 | |         } else {\n17 |\
    \ |             odds.push(item);\n18 | |         }\n19 | |     }\n   | |_____-\
    \ rustdoc does not generate documentation for expressions\n   |\n   = help: use\
    \ `//` for a plain comment\n\nwarning: unused doc comment\n  --> /tmp/tmpc4c6_4ti.rs:20:5\n\
    \   |\n20 |     //! Filter the odds vector to remove the evens"
  stdout: ''
  timestamp: 1659822481
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    // Your solution goes here!\n    lst.iter().enumerate().filter(|&(i,\
    \ _)| i % 2 == 1).map(|(_, &x)| x).sum()\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `12`', /tmp/tmp_7x2kisw.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822482
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, v) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 0 && v % 2 != 0 {\n            sum += v;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822480
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().fold(0, |acc, (i, v)| {\n\
    \        if i % 2 == 0 && *v % 2 != 0 {\n            acc + v\n        } else {\n\
    \            acc\n        }\n    })\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822480
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i, _)| i % 2 ==\
    \ 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpacm7my0c.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822479
- exit_code: 1
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i, x)| i % 2 ==\
    \ 0 && x % 2 != 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n --> /tmp/tmpqyxxuguy.rs:8:60\n\
    \  |\n8 |     lst.iter().enumerate().filter(|(i, x)| i % 2 == 0 && x % 2 != 0).map(|(_,\
    \ x)| x).sum()\n  |                                                          -\
    \ ^ - {integer}\n  |                                                         \
    \ |\n  |                                                          &&isize\n  |\n\
    help: `%` can be used on `isize`, you can dereference `x`\n  |\n8 |     lst.iter().enumerate().filter(|(i,\
    \ x)| i % 2 == 0 && *x % 2 != 0).map(|(_, x)| x).sum()\n  |                  \
    \                                        +\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659822481
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i, _)| i % 2 ==\
    \ 0)\n        .filter(|&(_, x)| x % 2 != 0)\n        .map(|(_, x)| x)\n      \
    \  .sum()\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822482
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n  let len = lst.len();\n  let mut result = 0;\n  for\
    \ i in 0..len {\n    if i % 2 == 0 && lst[i] % 2 != 0 {\n      result += lst[i];\n\
    \    }\n  }\n  result\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822482
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let length = lst.len();\n    let mut result = 0;\n\
    \    for i in 1..length {\n        if i % 2 == 0 {\n            result += lst[i];\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `12`', /tmp/tmpm2m958vr.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822482
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, &x) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 0 && x % 2 != 0 {\n            sum += x;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822482
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (pos, val) in lst.iter().enumerate()\
    \ {\n        if pos % 2 == 0 && val % 2 != 0 {\n            sum += val;\n    \
    \    }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822482
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, j) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 0 && j % 2 != 0 {\n            sum += j;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822479
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut result = 0;\n    while\
    \ i < lst.len() {\n        if i % 2 == 0 && lst[i] % 2 != 0 {\n            result\
    \ += lst[i];\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822482
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n  if lst.len() < 1 {\n    return 0;\n  }\n  lst.iter().enumerate().fold(0,\
    \ |acc, (idx, x)| {\n    if idx % 2 == 0 && x % 2 != 0 {\n      acc + x\n    }\
    \ else {\n      acc\n    }\n  })\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822482
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut solution: isize = 0;\n    for i in 0..lst.len()\
    \ {\n        if i % 2 == 0 && lst[i] % 2 != 0 {\n            solution += lst[i];\n\
    \        }\n    }\n    solution\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822482
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in 1..lst.len() {\n\
    \        if i % 2 == 0 {\n            sum += lst[i];\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `12`', /tmp/tmp8zmterq_.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822480
- exit_code: 1
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i, _)| i % 2 ==\
    \ 0).filter(|(_, i)| i % 2 != 0).map(|(_, i)| i).sum()\n}\n\nfn main() {\n   \
    \ let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&isize` by `{integer}`\n --> /tmp/tmpwp5k_6uy.rs:8:74\n\
    \  |\n8 |     lst.iter().enumerate().filter(|(i, _)| i % 2 == 0).filter(|(_, i)|\
    \ i % 2 != 0).map(|(_, i)| i).sum()\n  |                                     \
    \                                   - ^ - {integer}\n  |                     \
    \                                                   |\n  |                   \
    \                                                     &&isize\n  |\nhelp: `%`\
    \ can be used on `isize`, you can dereference `i`\n  |\n8 |     lst.iter().enumerate().filter(|(i,\
    \ _)| i % 2 == 0).filter(|(_, i)| *i % 2 != 0).map(|(_, i)| i).sum()\n  |    \
    \                                                                    +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659822481
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut lst: Vec<isize> = lst;\n    lst.sort();\n\
    \    let mut sum = 0;\n    for i in (0..lst.len()).step_by(2) {\n        sum +=\
    \ lst[i];\n    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n \
    \   assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmpu0dou5pt.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822482
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in 0..lst.len() {\n\
    \        if i % 2 == 0 && lst[i] % 2 != 0 {\n            sum += lst[i];\n    \
    \    }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822481
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut res = 0;\n    for (i, &x) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 0 && x % 2 != 0 {\n            res += x;\n        }\n\
    \    }\n    res\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822482
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut acc = 0;\n    for (i, val) in lst.iter().enumerate()\
    \ {\n        if (i + 1) % 2 == 0 && val % 2 != 0 {\n            acc += val;\n\
    \        }\n    }\n    acc\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `12`', /tmp/tmpkztdgtp5.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822482
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().filter(|&&x| x % 2 == 1).fold(0, |acc,\
    \ &x| acc + x)\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `13`,\n right: `12`', /tmp/tmp5aeikrs7.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822482
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut odds = Vec::new();\n    let mut result =\
    \ 0;\n    for (i, n) in lst.iter().enumerate() {\n        if i % 2 == 0 {\n  \
    \          result += n;\n        } else {\n            odds.push(n);\n       \
    \ }\n    }\n    for n in odds {\n        result -= n;\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `12`', /tmp/tmpvyguh2u5.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822482
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    return lst.iter().enumerate().filter(|(i, _v)| i\
    \ % 2 == 1).map(|(_i, v)| v).sum();\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `12`', /tmp/tmpcsojo39m.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822482
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i, _)| i % 2 ==\
    \ 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpacm7my0c.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822479
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut result = 0;\n    for (index, i) in lst.iter().enumerate()\
    \ {\n        if index % 2 == 0 && i % 2 != 0 {\n            result += i;\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822482
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i, &x)| i % 2 ==\
    \ 0 && x % 2 != 0).map(|(_, &x)| x).sum()\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822482
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in 0..lst.len() {\n\
    \        if lst[i] % 2 != 0 && i % 2 == 0 {\n            sum += lst[i];\n    \
    \    }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822482
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i, _)| i % 2 ==\
    \ 0).map(|(_, n)| n).sum()\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpui53af4k.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822482
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in 1..lst.len() {\n\
    \        if lst[i] % 2 != 0 {\n            sum += lst[i];\n        }\n    }\n\
    \    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmphf_8ybvp.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822482
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let l = lst.len();\n    if l % 2 == 0 {\n      \
    \  let mut sum = 0;\n        for i in (0..l).step_by(2) {\n            sum +=\
    \ lst[i];\n        }\n        sum\n    } else {\n        0\n    }\n}\n\nfn main()\
    \ {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]),\
    \ 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `9`', /tmp/tmp5fzwleyf.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822482
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut result = 0;\n    for i in 0..lst.len() {\n\
    \        if i % 2 == 0 && lst[i] % 2 != 0 {\n            result += lst[i];\n \
    \       }\n    }\n    result\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822481
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().fold(0, |acc, (pos, elem)|\
    \ {\n        match pos % 2 {\n            0 => acc + elem,\n            _ => acc,\n\
    \        }\n    })\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpna2z37ld.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822482
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in 0..lst.len() {\n\
    \        if lst[i] % 2 != 0 && i % 2 == 0 {\n            sum += lst[i];\n    \
    \    }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822482
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 0 && x % 2 != 0 {\n            sum += x;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822480
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i, _)| i % 2 ==\
    \ 0).filter(|&(_, &x)| x % 2 == 1).map(|(_, &x)| x).sum()\n}\n\nfn main() {\n\
    \    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n\
    \    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822479
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut count = 0;\n    for i in 0..lst.len() {\n\
    \        if i % 2 == 0 && lst[i] % 2 != 0 {\n            count += lst[i];\n  \
    \      }\n    }\n    count\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822482
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut result = 0;\n    for (i, item) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 0 && item % 2 != 0 {\n            result += item;\n \
    \       }\n    }\n    result\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822480
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i, _)| i % 2 ==\
    \ 0).map(|(_, &x)| x).sum()\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmp5l8n4tq6.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822482
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    return lst.iter().enumerate().filter(|(idx, _)|\
    \ idx % 2 == 0).filter(|(_, num)| *num % 2 != 0).map(|(_, num)| *num).sum();\n\
    }\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822482
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, &elem) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 0 && elem % 2 != 0 {\n            sum += elem;\n    \
    \    }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822482
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(idx, _)| idx % 2\
    \ == 0).map(|(_, el)| el).sum()\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmpdbhuhms7.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822482
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    return lst.iter().enumerate().filter(|&(i, x)| i\
    \ % 2 == 0 && x % 2 != 0).map(|(_, x)| x).sum();\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822483
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, v) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 0 && v % 2 != 0 {\n            sum += v;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822480
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let odd_sum = lst.iter().enumerate().filter(|(i,\
    \ &x)| x % 2 == 1 && i % 2 == 0).fold(0, |acc, (_, &x)| acc + x);\n    odd_sum\n\
    }\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822482
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in 0..lst.len() {\n\
    \        if i % 2 == 0 && lst[i] % 2 != 0 {\n            sum += lst[i];\n    \
    \    }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822481
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    // accumulate the odd numbers from even positions\n\
    \    lst.iter().enumerate().filter(|&(i, _)| i % 2 == 0).filter(|&(_, x)| x %\
    \ 2 == 1).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822483
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i, _)| i % 2 ==\
    \ 0).map(|(_, &x)| x).sum()\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmp5l8n4tq6.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822482
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in 0..lst.len() {\n\
    \        if lst[i] % 2 != 0 && i % 2 == 0 {\n            sum += lst[i];\n    \
    \    }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822482
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n  lst.iter().enumerate().fold(0, |a, (i, e)| {\n   \
    \ if i & 1 == 0 && *e & 1 == 1 {\n      a + e\n    } else {\n      a\n    }\n\
    \  })\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822483
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut iter = lst.iter();\n    iter.skip(1).step_by(2).sum()\n\
    }\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `12`', /tmp/tmp7_u108ep.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822483
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut odd_even = 0;\n    for (i, x) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 0 && x % 2 != 0 {\n            odd_even += x;\n     \
    \   }\n    }\n    odd_even\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822483
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, n) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 0 && n % 2 != 0 {\n            sum += n;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822483
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i, _)| i % 2 ==\
    \ 1).fold(0, |acc, (_, x)| acc + x)\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `12`', /tmp/tmpyjfu2_l0.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822483
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut total = 0;\n    for (i, n) in lst.iter().enumerate()\
    \ {\n        if n % 2 != 0 && i % 2 == 0 {\n            total += n;\n        }\n\
    \    }\n    total\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822483
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, x) in lst.iter().enumerate()\
    \ {\n        if (i + 1) % 2 == 0 && x % 2 != 0 {\n            sum += x;\n    \
    \    }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `12`', /tmp/tmpr2kacb42.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822479
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut total = 0;\n    for (i, n) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 0 && n % 2 != 0 {\n            total += n;\n        }\n\
    \    }\n    total\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822483
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n  let mut x = 0;\n  for (i, v) in lst.iter().enumerate()\
    \ {\n    if i % 2 == 0 && v % 2 != 0 {\n      x += v;\n    }\n  }\n  x\n}\n\n\
    fn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5, 8,\
    \ 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822483
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().fold(0, |acc, (x, y)| if\
    \ x % 2 == 0 && y % 2 != 0 { acc + y } else { acc })\n}\n\nfn main() {\n    let\
    \ candidate = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n  \
    \  assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822483
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut answer = 0;\n    for i in 0..lst.len() {\n\
    \        if i % 2 == 0 && lst[i] % 2 != 0 {\n            answer += lst[i];\n \
    \       }\n    }\n    answer\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822483
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i, _)| i % 2 ==\
    \ 1).fold(0, |acc, (_, x)| acc + x)\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `12`', /tmp/tmpyjfu2_l0.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822483
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in 1..lst.len() {\n\
    \        if lst[i] % 2 != 0 {\n            sum += lst[i];\n        }\n    }\n\
    \    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `12`', /tmp/tmphf_8ybvp.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822482
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().fold(0, |sum, (i, n)| {\n\
    \        if i % 2 == 0 && *n % 2 != 0 {\n            sum + n\n        } else {\n\
    \            sum\n        }\n    })\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822483
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in 0..lst.len() {\n\
    \        if i % 2 == 0 && lst[i] % 2 != 0 {\n            sum += lst[i];\n    \
    \    }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822481
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut sum = 0;\n    for n\
    \ in lst {\n        if i % 2 == 0 && n % 2 != 0 {\n            sum += n;\n   \
    \     }\n        i += 1;\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822483
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|&(i, _)| i % 2 ==\
    \ 0).map(|(_, num)| num).sum()\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `54`,\n right: `0`', /tmp/tmprkl4va2r.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822483
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    //We also need to know where we are in the list,\
    \ for this we will use an index\n    let mut index = 0;\n    //We are going to\
    \ need to use the sum() method from the Iterator trait.\n    //The Iterator trait\
    \ is implemented by Vec (and other types).\n    //The sum() method takes a closure,\
    \ so we pass in a lambda.\n    //The closure captures the index variable, so we\
    \ need to use the move keyword\n    lst.iter().filter(|x| {\n        index +=\
    \ 1;\n        //To find the odd numbers in even positions, we must check whether\
    \ the current\n        //number is odd and the index is even.\n        **x % 2\
    \ == 1 && index % 2 == 0\n    }).sum()\n}\n\nfn main() {\n    let candidate =\
    \ solution;\n    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `12`', /tmp/tmpl10pdn3t.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822483
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, n) in lst.iter().enumerate()\
    \ {\n        if n % 2 != 0 && i % 2 == 0 {\n            sum += n;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822479
- exit_code: 101
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    lst.iter().enumerate().filter(|(i, _)| (i + 1) %\
    \ 2 == 0).map(|(_, x)| x).sum()\n}\n\nfn main() {\n    let candidate = solution;\n\
    \    assert_eq!(candidate(vec![5, 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3,\
    \ 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30, 13, 24, 321]), 0);\n  \
    \  assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2, 4,\
    \ 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `12`', /tmp/tmpujcndrba.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822483
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    // TODO: put your solution here!\n    let mut sum\
    \ = 0;\n    for (index, item) in lst.iter().enumerate() {\n        if index %\
    \ 2 == 0 && item % 2 != 0 {\n            sum += item;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822483
- exit_code: 0
  program: "/// Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n/// Examples\n/// >>> solution([5, 8,\
    \ 7, 1]) \n/// 12\n/// >>> solution([3, 3, 3, 3, 3]) \n/// 9\nfn solution(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for (i, &n) in lst.iter().enumerate()\
    \ {\n        if i % 2 == 0 && n % 2 != 0 {\n            sum += n;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = solution;\n    assert_eq!(candidate(vec![5,\
    \ 8, 7, 1]), 12);\n    assert_eq!(candidate(vec![3, 3, 3, 3, 3]), 9);\n    assert_eq!(candidate(vec![30,\
    \ 13, 24, 321]), 0);\n    assert_eq!(candidate(vec![5, 9]), 5);\n    assert_eq!(candidate(vec![2,\
    \ 4, 8]), 0);\n    assert_eq!(candidate(vec![30, 13, 23, 32]), 23);\n    assert_eq!(candidate(vec![3,\
    \ 13, 2, 9]), 3);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822481
