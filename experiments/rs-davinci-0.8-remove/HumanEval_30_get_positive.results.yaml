language: rs
name: HumanEval_30_get_positive
results:
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    // Complete this function\n    let mut v = Vec::new();\n\
    \    for x in l {\n        if x > 0 {\n            v.push(x);\n        }\n   \
    \ }\n    v\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 101
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut l = l;\n    let mut i = 0;\n    while i < l.len()\
    \ {\n        if l[i] < 0 {\n            l.remove(i);\n        } else {\n     \
    \       i += 1;\n        }\n    }\n    l\n}\n\nfn main() {\n    let candidate\
    \ = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5,\
    \ 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),\
    \ vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, 2, 3, 3, 9, 0, 123, 1]`,\n right: `[5, 3, 2, 3, 3, 9, 123, 1]`', /tmp/tmph7qjeavc.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut res = Vec::new();\n    for n in l {\n        if\
    \ n > 0 {\n            res.push(n);\n        }\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut v = Vec::new();\n    for i in l {\n        if i\
    \ > 0 {\n            v.push(i);\n        }\n    }\n    v\n}\n\nfn main() {\n \
    \   let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|x| *x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|&x| x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut res = Vec::<isize>::new();\n    for i in l {\n\
    \        if i > 0 {\n            res.push(i);\n        }\n    }\n    res\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|x| *x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n\tl.into_iter().filter(|&x| x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|i| *i > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|&x| x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 101
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5,\
    \ 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),\
    \ vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp43zikw8b.rs:3:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|&x| x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut v: Vec<isize> = Vec::new();\n    for e in l {\n\
    \        if e > 0 {\n            v.push(e);\n        }\n    }\n    v\n}\n\nfn\
    \ main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in l {\n      \
    \  if i > 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut r: Vec<isize> = Vec::new();\n    for i in l {\n\
    \        if i > 0 {\n            r.push(i);\n        }\n    }\n    r\n}\n\nfn\
    \ main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|&x| x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut out: Vec<isize> = Vec::new();\n    for i in l {\n\
    \        if i > 0 {\n            out.push(i);\n        }\n    }\n    out\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|&x| x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|&n| n > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|x| *x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for n in l {\n      \
    \  if n > 0 {\n            result.push(n);\n        }\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|x| *x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 101
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut res = Vec::new();\n    for i in l {\n        if\
    \ i >= 0 {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, 2, 3, 3, 9, 0, 123, 1]`,\n right: `[5, 3, 2, 3, 3, 9, 123, 1]`', /tmp/tmpz_jkgpoq.rs:15:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|x| *x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut out = Vec::new();\n    for i in l {\n        if\
    \ i > 0 {\n            out.push(i);\n        }\n    }\n    out\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut r = Vec::new();\n    for e in l {\n        if e\
    \ > 0 {\n            r.push(e);\n        }\n    }\n    r\n}\n\nfn main() {\n \
    \   let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|x| *x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|i| *i > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut output = Vec::new();\n    for i in l {\n      \
    \  if i > 0 {\n            output.push(i);\n        }\n    }\n    output\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut v = Vec::new();\n    for i in l {\n        if i\
    \ > 0 {\n            v.push(i);\n        }\n    }\n    v\n}\n\nfn main() {\n \
    \   let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|x| *x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|&x| x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|x| *x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|x| *x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|x| *x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|&x| x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut new_list = Vec::new();\n    for n in l {\n    \
    \    if n > 0 {\n            new_list.push(n);\n        }\n    }\n    new_list\n\
    }\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for &item in l.iter()\
    \ {\n        if item > 0 {\n            result.push(item);\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    return l.into_iter().filter(|x| *x > 0).collect();\n}\n\
    \nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut positive = Vec::new();\n    for i in l {\n    \
    \    if i > 0 {\n            positive.push(i);\n        }\n    }\n    positive\n\
    }\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in l {\n      \
    \  if i > 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|x| *x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 101
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    vec![1, 2, 3]\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3]`,\n right: `[4, 5, 6]`', /tmp/tmp3jl97a4y.rs:8:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut positives = Vec::new();\n    for n in l {\n   \
    \     if n > 0 {\n            positives.push(n);\n        }\n    }\n    positives\n\
    }\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|&x| x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut r = Vec::new();\n    for i in l {\n        if i\
    \ > 0 {\n            r.push(i);\n        }\n    }\n    r\n}\n\nfn main() {\n \
    \   let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|x| *x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|&x| x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|&x| x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|n| *n > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in l {\n      \
    \  if i > 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut positives = Vec::new();\n    for item in l {\n\
    \        if item > 0 {\n            positives.push(item);\n        }\n    }\n\
    \    positives\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|&n| n > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n\tl.into_iter().filter(|&i| i > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|x| *x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut out = Vec::new();\n    for i in l {\n        if\
    \ i > 0 {\n            out.push(i);\n        }\n    }\n    out\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|n| *n > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 101
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut v = Vec::new();\n    for i in l {\n        if i\
    \ >= 0 {\n            v.push(i);\n        }\n    }\n    v\n}\n\nfn main() {\n\
    \    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, 2, 3, 3, 9, 0, 123, 1]`,\n right: `[5, 3, 2, 3, 3, 9, 123, 1]`', /tmp/tmpr2n2ql10.rs:15:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|x| *x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut pos: Vec<isize> = Vec::new();\n    for item in\
    \ l {\n        if item > 0 {\n            pos.push(item);\n        }\n    }\n\
    \    pos\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|i| *i > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in l {\n      \
    \  if i > 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n\tl.into_iter().filter(|&x| x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|x| *x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|i| *i > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut res = Vec::new();\n    for el in l {\n        if\
    \ el > 0 {\n            res.push(el);\n        }\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|&x| x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|i| *i > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    return l.into_iter().filter(|&x| x > 0).collect();\n}\n\
    \nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for x in l {\n      \
    \  if x > 0 {\n            result.push(x);\n        }\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|&x| x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 101
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut l = l;\n    let mut i = 0;\n    while i < l.len()\
    \ {\n        if l[i] < 0 {\n            l.remove(i);\n        } else {\n     \
    \       i += 1;\n        }\n    }\n    l\n}\n\nfn main() {\n    let candidate\
    \ = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5,\
    \ 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),\
    \ vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, 2, 3, 3, 9, 0, 123, 1]`,\n right: `[5, 3, 2, 3, 3, 9, 123, 1]`', /tmp/tmph7qjeavc.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in l {\n      \
    \  if i > 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in l {\n      \
    \  if i > 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|x| *x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut new_list = Vec::new();\n    for element in l {\n\
    \        if element > 0 {\n            new_list.push(element);\n        }\n  \
    \  }\n    new_list\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut positive_numbers = Vec::new();\n    for x in l\
    \ {\n        if x > 0 {\n            positive_numbers.push(x);\n        }\n  \
    \  }\n    positive_numbers\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|&x| x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|x| *x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|&x| x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|x| *x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|&x| x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|i| *i > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|x| *x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for el in l {\n     \
    \   if el > 0 {\n            result.push(el);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|x| *x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|&i| i > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    return l.into_iter().filter(|n| *n > 0).collect();\n}\n\
    \nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for v in l {\n      \
    \  if v > 0 {\n            result.push(v);\n        }\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    // TODO\n    let mut res: Vec<isize> = Vec::new();\n  \
    \  for i in 0..l.len() {\n        if l[i] > 0 {\n            res.push(l[i]);\n\
    \        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|x| *x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut ret = Vec::new();\n    for e in l {\n        if\
    \ e > 0 {\n            ret.push(e);\n        }\n    }\n    ret\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 101
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    vec![1, 2, 3]\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3]`,\n right: `[4, 5, 6]`', /tmp/tmp3jl97a4y.rs:8:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut v: Vec<isize> = Vec::new();\n    for n in l {\n\
    \        if n > 0 {\n            v.push(n);\n        }\n    }\n    v\n}\n\nfn\
    \ main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut res = Vec::new();\n    for n in l {\n        if\
    \ n > 0 {\n            res.push(n);\n        }\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|&x| x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in l {\n      \
    \  if i > 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    // TODO: Implement this!\n    let mut positives = Vec::new();\n\
    \    for num in l {\n        if num > 0 {\n            positives.push(num);\n\
    \        }\n    }\n    positives\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut r = Vec::new();\n    for num in l {\n        if\
    \ num > 0 {\n            r.push(num);\n        }\n    }\n    r\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut res = Vec::new();\n    for el in l {\n        if\
    \ el > 0 {\n            res.push(el);\n        }\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|x| *x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for x in l {\n      \
    \  if x > 0 {\n            result.push(x);\n        }\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|n| *n > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|x| *x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut list: Vec<isize> = Vec::new();\n    for i in l\
    \ {\n        if i > 0 {\n            list.push(i);\n        }\n    }\n    list\n\
    }\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|n| *n > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|x| *x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|x| *x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|&x| x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 101
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate\
    \ = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5,\
    \ 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),\
    \ vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmp43zikw8b.rs:3:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n\tl.into_iter().filter(|x| *x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|i| *i > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut v = Vec::new();\n    for num in l {\n        if\
    \ num > 0 {\n            v.push(num);\n        }\n    }\n    v\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|&v| v > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|n| *n > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|x| *x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|&x| x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|n| *n > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|&x| x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n\tl.into_iter().filter(|&x| x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for &i in l.iter() {\n\
    \        if i > 0 {\n            result.push(i);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for x in l {\n      \
    \  if x > 0 {\n            result.push(x);\n        }\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut res = Vec::new();\n    for i in l {\n        if\
    \ i > 0 {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let positive = |x: &isize| *x > 0;\n    l.into_iter().filter(positive).collect()\n\
    }\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut pos: Vec<isize> = Vec::new();\n    for n in l {\n\
    \        if n > 0 {\n            pos.push(n);\n        }\n    }\n    pos\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut new = Vec::<isize>::new();\n    for x in l {\n\
    \        if x > 0 {\n            new.push(x);\n        }\n    }\n    new\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 101
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    // TODO: implement it\n    unimplemented!()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpy1m4fnc_.rs:4:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|x| *x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|&x| x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|&x| x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 101
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    vec![0; 0]\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[4, 5, 6]`', /tmp/tmpuid4l5sz.rs:8:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|x| *x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|&x| x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|x| *x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in l {\n      \
    \  if i > 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut res = Vec::new();\n    for x in l {\n        if\
    \ x > 0 {\n            res.push(x);\n        }\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|&x| x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|x| *x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|x| *x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    return l.into_iter().filter(|x| *x > 0).collect();\n}\n\
    \nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|&n| n > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|&x| x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|x| *x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|&x| x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|x| *x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut rv = Vec::new();\n    for el in l {\n        if\
    \ el > 0 {\n            rv.push(el);\n        }\n    }\n    rv\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|&n| n > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|v| *v > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|&x| x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|&v| v > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|x| *x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|i| *i > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|&x| x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut positive = Vec::new();\n    for e in l {\n    \
    \    if e > 0 {\n            positive.push(e);\n        }\n    }\n    positive\n\
    }\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|&x| x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|&n| n > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|&x| x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut temp = Vec::new();\n    for i in l {\n        if\
    \ i > 0 {\n            temp.push(i);\n        }\n    }\n    temp\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|x| *x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 101
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    vec![]\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[4, 5, 6]`', /tmp/tmp9ktmch2w.rs:8:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|&x| x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut out = Vec::new();\n    for x in l {\n        if\
    \ x > 0 {\n            out.push(x);\n        }\n    }\n    out\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    return l.into_iter().filter(|&x| x > 0).collect();\n}\n\
    \nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|x| *x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|x| *x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 101
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut res = Vec::new();\n    for x in l {\n        if\
    \ x >= 0 {\n            res.push(x);\n        }\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, 2, 3, 3, 9, 0, 123, 1]`,\n right: `[5, 3, 2, 3, 3, 9, 123, 1]`', /tmp/tmpw2126396.rs:15:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|x| *x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let pos = |x: &isize| -> bool { *x > 0 };\n    return l.into_iter().filter(pos).collect();\n\
    }\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|&x| x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|x| *x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|n| *n > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|x| *x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|x| *x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut new_l = Vec::new();\n    for &x in l.iter() {\n\
    \        if x > 0 {\n            new_l.push(x);\n        }\n    }\n    new_l\n\
    }\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|x| *x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|&x| x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|x| *x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut v = Vec::new();\n    for i in l {\n        if i\
    \ > 0 {\n            v.push(i);\n        }\n    }\n    v\n}\n\nfn main() {\n \
    \   let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|x| *x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|v| *v > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|n| *n > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut p: Vec<isize> = Vec::new();\n    for e in l {\n\
    \        if e > 0 {\n            p.push(e);\n        }\n    }\n    p\n}\n\nfn\
    \ main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n\tl.into_iter().filter(|x| *x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n\tl.into_iter().filter(|x| *x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 101
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    vec![1, 2, 3]\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3]`,\n right: `[4, 5, 6]`', /tmp/tmp3jl97a4y.rs:8:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822425
- exit_code: 101
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut ret = Vec::new();\n    for i in l {\n        if\
    \ i >= 0 {\n            ret.push(i);\n        }\n    }\n    ret\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, 2, 3, 3, 9, 0, 123, 1]`,\n right: `[5, 3, 2, 3, 3, 9, 123, 1]`', /tmp/tmprzezkzje.rs:15:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|x| *x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 101
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    vec![]\n}\n\nfn main() {\n    let candidate = get_positive;\n\
    \    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[4, 5, 6]`', /tmp/tmp9ktmch2w.rs:8:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|x| *x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 101
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    // TODO - implement this function to pass the test\n  \
    \  vec![]\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[4, 5, 6]`', /tmp/tmpwgoromib.rs:9:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n\tl.into_iter().filter(|&x| x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|x| *x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in l {\n      \
    \  if i > 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    //l.iter().filter(|x| *x > 0).map(|x| *x).collect()\n \
    \   let mut ret: Vec<isize> = Vec::new();\n    for x in l {\n        if x > 0\
    \ {\n            ret.push(x);\n        }\n    }\n    ret\n}\n\nfn main() {\n \
    \   let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5,\
    \ 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|n| *n > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822425
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|x| *x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    return l.into_iter().filter(|n| n > &0).collect();\n}\n\
    \nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
    \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
    \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822426
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|x| *x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
- exit_code: 0
  program: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
    \ -> Vec<isize> {\n    l.into_iter().filter(|&x| x > 0).collect()\n}\n\nfn main()\
    \ {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2,\
    \ 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
    \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822424
