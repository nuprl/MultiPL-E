name: HumanEval_91_is_bored
language: rs
prompt: "/// You'll be given a string of words, and your task is to count the number\n\
  /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n/// Sentences\
  \ are delimited by '.', '?' or '!'.\n/// For example:\nfn is_bored(S: String) ->\
  \ isize {\n"
tests: "}\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
  Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
  )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
  bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
  \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
  You and I are going for a walk\")), 0);\n}\n"
completions: ["    S.split(|c| c == '!' || c == '.' || c == '?')\n        .filter(|s|\
    \ s.starts_with(\"I\"))\n        .count() as isize", "    S.split(|c| c == '.'\
    \ || c == '?' || c == '!').filter(|s| s.starts_with(\"I \")).count() as isize",
  "    let mut f = false;\n    let mut counter = 0;\n    for c in S.chars() {\n  \
    \      match c {\n            'I' => {\n                if f {\n             \
    \       counter += 1;\n                }\n                f = true;\n        \
    \    }\n            '.' | '?' | '!' => {\n                f = false;\n       \
    \     }\n            _ => {}\n        }\n    }\n    counter", "    let mut count\
    \ = 0;\n    let mut words = S.split_whitespace();\n    while let Some(word) =\
    \ words.next() {\n        if word == \"I\" {\n            count += 1;\n      \
    \  }\n    }\n    count", "    let x: Vec<_> = S.split(|c| c == '.' || c == '?'\
    \ || c == '!').filter(|s| s.len() > 0).collect();\n    let mut y: Vec<_> = x.iter().map(|s|\
    \ s.trim()).filter(|s| s.len() > 0).collect();\n    if y.len() == 0 {\n      \
    \  return 0;\n    }\n    if y[0].starts_with(\"I\") {\n        y.remove(0);\n\
    \    }\n    y.iter().filter(|s| s.starts_with(\"I\")).count() as isize", "   \
    \ let mut result = 0;\n    let mut flag = false;\n    for s in S.split(|c| c ==\
    \ '.' || c == '?' || c == '!') {\n        if s.starts_with(\"I\") {\n        \
    \    flag = true;\n        } else {\n            flag = false;\n        }\n  \
    \      if flag {\n            result += 1;\n        }\n    }\n    result", " \
    \   let mut count = 0;\n    let mut is_bored = false;\n    for c in S.chars()\
    \ {\n        if c == '.' || c == '?' || c == '!' {\n            is_bored = false;\n\
    \        } else if c == 'I' {\n            if is_bored {\n                count\
    \ += 1;\n            }\n            is_bored = true;\n        }\n    }\n    count",
  "    let chars: Vec<char> = S.chars().collect();\n    let mut cur_len = 0;\n   \
    \ let mut boredoms = 0;\n    for c in chars {\n        if c == 'I' {\n       \
    \     boredoms += cur_len;\n        }\n        if c == '.' || c == '?' || c ==\
    \ '!' {\n            cur_len = 0;\n        } else {\n            cur_len += 1;\n\
    \        }\n    }\n    boredoms", "    let s = S.as_str();\n    let tokens: Vec<&str>\
    \ = s.split(' ').collect();\n    let mut i = 0;\n    let mut words = 0;\n    let\
    \ mut sentences = 0;\n    let mut bored = 0;\n    for token in tokens {\n    \
    \    if i == 0 && token == \"I\" {\n            bored += 1;\n        }\n     \
    \   if token.ends_with(\".\") || token.ends_with(\"?\") || token.ends_with(\"\
    !\") {\n            sentences += 1;\n            words += 1;\n            i =\
    \ 0;\n        } else {\n            words += 1;\n            i += 1;\n       \
    \ }\n    }\n    let boredom = bored as f64 * (words as f64 / sentences as f64);\n\
    \    boredom as isize", "    S.chars()\n        .filter(|&c| c == '.' || c ==\
    \ '?' || c == '!')\n        .count() as isize", "    let words: Vec<&str> = S.split(|c:\
    \ char| c == '.' || c == '?' || c == '!').collect();\n    let mut boredoms = 0;\n\
    \    for word in words {\n        let words: Vec<&str> = word.split_whitespace().collect();\n\
    \        if words.len() > 0 && words[0] == \"I\" {\n            boredoms += 1;\n\
    \        }\n    }\n    boredoms", "    // Splits on any characters that can delimit\
    \ a sentence, returning an\n    // iterator over the sentence fragments.\n   \
    \ let fragments = S.split(|c: char| c == '.' || c == '?' || c == '!');\n    let\
    \ mut boredoms = 0;\n    for frag in fragments {\n        // Split the sentence\
    \ into words and check if the first word is \"I\".\n        if frag.split_whitespace().next()\
    \ == Some(\"I\") {\n            boredoms += 1;\n        }\n    }\n    boredoms",
  "    let mut bored = 0;\n    let mut counter = 0;\n    let mut start = 0;\n    let\
    \ sentence: Vec<char> = S.chars().collect();\n    for i in 0..sentence.len() {\n\
    \        match sentence[i] {\n            '.' | '?' | '!' => {\n             \
    \   counter += 1;\n                if start == i {\n                    continue;\n\
    \                }\n                if sentence[start] == 'I' {\n            \
    \        bored += 1;\n                }\n                start = i + 1;\n    \
    \        }\n            _ => {}\n        }\n    }\n    // println!(\"number of\
    \ sentence: {}\", counter);\n    bored", "    S.split(|c| \"?!.\".contains(c))\n\
    \        .filter(|s| s.trim_start().starts_with(\"I\"))\n        .count() as isize",
  "    let split: Vec<&str> = S.split(|c: char| c == '.' || c == '?' || c == '!').collect();\n\
    \    let mut is_bored = 0;\n    for sentence in split {\n        let words: Vec<&str>\
    \ = sentence.split(\" \").collect();\n        if words.len() >= 1 && words[0]\
    \ == \"I\" {\n            is_bored += 1;\n        }\n    }\n    is_bored", " \
    \   let words: Vec<&str> = S.split(|c: char| c == '.' || c == '?' || c == '!').collect();\n\
    \    let mut count = 0;\n    for word in words {\n        if word.starts_with(\"\
    I\") {\n            count += 1;\n        }\n    }\n    count", "    let mut n\
    \ = 0;\n    let s: Vec<&str> = S.split(|c: char| c == '.' || c == '?' || c ==\
    \ '!').collect();\n    for i in 0..s.len() {\n        if s[i].starts_with(\"I\"\
    ) {\n            n += 1;\n        }\n    }\n    n", "    let mut bored = 0;\n\
    \    let mut first = true;\n    for c in S.chars() {\n        if first {\n   \
    \         if c == 'I' {\n                bored += 1;\n            }\n        \
    \    first = false;\n        }\n        if c == '?' || c == '.' || c == '!' {\n\
    \            first = true;\n        }\n    }\n    bored", "    let mut count =\
    \ 0;\n    let mut bored = false;\n    for word in S.split(|c: char| c == '.' ||\
    \ c == '?' || c == '!') {\n        for w in word.split_whitespace() {\n      \
    \      if w == \"I\" {\n                bored = true;\n            }\n       \
    \     if bored && w == \"me\" {\n                count += 1;\n               \
    \ bored = false;\n            }\n        }\n    }\n    count", "    let mut bored\
    \ = 0;\n    let words: Vec<&str> = S.split(|c: char| !c.is_alphabetic()).collect();\n\
    \    for word in words {\n        if word == \"I\" {\n            bored += 1;\n\
    \        }\n    }\n    bored", "    let mut i = 0;\n    let mut boredoms = 0;\n\
    \    let mut in_sentence = false;\n    for x in S.chars() {\n        if !in_sentence\
    \ && x == 'I' {\n            in_sentence = true;\n            boredoms += 1;\n\
    \        } else if in_sentence && x == '.' {\n            in_sentence = false;\n\
    \        }\n        i += 1;\n    }\n    boredoms", "    let v: Vec<&str> = S.split(|c:\
    \ char| \"?.!\".contains(c)).collect();\n    let mut count = 0;\n    for s in\
    \ v {\n        if s.starts_with(\"I\") {\n            count += 1;\n        }\n\
    \    }\n    count", "    let S = S.to_lowercase();\n    let mut boredoms = 0;\n\
    \    let mut i = 0;\n    while i < S.len() {\n        if S.chars().nth(i).unwrap()\
    \ == 'i' {\n            if i + 2 < S.len() {\n                if S.chars().nth(i\
    \ + 1).unwrap() == ' '\n                    && S.chars().nth(i + 2).unwrap() !=\
    \ ' '\n                {\n                    boredoms += 1;\n               \
    \ }\n            }\n        }\n        i += 1;\n    }\n    boredoms", "    S.split(&['.',\
    \ '?', '!']).filter(|s| s.starts_with(\"I\")).count() as isize", "    let mut\
    \ bored = 0;\n    let mut start_with_I = false;\n    for ch in S.chars() {\n \
    \       if !start_with_I {\n            start_with_I = ch == 'I';\n        }\n\
    \        if start_with_I && (ch == '.' || ch == '?' || ch == '!') {\n        \
    \    bored += 1;\n            start_with_I = false;\n        }\n    }\n    bored",
  "    let mut sum = 0;\n    let v: Vec<&str> = S.split(|c| c == '.' || c == '?' ||\
    \ c == '!').collect();\n    for s in v {\n        if s.len() >= 3 && s[0..3] ==\
    \ \"I am\" {\n            sum += 1;\n        }\n    }\n    sum", "    let mut\
    \ res = 0;\n    let mut record = false;\n    for c in S.chars() {\n        if\
    \ record && c != ' ' {\n            res += 1;\n            record = false;\n \
    \       } else if c == '.' || c == '?' || c == '!' {\n            record = true;\n\
    \        }\n    }\n    res", "    let mut bored: isize = 0;\n    let mut v: Vec<&str>\
    \ = Vec::new();\n    v = S.split(|c: char| { c == '.' || c == '?' || c == '!'\
    \ }).collect();\n    for s in v {\n        if s.starts_with(\"I\") {\n       \
    \     bored += 1;\n        }\n    }\n    bored", "    let mut found_i = false;\n\
    \    let mut bored_count = 0;\n    for c in S.chars() {\n        if !found_i {\n\
    \            found_i = c == 'I';\n        } else {\n            bored_count +=\
    \ match c {\n                '.' | '?' | '!' => {\n                    found_i\
    \ = false;\n                    1\n                }\n                _ => 0,\n\
    \            };\n        }\n    }\n    bored_count", "    let mut bored = 0;\n\
    \    let mut prev = ' ';\n    for ch in S.chars() {\n        if prev == 'I' &&\
    \ ch == ' ' {\n            bored += 1;\n        }\n        prev = ch;\n    }\n\
    \    bored", "    let string = S.trim().to_string();\n    if string.len() == 0\
    \ {\n        return 0;\n    }\n    let split_n = string.split(|c| c == '.' ||\
    \ c == '?' || c == '!');\n    split_n.map(|s| if s.starts_with(\"I\") { 1 } else\
    \ { 0 }).sum()", "    let mut B: usize = 0;\n    let mut n: usize = 0;\n    for\
    \ c in S.chars() {\n        match c {\n            '.' | '?' | '!' => {\n    \
    \            if n == 1 {\n                    B += 1;\n                }\n   \
    \             n = 0;\n            }\n            ' ' => n = 0,\n            'I'\
    \ => n = 1,\n            _ => (),\n        }\n    }\n    B as isize", "    let\
    \ mut counter = 0;\n    let sentences = S.split(|x| x == '.' || x == '?' || x\
    \ == '!');\n    for sentence in sentences {\n        let mut words = sentence.split_whitespace();\n\
    \        if let Some(first_word) = words.next() {\n            if first_word ==\
    \ \"I\" {\n                counter += 1;\n            }\n        }\n    }\n  \
    \  counter", "    let mut c: isize = 0;\n    let mut l: isize = 0;\n    for i\
    \ in S.chars() {\n        if i == '!' || i == '?' || i == '.' {\n            if\
    \ l == 2 && S.chars().nth(c as usize) == Some('I') {\n                l = 0;\n\
    \                c += 1;\n            } else {\n                l = 0;\n     \
    \       }\n        } else if i == ' ' {\n            l = 0;\n        } else {\n\
    \            l += 1;\n        }\n    }\n    c", "    let mut bored = 0;\n    let\
    \ mut i = 0;\n    let mut words = S.split_whitespace();\n    while let Some(word)\
    \ = words.next() {\n        if word == \"I\" {\n            while let Some(word)\
    \ = words.next() {\n                if word == \".\" || word == \"?\" || word\
    \ == \"!\" {\n                    break;\n                }\n            }\n \
    \           bored += 1;\n        }\n    }\n    bored", "    let mut count = 0;\n\
    \    let mut started = false;\n    for c in S.chars() {\n        if started &&\
    \ c == ' ' {\n            count += 1;\n            started = false;\n        }\
    \ else if c == 'I' {\n            started = true;\n        } else if c == '.'\
    \ || c == '?' || c == '!' {\n            started = false;\n        }\n    }\n\
    \    count", "    let v: Vec<&str> = S.split(|c: char| c == '.' || c == '?' ||\
    \ c == '!').collect();\n    let mut count = 0;\n    for s in v {\n        let\
    \ v2: Vec<&str> = s.split(' ').collect();\n        if v2.len() > 0 && v2[0] ==\
    \ \"I\" {\n            count += 1;\n        }\n    }\n    count", "    let mut\
    \ sum = 0;\n    let words: Vec<&str> = S.split_whitespace().collect();\n    for\
    \ i in 0..words.len() {\n        if words[i] == \"I\" {\n            sum += 1;\n\
    \        }\n    }\n    sum", "    let mut bored_count = 0;\n    let words: Vec<&str>\
    \ = S.split(|c: char| {\n        match c {\n            '.' | '?' | '!' => true,\n\
    \            _ => false,\n        }\n    }).collect();\n    for i in 0..words.len()\
    \ {\n        let w = words[i];\n        let ws: Vec<&str> = w.split(\" \").collect();\n\
    \        if ws[0] == \"I\" {\n            bored_count += 1;\n        }\n    }\n\
    \    bored_count", "    let mut count = 0;\n    let v: Vec<&str> = S.split_terminator(|c|\
    \ c == '.' || c == '?' || c == '!').collect();\n    for x in v {\n        if x.trim_start().starts_with(\"\
    I\") {\n            count += 1;\n        }\n    }\n    count", "    let mut cnt\
    \ = 0;\n    let mut word = false;\n    for c in S.chars() {\n        if c == '.'\
    \ || c == '?' || c == '!' {\n            if word {\n                cnt += 1;\n\
    \            }\n            word = false;\n        } else if c == ' ' {\n    \
    \        word = false;\n        } else if c == 'I' {\n            word = true;\n\
    \        }\n    }\n    cnt", "    let mut iter = S.split(' ');\n    while let\
    \ Some(word) = iter.next() {\n        if word == \"I\" {\n            return 1;\n\
    \        }\n    }\n    0", "    let mut boredoms = 0;\n    let mut i = 0;\n  \
    \  while i < S.len() {\n        let mut end_of_sentence = false;\n        if S.chars().nth(i).unwrap()\
    \ == 'I' && (i == 0 || S.chars().nth(i - 1).unwrap() == '.' || S.chars().nth(i\
    \ - 1).unwrap() == '?' || S.chars().nth(i - 1).unwrap() == '!') {\n          \
    \  boredoms += 1;\n        }\n        while !end_of_sentence {\n            if\
    \ S.chars().nth(i).unwrap() == '.' || S.chars().nth(i).unwrap() == '?' || S.chars().nth(i).unwrap()\
    \ == '!' {\n                end_of_sentence = true;\n            }\n         \
    \   i += 1;\n        }\n    }\n    boredoms", "    let mut bored = 0;\n    let\
    \ mut buf = S.split(|c| match c {\n        '.' | '?' | '!' => true,\n        _\
    \ => false,\n    });\n    for i in buf {\n        let mut split = i.split_whitespace();\n\
    \        match split.next() {\n            Some(x) => {\n                if x\
    \ == \"I\" {\n                    bored += 1;\n                }\n           \
    \ }\n            None => {}\n        }\n    }\n    bored", "    S.split(|ch| ch\
    \ == '.' || ch == '?' || ch == '!').filter(|s| s.starts_with(\"I\")).count() as\
    \ isize", "    let v: Vec<&str> = S.split(|c: char| c == '!' || c == '.' || c\
    \ == '?').collect();\n    let mut r = 0;\n    for s in v {\n        if s.starts_with(\"\
    I\") {\n            r += 1;\n        }\n    }\n    r", "    let v: Vec<&str> =\
    \ S.split(|c: char| c == '.' || c == '?' || c == '!').collect();\n    let mut\
    \ boredoms = 0;\n    for sentence in v {\n        let first_word = sentence.split_whitespace().next().unwrap_or(\"\
    \");\n        if first_word == \"I\" {\n            boredoms += 1;\n        }\n\
    \    }\n    boredoms", "    let mut bored: isize = 0;\n    let mut it = S.split_whitespace();\n\
    \    while let Some(word) = it.next() {\n        match word {\n            \"\
    I\" => {\n                while let Some(word) = it.next() {\n               \
    \     match word {\n                        \".\" | \"?\" | \"!\" => {\n     \
    \                       bored += 1;\n                            break;\n    \
    \                    }\n                        _ => continue,\n             \
    \       }\n                }\n            }\n            _ => continue,\n    \
    \    }\n    }\n    bored", "    let mut c = 0;\n    let mut flag = false;\n  \
    \  for c in S.chars() {\n        if flag {\n            if c.is_whitespace() {\n\
    \                flag = false;\n            }\n        } else {\n            if\
    \ c == 'I' {\n                c += 1;\n                flag = true;\n        \
    \    }\n        }\n    }\n    c", "    let mut count = 0;\n    let mut word =\
    \ false;\n    for ch in S.chars() {\n        if ch == 'I' {\n            count\
    \ += 1;\n            word = true;\n        } else if word && (ch == ' ' || ch\
    \ == ',') {\n            word = false;\n        } else if ch == '.' || ch == '?'\
    \ || ch == '!' {\n            word = false;\n        }\n    }\n    count", " \
    \   let count: isize = S.split(|c: char| c == '.' || c == '?' || c == '!')\n \
    \       .filter(|sentence| sentence.starts_with(\"I\"))\n        .count() as isize;\n\
    \    return count;", "    let mut word = String::new();\n    let mut is_bored\
    \ = 0;\n    for w in S.split_whitespace() {\n        word = w.to_string();\n \
    \       if word == \"I\" {\n            is_bored += 1;\n        }\n    }\n   \
    \ is_bored", "    let mut num = 0;\n    let mut has_dot = false;\n    for c in\
    \ S.chars() {\n        if has_dot {\n            if c == 'i' {\n             \
    \   num += 1;\n            }\n            has_dot = false;\n        }\n      \
    \  if c == '.' || c == '?' || c == '!' {\n            has_dot = true;\n      \
    \  }\n    }\n    num", "    let mut bored = 0;\n    let mut i = S.chars();\n \
    \   let mut c = i.next();\n    while c != None {\n        if c.unwrap() == 'I'\
    \ {\n            bored += 1;\n            let mut count = 0;\n            while\
    \ c != None && count < 3 {\n                if c.unwrap() == ' ' {\n         \
    \           count += 1;\n                }\n                c = i.next();\n  \
    \          }\n        } else {\n            while c != None && c.unwrap() != '.'\
    \ && c.unwrap() != '?' && c.unwrap() != '!' {\n                c = i.next();\n\
    \            }\n            c = i.next();\n        }\n    }\n    bored", "   \
    \ let mut count = 0;\n    let mut sentence = \"\";\n    for word in S.split_whitespace()\
    \ {\n        sentence = sentence.trim();\n        if sentence.starts_with(\"I\"\
    ) {\n            count += 1;\n        }\n        sentence = format!(\"{} {}\"\
    , sentence, word);\n    }\n    sentence = sentence.trim();\n    if sentence.starts_with(\"\
    I\") {\n        count += 1;\n    }\n    count", "    let mut bored = 0;\n    let\
    \ v: Vec<&str> = S.split(|c| c == '.' || c == '?' || c == '!').collect();\n  \
    \  for s in v {\n        if s.starts_with(\"I\") {\n            bored += 1;\n\
    \        }\n    }\n    bored", "    let count = S.chars().fold(0, |acc, c| {\n\
    \        match c {\n            '.' | '?' | '!' => acc + 1,\n            _ =>\
    \ acc,\n        }\n    });\n    let mut count2 = 0;\n    for ch in S.chars() {\n\
    \        if ch == 'I' {\n            count2 += 1;\n        }\n    }\n    return\
    \ count - count2;", "    S.chars()\n        .fold((0, None), |(cnt, last), c|\
    \ {\n            match (last, c) {\n                (Some('I'), ' ') => (cnt +\
    \ 1, Some(c)),\n                _ => (cnt, Some(c)),\n            }\n        })\n\
    \        .0", "    let mut nbored = 0;\n    let mut b = false;\n    for c in S.chars()\
    \ {\n        if c == '.' || c == '?' || c == '!' {\n            b = false;\n \
    \       } else if b {\n            nbored += 1;\n        } else if c == 'I' {\n\
    \            b = true;\n        }\n    }\n    nbored", "    let mut bored = 0;\n\
    \    let chars: Vec<char> = S.chars().collect();\n    for i in 0..chars.len()\
    \ {\n        if chars[i] == 'I' {\n            match chars[i + 1] {\n        \
    \        ' ' => {\n                    match chars[i + 2] {\n                \
    \        'a' => {\n                            match chars[i + 3] {\n        \
    \                        'm' => {\n                                    match chars[i\
    \ + 4] {\n                                        ' ' => {\n                 \
    \                           if chars[i + 5] == 'b' {\n                       \
    \                         match chars[i + 6] {\n                             \
    \                       'o' => {\n                                           \
    \             match chars[i + 7] {\n                                         \
    \                   'r' => {\n                                               \
    \                 match chars[i + 8] {\n                                     \
    \                               'e' => {\n                                   \
    \                                     match chars[i + 9] {\n                 \
    \                                                           'd' => {\n       \
    \                                                                         bored\
    \ += 1;\n                                                                    \
    \        }\n                                                                 \
    \           _ => {}\n                                                        \
    \                }\n                                                         \
    \           }\n                                                              \
    \      _ => {}\n                                                             \
    \   }\n                                                            }\n       \
    \                                                     _ => {}\n              \
    \                                          }\n                               \
    \                     }\n                                                    _\
    \ => {}\n                                                }\n                 \
    \                           }\n                                        }\n   \
    \                                     _ => {}\n                              \
    \      }\n                                }\n                                _\
    \ => {}\n                            }\n                        }\n          \
    \              _ => {}\n                    }\n                }\n           \
    \     _ => {}\n            }\n        }\n    }\n    bored", "    let mut bored\
    \ = 0;\n    let mut last = '.';\n    for c in S.chars() {\n        if last ==\
    \ 'I' && c == ' ' {\n            bored += 1;\n        }\n        last = c;\n \
    \   }\n    bored", "    let mut score = 0;\n    let mut boredom = false;\n   \
    \ for c in S.chars() {\n        if c == '.' || c == '?' || c == '!' {\n      \
    \      boredom = false;\n        } else if c == 'I' {\n            boredom = true;\n\
    \        } else if boredom && c == ' ' {\n            score += 1;\n        }\n\
    \    }\n    score", "    let mut boredoms = 0;\n    let mut words = String::new();\n\
    \    for c in S.chars() {\n        if c == '.' || c == '?' || c == '!' {\n   \
    \         if words.starts_with(\"I\") {\n                boredoms += 1;\n    \
    \        }\n            words.clear();\n        } else {\n            words.push(c);\n\
    \        }\n    }\n    boredoms", "    let mut boredom_count = 0;\n    let words:\
    \ Vec<&str> = S.split(|c: char| !c.is_alphabetic()).collect();\n    for i in 0..words.len()\
    \ {\n        if words[i] == \"I\" && i < words.len() - 1 {\n            if words[i\
    \ + 1] == \"am\" {\n                boredom_count += 1;\n            }\n     \
    \   }\n    }\n    boredom_count", "    let split = S.split(|c: char| c == '!'\
    \ || c == '.' || c == '?');\n    split.filter(|&s| s.starts_with(\"I\")).count()\
    \ as isize", "    S.split(|c| c == '.' || c == '?' || c == '!').filter(|s| s.starts_with(\"\
    I\")).count() as isize", "    let mut count = 0;\n    let mut previous = ' ';\n\
    \    for c in S.chars() {\n        if c == 'I' && previous == ' ' {\n        \
    \    count += 1;\n        }\n        if c == '.' || c == '?' || c == '!' {\n \
    \           previous = ' ';\n        } else {\n            previous = c;\n   \
    \     }\n    }\n    count", "    let words: Vec<&str> = S.split(|c: char| c ==\
    \ '.' || c == '?' || c == '!').collect();\n    let mut count = 0;\n    for i in\
    \ words {\n        if i.starts_with(\"I\") {\n            count += 1;\n      \
    \  }\n    }\n    count", "    let mut total: isize = 0;\n    let mut sub_str =\
    \ String::new();\n    for c in S.chars() {\n        if c == '.' || c == '?' ||\
    \ c == '!' {\n            if sub_str.starts_with(\"I\") {\n                total\
    \ += 1;\n            }\n            sub_str = String::new();\n        } else {\n\
    \            sub_str.push(c);\n        }\n    }\n    total", "    let mut c =\
    \ 0;\n    let mut is_bored = false;\n    for (i, ch) in S.chars().enumerate()\
    \ {\n        match ch {\n            'I' => {\n                if !is_bored {\n\
    \                    is_bored = true;\n                    c += 1;\n         \
    \       }\n            }\n            ' ' | '.' | '?' | '!' => {\n           \
    \     if is_bored {\n                    is_bored = false;\n                }\n\
    \            }\n            _ => {\n                if is_bored {\n          \
    \          if i > 0 {\n                        let i = i - 1;\n              \
    \          if let Some(prev) = S.chars().nth(i) {\n                          \
    \  if prev == 'I' {\n                                is_bored = false;\n     \
    \                       }\n                        }\n                    }\n\
    \                }\n            }\n        }\n    }\n    c", "    let mut bored\
    \ = 0;\n    let mut it = S.split(|c| c == '.' || c == '?' || c == '!');\n    for\
    \ ref sentence in it {\n        let words: Vec<&str> = sentence.split(' ').collect();\n\
    \        if words.len() > 0 && words[0] == \"I\" {\n            bored += 1;\n\
    \        }\n    }\n    bored", "    let mut boredoms = 0;\n    let mut sentence\
    \ = false;\n    for word in S.split_whitespace() {\n        if sentence && word.starts_with(\"\
    I\") {\n            boredoms += 1;\n        }\n        sentence = word.ends_with('.')\
    \ || word.ends_with('?') || word.ends_with('!');\n    }\n    boredoms", "    let\
    \ mut is_bored = 0;\n    let mut after_i = false;\n    for c in S.chars() {\n\
    \        if after_i {\n            if c.is_whitespace() {\n                is_bored\
    \ += 1;\n                after_i = false;\n            }\n        } else {\n \
    \           if c == 'i' || c == 'I' {\n                after_i = true;\n     \
    \       }\n        }\n    }\n    is_bored", "    let mut count = 0;\n    let chars:\
    \ Vec<char> = S.chars().collect();\n    for i in 0..S.len() {\n        let mut\
    \ j = i;\n        while j < S.len() && chars[j] != '.' && chars[j] != '?' && chars[j]\
    \ != '!' {\n            j += 1;\n        }\n        if chars[i] == 'I' {\n   \
    \         let words: Vec<&str> = S[i..j].split(' ').collect();\n            if\
    \ words.len() == 1 {\n                count += 1;\n            }\n        }\n\
    \        i = j;\n    }\n    count", "    S.split(|c| c == '.' || c == '?' || c\
    \ == '!').filter(|s| s.starts_with(\"I\")).count() as isize", "    let mut counter\
    \ = 0;\n    let mut word_counter = 0;\n    let mut start_with_i = false;\n   \
    \ for c in S.chars() {\n        if word_counter == 0 && c == 'I' {\n         \
    \   start_with_i = true;\n        }\n        if start_with_i && word_counter ==\
    \ 0 && c == ' ' {\n            counter += 1;\n            start_with_i = false;\n\
    \        }\n        if c == ' ' {\n            word_counter += 1;\n        } else\
    \ if c == '.' || c == '?' || c == '!' {\n            word_counter = 0;\n     \
    \   }\n    }\n    counter", "    let mut boredoms = 0;\n    let mut words = S.split(\"\
    \ \");\n    while let Some(word) = words.next() {\n        if word == \"I\" {\n\
    \            if words.next() == Some(\"am\") {\n                boredoms += 1;\n\
    \            }\n        }\n    }\n    boredoms", '    S.matches("I ").count()
    as isize', "    let mut bored = 0;\n    let mut counter = 0;\n    let mut first_word\
    \ = true;\n    for c in S.chars() {\n        if c == 'I' && first_word {\n   \
    \         bored += 1;\n        }\n        if c == ' ' {\n            first_word\
    \ = false;\n        }\n        if c == '.' || c == '?' || c == '!' {\n       \
    \     counter += 1;\n            first_word = true;\n        }\n    }\n    bored\
    \ - counter", "    let S = S.split(\".\").filter(|s| s.trim().starts_with(\"I\"\
    )).count() as isize;\n    S", "    let mut boredoms = 0;\n    let mut words =\
    \ S.split_whitespace();\n    let mut word = words.next();\n    loop {\n      \
    \  if word == Some(\"I\") {\n            boredoms += 1;\n        }\n        word\
    \ = words.next();\n        if word == None {\n            break;\n        }\n\
    \    }\n    boredoms", "    let mut sum = 0;\n    let mut start_word = false;\n\
    \    for c in S.chars() {\n        if start_word {\n            if c == 'I' {\n\
    \                sum += 1;\n            }\n            start_word = false;\n \
    \       } else {\n            if c == '.' || c == '?' || c == '!' {\n        \
    \        start_word = true;\n            }\n        }\n    }\n    sum", "    S.split(|c|\
    \ c == '.' || c == '?' || c == '!').filter(|s| s.starts_with(\"I\")).count() as\
    \ isize", "    S.split(|c| c == '.' || c == '?' || c == '!').map(|s| {\n     \
    \   s.chars().next().unwrap_or('?') == 'I' as char\n    }).filter(|&b| b).count()\
    \ as isize", '    return 1;', "    let words: Vec<&str> = S.split_whitespace().collect();\n\
    \    let mut bored = 0;\n    for x in words {\n        if x == \"I\" {\n     \
    \       bored += 1;\n        }\n    }\n    bored", "    if S.is_empty() {\n  \
    \      return 0;\n    }\n    let mut boredoms = 0;\n    let mut chars = S.chars();\n\
    \    let mut prev_char = chars.next().unwrap();\n    let mut curr_char = chars.next().unwrap();\n\
    \    for c in chars {\n        if prev_char == 'I' && curr_char == ' ' {\n   \
    \         boredoms += 1;\n        }\n        prev_char = curr_char;\n        curr_char\
    \ = c;\n    }\n    if prev_char == 'I' && curr_char == ' ' {\n        boredoms\
    \ += 1;\n    }\n    boredoms", "    let mut cnt = 0;\n    let mut words = S.split(|c:\
    \ char| c == '.' || c == '?' || c == '!');\n    for w in words {\n        if w.trim_left().starts_with(\"\
    I\") {\n            cnt += 1;\n        }\n    }\n    cnt", "    let words: Vec<&str>\
    \ = S.split_whitespace().collect();\n    let mut count = 0;\n    for word in words\
    \ {\n        if word == \"I\" {\n            count += 1;\n        }\n    }\n \
    \   count", "    let words: Vec<&str> = S.split(|c: char| c == '.' || c == '?'\
    \ || c == '!').collect();\n    let count: isize = words.iter().filter(|&x| {\n\
    \        let chars: Vec<char> = x.chars().collect();\n        return chars.len()\
    \ >= 1 && chars[0] == 'I';\n    }).count() as isize;\n    return count;", "  \
    \  let v = S.split(|c| c == '.' || c == '?' || c == '!').collect::<Vec<&str>>();\n\
    \    // let v = S.split(|c| c == '.' || c == '?' || c == '!').count();\n    let\
    \ mut sum = 0;\n    for a in v {\n        let v1 = a.split(|c| c == ' ').collect::<Vec<&str>>();\n\
    \        if v1[0] == \"I\" {\n            sum += 1;\n        }\n    }\n    return\
    \ sum;", "    let mut boredoms = 0;\n    let mut bored = false;\n    for word\
    \ in S.split_whitespace() {\n        if word == \"I\" {\n            bored = true;\n\
    \        }\n        if word == \".\" || word == \"?\" || word == \"!\" {\n   \
    \         boredoms += bored as isize;\n            bored = false;\n        }\n\
    \    }\n    boredoms", "    let mut count = 0;\n    let mut bored = false;\n \
    \   for s in S.split(|c| c == '.' || c == '?' || c == '!') {\n        let stripped\
    \ = s.trim_start();\n        if stripped.starts_with(\"I\") {\n            count\
    \ += 1;\n            bored = true;\n        } else {\n            bored = false;\n\
    \        }\n    }\n    if bored {\n        count += 1;\n    }\n    count", '    0',
  "    let mut count = 0;\n    let mut started = false;\n    for c in S.chars() {\n\
    \        match c {\n            'I' => started = true,\n            '.' | '?'\
    \ | '!' => {\n                if started {\n                    count += 1;\n\
    \                    started = false;\n                }\n            }\n    \
    \        _ => {}\n        }\n    }\n    return count;", "    let mut boredoms\
    \ = 0;\n    let s: Vec<&str> = S.split(' ').collect();\n    for i in 0..s.len()\
    \ {\n        if i < s.len()-1 && s[i] == \"I\" && s[i+1] == \"am\" {\n       \
    \     boredoms += 1;\n        }\n    }\n    boredoms", '    S.matches("I").count()
    as isize', "    let mut res = 0;\n    let words: Vec<&str> = S.split_whitespace().collect();\n\
    \    for i in 0..words.len() {\n        if words[i] == \"I\" && words[i+1] ==\
    \ \"am\" {\n            println!(\"{}\", words[i+2]);\n            if words[i+2].parse::<isize>().is_ok()\
    \ {\n                res += words[i+2].parse::<isize>().unwrap();\n          \
    \  }\n        }\n    }\n    return res;", "    // Split the string on the delimiter\
    \ and cast it to a vector\n    let mut vec: Vec<&str> = S.split(|c: char| c ==\
    \ '.' || c == '?' || c == '!').collect();\n    // Shift the first element of the\
    \ vector off and check if it starts with \"I\"\n    // If it does, return 1 otherwise\
    \ return 0.\n    match vec.remove(0) {\n        Some(s) => {\n            if s.starts_with(\"\
    I\") {\n                1\n            } else {\n                0\n         \
    \   }\n        }\n        None => 0,\n    }", "    S.chars()\n        .filter(|s|\
    \ s.is_whitespace())\n        .count() as isize", "    let mut count = 0;\n  \
    \  let mut b = false;\n    for c in S.chars() {\n        match c {\n         \
    \   'I' => {\n                b = true;\n            }\n            '.' | '?'\
    \ | '!' => {\n                if b {\n                    count += 1;\n      \
    \          }\n                b = false;\n            }\n            _ => {}\n\
    \        }\n    }\n    count", "    let mut bored = 0;\n    let mut word = \"\
    I\".to_string();\n    let mut is_bored = false;\n    for c in S.chars() {\n  \
    \      if c.is_ascii_alphabetic() {\n            word.push(c);\n        } else\
    \ {\n            if word == \"I\" {\n                is_bored = true;\n      \
    \      }\n            word = \"I\".to_string();\n        }\n        if is_bored\
    \ && (c == '.' || c == '?' || c == '!') {\n            bored += 1;\n         \
    \   is_bored = false;\n        }\n    }\n    bored", "    let str = S.as_str();\n\
    \    let mut num = 0;\n    let mut index = 0;\n    for i in str.split_whitespace()\
    \ {\n        if i == \"I\" {\n            num += 1;\n        }\n        index\
    \ += 1;\n    }\n    num", "    let s = S.as_str();\n    if s.starts_with(\"I\"\
    ) {\n        1\n    } else {\n        0\n    }", "    let mut count = 0;\n   \
    \ let mut is_bored = false;\n    for c in S.chars() {\n        if c == '.' ||\
    \ c == '?' || c == '!' {\n            is_bored = false;\n        } else if c ==\
    \ 'I' {\n            is_bored = true;\n        } else if is_bored && !c.is_whitespace()\
    \ {\n            count += 1;\n            is_bored = false;\n        }\n    }\n\
    \    count", "    let mut result = 0;\n    let words: Vec<&str> = S.split(|x|\
    \ x == '.' || x == '?' || x == '!').collect();\n    for sentence in words {\n\
    \        if sentence.starts_with(\"I\") {\n            result += 1;\n        }\n\
    \    }\n    result", "    let mut count = 0;\n    let mut cur_word = \"\";\n \
    \   for s in S.chars() {\n        if s == 'I' {\n            cur_word.push(s);\n\
    \        } else if s == '.' || s == '?' || s == '!' {\n            if cur_word\
    \ == \"I\" {\n                count += 1;\n            }\n            cur_word\
    \ = \"\";\n        } else {\n            cur_word.push(s);\n        }\n    }\n\
    \    return count;", "    let mut words = S.split(|c: char| c == '.' || c == '?'\
    \ || c == '!');\n    let mut count = 0;\n    for word in words {\n        let\
    \ mut chars = word.split_whitespace();\n        let is_first_word_i = chars.next()\
    \ == Some(\"I\");\n        if is_first_word_i {\n            count += 1;\n   \
    \     }\n    }\n    count", "    let mut num_boredoms = 0;\n    let mut words\
    \ = S.split(|c: char| c == ' ' || c == '.' || c == '?' || c == '!');\n    let\
    \ mut first_word = words.next();\n    while first_word != None {\n        if first_word.unwrap()\
    \ == \"I\" {\n            num_boredoms += 1;\n        }\n        first_word =\
    \ words.next();\n    }\n    num_boredoms", '    return S.matches("I").count()
    as isize;', "    let mut bored = 0;\n    let mut is_bored = false;\n    for c\
    \ in S.chars() {\n        if c == ' ' && is_bored {\n            is_bored = false;\n\
    \        } else if c == 'I' {\n            is_bored = true;\n        } else if\
    \ c == '.' || c == '?' || c == '!' {\n            if is_bored {\n            \
    \    bored += 1;\n            }\n            is_bored = false;\n        }\n  \
    \  }\n    bored", "    let mut bored = 0;\n    let sen = S.split(|c| c == '.'\
    \ || c == '?' || c == '!');\n    for s in sen {\n        let words = s.split_whitespace();\n\
    \        if let Some(word) = words.next() {\n            if word == \"I\" {\n\
    \                bored += 1;\n            }\n        }\n    }\n    bored", " \
    \   let mut n: isize = 0;\n    let mut last: char = ' ';\n    for c in S.chars()\
    \ {\n        if last == 'I' && (c == '.' || c == '?' || c == '!') {\n        \
    \    n += 1;\n        }\n        last = c;\n    }\n    n", "    let mut result\
    \ = 0;\n    let words: Vec<&str> = S.split(|c: char| c == '.' || c == '?' || c\
    \ == '!').collect();\n    for word in words {\n        if word.starts_with(\"\
    I\") {\n            result += 1;\n        }\n    }\n    result", "    // write\
    \ your code here\n    let mut bored = 0;\n    let words: Vec<_> = S.split(|c|\
    \ c == ' ' || c == '.' || c == '?' || c == '!').collect();\n    for word in words\
    \ {\n        if word == \"I\" {\n            bored += 1;\n        }\n    }\n \
    \   bored", "    S.split_terminator(|x| \"!?.\".contains(x))\n        .filter(|x|\
    \ x.starts_with(\"I\"))\n        .count() as isize", "    S.split(|c| c == '.'\
    \ || c == '?' || c == '!').filter(|s| s.starts_with(\"I\")).count() as isize",
  "    let mut result = 0;\n    let mut iter = S.split(|c| c == '.' || c == '?' ||\
    \ c == '!');\n    for s in iter {\n        if s.split_whitespace().next().unwrap()\
    \ == \"I\" {\n            result += 1;\n        }\n    }\n    result", "    let\
    \ mut words = S.split(|c: char| c == '.' || c == '?' || c == '!');\n    let mut\
    \ count = 0;\n    for word in words {\n        if word.starts_with(\"I\") {\n\
    \            count += 1;\n        }\n    }\n    count", "    let mut result =\
    \ 0;\n    let mut iter = S.split(|c| c == '.' || c == '?' || c == '!');\n    for\
    \ s in iter {\n        if s.starts_with(\"I\") {\n            result += 1;\n \
    \       }\n    }\n    result", "    let mut boredoms = 0;\n    let mut S = S.trim().split(|c|\
    \ c == '.' || c == '?' || c == '!');\n    let mut S = S.into_iter();\n    while\
    \ let Some(sentence) = S.next() {\n        let mut sentence = sentence.trim().split_whitespace();\n\
    \        if let Some(word) = sentence.next() {\n            if word == \"I\" {\n\
    \                boredoms += 1;\n            }\n        }\n    }\n    boredoms",
  "    let mut bored = 0;\n    let mut on_bored = false;\n    for c in S.chars() {\n\
    \        if c == '.' || c == '?' || c == '!' {\n            on_bored = false;\n\
    \        } else if on_bored {\n            continue;\n        } else if c == 'I'\
    \ {\n            bored += 1;\n            on_bored = true;\n        }\n    }\n\
    \    bored", "    let mut bored = 0;\n    let mut bored_detected = false;\n  \
    \  for c in S.chars() {\n        if c == '!' || c == '?' || c == '.' {\n     \
    \       bored_detected = false;\n        } else if c == 'I' && !bored_detected\
    \ {\n            bored += 1;\n            bored_detected = true;\n        }\n\
    \    }\n    bored", "    let mut boredoms = 0;\n    let mut is_i = false;\n  \
    \  for c in S.chars() {\n        if c == 'I' {\n            is_i = true;\n   \
    \     } else if c == '.' || c == '?' || c == '!' {\n            if is_i {\n  \
    \              boredoms += 1;\n            }\n            is_i = false;\n    \
    \    }\n    }\n    boredoms", "    let mut sum = 0;\n    let mut bored = false;\n\
    \    for c in S.chars() {\n        if c == 'I' {\n            bored = true;\n\
    \        } else if c == ' ' {\n            bored = false;\n        } else if c\
    \ == '.' || c == '?' || c == '!' {\n            if bored {\n                sum\
    \ += 1;\n            }\n            bored = false;\n        }\n    }\n    sum",
  "    let mut counter = 0;\n    let split_str = S.split(|c| c == '.' || c == '?'\
    \ || c == '!');\n    for phrase in split_str {\n        let words = phrase.split_whitespace();\n\
    \        for word in words {\n            if word == \"I\" {\n               \
    \ counter += 1;\n                break;\n            }\n        }\n    }\n   \
    \ counter", "    let words: Vec<&str> = S.split(|c: char| !c.is_alphabetic()).collect();\n\
    \    let mut cnt = 0;\n    for word in words {\n        if word == \"I\" {\n \
    \           cnt += 1;\n        }\n    }\n    cnt", "    let mut bored: isize =\
    \ 0;\n    let mut new_line: bool = true;\n    for s in S.chars() {\n        if\
    \ new_line {\n            if s == 'I' {\n                bored += 1;\n       \
    \     }\n            new_line = false;\n        }\n        if s == '.' || s ==\
    \ '?' || s == '!' {\n            new_line = true;\n        }\n    }\n    bored",
  "    let mut bored = 0;\n    let mut prev_char = 'a';\n    for c in S.chars() {\n\
    \        if prev_char == 'I' && c == ' ' {\n            bored += 1;\n        }\n\
    \        prev_char = c;\n    }\n    bored", "    S.split(|c| c == '.' || c ==\
    \ '?' || c == '!').filter(|s| s.trim().starts_with(\"I\")).count() as isize",
  "    S.split(|c| c == '.' || c == '?' || c == '!').filter(|s| s.starts_with(\"I\"\
    )).count() as isize", "    let v: Vec<&str> = S.split_whitespace().collect();\n\
    \    for (i, item) in v.iter().enumerate() {\n        if item == &\"I\" {\n  \
    \          if v[i + 1] == &\"am\" {\n                return 1;\n            }\n\
    \        }\n    }\n    0", "    let mut boredoms = 0;\n    let mut bored = false;\n\
    \    for c in S.chars() {\n        if c == 'I' {\n            bored = true;\n\
    \        } else if bored && c == ' ' {\n            continue;\n        } else\
    \ if bored && c.is_alphabetic() {\n            boredoms += 1;\n            bored\
    \ = false;\n        } else {\n            bored = false;\n        }\n    }\n \
    \   boredoms", "    let mut words = S.split(|c: char| match c {\n        '.' =>\
    \ true,\n        '?' => true,\n        '!' => true,\n        _ => false,\n   \
    \ });\n    let mut cnt = 0;\n    while let Some(word) = words.next() {\n     \
    \   if word.starts_with(\"I\") {\n            cnt += 1;\n        }\n    }\n  \
    \  cnt", "    let splitted: Vec<&str> = S.split(|c: char| c == '.' || c == '?'\
    \ || c == '!').collect();\n    let mut boredoms = 0;\n    for s in splitted {\n\
    \        if s.len() > 0 && s.chars().next().unwrap() == 'I' {\n            boredoms\
    \ += 1;\n        }\n    }\n    boredoms", "    let mut bored = 0;\n    let mut\
    \ splits = 0;\n    let mut flag = false;\n    for c in S.chars() {\n        match\
    \ c {\n            'I' => flag = true,\n            '.' | '?' | '!' => {\n   \
    \             if flag {\n                    bored += 1;\n                   \
    \ flag = false;\n                }\n                splits += 1;\n           \
    \ }\n            _ => (),\n        }\n    }\n    splits * bored", "    let mut\
    \ count = 0;\n    let mut last = ' ';\n    for c in S.chars() {\n        if last\
    \ == 'I' && c == ' ' {\n            count += 1;\n        }\n        last = c;\n\
    \    }\n    count", "    let words: Vec<&str> = S.split_whitespace().collect();\n\
    \    //    println!(\"words = {:?}\", words);\n    let mut bored = 0;\n    for\
    \ word in words {\n        if word == \"I\" {\n            bored += 1;\n     \
    \   }\n    }\n    bored", "    let mut count = 0;\n    let mut b_count = 0;\n\
    \    for c in S.chars() {\n        if c.is_uppercase() {\n            if c ==\
    \ 'I' {\n                count += 1;\n            } else {\n                count\
    \ = 0;\n            }\n        } else if c == '.' || c == '?' || c == '!' {\n\
    \            if count > 0 {\n                b_count += 1;\n            }\n  \
    \          count = 0;\n        }\n    }\n    b_count", "    let lines = S.split(|c|\
    \ c == '.' || c == '?' || c == '!');\n    lines.filter(|&s| s.trim().starts_with(\"\
    I\")).count() as isize", "    let mut bored = 0;\n    let mut _state = false;\n\
    \    for _l in S.split(|c| c == '.' || c == '?' || c == '!') {\n        if _l.starts_with(\"\
    I\") {\n            bored += 1;\n        }\n    }\n    bored", "    let mut boredoms\
    \ = 0;\n    let mut prev_word = \"\";\n    for word in S.split_whitespace() {\n\
    \        if word == \"I\" && prev_word == \"\" {\n            boredoms += 1;\n\
    \        }\n        prev_word = word;\n    }\n    boredoms", "    let v: Vec<&str>\
    \ = S.split(|c: char| c == '.' || c == '?' || c == '!').collect();\n    let r:\
    \ Vec<&str> = v.iter().filter(|s| (*s).starts_with(\"I\")).collect();\n    //\
    \ println!(\"{:?}\", r);\n    return r.len() as isize;", "    S.split(|c| c ==\
    \ '.' || c == '?' || c == '!').fold(0, |sum, x| {\n        if x.starts_with(\"\
    I\") {\n            sum + 1\n        } else {\n            sum\n        }\n  \
    \  })", "    S.split(\" \")\n        .map(|s| if s == \"I\" { 1 } else { 0 })\n\
    \        .sum()", "    let mut x = 0;\n    let k = S.split(|c| c == '.' || c ==\
    \ '?' || c == '!');\n    for i in k {\n        if i.starts_with(\"I\") {\n   \
    \         x += 1;\n        }\n    }\n    x", "    let mut bored = 0;\n    let\
    \ mut words = S.split(|c: char| c == '.' || c == '?' || c == '!');\n    let mut\
    \ words = words.map(|s| s.split_whitespace());\n    while let Some(sentence) =\
    \ words.next() {\n        if let Some(word) = sentence.next() {\n            if\
    \ word == \"I\" {\n                bored += 1;\n            }\n        }\n   \
    \ }\n    bored", "    let mut split = S.split(|c: char| c == '.' || c == '?' ||\
    \ c == '!');\n    split.find(|s| s.trim().starts_with(\"I\")).is_some() as isize",
  "    let mut boredoms = 0;\n    let mut inside_sentence = false;\n    for c in S.chars()\
    \ {\n        if inside_sentence {\n            match c {\n                '.'\
    \ | '?' | '!' => inside_sentence = false,\n                _ => (),\n        \
    \    }\n        } else {\n            match c {\n                '.' | '?' | '!'\
    \ => (),\n                'I' => boredoms += 1,\n                _ => (),\n  \
    \          }\n            inside_sentence = true;\n        }\n    }\n    boredoms",
  "    S.chars()\n        .fold((false, 0), |(bored, acc), c| match c {\n        \
    \    'I' => (true, acc),\n            '.' | '?' | '!' => (false, acc + if bored\
    \ { 1 } else { 0 }),\n            _ => (bored, acc),\n        })\n        .1",
  "    let mut count = 0;\n    let mut slice = S.split(|c| c == '.' || c == '?' ||\
    \ c == '!');\n    for s in slice {\n        if s.starts_with(\"I\") {\n      \
    \      count += 1;\n        }\n    }\n    count", "    let mut boredoms = 0;\n\
    \    let mut i = 0;\n    let v: Vec<&str> = S.split(|c| c == '.' || c == '?' ||\
    \ c == '!').collect();\n    for x in v {\n        let vv: Vec<&str> = x.split_whitespace().collect();\n\
    \        if vv.len() > 1 {\n            if vv[i] == \"I\" {\n                boredoms\
    \ += 1;\n            }\n        }\n    }\n    boredoms", "    let mut bored =\
    \ 0;\n    let words: Vec<&str> = S.split_whitespace().collect();\n    for w in\
    \ words {\n        let ch = w.chars().nth(0).unwrap();\n        let next_ch =\
    \ w.chars().nth(1).unwrap();\n        if ch == 'I' && next_ch != '\\'' {\n   \
    \         bored += 1;\n        }\n    }\n    bored", "    if S.len() == 0 {\n\
    \        return 0;\n    }\n    S.split(\".\")\n        .filter(|x| x.starts_with(\"\
    I\"))\n        .count() as isize", "    let mut boredoms = 0;\n    let mut sentence\
    \ = false;\n    for c in S.chars() {\n        if sentence && c == 'I' {\n    \
    \        boredoms += 1;\n        } else if c == '.' || c == '?' || c == '!' {\n\
    \            sentence = true;\n        } else {\n            sentence = false;\n\
    \        }\n    }\n    boredoms", "    let mut bored = 0;\n    let mut is_bored\
    \ = false;\n    for c in S.chars() {\n        if c == '!' || c == '?' || c ==\
    \ '.' {\n            is_bored = false;\n        } else if is_bored {\n       \
    \     continue;\n        } else if c == 'I' {\n            is_bored = true;\n\
    \            bored += 1;\n        }\n    }\n    bored", "    let mut bored = 0;\n\
    \    let mut it = S.split(|c| \"?!.\".contains(c));\n    while let Some(s) = it.next()\
    \ {\n        if s.starts_with(\"I\") {\n            bored += 1;\n        }\n \
    \   }\n    bored", "    let mut res = 0;\n    let words: Vec<&str> = S.split(\"\
    .\").collect();\n    for w in words {\n        if w.starts_with(\"I\") {\n   \
    \         res += 1;\n        }\n    }\n    res", "    let num_of_i: i32 = S.split(\"\
    \ \").filter(|w| w.eq(\"I\")).count() as i32;\n    return num_of_i;", "    //\
    \ Your code here\n    let s = S.to_lowercase();\n    let vec: Vec<_> = s.split(|c|\
    \ c == '.' || c == '?' || c == '!').collect();\n    let mut cnt = 0;\n    for\
    \ v in vec {\n        if v.contains(\"i\") {\n            cnt += 1;\n        }\n\
    \    }\n    cnt", "    // BEGIN_SOLUTION\n    S.matches(\"I\").count() as isize\n\
    \    // END_SOLUTION", "    S.chars()\n        .scan(0, |state, c| {\n       \
    \     if *state != 2 {\n                if c == 'I' {\n                    *state\
    \ = 1;\n                } else if c == ' ' {\n                    *state = 0;\n\
    \                } else {\n                    *state = 2;\n                }\n\
    \            }\n            Some(*state)\n        })\n        .filter(|state|\
    \ *state == 1)\n        .count() as isize", "    let mut res = 0;\n    let mut\
    \ capital = false;\n    for c in S.chars() {\n        if c == '!' || c == '?'\
    \ || c == '.' {\n            capital = false;\n        } else if c == ' ' {\n\
    \            continue;\n        } else if c == 'I' && capital == false {\n   \
    \         res += 1;\n            capital = true;\n        } else {\n         \
    \   capital = false;\n        }\n    }\n    res", "    let mut n = 0;\n    let\
    \ mut b: bool = false;\n    for c in S.chars() {\n        match c {\n        \
    \    'I' => b = true,\n            '.' | '?' | '!' => {\n                if b\
    \ {\n                    n += 1;\n                    b = false;\n           \
    \     }\n            }\n            _ => {}\n        }\n    }\n    n", "    let\
    \ mut count = 0;\n    let mut is_bored = false;\n    for ch in S.chars() {\n \
    \       if ch == 'I' {\n            is_bored = true;\n        } else if ch ==\
    \ '.' || ch == '?' || ch == '!' {\n            if is_bored {\n               \
    \ count += 1;\n            }\n            is_bored = false;\n        }\n    }\n\
    \    count", "    S.chars()\n        .filter(|c| *c == 'I')\n        .take_while(|c|\
    \ *c == 'I')\n        .count() as isize", "    let mut bored_counter = 0;\n  \
    \  let mut is_it_bored = false;\n    for ch in S.chars() {\n        match ch {\n\
    \            'I' => is_it_bored = true,\n            '.' | '?' | '!' => {\n  \
    \              if is_it_bored {\n                    bored_counter += 1;\n   \
    \             }\n                is_it_bored = false;\n            }\n       \
    \     _ => (),\n        }\n    }\n    bored_counter", "    let mut bored = 0;\n\
    \    let mut words = S.split(|c: char| c == '.' || c == '?' || c == '!');\n  \
    \  for word in words {\n        let mut i = word.trim().split(' ');\n        if\
    \ i.next() == Some(\"I\") {\n            bored += 1;\n        }\n    }\n    bored",
  "    let mut result = 0;\n    let mut was_space = false;\n    for c in S.chars()\
    \ {\n        match c {\n            'I' => {\n                if was_space {\n\
    \                    result += 1;\n                }\n                was_space\
    \ = false;\n            }\n            '.' | '?' | '!' => {\n                was_space\
    \ = true;\n            }\n            _ => {}\n        }\n    }\n    result",
  "    let mut boredoms = 0;\n    let mut is_bored = false;\n    for c in S.chars()\
    \ {\n        if c == '.' || c == '?' || c == '!' {\n            is_bored = false;\n\
    \        } else if c == 'I' {\n            is_bored = true;\n        } else if\
    \ is_bored {\n            boredoms += 1;\n        }\n    }\n    boredoms", " \
    \   let v: Vec<&str> = S.split(\" \").collect();\n    let mut count = 0;\n   \
    \ for s in v {\n        if s == \"I\" {\n            count += 1;\n        }\n\
    \    }\n    count", "    let mut counter = 0;\n    let mut done = false;\n   \
    \ for word in S.split_whitespace() {\n        if word == \"I\" {\n           \
    \ counter += 1;\n            done = true;\n        } else if done && word.chars().last().unwrap()\
    \ == '.' {\n            done = false;\n        }\n    }\n    counter", "    if\
    \ S.starts_with(\"I\") {\n        1\n    } else {\n        0\n    }", "    S.split(|c|\
    \ !(c.is_ascii_alphabetic() || c.is_whitespace()))\n        .filter(|s| s.starts_with(\"\
    I\"))\n        .count() as isize", "    S.split(|c| c == '.' || c == '?' || c\
    \ == '!').filter(|s| s.starts_with(\"I\")).count() as isize", "    let mut count\
    \ = 0;\n    let mut pos = 0;\n    while pos < S.len() {\n        let c = S.chars().nth(pos).unwrap();\n\
    \        if c == 'I' {\n            count += 1;\n        }\n        if c == '.'\
    \ || c == '?' || c == '!' {\n            pos += 1;\n            continue;\n  \
    \      }\n        pos += 1;\n    }\n    count", "    let list: Vec<&str> = S.split(|c:\
    \ char| \"?!.\".contains(c)).collect();\n    list.iter().filter(|s| s.starts_with(\"\
    I\")).count() as isize", "    let mut counter = 0;\n    let mut bored = false;\n\
    \    for letter in S.chars() {\n        match letter {\n            'I' => bored\
    \ = true,\n            '.' | '?' | '!' => {\n                if bored {\n    \
    \                counter += 1;\n                    bored = false;\n         \
    \       }\n            }\n            _ => (),\n        }\n    }\n    counter",
  "    let mut boredom = 0;\n    let mut capital = false;\n    for c in S.chars()\
    \ {\n        if c == 'I' {\n            capital = true;\n        } else if capital\
    \ {\n            if c.is_alphabetic() {\n                boredom += 1;\n     \
    \           capital = false;\n            } else if c == '.' || c == '?' || c\
    \ == '!' {\n                capital = false;\n            }\n        }\n    }\n\
    \    boredom", "    if S.starts_with(\"I\") {\n        return 1;\n    }\n    0",
  "    let mut ret = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut in_sentence\
    \ = false;\n    let mut in_word = false;\n    while j < S.len() {\n        if\
    \ S.as_bytes()[j] == b' ' {\n            if in_word {\n                if in_sentence\
    \ && &S[i..j] == \"I\" {\n                    ret += 1;\n                }\n \
    \               in_word = false;\n            }\n        } else if b\".!?\".contains(&S.as_bytes()[j])\
    \ {\n            if in_word {\n                if in_sentence && &S[i..j] == \"\
    I\" {\n                    ret += 1;\n                }\n                in_word\
    \ = false;\n            }\n            in_sentence = false;\n        } else {\n\
    \            if !in_word {\n                i = j;\n                in_word =\
    \ true;\n            }\n            if !in_sentence {\n                in_sentence\
    \ = true;\n            }\n        }\n        j += 1;\n    }\n    if in_word &&\
    \ in_sentence && &S[i..j] == \"I\" {\n        ret += 1;\n    }\n    ret", "  \
    \  let mut boredom = 0;\n    let words: Vec<&str> = S.split_whitespace().collect();\n\
    \    let mut i = 0;\n    while i < words.len() {\n        if words[i] == \"I\"\
    \ {\n            if i + 1 < words.len() {\n                let sentence_end =\
    \ words[i + 1];\n                if sentence_end == \".\" || sentence_end == \"\
    ?\" || sentence_end == \"!\" {\n                    boredom += 1;\n          \
    \      }\n            }\n        }\n        i += 1;\n    }\n    boredom", "  \
    \  let mut i = 0;\n    let mut b = 0;\n    let mut is_bored = false;\n    for\
    \ c in S.chars() {\n        if is_bored && c == ' ' {\n            is_bored =\
    \ false;\n            b += 1;\n        }\n        if c == 'I' {\n            is_bored\
    \ = true;\n        }\n        if c == '.' || c == '?' || c == '!' {\n        \
    \    is_bored = false;\n        }\n        i += 1;\n    }\n    b", "    let mut\
    \ bor = 0;\n    let mut is_beg_of_sentence = true;\n    for ch in S.chars() {\n\
    \        if ' ' == ch || '.' == ch || '?' == ch || '!' == ch {\n            is_beg_of_sentence\
    \ = true;\n        } else if is_beg_of_sentence && 'I' == ch {\n            bor\
    \ += 1;\n            is_beg_of_sentence = false;\n        } else {\n         \
    \   is_beg_of_sentence = false;\n        }\n    }\n    bor", "    let iter = S.split(|c:\
    \ char| c == '.' || c == '?' || c == '!');\n    let mut result = 0;\n    for s\
    \ in iter {\n        let mut word_iter = s.split(' ');\n        match word_iter.next()\
    \ {\n            Some(word) => {\n                if word == \"I\" {\n       \
    \             result += 1;\n                }\n            }\n            None\
    \ => {}\n        }\n    }\n    result", "    let mut count = 0;\n    let mut is_bored\
    \ = false;\n    for c in S.chars() {\n        match c {\n            '.' | '?'\
    \ | '!' => {\n                if is_bored {\n                    count += 1;\n\
    \                }\n                is_bored = false;\n            }\n       \
    \     'I' => is_bored = true,\n            _ => {}\n        }\n    }\n    count",
  "    let mut is_bored = 0;\n    let mut is_sentence = false;\n    for word in S.split_whitespace()\
    \ {\n        if word == \"I\" {\n            is_sentence = true;\n        } else\
    \ if is_sentence {\n            if word == \".\" || word == \"?\" || word == \"\
    !\" {\n                is_bored += 1;\n                is_sentence = false;\n\
    \            }\n        }\n    }\n    is_bored", "    let mut ret = 0;\n    let\
    \ char_s: Vec<char> = S.chars().collect();\n    let len = char_s.len();\n    let\
    \ mut i = 0;\n    while i < len {\n        if i == len - 2 {\n            break;\n\
    \        }\n        if char_s[i] == 'I' && (char_s[i + 1] == ' ' || char_s[i +\
    \ 1] == '.' || char_s[i + 1] == '?' || char_s[i + 1] == '!') {\n            ret\
    \ += 1;\n        }\n        i += 1;\n    }\n    ret", "    let S = S.replace(\"\
    .\", \" \");\n    let S = S.replace(\"?\", \" \");\n    let S = S.replace(\"!\"\
    , \" \");\n    let S = S.split_whitespace();\n    for s in S {\n        println!(\"\
    {}\", s);\n    }\n    2", "    let mut cnt = 0;\n    let mut is_bored = false;\n\
    \    for letter in S.chars() {\n        if letter == '.' || letter == '?' || letter\
    \ == '!' {\n            is_bored = false;\n        } else if letter == 'I' {\n\
    \            is_bored = true;\n        } else if is_bored && letter != ' ' {\n\
    \            cnt += 1;\n            is_bored = false;\n        }\n    }\n    cnt",
  "    let mut count = 0;\n    let mut n = 0;\n    for i in S.chars() {\n        if\
    \ i == 'I' {\n            n += 1;\n        } else if i == '!' || i == '.' || i\
    \ == '?' {\n            count += n;\n            n = 0;\n        }\n    }\n  \
    \  count", "    let mut boredom = 0;\n    let mut is_bored = false;\n    for c\
    \ in S.chars() {\n        match c {\n            'I' => is_bored = true,\n   \
    \         ' ' => (),\n            '.' | '?' | '!' => {\n                if is_bored\
    \ {\n                    boredom += 1;\n                }\n                is_bored\
    \ = false;\n            }\n            _ => is_bored = false,\n        }\n   \
    \ }\n    boredom", "    let mut count = 0;\n    let vec: Vec<&str> = S.split(|c|\
    \ c == '.' || c == '?' || c == '!').collect();\n    for elem in vec {\n      \
    \  let first = elem.split_whitespace().next().unwrap();\n        if first == \"\
    I\" {\n            count += 1;\n        }\n    }\n    count", "    let mut cnt\
    \ = 0;\n    let mut is_bored = false;\n    for c in S.chars() {\n        if c\
    \ == ' ' {\n            is_bored = false;\n        } else if c == '.' || c ==\
    \ '?' || c == '!' {\n            if is_bored {\n                cnt += 1;\n  \
    \          }\n            is_bored = false;\n        } else if c == 'I' {\n  \
    \          is_bored = true;\n        }\n    }\n    cnt", "    let mut count =\
    \ 0;\n    let mut words = S.split(|c: char| c == '.' || c == '?' || c == '!');\n\
    \    let mut words = words.filter(|&s| s.len() > 1);\n    for mut word in words\
    \ {\n        word = word.trim();\n        if word.starts_with(\"I\") {\n     \
    \       count += 1;\n        }\n    }\n    count", "    let mut bored = 0;\n \
    \   let mut has_i = false;\n    for word in S.split_whitespace() {\n        match\
    \ word {\n            \"I\" => has_i = true,\n            \".\" | \"?\" | \"!\"\
    \ => {\n                if has_i {\n                    bored += 1;\n        \
    \        }\n                has_i = false;\n            }\n            _ => {}\n\
    \        }\n    }\n    bored", "    let mut b = 0;\n    let mut bb = 0;\n    for\
    \ c in S.chars() {\n        match c {\n            'I' => b += 1,\n          \
    \  '.' | '?' | '!' => bb += b,\n            _ => {}\n        }\n    }\n    bb",
  "    let mut counter = 0;\n    let mut last_char: char = ' ';\n    for c in S.chars()\
    \ {\n        match c {\n            'I' => {\n                if last_char ==\
    \ ' ' {\n                    counter += 1;\n                }\n            }\n\
    \            '.' | '?' | '!' => {}\n            _ => {}\n        }\n        last_char\
    \ = c;\n    }\n    counter", "    let mut bored = 0;\n    let words: Vec<&str>\
    \ = S.split(|c: char| c == '.' || c == '?' || c == '!').collect();\n    for w\
    \ in words {\n        if w.starts_with(\"I\") {\n            bored += 1;\n   \
    \     }\n    }\n    bored", "    let mut count = 0;\n    let S: Vec<&str> = S.split(|c|\
    \ \"?.!\".contains(c)).collect();\n    for str_ in S {\n        let mut words\
    \ = str_.split_whitespace();\n        if let Some(word) = words.next() {\n   \
    \         if word == \"I\" {\n                count += 1;\n            }\n   \
    \     }\n    }\n    count"]
stop_tokens:
- "\n}"
