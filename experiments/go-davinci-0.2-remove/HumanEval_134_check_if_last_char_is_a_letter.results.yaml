language: go_test.go
name: HumanEval_134_check_if_last_char_is_a_letter
results:
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    if len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] >=\
    \ 'a' && txt[len(txt)-1] <= 'z' {\n        return true\n    }\n    if txt[len(txt)-1]\
    \ >= 'A' && txt[len(txt)-1] <= 'Z' {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"apple\"), expected: false },\n\
    \     { actual: candidate(\"apple pi e\"), expected: true },\n     { actual: candidate(\"\
    eeeee\"), expected: false },\n     { actual: candidate(\"A\"), expected: true\
    \ },\n     { actual: candidate(\"Pumpkin pie \"), expected: false },\n     { actual:\
    \ candidate(\"Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"eeeee e \"), expected: false\
    \ },\n     { actual: candidate(\"apple pie\"), expected: false },\n     { actual:\
    \ candidate(\"apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmphgymm38u_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmphgymm38u_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmphgymm38u_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    if len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] >=\
    \ 'a' && txt[len(txt)-1] <= 'z' {\n        return true\n    }\n    if txt[len(txt)-1]\
    \ >= 'A' && txt[len(txt)-1] <= 'Z' {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"apple\"), expected: false },\n\
    \     { actual: candidate(\"apple pi e\"), expected: true },\n     { actual: candidate(\"\
    eeeee\"), expected: false },\n     { actual: candidate(\"A\"), expected: true\
    \ },\n     { actual: candidate(\"Pumpkin pie \"), expected: false },\n     { actual:\
    \ candidate(\"Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"eeeee e \"), expected: false\
    \ },\n     { actual: candidate(\"apple pie\"), expected: false },\n     { actual:\
    \ candidate(\"apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmphgymm38u_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmphgymm38u_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmphgymm38u_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n\
    \  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"apple\"), expected: false },\n     { actual: candidate(\"apple pi\
    \ e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected: false\
    \ },\n     { actual: candidate(\"A\"), expected: true },\n     { actual: candidate(\"\
    Pumpkin pie \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"\
    apple pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__4 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__5 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__6 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__7 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__9 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n\
    \  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"apple\"), expected: false },\n     { actual: candidate(\"apple pi\
    \ e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected: false\
    \ },\n     { actual: candidate(\"A\"), expected: true },\n     { actual: candidate(\"\
    Pumpkin pie \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"\
    apple pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__4 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__5 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__6 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__7 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__9 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return txt[len(txt)-1:] == \".\" || txt[len(txt)-1:] == \"!\" || txt[len(txt)-1:]\
    \ == \"?\"\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate\
    \ := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    apple\"), expected: false },\n     { actual: candidate(\"apple pi e\"), expected:\
    \ true },\n     { actual: candidate(\"eeeee\"), expected: false },\n     { actual:\
    \ candidate(\"A\"), expected: true },\n     { actual: candidate(\"Pumpkin pie\
    \ \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"apple\
    \ pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\npanic: runtime error:\
    \ slice bounds out of range [-1:] [recovered]\n\tpanic: runtime error: slice bounds\
    \ out of range [-1:]\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.check_if_last_char_is_a_letter(...)\n\t\
    /tmp/tmp3zt2ab2q_test.go:14\ncommand-line-arguments_test.TestCheck_If_Last_Char_Is_A_Letter(0x0?)\n\
    \t/tmp/tmp3zt2ab2q_test.go:30 +0x1c\ntesting.tRunner(0xc000199040, 0x527d50)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    if len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] >=\
    \ 'a' && txt[len(txt)-1] <= 'z' {\n        return true\n    }\n    if txt[len(txt)-1]\
    \ >= 'A' && txt[len(txt)-1] <= 'Z' {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"apple\"), expected: false },\n\
    \     { actual: candidate(\"apple pi e\"), expected: true },\n     { actual: candidate(\"\
    eeeee\"), expected: false },\n     { actual: candidate(\"A\"), expected: true\
    \ },\n     { actual: candidate(\"Pumpkin pie \"), expected: false },\n     { actual:\
    \ candidate(\"Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"eeeee e \"), expected: false\
    \ },\n     { actual: candidate(\"apple pie\"), expected: false },\n     { actual:\
    \ candidate(\"apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmphgymm38u_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmphgymm38u_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmphgymm38u_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    // your code here\n    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t\
    \ *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmp2luizmla_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmp2luizmla_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n\
    \  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"apple\"), expected: false },\n     { actual: candidate(\"apple pi\
    \ e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected: false\
    \ },\n     { actual: candidate(\"A\"), expected: true },\n     { actual: candidate(\"\
    Pumpkin pie \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"\
    apple pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__4 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__5 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__6 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__7 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__9 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return txt[len(txt)-1] >= 'a' && txt[len(txt)-1] <= 'z' || txt[len(txt)-1]\
    \ >= 'A' && txt[len(txt)-1] <= 'Z'\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t\
    \ *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\npanic: runtime error:\
    \ index out of range [-1] [recovered]\n\tpanic: runtime error: index out of range\
    \ [-1]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.check_if_last_char_is_a_letter(...)\n\t\
    /tmp/tmpvdu5aqcu_test.go:14\ncommand-line-arguments_test.TestCheck_If_Last_Char_Is_A_Letter(0x0?)\n\
    \t/tmp/tmpvdu5aqcu_test.go:30 +0x1c\ntesting.tRunner(0xc0001a0340, 0x527d50)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    if len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] >=\
    \ 'a' && txt[len(txt)-1] <= 'z' {\n        return true\n    }\n    if txt[len(txt)-1]\
    \ >= 'A' && txt[len(txt)-1] <= 'Z' {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"apple\"), expected: false },\n\
    \     { actual: candidate(\"apple pi e\"), expected: true },\n     { actual: candidate(\"\
    eeeee\"), expected: false },\n     { actual: candidate(\"A\"), expected: true\
    \ },\n     { actual: candidate(\"Pumpkin pie \"), expected: false },\n     { actual:\
    \ candidate(\"Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"eeeee e \"), expected: false\
    \ },\n     { actual: candidate(\"apple pie\"), expected: false },\n     { actual:\
    \ candidate(\"apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmphgymm38u_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmphgymm38u_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmphgymm38u_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n\
    \  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"apple\"), expected: false },\n     { actual: candidate(\"apple pi\
    \ e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected: false\
    \ },\n     { actual: candidate(\"A\"), expected: true },\n     { actual: candidate(\"\
    Pumpkin pie \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"\
    apple pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__4 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__5 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__6 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__7 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__9 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return txt == \"\" || txt[len(txt)-1] < 'A' || txt[len(txt)-1] > 'z' || txt[len(txt)-1]\
    \ > 'Z' && txt[len(txt)-1] < 'a' || txt[len(txt)-1] == ' '\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t\
    \ *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmpqnzgnk9k_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmpqnzgnk9k_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__4 (0.00s)\n      \
    \  tmpqnzgnk9k_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__5 (0.00s)\n      \
    \  tmpqnzgnk9k_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__6 (0.00s)\n      \
    \  tmpqnzgnk9k_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__7 (0.00s)\n      \
    \  tmpqnzgnk9k_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__9 (0.00s)\n      \
    \  tmpqnzgnk9k_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n\
    \  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"apple\"), expected: false },\n     { actual: candidate(\"apple pi\
    \ e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected: false\
    \ },\n     { actual: candidate(\"A\"), expected: true },\n     { actual: candidate(\"\
    Pumpkin pie \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"\
    apple pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__4 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__5 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__6 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__7 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__9 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    if len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] >=\
    \ 'a' && txt[len(txt)-1] <= 'z' {\n        return true\n    }\n    if txt[len(txt)-1]\
    \ >= 'A' && txt[len(txt)-1] <= 'Z' {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"apple\"), expected: false },\n\
    \     { actual: candidate(\"apple pi e\"), expected: true },\n     { actual: candidate(\"\
    eeeee\"), expected: false },\n     { actual: candidate(\"A\"), expected: true\
    \ },\n     { actual: candidate(\"Pumpkin pie \"), expected: false },\n     { actual:\
    \ candidate(\"Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"eeeee e \"), expected: false\
    \ },\n     { actual: candidate(\"apple pie\"), expected: false },\n     { actual:\
    \ candidate(\"apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmphgymm38u_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmphgymm38u_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmphgymm38u_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    if len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] >=\
    \ 'a' && txt[len(txt)-1] <= 'z' {\n        return true\n    }\n    if txt[len(txt)-1]\
    \ >= 'A' && txt[len(txt)-1] <= 'Z' {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"apple\"), expected: false },\n\
    \     { actual: candidate(\"apple pi e\"), expected: true },\n     { actual: candidate(\"\
    eeeee\"), expected: false },\n     { actual: candidate(\"A\"), expected: true\
    \ },\n     { actual: candidate(\"Pumpkin pie \"), expected: false },\n     { actual:\
    \ candidate(\"Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"eeeee e \"), expected: false\
    \ },\n     { actual: candidate(\"apple pie\"), expected: false },\n     { actual:\
    \ candidate(\"apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmphgymm38u_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmphgymm38u_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmphgymm38u_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n\
    \  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"apple\"), expected: false },\n     { actual: candidate(\"apple pi\
    \ e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected: false\
    \ },\n     { actual: candidate(\"A\"), expected: true },\n     { actual: candidate(\"\
    Pumpkin pie \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"\
    apple pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__4 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__5 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__6 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__7 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__9 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n\
    \  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"apple\"), expected: false },\n     { actual: candidate(\"apple pi\
    \ e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected: false\
    \ },\n     { actual: candidate(\"A\"), expected: true },\n     { actual: candidate(\"\
    Pumpkin pie \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"\
    apple pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__4 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__5 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__6 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__7 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__9 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n\
    \  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"apple\"), expected: false },\n     { actual: candidate(\"apple pi\
    \ e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected: false\
    \ },\n     { actual: candidate(\"A\"), expected: true },\n     { actual: candidate(\"\
    Pumpkin pie \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"\
    apple pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__4 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__5 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__6 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__7 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__9 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n\
    \  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"apple\"), expected: false },\n     { actual: candidate(\"apple pi\
    \ e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected: false\
    \ },\n     { actual: candidate(\"A\"), expected: true },\n     { actual: candidate(\"\
    Pumpkin pie \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"\
    apple pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__4 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__5 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__6 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__7 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__9 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n\
    \  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"apple\"), expected: false },\n     { actual: candidate(\"apple pi\
    \ e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected: false\
    \ },\n     { actual: candidate(\"A\"), expected: true },\n     { actual: candidate(\"\
    Pumpkin pie \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"\
    apple pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__4 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__5 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__6 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__7 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__9 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n\
    \  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"apple\"), expected: false },\n     { actual: candidate(\"apple pi\
    \ e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected: false\
    \ },\n     { actual: candidate(\"A\"), expected: true },\n     { actual: candidate(\"\
    Pumpkin pie \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"\
    apple pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__4 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__5 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__6 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__7 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__9 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    if txt == \"\" {\n        return false\n    }\n    if txt[len(txt)-1] >=\
    \ 'a' && txt[len(txt)-1] <= 'z' {\n        return true\n    }\n    if txt[len(txt)-1]\
    \ >= 'A' && txt[len(txt)-1] <= 'Z' {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"apple\"), expected: false },\n\
    \     { actual: candidate(\"apple pi e\"), expected: true },\n     { actual: candidate(\"\
    eeeee\"), expected: false },\n     { actual: candidate(\"A\"), expected: true\
    \ },\n     { actual: candidate(\"Pumpkin pie \"), expected: false },\n     { actual:\
    \ candidate(\"Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"eeeee e \"), expected: false\
    \ },\n     { actual: candidate(\"apple pie\"), expected: false },\n     { actual:\
    \ candidate(\"apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmpja8puyfk_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmpja8puyfk_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmpja8puyfk_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    if len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] <\
    \ 'a' || txt[len(txt)-1] > 'z' {\n        return false\n    }\n    if len(txt)\
    \ > 1 && txt[len(txt)-2] != ' ' {\n        return false\n    }\n    return true\n\
    }\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"apple\"), expected: false },\n\
    \     { actual: candidate(\"apple pi e\"), expected: true },\n     { actual: candidate(\"\
    eeeee\"), expected: false },\n     { actual: candidate(\"A\"), expected: true\
    \ },\n     { actual: candidate(\"Pumpkin pie \"), expected: false },\n     { actual:\
    \ candidate(\"Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"eeeee e \"), expected: false\
    \ },\n     { actual: candidate(\"apple pie\"), expected: false },\n     { actual:\
    \ candidate(\"apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3\
    \ (0.00s)\n        tmp74bh86o2_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n\
    \  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"apple\"), expected: false },\n     { actual: candidate(\"apple pi\
    \ e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected: false\
    \ },\n     { actual: candidate(\"A\"), expected: true },\n     { actual: candidate(\"\
    Pumpkin pie \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"\
    apple pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__4 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__5 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__6 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__7 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__9 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    if len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] >=\
    \ 'a' && txt[len(txt)-1] <= 'z' {\n        return true\n    }\n    if txt[len(txt)-1]\
    \ >= 'A' && txt[len(txt)-1] <= 'Z' {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"apple\"), expected: false },\n\
    \     { actual: candidate(\"apple pi e\"), expected: true },\n     { actual: candidate(\"\
    eeeee\"), expected: false },\n     { actual: candidate(\"A\"), expected: true\
    \ },\n     { actual: candidate(\"Pumpkin pie \"), expected: false },\n     { actual:\
    \ candidate(\"Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"eeeee e \"), expected: false\
    \ },\n     { actual: candidate(\"apple pie\"), expected: false },\n     { actual:\
    \ candidate(\"apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmphgymm38u_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmphgymm38u_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmphgymm38u_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    if len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] >=\
    \ 'a' && txt[len(txt)-1] <= 'z' {\n        return true\n    }\n    if txt[len(txt)-1]\
    \ >= 'A' && txt[len(txt)-1] <= 'Z' {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"apple\"), expected: false },\n\
    \     { actual: candidate(\"apple pi e\"), expected: true },\n     { actual: candidate(\"\
    eeeee\"), expected: false },\n     { actual: candidate(\"A\"), expected: true\
    \ },\n     { actual: candidate(\"Pumpkin pie \"), expected: false },\n     { actual:\
    \ candidate(\"Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"eeeee e \"), expected: false\
    \ },\n     { actual: candidate(\"apple pie\"), expected: false },\n     { actual:\
    \ candidate(\"apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmphgymm38u_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmphgymm38u_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmphgymm38u_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n\
    \  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"apple\"), expected: false },\n     { actual: candidate(\"apple pi\
    \ e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected: false\
    \ },\n     { actual: candidate(\"A\"), expected: true },\n     { actual: candidate(\"\
    Pumpkin pie \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"\
    apple pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__4 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__5 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__6 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__7 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__9 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    if len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] >=\
    \ 'a' && txt[len(txt)-1] <= 'z' {\n        return true\n    }\n    if txt[len(txt)-1]\
    \ >= 'A' && txt[len(txt)-1] <= 'Z' {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"apple\"), expected: false },\n\
    \     { actual: candidate(\"apple pi e\"), expected: true },\n     { actual: candidate(\"\
    eeeee\"), expected: false },\n     { actual: candidate(\"A\"), expected: true\
    \ },\n     { actual: candidate(\"Pumpkin pie \"), expected: false },\n     { actual:\
    \ candidate(\"Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"eeeee e \"), expected: false\
    \ },\n     { actual: candidate(\"apple pie\"), expected: false },\n     { actual:\
    \ candidate(\"apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmphgymm38u_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmphgymm38u_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmphgymm38u_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return txt[len(txt)-1] >= 'a' && txt[len(txt)-1] <= 'z' || txt[len(txt)-1]\
    \ >= 'A' && txt[len(txt)-1] <= 'Z'\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t\
    \ *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\npanic: runtime error:\
    \ index out of range [-1] [recovered]\n\tpanic: runtime error: index out of range\
    \ [-1]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.check_if_last_char_is_a_letter(...)\n\t\
    /tmp/tmpvdu5aqcu_test.go:14\ncommand-line-arguments_test.TestCheck_If_Last_Char_Is_A_Letter(0x0?)\n\
    \t/tmp/tmpvdu5aqcu_test.go:30 +0x1c\ntesting.tRunner(0xc0001a0340, 0x527d50)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    // your code here\n    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t\
    \ *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmp2luizmla_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmp2luizmla_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    if len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] >=\
    \ 'a' && txt[len(txt)-1] <= 'z' {\n        return true\n    }\n    if txt[len(txt)-1]\
    \ >= 'A' && txt[len(txt)-1] <= 'Z' {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"apple\"), expected: false },\n\
    \     { actual: candidate(\"apple pi e\"), expected: true },\n     { actual: candidate(\"\
    eeeee\"), expected: false },\n     { actual: candidate(\"A\"), expected: true\
    \ },\n     { actual: candidate(\"Pumpkin pie \"), expected: false },\n     { actual:\
    \ candidate(\"Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"eeeee e \"), expected: false\
    \ },\n     { actual: candidate(\"apple pie\"), expected: false },\n     { actual:\
    \ candidate(\"apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmphgymm38u_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmphgymm38u_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmphgymm38u_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    if len(txt) == 0 {\n        return false\n    }\n    if len(txt) == 1 {\n\
    \        return true\n    }\n    if txt[len(txt)-1] == ' ' {\n        return false\n\
    \    }\n    if txt[len(txt)-2] == ' ' {\n        return true\n    }\n    return\
    \ false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate\
    \ := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    apple\"), expected: false },\n     { actual: candidate(\"apple pi e\"), expected:\
    \ true },\n     { actual: candidate(\"eeeee\"), expected: false },\n     { actual:\
    \ candidate(\"A\"), expected: true },\n     { actual: candidate(\"Pumpkin pie\
    \ \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"apple\
    \ pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__5\
    \ (0.00s)\n        tmpmbwgr4gz_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    if len(txt) == 0 {\n        return false\n    }\n    return txt[len(txt)-1]\
    \ >= 'a' && txt[len(txt)-1] <= 'z' || txt[len(txt)-1] >= 'A' && txt[len(txt)-1]\
    \ <= 'Z'\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate\
    \ := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    apple\"), expected: false },\n     { actual: candidate(\"apple pi e\"), expected:\
    \ true },\n     { actual: candidate(\"eeeee\"), expected: false },\n     { actual:\
    \ candidate(\"A\"), expected: true },\n     { actual: candidate(\"Pumpkin pie\
    \ \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"apple\
    \ pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmp6jscq9ih_test.go:42: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmp6jscq9ih_test.go:42: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmp6jscq9ih_test.go:42: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    if len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] >=\
    \ 'a' && txt[len(txt)-1] <= 'z' {\n        return true\n    }\n    if txt[len(txt)-1]\
    \ >= 'A' && txt[len(txt)-1] <= 'Z' {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"apple\"), expected: false },\n\
    \     { actual: candidate(\"apple pi e\"), expected: true },\n     { actual: candidate(\"\
    eeeee\"), expected: false },\n     { actual: candidate(\"A\"), expected: true\
    \ },\n     { actual: candidate(\"Pumpkin pie \"), expected: false },\n     { actual:\
    \ candidate(\"Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"eeeee e \"), expected: false\
    \ },\n     { actual: candidate(\"apple pie\"), expected: false },\n     { actual:\
    \ candidate(\"apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmphgymm38u_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmphgymm38u_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmphgymm38u_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n\
    \  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"apple\"), expected: false },\n     { actual: candidate(\"apple pi\
    \ e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected: false\
    \ },\n     { actual: candidate(\"A\"), expected: true },\n     { actual: candidate(\"\
    Pumpkin pie \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"\
    apple pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__4 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__5 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__6 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__7 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__9 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n\
    \  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"apple\"), expected: false },\n     { actual: candidate(\"apple pi\
    \ e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected: false\
    \ },\n     { actual: candidate(\"A\"), expected: true },\n     { actual: candidate(\"\
    Pumpkin pie \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"\
    apple pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__4 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__5 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__6 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__7 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__9 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    if len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] >=\
    \ 'a' && txt[len(txt)-1] <= 'z' {\n        return true\n    }\n    if txt[len(txt)-1]\
    \ >= 'A' && txt[len(txt)-1] <= 'Z' {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"apple\"), expected: false },\n\
    \     { actual: candidate(\"apple pi e\"), expected: true },\n     { actual: candidate(\"\
    eeeee\"), expected: false },\n     { actual: candidate(\"A\"), expected: true\
    \ },\n     { actual: candidate(\"Pumpkin pie \"), expected: false },\n     { actual:\
    \ candidate(\"Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"eeeee e \"), expected: false\
    \ },\n     { actual: candidate(\"apple pie\"), expected: false },\n     { actual:\
    \ candidate(\"apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmphgymm38u_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmphgymm38u_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmphgymm38u_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n\
    \  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"apple\"), expected: false },\n     { actual: candidate(\"apple pi\
    \ e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected: false\
    \ },\n     { actual: candidate(\"A\"), expected: true },\n     { actual: candidate(\"\
    Pumpkin pie \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"\
    apple pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__4 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__5 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__6 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__7 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__9 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return txt[len(txt)-1] >= 'a' && txt[len(txt)-1] <= 'z' || txt[len(txt)-1]\
    \ >= 'A' && txt[len(txt)-1] <= 'Z'\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t\
    \ *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\npanic: runtime error:\
    \ index out of range [-1] [recovered]\n\tpanic: runtime error: index out of range\
    \ [-1]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.check_if_last_char_is_a_letter(...)\n\t\
    /tmp/tmpvdu5aqcu_test.go:14\ncommand-line-arguments_test.TestCheck_If_Last_Char_Is_A_Letter(0x0?)\n\
    \t/tmp/tmpvdu5aqcu_test.go:30 +0x1c\ntesting.tRunner(0xc0001a0340, 0x527d50)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    if len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] >=\
    \ 'a' && txt[len(txt)-1] <= 'z' {\n        return true\n    }\n    if txt[len(txt)-1]\
    \ >= 'A' && txt[len(txt)-1] <= 'Z' {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"apple\"), expected: false },\n\
    \     { actual: candidate(\"apple pi e\"), expected: true },\n     { actual: candidate(\"\
    eeeee\"), expected: false },\n     { actual: candidate(\"A\"), expected: true\
    \ },\n     { actual: candidate(\"Pumpkin pie \"), expected: false },\n     { actual:\
    \ candidate(\"Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"eeeee e \"), expected: false\
    \ },\n     { actual: candidate(\"apple pie\"), expected: false },\n     { actual:\
    \ candidate(\"apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmphgymm38u_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmphgymm38u_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmphgymm38u_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    if len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] >=\
    \ 'a' && txt[len(txt)-1] <= 'z' {\n        return true\n    }\n    if txt[len(txt)-1]\
    \ >= 'A' && txt[len(txt)-1] <= 'Z' {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"apple\"), expected: false },\n\
    \     { actual: candidate(\"apple pi e\"), expected: true },\n     { actual: candidate(\"\
    eeeee\"), expected: false },\n     { actual: candidate(\"A\"), expected: true\
    \ },\n     { actual: candidate(\"Pumpkin pie \"), expected: false },\n     { actual:\
    \ candidate(\"Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"eeeee e \"), expected: false\
    \ },\n     { actual: candidate(\"apple pie\"), expected: false },\n     { actual:\
    \ candidate(\"apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmphgymm38u_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmphgymm38u_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmphgymm38u_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n\
    \  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"apple\"), expected: false },\n     { actual: candidate(\"apple pi\
    \ e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected: false\
    \ },\n     { actual: candidate(\"A\"), expected: true },\n     { actual: candidate(\"\
    Pumpkin pie \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"\
    apple pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__4 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__5 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__6 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__7 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__9 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    // your code here\n    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t\
    \ *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmp2luizmla_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmp2luizmla_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n\
    \  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"apple\"), expected: false },\n     { actual: candidate(\"apple pi\
    \ e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected: false\
    \ },\n     { actual: candidate(\"A\"), expected: true },\n     { actual: candidate(\"\
    Pumpkin pie \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"\
    apple pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__4 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__5 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__6 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__7 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__9 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n\
    \  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"apple\"), expected: false },\n     { actual: candidate(\"apple pi\
    \ e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected: false\
    \ },\n     { actual: candidate(\"A\"), expected: true },\n     { actual: candidate(\"\
    Pumpkin pie \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"\
    apple pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__4 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__5 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__6 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__7 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__9 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n\
    \  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"apple\"), expected: false },\n     { actual: candidate(\"apple pi\
    \ e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected: false\
    \ },\n     { actual: candidate(\"A\"), expected: true },\n     { actual: candidate(\"\
    Pumpkin pie \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"\
    apple pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__4 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__5 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__6 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__7 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__9 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n\
    \  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"apple\"), expected: false },\n     { actual: candidate(\"apple pi\
    \ e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected: false\
    \ },\n     { actual: candidate(\"A\"), expected: true },\n     { actual: candidate(\"\
    Pumpkin pie \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"\
    apple pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__4 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__5 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__6 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__7 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__9 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    if len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] >=\
    \ 'a' && txt[len(txt)-1] <= 'z' {\n        return true\n    }\n    if txt[len(txt)-1]\
    \ >= 'A' && txt[len(txt)-1] <= 'Z' {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"apple\"), expected: false },\n\
    \     { actual: candidate(\"apple pi e\"), expected: true },\n     { actual: candidate(\"\
    eeeee\"), expected: false },\n     { actual: candidate(\"A\"), expected: true\
    \ },\n     { actual: candidate(\"Pumpkin pie \"), expected: false },\n     { actual:\
    \ candidate(\"Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"eeeee e \"), expected: false\
    \ },\n     { actual: candidate(\"apple pie\"), expected: false },\n     { actual:\
    \ candidate(\"apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmphgymm38u_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmphgymm38u_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmphgymm38u_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    if len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] >=\
    \ 'a' && txt[len(txt)-1] <= 'z' {\n        return true\n    }\n    if txt[len(txt)-1]\
    \ >= 'A' && txt[len(txt)-1] <= 'Z' {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"apple\"), expected: false },\n\
    \     { actual: candidate(\"apple pi e\"), expected: true },\n     { actual: candidate(\"\
    eeeee\"), expected: false },\n     { actual: candidate(\"A\"), expected: true\
    \ },\n     { actual: candidate(\"Pumpkin pie \"), expected: false },\n     { actual:\
    \ candidate(\"Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"eeeee e \"), expected: false\
    \ },\n     { actual: candidate(\"apple pie\"), expected: false },\n     { actual:\
    \ candidate(\"apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmphgymm38u_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmphgymm38u_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmphgymm38u_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    if len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] >=\
    \ 'a' && txt[len(txt)-1] <= 'z' {\n        return true\n    }\n    if txt[len(txt)-1]\
    \ >= 'A' && txt[len(txt)-1] <= 'Z' {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"apple\"), expected: false },\n\
    \     { actual: candidate(\"apple pi e\"), expected: true },\n     { actual: candidate(\"\
    eeeee\"), expected: false },\n     { actual: candidate(\"A\"), expected: true\
    \ },\n     { actual: candidate(\"Pumpkin pie \"), expected: false },\n     { actual:\
    \ candidate(\"Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"eeeee e \"), expected: false\
    \ },\n     { actual: candidate(\"apple pie\"), expected: false },\n     { actual:\
    \ candidate(\"apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmphgymm38u_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmphgymm38u_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmphgymm38u_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    // your code here\n    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t\
    \ *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmp2luizmla_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmp2luizmla_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    if len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] >=\
    \ 'a' && txt[len(txt)-1] <= 'z' {\n        return true\n    }\n    if txt[len(txt)-1]\
    \ >= 'A' && txt[len(txt)-1] <= 'Z' {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"apple\"), expected: false },\n\
    \     { actual: candidate(\"apple pi e\"), expected: true },\n     { actual: candidate(\"\
    eeeee\"), expected: false },\n     { actual: candidate(\"A\"), expected: true\
    \ },\n     { actual: candidate(\"Pumpkin pie \"), expected: false },\n     { actual:\
    \ candidate(\"Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"eeeee e \"), expected: false\
    \ },\n     { actual: candidate(\"apple pie\"), expected: false },\n     { actual:\
    \ candidate(\"apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmphgymm38u_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmphgymm38u_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmphgymm38u_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    if len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] >=\
    \ 'a' && txt[len(txt)-1] <= 'z' {\n        return true\n    }\n    if txt[len(txt)-1]\
    \ >= 'A' && txt[len(txt)-1] <= 'Z' {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"apple\"), expected: false },\n\
    \     { actual: candidate(\"apple pi e\"), expected: true },\n     { actual: candidate(\"\
    eeeee\"), expected: false },\n     { actual: candidate(\"A\"), expected: true\
    \ },\n     { actual: candidate(\"Pumpkin pie \"), expected: false },\n     { actual:\
    \ candidate(\"Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"eeeee e \"), expected: false\
    \ },\n     { actual: candidate(\"apple pie\"), expected: false },\n     { actual:\
    \ candidate(\"apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmphgymm38u_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmphgymm38u_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmphgymm38u_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    if len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] >=\
    \ 'a' && txt[len(txt)-1] <= 'z' {\n        return true\n    }\n    if txt[len(txt)-1]\
    \ >= 'A' && txt[len(txt)-1] <= 'Z' {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"apple\"), expected: false },\n\
    \     { actual: candidate(\"apple pi e\"), expected: true },\n     { actual: candidate(\"\
    eeeee\"), expected: false },\n     { actual: candidate(\"A\"), expected: true\
    \ },\n     { actual: candidate(\"Pumpkin pie \"), expected: false },\n     { actual:\
    \ candidate(\"Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"eeeee e \"), expected: false\
    \ },\n     { actual: candidate(\"apple pie\"), expected: false },\n     { actual:\
    \ candidate(\"apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmphgymm38u_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmphgymm38u_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmphgymm38u_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    if len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] >=\
    \ 'a' && txt[len(txt)-1] <= 'z' {\n        return true\n    }\n    if txt[len(txt)-1]\
    \ >= 'A' && txt[len(txt)-1] <= 'Z' {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"apple\"), expected: false },\n\
    \     { actual: candidate(\"apple pi e\"), expected: true },\n     { actual: candidate(\"\
    eeeee\"), expected: false },\n     { actual: candidate(\"A\"), expected: true\
    \ },\n     { actual: candidate(\"Pumpkin pie \"), expected: false },\n     { actual:\
    \ candidate(\"Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"eeeee e \"), expected: false\
    \ },\n     { actual: candidate(\"apple pie\"), expected: false },\n     { actual:\
    \ candidate(\"apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmphgymm38u_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmphgymm38u_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmphgymm38u_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n\
    \  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"apple\"), expected: false },\n     { actual: candidate(\"apple pi\
    \ e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected: false\
    \ },\n     { actual: candidate(\"A\"), expected: true },\n     { actual: candidate(\"\
    Pumpkin pie \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"\
    apple pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__4 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__5 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__6 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__7 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__9 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n\
    \  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"apple\"), expected: false },\n     { actual: candidate(\"apple pi\
    \ e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected: false\
    \ },\n     { actual: candidate(\"A\"), expected: true },\n     { actual: candidate(\"\
    Pumpkin pie \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"\
    apple pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__4 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__5 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__6 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__7 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__9 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n\
    \  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"apple\"), expected: false },\n     { actual: candidate(\"apple pi\
    \ e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected: false\
    \ },\n     { actual: candidate(\"A\"), expected: true },\n     { actual: candidate(\"\
    Pumpkin pie \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"\
    apple pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__4 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__5 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__6 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__7 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__9 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n\
    \  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"apple\"), expected: false },\n     { actual: candidate(\"apple pi\
    \ e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected: false\
    \ },\n     { actual: candidate(\"A\"), expected: true },\n     { actual: candidate(\"\
    Pumpkin pie \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"\
    apple pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__4 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__5 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__6 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__7 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__9 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n\
    \  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"apple\"), expected: false },\n     { actual: candidate(\"apple pi\
    \ e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected: false\
    \ },\n     { actual: candidate(\"A\"), expected: true },\n     { actual: candidate(\"\
    Pumpkin pie \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"\
    apple pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__4 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__5 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__6 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__7 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__9 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    if len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] >=\
    \ 'a' && txt[len(txt)-1] <= 'z' {\n        return true\n    }\n    if txt[len(txt)-1]\
    \ >= 'A' && txt[len(txt)-1] <= 'Z' {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"apple\"), expected: false },\n\
    \     { actual: candidate(\"apple pi e\"), expected: true },\n     { actual: candidate(\"\
    eeeee\"), expected: false },\n     { actual: candidate(\"A\"), expected: true\
    \ },\n     { actual: candidate(\"Pumpkin pie \"), expected: false },\n     { actual:\
    \ candidate(\"Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"eeeee e \"), expected: false\
    \ },\n     { actual: candidate(\"apple pie\"), expected: false },\n     { actual:\
    \ candidate(\"apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmphgymm38u_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmphgymm38u_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmphgymm38u_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    if len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] >=\
    \ 'a' && txt[len(txt)-1] <= 'z' {\n        return true\n    }\n    if txt[len(txt)-1]\
    \ >= 'A' && txt[len(txt)-1] <= 'Z' {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"apple\"), expected: false },\n\
    \     { actual: candidate(\"apple pi e\"), expected: true },\n     { actual: candidate(\"\
    eeeee\"), expected: false },\n     { actual: candidate(\"A\"), expected: true\
    \ },\n     { actual: candidate(\"Pumpkin pie \"), expected: false },\n     { actual:\
    \ candidate(\"Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"eeeee e \"), expected: false\
    \ },\n     { actual: candidate(\"apple pie\"), expected: false },\n     { actual:\
    \ candidate(\"apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmphgymm38u_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmphgymm38u_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmphgymm38u_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    if len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] >=\
    \ 'a' && txt[len(txt)-1] <= 'z' {\n        return true\n    }\n    if txt[len(txt)-1]\
    \ >= 'A' && txt[len(txt)-1] <= 'Z' {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"apple\"), expected: false },\n\
    \     { actual: candidate(\"apple pi e\"), expected: true },\n     { actual: candidate(\"\
    eeeee\"), expected: false },\n     { actual: candidate(\"A\"), expected: true\
    \ },\n     { actual: candidate(\"Pumpkin pie \"), expected: false },\n     { actual:\
    \ candidate(\"Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"eeeee e \"), expected: false\
    \ },\n     { actual: candidate(\"apple pie\"), expected: false },\n     { actual:\
    \ candidate(\"apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmphgymm38u_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmphgymm38u_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmphgymm38u_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n\
    \  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"apple\"), expected: false },\n     { actual: candidate(\"apple pi\
    \ e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected: false\
    \ },\n     { actual: candidate(\"A\"), expected: true },\n     { actual: candidate(\"\
    Pumpkin pie \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"\
    apple pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__4 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__5 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__6 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__7 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__9 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    if len(txt) == 0 {\n        return false\n    }\n    if len(txt) == 1 {\n\
    \        return true\n    }\n    if txt[len(txt)-1] == ' ' {\n        return false\n\
    \    }\n    if txt[len(txt)-2] == ' ' {\n        return true\n    }\n    return\
    \ false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate\
    \ := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    apple\"), expected: false },\n     { actual: candidate(\"apple pi e\"), expected:\
    \ true },\n     { actual: candidate(\"eeeee\"), expected: false },\n     { actual:\
    \ candidate(\"A\"), expected: true },\n     { actual: candidate(\"Pumpkin pie\
    \ \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"apple\
    \ pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__5\
    \ (0.00s)\n        tmpmbwgr4gz_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    // your code here\n    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t\
    \ *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmp2luizmla_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmp2luizmla_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    if len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] >=\
    \ 'a' && txt[len(txt)-1] <= 'z' {\n        return true\n    }\n    if txt[len(txt)-1]\
    \ >= 'A' && txt[len(txt)-1] <= 'Z' {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"apple\"), expected: false },\n\
    \     { actual: candidate(\"apple pi e\"), expected: true },\n     { actual: candidate(\"\
    eeeee\"), expected: false },\n     { actual: candidate(\"A\"), expected: true\
    \ },\n     { actual: candidate(\"Pumpkin pie \"), expected: false },\n     { actual:\
    \ candidate(\"Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"eeeee e \"), expected: false\
    \ },\n     { actual: candidate(\"apple pie\"), expected: false },\n     { actual:\
    \ candidate(\"apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmphgymm38u_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmphgymm38u_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmphgymm38u_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    if len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] >=\
    \ 'a' && txt[len(txt)-1] <= 'z' {\n        return true\n    }\n    if txt[len(txt)-1]\
    \ >= 'A' && txt[len(txt)-1] <= 'Z' {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"apple\"), expected: false },\n\
    \     { actual: candidate(\"apple pi e\"), expected: true },\n     { actual: candidate(\"\
    eeeee\"), expected: false },\n     { actual: candidate(\"A\"), expected: true\
    \ },\n     { actual: candidate(\"Pumpkin pie \"), expected: false },\n     { actual:\
    \ candidate(\"Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"eeeee e \"), expected: false\
    \ },\n     { actual: candidate(\"apple pie\"), expected: false },\n     { actual:\
    \ candidate(\"apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmphgymm38u_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmphgymm38u_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmphgymm38u_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    if len(txt) == 0 {\n        return false\n    }\n    return txt[len(txt)-1]\
    \ >= 'a' && txt[len(txt)-1] <= 'z' || txt[len(txt)-1] >= 'A' && txt[len(txt)-1]\
    \ <= 'Z'\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate\
    \ := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    apple\"), expected: false },\n     { actual: candidate(\"apple pi e\"), expected:\
    \ true },\n     { actual: candidate(\"eeeee\"), expected: false },\n     { actual:\
    \ candidate(\"A\"), expected: true },\n     { actual: candidate(\"Pumpkin pie\
    \ \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"apple\
    \ pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmp6jscq9ih_test.go:42: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmp6jscq9ih_test.go:42: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmp6jscq9ih_test.go:42: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    if len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] >=\
    \ 'a' && txt[len(txt)-1] <= 'z' {\n        return true\n    }\n    if txt[len(txt)-1]\
    \ >= 'A' && txt[len(txt)-1] <= 'Z' {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"apple\"), expected: false },\n\
    \     { actual: candidate(\"apple pi e\"), expected: true },\n     { actual: candidate(\"\
    eeeee\"), expected: false },\n     { actual: candidate(\"A\"), expected: true\
    \ },\n     { actual: candidate(\"Pumpkin pie \"), expected: false },\n     { actual:\
    \ candidate(\"Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"eeeee e \"), expected: false\
    \ },\n     { actual: candidate(\"apple pie\"), expected: false },\n     { actual:\
    \ candidate(\"apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmphgymm38u_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmphgymm38u_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmphgymm38u_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    // your code here\n    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t\
    \ *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmp2luizmla_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmp2luizmla_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n\
    \  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"apple\"), expected: false },\n     { actual: candidate(\"apple pi\
    \ e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected: false\
    \ },\n     { actual: candidate(\"A\"), expected: true },\n     { actual: candidate(\"\
    Pumpkin pie \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"\
    apple pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__4 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__5 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__6 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__7 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__9 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return txt[len(txt)-1:] >= \"a\" && txt[len(txt)-1:] <= \"z\" || txt[len(txt)-1:]\
    \ >= \"A\" && txt[len(txt)-1:] <= \"Z\"\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t\
    \ *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\npanic: runtime error:\
    \ slice bounds out of range [-1:] [recovered]\n\tpanic: runtime error: slice bounds\
    \ out of range [-1:]\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.check_if_last_char_is_a_letter(...)\n\t\
    /tmp/tmpjczop26h_test.go:14\ncommand-line-arguments_test.TestCheck_If_Last_Char_Is_A_Letter(0x0?)\n\
    \t/tmp/tmpjczop26h_test.go:30 +0x13f\ntesting.tRunner(0xc000199040, 0x527d80)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n\
    \  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"apple\"), expected: false },\n     { actual: candidate(\"apple pi\
    \ e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected: false\
    \ },\n     { actual: candidate(\"A\"), expected: true },\n     { actual: candidate(\"\
    Pumpkin pie \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"\
    apple pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__4 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__5 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__6 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__7 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__9 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n\
    \  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"apple\"), expected: false },\n     { actual: candidate(\"apple pi\
    \ e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected: false\
    \ },\n     { actual: candidate(\"A\"), expected: true },\n     { actual: candidate(\"\
    Pumpkin pie \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"\
    apple pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__4 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__5 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__6 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__7 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__9 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    if len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] >=\
    \ 'a' && txt[len(txt)-1] <= 'z' {\n        return true\n    }\n    if txt[len(txt)-1]\
    \ >= 'A' && txt[len(txt)-1] <= 'Z' {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"apple\"), expected: false },\n\
    \     { actual: candidate(\"apple pi e\"), expected: true },\n     { actual: candidate(\"\
    eeeee\"), expected: false },\n     { actual: candidate(\"A\"), expected: true\
    \ },\n     { actual: candidate(\"Pumpkin pie \"), expected: false },\n     { actual:\
    \ candidate(\"Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"eeeee e \"), expected: false\
    \ },\n     { actual: candidate(\"apple pie\"), expected: false },\n     { actual:\
    \ candidate(\"apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmphgymm38u_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmphgymm38u_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmphgymm38u_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    if len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1] >=\
    \ 'a' && txt[len(txt)-1] <= 'z' {\n        return true\n    }\n    if txt[len(txt)-1]\
    \ >= 'A' && txt[len(txt)-1] <= 'Z' {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"apple\"), expected: false },\n\
    \     { actual: candidate(\"apple pi e\"), expected: true },\n     { actual: candidate(\"\
    eeeee\"), expected: false },\n     { actual: candidate(\"A\"), expected: true\
    \ },\n     { actual: candidate(\"Pumpkin pie \"), expected: false },\n     { actual:\
    \ candidate(\"Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"eeeee e \"), expected: false\
    \ },\n     { actual: candidate(\"apple pie\"), expected: false },\n     { actual:\
    \ candidate(\"apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmphgymm38u_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmphgymm38u_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmphgymm38u_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return txt[len(txt)-1] >= 'a' && txt[len(txt)-1] <= 'z' || txt[len(txt)-1]\
    \ >= 'A' && txt[len(txt)-1] <= 'Z'\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t\
    \ *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\npanic: runtime error:\
    \ index out of range [-1] [recovered]\n\tpanic: runtime error: index out of range\
    \ [-1]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.check_if_last_char_is_a_letter(...)\n\t\
    /tmp/tmpvdu5aqcu_test.go:14\ncommand-line-arguments_test.TestCheck_If_Last_Char_Is_A_Letter(0x0?)\n\
    \t/tmp/tmpvdu5aqcu_test.go:30 +0x1c\ntesting.tRunner(0xc0001a0340, 0x527d50)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return true\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n\
    \  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"apple\"), expected: false },\n     { actual: candidate(\"apple pi\
    \ e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected: false\
    \ },\n     { actual: candidate(\"A\"), expected: true },\n     { actual: candidate(\"\
    Pumpkin pie \"), expected: false },\n     { actual: candidate(\"Pumpkin pie 1\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"eeeee e \"), expected: false },\n     { actual: candidate(\"\
    apple pie\"), expected: false },\n     { actual: candidate(\"apple pi e \"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__0\
    \ (0.00s)\n        tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__2 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__4 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__5 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__6 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__7 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__8 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__9 (0.00s)\n      \
    \  tmp50vwaup7_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    // your code here\n    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t\
    \ *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmp2luizmla_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmp2luizmla_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\
    \n    \"fmt\"\n)\n\n// Create a function that returns True if the last character\n\
    // of a given string is an alphabetical character and is not\n// a part of a word,\
    \ and False otherwise.\n// Note: \"word\" is a group of characters separated by\
    \ space.\n// Examples:\nfunc check_if_last_char_is_a_letter(txt string) bool {\n\
    \    return false\n}\n\nfunc TestCheck_If_Last_Char_Is_A_Letter(t *testing.T)\
    \ {\n  candidate := check_if_last_char_is_a_letter\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"apple\"), expected: false },\n     { actual: candidate(\"\
    apple pi e\"), expected: true },\n     { actual: candidate(\"eeeee\"), expected:\
    \ false },\n     { actual: candidate(\"A\"), expected: true },\n     { actual:\
    \ candidate(\"Pumpkin pie \"), expected: false },\n     { actual: candidate(\"\
    Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"), expected:\
    \ false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n     {\
    \ actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
    apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCheck_If_Last_Char_Is_A_Letter (0.00s)\n    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__1\
    \ (0.00s)\n        tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCheck_If_Last_Char_Is_A_Letter/test_num__3 (0.00s)\n      \
    \  tmphyciep2l_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
