name: HumanEval_116_sort_array
language: go_test.go
prompt: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
  // In this Kata, you have to sort an array of non-negative integers according to\n\
  // number of ones in their binary representation in ascending order.\n// For similar\
  \ number of ones, sort based on decimal value.\n// It must be implemented like this:\n\
  func sort_array(arr []int) []int {\n"
tests: "func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
  \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests :=\
  \ []test{\n     { actual: candidate([]int{1, 5, 2, 3, 4}), expected: []int{1, 2,\
  \ 4, 3, 5} },\n     { actual: candidate([]int{-2, -3, -4, -5, -6}), expected: []int{-4,\
  \ -2, -6, -5, -3} },\n     { actual: candidate([]int{1, 0, 2, 3, 4}), expected:\
  \ []int{0, 1, 2, 4, 3} },\n     { actual: candidate([]int{}), expected: []int{}\
  \ },\n     { actual: candidate([]int{2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), expected:\
  \ []int{2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77} },\n     { actual: candidate([]int{3,\
  \ 6, 44, 12, 32, 5}), expected: []int{32, 3, 5, 6, 12, 44} },\n     { actual: candidate([]int{2,\
  \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n     { actual: candidate([]int{2,\
  \ 4, 8, 16, 32}), expected: []int{2, 4, 8, 16, 32} },\n   }\n\n\tfor i, tc := range\
  \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\
  \tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
  \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\
  \t}\n}\n"
completions: ["    // your code here\n    return arr\n}\n", "    // your code here\n\
    \    return arr\n}\n", "    // your code here\n    return arr\n}\n", "    // your\
    \ code here\n    return arr\n}\n", "    // your code here\n    return arr\n}\n",
  "    // your code here\n    return arr\n}\n", "    // your code here\n    return\
    \ arr\n}\n", "    var ones []int\n    var zeros []int\n    for _, v := range arr\
    \ {\n        if v == 0 {\n            zeros = append(zeros, v)\n        } else\
    \ {\n            ones = append(ones, v)\n        }\n    }\n    return append(zeros,\
    \ ones...)\n}\n", "    // your code here\n    return arr\n}\n", "    // your code\
    \ here\n    return arr\n}\n", "    // your code here\n    return arr\n}\n", " \
    \   // your code here\n    return arr\n}\n", "    // sort the array by number\
    \ of ones in binary representation\n    // if two numbers have the same number\
    \ of ones, sort by decimal value\n    // return the sorted array\n    return arr\n\
    }\n", "    // your code here\n    return arr\n}\n", "    // your code here\n \
    \   return arr\n}\n", "    // your code here\n    return arr\n}\n", "    // your\
    \ code here\n    return arr\n}\n", "    // your code here\n    return arr\n}\n",
  "    // your code here\n    return arr\n}\n", "    // your code here\n    return\
    \ arr\n}\n", "    // your code here\n    return arr\n}\n", "    // your code here\n\
    \    return arr\n}\n", "    // your code here\n    return arr\n}\n", "    // your\
    \ code here\n    return arr\n}\n", "    // your code here\n    return arr\n}\n",
  "    // your code here\n    return arr\n}\n", "    // your code here\n    return\
    \ arr\n}\n", "    // your code here\n    return arr\n}\n", "    // your code here\n\
    \    return arr\n}\n", "    // your code here\n    return arr\n}\n", "    // your\
    \ code here\n    return arr\n}\n", "    // your code here\n    return arr\n}\n",
  "    // your code here\n    return arr\n}\n", "    // your code here\n    return\
    \ arr\n}\n", "    // your code here\n    return arr\n}\n", "    // your code here\n\
    \    return arr\n}\n", "    // your code here\n    return arr\n}\n", "    // your\
    \ code here\n    return arr\n}\n", "    // your code here\n    return arr\n}\n",
  "    // your code here\n    return arr\n}\n", "    // your code here\n    return\
    \ arr\n}\n", "    // your code here\n    return arr\n}\n", "    // your code here\n\
    \    return arr\n}\n", "    var ones = make(map[int]int)\n    var zeros = make(map[int]int)\n\
    \    var result = make([]int, len(arr))\n    for _, v := range arr {\n       \
    \ if v == 0 {\n            zeros[v] = v\n        } else {\n            ones[v]\
    \ = v\n        }\n    }\n    var i = 0\n    for _, v := range zeros {\n      \
    \  result[i] = v\n        i++\n    }\n    for _, v := range ones {\n        result[i]\
    \ = v\n        i++\n    }\n    return result\n}\n", "    fmt.Println(arr)\n  \
    \  return arr\n}\n", "    // your code here\n    return arr\n}\n", "    // your\
    \ code here\n    return arr\n}\n", "    // your code here\n    return arr\n}\n",
  "    // your code here\n    return arr\n}\n", "    // your code here\n    return\
    \ arr\n}\n", "    // your code here\n    return arr\n}\n", "    // your code here\n\
    \    return arr\n}\n", "    // your code here\n    return arr\n}\n", "    // your\
    \ code here\n    return arr\n}\n", "    // your code here\n    return arr\n}\n",
  "    // your code here\n    return arr\n}\n", "    // your code here\n    return\
    \ arr\n}\n", "    // your code here\n    return arr\n}\n", "    var ones []int\n\
    \    for _, v := range arr {\n        ones = append(ones, count_ones(v))\n   \
    \ }\n    fmt.Println(ones)\n    return arr\n}\n", "    // your code here\n   \
    \ return arr\n}\n", "    // your code here\n    return arr\n}\n", "    // your\
    \ code here\n    return arr\n}\n", "    // your code here\n    return arr\n}\n",
  "    // your code here\n    return arr\n}\n", "    // your code here\n    return\
    \ arr\n}\n", "    // your code here\n    return arr\n}\n", "    // your code here\n\
    \    return arr\n}\n", "    // your code here\n    return arr\n}\n", "    // your\
    \ code here\n    return arr\n}\n", "    // your code here\n    return arr\n}\n",
  "    // your code here\n    return arr\n}\n", "    // your code here\n    return\
    \ arr\n}\n", "    // your code here\n    return arr\n}\n", "    // your code here\n\
    \    return arr\n}\n", "    // your code here\n    return arr\n}\n", "    // your\
    \ code here\n    return arr\n}\n", "    // your code here\n    return arr\n}\n",
  "    fmt.Println(arr)\n    return arr\n}\n", "    var sorted []int\n    var ones\
    \ []int\n    var zeros []int\n    for _, v := range arr {\n        if v == 0 {\n\
    \            zeros = append(zeros, v)\n        } else {\n            ones = append(ones,\
    \ v)\n        }\n    }\n    sorted = append(sorted, zeros...)\n    sorted = append(sorted,\
    \ ones...)\n    return sorted\n}\n", "    // your code here\n    return arr\n\
    }\n", "    var ones []int\n    var zeros []int\n    for _, v := range arr {\n\
    \        if v == 0 {\n            zeros = append(zeros, v)\n        } else {\n\
    \            ones = append(ones, v)\n        }\n    }\n    return append(zeros,\
    \ ones...)\n}\n", "    // your code here\n    return arr\n}\n", "    // your code\
    \ here\n    return arr\n}\n", "    // your code here\n    return arr\n}\n", " \
    \   // your code here\n    return arr\n}\n", "    // your code here\n    return\
    \ arr\n}\n", "    // your code here\n    return arr\n}\n", "    // your code here\n\
    \    return arr\n}\n", "    // your code here\n    return arr\n}\n", "    // your\
    \ code here\n    return arr\n}\n", "    // your code here\n    return arr\n}\n",
  "    // your code here\n    return arr\n}\n", "    // your code here\n    return\
    \ arr\n}\n", "    // your code here\n    return arr\n}\n", "    // your code here\n\
    \    return arr\n}\n", "    // your code here\n    return arr\n}\n", "    // your\
    \ code here\n    return arr\n}\n", "    // your code here\n    return arr\n}\n",
  "    // your code here\n    return arr\n}\n", "    // your code here\n    return\
    \ arr\n}\n", "    // your code here\n    return arr\n}\n", "    // your code here\n\
    \    return arr\n}\n", "    // your code here\n    return arr\n}\n", "    // your\
    \ code here\n    return arr\n}\n", "    // sort the array\n    return arr\n}\n",
  "    // your code here\n    return arr\n}\n", "    // your code here\n    return\
    \ arr\n}\n", "    // your code here\n    return arr\n}\n", "    // your code here\n\
    \    return arr\n}\n", "    // your code here\n    return arr\n}\n", "    // your\
    \ code here\n    return arr\n}\n", "    // your code here\n    return []int{}\n\
    }\n", "    // your code here\n    return arr\n}\n", "    // your code here\n \
    \   return arr\n}\n", "    // your code here\n    return arr\n}\n", "    // your\
    \ code here\n    return arr\n}\n", "    // your code here\n    return arr\n}\n",
  "    // your code here\n    return arr\n}\n", "    // your code here\n    return\
    \ arr\n}\n", "    // your code here\n    return arr\n}\n", "    // your code here\n\
    \    return arr\n}\n", "    // your code here\n    return arr\n}\n", "    // your\
    \ code here\n    return arr\n}\n", "    // your code here\n    return arr\n}\n",
  "    // your code here\n    return arr\n}\n", "    // your code here\n    return\
    \ arr\n}\n", "    // your code here\n    return arr\n}\n", "    // your code here\n\
    \    return arr\n}\n", "    // your code here\n    return arr\n}\n", "    // your\
    \ code here\n    return arr\n}\n", "    // your code here\n    return arr\n}\n",
  "    // your code here\n    return arr\n}\n", "    // your code here\n    return\
    \ arr\n}\n", "    // your code here\n    return arr\n}\n", "    // your code here\n\
    \    return arr\n}\n", "    // your code here\n    return arr\n}\n", "    // your\
    \ code here\n    return arr\n}\n", "    // your code here\n    return arr\n}\n",
  "    // your code here\n    return arr\n}\n", "    // your code here\n    return\
    \ arr\n}\n", "    // your code here\n    return arr\n}\n", "    // your code here\n\
    \    return arr\n}\n", "    // your code here\n    return arr\n}\n", "    // your\
    \ code here\n    return arr\n}\n", "    // your code here\n    return arr\n}\n",
  "    // your code here\n    return arr\n}\n", "    // your code here\n    return\
    \ arr\n}\n", "    // your code here\n    return arr\n}\n", "    // your code here\n\
    \    return arr\n}\n", "    // your code here\n    return arr\n}\n", "    // your\
    \ code here\n    return arr\n}\n", "    var ones [][]int\n    for _, v := range\
    \ arr {\n        ones = append(ones, []int{v, count_ones(v)})\n    }\n    for\
    \ i := 0; i < len(ones); i++ {\n        for j := i + 1; j < len(ones); j++ {\n\
    \            if ones[i][1] > ones[j][1] {\n                ones[i], ones[j] =\
    \ ones[j], ones[i]\n            } else if ones[i][1] == ones[j][1] && ones[i][0]\
    \ > ones[j][0] {\n                ones[i], ones[j] = ones[j], ones[i]\n      \
    \      }\n        }\n    }\n    var result []int\n    for _, v := range ones {\n\
    \        result = append(result, v[0])\n    }\n    return result\n}\n", "    //\
    \ your code here\n    return arr\n}\n", "    // your code here\n    return arr\n\
    }\n", "    // sort the array\n    return arr\n}\n", "    fmt.Println(arr)\n  \
    \  return arr\n}\n", "    // your code here\n    return arr\n}\n", "    // your\
    \ code here\n    return arr\n}\n", "    // your code here\n    return arr\n}\n",
  "    // your code here\n    return arr\n}\n", "    // your code here\n    return\
    \ arr\n}\n", "    // your code here\n    return arr\n}\n", "    // your code here\n\
    \    return arr\n}\n", "    // your code here\n    return arr\n}\n", "    // your\
    \ code here\n    return arr\n}\n", "    // your code here\n    return arr\n}\n",
  "    // your code here\n    return arr\n}\n", "    // your code here\n    return\
    \ arr\n}\n", "    // your code here\n    return arr\n}\n", "    // your code here\n\
    \    return arr\n}\n", "    // your code here\n    return arr\n}\n", "    // your\
    \ code here\n    return arr\n}\n", "    // your code here\n    return arr\n}\n",
  "    // your code here\n    return arr\n}\n", "    // your code here\n    return\
    \ arr\n}\n", "    // your code here\n    return arr\n}\n", "    // your code here\n\
    \    return arr\n}\n", "    // your code here\n    return arr\n}\n", "    // your\
    \ code here\n    return arr\n}\n", "    // your code here\n    return arr\n}\n",
  "    var sorted []int\n    for _, v := range arr {\n        sorted = append(sorted,\
    \ v)\n    }\n    for i := 0; i < len(sorted); i++ {\n        for j := i + 1; j\
    \ < len(sorted); j++ {\n            if count_ones(sorted[i]) > count_ones(sorted[j])\
    \ {\n                sorted[i], sorted[j] = sorted[j], sorted[i]\n           \
    \ } else if count_ones(sorted[i]) == count_ones(sorted[j]) {\n               \
    \ if sorted[i] > sorted[j] {\n                    sorted[i], sorted[j] = sorted[j],\
    \ sorted[i]\n                }\n            }\n        }\n    }\n    return sorted\n\
    }\n", "    // your code here\n    return arr\n}\n", "    // your code here\n \
    \   return arr\n}\n", "    var ones [][]int\n    for _, v := range arr {\n   \
    \     ones = append(ones, []int{v, count_ones(v)})\n    }\n    for i := 0; i <\
    \ len(ones); i++ {\n        for j := i + 1; j < len(ones); j++ {\n           \
    \ if ones[i][1] > ones[j][1] {\n                ones[i], ones[j] = ones[j], ones[i]\n\
    \            } else if ones[i][1] == ones[j][1] && ones[i][0] > ones[j][0] {\n\
    \                ones[i], ones[j] = ones[j], ones[i]\n            }\n        }\n\
    \    }\n    var result []int\n    for _, v := range ones {\n        result = append(result,\
    \ v[0])\n    }\n    return result\n}\n", "    // your code here\n    return arr\n\
    }\n", "    // your code here\n    return arr\n}\n", "    // your code here\n \
    \   return arr\n}\n", "    // your code here\n    return arr\n}\n", "    // your\
    \ code here\n    return arr\n}\n", "    // your code here\n    return arr\n}\n",
  "    // your code here\n    return arr\n}\n", "    // your code here\n    return\
    \ arr\n}\n", "    // your code here\n    return arr\n}\n", "    // your code here\n\
    \    return arr\n}\n", "    // your code here\n    return arr\n}\n", "    // your\
    \ code here\n    return arr\n}\n", "    // your code here\n    return arr\n}\n",
  "    // your code here\n    return arr\n}\n", "    // your code here\n    return\
    \ arr\n}\n", "    // your code here\n    return arr\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
